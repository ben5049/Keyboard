
keyboard_left_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000165d8  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002fc  08016698  08016698  00017698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016994  08016994  00018154  2**0
                  CONTENTS
  4 .ARM          00000000  08016994  08016994  00018154  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016994  08016994  00018154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016994  08016994  00017994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08016998  08016998  00017998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  20000000  0801699c  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b0ac  20000154  08016af0  00018154  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000b200  08016af0  00018200  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00018154  2**0
                  CONTENTS, READONLY
 12 .debug_info   00046230  00000000  00000000  00018182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000b6d0  00000000  00000000  0005e3b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002748  00000000  00000000  00069a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001c2c  00000000  00000000  0006c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000301a4  00000000  00000000  0006ddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00047172  00000000  00000000  0009dfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6652  00000000  00000000  000e5112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000041e7  00000000  00000000  001cb764  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033c  00000000  00000000  001cf94b  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  001cfc88  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000891c  00000000  00000000  001cfcac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000119  00000000  00000000  001d85c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000154 	.word	0x20000154
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08016680 	.word	0x08016680

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000158 	.word	0x20000158
 8000104:	08016680 	.word	0x08016680
	...

08000110 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000110:	b672      	cpsid	i
@    ORRS    r1, r1, r2                              @ Set the CYCCNTENA bit
@    STR     r1, [r0]                                @ Enable the cycle count register
@
@    /* Setup Vector Table Offset Register.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000112:	4816      	ldr	r0, [pc, #88]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000114:	4a16      	ldr	r2, [pc, #88]	@ (8000170 <__tx_DBGHandler+0x8>)
    ADD     r0, r0, r2                              @ Build vector base register
 8000116:	4410      	add	r0, r2
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000118:	4916      	ldr	r1, [pc, #88]	@ (8000174 <__tx_DBGHandler+0xc>)
    STR     r1, [r0]                                @ Set vector table address
 800011a:	6001      	str	r1, [r0, #0]
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800011c:	4816      	ldr	r0, [pc, #88]	@ (8000178 <__tx_DBGHandler+0x10>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800011e:	4915      	ldr	r1, [pc, #84]	@ (8000174 <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000120:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000122:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000124:	4811      	ldr	r0, [pc, #68]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r1, =SYSTICK_CYCLES
 8000126:	4915      	ldr	r1, [pc, #84]	@ (800017c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000128:	6141      	str	r1, [r0, #20]
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 800012a:	4915      	ldr	r1, [pc, #84]	@ (8000180 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800012c:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */

    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 800012e:	4915      	ldr	r1, [pc, #84]	@ (8000184 <__tx_DBGHandler+0x1c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000130:	480e      	ldr	r0, [pc, #56]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD18                              //
 8000132:	4a15      	ldr	r2, [pc, #84]	@ (8000188 <__tx_DBGHandler+0x20>)
    ADD     r0, r0, r2                              //
 8000134:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 4-7 Priority Registers
 8000136:	6001      	str	r1, [r0, #0]
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000138:	4914      	ldr	r1, [pc, #80]	@ (800018c <__tx_DBGHandler+0x24>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 800013a:	480c      	ldr	r0, [pc, #48]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD1C                              //
 800013c:	4a14      	ldr	r2, [pc, #80]	@ (8000190 <__tx_DBGHandler+0x28>)
    ADD     r0, r0, r2                              //
 800013e:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 8-11 Priority Registers
 8000140:	6001      	str	r1, [r0, #0]
                                                    // Note: SVC must be lowest priority, which is 0xFF
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000142:	4914      	ldr	r1, [pc, #80]	@ (8000194 <__tx_DBGHandler+0x2c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000144:	4809      	ldr	r0, [pc, #36]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD20                              //
 8000146:	4a14      	ldr	r2, [pc, #80]	@ (8000198 <__tx_DBGHandler+0x30>)
    ADD     r0, r0, r2                              //
 8000148:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 12-15 Priority Registers
 800014a:	6001      	str	r1, [r0, #0]
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 800014c:	4770      	bx	lr

0800014e <__tx_BadHandler>:

/* Define shells for each of the unused vectors.  */
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800014e:	e7fe      	b.n	800014e <__tx_BadHandler>

08000150 <__tx_HardfaultHandler>:

/* added to catch the hardfault */
    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000150:	e7fe      	b.n	8000150 <__tx_HardfaultHandler>

08000152 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0, lr}
 8000152:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* BL <your C Function>.... */
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000154:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000156:	468e      	mov	lr, r1
    BX      lr
 8000158:	4770      	bx	lr

0800015a <SysTick_Handler>:
__tx_SysTickHandler:
    .thumb_func
SysTick_Handler:
// VOID SysTick_Handler (VOID)
// {
    PUSH    {r0, lr}
 800015a:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800015c:	f000 f8a8 	bl	80002b0 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000160:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000162:	468e      	mov	lr, r1
    BX      lr
 8000164:	4770      	bx	lr

08000166 <__tx_NMIHandler>:

/* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000166:	e7fe      	b.n	8000166 <__tx_NMIHandler>

08000168 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000168:	e7fe      	b.n	8000168 <__tx_DBGHandler>
 800016a:	0000      	.short	0x0000
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 800016c:	e000e000 	.word	0xe000e000
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000170:	00000d08 	.word	0x00000d08
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000174:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000178:	2000a7e4 	.word	0x2000a7e4
    LDR     r1, =SYSTICK_CYCLES
 800017c:	0009c3ff 	.word	0x0009c3ff
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 8000180:	00000007 	.word	0x00000007
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000184:	00000000 	.word	0x00000000
    LDR     r2, =0xD18                              //
 8000188:	00000d18 	.word	0x00000d18
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 800018c:	ff000000 	.word	0xff000000
    LDR     r2, =0xD1C                              //
 8000190:	00000d1c 	.word	0x00000d1c
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000194:	40ff0000 	.word	0x40ff0000
    LDR     r2, =0xD20                              //
 8000198:	00000d20 	.word	0x00000d20
 800019c:	00000000 	.word	0x00000000

080001a0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOVS    r0, #0                                  @ Build value for TX_FALSE
 80001a0:	2000      	movs	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80001a2:	4a26      	ldr	r2, [pc, #152]	@ (800023c <__tx_ts_ready+0xc>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80001a4:	6010      	str	r0, [r2, #0]
@
@    /* Enable interrupts */
@
    CPSIE   i
 80001a6:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 80001a8:	4825      	ldr	r0, [pc, #148]	@ (8000240 <__tx_ts_ready+0x10>)
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 80001aa:	4926      	ldr	r1, [pc, #152]	@ (8000244 <__tx_ts_ready+0x14>)
    STR     r0, [r1]                                @ Set PENDSVBIT in ICSR
 80001ac:	6008      	str	r0, [r1, #0]
    DSB                                             @ Complete all memory accesses
 80001ae:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80001b2:	f3bf 8f6f 	isb	sy

080001b6 <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80001b6:	e7fe      	b.n	80001b6 <__tx_wait_here>

080001b8 <PendSV_Handler>:
    BL  _tx_execution_thread_exit                   @ Call the thread exit function
    POP     {r0, r1}                                @ Recover LR
    MOV     lr, r1                                  @
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80001b8:	4823      	ldr	r0, [pc, #140]	@ (8000248 <__tx_ts_ready+0x18>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80001ba:	4a24      	ldr	r2, [pc, #144]	@ (800024c <__tx_ts_ready+0x1c>)
    MOVS    r3, #0                                  @ Build NULL value
 80001bc:	2300      	movs	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80001be:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CMP     r1,#0                                   @ If NULL, skip preservation
 80001c0:	2900      	cmp	r1, #0
    BEQ     __tx_ts_new                             @
 80001c2:	d015      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80001c4:	6003      	str	r3, [r0, #0]
    MRS     r3, PSP                                 @ Pickup PSP pointer (thread's stack pointer)
 80001c6:	f3ef 8309 	mrs	r3, PSP
    SUBS    r3, r3, #16                             @ Allocate stack space
 80001ca:	3b10      	subs	r3, #16
    STM     r3!, {r4-r7}                            @ Save its remaining registers (M3 Instruction: STMDB r12!, {r4-r11})
 80001cc:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    MOV     r4,r8                                   @
 80001ce:	4644      	mov	r4, r8
    MOV     r5,r9                                   @
 80001d0:	464d      	mov	r5, r9
    MOV     r6,r10                                  @
 80001d2:	4656      	mov	r6, sl
    MOV     r7,r11                                  @
 80001d4:	465f      	mov	r7, fp
    SUBS    r3, r3, #32                             @ Allocate stack space
 80001d6:	3b20      	subs	r3, #32
    STM     r3!,{r4-r7}                             @
 80001d8:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    SUBS    r3, r3, #20                             @ Allocate stack space
 80001da:	3b14      	subs	r3, #20
    MOV     r5, lr                                  @ Move LR into R4
 80001dc:	4675      	mov	r5, lr
    STR     r5, [r3]                                @ Save LR
 80001de:	601d      	str	r5, [r3, #0]
    STR     r3, [r1, #8]                            @ Save its stack pointer
 80001e0:	608b      	str	r3, [r1, #8]
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001e2:	4c1b      	ldr	r4, [pc, #108]	@ (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r4]                                @ Pickup current time-slice
 80001e4:	6825      	ldr	r5, [r4, #0]
    CMP     r5, #0                                  @ If not active, skip processing
 80001e6:	2d00      	cmp	r5, #0
    BEQ     __tx_ts_new                             @
 80001e8:	d002      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80001ea:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    MOVS    r5, #0                                  @ Build clear value
 80001ec:	2500      	movs	r5, #0
    STR     r5, [r4]                                @ Clear time-slice
 80001ee:	6025      	str	r5, [r4, #0]

080001f0 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80001f0:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80001f2:	6811      	ldr	r1, [r2, #0]
    CMP     r1, #0                                  @
 80001f4:	2900      	cmp	r1, #0
    BEQ     __tx_ts_wait                            @ No, skip to the wait processing
 80001f6:	d014      	beq.n	8000222 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80001f8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80001fa:	b662      	cpsie	i

080001fc <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80001fc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001fe:	4c14      	ldr	r4, [pc, #80]	@ (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000200:	698d      	ldr	r5, [r1, #24]
    ADDS    r7, r7, #1                              @ Increment the thread run count
 8000202:	3701      	adds	r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 8000204:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 8000206:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r3, [r1, #8]                            @ Pickup thread's stack pointer
 8000208:	688b      	ldr	r3, [r1, #8]
    LDR     r5, [r3]                                @ Recover saved LR
 800020a:	681d      	ldr	r5, [r3, #0]
    ADDS    r3, r3, #4                              @ Position past LR
 800020c:	3304      	adds	r3, #4
    MOV     lr, r5                                  @ Restore LR
 800020e:	46ae      	mov	lr, r5
    LDM     r3!,{r4-r7}                             @ Recover thread's registers (r4-r11)
 8000210:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MOV     r11,r7                                  @
 8000212:	46bb      	mov	fp, r7
    MOV     r10,r6                                  @
 8000214:	46b2      	mov	sl, r6
    MOV     r9,r5                                   @
 8000216:	46a9      	mov	r9, r5
    MOV     r8,r4                                   @
 8000218:	46a0      	mov	r8, r4
    LDM     r3!,{r4-r7}                             @
 800021a:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MSR     PSP, r3                                 @ Setup the thread's stack pointer
 800021c:	f383 8809 	msr	PSP, r3
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 8000220:	4770      	bx	lr

08000222 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000222:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000224:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000226:	6001      	str	r1, [r0, #0]
    CMP     r1, #0                                  @ If non-NULL, a new thread is ready!
 8000228:	2900      	cmp	r1, #0
    BNE     __tx_ts_ready                           @
 800022a:	d101      	bne.n	8000230 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       @ Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       @ Enable interrupts
 800022c:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800022e:	e7f8      	b.n	8000222 <__tx_ts_wait>

08000230 <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000230:	4f08      	ldr	r7, [pc, #32]	@ (8000254 <__tx_ts_ready+0x24>)
    LDR     r5, =0xE000ED04                         @ Build base NVIC address
 8000232:	4d04      	ldr	r5, [pc, #16]	@ (8000244 <__tx_ts_ready+0x14>)
    STR     r7, [r5]                                @ Clear any PendSV
 8000234:	602f      	str	r7, [r5, #0]
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 8000236:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 8000238:	e7e0      	b.n	80001fc <__tx_ts_restore>
 800023a:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800023c:	2000a880 	.word	0x2000a880
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 8000240:	10000000 	.word	0x10000000
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 8000244:	e000ed04 	.word	0xe000ed04
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000248:	2000a7e8 	.word	0x2000a7e8
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 800024c:	2000a7ec 	.word	0x2000a7ec
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000250:	2000adec 	.word	0x2000adec
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000254:	08000000 	.word	0x08000000
	...

08000260 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000260:	6902      	ldr	r2, [r0, #16]
    MOVS    r3, #0x7                                @
 8000262:	2307      	movs	r3, #7
    BICS    r2, r2, r3                              @ Align frame for 8-byte alignment
 8000264:	439a      	bics	r2, r3
    SUBS    r2, r2, #68                             @ Subtract frame size
 8000266:	3a44      	subs	r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000268:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <_tx_thread_stack_build+0x38>)
    STR     r3, [r2, #0]                            @ Save on the stack
 800026a:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOVS    r3, #0                                  @ Build initial register value
 800026c:	2300      	movs	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r8
 800026e:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r9
 8000270:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r10
 8000272:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r11
 8000274:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r4
 8000276:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r5
 8000278:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r6
 800027a:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r7
 800027c:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800027e:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000280:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000282:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000284:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000286:	6353      	str	r3, [r2, #52]	@ 0x34
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <_tx_thread_stack_build+0x3c>)
    STR     r3, [r2, #56]                           @ Store initial lr
 800028a:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800028c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <_tx_thread_stack_build+0x40>)
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000290:	6413      	str	r3, [r2, #64]	@ 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000292:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000294:	4770      	bx	lr
 8000296:	0000      	.short	0x0000
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000298:	fffffffd 	.word	0xfffffffd
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 800029c:	ffffffff 	.word	0xffffffff
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 80002a0:	01000000 	.word	0x01000000
	...

080002b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80002b0:	4923      	ldr	r1, [pc, #140]	@ (8000340 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80002b2:	6808      	ldr	r0, [r1, #0]
    ADDS    r0, r0, #1                              @ Increment system clock
 80002b4:	3001      	adds	r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80002b6:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 80002b8:	4b22      	ldr	r3, [pc, #136]	@ (8000344 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80002ba:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80002bc:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80002be:	d006      	beq.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUBS    r2, r2, #1                              @ Decrement the time-slice
 80002c0:	3a01      	subs	r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80002c2:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80002c4:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80002c6:	d102      	bne.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80002c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    MOVS    r0, #1                                  @ Build expired value
 80002ca:	2001      	movs	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80002cc:	6018      	str	r0, [r3, #0]

080002ce <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80002ce:	491f      	ldr	r1, [pc, #124]	@ (800034c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80002d0:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80002d2:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80002d4:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80002d6:	d003      	beq.n	80002e0 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    MOVS    r2, #1                                  @ Build expired value
 80002da:	2201      	movs	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80002dc:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80002de:	e007      	b.n	80002f0 <__tx_timer_done>

080002e0 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADDS    r0, r0, #4                              @ Move to next timer
 80002e0:	3004      	adds	r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80002e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80002e4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80002e6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80002e8:	d101      	bne.n	80002ee <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80002ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80002ec:	6818      	ldr	r0, [r3, #0]

080002ee <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80002ee:	6008      	str	r0, [r1, #0]

080002f0 <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80002f2:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80002f4:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80002f6:	d103      	bne.n	8000300 <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80002f8:	4915      	ldr	r1, [pc, #84]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80002fa:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80002fc:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80002fe:	d01b      	beq.n	8000338 <__tx_timer_nothing_expired>

08000300 <__tx_something_expired>:
@
__tx_something_expired:
@
@
    PUSH    {r0, lr}                                @ Save the lr register on the stack
 8000300:	b501      	push	{r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 8000302:	4913      	ldr	r1, [pc, #76]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000304:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000306:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000308:	d001      	beq.n	800030e <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process()@
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 800030a:	f012 fc23 	bl	8012b54 <_tx_timer_expiration_process>

0800030e <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 8000310:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 8000312:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000314:	d00e      	beq.n	8000334 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000316:	f012 fb93 	bl	8012a40 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800031a:	4810      	ldr	r0, [pc, #64]	@ (800035c <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 800031c:	6801      	ldr	r1, [r0, #0]
    CMP     r1, #0                                  @
 800031e:	2900      	cmp	r1, #0
    BNE     __tx_timer_skip_time_slice              @ Yes, skip the PendSV logic
 8000320:	d108      	bne.n	8000334 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000322:	480f      	ldr	r0, [pc, #60]	@ (8000360 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000326:	4a0f      	ldr	r2, [pc, #60]	@ (8000364 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000328:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 800032a:	480f      	ldr	r0, [pc, #60]	@ (8000368 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800032c:	4a0f      	ldr	r2, [pc, #60]	@ (800036c <__tx_timer_nothing_expired+0x34>)
    CMP     r1, r3                                  @ Are they the same?
 800032e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 8000330:	d000      	beq.n	8000334 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 8000332:	6002      	str	r2, [r0, #0]

08000334 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    POP   {r0, r1}                                  @ Recover lr register (r0 is just there for
 8000334:	bc03      	pop	{r0, r1}
    MOV   lr, r1                                    @   the 8-byte stack alignment
 8000336:	468e      	mov	lr, r1

08000338 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000338:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 800033c:	4770      	bx	lr
 800033e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000340:	2000a88c 	.word	0x2000a88c
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000344:	2000adec 	.word	0x2000adec
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000348:	2000a890 	.word	0x2000a890
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 800034c:	2000a91c 	.word	0x2000a91c
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 8000350:	2000a920 	.word	0x2000a920
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000354:	2000a918 	.word	0x2000a918
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000358:	2000a914 	.word	0x2000a914
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800035c:	2000a880 	.word	0x2000a880
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000360:	2000a7e8 	.word	0x2000a7e8
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000364:	2000a7ec 	.word	0x2000a7ec
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000368:	e000ed04 	.word	0xe000ed04
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800036c:	10000000 	.word	0x10000000

08000370 <USBPD_CAD_Init>:
 8000370:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	0015      	movs	r5, r2
 8000376:	001e      	movs	r6, r3
 8000378:	2400      	movs	r4, #0
 800037a:	4668      	mov	r0, sp
 800037c:	7a00      	ldrb	r0, [r0, #8]
 800037e:	2803      	cmp	r0, #3
 8000380:	d301      	bcc.n	8000386 <USBPD_CAD_Init+0x16>
 8000382:	2401      	movs	r4, #1
 8000384:	e01f      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 8000386:	9100      	str	r1, [sp, #0]
 8000388:	2900      	cmp	r1, #0
 800038a:	d101      	bne.n	8000390 <USBPD_CAD_Init+0x20>
 800038c:	2402      	movs	r4, #2
 800038e:	e01a      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 8000390:	200c      	movs	r0, #12
 8000392:	f016 f859 	bl	8016448 <malloc>
 8000396:	0007      	movs	r7, r0
 8000398:	d101      	bne.n	800039e <USBPD_CAD_Init+0x2e>
 800039a:	2403      	movs	r4, #3
 800039c:	e013      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 800039e:	210c      	movs	r1, #12
 80003a0:	f016 f95f 	bl	8016662 <__aeabi_memclr>
 80003a4:	603e      	str	r6, [r7, #0]
 80003a6:	723c      	strb	r4, [r7, #8]
 80003a8:	9800      	ldr	r0, [sp, #0]
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	484a      	ldr	r0, [pc, #296]	@ (80004d8 <.text_6>)
 80003ae:	4669      	mov	r1, sp
 80003b0:	7a09      	ldrb	r1, [r1, #8]
 80003b2:	0089      	lsls	r1, r1, #2
 80003b4:	5047      	str	r7, [r0, r1]
 80003b6:	9800      	ldr	r0, [sp, #0]
 80003b8:	6843      	ldr	r3, [r0, #4]
 80003ba:	0032      	movs	r2, r6
 80003bc:	0029      	movs	r1, r5
 80003be:	4668      	mov	r0, sp
 80003c0:	7a00      	ldrb	r0, [r0, #8]
 80003c2:	f00d fa9d 	bl	800d900 <CAD_Init>
 80003c6:	0020      	movs	r0, r4
 80003c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080003ca <USBPD_CAD_PortEnable>:
 80003ca:	2803      	cmp	r0, #3
 80003cc:	d203      	bcs.n	80003d6 <USBPD_CAD_PortEnable+0xc>
 80003ce:	4a42      	ldr	r2, [pc, #264]	@ (80004d8 <.text_6>)
 80003d0:	0080      	lsls	r0, r0, #2
 80003d2:	5810      	ldr	r0, [r2, r0]
 80003d4:	7201      	strb	r1, [r0, #8]
 80003d6:	4770      	bx	lr

080003d8 <USBPD_CAD_Process>:
 80003d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80003da:	2400      	movs	r4, #0
 80003dc:	4669      	mov	r1, sp
 80003de:	700c      	strb	r4, [r1, #0]
 80003e0:	9401      	str	r4, [sp, #4]
 80003e2:	2500      	movs	r5, #0
 80003e4:	43ed      	mvns	r5, r5
 80003e6:	4f3d      	ldr	r7, [pc, #244]	@ (80004dc <.text_7>)
 80003e8:	483b      	ldr	r0, [pc, #236]	@ (80004d8 <.text_6>)
 80003ea:	00a1      	lsls	r1, r4, #2
 80003ec:	1846      	adds	r6, r0, r1
 80003ee:	6830      	ldr	r0, [r6, #0]
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d06c      	beq.n	80004ce <USBPD_CAD_Process+0xf6>
 80003f4:	7a00      	ldrb	r0, [r0, #8]
 80003f6:	2801      	cmp	r0, #1
 80003f8:	d169      	bne.n	80004ce <USBPD_CAD_Process+0xf6>
 80003fa:	aa01      	add	r2, sp, #4
 80003fc:	4669      	mov	r1, sp
 80003fe:	b2e0      	uxtb	r0, r4
 8000400:	f00d fcec 	bl	800dddc <CAD_StateMachine>
 8000404:	42a8      	cmp	r0, r5
 8000406:	d800      	bhi.n	800040a <USBPD_CAD_Process+0x32>
 8000408:	0005      	movs	r5, r0
 800040a:	4668      	mov	r0, sp
 800040c:	7800      	ldrb	r0, [r0, #0]
 800040e:	2801      	cmp	r0, #1
 8000410:	d004      	beq.n	800041c <USBPD_CAD_Process+0x44>
 8000412:	2802      	cmp	r0, #2
 8000414:	d012      	beq.n	800043c <USBPD_CAD_Process+0x64>
 8000416:	2804      	cmp	r0, #4
 8000418:	d010      	beq.n	800043c <USBPD_CAD_Process+0x64>
 800041a:	e040      	b.n	800049e <USBPD_CAD_Process+0xc6>
 800041c:	6830      	ldr	r0, [r6, #0]
 800041e:	6801      	ldr	r1, [r0, #0]
 8000420:	680a      	ldr	r2, [r1, #0]
 8000422:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <.text_8>)
 8000424:	4013      	ands	r3, r2
 8000426:	600b      	str	r3, [r1, #0]
 8000428:	6801      	ldr	r1, [r0, #0]
 800042a:	680a      	ldr	r2, [r1, #0]
 800042c:	23c0      	movs	r3, #192	@ 0xc0
 800042e:	439a      	bics	r2, r3
 8000430:	600a      	str	r2, [r1, #0]
 8000432:	6800      	ldr	r0, [r0, #0]
 8000434:	6801      	ldr	r1, [r0, #0]
 8000436:	4039      	ands	r1, r7
 8000438:	6001      	str	r1, [r0, #0]
 800043a:	e034      	b.n	80004a6 <USBPD_CAD_Process+0xce>
 800043c:	6830      	ldr	r0, [r6, #0]
 800043e:	9901      	ldr	r1, [sp, #4]
 8000440:	2901      	cmp	r1, #1
 8000442:	6801      	ldr	r1, [r0, #0]
 8000444:	680a      	ldr	r2, [r1, #0]
 8000446:	d103      	bne.n	8000450 <USBPD_CAD_Process+0x78>
 8000448:	403a      	ands	r2, r7
 800044a:	2380      	movs	r3, #128	@ 0x80
 800044c:	01db      	lsls	r3, r3, #7
 800044e:	e002      	b.n	8000456 <USBPD_CAD_Process+0x7e>
 8000450:	403a      	ands	r2, r7
 8000452:	2380      	movs	r3, #128	@ 0x80
 8000454:	019b      	lsls	r3, r3, #6
 8000456:	4313      	orrs	r3, r2
 8000458:	600b      	str	r3, [r1, #0]
 800045a:	6801      	ldr	r1, [r0, #0]
 800045c:	680b      	ldr	r3, [r1, #0]
 800045e:	22c0      	movs	r2, #192	@ 0xc0
 8000460:	4393      	bics	r3, r2
 8000462:	469c      	mov	ip, r3
 8000464:	9a01      	ldr	r2, [sp, #4]
 8000466:	0193      	lsls	r3, r2, #6
 8000468:	22c0      	movs	r2, #192	@ 0xc0
 800046a:	401a      	ands	r2, r3
 800046c:	4663      	mov	r3, ip
 800046e:	431a      	orrs	r2, r3
 8000470:	600a      	str	r2, [r1, #0]
 8000472:	6801      	ldr	r1, [r0, #0]
 8000474:	680a      	ldr	r2, [r1, #0]
 8000476:	2380      	movs	r3, #128	@ 0x80
 8000478:	015b      	lsls	r3, r3, #5
 800047a:	4313      	orrs	r3, r2
 800047c:	600b      	str	r3, [r1, #0]
 800047e:	6800      	ldr	r0, [r0, #0]
 8000480:	6801      	ldr	r1, [r0, #0]
 8000482:	074a      	lsls	r2, r1, #29
 8000484:	0fd2      	lsrs	r2, r2, #31
 8000486:	d103      	bne.n	8000490 <USBPD_CAD_Process+0xb8>
 8000488:	2208      	movs	r2, #8
 800048a:	4391      	bics	r1, r2
 800048c:	6001      	str	r1, [r0, #0]
 800048e:	e002      	b.n	8000496 <USBPD_CAD_Process+0xbe>
 8000490:	2208      	movs	r2, #8
 8000492:	430a      	orrs	r2, r1
 8000494:	6002      	str	r2, [r0, #0]
 8000496:	2168      	movs	r1, #104	@ 0x68
 8000498:	b2e0      	uxtb	r0, r4
 800049a:	f000 f925 	bl	80006e8 <USBPD_PE_Notification>
 800049e:	4668      	mov	r0, sp
 80004a0:	7800      	ldrb	r0, [r0, #0]
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d013      	beq.n	80004ce <USBPD_CAD_Process+0xf6>
 80004a6:	9a01      	ldr	r2, [sp, #4]
 80004a8:	4668      	mov	r0, sp
 80004aa:	7801      	ldrb	r1, [r0, #0]
 80004ac:	b2e0      	uxtb	r0, r4
 80004ae:	6833      	ldr	r3, [r6, #0]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4798      	blx	r3
 80004b6:	4668      	mov	r0, sp
 80004b8:	7800      	ldrb	r0, [r0, #0]
 80004ba:	2801      	cmp	r0, #1
 80004bc:	d003      	beq.n	80004c6 <USBPD_CAD_Process+0xee>
 80004be:	4668      	mov	r0, sp
 80004c0:	7800      	ldrb	r0, [r0, #0]
 80004c2:	2803      	cmp	r0, #3
 80004c4:	d103      	bne.n	80004ce <USBPD_CAD_Process+0xf6>
 80004c6:	2169      	movs	r1, #105	@ 0x69
 80004c8:	b2e0      	uxtb	r0, r4
 80004ca:	f000 f90d 	bl	80006e8 <USBPD_PE_Notification>
 80004ce:	1c64      	adds	r4, r4, #1
 80004d0:	2c03      	cmp	r4, #3
 80004d2:	d389      	bcc.n	80003e8 <USBPD_CAD_Process+0x10>
 80004d4:	0028      	movs	r0, r5
 80004d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080004d8 <.text_6>:
 80004d8:	20000170 	.word	0x20000170

080004dc <.text_7>:
 80004dc:	ffff9fff 	.word	0xffff9fff

080004e0 <.text_8>:
 80004e0:	ffffefff 	.word	0xffffefff

080004e4 <USBPD_CAD_AssertRd>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	0004      	movs	r4, r0
 80004e8:	f00f fdee 	bl	80100c8 <USBPDM1_DeAssertRp>
 80004ec:	0020      	movs	r0, r4
 80004ee:	f00f fdf5 	bl	80100dc <USBPDM1_AssertRd>
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <USBPD_CAD_AssertRp>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	0004      	movs	r4, r0
 80004f8:	f00f fe96 	bl	8010228 <USBPDM1_DeAssertRd>
 80004fc:	0020      	movs	r0, r4
 80004fe:	f00f fd2b 	bl	800ff58 <USBPDM1_AssertRp>
 8000502:	bd10      	pop	{r4, pc}

08000504 <USBPD_CAD_EnterErrorRecovery>:
 8000504:	b580      	push	{r7, lr}
 8000506:	f00d fb05 	bl	800db14 <CAD_Enter_ErrorRecovery>
 800050a:	bd01      	pop	{r0, pc}

0800050c <USBPD_CAD_SRC_SetRpResistor>:
 800050c:	b510      	push	{r4, lr}
 800050e:	2404      	movs	r4, #4
 8000510:	f00d fb66 	bl	800dbe0 <CAD_Set_ResistorRp>
 8000514:	2800      	cmp	r0, #0
 8000516:	d100      	bne.n	800051a <USBPD_CAD_SRC_SetRpResistor+0xe>
 8000518:	2400      	movs	r4, #0
 800051a:	0020      	movs	r0, r4
 800051c:	bd10      	pop	{r4, pc}

0800051e <USBPD_CAD_SetRpResistor>:
 800051e:	b580      	push	{r7, lr}
 8000520:	f7ff fff4 	bl	800050c <USBPD_CAD_SRC_SetRpResistor>
 8000524:	bd02      	pop	{r1, pc}

08000526 <USBPD_CAD_GetMemoryConsumption>:
 8000526:	2024      	movs	r0, #36	@ 0x24
 8000528:	4770      	bx	lr
	...

0800052c <USBPD_PE_Init>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	000e      	movs	r6, r1
 8000530:	0017      	movs	r7, r2
 8000532:	001c      	movs	r4, r3
 8000534:	6871      	ldr	r1, [r6, #4]
 8000536:	070a      	lsls	r2, r1, #28
 8000538:	0fd2      	lsrs	r2, r2, #31
 800053a:	d002      	beq.n	8000542 <USBPD_PE_Init+0x16>
 800053c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800053e:	2900      	cmp	r1, #0
 8000540:	d002      	beq.n	8000548 <USBPD_PE_Init+0x1c>
 8000542:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8000544:	2900      	cmp	r1, #0
 8000546:	d101      	bne.n	800054c <USBPD_PE_Init+0x20>
 8000548:	241b      	movs	r4, #27
 800054a:	e04a      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800054c:	4669      	mov	r1, sp
 800054e:	7008      	strb	r0, [r1, #0]
 8000550:	4668      	mov	r0, sp
 8000552:	7800      	ldrb	r0, [r0, #0]
 8000554:	2803      	cmp	r0, #3
 8000556:	d301      	bcc.n	800055c <USBPD_PE_Init+0x30>
 8000558:	2417      	movs	r4, #23
 800055a:	e042      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800055c:	2096      	movs	r0, #150	@ 0x96
 800055e:	00c0      	lsls	r0, r0, #3
 8000560:	f015 ff72 	bl	8016448 <malloc>
 8000564:	0005      	movs	r5, r0
 8000566:	d101      	bne.n	800056c <USBPD_PE_Init+0x40>
 8000568:	2416      	movs	r4, #22
 800056a:	e03a      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800056c:	2196      	movs	r1, #150	@ 0x96
 800056e:	00c9      	lsls	r1, r1, #3
 8000570:	f016 f877 	bl	8016662 <__aeabi_memclr>
 8000574:	487a      	ldr	r0, [pc, #488]	@ (8000760 <.text_16>)
 8000576:	4669      	mov	r1, sp
 8000578:	7809      	ldrb	r1, [r1, #0]
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	5045      	str	r5, [r0, r1]
 800057e:	602e      	str	r6, [r5, #0]
 8000580:	606f      	str	r7, [r5, #4]
 8000582:	4668      	mov	r0, sp
 8000584:	7800      	ldrb	r0, [r0, #0]
 8000586:	7428      	strb	r0, [r5, #16]
 8000588:	60ac      	str	r4, [r5, #8]
 800058a:	4876      	ldr	r0, [pc, #472]	@ (8000764 <.text_17>)
 800058c:	182b      	adds	r3, r5, r0
 800058e:	4876      	ldr	r0, [pc, #472]	@ (8000768 <.text_18>)
 8000590:	182a      	adds	r2, r5, r0
 8000592:	0031      	movs	r1, r6
 8000594:	4668      	mov	r0, sp
 8000596:	7800      	ldrb	r0, [r0, #0]
 8000598:	f005 f98c 	bl	80058b4 <USBPD_PRL_Init>
 800059c:	0004      	movs	r4, r0
 800059e:	d120      	bne.n	80005e2 <USBPD_PE_Init+0xb6>
 80005a0:	6868      	ldr	r0, [r5, #4]
 80005a2:	6801      	ldr	r1, [r0, #0]
 80005a4:	2703      	movs	r7, #3
 80005a6:	682a      	ldr	r2, [r5, #0]
 80005a8:	6852      	ldr	r2, [r2, #4]
 80005aa:	0753      	lsls	r3, r2, #29
 80005ac:	0fdb      	lsrs	r3, r3, #31
 80005ae:	d006      	beq.n	80005be <USBPD_PE_Init+0x92>
 80005b0:	2208      	movs	r2, #8
 80005b2:	430a      	orrs	r2, r1
 80005b4:	6002      	str	r2, [r0, #0]
 80005b6:	6873      	ldr	r3, [r6, #4]
 80005b8:	403b      	ands	r3, r7
 80005ba:	2201      	movs	r2, #1
 80005bc:	e005      	b.n	80005ca <USBPD_PE_Init+0x9e>
 80005be:	2208      	movs	r2, #8
 80005c0:	4391      	bics	r1, r2
 80005c2:	6001      	str	r1, [r0, #0]
 80005c4:	6873      	ldr	r3, [r6, #4]
 80005c6:	403b      	ands	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	4611      	mov	r1, r2
 80005cc:	4668      	mov	r0, sp
 80005ce:	7800      	ldrb	r0, [r0, #0]
 80005d0:	f005 f9ab 	bl	800592a <USBPD_PRL_SetHeader>
 80005d4:	6870      	ldr	r0, [r6, #4]
 80005d6:	4007      	ands	r7, r0
 80005d8:	0039      	movs	r1, r7
 80005da:	4668      	mov	r0, sp
 80005dc:	7800      	ldrb	r0, [r0, #0]
 80005de:	f005 f9e2 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 80005e2:	0020      	movs	r0, r4
 80005e4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080005e6 <USBPD_PE_TimerCounter>:
 80005e6:	495e      	ldr	r1, [pc, #376]	@ (8000760 <.text_16>)
 80005e8:	0080      	lsls	r0, r0, #2
 80005ea:	5808      	ldr	r0, [r1, r0]
 80005ec:	49b4      	ldr	r1, [pc, #720]	@ (80008c0 <.text_20>)
 80005ee:	084a      	lsrs	r2, r1, #1
 80005f0:	8bc3      	ldrh	r3, [r0, #30]
 80005f2:	4213      	tst	r3, r2
 80005f4:	d002      	beq.n	80005fc <USBPD_PE_TimerCounter+0x16>
 80005f6:	8bc3      	ldrh	r3, [r0, #30]
 80005f8:	185b      	adds	r3, r3, r1
 80005fa:	83c3      	strh	r3, [r0, #30]
 80005fc:	8c03      	ldrh	r3, [r0, #32]
 80005fe:	4213      	tst	r3, r2
 8000600:	d002      	beq.n	8000608 <USBPD_PE_TimerCounter+0x22>
 8000602:	8c03      	ldrh	r3, [r0, #32]
 8000604:	185b      	adds	r3, r3, r1
 8000606:	8403      	strh	r3, [r0, #32]
 8000608:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800060a:	4213      	tst	r3, r2
 800060c:	d002      	beq.n	8000614 <USBPD_PE_TimerCounter+0x2e>
 800060e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8000610:	185b      	adds	r3, r3, r1
 8000612:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8000614:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000616:	4213      	tst	r3, r2
 8000618:	d002      	beq.n	8000620 <USBPD_PE_TimerCounter+0x3a>
 800061a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800061c:	185b      	adds	r3, r3, r1
 800061e:	8443      	strh	r3, [r0, #34]	@ 0x22
 8000620:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8000622:	4213      	tst	r3, r2
 8000624:	d002      	beq.n	800062c <USBPD_PE_TimerCounter+0x46>
 8000626:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 8000628:	1851      	adds	r1, r2, r1
 800062a:	8481      	strh	r1, [r0, #36]	@ 0x24
 800062c:	4770      	bx	lr

0800062e <USBPD_PE_TimerCounteUpdate>:
 800062e:	b570      	push	{r4, r5, r6, lr}
 8000630:	000e      	movs	r6, r1
 8000632:	494b      	ldr	r1, [pc, #300]	@ (8000760 <.text_16>)
 8000634:	0080      	lsls	r0, r0, #2
 8000636:	580c      	ldr	r4, [r1, r0]
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	0209      	lsls	r1, r1, #8
 800063c:	428e      	cmp	r6, r1
 800063e:	da28      	bge.n	8000692 <USBPD_PE_TimerCounteUpdate+0x64>
 8000640:	1e4d      	subs	r5, r1, #1
 8000642:	8be0      	ldrh	r0, [r4, #30]
 8000644:	4228      	tst	r0, r5
 8000646:	d004      	beq.n	8000652 <USBPD_PE_TimerCounteUpdate+0x24>
 8000648:	0031      	movs	r1, r6
 800064a:	8be0      	ldrh	r0, [r4, #30]
 800064c:	f000 ffcb 	bl	80015e6 <PE_UpdateTimer>
 8000650:	83e0      	strh	r0, [r4, #30]
 8000652:	8c20      	ldrh	r0, [r4, #32]
 8000654:	4228      	tst	r0, r5
 8000656:	d004      	beq.n	8000662 <USBPD_PE_TimerCounteUpdate+0x34>
 8000658:	0031      	movs	r1, r6
 800065a:	8c20      	ldrh	r0, [r4, #32]
 800065c:	f000 ffc3 	bl	80015e6 <PE_UpdateTimer>
 8000660:	8420      	strh	r0, [r4, #32]
 8000662:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8000664:	4228      	tst	r0, r5
 8000666:	d004      	beq.n	8000672 <USBPD_PE_TimerCounteUpdate+0x44>
 8000668:	0031      	movs	r1, r6
 800066a:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 800066c:	f000 ffbb 	bl	80015e6 <PE_UpdateTimer>
 8000670:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8000672:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000674:	4228      	tst	r0, r5
 8000676:	d004      	beq.n	8000682 <USBPD_PE_TimerCounteUpdate+0x54>
 8000678:	0031      	movs	r1, r6
 800067a:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 800067c:	f000 ffb3 	bl	80015e6 <PE_UpdateTimer>
 8000680:	8460      	strh	r0, [r4, #34]	@ 0x22
 8000682:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8000684:	4228      	tst	r0, r5
 8000686:	d004      	beq.n	8000692 <USBPD_PE_TimerCounteUpdate+0x64>
 8000688:	0031      	movs	r1, r6
 800068a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800068c:	f000 ffab 	bl	80015e6 <PE_UpdateTimer>
 8000690:	84a0      	strh	r0, [r4, #36]	@ 0x24
 8000692:	bd70      	pop	{r4, r5, r6, pc}

08000694 <USBPD_PE_IsCableConnected>:
 8000694:	b510      	push	{r4, lr}
 8000696:	4a32      	ldr	r2, [pc, #200]	@ (8000760 <.text_16>)
 8000698:	0080      	lsls	r0, r0, #2
 800069a:	5810      	ldr	r0, [r2, r0]
 800069c:	6842      	ldr	r2, [r0, #4]
 800069e:	6813      	ldr	r3, [r2, #0]
 80006a0:	4cb2      	ldr	r4, [pc, #712]	@ (800096c <.text_22>)
 80006a2:	401c      	ands	r4, r3
 80006a4:	0309      	lsls	r1, r1, #12
 80006a6:	2380      	movs	r3, #128	@ 0x80
 80006a8:	015b      	lsls	r3, r3, #5
 80006aa:	4019      	ands	r1, r3
 80006ac:	4321      	orrs	r1, r4
 80006ae:	6011      	str	r1, [r2, #0]
 80006b0:	2148      	movs	r1, #72	@ 0x48
 80006b2:	7441      	strb	r1, [r0, #17]
 80006b4:	bd10      	pop	{r4, pc}

080006b6 <USBPD_PE_StateMachine_Reset>:
 80006b6:	2148      	movs	r1, #72	@ 0x48
 80006b8:	4a29      	ldr	r2, [pc, #164]	@ (8000760 <.text_16>)
 80006ba:	0080      	lsls	r0, r0, #2
 80006bc:	5810      	ldr	r0, [r2, r0]
 80006be:	7441      	strb	r1, [r0, #17]
 80006c0:	4770      	bx	lr

080006c2 <USBPD_PE_StateMachine_Stop>:
 80006c2:	b580      	push	{r7, lr}
 80006c4:	f005 fc34 	bl	8005f30 <USBPD_PRL_Stop>
 80006c8:	bd01      	pop	{r0, pc}

080006ca <USBPD_PE_StateMachine_DRP>:
 80006ca:	b580      	push	{r7, lr}
 80006cc:	4924      	ldr	r1, [pc, #144]	@ (8000760 <.text_16>)
 80006ce:	0082      	lsls	r2, r0, #2
 80006d0:	5889      	ldr	r1, [r1, r2]
 80006d2:	6849      	ldr	r1, [r1, #4]
 80006d4:	6809      	ldr	r1, [r1, #0]
 80006d6:	074a      	lsls	r2, r1, #29
 80006d8:	0fd2      	lsrs	r2, r2, #31
 80006da:	d002      	beq.n	80006e2 <USBPD_PE_StateMachine_DRP+0x18>
 80006dc:	f002 fb8a 	bl	8002df4 <USBPD_PE_StateMachine_SRC>
 80006e0:	bd02      	pop	{r1, pc}
 80006e2:	f001 fcd5 	bl	8002090 <USBPD_PE_StateMachine_SNK>
 80006e6:	bd02      	pop	{r1, pc}

080006e8 <USBPD_PE_Notification>:
 80006e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80006ea:	0004      	movs	r4, r0
 80006ec:	2803      	cmp	r0, #3
 80006ee:	d211      	bcs.n	8000714 <USBPD_PE_Notification+0x2c>
 80006f0:	000d      	movs	r5, r1
 80006f2:	2000      	movs	r0, #0
 80006f4:	9000      	str	r0, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	002a      	movs	r2, r5
 80006fa:	0021      	movs	r1, r4
 80006fc:	2009      	movs	r0, #9
 80006fe:	4eb2      	ldr	r6, [pc, #712]	@ (80009c8 <.text_24>)
 8000700:	6836      	ldr	r6, [r6, #0]
 8000702:	47b0      	blx	r6
 8000704:	0029      	movs	r1, r5
 8000706:	0020      	movs	r0, r4
 8000708:	4ab0      	ldr	r2, [pc, #704]	@ (80009cc <.text_25>)
 800070a:	00a3      	lsls	r3, r4, #2
 800070c:	58d2      	ldr	r2, [r2, r3]
 800070e:	6892      	ldr	r2, [r2, #8]
 8000710:	68d2      	ldr	r2, [r2, #12]
 8000712:	4790      	blx	r2
 8000714:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000716 <USBPD_PE_InitVDM_Callback>:
 8000716:	4aad      	ldr	r2, [pc, #692]	@ (80009cc <.text_25>)
 8000718:	0080      	lsls	r0, r0, #2
 800071a:	5810      	ldr	r0, [r2, r0]
 800071c:	60c1      	str	r1, [r0, #12]
 800071e:	4770      	bx	lr

08000720 <USBPD_PE_Request_HardReset>:
 8000720:	b580      	push	{r7, lr}
 8000722:	49aa      	ldr	r1, [pc, #680]	@ (80009cc <.text_25>)
 8000724:	0082      	lsls	r2, r0, #2
 8000726:	5889      	ldr	r1, [r1, r2]
 8000728:	220f      	movs	r2, #15
 800072a:	2332      	movs	r3, #50	@ 0x32
 800072c:	54ca      	strb	r2, [r1, r3]
 800072e:	6889      	ldr	r1, [r1, #8]
 8000730:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000732:	4788      	blx	r1
 8000734:	2000      	movs	r0, #0
 8000736:	bd02      	pop	{r1, pc}

08000738 <USBPD_PE_Request_CableReset>:
 8000738:	b580      	push	{r7, lr}
 800073a:	4909      	ldr	r1, [pc, #36]	@ (8000760 <.text_16>)
 800073c:	0082      	lsls	r2, r0, #2
 800073e:	5889      	ldr	r1, [r1, r2]
 8000740:	684a      	ldr	r2, [r1, #4]
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	4ba2      	ldr	r3, [pc, #648]	@ (80009d0 <.text_26>)
 8000746:	4013      	ands	r3, r2
 8000748:	4aa2      	ldr	r2, [pc, #648]	@ (80009d4 <.text_27>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d105      	bne.n	800075a <USBPD_PE_Request_CableReset+0x22>
 800074e:	2299      	movs	r2, #153	@ 0x99
 8000750:	2332      	movs	r3, #50	@ 0x32
 8000752:	54ca      	strb	r2, [r1, r3]
 8000754:	6889      	ldr	r1, [r1, #8]
 8000756:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000758:	4788      	blx	r1
 800075a:	2010      	movs	r0, #16
 800075c:	bd02      	pop	{r1, pc}
	...

08000760 <.text_16>:
 8000760:	2000017c 	.word	0x2000017c

08000764 <.text_17>:
 8000764:	0000048e 	.word	0x0000048e

08000768 <.text_18>:
 8000768:	00000281 	.word	0x00000281

0800076c <USBPD_PE_Request_CtrlMessage>:
 800076c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800076e:	b096      	sub	sp, #88	@ 0x58
 8000770:	4896      	ldr	r0, [pc, #600]	@ (80009cc <.text_25>)
 8000772:	a916      	add	r1, sp, #88	@ 0x58
 8000774:	7809      	ldrb	r1, [r1, #0]
 8000776:	0089      	lsls	r1, r1, #2
 8000778:	5840      	ldr	r0, [r0, r1]
 800077a:	9001      	str	r0, [sp, #4]
 800077c:	2400      	movs	r4, #0
 800077e:	a802      	add	r0, sp, #8
 8000780:	4995      	ldr	r1, [pc, #596]	@ (80009d8 <.text_28>)
 8000782:	224c      	movs	r2, #76	@ 0x4c
 8000784:	f015 ff62 	bl	801664c <__aeabi_memcpy>
 8000788:	2303      	movs	r3, #3
 800078a:	9801      	ldr	r0, [sp, #4]
 800078c:	2132      	movs	r1, #50	@ 0x32
 800078e:	5c40      	ldrb	r0, [r0, r1]
 8000790:	2800      	cmp	r0, #0
 8000792:	d105      	bne.n	80007a0 <USBPD_PE_Request_CtrlMessage+0x34>
 8000794:	9801      	ldr	r0, [sp, #4]
 8000796:	6840      	ldr	r0, [r0, #4]
 8000798:	6800      	ldr	r0, [r0, #0]
 800079a:	04c1      	lsls	r1, r0, #19
 800079c:	0fc9      	lsrs	r1, r1, #31
 800079e:	d101      	bne.n	80007a4 <USBPD_PE_Request_CtrlMessage+0x38>
 80007a0:	2403      	movs	r4, #3
 80007a2:	e089      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	6809      	ldr	r1, [r1, #0]
 80007a8:	684a      	ldr	r2, [r1, #4]
 80007aa:	0712      	lsls	r2, r2, #28
 80007ac:	0fd5      	lsrs	r5, r2, #31
 80007ae:	466a      	mov	r2, sp
 80007b0:	7055      	strb	r5, [r2, #1]
 80007b2:	2201      	movs	r2, #1
 80007b4:	0885      	lsrs	r5, r0, #2
 80007b6:	4015      	ands	r5, r2
 80007b8:	d103      	bne.n	80007c2 <USBPD_PE_Request_CtrlMessage+0x56>
 80007ba:	2502      	movs	r5, #2
 80007bc:	466f      	mov	r7, sp
 80007be:	703c      	strb	r4, [r7, #0]
 80007c0:	e003      	b.n	80007ca <USBPD_PE_Request_CtrlMessage+0x5e>
 80007c2:	2500      	movs	r5, #0
 80007c4:	2604      	movs	r6, #4
 80007c6:	466f      	mov	r7, sp
 80007c8:	703e      	strb	r6, [r7, #0]
 80007ca:	0546      	lsls	r6, r0, #21
 80007cc:	0f76      	lsrs	r6, r6, #29
 80007ce:	2e03      	cmp	r6, #3
 80007d0:	d101      	bne.n	80007d6 <USBPD_PE_Request_CtrlMessage+0x6a>
 80007d2:	2608      	movs	r6, #8
 80007d4:	e000      	b.n	80007d8 <USBPD_PE_Request_CtrlMessage+0x6c>
 80007d6:	2600      	movs	r6, #0
 80007d8:	4018      	ands	r0, r3
 80007da:	2802      	cmp	r0, #2
 80007dc:	d101      	bne.n	80007e2 <USBPD_PE_Request_CtrlMessage+0x76>
 80007de:	2040      	movs	r0, #64	@ 0x40
 80007e0:	e000      	b.n	80007e4 <USBPD_PE_Request_CtrlMessage+0x78>
 80007e2:	2000      	movs	r0, #0
 80007e4:	787f      	ldrb	r7, [r7, #1]
 80007e6:	433d      	orrs	r5, r7
 80007e8:	466f      	mov	r7, sp
 80007ea:	783f      	ldrb	r7, [r7, #0]
 80007ec:	432f      	orrs	r7, r5
 80007ee:	433e      	orrs	r6, r7
 80007f0:	4330      	orrs	r0, r6
 80007f2:	4003      	ands	r3, r0
 80007f4:	d002      	beq.n	80007fc <USBPD_PE_Request_CtrlMessage+0x90>
 80007f6:	0003      	movs	r3, r0
 80007f8:	2010      	movs	r0, #16
 80007fa:	4318      	orrs	r0, r3
 80007fc:	2505      	movs	r5, #5
 80007fe:	4228      	tst	r0, r5
 8000800:	d002      	beq.n	8000808 <USBPD_PE_Request_CtrlMessage+0x9c>
 8000802:	0003      	movs	r3, r0
 8000804:	2020      	movs	r0, #32
 8000806:	4318      	orrs	r0, r3
 8000808:	ab17      	add	r3, sp, #92	@ 0x5c
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	005e      	lsls	r6, r3, #1
 800080e:	18f3      	adds	r3, r6, r3
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	ab02      	add	r3, sp, #8
 8000814:	9e00      	ldr	r6, [sp, #0]
 8000816:	5d9e      	ldrb	r6, [r3, r6]
 8000818:	4030      	ands	r0, r6
 800081a:	42b0      	cmp	r0, r6
 800081c:	d11f      	bne.n	800085e <USBPD_PE_Request_CtrlMessage+0xf2>
 800081e:	9e01      	ldr	r6, [sp, #4]
 8000820:	2733      	movs	r7, #51	@ 0x33
 8000822:	55f4      	strb	r4, [r6, r7]
 8000824:	9801      	ldr	r0, [sp, #4]
 8000826:	4eb2      	ldr	r6, [pc, #712]	@ (8000af0 <.text_30>)
 8000828:	1980      	adds	r0, r0, r6
 800082a:	ae17      	add	r6, sp, #92	@ 0x5c
 800082c:	7836      	ldrb	r6, [r6, #0]
 800082e:	2e05      	cmp	r6, #5
 8000830:	d031      	beq.n	8000896 <USBPD_PE_Request_CtrlMessage+0x12a>
 8000832:	2e0b      	cmp	r6, #11
 8000834:	d00e      	beq.n	8000854 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000836:	2e0d      	cmp	r6, #13
 8000838:	d028      	beq.n	800088c <USBPD_PE_Request_CtrlMessage+0x120>
 800083a:	2e11      	cmp	r6, #17
 800083c:	d011      	beq.n	8000862 <USBPD_PE_Request_CtrlMessage+0xf6>
 800083e:	2e12      	cmp	r6, #18
 8000840:	d013      	beq.n	800086a <USBPD_PE_Request_CtrlMessage+0xfe>
 8000842:	2e14      	cmp	r6, #20
 8000844:	d013      	beq.n	800086e <USBPD_PE_Request_CtrlMessage+0x102>
 8000846:	2e15      	cmp	r6, #21
 8000848:	d017      	beq.n	800087a <USBPD_PE_Request_CtrlMessage+0x10e>
 800084a:	2e16      	cmp	r6, #22
 800084c:	d00b      	beq.n	8000866 <USBPD_PE_Request_CtrlMessage+0xfa>
 800084e:	2e18      	cmp	r6, #24
 8000850:	d01c      	beq.n	800088c <USBPD_PE_Request_CtrlMessage+0x120>
 8000852:	e021      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000854:	9901      	ldr	r1, [sp, #4]
 8000856:	6889      	ldr	r1, [r1, #8]
 8000858:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800085a:	2900      	cmp	r1, #0
 800085c:	d11c      	bne.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 800085e:	2402      	movs	r4, #2
 8000860:	e02a      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000862:	2111      	movs	r1, #17
 8000864:	e010      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000866:	2116      	movs	r1, #22
 8000868:	e00e      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 800086a:	2112      	movs	r1, #18
 800086c:	e00c      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 800086e:	8909      	ldrh	r1, [r1, #8]
 8000870:	0889      	lsrs	r1, r1, #2
 8000872:	4211      	tst	r1, r2
 8000874:	d110      	bne.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000876:	2410      	movs	r4, #16
 8000878:	e01e      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 800087a:	8909      	ldrh	r1, [r1, #8]
 800087c:	09c9      	lsrs	r1, r1, #7
 800087e:	4211      	tst	r1, r2
 8000880:	d101      	bne.n	8000886 <USBPD_PE_Request_CtrlMessage+0x11a>
 8000882:	2010      	movs	r0, #16
 8000884:	e019      	b.n	80008ba <USBPD_PE_Request_CtrlMessage+0x14e>
 8000886:	2115      	movs	r1, #21
 8000888:	7001      	strb	r1, [r0, #0]
 800088a:	e005      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 800088c:	a918      	add	r1, sp, #96	@ 0x60
 800088e:	7809      	ldrb	r1, [r1, #0]
 8000890:	9a01      	ldr	r2, [sp, #4]
 8000892:	55d1      	strb	r1, [r2, r7]
 8000894:	e000      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000896:	7005      	strb	r5, [r0, #0]
 8000898:	9900      	ldr	r1, [sp, #0]
 800089a:	1859      	adds	r1, r3, r1
 800089c:	7849      	ldrb	r1, [r1, #1]
 800089e:	7041      	strb	r1, [r0, #1]
 80008a0:	9800      	ldr	r0, [sp, #0]
 80008a2:	1818      	adds	r0, r3, r0
 80008a4:	7880      	ldrb	r0, [r0, #2]
 80008a6:	9901      	ldr	r1, [sp, #4]
 80008a8:	2232      	movs	r2, #50	@ 0x32
 80008aa:	5488      	strb	r0, [r1, r2]
 80008ac:	a816      	add	r0, sp, #88	@ 0x58
 80008ae:	7800      	ldrb	r0, [r0, #0]
 80008b0:	9901      	ldr	r1, [sp, #4]
 80008b2:	6889      	ldr	r1, [r1, #8]
 80008b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80008b6:	4788      	blx	r1
 80008b8:	0020      	movs	r0, r4
 80008ba:	b019      	add	sp, #100	@ 0x64
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080008c0 <.text_20>:
 80008c0:	0000ffff 	.word	0x0000ffff

080008c4 <USBPD_PE_Request_DataMessage>:
 80008c4:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	000b      	movs	r3, r1
 80008ca:	0017      	movs	r7, r2
 80008cc:	483f      	ldr	r0, [pc, #252]	@ (80009cc <.text_25>)
 80008ce:	4669      	mov	r1, sp
 80008d0:	7a09      	ldrb	r1, [r1, #8]
 80008d2:	0089      	lsls	r1, r1, #2
 80008d4:	5841      	ldr	r1, [r0, r1]
 80008d6:	2402      	movs	r4, #2
 80008d8:	2032      	movs	r0, #50	@ 0x32
 80008da:	5c08      	ldrb	r0, [r1, r0]
 80008dc:	2800      	cmp	r0, #0
 80008de:	d105      	bne.n	80008ec <USBPD_PE_Request_DataMessage+0x28>
 80008e0:	2001      	movs	r0, #1
 80008e2:	684a      	ldr	r2, [r1, #4]
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	0b12      	lsrs	r2, r2, #12
 80008e8:	4002      	ands	r2, r0
 80008ea:	d101      	bne.n	80008f0 <USBPD_PE_Request_DataMessage+0x2c>
 80008ec:	2403      	movs	r4, #3
 80008ee:	e021      	b.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 80008f0:	466a      	mov	r2, sp
 80008f2:	7013      	strb	r3, [r2, #0]
 80008f4:	2200      	movs	r2, #0
 80008f6:	2533      	movs	r5, #51	@ 0x33
 80008f8:	554a      	strb	r2, [r1, r5]
 80008fa:	000b      	movs	r3, r1
 80008fc:	3332      	adds	r3, #50	@ 0x32
 80008fe:	4dc0      	ldr	r5, [pc, #768]	@ (8000c00 <.text_36>)
 8000900:	4ec0      	ldr	r6, [pc, #768]	@ (8000c04 <.text_37>)
 8000902:	9701      	str	r7, [sp, #4]
 8000904:	466f      	mov	r7, sp
 8000906:	783f      	ldrb	r7, [r7, #0]
 8000908:	2f01      	cmp	r7, #1
 800090a:	d004      	beq.n	8000916 <USBPD_PE_Request_DataMessage+0x52>
 800090c:	2f06      	cmp	r7, #6
 800090e:	d013      	beq.n	8000938 <USBPD_PE_Request_DataMessage+0x74>
 8000910:	2f07      	cmp	r7, #7
 8000912:	d01b      	beq.n	800094c <USBPD_PE_Request_DataMessage+0x88>
 8000914:	e027      	b.n	8000966 <USBPD_PE_Request_DataMessage+0xa2>
 8000916:	684d      	ldr	r5, [r1, #4]
 8000918:	682d      	ldr	r5, [r5, #0]
 800091a:	08ad      	lsrs	r5, r5, #2
 800091c:	4005      	ands	r5, r0
 800091e:	d009      	beq.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000920:	4cc1      	ldr	r4, [pc, #772]	@ (8000c28 <.text_39>)
 8000922:	5508      	strb	r0, [r1, r4]
 8000924:	2007      	movs	r0, #7
 8000926:	7018      	strb	r0, [r3, #0]
 8000928:	2400      	movs	r4, #0
 800092a:	4668      	mov	r0, sp
 800092c:	7a00      	ldrb	r0, [r0, #8]
 800092e:	6889      	ldr	r1, [r1, #8]
 8000930:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000932:	4788      	blx	r1
 8000934:	0020      	movs	r0, r4
 8000936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000938:	6848      	ldr	r0, [r1, #4]
 800093a:	6800      	ldr	r0, [r0, #0]
 800093c:	4006      	ands	r6, r0
 800093e:	42ae      	cmp	r6, r5
 8000940:	d1f8      	bne.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000942:	9801      	ldr	r0, [sp, #4]
 8000944:	6800      	ldr	r0, [r0, #0]
 8000946:	6288      	str	r0, [r1, #40]	@ 0x28
 8000948:	202b      	movs	r0, #43	@ 0x2b
 800094a:	e7ec      	b.n	8000926 <USBPD_PE_Request_DataMessage+0x62>
 800094c:	6848      	ldr	r0, [r1, #4]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	4006      	ands	r6, r0
 8000952:	42ae      	cmp	r6, r5
 8000954:	d1ee      	bne.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000956:	9801      	ldr	r0, [sp, #4]
 8000958:	6800      	ldr	r0, [r0, #0]
 800095a:	6288      	str	r0, [r1, #40]	@ 0x28
 800095c:	205d      	movs	r0, #93	@ 0x5d
 800095e:	4cb2      	ldr	r4, [pc, #712]	@ (8000c28 <.text_39>)
 8000960:	5508      	strb	r0, [r1, r4]
 8000962:	2062      	movs	r0, #98	@ 0x62
 8000964:	e7df      	b.n	8000926 <USBPD_PE_Request_DataMessage+0x62>
 8000966:	2410      	movs	r4, #16
 8000968:	e7e4      	b.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
	...

0800096c <.text_22>:
 800096c:	ffffefff 	.word	0xffffefff

08000970 <USBPD_PE_Send_Request>:
 8000970:	b570      	push	{r4, r5, r6, lr}
 8000972:	000b      	movs	r3, r1
 8000974:	4915      	ldr	r1, [pc, #84]	@ (80009cc <.text_25>)
 8000976:	0084      	lsls	r4, r0, #2
 8000978:	590d      	ldr	r5, [r1, r4]
 800097a:	2102      	movs	r1, #2
 800097c:	2432      	movs	r4, #50	@ 0x32
 800097e:	5d2c      	ldrb	r4, [r5, r4]
 8000980:	2c00      	cmp	r4, #0
 8000982:	d104      	bne.n	800098e <USBPD_PE_Send_Request+0x1e>
 8000984:	686c      	ldr	r4, [r5, #4]
 8000986:	6824      	ldr	r4, [r4, #0]
 8000988:	04e6      	lsls	r6, r4, #19
 800098a:	0ff6      	lsrs	r6, r6, #31
 800098c:	d101      	bne.n	8000992 <USBPD_PE_Send_Request+0x22>
 800098e:	2103      	movs	r1, #3
 8000990:	e017      	b.n	80009c2 <USBPD_PE_Send_Request+0x52>
 8000992:	4ea6      	ldr	r6, [pc, #664]	@ (8000c2c <.text_40>)
 8000994:	4026      	ands	r6, r4
 8000996:	24c0      	movs	r4, #192	@ 0xc0
 8000998:	00a4      	lsls	r4, r4, #2
 800099a:	42a6      	cmp	r6, r4
 800099c:	d111      	bne.n	80009c2 <USBPD_PE_Send_Request+0x52>
 800099e:	2145      	movs	r1, #69	@ 0x45
 80009a0:	2432      	movs	r4, #50	@ 0x32
 80009a2:	5529      	strb	r1, [r5, r4]
 80009a4:	61ab      	str	r3, [r5, #24]
 80009a6:	6969      	ldr	r1, [r5, #20]
 80009a8:	2318      	movs	r3, #24
 80009aa:	4399      	bics	r1, r3
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	4013      	ands	r3, r2
 80009b0:	430b      	orrs	r3, r1
 80009b2:	616b      	str	r3, [r5, #20]
 80009b4:	2400      	movs	r4, #0
 80009b6:	2233      	movs	r2, #51	@ 0x33
 80009b8:	54ac      	strb	r4, [r5, r2]
 80009ba:	68a9      	ldr	r1, [r5, #8]
 80009bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80009be:	4788      	blx	r1
 80009c0:	2100      	movs	r1, #0
 80009c2:	0008      	movs	r0, r1
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080009c8 <.text_24>:
 80009c8:	20000000 	.word	0x20000000

080009cc <.text_25>:
 80009cc:	2000017c 	.word	0x2000017c

080009d0 <.text_26>:
 80009d0:	00008708 	.word	0x00008708

080009d4 <.text_27>:
 80009d4:	00008308 	.word	0x00008308

080009d8 <.text_28>:
 80009d8:	08016750 	.word	0x08016750

080009dc <USBPD_PE_SendExtendedMessage>:
 80009dc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	001f      	movs	r7, r3
 80009e2:	2400      	movs	r4, #0
 80009e4:	2500      	movs	r5, #0
 80009e6:	48b5      	ldr	r0, [pc, #724]	@ (8000cbc <.text_43>)
 80009e8:	4669      	mov	r1, sp
 80009ea:	7b09      	ldrb	r1, [r1, #12]
 80009ec:	0089      	lsls	r1, r1, #2
 80009ee:	5846      	ldr	r6, [r0, r1]
 80009f0:	2003      	movs	r0, #3
 80009f2:	2132      	movs	r1, #50	@ 0x32
 80009f4:	5c71      	ldrb	r1, [r6, r1]
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d107      	bne.n	8000a0a <USBPD_PE_SendExtendedMessage+0x2e>
 80009fa:	6871      	ldr	r1, [r6, #4]
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	9100      	str	r1, [sp, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	9b00      	ldr	r3, [sp, #0]
 8000a04:	0b1b      	lsrs	r3, r3, #12
 8000a06:	400b      	ands	r3, r1
 8000a08:	d101      	bne.n	8000a0e <USBPD_PE_SendExtendedMessage+0x32>
 8000a0a:	2503      	movs	r5, #3
 8000a0c:	e06c      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a0e:	9b00      	ldr	r3, [sp, #0]
 8000a10:	055b      	lsls	r3, r3, #21
 8000a12:	0f5b      	lsrs	r3, r3, #29
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d10b      	bne.n	8000a30 <USBPD_PE_SendExtendedMessage+0x54>
 8000a18:	9b00      	ldr	r3, [sp, #0]
 8000a1a:	4018      	ands	r0, r3
 8000a1c:	2801      	cmp	r0, #1
 8000a1e:	d801      	bhi.n	8000a24 <USBPD_PE_SendExtendedMessage+0x48>
 8000a20:	2501      	movs	r5, #1
 8000a22:	e061      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a24:	4668      	mov	r0, sp
 8000a26:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8000a28:	21ff      	movs	r1, #255	@ 0xff
 8000a2a:	1d89      	adds	r1, r1, #6
 8000a2c:	4288      	cmp	r0, r1
 8000a2e:	d301      	bcc.n	8000a34 <USBPD_PE_SendExtendedMessage+0x58>
 8000a30:	2502      	movs	r5, #2
 8000a32:	e059      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a34:	4668      	mov	r0, sp
 8000a36:	7002      	strb	r2, [r0, #0]
 8000a38:	6970      	ldr	r0, [r6, #20]
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	4388      	bics	r0, r1
 8000a3e:	6170      	str	r0, [r6, #20]
 8000a40:	2020      	movs	r0, #32
 8000a42:	4669      	mov	r1, sp
 8000a44:	7809      	ldrb	r1, [r1, #0]
 8000a46:	2903      	cmp	r1, #3
 8000a48:	d008      	beq.n	8000a5c <USBPD_PE_SendExtendedMessage+0x80>
 8000a4a:	2904      	cmp	r1, #4
 8000a4c:	d020      	beq.n	8000a90 <USBPD_PE_SendExtendedMessage+0xb4>
 8000a4e:	2906      	cmp	r1, #6
 8000a50:	d020      	beq.n	8000a94 <USBPD_PE_SendExtendedMessage+0xb8>
 8000a52:	2908      	cmp	r1, #8
 8000a54:	d020      	beq.n	8000a98 <USBPD_PE_SendExtendedMessage+0xbc>
 8000a56:	290a      	cmp	r1, #10
 8000a58:	d023      	beq.n	8000aa2 <USBPD_PE_SendExtendedMessage+0xc6>
 8000a5a:	e024      	b.n	8000aa6 <USBPD_PE_SendExtendedMessage+0xca>
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4aac      	ldr	r2, [pc, #688]	@ (8000d10 <.text_45>)
 8000a60:	18b2      	adds	r2, r6, r2
 8000a62:	7091      	strb	r1, [r2, #2]
 8000a64:	6971      	ldr	r1, [r6, #20]
 8000a66:	4308      	orrs	r0, r1
 8000a68:	6170      	str	r0, [r6, #20]
 8000a6a:	4668      	mov	r0, sp
 8000a6c:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d027      	beq.n	8000ac2 <USBPD_PE_SendExtendedMessage+0xe6>
 8000a72:	9401      	str	r4, [sp, #4]
 8000a74:	4668      	mov	r0, sp
 8000a76:	7b00      	ldrb	r0, [r0, #12]
 8000a78:	f000 fa98 	bl	8000fac <PE_Get_UnchunkedSupport>
 8000a7c:	2801      	cmp	r0, #1
 8000a7e:	d101      	bne.n	8000a84 <USBPD_PE_SendExtendedMessage+0xa8>
 8000a80:	2004      	movs	r0, #4
 8000a82:	9001      	str	r0, [sp, #4]
 8000a84:	9702      	str	r7, [sp, #8]
 8000a86:	9801      	ldr	r0, [sp, #4]
 8000a88:	4669      	mov	r1, sp
 8000a8a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8000a8c:	4fa1      	ldr	r7, [pc, #644]	@ (8000d14 <.text_46>)
 8000a8e:	e012      	b.n	8000ab6 <USBPD_PE_SendExtendedMessage+0xda>
 8000a90:	210d      	movs	r1, #13
 8000a92:	e7e4      	b.n	8000a5e <USBPD_PE_SendExtendedMessage+0x82>
 8000a94:	210e      	movs	r1, #14
 8000a96:	e7e2      	b.n	8000a5e <USBPD_PE_SendExtendedMessage+0x82>
 8000a98:	205b      	movs	r0, #91	@ 0x5b
 8000a9a:	499d      	ldr	r1, [pc, #628]	@ (8000d10 <.text_45>)
 8000a9c:	1871      	adds	r1, r6, r1
 8000a9e:	7088      	strb	r0, [r1, #2]
 8000aa0:	e7e3      	b.n	8000a6a <USBPD_PE_SendExtendedMessage+0x8e>
 8000aa2:	205c      	movs	r0, #92	@ 0x5c
 8000aa4:	e7f9      	b.n	8000a9a <USBPD_PE_SendExtendedMessage+0xbe>
 8000aa6:	2510      	movs	r5, #16
 8000aa8:	e01e      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000aaa:	9a02      	ldr	r2, [sp, #8]
 8000aac:	5d12      	ldrb	r2, [r2, r4]
 8000aae:	1823      	adds	r3, r4, r0
 8000ab0:	18f3      	adds	r3, r6, r3
 8000ab2:	55da      	strb	r2, [r3, r7]
 8000ab4:	1c64      	adds	r4, r4, #1
 8000ab6:	428c      	cmp	r4, r1
 8000ab8:	d3f7      	bcc.n	8000aaa <USBPD_PE_SendExtendedMessage+0xce>
 8000aba:	2092      	movs	r0, #146	@ 0x92
 8000abc:	00c0      	lsls	r0, r0, #3
 8000abe:	5231      	strh	r1, [r6, r0]
 8000ac0:	e002      	b.n	8000ac8 <USBPD_PE_SendExtendedMessage+0xec>
 8000ac2:	2092      	movs	r0, #146	@ 0x92
 8000ac4:	00c0      	lsls	r0, r0, #3
 8000ac6:	5234      	strh	r4, [r6, r0]
 8000ac8:	4668      	mov	r0, sp
 8000aca:	7c00      	ldrb	r0, [r0, #16]
 8000acc:	2133      	movs	r1, #51	@ 0x33
 8000ace:	5470      	strb	r0, [r6, r1]
 8000ad0:	4668      	mov	r0, sp
 8000ad2:	7800      	ldrb	r0, [r0, #0]
 8000ad4:	498e      	ldr	r1, [pc, #568]	@ (8000d10 <.text_45>)
 8000ad6:	5470      	strb	r0, [r6, r1]
 8000ad8:	2031      	movs	r0, #49	@ 0x31
 8000ada:	2132      	movs	r1, #50	@ 0x32
 8000adc:	5470      	strb	r0, [r6, r1]
 8000ade:	4668      	mov	r0, sp
 8000ae0:	7b00      	ldrb	r0, [r0, #12]
 8000ae2:	68b1      	ldr	r1, [r6, #8]
 8000ae4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000ae6:	4788      	blx	r1
 8000ae8:	0028      	movs	r0, r5
 8000aea:	b005      	add	sp, #20
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000af0 <.text_30>:
 8000af0:	0000025e 	.word	0x0000025e

08000af4 <PE_Send_RESET>:
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	0005      	movs	r5, r0
 8000af8:	000c      	movs	r4, r1
 8000afa:	2c05      	cmp	r4, #5
 8000afc:	d101      	bne.n	8000b02 <PE_Send_RESET+0xe>
 8000afe:	211f      	movs	r1, #31
 8000b00:	e000      	b.n	8000b04 <PE_Send_RESET+0x10>
 8000b02:	215e      	movs	r1, #94	@ 0x5e
 8000b04:	7c28      	ldrb	r0, [r5, #16]
 8000b06:	f7ff fdef 	bl	80006e8 <USBPD_PE_Notification>
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	7c28      	ldrb	r0, [r5, #16]
 8000b0e:	f005 f9ab 	bl	8005e68 <USBPD_PRL_ResetRequestProcess>
 8000b12:	f3ef 8010 	mrs	r0, PRIMASK
 8000b16:	b672      	cpsid	i
 8000b18:	2100      	movs	r1, #0
 8000b1a:	223c      	movs	r2, #60	@ 0x3c
 8000b1c:	54a9      	strb	r1, [r5, r2]
 8000b1e:	f380 8810 	msr	PRIMASK, r0
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Get_SpecRevision>:
 8000b24:	4965      	ldr	r1, [pc, #404]	@ (8000cbc <.text_43>)
 8000b26:	0080      	lsls	r0, r0, #2
 8000b28:	5808      	ldr	r0, [r1, r0]
 8000b2a:	6840      	ldr	r0, [r0, #4]
 8000b2c:	7800      	ldrb	r0, [r0, #0]
 8000b2e:	0780      	lsls	r0, r0, #30
 8000b30:	0f80      	lsrs	r0, r0, #30
 8000b32:	4770      	bx	lr

08000b34 <PE_ChangePowerRole>:
 8000b34:	b538      	push	{r3, r4, r5, lr}
 8000b36:	6842      	ldr	r2, [r0, #4]
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	2404      	movs	r4, #4
 8000b3c:	43a3      	bics	r3, r4
 8000b3e:	008c      	lsls	r4, r1, #2
 8000b40:	2504      	movs	r5, #4
 8000b42:	402c      	ands	r4, r5
 8000b44:	431c      	orrs	r4, r3
 8000b46:	6014      	str	r4, [r2, #0]
 8000b48:	7c00      	ldrb	r0, [r0, #16]
 8000b4a:	f004 ff0a 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 8000b4e:	bd31      	pop	{r0, r4, r5, pc}

08000b50 <PE_Get_RxEvent>:
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	0001      	movs	r1, r0
 8000b54:	2014      	movs	r0, #20
 8000b56:	f3ef 8210 	mrs	r2, PRIMASK
 8000b5a:	b672      	cpsid	i
 8000b5c:	233c      	movs	r3, #60	@ 0x3c
 8000b5e:	5ccc      	ldrb	r4, [r1, r3]
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	d029      	beq.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000b64:	2393      	movs	r3, #147	@ 0x93
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	18cb      	adds	r3, r1, r3
 8000b6a:	5d1d      	ldrb	r5, [r3, r4]
 8000b6c:	066d      	lsls	r5, r5, #25
 8000b6e:	d401      	bmi.n	8000b74 <PE_Get_RxEvent+0x24>
 8000b70:	2003      	movs	r0, #3
 8000b72:	e021      	b.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000b74:	2584      	movs	r5, #132	@ 0x84
 8000b76:	006d      	lsls	r5, r5, #1
 8000b78:	436c      	muls	r4, r5
 8000b7a:	190c      	adds	r4, r1, r4
 8000b7c:	3ccb      	subs	r4, #203	@ 0xcb
 8000b7e:	638c      	str	r4, [r1, #56]	@ 0x38
 8000b80:	7825      	ldrb	r5, [r4, #0]
 8000b82:	7864      	ldrb	r4, [r4, #1]
 8000b84:	0224      	lsls	r4, r4, #8
 8000b86:	192c      	adds	r4, r5, r4
 8000b88:	868c      	strh	r4, [r1, #52]	@ 0x34
 8000b8a:	000c      	movs	r4, r1
 8000b8c:	3430      	adds	r4, #48	@ 0x30
 8000b8e:	253c      	movs	r5, #60	@ 0x3c
 8000b90:	5d49      	ldrb	r1, [r1, r5]
 8000b92:	5c59      	ldrb	r1, [r3, r1]
 8000b94:	06c9      	lsls	r1, r1, #27
 8000b96:	0ec9      	lsrs	r1, r1, #27
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d004      	beq.n	8000ba6 <PE_Get_RxEvent+0x56>
 8000b9c:	2902      	cmp	r1, #2
 8000b9e:	d005      	beq.n	8000bac <PE_Get_RxEvent+0x5c>
 8000ba0:	2904      	cmp	r1, #4
 8000ba2:	d006      	beq.n	8000bb2 <PE_Get_RxEvent+0x62>
 8000ba4:	e008      	b.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000ba6:	2011      	movs	r0, #17
 8000ba8:	2100      	movs	r1, #0
 8000baa:	e004      	b.n	8000bb6 <PE_Get_RxEvent+0x66>
 8000bac:	2012      	movs	r0, #18
 8000bae:	2101      	movs	r1, #1
 8000bb0:	e001      	b.n	8000bb6 <PE_Get_RxEvent+0x66>
 8000bb2:	2013      	movs	r0, #19
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	7021      	strb	r1, [r4, #0]
 8000bb8:	f382 8810 	msr	PRIMASK, r2
 8000bbc:	bd30      	pop	{r4, r5, pc}

08000bbe <PE_Clear_RxEvent>:
 8000bbe:	b510      	push	{r4, lr}
 8000bc0:	0001      	movs	r1, r0
 8000bc2:	f3ef 8010 	mrs	r0, PRIMASK
 8000bc6:	b672      	cpsid	i
 8000bc8:	223c      	movs	r2, #60	@ 0x3c
 8000bca:	5c8a      	ldrb	r2, [r1, r2]
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d014      	beq.n	8000bfa <PE_Clear_RxEvent+0x3c>
 8000bd0:	1e53      	subs	r3, r2, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4acb      	ldr	r2, [pc, #812]	@ (8000f04 <.text_56>)
 8000bd6:	188c      	adds	r4, r1, r2
 8000bd8:	2200      	movs	r2, #0
 8000bda:	54e2      	strb	r2, [r4, r3]
 8000bdc:	1e5b      	subs	r3, r3, #1
 8000bde:	419b      	sbcs	r3, r3
 8000be0:	0fdb      	lsrs	r3, r3, #31
 8000be2:	5ce4      	ldrb	r4, [r4, r3]
 8000be4:	0664      	lsls	r4, r4, #25
 8000be6:	d506      	bpl.n	8000bf6 <PE_Clear_RxEvent+0x38>
 8000be8:	1c5b      	adds	r3, r3, #1
 8000bea:	223c      	movs	r2, #60	@ 0x3c
 8000bec:	548b      	strb	r3, [r1, r2]
 8000bee:	f380 8810 	msr	PRIMASK, r0
 8000bf2:	7c08      	ldrb	r0, [r1, #16]
 8000bf4:	e168      	b.n	8000ec8 <.text_54>
 8000bf6:	233c      	movs	r3, #60	@ 0x3c
 8000bf8:	54ca      	strb	r2, [r1, r3]
 8000bfa:	f380 8810 	msr	PRIMASK, r0
 8000bfe:	bd10      	pop	{r4, pc}

08000c00 <.text_36>:
 8000c00:	00000302 	.word	0x00000302

08000c04 <.text_37>:
 8000c04:	00000703 	.word	0x00000703

08000c08 <PE_PRL_Control_RxEvent>:
 8000c08:	492c      	ldr	r1, [pc, #176]	@ (8000cbc <.text_43>)
 8000c0a:	0080      	lsls	r0, r0, #2
 8000c0c:	580a      	ldr	r2, [r1, r0]
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f3ef 8110 	mrs	r1, PRIMASK
 8000c14:	b672      	cpsid	i
 8000c16:	233c      	movs	r3, #60	@ 0x3c
 8000c18:	5cd2      	ldrb	r2, [r2, r3]
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d000      	beq.n	8000c20 <PE_PRL_Control_RxEvent+0x18>
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f381 8810 	msr	PRIMASK, r1
 8000c24:	4770      	bx	lr
	...

08000c28 <.text_39>:
 8000c28:	0000025f 	.word	0x0000025f

08000c2c <.text_40>:
 8000c2c:	00000704 	.word	0x00000704

08000c30 <PE_Convert_SOPRxEvent>:
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d003      	beq.n	8000c3c <PE_Convert_SOPRxEvent+0xc>
 8000c34:	2802      	cmp	r0, #2
 8000c36:	d005      	beq.n	8000c44 <PE_Convert_SOPRxEvent+0x14>
 8000c38:	d302      	bcc.n	8000c40 <PE_Convert_SOPRxEvent+0x10>
 8000c3a:	e005      	b.n	8000c48 <PE_Convert_SOPRxEvent+0x18>
 8000c3c:	2011      	movs	r0, #17
 8000c3e:	4770      	bx	lr
 8000c40:	2012      	movs	r0, #18
 8000c42:	4770      	bx	lr
 8000c44:	2013      	movs	r0, #19
 8000c46:	4770      	bx	lr
 8000c48:	2014      	movs	r0, #20
 8000c4a:	4770      	bx	lr

08000c4c <PE_Check_AMSConflict>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0005      	movs	r5, r0
 8000c50:	2400      	movs	r4, #0
 8000c52:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8000c54:	49b7      	ldr	r1, [pc, #732]	@ (8000f34 <.text_58>)
 8000c56:	4001      	ands	r1, r0
 8000c58:	290d      	cmp	r1, #13
 8000c5a:	d101      	bne.n	8000c60 <PE_Check_AMSConflict+0x14>
 8000c5c:	2010      	movs	r0, #16
 8000c5e:	e01b      	b.n	8000c98 <PE_Check_AMSConflict+0x4c>
 8000c60:	2603      	movs	r6, #3
 8000c62:	200f      	movs	r0, #15
 8000c64:	7f29      	ldrb	r1, [r5, #28]
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d011      	beq.n	8000c8e <PE_Check_AMSConflict+0x42>
 8000c6a:	1e49      	subs	r1, r1, #1
 8000c6c:	2901      	cmp	r1, #1
 8000c6e:	d912      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c70:	1e89      	subs	r1, r1, #2
 8000c72:	d011      	beq.n	8000c98 <PE_Check_AMSConflict+0x4c>
 8000c74:	1e49      	subs	r1, r1, #1
 8000c76:	d01d      	beq.n	8000cb4 <PE_Check_AMSConflict+0x68>
 8000c78:	1e49      	subs	r1, r1, #1
 8000c7a:	2909      	cmp	r1, #9
 8000c7c:	d90b      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c7e:	390b      	subs	r1, #11
 8000c80:	2901      	cmp	r1, #1
 8000c82:	d908      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c84:	1e89      	subs	r1, r1, #2
 8000c86:	d004      	beq.n	8000c92 <PE_Check_AMSConflict+0x46>
 8000c88:	394d      	subs	r1, #77	@ 0x4d
 8000c8a:	d004      	beq.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c8c:	e006      	b.n	8000c9c <PE_Check_AMSConflict+0x50>
 8000c8e:	746e      	strb	r6, [r5, #17]
 8000c90:	e011      	b.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000c92:	7468      	strb	r0, [r5, #17]
 8000c94:	e00f      	b.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000c96:	2011      	movs	r0, #17
 8000c98:	7468      	strb	r0, [r5, #17]
 8000c9a:	e00b      	b.n	8000cb4 <PE_Check_AMSConflict+0x68>
 8000c9c:	215c      	movs	r1, #92	@ 0x5c
 8000c9e:	7c28      	ldrb	r0, [r5, #16]
 8000ca0:	f7ff fd22 	bl	80006e8 <USBPD_PE_Notification>
 8000ca4:	746e      	strb	r6, [r5, #17]
 8000ca6:	6868      	ldr	r0, [r5, #4]
 8000ca8:	6800      	ldr	r0, [r0, #0]
 8000caa:	49c4      	ldr	r1, [pc, #784]	@ (8000fbc <.text_62>)
 8000cac:	4001      	ands	r1, r0
 8000cae:	0230      	lsls	r0, r6, #8
 8000cb0:	4281      	cmp	r1, r0
 8000cb2:	d000      	beq.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000cb4:	2415      	movs	r4, #21
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cbc <.text_43>:
 8000cbc:	2000017c 	.word	0x2000017c

08000cc0 <PE_PRL_ResetReceived>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	0004      	movs	r4, r0
 8000cc4:	48be      	ldr	r0, [pc, #760]	@ (8000fc0 <.text_63>)
 8000cc6:	00a2      	lsls	r2, r4, #2
 8000cc8:	5885      	ldr	r5, [r0, r2]
 8000cca:	2905      	cmp	r1, #5
 8000ccc:	d115      	bne.n	8000cfa <PE_PRL_ResetReceived+0x3a>
 8000cce:	6868      	ldr	r0, [r5, #4]
 8000cd0:	6801      	ldr	r1, [r0, #0]
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	4391      	bics	r1, r2
 8000cd6:	6001      	str	r1, [r0, #0]
 8000cd8:	6968      	ldr	r0, [r5, #20]
 8000cda:	49ba      	ldr	r1, [pc, #744]	@ (8000fc4 <.text_64>)
 8000cdc:	4001      	ands	r1, r0
 8000cde:	0150      	lsls	r0, r2, #5
 8000ce0:	4308      	orrs	r0, r1
 8000ce2:	6168      	str	r0, [r5, #20]
 8000ce4:	2014      	movs	r0, #20
 8000ce6:	2132      	movs	r1, #50	@ 0x32
 8000ce8:	5468      	strb	r0, [r5, r1]
 8000cea:	2000      	movs	r0, #0
 8000cec:	213c      	movs	r1, #60	@ 0x3c
 8000cee:	5468      	strb	r0, [r5, r1]
 8000cf0:	211e      	movs	r1, #30
 8000cf2:	7c28      	ldrb	r0, [r5, #16]
 8000cf4:	f7ff fcf8 	bl	80006e8 <USBPD_PE_Notification>
 8000cf8:	e004      	b.n	8000d04 <PE_PRL_ResetReceived+0x44>
 8000cfa:	6968      	ldr	r0, [r5, #20]
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	02c9      	lsls	r1, r1, #11
 8000d00:	4301      	orrs	r1, r0
 8000d02:	6169      	str	r1, [r5, #20]
 8000d04:	0020      	movs	r0, r4
 8000d06:	68a9      	ldr	r1, [r5, #8]
 8000d08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000d0a:	4788      	blx	r1
 8000d0c:	bd31      	pop	{r0, r4, r5, pc}
	...

08000d10 <.text_45>:
 8000d10:	0000025d 	.word	0x0000025d

08000d14 <.text_46>:
 8000d14:	00000385 	.word	0x00000385

08000d18 <PE_PRL_BistCompleted>:
 8000d18:	4770      	bx	lr

08000d1a <PE_Reset_HardReset>:
 8000d1a:	b538      	push	{r3, r4, r5, lr}
 8000d1c:	0004      	movs	r4, r0
 8000d1e:	2032      	movs	r0, #50	@ 0x32
 8000d20:	5c20      	ldrb	r0, [r4, r0]
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d003      	beq.n	8000d2e <PE_Reset_HardReset+0x14>
 8000d26:	215b      	movs	r1, #91	@ 0x5b
 8000d28:	7c20      	ldrb	r0, [r4, #16]
 8000d2a:	f7ff fcdd 	bl	80006e8 <USBPD_PE_Notification>
 8000d2e:	0020      	movs	r0, r4
 8000d30:	f000 f82c 	bl	8000d8c <PE_Reset_ZI>
 8000d34:	2503      	movs	r5, #3
 8000d36:	6820      	ldr	r0, [r4, #0]
 8000d38:	6843      	ldr	r3, [r0, #4]
 8000d3a:	402b      	ands	r3, r5
 8000d3c:	7c20      	ldrb	r0, [r4, #16]
 8000d3e:	6861      	ldr	r1, [r4, #4]
 8000d40:	6809      	ldr	r1, [r1, #0]
 8000d42:	074a      	lsls	r2, r1, #29
 8000d44:	0fd2      	lsrs	r2, r2, #31
 8000d46:	d008      	beq.n	8000d5a <PE_Reset_HardReset+0x40>
 8000d48:	2101      	movs	r1, #1
 8000d4a:	f004 fdee 	bl	800592a <USBPD_PRL_SetHeader>
 8000d4e:	6860      	ldr	r0, [r4, #4]
 8000d50:	6801      	ldr	r1, [r0, #0]
 8000d52:	2208      	movs	r2, #8
 8000d54:	430a      	orrs	r2, r1
 8000d56:	6002      	str	r2, [r0, #0]
 8000d58:	e007      	b.n	8000d6a <PE_Reset_HardReset+0x50>
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f004 fde5 	bl	800592a <USBPD_PRL_SetHeader>
 8000d60:	6860      	ldr	r0, [r4, #4]
 8000d62:	6801      	ldr	r1, [r0, #0]
 8000d64:	2208      	movs	r2, #8
 8000d66:	4391      	bics	r1, r2
 8000d68:	6001      	str	r1, [r0, #0]
 8000d6a:	6820      	ldr	r0, [r4, #0]
 8000d6c:	6840      	ldr	r0, [r0, #4]
 8000d6e:	4005      	ands	r5, r0
 8000d70:	6860      	ldr	r0, [r4, #4]
 8000d72:	6801      	ldr	r1, [r0, #0]
 8000d74:	2203      	movs	r2, #3
 8000d76:	4391      	bics	r1, r2
 8000d78:	430d      	orrs	r5, r1
 8000d7a:	6005      	str	r5, [r0, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	7c20      	ldrb	r0, [r4, #16]
 8000d80:	f004 fe44 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8000d84:	7c20      	ldrb	r0, [r4, #16]
 8000d86:	f005 f8ad 	bl	8005ee4 <USBPD_PRL_Reset>
 8000d8a:	bd31      	pop	{r0, r4, r5, pc}

08000d8c <PE_Reset_ZI>:
 8000d8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000d8e:	0004      	movs	r4, r0
 8000d90:	2000      	movs	r0, #0
 8000d92:	9001      	str	r0, [sp, #4]
 8000d94:	6860      	ldr	r0, [r4, #4]
 8000d96:	6801      	ldr	r1, [r0, #0]
 8000d98:	2210      	movs	r2, #16
 8000d9a:	4391      	bics	r1, r2
 8000d9c:	6001      	str	r1, [r0, #0]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	0020      	movs	r0, r4
 8000da2:	f000 fc34 	bl	800160e <PE_SetPowerNegotiation>
 8000da6:	2193      	movs	r1, #147	@ 0x93
 8000da8:	0089      	lsls	r1, r1, #2
 8000daa:	0020      	movs	r0, r4
 8000dac:	3014      	adds	r0, #20
 8000dae:	f015 fc58 	bl	8016662 <__aeabi_memclr>
 8000db2:	2304      	movs	r3, #4
 8000db4:	aa01      	add	r2, sp, #4
 8000db6:	2102      	movs	r1, #2
 8000db8:	7c20      	ldrb	r0, [r4, #16]
 8000dba:	68a5      	ldr	r5, [r4, #8]
 8000dbc:	69ad      	ldr	r5, [r5, #24]
 8000dbe:	47a8      	blx	r5
 8000dc0:	2080      	movs	r0, #128	@ 0x80
 8000dc2:	0440      	lsls	r0, r0, #17
 8000dc4:	9000      	str	r0, [sp, #0]
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	466a      	mov	r2, sp
 8000dca:	2106      	movs	r1, #6
 8000dcc:	7c20      	ldrb	r0, [r4, #16]
 8000dce:	68a5      	ldr	r5, [r4, #8]
 8000dd0:	69ad      	ldr	r5, [r5, #24]
 8000dd2:	47a8      	blx	r5
 8000dd4:	2503      	movs	r5, #3
 8000dd6:	6820      	ldr	r0, [r4, #0]
 8000dd8:	6841      	ldr	r1, [r0, #4]
 8000dda:	4029      	ands	r1, r5
 8000ddc:	7c20      	ldrb	r0, [r4, #16]
 8000dde:	f004 fde2 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000de2:	6820      	ldr	r0, [r4, #0]
 8000de4:	6840      	ldr	r0, [r0, #4]
 8000de6:	4005      	ands	r5, r0
 8000de8:	6860      	ldr	r0, [r4, #4]
 8000dea:	6801      	ldr	r1, [r0, #0]
 8000dec:	4a76      	ldr	r2, [pc, #472]	@ (8000fc8 <.text_65>)
 8000dee:	400a      	ands	r2, r1
 8000df0:	06a9      	lsls	r1, r5, #26
 8000df2:	4311      	orrs	r1, r2
 8000df4:	6001      	str	r1, [r0, #0]
 8000df6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000df8 <PE_Reset_Counter>:
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	2298      	movs	r2, #152	@ 0x98
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	1880      	adds	r0, r0, r2
 8000e02:	f015 fc2e 	bl	8016662 <__aeabi_memclr>
 8000e06:	bd01      	pop	{r0, pc}

08000e08 <PE_Reset_StateMachine>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	0004      	movs	r4, r0
 8000e0c:	2032      	movs	r0, #50	@ 0x32
 8000e0e:	5c20      	ldrb	r0, [r4, r0]
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d003      	beq.n	8000e1c <PE_Reset_StateMachine+0x14>
 8000e14:	215b      	movs	r1, #91	@ 0x5b
 8000e16:	7c20      	ldrb	r0, [r4, #16]
 8000e18:	f7ff fc66 	bl	80006e8 <USBPD_PE_Notification>
 8000e1c:	0020      	movs	r0, r4
 8000e1e:	f7ff ffb5 	bl	8000d8c <PE_Reset_ZI>
 8000e22:	2101      	movs	r1, #1
 8000e24:	0020      	movs	r0, r4
 8000e26:	f000 fbf2 	bl	800160e <PE_SetPowerNegotiation>
 8000e2a:	7c20      	ldrb	r0, [r4, #16]
 8000e2c:	f005 f85a 	bl	8005ee4 <USBPD_PRL_Reset>
 8000e30:	6860      	ldr	r0, [r4, #4]
 8000e32:	6801      	ldr	r1, [r0, #0]
 8000e34:	2501      	movs	r5, #1
 8000e36:	08ca      	lsrs	r2, r1, #3
 8000e38:	402a      	ands	r2, r5
 8000e3a:	078b      	lsls	r3, r1, #30
 8000e3c:	0f9b      	lsrs	r3, r3, #30
 8000e3e:	7c20      	ldrb	r0, [r4, #16]
 8000e40:	0889      	lsrs	r1, r1, #2
 8000e42:	400d      	ands	r5, r1
 8000e44:	d004      	beq.n	8000e50 <PE_Reset_StateMachine+0x48>
 8000e46:	2101      	movs	r1, #1
 8000e48:	f004 fd6f 	bl	800592a <USBPD_PRL_SetHeader>
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	e003      	b.n	8000e58 <PE_Reset_StateMachine+0x50>
 8000e50:	2100      	movs	r1, #0
 8000e52:	f004 fd6a 	bl	800592a <USBPD_PRL_SetHeader>
 8000e56:	203e      	movs	r0, #62	@ 0x3e
 8000e58:	7460      	strb	r0, [r4, #17]
 8000e5a:	bd31      	pop	{r0, r4, r5, pc}

08000e5c <PE_ExtRevisionInteroperability>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	000a      	movs	r2, r1
 8000e60:	4957      	ldr	r1, [pc, #348]	@ (8000fc0 <.text_63>)
 8000e62:	0083      	lsls	r3, r0, #2
 8000e64:	58cb      	ldr	r3, [r1, r3]
 8000e66:	685c      	ldr	r4, [r3, #4]
 8000e68:	6825      	ldr	r5, [r4, #0]
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	2603      	movs	r6, #3
 8000e6e:	402e      	ands	r6, r5
 8000e70:	42b2      	cmp	r2, r6
 8000e72:	db00      	blt.n	8000e76 <PE_ExtRevisionInteroperability+0x1a>
 8000e74:	0032      	movs	r2, r6
 8000e76:	438d      	bics	r5, r1
 8000e78:	400a      	ands	r2, r1
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	6022      	str	r2, [r4, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	6814      	ldr	r4, [r2, #0]
 8000e82:	2503      	movs	r5, #3
 8000e84:	4025      	ands	r5, r4
 8000e86:	2d01      	cmp	r5, #1
 8000e88:	d101      	bne.n	8000e8e <PE_ExtRevisionInteroperability+0x32>
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	e000      	b.n	8000e90 <PE_ExtRevisionInteroperability+0x34>
 8000e8e:	2520      	movs	r5, #32
 8000e90:	2620      	movs	r6, #32
 8000e92:	43b4      	bics	r4, r6
 8000e94:	4325      	orrs	r5, r4
 8000e96:	6015      	str	r5, [r2, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	4011      	ands	r1, r2
 8000e9e:	f004 fd76 	bl	800598e <USBPD_PRL_SetHeaderSpecification>
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}

08000ea4 <PE_PRL_FastRoleSwapReception>:
 8000ea4:	4946      	ldr	r1, [pc, #280]	@ (8000fc0 <.text_63>)
 8000ea6:	0082      	lsls	r2, r0, #2
 8000ea8:	5889      	ldr	r1, [r1, r2]
 8000eaa:	7f0a      	ldrb	r2, [r1, #28]
 8000eac:	2a09      	cmp	r2, #9
 8000eae:	d100      	bne.n	8000eb2 <PE_PRL_FastRoleSwapReception+0xe>
 8000eb0:	4770      	bx	lr
 8000eb2:	b510      	push	{r4, lr}
 8000eb4:	684a      	ldr	r2, [r1, #4]
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	2410      	movs	r4, #16
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	6014      	str	r4, [r2, #0]
 8000ebe:	694a      	ldr	r2, [r1, #20]
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	029b      	lsls	r3, r3, #10
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	614b      	str	r3, [r1, #20]

08000ec8 <.text_54>:
 8000ec8:	6889      	ldr	r1, [r1, #8]
 8000eca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000ecc:	4788      	blx	r1
 8000ece:	bd10      	pop	{r4, pc}

08000ed0 <PE_PRL_PostReceiveEvent>:
 8000ed0:	b530      	push	{r4, r5, lr}
 8000ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc0 <.text_63>)
 8000ed4:	0080      	lsls	r0, r0, #2
 8000ed6:	5813      	ldr	r3, [r2, r0]
 8000ed8:	2400      	movs	r4, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	191a      	adds	r2, r3, r4
 8000ede:	4d09      	ldr	r5, [pc, #36]	@ (8000f04 <.text_56>)
 8000ee0:	1952      	adds	r2, r2, r5
 8000ee2:	7815      	ldrb	r5, [r2, #0]
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d004      	beq.n	8000ef2 <PE_PRL_PostReceiveEvent+0x22>
 8000ee8:	1c64      	adds	r4, r4, #1
 8000eea:	b2e4      	uxtb	r4, r4
 8000eec:	2c01      	cmp	r4, #1
 8000eee:	d9f5      	bls.n	8000edc <PE_PRL_PostReceiveEvent+0xc>
 8000ef0:	bd30      	pop	{r4, r5, pc}
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	7010      	strb	r0, [r2, #0]
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	7813      	ldrb	r3, [r2, #0]
 8000efa:	2401      	movs	r4, #1
 8000efc:	408c      	lsls	r4, r1
 8000efe:	431c      	orrs	r4, r3
 8000f00:	7014      	strb	r4, [r2, #0]
 8000f02:	bd30      	pop	{r4, r5, pc}

08000f04 <.text_56>:
 8000f04:	0000024d 	.word	0x0000024d

08000f08 <PE_PRL_PostReceiveEventError>:
 8000f08:	b530      	push	{r4, r5, lr}
 8000f0a:	492d      	ldr	r1, [pc, #180]	@ (8000fc0 <.text_63>)
 8000f0c:	0080      	lsls	r0, r0, #2
 8000f0e:	5809      	ldr	r1, [r1, r0]
 8000f10:	2000      	movs	r0, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	b2d3      	uxtb	r3, r2
 8000f16:	18cb      	adds	r3, r1, r3
 8000f18:	4c2c      	ldr	r4, [pc, #176]	@ (8000fcc <.text_66>)
 8000f1a:	191b      	adds	r3, r3, r4
 8000f1c:	781c      	ldrb	r4, [r3, #0]
 8000f1e:	2560      	movs	r5, #96	@ 0x60
 8000f20:	4025      	ands	r5, r4
 8000f22:	2d20      	cmp	r5, #32
 8000f24:	d004      	beq.n	8000f30 <PE_PRL_PostReceiveEventError+0x28>
 8000f26:	1c52      	adds	r2, r2, #1
 8000f28:	b2d3      	uxtb	r3, r2
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d3f2      	bcc.n	8000f14 <PE_PRL_PostReceiveEventError+0xc>
 8000f2e:	bd30      	pop	{r4, r5, pc}
 8000f30:	7018      	strb	r0, [r3, #0]
 8000f32:	bd30      	pop	{r4, r5, pc}

08000f34 <.text_58>:
 8000f34:	0000f01f 	.word	0x0000f01f

08000f38 <PE_PRL_PostReceiveEventCopy>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <.text_63>)
 8000f3c:	0080      	lsls	r0, r0, #2
 8000f3e:	5813      	ldr	r3, [r2, r0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	b2d0      	uxtb	r0, r2
 8000f44:	181c      	adds	r4, r3, r0
 8000f46:	4d21      	ldr	r5, [pc, #132]	@ (8000fcc <.text_66>)
 8000f48:	5d64      	ldrb	r4, [r4, r5]
 8000f4a:	2560      	movs	r5, #96	@ 0x60
 8000f4c:	4025      	ands	r5, r4
 8000f4e:	2d20      	cmp	r5, #32
 8000f50:	d004      	beq.n	8000f5c <PE_PRL_PostReceiveEventCopy+0x24>
 8000f52:	1c52      	adds	r2, r2, #1
 8000f54:	b2d0      	uxtb	r0, r2
 8000f56:	2802      	cmp	r0, #2
 8000f58:	d3f3      	bcc.n	8000f42 <PE_PRL_PostReceiveEventCopy+0xa>
 8000f5a:	bd31      	pop	{r0, r4, r5, pc}
 8000f5c:	2284      	movs	r2, #132	@ 0x84
 8000f5e:	0052      	lsls	r2, r2, #1
 8000f60:	4350      	muls	r0, r2
 8000f62:	1818      	adds	r0, r3, r0
 8000f64:	303d      	adds	r0, #61	@ 0x3d
 8000f66:	f015 fb71 	bl	801664c <__aeabi_memcpy>
 8000f6a:	bd31      	pop	{r0, r4, r5, pc}

08000f6c <PE_PRL_PostReceiveEventComplete>:
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4914      	ldr	r1, [pc, #80]	@ (8000fc0 <.text_63>)
 8000f70:	0082      	lsls	r2, r0, #2
 8000f72:	5889      	ldr	r1, [r1, r2]
 8000f74:	2300      	movs	r3, #0
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	18cb      	adds	r3, r1, r3
 8000f7a:	4c14      	ldr	r4, [pc, #80]	@ (8000fcc <.text_66>)
 8000f7c:	191b      	adds	r3, r3, r4
 8000f7e:	781c      	ldrb	r4, [r3, #0]
 8000f80:	2560      	movs	r5, #96	@ 0x60
 8000f82:	4025      	ands	r5, r4
 8000f84:	2d20      	cmp	r5, #32
 8000f86:	d003      	beq.n	8000f90 <PE_PRL_PostReceiveEventComplete+0x24>
 8000f88:	b2d3      	uxtb	r3, r2
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d3f3      	bcc.n	8000f76 <PE_PRL_PostReceiveEventComplete+0xa>
 8000f8e:	bd31      	pop	{r0, r4, r5, pc}
 8000f90:	781c      	ldrb	r4, [r3, #0]
 8000f92:	2540      	movs	r5, #64	@ 0x40
 8000f94:	4325      	orrs	r5, r4
 8000f96:	701d      	strb	r5, [r3, #0]
 8000f98:	233c      	movs	r3, #60	@ 0x3c
 8000f9a:	5ccb      	ldrb	r3, [r1, r3]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <PE_PRL_PostReceiveEventComplete+0x38>
 8000fa0:	233c      	movs	r3, #60	@ 0x3c
 8000fa2:	54ca      	strb	r2, [r1, r3]
 8000fa4:	6889      	ldr	r1, [r1, #8]
 8000fa6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000fa8:	4788      	blx	r1
 8000faa:	bd31      	pop	{r0, r4, r5, pc}

08000fac <PE_Get_UnchunkedSupport>:
 8000fac:	4904      	ldr	r1, [pc, #16]	@ (8000fc0 <.text_63>)
 8000fae:	0080      	lsls	r0, r0, #2
 8000fb0:	5808      	ldr	r0, [r1, r0]
 8000fb2:	6840      	ldr	r0, [r0, #4]
 8000fb4:	6800      	ldr	r0, [r0, #0]
 8000fb6:	0181      	lsls	r1, r0, #6
 8000fb8:	0fc8      	lsrs	r0, r1, #31
 8000fba:	4770      	bx	lr

08000fbc <.text_62>:
 8000fbc:	00000704 	.word	0x00000704

08000fc0 <.text_63>:
 8000fc0:	2000017c 	.word	0x2000017c

08000fc4 <.text_64>:
 8000fc4:	fffff9ff 	.word	0xfffff9ff

08000fc8 <.text_65>:
 8000fc8:	f3ffffff 	.word	0xf3ffffff

08000fcc <.text_66>:
 8000fcc:	0000024d 	.word	0x0000024d

08000fd0 <PE_SubStateMachine_Generic>:
 8000fd0:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000fd2:	b08d      	sub	sp, #52	@ 0x34
 8000fd4:	0004      	movs	r4, r0
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	9004      	str	r0, [sp, #16]
 8000fda:	2500      	movs	r5, #0
 8000fdc:	9503      	str	r5, [sp, #12]
 8000fde:	2601      	movs	r6, #1
 8000fe0:	2714      	movs	r7, #20
 8000fe2:	7c61      	ldrb	r1, [r4, #17]
 8000fe4:	2901      	cmp	r1, #1
 8000fe6:	d100      	bne.n	8000fea <PE_SubStateMachine_Generic+0x1a>
 8000fe8:	e195      	b.n	8001316 <PE_SubStateMachine_Generic+0x346>
 8000fea:	2918      	cmp	r1, #24
 8000fec:	d03f      	beq.n	800106e <PE_SubStateMachine_Generic+0x9e>
 8000fee:	2919      	cmp	r1, #25
 8000ff0:	d050      	beq.n	8001094 <PE_SubStateMachine_Generic+0xc4>
 8000ff2:	291d      	cmp	r1, #29
 8000ff4:	d100      	bne.n	8000ff8 <PE_SubStateMachine_Generic+0x28>
 8000ff6:	e092      	b.n	800111e <PE_SubStateMachine_Generic+0x14e>
 8000ff8:	2927      	cmp	r1, #39	@ 0x27
 8000ffa:	d100      	bne.n	8000ffe <PE_SubStateMachine_Generic+0x2e>
 8000ffc:	e0b0      	b.n	8001160 <PE_SubStateMachine_Generic+0x190>
 8000ffe:	2928      	cmp	r1, #40	@ 0x28
 8001000:	d100      	bne.n	8001004 <PE_SubStateMachine_Generic+0x34>
 8001002:	e0b9      	b.n	8001178 <PE_SubStateMachine_Generic+0x1a8>
 8001004:	2929      	cmp	r1, #41	@ 0x29
 8001006:	d100      	bne.n	800100a <PE_SubStateMachine_Generic+0x3a>
 8001008:	e0c0      	b.n	800118c <PE_SubStateMachine_Generic+0x1bc>
 800100a:	292c      	cmp	r1, #44	@ 0x2c
 800100c:	d100      	bne.n	8001010 <PE_SubStateMachine_Generic+0x40>
 800100e:	e2bc      	b.n	800158a <PE_SubStateMachine_Generic+0x5ba>
 8001010:	2930      	cmp	r1, #48	@ 0x30
 8001012:	d100      	bne.n	8001016 <PE_SubStateMachine_Generic+0x46>
 8001014:	e1de      	b.n	80013d4 <PE_SubStateMachine_Generic+0x404>
 8001016:	293a      	cmp	r1, #58	@ 0x3a
 8001018:	d100      	bne.n	800101c <PE_SubStateMachine_Generic+0x4c>
 800101a:	e28c      	b.n	8001536 <PE_SubStateMachine_Generic+0x566>
 800101c:	293b      	cmp	r1, #59	@ 0x3b
 800101e:	d100      	bne.n	8001022 <PE_SubStateMachine_Generic+0x52>
 8001020:	e270      	b.n	8001504 <PE_SubStateMachine_Generic+0x534>
 8001022:	293c      	cmp	r1, #60	@ 0x3c
 8001024:	d100      	bne.n	8001028 <PE_SubStateMachine_Generic+0x58>
 8001026:	e247      	b.n	80014b8 <PE_SubStateMachine_Generic+0x4e8>
 8001028:	294b      	cmp	r1, #75	@ 0x4b
 800102a:	d100      	bne.n	800102e <PE_SubStateMachine_Generic+0x5e>
 800102c:	e114      	b.n	8001258 <PE_SubStateMachine_Generic+0x288>
 800102e:	2963      	cmp	r1, #99	@ 0x63
 8001030:	d100      	bne.n	8001034 <PE_SubStateMachine_Generic+0x64>
 8001032:	e178      	b.n	8001326 <PE_SubStateMachine_Generic+0x356>
 8001034:	2964      	cmp	r1, #100	@ 0x64
 8001036:	d100      	bne.n	800103a <PE_SubStateMachine_Generic+0x6a>
 8001038:	e1a0      	b.n	800137c <PE_SubStateMachine_Generic+0x3ac>
 800103a:	2967      	cmp	r1, #103	@ 0x67
 800103c:	d100      	bne.n	8001040 <PE_SubStateMachine_Generic+0x70>
 800103e:	e120      	b.n	8001282 <PE_SubStateMachine_Generic+0x2b2>
 8001040:	2968      	cmp	r1, #104	@ 0x68
 8001042:	d100      	bne.n	8001046 <PE_SubStateMachine_Generic+0x76>
 8001044:	e138      	b.n	80012b8 <PE_SubStateMachine_Generic+0x2e8>
 8001046:	2974      	cmp	r1, #116	@ 0x74
 8001048:	d100      	bne.n	800104c <PE_SubStateMachine_Generic+0x7c>
 800104a:	e1f3      	b.n	8001434 <PE_SubStateMachine_Generic+0x464>
 800104c:	2993      	cmp	r1, #147	@ 0x93
 800104e:	d100      	bne.n	8001052 <PE_SubStateMachine_Generic+0x82>
 8001050:	e0a6      	b.n	80011a0 <PE_SubStateMachine_Generic+0x1d0>
 8001052:	2994      	cmp	r1, #148	@ 0x94
 8001054:	d100      	bne.n	8001058 <PE_SubStateMachine_Generic+0x88>
 8001056:	e0a7      	b.n	80011a8 <PE_SubStateMachine_Generic+0x1d8>
 8001058:	2995      	cmp	r1, #149	@ 0x95
 800105a:	d100      	bne.n	800105e <PE_SubStateMachine_Generic+0x8e>
 800105c:	e0bd      	b.n	80011da <PE_SubStateMachine_Generic+0x20a>
 800105e:	2999      	cmp	r1, #153	@ 0x99
 8001060:	d000      	beq.n	8001064 <PE_SubStateMachine_Generic+0x94>
 8001062:	e297      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001064:	2106      	movs	r1, #6
 8001066:	0020      	movs	r0, r4
 8001068:	f7ff fd44 	bl	8000af4 <PE_Send_RESET>
 800106c:	e220      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 800106e:	6861      	ldr	r1, [r4, #4]
 8001070:	6809      	ldr	r1, [r1, #0]
 8001072:	0889      	lsrs	r1, r1, #2
 8001074:	400e      	ands	r6, r1
 8001076:	d002      	beq.n	800107e <PE_SubStateMachine_Generic+0xae>
 8001078:	6960      	ldr	r0, [r4, #20]
 800107a:	0741      	lsls	r1, r0, #29
 800107c:	0fc8      	lsrs	r0, r1, #31
 800107e:	9000      	str	r0, [sp, #0]
 8001080:	2319      	movs	r3, #25
 8001082:	2208      	movs	r2, #8
 8001084:	2100      	movs	r1, #0
 8001086:	0020      	movs	r0, r4
 8001088:	f000 fb76 	bl	8001778 <PE_Send_CtrlMessage>
 800108c:	2800      	cmp	r0, #0
 800108e:	d156      	bne.n	800113e <PE_SubStateMachine_Generic+0x16e>
 8001090:	2007      	movs	r0, #7
 8001092:	e107      	b.n	80012a4 <PE_SubStateMachine_Generic+0x2d4>
 8001094:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001096:	7800      	ldrb	r0, [r0, #0]
 8001098:	2811      	cmp	r0, #17
 800109a:	d13c      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 800109c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800109e:	0bc1      	lsrs	r1, r0, #15
 80010a0:	d11e      	bne.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010a2:	0441      	lsls	r1, r0, #17
 80010a4:	0f49      	lsrs	r1, r1, #29
 80010a6:	d01b      	beq.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010a8:	06c0      	lsls	r0, r0, #27
 80010aa:	0ec0      	lsrs	r0, r0, #27
 80010ac:	2804      	cmp	r0, #4
 80010ae:	d117      	bne.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010b0:	008b      	lsls	r3, r1, #2
 80010b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80010b4:	1c82      	adds	r2, r0, #2
 80010b6:	2105      	movs	r1, #5
 80010b8:	7c20      	ldrb	r0, [r4, #16]
 80010ba:	68a6      	ldr	r6, [r4, #8]
 80010bc:	69b6      	ldr	r6, [r6, #24]
 80010be:	47b0      	blx	r6
 80010c0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80010c2:	7800      	ldrb	r0, [r0, #0]
 80010c4:	2814      	cmp	r0, #20
 80010c6:	d004      	beq.n	80010d2 <PE_SubStateMachine_Generic+0x102>
 80010c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80010ca:	700f      	strb	r7, [r1, #0]
 80010cc:	0020      	movs	r0, r4
 80010ce:	f7ff fd76 	bl	8000bbe <PE_Clear_RxEvent>
 80010d2:	2003      	movs	r0, #3
 80010d4:	7460      	strb	r0, [r4, #17]
 80010d6:	9504      	str	r5, [sp, #16]
 80010d8:	2107      	movs	r1, #7
 80010da:	7c20      	ldrb	r0, [r4, #16]
 80010dc:	f7ff fb04 	bl	80006e8 <USBPD_PE_Notification>
 80010e0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80010e2:	21f0      	movs	r1, #240	@ 0xf0
 80010e4:	0209      	lsls	r1, r1, #8
 80010e6:	4001      	ands	r1, r0
 80010e8:	d115      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 80010ea:	06c0      	lsls	r0, r0, #27
 80010ec:	0ec0      	lsrs	r0, r0, #27
 80010ee:	2804      	cmp	r0, #4
 80010f0:	d001      	beq.n	80010f6 <PE_SubStateMachine_Generic+0x126>
 80010f2:	2810      	cmp	r0, #16
 80010f4:	d10f      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 80010f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80010f8:	7800      	ldrb	r0, [r0, #0]
 80010fa:	2814      	cmp	r0, #20
 80010fc:	d004      	beq.n	8001108 <PE_SubStateMachine_Generic+0x138>
 80010fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001100:	7007      	strb	r7, [r0, #0]
 8001102:	0020      	movs	r0, r4
 8001104:	f7ff fd5b 	bl	8000bbe <PE_Clear_RxEvent>
 8001108:	2003      	movs	r0, #3
 800110a:	7460      	strb	r0, [r4, #17]
 800110c:	9504      	str	r5, [sp, #16]
 800110e:	2108      	movs	r1, #8
 8001110:	7c20      	ldrb	r0, [r4, #16]
 8001112:	f7ff fae9 	bl	80006e8 <USBPD_PE_Notification>
 8001116:	8be0      	ldrh	r0, [r4, #30]
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0209      	lsls	r1, r1, #8
 800111c:	e099      	b.n	8001252 <PE_SubStateMachine_Generic+0x282>
 800111e:	9505      	str	r5, [sp, #20]
 8001120:	ab05      	add	r3, sp, #20
 8001122:	aa06      	add	r2, sp, #24
 8001124:	2101      	movs	r1, #1
 8001126:	7c20      	ldrb	r0, [r4, #16]
 8001128:	68a5      	ldr	r5, [r4, #8]
 800112a:	696d      	ldr	r5, [r5, #20]
 800112c:	47a8      	blx	r5
 800112e:	2104      	movs	r1, #4
 8001130:	9805      	ldr	r0, [sp, #20]
 8001132:	f000 fabf 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001136:	2800      	cmp	r0, #0
 8001138:	d002      	beq.n	8001140 <PE_SubStateMachine_Generic+0x170>
 800113a:	2003      	movs	r0, #3
 800113c:	7460      	strb	r0, [r4, #17]
 800113e:	e22a      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001140:	9002      	str	r0, [sp, #8]
 8001142:	2003      	movs	r0, #3
 8001144:	9001      	str	r0, [sp, #4]
 8001146:	9805      	ldr	r0, [sp, #20]
 8001148:	0880      	lsrs	r0, r0, #2
 800114a:	9000      	str	r0, [sp, #0]
 800114c:	ab06      	add	r3, sp, #24
 800114e:	2204      	movs	r2, #4
 8001150:	2100      	movs	r1, #0
 8001152:	0020      	movs	r0, r4
 8001154:	f000 fb3b 	bl	80017ce <PE_Send_DataMessage>
 8001158:	2800      	cmp	r0, #0
 800115a:	d1f0      	bne.n	800113e <PE_SubStateMachine_Generic+0x16e>
 800115c:	210a      	movs	r1, #10
 800115e:	e165      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 8001160:	2012      	movs	r0, #18
 8001162:	7720      	strb	r0, [r4, #28]
 8001164:	2105      	movs	r1, #5
 8001166:	7c20      	ldrb	r0, [r4, #16]
 8001168:	f004 feab 	bl	8005ec2 <USBDPD_PRL_BistCarrierEyeMode>
 800116c:	2028      	movs	r0, #40	@ 0x28
 800116e:	7460      	strb	r0, [r4, #17]
 8001170:	484f      	ldr	r0, [pc, #316]	@ (80012b0 <PE_SubStateMachine_Generic+0x2e0>)
 8001172:	83e0      	strh	r0, [r4, #30]
 8001174:	202d      	movs	r0, #45	@ 0x2d
 8001176:	e099      	b.n	80012ac <PE_SubStateMachine_Generic+0x2dc>
 8001178:	8be0      	ldrh	r0, [r4, #30]
 800117a:	03f1      	lsls	r1, r6, #15
 800117c:	4288      	cmp	r0, r1
 800117e:	d10e      	bne.n	800119e <PE_SubStateMachine_Generic+0x1ce>
 8001180:	2105      	movs	r1, #5
 8001182:	7c20      	ldrb	r0, [r4, #16]
 8001184:	f004 fea5 	bl	8005ed2 <USBDPD_PRL_BistCarrierEyeModeExit>
 8001188:	83e5      	strh	r5, [r4, #30]
 800118a:	e191      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 800118c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800118e:	7800      	ldrb	r0, [r0, #0]
 8001190:	2814      	cmp	r0, #20
 8001192:	d004      	beq.n	800119e <PE_SubStateMachine_Generic+0x1ce>
 8001194:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001196:	7007      	strb	r7, [r0, #0]
 8001198:	0020      	movs	r0, r4
 800119a:	f7ff fd10 	bl	8000bbe <PE_Clear_RxEvent>
 800119e:	e1fa      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80011a0:	0020      	movs	r0, r4
 80011a2:	f000 f9fb 	bl	800159c <PE_SubStateMachine_ReceiveDRS>
 80011a6:	e1f6      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80011a8:	6861      	ldr	r1, [r4, #4]
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	0889      	lsrs	r1, r1, #2
 80011ae:	400e      	ands	r6, r1
 80011b0:	d002      	beq.n	80011b8 <PE_SubStateMachine_Generic+0x1e8>
 80011b2:	6960      	ldr	r0, [r4, #20]
 80011b4:	0741      	lsls	r1, r0, #29
 80011b6:	0fc8      	lsrs	r0, r1, #31
 80011b8:	9000      	str	r0, [sp, #0]
 80011ba:	2395      	movs	r3, #149	@ 0x95
 80011bc:	2209      	movs	r2, #9
 80011be:	2100      	movs	r1, #0
 80011c0:	0020      	movs	r0, r4
 80011c2:	f000 fad9 	bl	8001778 <PE_Send_CtrlMessage>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d1ed      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x1d6>
 80011ca:	2010      	movs	r0, #16
 80011cc:	7720      	strb	r0, [r4, #28]
 80011ce:	4839      	ldr	r0, [pc, #228]	@ (80012b4 <PE_SubStateMachine_Generic+0x2e4>)
 80011d0:	83e0      	strh	r0, [r4, #30]
 80011d2:	201b      	movs	r0, #27
 80011d4:	9004      	str	r0, [sp, #16]
 80011d6:	2122      	movs	r1, #34	@ 0x22
 80011d8:	e128      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 80011da:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80011dc:	7800      	ldrb	r0, [r0, #0]
 80011de:	2814      	cmp	r0, #20
 80011e0:	d035      	beq.n	800124e <PE_SubStateMachine_Generic+0x27e>
 80011e2:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80011e4:	21f0      	movs	r1, #240	@ 0xf0
 80011e6:	0209      	lsls	r1, r1, #8
 80011e8:	4001      	ands	r1, r0
 80011ea:	d130      	bne.n	800124e <PE_SubStateMachine_Generic+0x27e>
 80011ec:	211f      	movs	r1, #31
 80011ee:	231f      	movs	r3, #31
 80011f0:	4003      	ands	r3, r0
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d006      	beq.n	8001204 <PE_SubStateMachine_Generic+0x234>
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d008      	beq.n	800120c <PE_SubStateMachine_Generic+0x23c>
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d006      	beq.n	800120c <PE_SubStateMachine_Generic+0x23c>
 80011fe:	2b10      	cmp	r3, #16
 8001200:	d015      	beq.n	800122e <PE_SubStateMachine_Generic+0x25e>
 8001202:	e024      	b.n	800124e <PE_SubStateMachine_Generic+0x27e>
 8001204:	0020      	movs	r0, r4
 8001206:	f000 fa6d 	bl	80016e4 <PE_SwitchDataRole>
 800120a:	e008      	b.n	800121e <PE_SubStateMachine_Generic+0x24e>
 800120c:	4001      	ands	r1, r0
 800120e:	290c      	cmp	r1, #12
 8001210:	d101      	bne.n	8001216 <PE_SubStateMachine_Generic+0x246>
 8001212:	2126      	movs	r1, #38	@ 0x26
 8001214:	e000      	b.n	8001218 <PE_SubStateMachine_Generic+0x248>
 8001216:	2127      	movs	r1, #39	@ 0x27
 8001218:	7c20      	ldrb	r0, [r4, #16]
 800121a:	f7ff fa65 	bl	80006e8 <USBPD_PE_Notification>
 800121e:	2003      	movs	r0, #3
 8001220:	7460      	strb	r0, [r4, #17]
 8001222:	9504      	str	r5, [sp, #16]
 8001224:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001226:	7800      	ldrb	r0, [r0, #0]
 8001228:	2814      	cmp	r0, #20
 800122a:	d10b      	bne.n	8001244 <PE_SubStateMachine_Generic+0x274>
 800122c:	e00f      	b.n	800124e <PE_SubStateMachine_Generic+0x27e>
 800122e:	2128      	movs	r1, #40	@ 0x28
 8001230:	7c20      	ldrb	r0, [r4, #16]
 8001232:	f7ff fa59 	bl	80006e8 <USBPD_PE_Notification>
 8001236:	2003      	movs	r0, #3
 8001238:	7460      	strb	r0, [r4, #17]
 800123a:	9504      	str	r5, [sp, #16]
 800123c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800123e:	7800      	ldrb	r0, [r0, #0]
 8001240:	2814      	cmp	r0, #20
 8001242:	d004      	beq.n	800124e <PE_SubStateMachine_Generic+0x27e>
 8001244:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001246:	7007      	strb	r7, [r0, #0]
 8001248:	0020      	movs	r0, r4
 800124a:	f7ff fcb8 	bl	8000bbe <PE_Clear_RxEvent>
 800124e:	8be0      	ldrh	r0, [r4, #30]
 8001250:	03f1      	lsls	r1, r6, #15
 8001252:	4288      	cmp	r0, r1
 8001254:	d12b      	bne.n	80012ae <PE_SubStateMachine_Generic+0x2de>
 8001256:	e12b      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 8001258:	ab03      	add	r3, sp, #12
 800125a:	aa05      	add	r2, sp, #20
 800125c:	2114      	movs	r1, #20
 800125e:	7c20      	ldrb	r0, [r4, #16]
 8001260:	68a5      	ldr	r5, [r4, #8]
 8001262:	696d      	ldr	r5, [r5, #20]
 8001264:	47a8      	blx	r5
 8001266:	9803      	ldr	r0, [sp, #12]
 8001268:	2800      	cmp	r0, #0
 800126a:	d100      	bne.n	800126e <PE_SubStateMachine_Generic+0x29e>
 800126c:	e192      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 800126e:	2000      	movs	r0, #0
 8001270:	9002      	str	r0, [sp, #8]
 8001272:	2003      	movs	r0, #3
 8001274:	9001      	str	r0, [sp, #4]
 8001276:	9803      	ldr	r0, [sp, #12]
 8001278:	0880      	lsrs	r0, r0, #2
 800127a:	9000      	str	r0, [sp, #0]
 800127c:	ab05      	add	r3, sp, #20
 800127e:	220c      	movs	r2, #12
 8001280:	e154      	b.n	800152c <PE_SubStateMachine_Generic+0x55c>
 8001282:	6861      	ldr	r1, [r4, #4]
 8001284:	6809      	ldr	r1, [r1, #0]
 8001286:	0889      	lsrs	r1, r1, #2
 8001288:	4031      	ands	r1, r6
 800128a:	d000      	beq.n	800128e <PE_SubStateMachine_Generic+0x2be>
 800128c:	2001      	movs	r0, #1
 800128e:	9000      	str	r0, [sp, #0]
 8001290:	2368      	movs	r3, #104	@ 0x68
 8001292:	2218      	movs	r2, #24
 8001294:	2031      	movs	r0, #49	@ 0x31
 8001296:	5c21      	ldrb	r1, [r4, r0]
 8001298:	0020      	movs	r0, r4
 800129a:	f000 fa6d 	bl	8001778 <PE_Send_CtrlMessage>
 800129e:	2800      	cmp	r0, #0
 80012a0:	d105      	bne.n	80012ae <PE_SubStateMachine_Generic+0x2de>
 80012a2:	200f      	movs	r0, #15
 80012a4:	7720      	strb	r0, [r4, #28]
 80012a6:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <PE_SubStateMachine_Generic+0x2e4>)
 80012a8:	83e0      	strh	r0, [r4, #30]
 80012aa:	201b      	movs	r0, #27
 80012ac:	9004      	str	r0, [sp, #16]
 80012ae:	e172      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80012b0:	0000802d 	.word	0x0000802d
 80012b4:	0000801b 	.word	0x0000801b
 80012b8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80012ba:	7800      	ldrb	r0, [r0, #0]
 80012bc:	2814      	cmp	r0, #20
 80012be:	d023      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012c0:	2030      	movs	r0, #48	@ 0x30
 80012c2:	5c20      	ldrb	r0, [r4, r0]
 80012c4:	2131      	movs	r1, #49	@ 0x31
 80012c6:	5c61      	ldrb	r1, [r4, r1]
 80012c8:	4288      	cmp	r0, r1
 80012ca:	d11d      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012cc:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80012ce:	0bc1      	lsrs	r1, r0, #15
 80012d0:	d11a      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012d2:	0b01      	lsrs	r1, r0, #12
 80012d4:	0749      	lsls	r1, r1, #29
 80012d6:	d017      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012d8:	06c0      	lsls	r0, r0, #27
 80012da:	0ec0      	lsrs	r0, r0, #27
 80012dc:	280c      	cmp	r0, #12
 80012de:	d113      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012e0:	2304      	movs	r3, #4
 80012e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80012e4:	1c82      	adds	r2, r0, #2
 80012e6:	2114      	movs	r1, #20
 80012e8:	7c20      	ldrb	r0, [r4, #16]
 80012ea:	68a6      	ldr	r6, [r4, #8]
 80012ec:	69b6      	ldr	r6, [r6, #24]
 80012ee:	47b0      	blx	r6
 80012f0:	2003      	movs	r0, #3
 80012f2:	7460      	strb	r0, [r4, #17]
 80012f4:	9504      	str	r5, [sp, #16]
 80012f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80012f8:	7800      	ldrb	r0, [r0, #0]
 80012fa:	2814      	cmp	r0, #20
 80012fc:	d004      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001300:	7007      	strb	r7, [r0, #0]
 8001302:	0020      	movs	r0, r4
 8001304:	f7ff fc5b 	bl	8000bbe <PE_Clear_RxEvent>
 8001308:	8be0      	ldrh	r0, [r4, #30]
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	0209      	lsls	r1, r1, #8
 800130e:	4288      	cmp	r0, r1
 8001310:	d108      	bne.n	8001324 <PE_SubStateMachine_Generic+0x354>
 8001312:	2011      	movs	r0, #17
 8001314:	e0cd      	b.n	80014b2 <PE_SubStateMachine_Generic+0x4e2>
 8001316:	9500      	str	r5, [sp, #0]
 8001318:	2303      	movs	r3, #3
 800131a:	2210      	movs	r2, #16
 800131c:	2100      	movs	r1, #0
 800131e:	0020      	movs	r0, r4
 8001320:	f000 fa2a 	bl	8001778 <PE_Send_CtrlMessage>
 8001324:	e137      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001326:	ab03      	add	r3, sp, #12
 8001328:	48c9      	ldr	r0, [pc, #804]	@ (8001650 <.text_73>)
 800132a:	1822      	adds	r2, r4, r0
 800132c:	2108      	movs	r1, #8
 800132e:	7c20      	ldrb	r0, [r4, #16]
 8001330:	68a7      	ldr	r7, [r4, #8]
 8001332:	697f      	ldr	r7, [r7, #20]
 8001334:	47b8      	blx	r7
 8001336:	2119      	movs	r1, #25
 8001338:	9803      	ldr	r0, [sp, #12]
 800133a:	f000 f9bb 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800133e:	2800      	cmp	r0, #0
 8001340:	d129      	bne.n	8001396 <PE_SubStateMachine_Generic+0x3c6>
 8001342:	48c4      	ldr	r0, [pc, #784]	@ (8001654 <.text_74>)
 8001344:	1826      	adds	r6, r4, r0
 8001346:	7035      	strb	r5, [r6, #0]
 8001348:	7075      	strb	r5, [r6, #1]
 800134a:	7c20      	ldrb	r0, [r4, #16]
 800134c:	f7ff fe2e 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001350:	2800      	cmp	r0, #0
 8001352:	d103      	bne.n	800135c <PE_SubStateMachine_Generic+0x38c>
 8001354:	7870      	ldrb	r0, [r6, #1]
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	4301      	orrs	r1, r0
 800135a:	7071      	strb	r1, [r6, #1]
 800135c:	9502      	str	r5, [sp, #8]
 800135e:	2003      	movs	r0, #3
 8001360:	9001      	str	r0, [sp, #4]
 8001362:	9803      	ldr	r0, [sp, #12]
 8001364:	1d00      	adds	r0, r0, #4
 8001366:	b280      	uxth	r0, r0
 8001368:	9000      	str	r0, [sp, #0]
 800136a:	48bb      	ldr	r0, [pc, #748]	@ (8001658 <.text_75>)
 800136c:	1823      	adds	r3, r4, r0
 800136e:	2201      	movs	r2, #1
 8001370:	2100      	movs	r1, #0
 8001372:	0020      	movs	r0, r4
 8001374:	f000 fb5e 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001378:	2148      	movs	r1, #72	@ 0x48
 800137a:	e057      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 800137c:	ab03      	add	r3, sp, #12
 800137e:	48b4      	ldr	r0, [pc, #720]	@ (8001650 <.text_73>)
 8001380:	1822      	adds	r2, r4, r0
 8001382:	2113      	movs	r1, #19
 8001384:	7c20      	ldrb	r0, [r4, #16]
 8001386:	68a7      	ldr	r7, [r4, #8]
 8001388:	697f      	ldr	r7, [r7, #20]
 800138a:	47b8      	blx	r7
 800138c:	2118      	movs	r1, #24
 800138e:	9803      	ldr	r0, [sp, #12]
 8001390:	f000 f990 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001394:	2800      	cmp	r0, #0
 8001396:	d000      	beq.n	800139a <PE_SubStateMachine_Generic+0x3ca>
 8001398:	e0fc      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 800139a:	48ae      	ldr	r0, [pc, #696]	@ (8001654 <.text_74>)
 800139c:	1826      	adds	r6, r4, r0
 800139e:	7035      	strb	r5, [r6, #0]
 80013a0:	7075      	strb	r5, [r6, #1]
 80013a2:	7c20      	ldrb	r0, [r4, #16]
 80013a4:	f7ff fe02 	bl	8000fac <PE_Get_UnchunkedSupport>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d103      	bne.n	80013b4 <PE_SubStateMachine_Generic+0x3e4>
 80013ac:	7870      	ldrb	r0, [r6, #1]
 80013ae:	2180      	movs	r1, #128	@ 0x80
 80013b0:	4301      	orrs	r1, r0
 80013b2:	7071      	strb	r1, [r6, #1]
 80013b4:	9502      	str	r5, [sp, #8]
 80013b6:	2003      	movs	r0, #3
 80013b8:	9001      	str	r0, [sp, #4]
 80013ba:	9803      	ldr	r0, [sp, #12]
 80013bc:	1d00      	adds	r0, r0, #4
 80013be:	b280      	uxth	r0, r0
 80013c0:	9000      	str	r0, [sp, #0]
 80013c2:	48a5      	ldr	r0, [pc, #660]	@ (8001658 <.text_75>)
 80013c4:	1823      	adds	r3, r4, r0
 80013c6:	220f      	movs	r2, #15
 80013c8:	2100      	movs	r1, #0
 80013ca:	0020      	movs	r0, r4
 80013cc:	f000 fb32 	bl	8001a34 <PE_Send_ExtendedMessage>
 80013d0:	2161      	movs	r1, #97	@ 0x61
 80013d2:	e02b      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 80013d4:	ab03      	add	r3, sp, #12
 80013d6:	489e      	ldr	r0, [pc, #632]	@ (8001650 <.text_73>)
 80013d8:	1822      	adds	r2, r4, r0
 80013da:	2109      	movs	r1, #9
 80013dc:	7c20      	ldrb	r0, [r4, #16]
 80013de:	68a7      	ldr	r7, [r4, #8]
 80013e0:	697f      	ldr	r7, [r7, #20]
 80013e2:	47b8      	blx	r7
 80013e4:	2107      	movs	r1, #7
 80013e6:	9803      	ldr	r0, [sp, #12]
 80013e8:	f000 f964 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d170      	bne.n	80014d2 <PE_SubStateMachine_Generic+0x502>
 80013f0:	4998      	ldr	r1, [pc, #608]	@ (8001654 <.text_74>)
 80013f2:	5465      	strb	r5, [r4, r1]
 80013f4:	1860      	adds	r0, r4, r1
 80013f6:	7045      	strb	r5, [r0, #1]
 80013f8:	7c20      	ldrb	r0, [r4, #16]
 80013fa:	f7ff fdd7 	bl	8000fac <PE_Get_UnchunkedSupport>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d105      	bne.n	800140e <PE_SubStateMachine_Generic+0x43e>
 8001402:	4894      	ldr	r0, [pc, #592]	@ (8001654 <.text_74>)
 8001404:	1820      	adds	r0, r4, r0
 8001406:	7841      	ldrb	r1, [r0, #1]
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	430a      	orrs	r2, r1
 800140c:	7042      	strb	r2, [r0, #1]
 800140e:	9502      	str	r5, [sp, #8]
 8001410:	2003      	movs	r0, #3
 8001412:	9001      	str	r0, [sp, #4]
 8001414:	9803      	ldr	r0, [sp, #12]
 8001416:	1d00      	adds	r0, r0, #4
 8001418:	b280      	uxth	r0, r0
 800141a:	9000      	str	r0, [sp, #0]
 800141c:	488e      	ldr	r0, [pc, #568]	@ (8001658 <.text_75>)
 800141e:	1823      	adds	r3, r4, r0
 8001420:	2202      	movs	r2, #2
 8001422:	2100      	movs	r1, #0
 8001424:	0020      	movs	r0, r4
 8001426:	f000 fb05 	bl	8001a34 <PE_Send_ExtendedMessage>
 800142a:	214f      	movs	r1, #79	@ 0x4f
 800142c:	7c20      	ldrb	r0, [r4, #16]
 800142e:	f7ff f95b 	bl	80006e8 <USBPD_PE_Notification>
 8001432:	e0b0      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001434:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001436:	7800      	ldrb	r0, [r0, #0]
 8001438:	2814      	cmp	r0, #20
 800143a:	d034      	beq.n	80014a6 <PE_SubStateMachine_Generic+0x4d6>
 800143c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800143e:	0bc1      	lsrs	r1, r0, #15
 8001440:	d11a      	bne.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001442:	0b01      	lsrs	r1, r0, #12
 8001444:	0749      	lsls	r1, r1, #29
 8001446:	d017      	beq.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001448:	06c0      	lsls	r0, r0, #27
 800144a:	0ec0      	lsrs	r0, r0, #27
 800144c:	2805      	cmp	r0, #5
 800144e:	d113      	bne.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001450:	2304      	movs	r3, #4
 8001452:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001454:	1d02      	adds	r2, r0, #4
 8001456:	210f      	movs	r1, #15
 8001458:	7c20      	ldrb	r0, [r4, #16]
 800145a:	68a6      	ldr	r6, [r4, #8]
 800145c:	69b6      	ldr	r6, [r6, #24]
 800145e:	47b0      	blx	r6
 8001460:	2003      	movs	r0, #3
 8001462:	7460      	strb	r0, [r4, #17]
 8001464:	9504      	str	r5, [sp, #16]
 8001466:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001468:	7800      	ldrb	r0, [r0, #0]
 800146a:	2814      	cmp	r0, #20
 800146c:	d004      	beq.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 800146e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001470:	700f      	strb	r7, [r1, #0]
 8001472:	0020      	movs	r0, r4
 8001474:	f7ff fba3 	bl	8000bbe <PE_Clear_RxEvent>
 8001478:	2034      	movs	r0, #52	@ 0x34
 800147a:	5c20      	ldrb	r0, [r4, r0]
 800147c:	06c0      	lsls	r0, r0, #27
 800147e:	0ec0      	lsrs	r0, r0, #27
 8001480:	2810      	cmp	r0, #16
 8001482:	d110      	bne.n	80014a6 <PE_SubStateMachine_Generic+0x4d6>
 8001484:	2159      	movs	r1, #89	@ 0x59
 8001486:	7c20      	ldrb	r0, [r4, #16]
 8001488:	f7ff f92e 	bl	80006e8 <USBPD_PE_Notification>
 800148c:	83e5      	strh	r5, [r4, #30]
 800148e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001490:	7800      	ldrb	r0, [r0, #0]
 8001492:	2814      	cmp	r0, #20
 8001494:	d004      	beq.n	80014a0 <PE_SubStateMachine_Generic+0x4d0>
 8001496:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001498:	7007      	strb	r7, [r0, #0]
 800149a:	0020      	movs	r0, r4
 800149c:	f7ff fb8f 	bl	8000bbe <PE_Clear_RxEvent>
 80014a0:	2003      	movs	r0, #3
 80014a2:	7460      	strb	r0, [r4, #17]
 80014a4:	9504      	str	r5, [sp, #16]
 80014a6:	8be0      	ldrh	r0, [r4, #30]
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	0209      	lsls	r1, r1, #8
 80014ac:	4288      	cmp	r0, r1
 80014ae:	d172      	bne.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80014b0:	2003      	movs	r0, #3
 80014b2:	7460      	strb	r0, [r4, #17]
 80014b4:	9504      	str	r5, [sp, #16]
 80014b6:	e06e      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80014b8:	ab03      	add	r3, sp, #12
 80014ba:	4865      	ldr	r0, [pc, #404]	@ (8001650 <.text_73>)
 80014bc:	1822      	adds	r2, r4, r0
 80014be:	210d      	movs	r1, #13
 80014c0:	7c20      	ldrb	r0, [r4, #16]
 80014c2:	68a7      	ldr	r7, [r4, #8]
 80014c4:	697f      	ldr	r7, [r7, #20]
 80014c6:	47b8      	blx	r7
 80014c8:	2104      	movs	r1, #4
 80014ca:	9803      	ldr	r0, [sp, #12]
 80014cc:	f000 f8f2 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d15f      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 80014d4:	485f      	ldr	r0, [pc, #380]	@ (8001654 <.text_74>)
 80014d6:	1826      	adds	r6, r4, r0
 80014d8:	7035      	strb	r5, [r6, #0]
 80014da:	7075      	strb	r5, [r6, #1]
 80014dc:	7c20      	ldrb	r0, [r4, #16]
 80014de:	f7ff fd65 	bl	8000fac <PE_Get_UnchunkedSupport>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d103      	bne.n	80014ee <PE_SubStateMachine_Generic+0x51e>
 80014e6:	7870      	ldrb	r0, [r6, #1]
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	4301      	orrs	r1, r0
 80014ec:	7071      	strb	r1, [r6, #1]
 80014ee:	9502      	str	r5, [sp, #8]
 80014f0:	2003      	movs	r0, #3
 80014f2:	9001      	str	r0, [sp, #4]
 80014f4:	9803      	ldr	r0, [sp, #12]
 80014f6:	1d00      	adds	r0, r0, #4
 80014f8:	b280      	uxth	r0, r0
 80014fa:	9000      	str	r0, [sp, #0]
 80014fc:	4856      	ldr	r0, [pc, #344]	@ (8001658 <.text_75>)
 80014fe:	1823      	adds	r3, r4, r0
 8001500:	2207      	movs	r2, #7
 8001502:	e03d      	b.n	8001580 <PE_SubStateMachine_Generic+0x5b0>
 8001504:	9505      	str	r5, [sp, #20]
 8001506:	ab03      	add	r3, sp, #12
 8001508:	aa05      	add	r2, sp, #20
 800150a:	210f      	movs	r1, #15
 800150c:	7c20      	ldrb	r0, [r4, #16]
 800150e:	68a5      	ldr	r5, [r4, #8]
 8001510:	696d      	ldr	r5, [r5, #20]
 8001512:	47a8      	blx	r5
 8001514:	2104      	movs	r1, #4
 8001516:	9803      	ldr	r0, [sp, #12]
 8001518:	f000 f8cc 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800151c:	2800      	cmp	r0, #0
 800151e:	d139      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001520:	9002      	str	r0, [sp, #8]
 8001522:	2003      	movs	r0, #3
 8001524:	9001      	str	r0, [sp, #4]
 8001526:	9600      	str	r6, [sp, #0]
 8001528:	ab05      	add	r3, sp, #20
 800152a:	2205      	movs	r2, #5
 800152c:	2100      	movs	r1, #0
 800152e:	0020      	movs	r0, r4
 8001530:	f000 f94d 	bl	80017ce <PE_Send_DataMessage>
 8001534:	e02f      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001536:	ab03      	add	r3, sp, #12
 8001538:	4845      	ldr	r0, [pc, #276]	@ (8001650 <.text_73>)
 800153a:	1822      	adds	r2, r4, r0
 800153c:	2111      	movs	r1, #17
 800153e:	7c20      	ldrb	r0, [r4, #16]
 8001540:	68a7      	ldr	r7, [r4, #8]
 8001542:	697f      	ldr	r7, [r7, #20]
 8001544:	47b8      	blx	r7
 8001546:	2109      	movs	r1, #9
 8001548:	9803      	ldr	r0, [sp, #12]
 800154a:	f000 f8b3 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800154e:	2800      	cmp	r0, #0
 8001550:	d120      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001552:	4840      	ldr	r0, [pc, #256]	@ (8001654 <.text_74>)
 8001554:	1826      	adds	r6, r4, r0
 8001556:	7035      	strb	r5, [r6, #0]
 8001558:	7075      	strb	r5, [r6, #1]
 800155a:	7c20      	ldrb	r0, [r4, #16]
 800155c:	f7ff fd26 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001560:	2800      	cmp	r0, #0
 8001562:	d103      	bne.n	800156c <PE_SubStateMachine_Generic+0x59c>
 8001564:	7870      	ldrb	r0, [r6, #1]
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	4301      	orrs	r1, r0
 800156a:	7071      	strb	r1, [r6, #1]
 800156c:	9502      	str	r5, [sp, #8]
 800156e:	2003      	movs	r0, #3
 8001570:	9001      	str	r0, [sp, #4]
 8001572:	9803      	ldr	r0, [sp, #12]
 8001574:	1d00      	adds	r0, r0, #4
 8001576:	b280      	uxth	r0, r0
 8001578:	9000      	str	r0, [sp, #0]
 800157a:	4837      	ldr	r0, [pc, #220]	@ (8001658 <.text_75>)
 800157c:	1823      	adds	r3, r4, r0
 800157e:	2205      	movs	r2, #5
 8001580:	2100      	movs	r1, #0
 8001582:	0020      	movs	r0, r4
 8001584:	f000 fa56 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001588:	e005      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 800158a:	2150      	movs	r1, #80	@ 0x50
 800158c:	7c20      	ldrb	r0, [r4, #16]
 800158e:	f7ff f8ab 	bl	80006e8 <USBPD_PE_Notification>
 8001592:	e78d      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 8001594:	7466      	strb	r6, [r4, #17]
 8001596:	9804      	ldr	r0, [sp, #16]
 8001598:	b00f      	add	sp, #60	@ 0x3c
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800159c <PE_SubStateMachine_ReceiveDRS>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	0004      	movs	r4, r0
 80015a0:	252a      	movs	r5, #42	@ 0x2a
 80015a2:	7c20      	ldrb	r0, [r4, #16]
 80015a4:	68a1      	ldr	r1, [r4, #8]
 80015a6:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 80015a8:	4788      	blx	r1
 80015aa:	280a      	cmp	r0, #10
 80015ac:	d002      	beq.n	80015b4 <PE_SubStateMachine_ReceiveDRS+0x18>
 80015ae:	280c      	cmp	r0, #12
 80015b0:	d017      	beq.n	80015e2 <PE_SubStateMachine_ReceiveDRS+0x46>
 80015b2:	e00d      	b.n	80015d0 <PE_SubStateMachine_ReceiveDRS+0x34>
 80015b4:	2000      	movs	r0, #0
 80015b6:	9000      	str	r0, [sp, #0]
 80015b8:	2303      	movs	r3, #3
 80015ba:	2203      	movs	r2, #3
 80015bc:	2100      	movs	r1, #0
 80015be:	0020      	movs	r0, r4
 80015c0:	f000 f8da 	bl	8001778 <PE_Send_CtrlMessage>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d10d      	bne.n	80015e4 <PE_SubStateMachine_ReceiveDRS+0x48>
 80015c8:	0020      	movs	r0, r4
 80015ca:	f000 f88b 	bl	80016e4 <PE_SwitchDataRole>
 80015ce:	bd31      	pop	{r0, r4, r5, pc}
 80015d0:	6860      	ldr	r0, [r4, #4]
 80015d2:	7800      	ldrb	r0, [r0, #0]
 80015d4:	0780      	lsls	r0, r0, #30
 80015d6:	0f80      	lsrs	r0, r0, #30
 80015d8:	2802      	cmp	r0, #2
 80015da:	d102      	bne.n	80015e2 <PE_SubStateMachine_ReceiveDRS+0x46>
 80015dc:	2001      	movs	r0, #1
 80015de:	7460      	strb	r0, [r4, #17]
 80015e0:	bd31      	pop	{r0, r4, r5, pc}
 80015e2:	7465      	strb	r5, [r4, #17]
 80015e4:	bd31      	pop	{r0, r4, r5, pc}

080015e6 <PE_UpdateTimer>:
 80015e6:	b510      	push	{r4, lr}
 80015e8:	0002      	movs	r2, r0
 80015ea:	2080      	movs	r0, #128	@ 0x80
 80015ec:	0200      	lsls	r0, r0, #8
 80015ee:	0454      	lsls	r4, r2, #17
 80015f0:	0c64      	lsrs	r4, r4, #17
 80015f2:	42a1      	cmp	r1, r4
 80015f4:	da00      	bge.n	80015f8 <PE_UpdateTimer+0x12>
 80015f6:	1a50      	subs	r0, r2, r1
 80015f8:	b280      	uxth	r0, r0
 80015fa:	bd10      	pop	{r4, pc}

080015fc <PE_CallHardResetCallback>:
 80015fc:	6883      	ldr	r3, [r0, #8]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d100      	bne.n	8001606 <PE_CallHardResetCallback+0xa>
 8001604:	4770      	bx	lr
 8001606:	b580      	push	{r7, lr}
 8001608:	7c00      	ldrb	r0, [r0, #16]
 800160a:	4798      	blx	r3
 800160c:	bd01      	pop	{r0, pc}

0800160e <PE_SetPowerNegotiation>:
 800160e:	b510      	push	{r4, lr}
 8001610:	6842      	ldr	r2, [r0, #4]
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	055c      	lsls	r4, r3, #21
 8001616:	0f64      	lsrs	r4, r4, #29
 8001618:	42a1      	cmp	r1, r4
 800161a:	d00b      	beq.n	8001634 <PE_SetPowerNegotiation+0x26>
 800161c:	4c2e      	ldr	r4, [pc, #184]	@ (80016d8 <.text_79>)
 800161e:	401c      	ands	r4, r3
 8001620:	0209      	lsls	r1, r1, #8
 8001622:	23e0      	movs	r3, #224	@ 0xe0
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	400b      	ands	r3, r1
 8001628:	4323      	orrs	r3, r4
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	215a      	movs	r1, #90	@ 0x5a
 800162e:	7c00      	ldrb	r0, [r0, #16]
 8001630:	f7ff f85a 	bl	80006e8 <USBPD_PE_Notification>
 8001634:	bd10      	pop	{r4, pc}

08001636 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001636:	b580      	push	{r7, lr}
 8001638:	4928      	ldr	r1, [pc, #160]	@ (80016dc <.text_80>)
 800163a:	0082      	lsls	r2, r0, #2
 800163c:	5889      	ldr	r1, [r1, r2]
 800163e:	694a      	ldr	r2, [r1, #20]
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	029b      	lsls	r3, r3, #10
 8001644:	4313      	orrs	r3, r2
 8001646:	614b      	str	r3, [r1, #20]
 8001648:	6889      	ldr	r1, [r1, #8]
 800164a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800164c:	4788      	blx	r1
 800164e:	bd01      	pop	{r0, pc}

08001650 <.text_73>:
 8001650:	00000267 	.word	0x00000267

08001654 <.text_74>:
 8001654:	00000265 	.word	0x00000265

08001658 <.text_75>:
 8001658:	00000263 	.word	0x00000263

0800165c <PE_CalculateMinTiming>:
 800165c:	0001      	movs	r1, r0
 800165e:	2000      	movs	r0, #0
 8001660:	43c0      	mvns	r0, r0
 8001662:	0c42      	lsrs	r2, r0, #17
 8001664:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 8001666:	4213      	tst	r3, r2
 8001668:	d001      	beq.n	800166e <PE_CalculateMinTiming+0x12>
 800166a:	8c88      	ldrh	r0, [r1, #36]	@ 0x24
 800166c:	4010      	ands	r0, r2
 800166e:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 8001670:	4213      	tst	r3, r2
 8001672:	d006      	beq.n	8001682 <PE_CalculateMinTiming+0x26>
 8001674:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 8001676:	4013      	ands	r3, r2
 8001678:	4298      	cmp	r0, r3
 800167a:	d302      	bcc.n	8001682 <PE_CalculateMinTiming+0x26>
 800167c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800167e:	0010      	movs	r0, r2
 8001680:	4008      	ands	r0, r1
 8001682:	4770      	bx	lr

08001684 <PE_SetPowerNegociation>:
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	0005      	movs	r5, r0
 8001688:	000c      	movs	r4, r1
 800168a:	6868      	ldr	r0, [r5, #4]
 800168c:	6800      	ldr	r0, [r0, #0]
 800168e:	0540      	lsls	r0, r0, #21
 8001690:	0f40      	lsrs	r0, r0, #29
 8001692:	4284      	cmp	r4, r0
 8001694:	d003      	beq.n	800169e <PE_SetPowerNegociation+0x1a>
 8001696:	215a      	movs	r1, #90	@ 0x5a
 8001698:	7c28      	ldrb	r0, [r5, #16]
 800169a:	f7ff f825 	bl	80006e8 <USBPD_PE_Notification>
 800169e:	6868      	ldr	r0, [r5, #4]
 80016a0:	6801      	ldr	r1, [r0, #0]
 80016a2:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <.text_79>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	0221      	lsls	r1, r4, #8
 80016a8:	23e0      	movs	r3, #224	@ 0xe0
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	400b      	ands	r3, r1
 80016ae:	4313      	orrs	r3, r2
 80016b0:	6003      	str	r3, [r0, #0]
 80016b2:	bd31      	pop	{r0, r4, r5, pc}

080016b4 <PE_CheckDataSizeFromGetDataInfo>:
 80016b4:	b51c      	push	{r2, r3, r4, lr}
 80016b6:	0002      	movs	r2, r0
 80016b8:	2000      	movs	r0, #0
 80016ba:	428a      	cmp	r2, r1
 80016bc:	d20a      	bcs.n	80016d4 <PE_CheckDataSizeFromGetDataInfo+0x20>
 80016be:	2018      	movs	r0, #24
 80016c0:	9000      	str	r0, [sp, #0]
 80016c2:	bf00      	nop
 80016c4:	a315      	add	r3, pc, #84	@ (adr r3, 800171c <.text_83>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2006      	movs	r0, #6
 80016cc:	4c04      	ldr	r4, [pc, #16]	@ (80016e0 <.text_81>)
 80016ce:	6824      	ldr	r4, [r4, #0]
 80016d0:	47a0      	blx	r4
 80016d2:	2002      	movs	r0, #2
 80016d4:	bd16      	pop	{r1, r2, r4, pc}
	...

080016d8 <.text_79>:
 80016d8:	fffff8ff 	.word	0xfffff8ff

080016dc <.text_80>:
 80016dc:	2000017c 	.word	0x2000017c

080016e0 <.text_81>:
 80016e0:	20000000 	.word	0x20000000

080016e4 <PE_SwitchDataRole>:
 80016e4:	b510      	push	{r4, lr}
 80016e6:	0004      	movs	r4, r0
 80016e8:	6860      	ldr	r0, [r4, #4]
 80016ea:	6802      	ldr	r2, [r0, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	08d3      	lsrs	r3, r2, #3
 80016f0:	400b      	ands	r3, r1
 80016f2:	d107      	bne.n	8001704 <PE_SwitchDataRole+0x20>
 80016f4:	2308      	movs	r3, #8
 80016f6:	4313      	orrs	r3, r2
 80016f8:	6003      	str	r3, [r0, #0]
 80016fa:	7c20      	ldrb	r0, [r4, #16]
 80016fc:	f004 f93b 	bl	8005976 <USBPD_PRL_SetHeaderDataRole>
 8001700:	2125      	movs	r1, #37	@ 0x25
 8001702:	e007      	b.n	8001714 <PE_SwitchDataRole+0x30>
 8001704:	2108      	movs	r1, #8
 8001706:	438a      	bics	r2, r1
 8001708:	6002      	str	r2, [r0, #0]
 800170a:	2100      	movs	r1, #0
 800170c:	7c20      	ldrb	r0, [r4, #16]
 800170e:	f004 f932 	bl	8005976 <USBPD_PRL_SetHeaderDataRole>
 8001712:	2124      	movs	r1, #36	@ 0x24
 8001714:	7c20      	ldrb	r0, [r4, #16]
 8001716:	f7fe ffe7 	bl	80006e8 <USBPD_PE_Notification>
 800171a:	bd10      	pop	{r4, pc}

0800171c <.text_83>:
 800171c:	61746144 	.word	0x61746144
 8001720:	7a695320 	.word	0x7a695320
 8001724:	73692065 	.word	0x73692065
 8001728:	746f6e20 	.word	0x746f6e20
 800172c:	726f6320 	.word	0x726f6320
 8001730:	74636572 	.word	0x74636572
 8001734:	00          	.byte	0x00
 8001735:	00          	.byte	0x00
	...

08001738 <USBPD_PE_SetTrace>:
 8001738:	0001      	movs	r1, r0
 800173a:	d100      	bne.n	800173e <USBPD_PE_SetTrace+0x6>
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <.text_5>)
 800173e:	4906      	ldr	r1, [pc, #24]	@ (8001758 <.text_6>)
 8001740:	6008      	str	r0, [r1, #0]
 8001742:	4770      	bx	lr

08001744 <USBPD_PE_CheckLIB>:
 8001744:	0001      	movs	r1, r0
 8001746:	2000      	movs	r0, #0
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <.text_7>)
 800174a:	4291      	cmp	r1, r2
 800174c:	d100      	bne.n	8001750 <USBPD_PE_CheckLIB+0xc>
 800174e:	2001      	movs	r0, #1
 8001750:	4770      	bx	lr
	...

08001754 <.text_5>:
 8001754:	08001777 	.word	0x08001777

08001758 <.text_6>:
 8001758:	20000000 	.word	0x20000000

0800175c <.text_7>:
 800175c:	30410000 	.word	0x30410000

08001760 <USBPD_PE_GetMemoryConsumption>:
 8001760:	b510      	push	{r4, lr}
 8001762:	f004 f8df 	bl	8005924 <USBPD_PRL_GetMemoryConsumption>
 8001766:	0004      	movs	r4, r0
 8001768:	f7fe fedd 	bl	8000526 <USBPD_CAD_GetMemoryConsumption>
 800176c:	1820      	adds	r0, r4, r0
 800176e:	21e1      	movs	r1, #225	@ 0xe1
 8001770:	0109      	lsls	r1, r1, #4
 8001772:	1840      	adds	r0, r0, r1
 8001774:	bd10      	pop	{r4, pc}

08001776 <PE_Trace_Empty>:
 8001776:	4770      	bx	lr

08001778 <PE_Send_CtrlMessage>:
 8001778:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800177a:	2501      	movs	r5, #1
 800177c:	0004      	movs	r4, r0
 800177e:	000f      	movs	r7, r1
 8001780:	0016      	movs	r6, r2
 8001782:	6860      	ldr	r0, [r4, #4]
 8001784:	6800      	ldr	r0, [r0, #0]
 8001786:	0b00      	lsrs	r0, r0, #12
 8001788:	4028      	ands	r0, r5
 800178a:	d014      	beq.n	80017b6 <PE_Send_CtrlMessage+0x3e>
 800178c:	a808      	add	r0, sp, #32
 800178e:	7800      	ldrb	r0, [r0, #0]
 8001790:	9001      	str	r0, [sp, #4]
 8001792:	2002      	movs	r0, #2
 8001794:	9000      	str	r0, [sp, #0]
 8001796:	48a2      	ldr	r0, [pc, #648]	@ (8001a20 <.text_5>)
 8001798:	1823      	adds	r3, r4, r0
 800179a:	0032      	movs	r2, r6
 800179c:	0039      	movs	r1, r7
 800179e:	7c20      	ldrb	r0, [r4, #16]
 80017a0:	f004 f938 	bl	8005a14 <USBPD_PRL_SendMessage>
 80017a4:	2803      	cmp	r0, #3
 80017a6:	d0ec      	beq.n	8001782 <PE_Send_CtrlMessage+0xa>
 80017a8:	0039      	movs	r1, r7
 80017aa:	2810      	cmp	r0, #16
 80017ac:	d00e      	beq.n	80017cc <PE_Send_CtrlMessage+0x54>
 80017ae:	2e0d      	cmp	r6, #13
 80017b0:	d104      	bne.n	80017bc <PE_Send_CtrlMessage+0x44>
 80017b2:	2201      	movs	r2, #1
 80017b4:	e003      	b.n	80017be <PE_Send_CtrlMessage+0x46>
 80017b6:	7460      	strb	r0, [r4, #17]
 80017b8:	2010      	movs	r0, #16
 80017ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017bc:	2200      	movs	r2, #0
 80017be:	466b      	mov	r3, sp
 80017c0:	7a1b      	ldrb	r3, [r3, #8]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	0003      	movs	r3, r0
 80017c6:	0020      	movs	r0, r4
 80017c8:	f000 fc24 	bl	8002014 <PE_CheckSendMessageStatus>
 80017cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080017ce <PE_Send_DataMessage>:
 80017ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	0004      	movs	r4, r0
 80017d4:	2000      	movs	r0, #0
 80017d6:	4e93      	ldr	r6, [pc, #588]	@ (8001a24 <.text_6>)
 80017d8:	e00c      	b.n	80017f4 <PE_Send_DataMessage+0x26>
 80017da:	2100      	movs	r1, #0
 80017dc:	0082      	lsls	r2, r0, #2
 80017de:	18a2      	adds	r2, r4, r2
 80017e0:	1855      	adds	r5, r2, r1
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	00cf      	lsls	r7, r1, #3
 80017e6:	40fa      	lsrs	r2, r7
 80017e8:	55aa      	strb	r2, [r5, r6]
 80017ea:	1c49      	adds	r1, r1, #1
 80017ec:	2904      	cmp	r1, #4
 80017ee:	d3f5      	bcc.n	80017dc <PE_Send_DataMessage+0xe>
 80017f0:	1d1b      	adds	r3, r3, #4
 80017f2:	1c40      	adds	r0, r0, #1
 80017f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80017f6:	4288      	cmp	r0, r1
 80017f8:	d3ef      	bcc.n	80017da <PE_Send_DataMessage+0xc>
 80017fa:	6860      	ldr	r0, [r4, #4]
 80017fc:	6800      	ldr	r0, [r0, #0]
 80017fe:	04c1      	lsls	r1, r0, #19
 8001800:	0fc9      	lsrs	r1, r1, #31
 8001802:	d01f      	beq.n	8001844 <PE_Send_DataMessage+0x76>
 8001804:	a80c      	add	r0, sp, #48	@ 0x30
 8001806:	7800      	ldrb	r0, [r0, #0]
 8001808:	9001      	str	r0, [sp, #4]
 800180a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800180c:	0080      	lsls	r0, r0, #2
 800180e:	1c80      	adds	r0, r0, #2
 8001810:	b280      	uxth	r0, r0
 8001812:	9000      	str	r0, [sp, #0]
 8001814:	1eb0      	subs	r0, r6, #2
 8001816:	1823      	adds	r3, r4, r0
 8001818:	4668      	mov	r0, sp
 800181a:	7c02      	ldrb	r2, [r0, #16]
 800181c:	7b01      	ldrb	r1, [r0, #12]
 800181e:	7c20      	ldrb	r0, [r4, #16]
 8001820:	f004 f8f8 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001824:	2803      	cmp	r0, #3
 8001826:	d0e8      	beq.n	80017fa <PE_Send_DataMessage+0x2c>
 8001828:	4669      	mov	r1, sp
 800182a:	7b09      	ldrb	r1, [r1, #12]
 800182c:	2810      	cmp	r0, #16
 800182e:	d007      	beq.n	8001840 <PE_Send_DataMessage+0x72>
 8001830:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	0003      	movs	r3, r0
 8001838:	2200      	movs	r2, #0
 800183a:	0020      	movs	r0, r4
 800183c:	f000 fbea 	bl	8002014 <PE_CheckSendMessageStatus>
 8001840:	b005      	add	sp, #20
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001844:	2010      	movs	r0, #16
 8001846:	e7fb      	b.n	8001840 <PE_Send_DataMessage+0x72>

08001848 <PE_Check_ExtendedMessage>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	0004      	movs	r4, r0
 800184c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800184e:	7881      	ldrb	r1, [r0, #2]
 8001850:	78c0      	ldrb	r0, [r0, #3]
 8001852:	0200      	lsls	r0, r0, #8
 8001854:	1808      	adds	r0, r1, r0
 8001856:	4974      	ldr	r1, [pc, #464]	@ (8001a28 <.text_7>)
 8001858:	1861      	adds	r1, r4, r1
 800185a:	8008      	strh	r0, [r1, #0]
 800185c:	2234      	movs	r2, #52	@ 0x34
 800185e:	5ca2      	ldrb	r2, [r4, r2]
 8001860:	06d2      	lsls	r2, r2, #27
 8001862:	0ed2      	lsrs	r2, r2, #27
 8001864:	708a      	strb	r2, [r1, #2]
 8001866:	2501      	movs	r5, #1
 8001868:	0403      	lsls	r3, r0, #16
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	2201      	movs	r2, #1
 800186e:	401a      	ands	r2, r3
 8001870:	0403      	lsls	r3, r0, #16
 8001872:	0edb      	lsrs	r3, r3, #27
 8001874:	071b      	lsls	r3, r3, #28
 8001876:	d003      	beq.n	8001880 <PE_Check_ExtendedMessage+0x38>
 8001878:	0013      	movs	r3, r2
 800187a:	d001      	beq.n	8001880 <PE_Check_ExtendedMessage+0x38>
 800187c:	2034      	movs	r0, #52	@ 0x34
 800187e:	e09e      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 8001880:	05c6      	lsls	r6, r0, #23
 8001882:	0df6      	lsrs	r6, r6, #23
 8001884:	2300      	movs	r3, #0
 8001886:	0407      	lsls	r7, r0, #16
 8001888:	0fff      	lsrs	r7, r7, #31
 800188a:	d10d      	bne.n	80018a8 <PE_Check_ExtendedMessage+0x60>
 800188c:	4867      	ldr	r0, [pc, #412]	@ (8001a2c <.text_8>)
 800188e:	5226      	strh	r6, [r4, r0]
 8001890:	4866      	ldr	r0, [pc, #408]	@ (8001a2c <.text_8>)
 8001892:	5a20      	ldrh	r0, [r4, r0]
 8001894:	4283      	cmp	r3, r0
 8001896:	d21b      	bcs.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 8001898:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800189a:	1d00      	adds	r0, r0, #4
 800189c:	5cc0      	ldrb	r0, [r0, r3]
 800189e:	4a64      	ldr	r2, [pc, #400]	@ (8001a30 <.text_9>)
 80018a0:	18a2      	adds	r2, r4, r2
 80018a2:	54d0      	strb	r0, [r2, r3]
 80018a4:	1c5b      	adds	r3, r3, #1
 80018a6:	e7f3      	b.n	8001890 <PE_Check_ExtendedMessage+0x48>
 80018a8:	27f8      	movs	r7, #248	@ 0xf8
 80018aa:	01ff      	lsls	r7, r7, #7
 80018ac:	4007      	ands	r7, r0
 80018ae:	d106      	bne.n	80018be <PE_Check_ExtendedMessage+0x76>
 80018b0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80018b2:	0440      	lsls	r0, r0, #17
 80018b4:	0f40      	lsrs	r0, r0, #29
 80018b6:	2807      	cmp	r0, #7
 80018b8:	d30a      	bcc.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018ba:	2e1a      	cmp	r6, #26
 80018bc:	d908      	bls.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018be:	2a00      	cmp	r2, #0
 80018c0:	d106      	bne.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018c2:	485a      	ldr	r0, [pc, #360]	@ (8001a2c <.text_8>)
 80018c4:	5a20      	ldrh	r0, [r4, r0]
 80018c6:	42b0      	cmp	r0, r6
 80018c8:	d202      	bcs.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018ca:	83e3      	strh	r3, [r4, #30]
 80018cc:	2037      	movs	r0, #55	@ 0x37
 80018ce:	e076      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 80018d0:	7889      	ldrb	r1, [r1, #2]
 80018d2:	2603      	movs	r6, #3
 80018d4:	7f22      	ldrb	r2, [r4, #28]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d039      	beq.n	800194e <PE_Check_ExtendedMessage+0x106>
 80018da:	2901      	cmp	r1, #1
 80018dc:	d008      	beq.n	80018f0 <PE_Check_ExtendedMessage+0xa8>
 80018de:	2902      	cmp	r1, #2
 80018e0:	d01c      	beq.n	800191c <PE_Check_ExtendedMessage+0xd4>
 80018e2:	2905      	cmp	r1, #5
 80018e4:	d02a      	beq.n	800193c <PE_Check_ExtendedMessage+0xf4>
 80018e6:	2907      	cmp	r1, #7
 80018e8:	d023      	beq.n	8001932 <PE_Check_ExtendedMessage+0xea>
 80018ea:	290f      	cmp	r1, #15
 80018ec:	d00b      	beq.n	8001906 <PE_Check_ExtendedMessage+0xbe>
 80018ee:	e094      	b.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80018f0:	2319      	movs	r3, #25
 80018f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80018f4:	1d02      	adds	r2, r0, #4
 80018f6:	2108      	movs	r1, #8
 80018f8:	7c20      	ldrb	r0, [r4, #16]
 80018fa:	68a7      	ldr	r7, [r4, #8]
 80018fc:	69bf      	ldr	r7, [r7, #24]
 80018fe:	47b8      	blx	r7
 8001900:	7466      	strb	r6, [r4, #17]
 8001902:	2147      	movs	r1, #71	@ 0x47
 8001904:	e014      	b.n	8001930 <PE_Check_ExtendedMessage+0xe8>
 8001906:	2318      	movs	r3, #24
 8001908:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800190a:	1d02      	adds	r2, r0, #4
 800190c:	2113      	movs	r1, #19
 800190e:	7c20      	ldrb	r0, [r4, #16]
 8001910:	68a7      	ldr	r7, [r4, #8]
 8001912:	69bf      	ldr	r7, [r7, #24]
 8001914:	47b8      	blx	r7
 8001916:	7466      	strb	r6, [r4, #17]
 8001918:	2162      	movs	r1, #98	@ 0x62
 800191a:	e009      	b.n	8001930 <PE_Check_ExtendedMessage+0xe8>
 800191c:	2307      	movs	r3, #7
 800191e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001920:	1d02      	adds	r2, r0, #4
 8001922:	2109      	movs	r1, #9
 8001924:	7c20      	ldrb	r0, [r4, #16]
 8001926:	68a7      	ldr	r7, [r4, #8]
 8001928:	69bf      	ldr	r7, [r7, #24]
 800192a:	47b8      	blx	r7
 800192c:	7466      	strb	r6, [r4, #17]
 800192e:	214e      	movs	r1, #78	@ 0x4e
 8001930:	e2c7      	b.n	8001ec2 <.text_21>
 8001932:	231a      	movs	r3, #26
 8001934:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001936:	1d02      	adds	r2, r0, #4
 8001938:	210d      	movs	r1, #13
 800193a:	e003      	b.n	8001944 <PE_Check_ExtendedMessage+0xfc>
 800193c:	2309      	movs	r3, #9
 800193e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001940:	1d02      	adds	r2, r0, #4
 8001942:	2111      	movs	r1, #17
 8001944:	7c20      	ldrb	r0, [r4, #16]
 8001946:	68a7      	ldr	r7, [r4, #8]
 8001948:	69bf      	ldr	r7, [r7, #24]
 800194a:	47b8      	blx	r7
 800194c:	e063      	b.n	8001a16 <PE_Check_ExtendedMessage+0x1ce>
 800194e:	1ec8      	subs	r0, r1, #3
 8001950:	2808      	cmp	r0, #8
 8001952:	d862      	bhi.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 8001954:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <PE_Check_ExtendedMessage+0x114>)
 8001956:	5c12      	ldrb	r2, [r2, r0]
 8001958:	4497      	add	pc, r2
 800195a:	bf00      	nop
 800195c:	46be280a 	.word	0x46be280a
 8001960:	669884be 	.word	0x669884be
 8001964:	006e      	.short	0x006e
 8001966:	6820      	ldr	r0, [r4, #0]
 8001968:	8900      	ldrh	r0, [r0, #8]
 800196a:	0b00      	lsrs	r0, r0, #12
 800196c:	4228      	tst	r0, r5
 800196e:	d054      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 8001970:	2301      	movs	r3, #1
 8001972:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001974:	1d02      	adds	r2, r0, #4
 8001976:	2110      	movs	r1, #16
 8001978:	7c20      	ldrb	r0, [r4, #16]
 800197a:	68a5      	ldr	r5, [r4, #8]
 800197c:	69ad      	ldr	r5, [r5, #24]
 800197e:	47a8      	blx	r5
 8001980:	203a      	movs	r0, #58	@ 0x3a
 8001982:	e01c      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	8900      	ldrh	r0, [r0, #8]
 8001988:	0b00      	lsrs	r0, r0, #12
 800198a:	4228      	tst	r0, r5
 800198c:	d045      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 800198e:	2301      	movs	r3, #1
 8001990:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001992:	1d02      	adds	r2, r0, #4
 8001994:	210e      	movs	r1, #14
 8001996:	7c20      	ldrb	r0, [r4, #16]
 8001998:	68a5      	ldr	r5, [r4, #8]
 800199a:	69ad      	ldr	r5, [r5, #24]
 800199c:	47a8      	blx	r5
 800199e:	203b      	movs	r0, #59	@ 0x3b
 80019a0:	e00d      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 80019a2:	6820      	ldr	r0, [r4, #0]
 80019a4:	8900      	ldrh	r0, [r0, #8]
 80019a6:	0980      	lsrs	r0, r0, #6
 80019a8:	4228      	tst	r0, r5
 80019aa:	d036      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019ac:	2302      	movs	r3, #2
 80019ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80019b0:	1d02      	adds	r2, r0, #4
 80019b2:	210c      	movs	r1, #12
 80019b4:	7c20      	ldrb	r0, [r4, #16]
 80019b6:	68a5      	ldr	r5, [r4, #8]
 80019b8:	69ad      	ldr	r5, [r5, #24]
 80019ba:	47a8      	blx	r5
 80019bc:	203c      	movs	r0, #60	@ 0x3c
 80019be:	7460      	strb	r0, [r4, #17]
 80019c0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80019c2:	6820      	ldr	r0, [r4, #0]
 80019c4:	8900      	ldrh	r0, [r0, #8]
 80019c6:	0a80      	lsrs	r0, r0, #10
 80019c8:	e00d      	b.n	80019e6 <PE_Check_ExtendedMessage+0x19e>
 80019ca:	68a0      	ldr	r0, [r4, #8]
 80019cc:	6905      	ldr	r5, [r0, #16]
 80019ce:	2d00      	cmp	r5, #0
 80019d0:	d024      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 80019d2:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <.text_8>)
 80019d4:	5a23      	ldrh	r3, [r4, r0]
 80019d6:	4816      	ldr	r0, [pc, #88]	@ (8001a30 <.text_9>)
 80019d8:	1822      	adds	r2, r4, r0
 80019da:	7c20      	ldrb	r0, [r4, #16]
 80019dc:	47a8      	blx	r5
 80019de:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	8900      	ldrh	r0, [r0, #8]
 80019e4:	0a40      	lsrs	r0, r0, #9
 80019e6:	4228      	tst	r0, r5
 80019e8:	d017      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019ea:	68a0      	ldr	r0, [r4, #8]
 80019ec:	6900      	ldr	r0, [r0, #16]
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d109      	bne.n	8001a06 <PE_Check_ExtendedMessage+0x1be>
 80019f2:	e012      	b.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019f4:	6820      	ldr	r0, [r4, #0]
 80019f6:	8900      	ldrh	r0, [r0, #8]
 80019f8:	0a40      	lsrs	r0, r0, #9
 80019fa:	4228      	tst	r0, r5
 80019fc:	d00e      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 80019fe:	68a0      	ldr	r0, [r4, #8]
 8001a00:	6900      	ldr	r0, [r0, #16]
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d00a      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 8001a06:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <.text_8>)
 8001a08:	5a23      	ldrh	r3, [r4, r0]
 8001a0a:	4809      	ldr	r0, [pc, #36]	@ (8001a30 <.text_9>)
 8001a0c:	1822      	adds	r2, r4, r0
 8001a0e:	7c20      	ldrb	r0, [r4, #16]
 8001a10:	68a5      	ldr	r5, [r4, #8]
 8001a12:	692d      	ldr	r5, [r5, #16]
 8001a14:	47a8      	blx	r5
 8001a16:	7466      	strb	r6, [r4, #17]
 8001a18:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001a1a:	7465      	strb	r5, [r4, #17]
 8001a1c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08001a20 <.text_5>:
 8001a20:	00000263 	.word	0x00000263

08001a24 <.text_6>:
 8001a24:	00000265 	.word	0x00000265

08001a28 <.text_7>:
 8001a28:	0000025a 	.word	0x0000025a

08001a2c <.text_8>:
 8001a2c:	0000048e 	.word	0x0000048e

08001a30 <.text_9>:
 8001a30:	00000281 	.word	0x00000281

08001a34 <PE_Send_ExtendedMessage>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8001a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a3c:	0004      	movs	r4, r0
 8001a3e:	000d      	movs	r5, r1
 8001a40:	4668      	mov	r0, sp
 8001a42:	7202      	strb	r2, [r0, #8]
 8001a44:	9303      	str	r3, [sp, #12]
 8001a46:	6860      	ldr	r0, [r4, #4]
 8001a48:	6800      	ldr	r0, [r0, #0]
 8001a4a:	04c1      	lsls	r1, r0, #19
 8001a4c:	0fc9      	lsrs	r1, r1, #31
 8001a4e:	d019      	beq.n	8001a84 <PE_Send_ExtendedMessage+0x50>
 8001a50:	9601      	str	r6, [sp, #4]
 8001a52:	9700      	str	r7, [sp, #0]
 8001a54:	9b03      	ldr	r3, [sp, #12]
 8001a56:	4668      	mov	r0, sp
 8001a58:	7a00      	ldrb	r0, [r0, #8]
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	4302      	orrs	r2, r0
 8001a5e:	0029      	movs	r1, r5
 8001a60:	7c20      	ldrb	r0, [r4, #16]
 8001a62:	f003 ffd7 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001a66:	2803      	cmp	r0, #3
 8001a68:	d0ed      	beq.n	8001a46 <PE_Send_ExtendedMessage+0x12>
 8001a6a:	0029      	movs	r1, r5
 8001a6c:	2810      	cmp	r0, #16
 8001a6e:	d007      	beq.n	8001a80 <PE_Send_ExtendedMessage+0x4c>
 8001a70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	9200      	str	r2, [sp, #0]
 8001a76:	0003      	movs	r3, r0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	f000 faca 	bl	8002014 <PE_CheckSendMessageStatus>
 8001a80:	b005      	add	sp, #20
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a84:	2011      	movs	r0, #17
 8001a86:	7460      	strb	r0, [r4, #17]
 8001a88:	2010      	movs	r0, #16
 8001a8a:	e7f9      	b.n	8001a80 <PE_Send_ExtendedMessage+0x4c>

08001a8c <PE_SubStateMachine_ExtendedMessages>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	0004      	movs	r4, r0
 8001a92:	2702      	movs	r7, #2
 8001a94:	4889      	ldr	r0, [pc, #548]	@ (8001cbc <.text_12>)
 8001a96:	1820      	adds	r0, r4, r0
 8001a98:	9000      	str	r0, [sp, #0]
 8001a9a:	2039      	movs	r0, #57	@ 0x39
 8001a9c:	2180      	movs	r1, #128	@ 0x80
 8001a9e:	466a      	mov	r2, sp
 8001aa0:	7211      	strb	r1, [r2, #8]
 8001aa2:	4a87      	ldr	r2, [pc, #540]	@ (8001cc0 <.text_13>)
 8001aa4:	2500      	movs	r5, #0
 8001aa6:	2603      	movs	r6, #3
 8001aa8:	7c63      	ldrb	r3, [r4, #17]
 8001aaa:	2b31      	cmp	r3, #49	@ 0x31
 8001aac:	d010      	beq.n	8001ad0 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001aae:	2b33      	cmp	r3, #51	@ 0x33
 8001ab0:	d075      	beq.n	8001b9e <PE_SubStateMachine_ExtendedMessages+0x112>
 8001ab2:	2b34      	cmp	r3, #52	@ 0x34
 8001ab4:	d07c      	beq.n	8001bb0 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001ab6:	2b35      	cmp	r3, #53	@ 0x35
 8001ab8:	d100      	bne.n	8001abc <PE_SubStateMachine_ExtendedMessages+0x30>
 8001aba:	e0a8      	b.n	8001c0e <PE_SubStateMachine_ExtendedMessages+0x182>
 8001abc:	2b36      	cmp	r3, #54	@ 0x36
 8001abe:	d100      	bne.n	8001ac2 <PE_SubStateMachine_ExtendedMessages+0x36>
 8001ac0:	e0be      	b.n	8001c40 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 8001ac2:	2b37      	cmp	r3, #55	@ 0x37
 8001ac4:	d100      	bne.n	8001ac8 <PE_SubStateMachine_ExtendedMessages+0x3c>
 8001ac6:	e0be      	b.n	8001c46 <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001ac8:	2b38      	cmp	r3, #56	@ 0x38
 8001aca:	d100      	bne.n	8001ace <PE_SubStateMachine_ExtendedMessages+0x42>
 8001acc:	e0ef      	b.n	8001cae <PE_SubStateMachine_ExtendedMessages+0x222>
 8001ace:	e0f2      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001ad0:	487c      	ldr	r0, [pc, #496]	@ (8001cc4 <.text_14>)
 8001ad2:	1820      	adds	r0, r4, r0
 8001ad4:	9004      	str	r0, [sp, #16]
 8001ad6:	4669      	mov	r1, sp
 8001ad8:	730d      	strb	r5, [r1, #12]
 8001ada:	497b      	ldr	r1, [pc, #492]	@ (8001cc8 <.text_15>)
 8001adc:	5265      	strh	r5, [r4, r1]
 8001ade:	7c20      	ldrb	r0, [r4, #16]
 8001ae0:	f7ff fa64 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001ae4:	2801      	cmp	r0, #1
 8001ae6:	d107      	bne.n	8001af8 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001ae8:	4878      	ldr	r0, [pc, #480]	@ (8001ccc <.text_16>)
 8001aea:	1820      	adds	r0, r4, r0
 8001aec:	7005      	strb	r5, [r0, #0]
 8001aee:	7045      	strb	r5, [r0, #1]
 8001af0:	4877      	ldr	r0, [pc, #476]	@ (8001cd0 <.text_17>)
 8001af2:	1820      	adds	r0, r4, r0
 8001af4:	9004      	str	r0, [sp, #16]
 8001af6:	e028      	b.n	8001b4a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001af8:	4976      	ldr	r1, [pc, #472]	@ (8001cd4 <.text_18>)
 8001afa:	1861      	adds	r1, r4, r1
 8001afc:	72cd      	strb	r5, [r1, #11]
 8001afe:	4975      	ldr	r1, [pc, #468]	@ (8001cd4 <.text_18>)
 8001b00:	1861      	adds	r1, r4, r1
 8001b02:	730d      	strb	r5, [r1, #12]
 8001b04:	7c20      	ldrb	r0, [r4, #16]
 8001b06:	f7ff fa51 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d106      	bne.n	8001b1c <PE_SubStateMachine_ExtendedMessages+0x90>
 8001b0e:	4871      	ldr	r0, [pc, #452]	@ (8001cd4 <.text_18>)
 8001b10:	1820      	adds	r0, r4, r0
 8001b12:	7b01      	ldrb	r1, [r0, #12]
 8001b14:	466a      	mov	r2, sp
 8001b16:	7a12      	ldrb	r2, [r2, #8]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	7302      	strb	r2, [r0, #12]
 8001b1c:	486a      	ldr	r0, [pc, #424]	@ (8001cc8 <.text_15>)
 8001b1e:	1820      	adds	r0, r4, r0
 8001b20:	8841      	ldrh	r1, [r0, #2]
 8001b22:	291b      	cmp	r1, #27
 8001b24:	d30e      	bcc.n	8001b44 <PE_SubStateMachine_ExtendedMessages+0xb8>
 8001b26:	486a      	ldr	r0, [pc, #424]	@ (8001cd0 <.text_17>)
 8001b28:	1820      	adds	r0, r4, r0
 8001b2a:	5d40      	ldrb	r0, [r0, r5]
 8001b2c:	9900      	ldr	r1, [sp, #0]
 8001b2e:	5548      	strb	r0, [r1, r5]
 8001b30:	1c6d      	adds	r5, r5, #1
 8001b32:	2d1a      	cmp	r5, #26
 8001b34:	d209      	bcs.n	8001b4a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001b36:	e7f6      	b.n	8001b26 <PE_SubStateMachine_ExtendedMessages+0x9a>
 8001b38:	4965      	ldr	r1, [pc, #404]	@ (8001cd0 <.text_17>)
 8001b3a:	1861      	adds	r1, r4, r1
 8001b3c:	5d49      	ldrb	r1, [r1, r5]
 8001b3e:	9a00      	ldr	r2, [sp, #0]
 8001b40:	5551      	strb	r1, [r2, r5]
 8001b42:	1c6d      	adds	r5, r5, #1
 8001b44:	8841      	ldrh	r1, [r0, #2]
 8001b46:	428d      	cmp	r5, r1
 8001b48:	d3f6      	bcc.n	8001b38 <PE_SubStateMachine_ExtendedMessages+0xac>
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	6961      	ldr	r1, [r4, #20]
 8001b4e:	0949      	lsrs	r1, r1, #5
 8001b50:	4001      	ands	r1, r0
 8001b52:	d00a      	beq.n	8001b6a <PE_SubStateMachine_ExtendedMessages+0xde>
 8001b54:	6861      	ldr	r1, [r4, #4]
 8001b56:	6809      	ldr	r1, [r1, #0]
 8001b58:	0889      	lsrs	r1, r1, #2
 8001b5a:	4001      	ands	r1, r0
 8001b5c:	d002      	beq.n	8001b64 <PE_SubStateMachine_ExtendedMessages+0xd8>
 8001b5e:	4669      	mov	r1, sp
 8001b60:	7308      	strb	r0, [r1, #12]
 8001b62:	e001      	b.n	8001b68 <PE_SubStateMachine_ExtendedMessages+0xdc>
 8001b64:	4669      	mov	r1, sp
 8001b66:	730f      	strb	r7, [r1, #12]
 8001b68:	2633      	movs	r6, #51	@ 0x33
 8001b6a:	4668      	mov	r0, sp
 8001b6c:	7b00      	ldrb	r0, [r0, #12]
 8001b6e:	9002      	str	r0, [sp, #8]
 8001b70:	9601      	str	r6, [sp, #4]
 8001b72:	4855      	ldr	r0, [pc, #340]	@ (8001cc8 <.text_15>)
 8001b74:	1820      	adds	r0, r4, r0
 8001b76:	8840      	ldrh	r0, [r0, #2]
 8001b78:	1d00      	adds	r0, r0, #4
 8001b7a:	b280      	uxth	r0, r0
 8001b7c:	9000      	str	r0, [sp, #0]
 8001b7e:	9b04      	ldr	r3, [sp, #16]
 8001b80:	4854      	ldr	r0, [pc, #336]	@ (8001cd4 <.text_18>)
 8001b82:	1820      	adds	r0, r4, r0
 8001b84:	78c2      	ldrb	r2, [r0, #3]
 8001b86:	2033      	movs	r0, #51	@ 0x33
 8001b88:	5c21      	ldrb	r1, [r4, r0]
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	f7ff ff52 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d103      	bne.n	8001b9c <PE_SubStateMachine_ExtendedMessages+0x110>
 8001b94:	484f      	ldr	r0, [pc, #316]	@ (8001cd4 <.text_18>)
 8001b96:	1820      	adds	r0, r4, r0
 8001b98:	7940      	ldrb	r0, [r0, #5]
 8001b9a:	7720      	strb	r0, [r4, #28]
 8001b9c:	e08b      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001b9e:	83e2      	strh	r2, [r4, #30]
 8001ba0:	271b      	movs	r7, #27
 8001ba2:	494c      	ldr	r1, [pc, #304]	@ (8001cd4 <.text_18>)
 8001ba4:	1861      	adds	r1, r4, r1
 8001ba6:	78c9      	ldrb	r1, [r1, #3]
 8001ba8:	2904      	cmp	r1, #4
 8001baa:	d151      	bne.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001bac:	2074      	movs	r0, #116	@ 0x74
 8001bae:	e04f      	b.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001bb0:	4848      	ldr	r0, [pc, #288]	@ (8001cd4 <.text_18>)
 8001bb2:	5a20      	ldrh	r0, [r4, r0]
 8001bb4:	0440      	lsls	r0, r0, #17
 8001bb6:	0f02      	lsrs	r2, r0, #28
 8001bb8:	211a      	movs	r1, #26
 8001bba:	4351      	muls	r1, r2
 8001bbc:	4842      	ldr	r0, [pc, #264]	@ (8001cc8 <.text_15>)
 8001bbe:	1820      	adds	r0, r4, r0
 8001bc0:	8843      	ldrh	r3, [r0, #2]
 8001bc2:	4299      	cmp	r1, r3
 8001bc4:	da01      	bge.n	8001bca <PE_SubStateMachine_ExtendedMessages+0x13e>
 8001bc6:	2a0a      	cmp	r2, #10
 8001bc8:	d301      	bcc.n	8001bce <PE_SubStateMachine_ExtendedMessages+0x142>
 8001bca:	7466      	strb	r6, [r4, #17]
 8001bcc:	e01d      	b.n	8001c0a <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001bce:	1a5a      	subs	r2, r3, r1
 8001bd0:	2a1a      	cmp	r2, #26
 8001bd2:	d202      	bcs.n	8001bda <PE_SubStateMachine_ExtendedMessages+0x14e>
 8001bd4:	1a5b      	subs	r3, r3, r1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	e000      	b.n	8001bdc <PE_SubStateMachine_ExtendedMessages+0x150>
 8001bda:	231a      	movs	r3, #26
 8001bdc:	2200      	movs	r2, #0
 8001bde:	e006      	b.n	8001bee <PE_SubStateMachine_ExtendedMessages+0x162>
 8001be0:	4e3b      	ldr	r6, [pc, #236]	@ (8001cd0 <.text_17>)
 8001be2:	19a6      	adds	r6, r4, r6
 8001be4:	188f      	adds	r7, r1, r2
 8001be6:	5df6      	ldrb	r6, [r6, r7]
 8001be8:	9f00      	ldr	r7, [sp, #0]
 8001bea:	54be      	strb	r6, [r7, r2]
 8001bec:	1c52      	adds	r2, r2, #1
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3f6      	bcc.n	8001be0 <PE_SubStateMachine_ExtendedMessages+0x154>
 8001bf2:	4934      	ldr	r1, [pc, #208]	@ (8001cc4 <.text_14>)
 8001bf4:	1863      	adds	r3, r4, r1
 8001bf6:	8842      	ldrh	r2, [r0, #2]
 8001bf8:	4836      	ldr	r0, [pc, #216]	@ (8001cd4 <.text_18>)
 8001bfa:	5a20      	ldrh	r0, [r4, r0]
 8001bfc:	0440      	lsls	r0, r0, #17
 8001bfe:	0f01      	lsrs	r1, r0, #28
 8001c00:	7c20      	ldrb	r0, [r4, #16]
 8001c02:	f004 fba8 	bl	8006356 <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001c06:	2035      	movs	r0, #53	@ 0x35
 8001c08:	7460      	strb	r0, [r4, #17]
 8001c0a:	2700      	movs	r7, #0
 8001c0c:	e053      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c0e:	6960      	ldr	r0, [r4, #20]
 8001c10:	0681      	lsls	r1, r0, #26
 8001c12:	0fc9      	lsrs	r1, r1, #31
 8001c14:	d001      	beq.n	8001c1a <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001c16:	2036      	movs	r0, #54	@ 0x36
 8001c18:	e000      	b.n	8001c1c <PE_SubStateMachine_ExtendedMessages+0x190>
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	492a      	ldr	r1, [pc, #168]	@ (8001cc8 <.text_15>)
 8001c1e:	1866      	adds	r6, r4, r1
 8001c20:	9502      	str	r5, [sp, #8]
 8001c22:	9001      	str	r0, [sp, #4]
 8001c24:	8870      	ldrh	r0, [r6, #2]
 8001c26:	9000      	str	r0, [sp, #0]
 8001c28:	4826      	ldr	r0, [pc, #152]	@ (8001cc4 <.text_14>)
 8001c2a:	1823      	adds	r3, r4, r0
 8001c2c:	3809      	subs	r0, #9
 8001c2e:	1820      	adds	r0, r4, r0
 8001c30:	78c2      	ldrb	r2, [r0, #3]
 8001c32:	2030      	movs	r0, #48	@ 0x30
 8001c34:	5c21      	ldrb	r1, [r4, r0]
 8001c36:	0020      	movs	r0, r4
 8001c38:	f7ff fefc 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001c3c:	8035      	strh	r5, [r6, #0]
 8001c3e:	e03a      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c40:	83e2      	strh	r2, [r4, #30]
 8001c42:	271b      	movs	r7, #27
 8001c44:	e004      	b.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001c46:	8be0      	ldrh	r0, [r4, #30]
 8001c48:	020b      	lsls	r3, r1, #8
 8001c4a:	4298      	cmp	r0, r3
 8001c4c:	d102      	bne.n	8001c54 <PE_SubStateMachine_ExtendedMessages+0x1c8>
 8001c4e:	200f      	movs	r0, #15
 8001c50:	7460      	strb	r0, [r4, #17]
 8001c52:	e030      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c54:	83e2      	strh	r2, [r4, #30]
 8001c56:	271b      	movs	r7, #27
 8001c58:	481a      	ldr	r0, [pc, #104]	@ (8001cc4 <.text_14>)
 8001c5a:	1825      	adds	r5, r4, r0
 8001c5c:	0029      	movs	r1, r5
 8001c5e:	7c20      	ldrb	r0, [r4, #16]
 8001c60:	f004 fba1 	bl	80063a6 <USBPD_PRL_PrepareChunkRequest>
 8001c64:	6860      	ldr	r0, [r4, #4]
 8001c66:	6800      	ldr	r0, [r0, #0]
 8001c68:	04c1      	lsls	r1, r0, #19
 8001c6a:	0fc9      	lsrs	r1, r1, #31
 8001c6c:	d012      	beq.n	8001c94 <PE_SubStateMachine_ExtendedMessages+0x208>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	9001      	str	r0, [sp, #4]
 8001c72:	2006      	movs	r0, #6
 8001c74:	9000      	str	r0, [sp, #0]
 8001c76:	002b      	movs	r3, r5
 8001c78:	4816      	ldr	r0, [pc, #88]	@ (8001cd4 <.text_18>)
 8001c7a:	1820      	adds	r0, r4, r0
 8001c7c:	7880      	ldrb	r0, [r0, #2]
 8001c7e:	4669      	mov	r1, sp
 8001c80:	7a0a      	ldrb	r2, [r1, #8]
 8001c82:	4302      	orrs	r2, r0
 8001c84:	2030      	movs	r0, #48	@ 0x30
 8001c86:	5c21      	ldrb	r1, [r4, r0]
 8001c88:	7c20      	ldrb	r0, [r4, #16]
 8001c8a:	f003 fec3 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001c8e:	2803      	cmp	r0, #3
 8001c90:	d0e8      	beq.n	8001c64 <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001c92:	e002      	b.n	8001c9a <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001c94:	2011      	movs	r0, #17
 8001c96:	7460      	strb	r0, [r4, #17]
 8001c98:	2010      	movs	r0, #16
 8001c9a:	2139      	movs	r1, #57	@ 0x39
 8001c9c:	9100      	str	r1, [sp, #0]
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2030      	movs	r0, #48	@ 0x30
 8001ca4:	5c21      	ldrb	r1, [r4, r0]
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f000 f9b4 	bl	8002014 <PE_CheckSendMessageStatus>
 8001cac:	e003      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001cae:	7466      	strb	r6, [r4, #17]
 8001cb0:	2700      	movs	r7, #0
 8001cb2:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <.text_15>)
 8001cb4:	5225      	strh	r5, [r4, r0]
 8001cb6:	0038      	movs	r0, r7
 8001cb8:	b005      	add	sp, #20
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cbc <.text_12>:
 8001cbc:	00000267 	.word	0x00000267

08001cc0 <.text_13>:
 8001cc0:	0000801b 	.word	0x0000801b

08001cc4 <.text_14>:
 8001cc4:	00000263 	.word	0x00000263

08001cc8 <.text_15>:
 8001cc8:	0000048e 	.word	0x0000048e

08001ccc <.text_16>:
 8001ccc:	00000387 	.word	0x00000387

08001cd0 <.text_17>:
 8001cd0:	00000385 	.word	0x00000385

08001cd4 <.text_18>:
 8001cd4:	0000025a 	.word	0x0000025a

08001cd8 <PE_ManageRXEvent>:
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	2130      	movs	r1, #48	@ 0x30
 8001cdc:	5c41      	ldrb	r1, [r0, r1]
 8001cde:	2231      	movs	r2, #49	@ 0x31
 8001ce0:	5481      	strb	r1, [r0, r2]
 8001ce2:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 8001ce4:	0bca      	lsrs	r2, r1, #15
 8001ce6:	d002      	beq.n	8001cee <PE_ManageRXEvent+0x16>
 8001ce8:	f7ff fdae 	bl	8001848 <PE_Check_ExtendedMessage>
 8001cec:	bd01      	pop	{r0, pc}
 8001cee:	22f0      	movs	r2, #240	@ 0xf0
 8001cf0:	0212      	lsls	r2, r2, #8
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	d102      	bne.n	8001cfc <PE_ManageRXEvent+0x24>
 8001cf6:	f000 f805 	bl	8001d04 <PE_Check_ControlMessage>
 8001cfa:	bd01      	pop	{r0, pc}
 8001cfc:	f000 f8e5 	bl	8001eca <PE_Check_DataMessage>
 8001d00:	bd01      	pop	{r0, pc}
	...

08001d04 <PE_Check_ControlMessage>:
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	0004      	movs	r4, r0
 8001d08:	272a      	movs	r7, #42	@ 0x2a
 8001d0a:	2603      	movs	r6, #3
 8001d0c:	2501      	movs	r5, #1
 8001d0e:	200b      	movs	r0, #11
 8001d10:	2134      	movs	r1, #52	@ 0x34
 8001d12:	5c61      	ldrb	r1, [r4, r1]
 8001d14:	06c9      	lsls	r1, r1, #27
 8001d16:	0ec9      	lsrs	r1, r1, #27
 8001d18:	1e49      	subs	r1, r1, #1
 8001d1a:	2917      	cmp	r1, #23
 8001d1c:	d900      	bls.n	8001d20 <PE_Check_ControlMessage+0x1c>
 8001d1e:	e0c7      	b.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001d20:	a201      	add	r2, pc, #4	@ (adr r2, 8001d28 <PE_Check_ControlMessage+0x24>)
 8001d22:	5c52      	ldrb	r2, [r2, r1]
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	4497      	add	pc, r2
 8001d28:	c0c00bcb 	.word	0xc0c00bcb
 8001d2c:	5b22c020 	.word	0x5b22c020
 8001d30:	c0413449 	.word	0xc0413449
 8001d34:	bec3c319 	.word	0xbec3c319
 8001d38:	9fb7936f 	.word	0x9fb7936f
 8001d3c:	bac383b0 	.word	0xbac383b0
 8001d40:	6860      	ldr	r0, [r4, #4]
 8001d42:	6800      	ldr	r0, [r0, #0]
 8001d44:	0880      	lsrs	r0, r0, #2
 8001d46:	4005      	ands	r5, r0
 8001d48:	d000      	beq.n	8001d4c <PE_Check_ControlMessage+0x48>
 8001d4a:	e0b9      	b.n	8001ec0 <PE_Check_ControlMessage+0x1bc>
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	7720      	strb	r0, [r4, #28]
 8001d50:	212b      	movs	r1, #43	@ 0x2b
 8001d52:	7c20      	ldrb	r0, [r4, #16]
 8001d54:	f7fe fcc8 	bl	80006e8 <USBPD_PE_Notification>
 8001d58:	2098      	movs	r0, #152	@ 0x98
 8001d5a:	e0a7      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d5c:	7726      	strb	r6, [r4, #28]
 8001d5e:	2132      	movs	r1, #50	@ 0x32
 8001d60:	7c20      	ldrb	r0, [r4, #16]
 8001d62:	f7fe fcc1 	bl	80006e8 <USBPD_PE_Notification>
 8001d66:	2010      	movs	r0, #16
 8001d68:	e0a0      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d6a:	2133      	movs	r1, #51	@ 0x33
 8001d6c:	e09c      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001d6e:	2006      	movs	r0, #6
 8001d70:	7720      	strb	r0, [r4, #28]
 8001d72:	6860      	ldr	r0, [r4, #4]
 8001d74:	6800      	ldr	r0, [r0, #0]
 8001d76:	0881      	lsrs	r1, r0, #2
 8001d78:	4029      	ands	r1, r5
 8001d7a:	d104      	bne.n	8001d86 <PE_Check_ControlMessage+0x82>
 8001d7c:	6821      	ldr	r1, [r4, #0]
 8001d7e:	6849      	ldr	r1, [r1, #4]
 8001d80:	08c9      	lsrs	r1, r1, #3
 8001d82:	4029      	ands	r1, r5
 8001d84:	d039      	beq.n	8001dfa <PE_Check_ControlMessage+0xf6>
 8001d86:	210c      	movs	r1, #12
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	f7fe fcad 	bl	80006e8 <USBPD_PE_Notification>
 8001d8e:	204c      	movs	r0, #76	@ 0x4c
 8001d90:	e08c      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d92:	6820      	ldr	r0, [r4, #0]
 8001d94:	6840      	ldr	r0, [r0, #4]
 8001d96:	08c0      	lsrs	r0, r0, #3
 8001d98:	4028      	ands	r0, r5
 8001d9a:	d00a      	beq.n	8001db2 <PE_Check_ControlMessage+0xae>
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	7720      	strb	r0, [r4, #28]
 8001da0:	213c      	movs	r1, #60	@ 0x3c
 8001da2:	7c20      	ldrb	r0, [r4, #16]
 8001da4:	f7fe fca0 	bl	80006e8 <USBPD_PE_Notification>
 8001da8:	2022      	movs	r0, #34	@ 0x22
 8001daa:	e07f      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dac:	68a0      	ldr	r0, [r4, #8]
 8001dae:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d07d      	beq.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001db4:	2011      	movs	r0, #17
 8001db6:	7720      	strb	r0, [r4, #28]
 8001db8:	209d      	movs	r0, #157	@ 0x9d
 8001dba:	e077      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dbc:	2123      	movs	r1, #35	@ 0x23
 8001dbe:	7c20      	ldrb	r0, [r4, #16]
 8001dc0:	f7fe fc92 	bl	80006e8 <USBPD_PE_Notification>
 8001dc4:	6960      	ldr	r0, [r4, #20]
 8001dc6:	05c0      	lsls	r0, r0, #23
 8001dc8:	0f40      	lsrs	r0, r0, #29
 8001dca:	d001      	beq.n	8001dd0 <PE_Check_ControlMessage+0xcc>
 8001dcc:	200f      	movs	r0, #15
 8001dce:	e06d      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dd0:	68a0      	ldr	r0, [r4, #8]
 8001dd2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d06b      	beq.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001dd8:	2010      	movs	r0, #16
 8001dda:	7720      	strb	r0, [r4, #28]
 8001ddc:	2093      	movs	r0, #147	@ 0x93
 8001dde:	e065      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001de0:	6860      	ldr	r0, [r4, #4]
 8001de2:	6800      	ldr	r0, [r0, #0]
 8001de4:	0541      	lsls	r1, r0, #21
 8001de6:	0f49      	lsrs	r1, r1, #29
 8001de8:	2903      	cmp	r1, #3
 8001dea:	d163      	bne.n	8001eb4 <PE_Check_ControlMessage+0x1b0>
 8001dec:	0881      	lsrs	r1, r0, #2
 8001dee:	4029      	ands	r1, r5
 8001df0:	d004      	beq.n	8001dfc <PE_Check_ControlMessage+0xf8>
 8001df2:	6821      	ldr	r1, [r4, #0]
 8001df4:	6849      	ldr	r1, [r1, #4]
 8001df6:	08c9      	lsrs	r1, r1, #3
 8001df8:	4029      	ands	r1, r5
 8001dfa:	d05b      	beq.n	8001eb4 <PE_Check_ControlMessage+0x1b0>
 8001dfc:	2007      	movs	r0, #7
 8001dfe:	7720      	strb	r0, [r4, #28]
 8001e00:	201d      	movs	r0, #29
 8001e02:	7460      	strb	r0, [r4, #17]
 8001e04:	2106      	movs	r1, #6
 8001e06:	e04f      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e08:	6820      	ldr	r0, [r4, #0]
 8001e0a:	8901      	ldrh	r1, [r0, #8]
 8001e0c:	08c9      	lsrs	r1, r1, #3
 8001e0e:	4229      	tst	r1, r5
 8001e10:	d053      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e12:	6861      	ldr	r1, [r4, #4]
 8001e14:	6809      	ldr	r1, [r1, #0]
 8001e16:	0889      	lsrs	r1, r1, #2
 8001e18:	4029      	ands	r1, r5
 8001e1a:	d103      	bne.n	8001e24 <PE_Check_ControlMessage+0x120>
 8001e1c:	6840      	ldr	r0, [r0, #4]
 8001e1e:	08c0      	lsrs	r0, r0, #3
 8001e20:	4028      	ands	r0, r5
 8001e22:	d04a      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e24:	200a      	movs	r0, #10
 8001e26:	7720      	strb	r0, [r4, #28]
 8001e28:	2063      	movs	r0, #99	@ 0x63
 8001e2a:	7460      	strb	r0, [r4, #17]
 8001e2c:	2146      	movs	r1, #70	@ 0x46
 8001e2e:	e03b      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e30:	6860      	ldr	r0, [r4, #4]
 8001e32:	6800      	ldr	r0, [r0, #0]
 8001e34:	0880      	lsrs	r0, r0, #2
 8001e36:	4028      	ands	r0, r5
 8001e38:	d004      	beq.n	8001e44 <PE_Check_ControlMessage+0x140>
 8001e3a:	6820      	ldr	r0, [r4, #0]
 8001e3c:	6840      	ldr	r0, [r0, #4]
 8001e3e:	08c0      	lsrs	r0, r0, #3
 8001e40:	4028      	ands	r0, r5
 8001e42:	d03a      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e44:	205f      	movs	r0, #95	@ 0x5f
 8001e46:	7720      	strb	r0, [r4, #28]
 8001e48:	2064      	movs	r0, #100	@ 0x64
 8001e4a:	7460      	strb	r0, [r4, #17]
 8001e4c:	2160      	movs	r1, #96	@ 0x60
 8001e4e:	e02b      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e50:	6821      	ldr	r1, [r4, #0]
 8001e52:	8909      	ldrh	r1, [r1, #8]
 8001e54:	0949      	lsrs	r1, r1, #5
 8001e56:	4229      	tst	r1, r5
 8001e58:	d02f      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e5a:	7720      	strb	r0, [r4, #28]
 8001e5c:	214d      	movs	r1, #77	@ 0x4d
 8001e5e:	7c20      	ldrb	r0, [r4, #16]
 8001e60:	f7fe fc42 	bl	80006e8 <USBPD_PE_Notification>
 8001e64:	2030      	movs	r0, #48	@ 0x30
 8001e66:	e021      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e68:	6821      	ldr	r1, [r4, #0]
 8001e6a:	8909      	ldrh	r1, [r1, #8]
 8001e6c:	0889      	lsrs	r1, r1, #2
 8001e6e:	4229      	tst	r1, r5
 8001e70:	d023      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e72:	7720      	strb	r0, [r4, #28]
 8001e74:	2149      	movs	r1, #73	@ 0x49
 8001e76:	7c20      	ldrb	r0, [r4, #16]
 8001e78:	f7fe fc36 	bl	80006e8 <USBPD_PE_Notification>
 8001e7c:	6860      	ldr	r0, [r4, #4]
 8001e7e:	6800      	ldr	r0, [r0, #0]
 8001e80:	0880      	lsrs	r0, r0, #2
 8001e82:	4005      	ands	r5, r0
 8001e84:	d011      	beq.n	8001eaa <PE_Check_ControlMessage+0x1a6>
 8001e86:	202d      	movs	r0, #45	@ 0x2d
 8001e88:	e010      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e8a:	6820      	ldr	r0, [r4, #0]
 8001e8c:	8900      	ldrh	r0, [r0, #8]
 8001e8e:	09c0      	lsrs	r0, r0, #7
 8001e90:	4228      	tst	r0, r5
 8001e92:	d012      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e94:	202f      	movs	r0, #47	@ 0x2f
 8001e96:	e009      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e98:	2009      	movs	r0, #9
 8001e9a:	7720      	strb	r0, [r4, #28]
 8001e9c:	e00d      	b.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	7720      	strb	r0, [r4, #28]
 8001ea2:	204b      	movs	r0, #75	@ 0x4b
 8001ea4:	e002      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001ea6:	2159      	movs	r1, #89	@ 0x59
 8001ea8:	e00b      	b.n	8001ec2 <.text_21>
 8001eaa:	2011      	movs	r0, #17
 8001eac:	7460      	strb	r0, [r4, #17]
 8001eae:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001eb0:	6860      	ldr	r0, [r4, #4]
 8001eb2:	6800      	ldr	r0, [r0, #0]
 8001eb4:	4006      	ands	r6, r0
 8001eb6:	2e02      	cmp	r6, #2
 8001eb8:	d101      	bne.n	8001ebe <PE_Check_ControlMessage+0x1ba>
 8001eba:	7465      	strb	r5, [r4, #17]
 8001ebc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001ebe:	7467      	strb	r7, [r4, #17]
 8001ec0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001ec2 <.text_21>:
 8001ec2:	7c20      	ldrb	r0, [r4, #16]
 8001ec4:	f7fe fc10 	bl	80006e8 <USBPD_PE_Notification>
 8001ec8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001eca <PE_Check_DataMessage>:
 8001eca:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001ecc:	0004      	movs	r4, r0
 8001ece:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001ed0:	2501      	movs	r5, #1
 8001ed2:	2603      	movs	r6, #3
 8001ed4:	2700      	movs	r7, #0
 8001ed6:	06c1      	lsls	r1, r0, #27
 8001ed8:	0ec9      	lsrs	r1, r1, #27
 8001eda:	2901      	cmp	r1, #1
 8001edc:	d029      	beq.n	8001f32 <PE_Check_DataMessage+0x68>
 8001ede:	2902      	cmp	r1, #2
 8001ee0:	d00b      	beq.n	8001efa <PE_Check_DataMessage+0x30>
 8001ee2:	2903      	cmp	r1, #3
 8001ee4:	d03d      	beq.n	8001f62 <PE_Check_DataMessage+0x98>
 8001ee6:	2906      	cmp	r1, #6
 8001ee8:	d079      	beq.n	8001fde <PE_Check_DataMessage+0x114>
 8001eea:	2907      	cmp	r1, #7
 8001eec:	d100      	bne.n	8001ef0 <PE_Check_DataMessage+0x26>
 8001eee:	e085      	b.n	8001ffc <PE_Check_DataMessage+0x132>
 8001ef0:	290a      	cmp	r1, #10
 8001ef2:	d078      	beq.n	8001fe6 <PE_Check_DataMessage+0x11c>
 8001ef4:	290f      	cmp	r1, #15
 8001ef6:	d06e      	beq.n	8001fd6 <PE_Check_DataMessage+0x10c>
 8001ef8:	e089      	b.n	800200e <PE_Check_DataMessage+0x144>
 8001efa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001efc:	7881      	ldrb	r1, [r0, #2]
 8001efe:	78c2      	ldrb	r2, [r0, #3]
 8001f00:	0212      	lsls	r2, r2, #8
 8001f02:	1889      	adds	r1, r1, r2
 8001f04:	7902      	ldrb	r2, [r0, #4]
 8001f06:	0412      	lsls	r2, r2, #16
 8001f08:	1889      	adds	r1, r1, r2
 8001f0a:	7940      	ldrb	r0, [r0, #5]
 8001f0c:	0600      	lsls	r0, r0, #24
 8001f0e:	1808      	adds	r0, r1, r0
 8001f10:	9000      	str	r0, [sp, #0]
 8001f12:	6860      	ldr	r0, [r4, #4]
 8001f14:	6800      	ldr	r0, [r0, #0]
 8001f16:	0880      	lsrs	r0, r0, #2
 8001f18:	4028      	ands	r0, r5
 8001f1a:	d07a      	beq.n	8002012 <PE_Check_DataMessage+0x148>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	466a      	mov	r2, sp
 8001f20:	2106      	movs	r1, #6
 8001f22:	7c20      	ldrb	r0, [r4, #16]
 8001f24:	68a6      	ldr	r6, [r4, #8]
 8001f26:	69b6      	ldr	r6, [r6, #24]
 8001f28:	47b0      	blx	r6
 8001f2a:	7725      	strb	r5, [r4, #28]
 8001f2c:	84a7      	strh	r7, [r4, #36]	@ 0x24
 8001f2e:	2009      	movs	r0, #9
 8001f30:	e06e      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001f32:	6861      	ldr	r1, [r4, #4]
 8001f34:	6809      	ldr	r1, [r1, #0]
 8001f36:	0889      	lsrs	r1, r1, #2
 8001f38:	400d      	ands	r5, r1
 8001f3a:	d16a      	bne.n	8002012 <PE_Check_DataMessage+0x148>
 8001f3c:	0980      	lsrs	r0, r0, #6
 8001f3e:	4006      	ands	r6, r0
 8001f40:	0031      	movs	r1, r6
 8001f42:	7c20      	ldrb	r0, [r4, #16]
 8001f44:	f7fe ff8a 	bl	8000e5c <PE_ExtRevisionInteroperability>
 8001f48:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001f4a:	0440      	lsls	r0, r0, #17
 8001f4c:	0f40      	lsrs	r0, r0, #29
 8001f4e:	0083      	lsls	r3, r0, #2
 8001f50:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f52:	1c82      	adds	r2, r0, #2
 8001f54:	2104      	movs	r1, #4
 8001f56:	7c20      	ldrb	r0, [r4, #16]
 8001f58:	68a5      	ldr	r5, [r4, #8]
 8001f5a:	69ad      	ldr	r5, [r5, #24]
 8001f5c:	47a8      	blx	r5
 8001f5e:	2044      	movs	r0, #68	@ 0x44
 8001f60:	e056      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001f62:	9701      	str	r7, [sp, #4]
 8001f64:	9700      	str	r7, [sp, #0]
 8001f66:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f68:	7881      	ldrb	r1, [r0, #2]
 8001f6a:	78c2      	ldrb	r2, [r0, #3]
 8001f6c:	0212      	lsls	r2, r2, #8
 8001f6e:	1889      	adds	r1, r1, r2
 8001f70:	7902      	ldrb	r2, [r0, #4]
 8001f72:	0412      	lsls	r2, r2, #16
 8001f74:	1889      	adds	r1, r1, r2
 8001f76:	7940      	ldrb	r0, [r0, #5]
 8001f78:	0600      	lsls	r0, r0, #24
 8001f7a:	180d      	adds	r5, r1, r0
 8001f7c:	466b      	mov	r3, sp
 8001f7e:	aa01      	add	r2, sp, #4
 8001f80:	2103      	movs	r1, #3
 8001f82:	7c20      	ldrb	r0, [r4, #16]
 8001f84:	68a7      	ldr	r7, [r4, #8]
 8001f86:	697f      	ldr	r7, [r7, #20]
 8001f88:	47b8      	blx	r7
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	9800      	ldr	r0, [sp, #0]
 8001f8e:	f7ff fb91 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d11d      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001f96:	6860      	ldr	r0, [r4, #4]
 8001f98:	6800      	ldr	r0, [r0, #0]
 8001f9a:	0540      	lsls	r0, r0, #21
 8001f9c:	0f40      	lsrs	r0, r0, #29
 8001f9e:	2803      	cmp	r0, #3
 8001fa0:	d117      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001fa2:	9801      	ldr	r0, [sp, #4]
 8001fa4:	4938      	ldr	r1, [pc, #224]	@ (8002088 <.text_24>)
 8001fa6:	4288      	cmp	r0, r1
 8001fa8:	d113      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001faa:	0f28      	lsrs	r0, r5, #28
 8001fac:	2805      	cmp	r0, #5
 8001fae:	d00e      	beq.n	8001fce <PE_Check_DataMessage+0x104>
 8001fb0:	2808      	cmp	r0, #8
 8001fb2:	d00a      	beq.n	8001fca <PE_Check_DataMessage+0x100>
 8001fb4:	2809      	cmp	r0, #9
 8001fb6:	d003      	beq.n	8001fc0 <PE_Check_DataMessage+0xf6>
 8001fb8:	280a      	cmp	r0, #10
 8001fba:	d12a      	bne.n	8002012 <PE_Check_DataMessage+0x148>
 8001fbc:	2166      	movs	r1, #102	@ 0x66
 8001fbe:	e000      	b.n	8001fc2 <PE_Check_DataMessage+0xf8>
 8001fc0:	2165      	movs	r1, #101	@ 0x65
 8001fc2:	7c20      	ldrb	r0, [r4, #16]
 8001fc4:	f7fe fb90 	bl	80006e8 <USBPD_PE_Notification>
 8001fc8:	e003      	b.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001fca:	2029      	movs	r0, #41	@ 0x29
 8001fcc:	e020      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001fce:	2027      	movs	r0, #39	@ 0x27
 8001fd0:	e01e      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001fd2:	7466      	strb	r6, [r4, #17]
 8001fd4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001fd6:	0020      	movs	r0, r4
 8001fd8:	f003 fabe 	bl	8005558 <PE_Check_DataMessageVDM>
 8001fdc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001fde:	6820      	ldr	r0, [r4, #0]
 8001fe0:	8900      	ldrh	r0, [r0, #8]
 8001fe2:	0900      	lsrs	r0, r0, #4
 8001fe4:	4228      	tst	r0, r5
 8001fe6:	d010      	beq.n	800200a <PE_Check_DataMessage+0x140>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001fec:	1c82      	adds	r2, r0, #2
 8001fee:	210b      	movs	r1, #11
 8001ff0:	7c20      	ldrb	r0, [r4, #16]
 8001ff2:	68a5      	ldr	r5, [r4, #8]
 8001ff4:	69ad      	ldr	r5, [r5, #24]
 8001ff6:	47a8      	blx	r5
 8001ff8:	202c      	movs	r0, #44	@ 0x2c
 8001ffa:	e009      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001ffc:	6820      	ldr	r0, [r4, #0]
 8001ffe:	8900      	ldrh	r0, [r0, #8]
 8002000:	0a00      	lsrs	r0, r0, #8
 8002002:	4228      	tst	r0, r5
 8002004:	d001      	beq.n	800200a <PE_Check_DataMessage+0x140>
 8002006:	203d      	movs	r0, #61	@ 0x3d
 8002008:	e002      	b.n	8002010 <PE_Check_DataMessage+0x146>
 800200a:	7465      	strb	r5, [r4, #17]
 800200c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800200e:	2011      	movs	r0, #17
 8002010:	7460      	strb	r0, [r4, #17]
 8002012:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002014 <PE_CheckSendMessageStatus>:
 8002014:	b510      	push	{r4, lr}
 8002016:	000c      	movs	r4, r1
 8002018:	2110      	movs	r1, #16
 800201a:	2b05      	cmp	r3, #5
 800201c:	d006      	beq.n	800202c <PE_CheckSendMessageStatus+0x18>
 800201e:	2b06      	cmp	r3, #6
 8002020:	d00e      	beq.n	8002040 <PE_CheckSendMessageStatus+0x2c>
 8002022:	2b07      	cmp	r3, #7
 8002024:	d011      	beq.n	800204a <PE_CheckSendMessageStatus+0x36>
 8002026:	2b09      	cmp	r3, #9
 8002028:	d008      	beq.n	800203c <PE_CheckSendMessageStatus+0x28>
 800202a:	e02a      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800202c:	9902      	ldr	r1, [sp, #8]
 800202e:	7441      	strb	r1, [r0, #17]
 8002030:	6941      	ldr	r1, [r0, #20]
 8002032:	4a16      	ldr	r2, [pc, #88]	@ (800208c <.text_25>)
 8002034:	400a      	ands	r2, r1
 8002036:	6142      	str	r2, [r0, #20]
 8002038:	2100      	movs	r1, #0
 800203a:	e022      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800203c:	2109      	movs	r1, #9
 800203e:	e020      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 8002040:	6942      	ldr	r2, [r0, #20]
 8002042:	024b      	lsls	r3, r1, #9
 8002044:	4313      	orrs	r3, r2
 8002046:	6143      	str	r3, [r0, #20]
 8002048:	e01b      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800204a:	2c00      	cmp	r4, #0
 800204c:	d005      	beq.n	800205a <PE_CheckSendMessageStatus+0x46>
 800204e:	2a01      	cmp	r2, #1
 8002050:	d101      	bne.n	8002056 <PE_CheckSendMessageStatus+0x42>
 8002052:	2299      	movs	r2, #153	@ 0x99
 8002054:	e014      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 8002056:	2107      	movs	r1, #7
 8002058:	e013      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800205a:	6844      	ldr	r4, [r0, #4]
 800205c:	6824      	ldr	r4, [r4, #0]
 800205e:	0a24      	lsrs	r4, r4, #8
 8002060:	4023      	ands	r3, r4
 8002062:	2b04      	cmp	r3, #4
 8002064:	d003      	beq.n	800206e <PE_CheckSendMessageStatus+0x5a>
 8002066:	2a01      	cmp	r2, #1
 8002068:	d109      	bne.n	800207e <PE_CheckSendMessageStatus+0x6a>
 800206a:	220f      	movs	r2, #15
 800206c:	e008      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 800206e:	2a00      	cmp	r2, #0
 8002070:	d1fb      	bne.n	800206a <PE_CheckSendMessageStatus+0x56>
 8002072:	6882      	ldr	r2, [r0, #8]
 8002074:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002076:	2a00      	cmp	r2, #0
 8002078:	d0f7      	beq.n	800206a <PE_CheckSendMessageStatus+0x56>
 800207a:	2292      	movs	r2, #146	@ 0x92
 800207c:	e000      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 800207e:	2211      	movs	r2, #17
 8002080:	7442      	strb	r2, [r0, #17]
 8002082:	0008      	movs	r0, r1
 8002084:	bd10      	pop	{r4, pc}
	...

08002088 <.text_24>:
 8002088:	00001388 	.word	0x00001388

0800208c <.text_25>:
 800208c:	ffffbfff 	.word	0xffffbfff

08002090 <USBPD_PE_StateMachine_SNK>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	b08c      	sub	sp, #48	@ 0x30
 8002094:	0004      	movs	r4, r0
 8002096:	4828      	ldr	r0, [pc, #160]	@ (8002138 <USBPD_PE_StateMachine_SNK+0xa8>)
 8002098:	00a1      	lsls	r1, r4, #2
 800209a:	5845      	ldr	r5, [r0, r1]
 800209c:	7c68      	ldrb	r0, [r5, #17]
 800209e:	2848      	cmp	r0, #72	@ 0x48
 80020a0:	d133      	bne.n	800210a <USBPD_PE_StateMachine_SNK+0x7a>
 80020a2:	0028      	movs	r0, r5
 80020a4:	f7fe fe72 	bl	8000d8c <PE_Reset_ZI>
 80020a8:	0028      	movs	r0, r5
 80020aa:	f7fe fea5 	bl	8000df8 <PE_Reset_Counter>
 80020ae:	6828      	ldr	r0, [r5, #0]
 80020b0:	7900      	ldrb	r0, [r0, #4]
 80020b2:	0783      	lsls	r3, r0, #30
 80020b4:	0f9b      	lsrs	r3, r3, #30
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	7c28      	ldrb	r0, [r5, #16]
 80020bc:	f003 fc35 	bl	800592a <USBPD_PRL_SetHeader>
 80020c0:	6868      	ldr	r0, [r5, #4]
 80020c2:	6801      	ldr	r1, [r0, #0]
 80020c4:	2208      	movs	r2, #8
 80020c6:	4391      	bics	r1, r2
 80020c8:	6001      	str	r1, [r0, #0]
 80020ca:	6868      	ldr	r0, [r5, #4]
 80020cc:	6801      	ldr	r1, [r0, #0]
 80020ce:	2203      	movs	r2, #3
 80020d0:	4391      	bics	r1, r2
 80020d2:	682a      	ldr	r2, [r5, #0]
 80020d4:	7912      	ldrb	r2, [r2, #4]
 80020d6:	0792      	lsls	r2, r2, #30
 80020d8:	0f92      	lsrs	r2, r2, #30
 80020da:	430a      	orrs	r2, r1
 80020dc:	6002      	str	r2, [r0, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	7c28      	ldrb	r0, [r5, #16]
 80020e2:	f003 fc93 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80020e6:	7c28      	ldrb	r0, [r5, #16]
 80020e8:	f003 fefc 	bl	8005ee4 <USBPD_PRL_Reset>
 80020ec:	203e      	movs	r0, #62	@ 0x3e
 80020ee:	7468      	strb	r0, [r5, #17]
 80020f0:	7ca9      	ldrb	r1, [r5, #18]
 80020f2:	293e      	cmp	r1, #62	@ 0x3e
 80020f4:	d009      	beq.n	800210a <USBPD_PE_StateMachine_SNK+0x7a>
 80020f6:	74a8      	strb	r0, [r5, #18]
 80020f8:	2000      	movs	r0, #0
 80020fa:	9000      	str	r0, [sp, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	223e      	movs	r2, #62	@ 0x3e
 8002100:	7c29      	ldrb	r1, [r5, #16]
 8002102:	2004      	movs	r0, #4
 8002104:	4eb1      	ldr	r6, [pc, #708]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002106:	6836      	ldr	r6, [r6, #0]
 8002108:	47b0      	blx	r6
 800210a:	6968      	ldr	r0, [r5, #20]
 800210c:	0341      	lsls	r1, r0, #13
 800210e:	0fc9      	lsrs	r1, r1, #31
 8002110:	d006      	beq.n	8002120 <USBPD_PE_StateMachine_SNK+0x90>
 8002112:	49af      	ldr	r1, [pc, #700]	@ (80023d0 <__iar_annotation$$branch+0x8>)
 8002114:	4001      	ands	r1, r0
 8002116:	6169      	str	r1, [r5, #20]
 8002118:	2164      	movs	r1, #100	@ 0x64
 800211a:	7c28      	ldrb	r0, [r5, #16]
 800211c:	f7fe fae4 	bl	80006e8 <USBPD_PE_Notification>
 8002120:	0028      	movs	r0, r5
 8002122:	f7fe fd15 	bl	8000b50 <PE_Get_RxEvent>
 8002126:	4669      	mov	r1, sp
 8002128:	7308      	strb	r0, [r1, #12]
 800212a:	4668      	mov	r0, sp
 800212c:	7b00      	ldrb	r0, [r0, #12]
 800212e:	2803      	cmp	r0, #3
 8002130:	d104      	bne.n	800213c <USBPD_PE_StateMachine_SNK+0xac>
 8002132:	2001      	movs	r0, #1
 8002134:	b00d      	add	sp, #52	@ 0x34
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002138:	2000017c 	.word	0x2000017c
 800213c:	4668      	mov	r0, sp
 800213e:	7344      	strb	r4, [r0, #13]
 8002140:	2402      	movs	r4, #2
 8002142:	6868      	ldr	r0, [r5, #4]
 8002144:	6800      	ldr	r0, [r0, #0]
 8002146:	04c1      	lsls	r1, r0, #19
 8002148:	0fc9      	lsrs	r1, r1, #31
 800214a:	d100      	bne.n	800214e <USBPD_PE_StateMachine_SNK+0xbe>
 800214c:	e148      	b.n	80023e0 <__iar_annotation$$branch+0x18>
 800214e:	6968      	ldr	r0, [r5, #20]
 8002150:	0381      	lsls	r1, r0, #14
 8002152:	0fc9      	lsrs	r1, r1, #31
 8002154:	d014      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0xf0>
 8002156:	21a7      	movs	r1, #167	@ 0xa7
 8002158:	7469      	strb	r1, [r5, #17]
 800215a:	4a9e      	ldr	r2, [pc, #632]	@ (80023d4 <__iar_annotation$$branch+0xc>)
 800215c:	4002      	ands	r2, r0
 800215e:	616a      	str	r2, [r5, #20]
 8002160:	2000      	movs	r0, #0
 8002162:	2232      	movs	r2, #50	@ 0x32
 8002164:	54a8      	strb	r0, [r5, r2]
 8002166:	7ca8      	ldrb	r0, [r5, #18]
 8002168:	28a7      	cmp	r0, #167	@ 0xa7
 800216a:	d02b      	beq.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 800216c:	74a9      	strb	r1, [r5, #18]
 800216e:	2000      	movs	r0, #0
 8002170:	9000      	str	r0, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	22a7      	movs	r2, #167	@ 0xa7
 8002176:	7c29      	ldrb	r1, [r5, #16]
 8002178:	2004      	movs	r0, #4
 800217a:	4e94      	ldr	r6, [pc, #592]	@ (80023cc <__iar_annotation$$branch+0x4>)
 800217c:	6836      	ldr	r6, [r6, #0]
 800217e:	47b0      	blx	r6
 8002180:	2032      	movs	r0, #50	@ 0x32
 8002182:	5c28      	ldrb	r0, [r5, r0]
 8002184:	280f      	cmp	r0, #15
 8002186:	d001      	beq.n	800218c <USBPD_PE_StateMachine_SNK+0xfc>
 8002188:	2814      	cmp	r0, #20
 800218a:	d11b      	bne.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 800218c:	4668      	mov	r0, sp
 800218e:	7b00      	ldrb	r0, [r0, #12]
 8002190:	2814      	cmp	r0, #20
 8002192:	d005      	beq.n	80021a0 <USBPD_PE_StateMachine_SNK+0x110>
 8002194:	2014      	movs	r0, #20
 8002196:	4669      	mov	r1, sp
 8002198:	7308      	strb	r0, [r1, #12]
 800219a:	0028      	movs	r0, r5
 800219c:	f7fe fd0f 	bl	8000bbe <PE_Clear_RxEvent>
 80021a0:	2032      	movs	r0, #50	@ 0x32
 80021a2:	5c2a      	ldrb	r2, [r5, r0]
 80021a4:	746a      	strb	r2, [r5, #17]
 80021a6:	2000      	movs	r0, #0
 80021a8:	2132      	movs	r1, #50	@ 0x32
 80021aa:	5468      	strb	r0, [r5, r1]
 80021ac:	7ca8      	ldrb	r0, [r5, #18]
 80021ae:	4290      	cmp	r0, r2
 80021b0:	d008      	beq.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 80021b2:	74aa      	strb	r2, [r5, #18]
 80021b4:	2000      	movs	r0, #0
 80021b6:	9000      	str	r0, [sp, #0]
 80021b8:	2300      	movs	r3, #0
 80021ba:	7c29      	ldrb	r1, [r5, #16]
 80021bc:	2004      	movs	r0, #4
 80021be:	4e83      	ldr	r6, [pc, #524]	@ (80023cc <__iar_annotation$$branch+0x4>)
 80021c0:	6836      	ldr	r6, [r6, #0]
 80021c2:	47b0      	blx	r6
 80021c4:	4668      	mov	r0, sp
 80021c6:	7b00      	ldrb	r0, [r0, #12]
 80021c8:	2811      	cmp	r0, #17
 80021ca:	d11f      	bne.n	800220c <USBPD_PE_StateMachine_SNK+0x17c>
 80021cc:	6868      	ldr	r0, [r5, #4]
 80021ce:	6800      	ldr	r0, [r0, #0]
 80021d0:	0701      	lsls	r1, r0, #28
 80021d2:	0fc9      	lsrs	r1, r1, #31
 80021d4:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80021d6:	0680      	lsls	r0, r0, #26
 80021d8:	0fc2      	lsrs	r2, r0, #31
 80021da:	4291      	cmp	r1, r2
 80021dc:	d116      	bne.n	800220c <USBPD_PE_StateMachine_SNK+0x17c>
 80021de:	2014      	movs	r0, #20
 80021e0:	4669      	mov	r1, sp
 80021e2:	7308      	strb	r0, [r1, #12]
 80021e4:	0028      	movs	r0, r5
 80021e6:	f7fe fcea 	bl	8000bbe <PE_Clear_RxEvent>
 80021ea:	2092      	movs	r0, #146	@ 0x92
 80021ec:	7468      	strb	r0, [r5, #17]
 80021ee:	7ca8      	ldrb	r0, [r5, #18]
 80021f0:	2892      	cmp	r0, #146	@ 0x92
 80021f2:	d100      	bne.n	80021f6 <USBPD_PE_StateMachine_SNK+0x166>
 80021f4:	e104      	b.n	8002400 <__iar_annotation$$branch+0x38>
 80021f6:	2092      	movs	r0, #146	@ 0x92
 80021f8:	74a8      	strb	r0, [r5, #18]
 80021fa:	2000      	movs	r0, #0
 80021fc:	9000      	str	r0, [sp, #0]
 80021fe:	2300      	movs	r3, #0
 8002200:	2292      	movs	r2, #146	@ 0x92
 8002202:	7c29      	ldrb	r1, [r5, #16]
 8002204:	2004      	movs	r0, #4
 8002206:	4e71      	ldr	r6, [pc, #452]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002208:	6836      	ldr	r6, [r6, #0]
 800220a:	47b0      	blx	r6
 800220c:	7c68      	ldrb	r0, [r5, #17]
 800220e:	4669      	mov	r1, sp
 8002210:	7008      	strb	r0, [r1, #0]
 8002212:	4f71      	ldr	r7, [pc, #452]	@ (80023d8 <__iar_annotation$$branch+0x10>)
 8002214:	20f0      	movs	r0, #240	@ 0xf0
 8002216:	0200      	lsls	r0, r0, #8
 8002218:	4e70      	ldr	r6, [pc, #448]	@ (80023dc <__iar_annotation$$branch+0x14>)
 800221a:	2104      	movs	r1, #4
 800221c:	466a      	mov	r2, sp
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	2a00      	cmp	r2, #0
 8002222:	d100      	bne.n	8002226 <USBPD_PE_StateMachine_SNK+0x196>
 8002224:	e0e0      	b.n	80023e8 <__iar_annotation$$branch+0x20>
 8002226:	1e52      	subs	r2, r2, #1
 8002228:	d040      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 800222a:	1e92      	subs	r2, r2, #2
 800222c:	2a01      	cmp	r2, #1
 800222e:	d800      	bhi.n	8002232 <USBPD_PE_StateMachine_SNK+0x1a2>
 8002230:	e323      	b.n	800287a <__iar_annotation$$branch+0x4b2>
 8002232:	1e92      	subs	r2, r2, #2
 8002234:	d100      	bne.n	8002238 <USBPD_PE_StateMachine_SNK+0x1a8>
 8002236:	e1fb      	b.n	8002630 <__iar_annotation$$branch+0x268>
 8002238:	3a0a      	subs	r2, #10
 800223a:	d100      	bne.n	800223e <USBPD_PE_StateMachine_SNK+0x1ae>
 800223c:	e1fd      	b.n	800263a <__iar_annotation$$branch+0x272>
 800223e:	1e52      	subs	r2, r2, #1
 8002240:	d100      	bne.n	8002244 <USBPD_PE_StateMachine_SNK+0x1b4>
 8002242:	e299      	b.n	8002778 <__iar_annotation$$branch+0x3b0>
 8002244:	1e52      	subs	r2, r2, #1
 8002246:	d100      	bne.n	800224a <USBPD_PE_StateMachine_SNK+0x1ba>
 8002248:	e2a3      	b.n	8002792 <__iar_annotation$$branch+0x3ca>
 800224a:	1ed2      	subs	r2, r2, #3
 800224c:	d100      	bne.n	8002250 <USBPD_PE_StateMachine_SNK+0x1c0>
 800224e:	e228      	b.n	80026a2 <__iar_annotation$$branch+0x2da>
 8002250:	1f12      	subs	r2, r2, #4
 8002252:	2a01      	cmp	r2, #1
 8002254:	d92a      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002256:	1e92      	subs	r2, r2, #2
 8002258:	d100      	bne.n	800225c <USBPD_PE_StateMachine_SNK+0x1cc>
 800225a:	e2d2      	b.n	8002802 <__iar_annotation$$branch+0x43a>
 800225c:	1ed2      	subs	r2, r2, #3
 800225e:	d025      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002260:	1e52      	subs	r2, r2, #1
 8002262:	d100      	bne.n	8002266 <USBPD_PE_StateMachine_SNK+0x1d6>
 8002264:	e3c3      	b.n	80029ee <__iar_annotation$$branch+0x626>
 8002266:	1f12      	subs	r2, r2, #4
 8002268:	d100      	bne.n	800226c <USBPD_PE_StateMachine_SNK+0x1dc>
 800226a:	e316      	b.n	800289a <__iar_annotation$$branch+0x4d2>
 800226c:	1f52      	subs	r2, r2, #5
 800226e:	2a02      	cmp	r2, #2
 8002270:	d91c      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002272:	1ed2      	subs	r2, r2, #3
 8002274:	d100      	bne.n	8002278 <USBPD_PE_StateMachine_SNK+0x1e8>
 8002276:	e2f7      	b.n	8002868 <__iar_annotation$$branch+0x4a0>
 8002278:	1e52      	subs	r2, r2, #1
 800227a:	d101      	bne.n	8002280 <__iar_annotation$$branch+0x4>

0800227c <__iar_annotation$$branch>:
 800227c:	f000 fc39 	bl	8002af2 <__iar_annotation$$branch+0x72a>
 8002280:	1e52      	subs	r2, r2, #1
 8002282:	d013      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002284:	1e92      	subs	r2, r2, #2
 8002286:	d101      	bne.n	800228c <__iar_annotation$$branch+0x4>

08002288 <__iar_annotation$$branch>:
 8002288:	f000 fc80 	bl	8002b8c <__iar_annotation$$branch+0x7c4>
 800228c:	1e52      	subs	r2, r2, #1
 800228e:	2a01      	cmp	r2, #1
 8002290:	d90c      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002292:	1e92      	subs	r2, r2, #2
 8002294:	d001      	beq.n	800229a <__iar_annotation$$branch+0x12>
 8002296:	1e92      	subs	r2, r2, #2
 8002298:	2a05      	cmp	r2, #5
 800229a:	d801      	bhi.n	80022a0 <__iar_annotation$$branch+0x4>

0800229c <__iar_annotation$$branch>:
 800229c:	f000 fcbc 	bl	8002c18 <__iar_annotation$$branch+0x850>
 80022a0:	1f92      	subs	r2, r2, #6
 80022a2:	d101      	bne.n	80022a8 <__iar_annotation$$branch+0x4>

080022a4 <__iar_annotation$$branch>:
 80022a4:	f000 fc86 	bl	8002bb4 <__iar_annotation$$branch+0x7ec>
 80022a8:	1e52      	subs	r2, r2, #1
 80022aa:	2a03      	cmp	r2, #3
 80022ac:	d801      	bhi.n	80022b2 <__iar_annotation$$branch+0x4>

080022ae <__iar_annotation$$branch>:
 80022ae:	f000 fcb7 	bl	8002c20 <__iar_annotation$$branch+0x858>
 80022b2:	1f12      	subs	r2, r2, #4
 80022b4:	d100      	bne.n	80022b8 <__iar_annotation$$branch+0xa>
 80022b6:	e0af      	b.n	8002418 <__iar_annotation$$branch+0x50>
 80022b8:	1e92      	subs	r2, r2, #2
 80022ba:	d100      	bne.n	80022be <__iar_annotation$$branch+0x10>
 80022bc:	e221      	b.n	8002702 <__iar_annotation$$branch+0x33a>
 80022be:	1ed2      	subs	r2, r2, #3
 80022c0:	d100      	bne.n	80022c4 <__iar_annotation$$branch+0x16>
 80022c2:	e0c1      	b.n	8002448 <__iar_annotation$$branch+0x80>
 80022c4:	1e52      	subs	r2, r2, #1
 80022c6:	d100      	bne.n	80022ca <__iar_annotation$$branch+0x1c>
 80022c8:	e100      	b.n	80024cc <__iar_annotation$$branch+0x104>
 80022ca:	1e52      	subs	r2, r2, #1
 80022cc:	d100      	bne.n	80022d0 <__iar_annotation$$branch+0x22>
 80022ce:	e10f      	b.n	80024f0 <__iar_annotation$$branch+0x128>
 80022d0:	1e52      	subs	r2, r2, #1
 80022d2:	d100      	bne.n	80022d6 <__iar_annotation$$branch+0x28>
 80022d4:	e128      	b.n	8002528 <__iar_annotation$$branch+0x160>
 80022d6:	1e52      	subs	r2, r2, #1
 80022d8:	d100      	bne.n	80022dc <__iar_annotation$$branch+0x2e>
 80022da:	e178      	b.n	80025ce <__iar_annotation$$branch+0x206>
 80022dc:	1e92      	subs	r2, r2, #2
 80022de:	d0a6      	beq.n	800222e <USBPD_PE_StateMachine_SNK+0x19e>
 80022e0:	1e92      	subs	r2, r2, #2
 80022e2:	d0e3      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 80022e4:	1e52      	subs	r2, r2, #1
 80022e6:	d101      	bne.n	80022ec <__iar_annotation$$branch+0x4>

080022e8 <__iar_annotation$$branch>:
 80022e8:	f000 fbe5 	bl	8002ab6 <__iar_annotation$$branch+0x6ee>
 80022ec:	1f12      	subs	r2, r2, #4
 80022ee:	d100      	bne.n	80022f2 <__iar_annotation$$branch+0xa>
 80022f0:	e26a      	b.n	80027c8 <__iar_annotation$$branch+0x400>
 80022f2:	1ed2      	subs	r2, r2, #3
 80022f4:	d100      	bne.n	80022f8 <__iar_annotation$$branch+0x10>
 80022f6:	e334      	b.n	8002962 <__iar_annotation$$branch+0x59a>
 80022f8:	1f52      	subs	r2, r2, #5
 80022fa:	d100      	bne.n	80022fe <__iar_annotation$$branch+0x16>
 80022fc:	e388      	b.n	8002a10 <__iar_annotation$$branch+0x648>
 80022fe:	1e52      	subs	r2, r2, #1
 8002300:	d100      	bne.n	8002304 <__iar_annotation$$branch+0x1c>
 8002302:	e2ff      	b.n	8002904 <__iar_annotation$$branch+0x53c>
 8002304:	3a09      	subs	r2, #9
 8002306:	2a02      	cmp	r2, #2
 8002308:	d9d0      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 800230a:	1ed2      	subs	r2, r2, #3
 800230c:	d101      	bne.n	8002312 <__iar_annotation$$branch+0x4>

0800230e <__iar_annotation$$branch>:
 800230e:	f000 fc01 	bl	8002b14 <__iar_annotation$$branch+0x74c>
 8002312:	1e52      	subs	r2, r2, #1
 8002314:	d101      	bne.n	800231a <__iar_annotation$$branch+0x4>

08002316 <__iar_annotation$$branch>:
 8002316:	f000 fc0f 	bl	8002b38 <__iar_annotation$$branch+0x770>
 800231a:	1e52      	subs	r2, r2, #1
 800231c:	2a01      	cmp	r2, #1
 800231e:	d9c5      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002320:	3a0d      	subs	r2, #13
 8002322:	d0c3      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002324:	3a12      	subs	r2, #18
 8002326:	d101      	bne.n	800232c <__iar_annotation$$branch+0x4>

08002328 <__iar_annotation$$branch>:
 8002328:	f000 fc92 	bl	8002c50 <__iar_annotation$$branch+0x888>
 800232c:	3a0c      	subs	r2, #12
 800232e:	d067      	beq.n	8002400 <__iar_annotation$$branch+0x38>
 8002330:	1e52      	subs	r2, r2, #1
 8002332:	2a02      	cmp	r2, #2
 8002334:	d9ba      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002336:	1f52      	subs	r2, r2, #5
 8002338:	d100      	bne.n	800233c <__iar_annotation$$branch+0x14>
 800233a:	e271      	b.n	8002820 <__iar_annotation$$branch+0x458>
 800233c:	1e52      	subs	r2, r2, #1
 800233e:	d0b5      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002340:	1e52      	subs	r2, r2, #1
 8002342:	d100      	bne.n	8002346 <__iar_annotation$$branch+0x1e>
 8002344:	e174      	b.n	8002630 <__iar_annotation$$branch+0x268>
 8002346:	1e52      	subs	r2, r2, #1
 8002348:	d100      	bne.n	800234c <__iar_annotation$$branch+0x24>
 800234a:	e1be      	b.n	80026ca <__iar_annotation$$branch+0x302>
 800234c:	1e52      	subs	r2, r2, #1
 800234e:	2a08      	cmp	r2, #8
 8002350:	d801      	bhi.n	8002356 <__iar_annotation$$branch+0x4>

08002352 <__iar_annotation$$branch>:
 8002352:	f000 fc6a 	bl	8002c2a <__iar_annotation$$branch+0x862>
 8002356:	3a0b      	subs	r2, #11
 8002358:	d101      	bne.n	800235e <__iar_annotation$$branch+0x4>

0800235a <__iar_annotation$$branch>:
 800235a:	f000 fc7f 	bl	8002c5c <__iar_annotation$$branch+0x894>
 800235e:	a903      	add	r1, sp, #12
 8002360:	0028      	movs	r0, r5
 8002362:	f002 f9e3 	bl	800472c <PE_StateMachine_VDM>
 8002366:	0004      	movs	r4, r0
 8002368:	7c6a      	ldrb	r2, [r5, #17]
 800236a:	7ca8      	ldrb	r0, [r5, #18]
 800236c:	4290      	cmp	r0, r2
 800236e:	d008      	beq.n	8002382 <__iar_annotation$$branch+0x28>
 8002370:	74aa      	strb	r2, [r5, #18]
 8002372:	2000      	movs	r0, #0
 8002374:	9000      	str	r0, [sp, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	7c29      	ldrb	r1, [r5, #16]
 800237a:	2004      	movs	r0, #4
 800237c:	4e13      	ldr	r6, [pc, #76]	@ (80023cc <__iar_annotation$$branch+0x4>)
 800237e:	6836      	ldr	r6, [r6, #0]
 8002380:	47b0      	blx	r6
 8002382:	4e12      	ldr	r6, [pc, #72]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002384:	4668      	mov	r0, sp
 8002386:	7b00      	ldrb	r0, [r0, #12]
 8002388:	2814      	cmp	r0, #20
 800238a:	d101      	bne.n	8002390 <__iar_annotation$$branch+0x4>

0800238c <__iar_annotation$$branch>:
 800238c:	f000 fc73 	bl	8002c76 <__iar_annotation$$branch+0x8ae>
 8002390:	0028      	movs	r0, r5
 8002392:	f7fe fc5b 	bl	8000c4c <PE_Check_AMSConflict>
 8002396:	2815      	cmp	r0, #21
 8002398:	d109      	bne.n	80023ae <__iar_annotation$$branch+0x22>
 800239a:	4668      	mov	r0, sp
 800239c:	7b00      	ldrb	r0, [r0, #12]
 800239e:	2814      	cmp	r0, #20
 80023a0:	d005      	beq.n	80023ae <__iar_annotation$$branch+0x22>
 80023a2:	2014      	movs	r0, #20
 80023a4:	4669      	mov	r1, sp
 80023a6:	7308      	strb	r0, [r1, #12]
 80023a8:	0028      	movs	r0, r5
 80023aa:	f7fe fc08 	bl	8000bbe <PE_Clear_RxEvent>
 80023ae:	7c6a      	ldrb	r2, [r5, #17]
 80023b0:	7ca8      	ldrb	r0, [r5, #18]
 80023b2:	4290      	cmp	r0, r2
 80023b4:	d007      	beq.n	80023c6 <__iar_annotation$$branch+0x3a>
 80023b6:	74aa      	strb	r2, [r5, #18]
 80023b8:	2000      	movs	r0, #0
 80023ba:	9000      	str	r0, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	7c29      	ldrb	r1, [r5, #16]
 80023c0:	2004      	movs	r0, #4
 80023c2:	6834      	ldr	r4, [r6, #0]
 80023c4:	47a0      	blx	r4
 80023c6:	2400      	movs	r4, #0

080023c8 <__iar_annotation$$branch>:
 80023c8:	f000 fc74 	bl	8002cb4 <__iar_annotation$$branch+0x8ec>
 80023cc:	20000000 	.word	0x20000000
 80023d0:	fffbffff 	.word	0xfffbffff
 80023d4:	fffdffff 	.word	0xfffdffff
 80023d8:	000081f4 	.word	0x000081f4
 80023dc:	0000801b 	.word	0x0000801b
 80023e0:	2400      	movs	r4, #0
 80023e2:	43e4      	mvns	r4, r4
 80023e4:	0020      	movs	r0, r4
 80023e6:	e6a5      	b.n	8002134 <USBPD_PE_StateMachine_SNK+0xa4>
 80023e8:	6868      	ldr	r0, [r5, #4]
 80023ea:	6801      	ldr	r1, [r0, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4391      	bics	r1, r2
 80023f0:	6001      	str	r1, [r0, #0]
 80023f2:	215f      	movs	r1, #95	@ 0x5f
 80023f4:	7c28      	ldrb	r0, [r5, #16]
 80023f6:	f7fe f977 	bl	80006e8 <USBPD_PE_Notification>
 80023fa:	2400      	movs	r4, #0
 80023fc:	43e4      	mvns	r4, r4
 80023fe:	e7b3      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002400:	6868      	ldr	r0, [r5, #4]
 8002402:	6801      	ldr	r1, [r0, #0]
 8002404:	2210      	movs	r2, #16
 8002406:	4391      	bics	r1, r2
 8002408:	6001      	str	r1, [r0, #0]
 800240a:	68a8      	ldr	r0, [r5, #8]
 800240c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800240e:	2900      	cmp	r1, #0
 8002410:	d0f3      	beq.n	80023fa <__iar_annotation$$branch+0x32>
 8002412:	7c28      	ldrb	r0, [r5, #16]
 8002414:	4788      	blx	r1
 8002416:	e7f0      	b.n	80023fa <__iar_annotation$$branch+0x32>
 8002418:	6868      	ldr	r0, [r5, #4]
 800241a:	6801      	ldr	r1, [r0, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	0b0b      	lsrs	r3, r1, #12
 8002420:	4013      	ands	r3, r2
 8002422:	d0a1      	beq.n	8002368 <__iar_annotation$$branch+0xe>
 8002424:	078b      	lsls	r3, r1, #30
 8002426:	0f9b      	lsrs	r3, r3, #30
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <__iar_annotation$$branch+0x68>
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <__iar_annotation$$branch+0x6a>
 8002430:	2320      	movs	r3, #32
 8002432:	2420      	movs	r4, #32
 8002434:	43a1      	bics	r1, r4
 8002436:	430b      	orrs	r3, r1
 8002438:	6003      	str	r3, [r0, #0]
 800243a:	772a      	strb	r2, [r5, #28]
 800243c:	83ef      	strh	r7, [r5, #30]
 800243e:	24fa      	movs	r4, #250	@ 0xfa
 8002440:	0064      	lsls	r4, r4, #1
 8002442:	2043      	movs	r0, #67	@ 0x43
 8002444:	7468      	strb	r0, [r5, #17]
 8002446:	e78f      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002448:	4668      	mov	r0, sp
 800244a:	7b00      	ldrb	r0, [r0, #12]
 800244c:	2811      	cmp	r0, #17
 800244e:	d135      	bne.n	80024bc <__iar_annotation$$branch+0xf4>
 8002450:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002452:	0bc2      	lsrs	r2, r0, #15
 8002454:	d12c      	bne.n	80024b0 <__iar_annotation$$branch+0xe8>
 8002456:	2607      	movs	r6, #7
 8002458:	0b02      	lsrs	r2, r0, #12
 800245a:	4232      	tst	r2, r6
 800245c:	d028      	beq.n	80024b0 <__iar_annotation$$branch+0xe8>
 800245e:	06c2      	lsls	r2, r0, #27
 8002460:	0ed2      	lsrs	r2, r2, #27
 8002462:	2a01      	cmp	r2, #1
 8002464:	d124      	bne.n	80024b0 <__iar_annotation$$branch+0xe8>
 8002466:	2200      	movs	r2, #0
 8002468:	4bc1      	ldr	r3, [pc, #772]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 800246a:	18eb      	adds	r3, r5, r3
 800246c:	709a      	strb	r2, [r3, #2]
 800246e:	696a      	ldr	r2, [r5, #20]
 8002470:	4311      	orrs	r1, r2
 8002472:	6169      	str	r1, [r5, #20]
 8002474:	0600      	lsls	r0, r0, #24
 8002476:	0f81      	lsrs	r1, r0, #30
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe fcee 	bl	8000e5c <PE_ExtRevisionInteroperability>
 8002480:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002482:	0b00      	lsrs	r0, r0, #12
 8002484:	4006      	ands	r6, r0
 8002486:	00b3      	lsls	r3, r6, #2
 8002488:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800248a:	1c82      	adds	r2, r0, #2
 800248c:	2104      	movs	r1, #4
 800248e:	7c28      	ldrb	r0, [r5, #16]
 8002490:	68ae      	ldr	r6, [r5, #8]
 8002492:	69b6      	ldr	r6, [r6, #24]
 8002494:	47b0      	blx	r6
 8002496:	2001      	movs	r0, #1
 8002498:	7728      	strb	r0, [r5, #28]
 800249a:	6868      	ldr	r0, [r5, #4]
 800249c:	6801      	ldr	r1, [r0, #0]
 800249e:	2210      	movs	r2, #16
 80024a0:	4391      	bics	r1, r2
 80024a2:	6001      	str	r1, [r0, #0]
 80024a4:	2044      	movs	r0, #68	@ 0x44
 80024a6:	7468      	strb	r0, [r5, #17]
 80024a8:	4668      	mov	r0, sp
 80024aa:	7b00      	ldrb	r0, [r0, #12]
 80024ac:	2814      	cmp	r0, #20
 80024ae:	d005      	beq.n	80024bc <__iar_annotation$$branch+0xf4>
 80024b0:	2014      	movs	r0, #20
 80024b2:	4669      	mov	r1, sp
 80024b4:	7308      	strb	r0, [r1, #12]
 80024b6:	0028      	movs	r0, r5
 80024b8:	f7fe fb81 	bl	8000bbe <PE_Clear_RxEvent>
 80024bc:	8be8      	ldrh	r0, [r5, #30]
 80024be:	03a1      	lsls	r1, r4, #14
 80024c0:	4288      	cmp	r0, r1
 80024c2:	d102      	bne.n	80024ca <__iar_annotation$$branch+0x102>
 80024c4:	200f      	movs	r0, #15
 80024c6:	7468      	strb	r0, [r5, #17]
 80024c8:	2400      	movs	r4, #0
 80024ca:	e74d      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80024cc:	466a      	mov	r2, sp
 80024ce:	0029      	movs	r1, r5
 80024d0:	3118      	adds	r1, #24
 80024d2:	7c28      	ldrb	r0, [r5, #16]
 80024d4:	68ab      	ldr	r3, [r5, #8]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4798      	blx	r3
 80024da:	6968      	ldr	r0, [r5, #20]
 80024dc:	2118      	movs	r1, #24
 80024de:	4388      	bics	r0, r1
 80024e0:	9900      	ldr	r1, [sp, #0]
 80024e2:	00c9      	lsls	r1, r1, #3
 80024e4:	2218      	movs	r2, #24
 80024e6:	400a      	ands	r2, r1
 80024e8:	4302      	orrs	r2, r0
 80024ea:	616a      	str	r2, [r5, #20]
 80024ec:	2045      	movs	r0, #69	@ 0x45
 80024ee:	e7ea      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 80024f0:	6968      	ldr	r0, [r5, #20]
 80024f2:	0401      	lsls	r1, r0, #16
 80024f4:	0fc9      	lsrs	r1, r1, #31
 80024f6:	d001      	beq.n	80024fc <__iar_annotation$$branch+0x134>
 80024f8:	2002      	movs	r0, #2
 80024fa:	e000      	b.n	80024fe <__iar_annotation$$branch+0x136>
 80024fc:	2000      	movs	r0, #0
 80024fe:	9002      	str	r0, [sp, #8]
 8002500:	2046      	movs	r0, #70	@ 0x46
 8002502:	9001      	str	r0, [sp, #4]
 8002504:	2001      	movs	r0, #1
 8002506:	9000      	str	r0, [sp, #0]
 8002508:	002b      	movs	r3, r5
 800250a:	3318      	adds	r3, #24
 800250c:	2202      	movs	r2, #2
 800250e:	2100      	movs	r1, #0
 8002510:	0028      	movs	r0, r5
 8002512:	f7ff f95c 	bl	80017ce <PE_Send_DataMessage>
 8002516:	2800      	cmp	r0, #0
 8002518:	d105      	bne.n	8002526 <__iar_annotation$$branch+0x15e>
 800251a:	6968      	ldr	r0, [r5, #20]
 800251c:	4995      	ldr	r1, [pc, #596]	@ (8002774 <__iar_annotation$$branch+0x3ac>)
 800251e:	4001      	ands	r1, r0
 8002520:	6169      	str	r1, [r5, #20]
 8002522:	83ee      	strh	r6, [r5, #30]
 8002524:	241b      	movs	r4, #27
 8002526:	e71f      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002528:	4669      	mov	r1, sp
 800252a:	7b09      	ldrb	r1, [r1, #12]
 800252c:	2911      	cmp	r1, #17
 800252e:	d148      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002530:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8002532:	4201      	tst	r1, r0
 8002534:	d145      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002536:	20fa      	movs	r0, #250	@ 0xfa
 8002538:	0040      	lsls	r0, r0, #1
 800253a:	261f      	movs	r6, #31
 800253c:	221f      	movs	r2, #31
 800253e:	400a      	ands	r2, r1
 8002540:	1e92      	subs	r2, r2, #2
 8002542:	2a01      	cmp	r2, #1
 8002544:	d917      	bls.n	8002576 <__iar_annotation$$branch+0x1ae>
 8002546:	1e92      	subs	r2, r2, #2
 8002548:	d001      	beq.n	800254e <__iar_annotation$$branch+0x186>
 800254a:	3a08      	subs	r2, #8
 800254c:	d125      	bne.n	800259a <__iar_annotation$$branch+0x1d2>
 800254e:	686a      	ldr	r2, [r5, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	0552      	lsls	r2, r2, #21
 8002554:	0f52      	lsrs	r2, r2, #29
 8002556:	2a03      	cmp	r2, #3
 8002558:	d004      	beq.n	8002564 <__iar_annotation$$branch+0x19c>
 800255a:	2143      	movs	r1, #67	@ 0x43
 800255c:	7469      	strb	r1, [r5, #17]
 800255e:	83ef      	strh	r7, [r5, #30]
 8002560:	0004      	movs	r4, r0
 8002562:	e014      	b.n	800258e <__iar_annotation$$branch+0x1c6>
 8002564:	4031      	ands	r1, r6
 8002566:	290c      	cmp	r1, #12
 8002568:	d101      	bne.n	800256e <__iar_annotation$$branch+0x1a6>
 800256a:	2049      	movs	r0, #73	@ 0x49
 800256c:	e000      	b.n	8002570 <__iar_annotation$$branch+0x1a8>
 800256e:	2003      	movs	r0, #3
 8002570:	7468      	strb	r0, [r5, #17]
 8002572:	2400      	movs	r4, #0
 8002574:	e00b      	b.n	800258e <__iar_annotation$$branch+0x1c6>
 8002576:	83ef      	strh	r7, [r5, #30]
 8002578:	0004      	movs	r4, r0
 800257a:	2104      	movs	r1, #4
 800257c:	0028      	movs	r0, r5
 800257e:	f7ff f846 	bl	800160e <PE_SetPowerNegotiation>
 8002582:	2047      	movs	r0, #71	@ 0x47
 8002584:	7468      	strb	r0, [r5, #17]
 8002586:	4668      	mov	r0, sp
 8002588:	7b00      	ldrb	r0, [r0, #12]
 800258a:	2814      	cmp	r0, #20
 800258c:	d005      	beq.n	800259a <__iar_annotation$$branch+0x1d2>
 800258e:	2014      	movs	r0, #20
 8002590:	4669      	mov	r1, sp
 8002592:	7308      	strb	r0, [r1, #12]
 8002594:	0028      	movs	r0, r5
 8002596:	f7fe fb12 	bl	8000bbe <PE_Clear_RxEvent>
 800259a:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800259c:	4006      	ands	r6, r0
 800259e:	2e02      	cmp	r6, #2
 80025a0:	d009      	beq.n	80025b6 <__iar_annotation$$branch+0x1ee>
 80025a2:	2e03      	cmp	r6, #3
 80025a4:	d009      	beq.n	80025ba <__iar_annotation$$branch+0x1f2>
 80025a6:	2e04      	cmp	r6, #4
 80025a8:	d003      	beq.n	80025b2 <__iar_annotation$$branch+0x1ea>
 80025aa:	2e0c      	cmp	r6, #12
 80025ac:	d109      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025ae:	2103      	movs	r1, #3
 80025b0:	e004      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025b2:	2102      	movs	r1, #2
 80025b4:	e002      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025b6:	2104      	movs	r1, #4
 80025b8:	e000      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025ba:	2101      	movs	r1, #1
 80025bc:	7c28      	ldrb	r0, [r5, #16]
 80025be:	f7fe f893 	bl	80006e8 <USBPD_PE_Notification>
 80025c2:	8be8      	ldrh	r0, [r5, #30]
 80025c4:	2180      	movs	r1, #128	@ 0x80
 80025c6:	0209      	lsls	r1, r1, #8
 80025c8:	4288      	cmp	r0, r1
 80025ca:	d1ac      	bne.n	8002526 <__iar_annotation$$branch+0x15e>
 80025cc:	e77a      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 80025ce:	4668      	mov	r0, sp
 80025d0:	7b00      	ldrb	r0, [r0, #12]
 80025d2:	2811      	cmp	r0, #17
 80025d4:	d1f5      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025d6:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80025d8:	499f      	ldr	r1, [pc, #636]	@ (8002858 <__iar_annotation$$branch+0x490>)
 80025da:	4001      	ands	r1, r0
 80025dc:	2906      	cmp	r1, #6
 80025de:	d1f0      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe fae9 	bl	8000bbe <PE_Clear_RxEvent>
 80025ec:	2103      	movs	r1, #3
 80025ee:	0028      	movs	r0, r5
 80025f0:	f7ff f80d 	bl	800160e <PE_SetPowerNegotiation>
 80025f4:	2110      	movs	r1, #16
 80025f6:	7c28      	ldrb	r0, [r5, #16]
 80025f8:	f7fe f876 	bl	80006e8 <USBPD_PE_Notification>
 80025fc:	6868      	ldr	r0, [r5, #4]
 80025fe:	6800      	ldr	r0, [r0, #0]
 8002600:	0401      	lsls	r1, r0, #16
 8002602:	0fc9      	lsrs	r1, r1, #31
 8002604:	d002      	beq.n	800260c <__iar_annotation$$branch+0x244>
 8002606:	6828      	ldr	r0, [r5, #0]
 8002608:	6801      	ldr	r1, [r0, #0]
 800260a:	e000      	b.n	800260e <__iar_annotation$$branch+0x246>
 800260c:	2101      	movs	r1, #1
 800260e:	4668      	mov	r0, sp
 8002610:	7b40      	ldrb	r0, [r0, #13]
 8002612:	f003 f9fb 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002616:	2000      	movs	r0, #0
 8002618:	84a8      	strh	r0, [r5, #36]	@ 0x24
 800261a:	2003      	movs	r0, #3
 800261c:	6969      	ldr	r1, [r5, #20]
 800261e:	08c9      	lsrs	r1, r1, #3
 8002620:	4001      	ands	r1, r0
 8002622:	2903      	cmp	r1, #3
 8002624:	d101      	bne.n	800262a <__iar_annotation$$branch+0x262>
 8002626:	498d      	ldr	r1, [pc, #564]	@ (800285c <__iar_annotation$$branch+0x494>)
 8002628:	84a9      	strh	r1, [r5, #36]	@ 0x24
 800262a:	7468      	strb	r0, [r5, #17]
 800262c:	2400      	movs	r4, #0
 800262e:	e7c8      	b.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002630:	a903      	add	r1, sp, #12
 8002632:	0028      	movs	r0, r5
 8002634:	f001 fbac 	bl	8003d90 <PE_StateMachine_VDMCable>
 8002638:	e695      	b.n	8002366 <__iar_annotation$$branch+0xc>
 800263a:	2601      	movs	r6, #1
 800263c:	6868      	ldr	r0, [r5, #4]
 800263e:	6800      	ldr	r0, [r0, #0]
 8002640:	0bc0      	lsrs	r0, r0, #15
 8002642:	4030      	ands	r0, r6
 8002644:	d006      	beq.n	8002654 <__iar_annotation$$branch+0x28c>
 8002646:	68a8      	ldr	r0, [r5, #8]
 8002648:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800264a:	2a00      	cmp	r2, #0
 800264c:	d002      	beq.n	8002654 <__iar_annotation$$branch+0x28c>
 800264e:	2100      	movs	r1, #0
 8002650:	7c28      	ldrb	r0, [r5, #16]
 8002652:	4790      	blx	r2
 8002654:	6868      	ldr	r0, [r5, #4]
 8002656:	6801      	ldr	r1, [r0, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	4391      	bics	r1, r2
 800265c:	6001      	str	r1, [r0, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ffd4 	bl	800160e <PE_SetPowerNegotiation>
 8002666:	4842      	ldr	r0, [pc, #264]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 8002668:	1829      	adds	r1, r5, r0
 800266a:	7888      	ldrb	r0, [r1, #2]
 800266c:	2803      	cmp	r0, #3
 800266e:	d309      	bcc.n	8002684 <__iar_annotation$$branch+0x2bc>
 8002670:	6968      	ldr	r0, [r5, #20]
 8002672:	0880      	lsrs	r0, r0, #2
 8002674:	4006      	ands	r6, r0
 8002676:	d003      	beq.n	8002680 <__iar_annotation$$branch+0x2b8>
 8002678:	68a8      	ldr	r0, [r5, #8]
 800267a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800267c:	2800      	cmp	r0, #0
 800267e:	d171      	bne.n	8002764 <__iar_annotation$$branch+0x39c>
 8002680:	2000      	movs	r0, #0
 8002682:	e6df      	b.n	8002444 <__iar_annotation$$branch+0x7c>
 8002684:	1c40      	adds	r0, r0, #1
 8002686:	7088      	strb	r0, [r1, #2]
 8002688:	2105      	movs	r1, #5
 800268a:	0028      	movs	r0, r5
 800268c:	f7fe fa32 	bl	8000af4 <PE_Send_RESET>
 8002690:	4873      	ldr	r0, [pc, #460]	@ (8002860 <__iar_annotation$$branch+0x498>)
 8002692:	83e8      	strh	r0, [r5, #30]
 8002694:	2201      	movs	r2, #1
 8002696:	2101      	movs	r1, #1
 8002698:	0028      	movs	r0, r5
 800269a:	f7fe ffaf 	bl	80015fc <PE_CallHardResetCallback>
 800269e:	209b      	movs	r0, #155	@ 0x9b
 80026a0:	e711      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 80026a2:	6868      	ldr	r0, [r5, #4]
 80026a4:	6800      	ldr	r0, [r0, #0]
 80026a6:	0401      	lsls	r1, r0, #16
 80026a8:	0fc9      	lsrs	r1, r1, #31
 80026aa:	d006      	beq.n	80026ba <__iar_annotation$$branch+0x2f2>
 80026ac:	68a8      	ldr	r0, [r5, #8]
 80026ae:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d002      	beq.n	80026ba <__iar_annotation$$branch+0x2f2>
 80026b4:	2100      	movs	r1, #0
 80026b6:	7c28      	ldrb	r0, [r5, #16]
 80026b8:	4790      	blx	r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	2101      	movs	r1, #1
 80026be:	0028      	movs	r0, r5
 80026c0:	f7fe ff9c 	bl	80015fc <PE_CallHardResetCallback>
 80026c4:	4866      	ldr	r0, [pc, #408]	@ (8002860 <__iar_annotation$$branch+0x498>)
 80026c6:	83e8      	strh	r0, [r5, #30]
 80026c8:	e7e9      	b.n	800269e <__iar_annotation$$branch+0x2d6>
 80026ca:	2100      	movs	r1, #0
 80026cc:	4668      	mov	r0, sp
 80026ce:	7b40      	ldrb	r0, [r0, #13]
 80026d0:	68aa      	ldr	r2, [r5, #8]
 80026d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026d4:	4790      	blx	r2
 80026d6:	2801      	cmp	r0, #1
 80026d8:	d10d      	bne.n	80026f6 <__iar_annotation$$branch+0x32e>
 80026da:	4862      	ldr	r0, [pc, #392]	@ (8002864 <__iar_annotation$$branch+0x49c>)
 80026dc:	83e8      	strh	r0, [r5, #30]
 80026de:	2169      	movs	r1, #105	@ 0x69
 80026e0:	4668      	mov	r0, sp
 80026e2:	7b40      	ldrb	r0, [r0, #13]
 80026e4:	f7fe f800 	bl	80006e8 <USBPD_PE_Notification>
 80026e8:	2040      	movs	r0, #64	@ 0x40
 80026ea:	7468      	strb	r0, [r5, #17]
 80026ec:	2400      	movs	r4, #0
 80026ee:	2113      	movs	r1, #19
 80026f0:	7c28      	ldrb	r0, [r5, #16]
 80026f2:	f7fd fff9 	bl	80006e8 <USBPD_PE_Notification>
 80026f6:	8be8      	ldrh	r0, [r5, #30]
 80026f8:	2180      	movs	r1, #128	@ 0x80
 80026fa:	0209      	lsls	r1, r1, #8
 80026fc:	4288      	cmp	r0, r1
 80026fe:	d135      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 8002700:	e01e      	b.n	8002740 <__iar_annotation$$branch+0x378>
 8002702:	2101      	movs	r1, #1
 8002704:	4668      	mov	r0, sp
 8002706:	7b40      	ldrb	r0, [r0, #13]
 8002708:	68aa      	ldr	r2, [r5, #8]
 800270a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800270c:	4790      	blx	r2
 800270e:	2801      	cmp	r0, #1
 8002710:	d111      	bne.n	8002736 <__iar_annotation$$branch+0x36e>
 8002712:	0028      	movs	r0, r5
 8002714:	f7fe fb01 	bl	8000d1a <PE_Reset_HardReset>
 8002718:	2205      	movs	r2, #5
 800271a:	2100      	movs	r1, #0
 800271c:	0028      	movs	r0, r5
 800271e:	f7fe ff6d 	bl	80015fc <PE_CallHardResetCallback>
 8002722:	2168      	movs	r1, #104	@ 0x68
 8002724:	4668      	mov	r0, sp
 8002726:	7b40      	ldrb	r0, [r0, #13]
 8002728:	f7fd ffde 	bl	80006e8 <USBPD_PE_Notification>
 800272c:	83ef      	strh	r7, [r5, #30]
 800272e:	24fa      	movs	r4, #250	@ 0xfa
 8002730:	0064      	lsls	r4, r4, #1
 8002732:	2043      	movs	r0, #67	@ 0x43
 8002734:	7468      	strb	r0, [r5, #17]
 8002736:	8be8      	ldrh	r0, [r5, #30]
 8002738:	2180      	movs	r1, #128	@ 0x80
 800273a:	0209      	lsls	r1, r1, #8
 800273c:	4288      	cmp	r0, r1
 800273e:	d115      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 8002740:	2206      	movs	r2, #6
 8002742:	2100      	movs	r1, #0
 8002744:	0028      	movs	r0, r5
 8002746:	f7fe ff59 	bl	80015fc <PE_CallHardResetCallback>
 800274a:	4809      	ldr	r0, [pc, #36]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 800274c:	1828      	adds	r0, r5, r0
 800274e:	7880      	ldrb	r0, [r0, #2]
 8002750:	2803      	cmp	r0, #3
 8002752:	d200      	bcs.n	8002756 <__iar_annotation$$branch+0x38e>
 8002754:	e6b6      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 8002756:	6968      	ldr	r0, [r5, #20]
 8002758:	0741      	lsls	r1, r0, #29
 800275a:	0fc9      	lsrs	r1, r1, #31
 800275c:	d004      	beq.n	8002768 <__iar_annotation$$branch+0x3a0>
 800275e:	68a8      	ldr	r0, [r5, #8]
 8002760:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002762:	2800      	cmp	r0, #0
 8002764:	d000      	beq.n	8002768 <__iar_annotation$$branch+0x3a0>
 8002766:	e0fa      	b.n	800295e <__iar_annotation$$branch+0x596>
 8002768:	2400      	movs	r4, #0
 800276a:	746c      	strb	r4, [r5, #17]
 800276c:	e5fc      	b.n	8002368 <__iar_annotation$$branch+0xe>
 800276e:	bf00      	nop
 8002770:	0000025e 	.word	0x0000025e
 8002774:	ffff7fff 	.word	0xffff7fff
 8002778:	2000      	movs	r0, #0
 800277a:	9000      	str	r0, [sp, #0]
 800277c:	2303      	movs	r3, #3
 800277e:	2203      	movs	r2, #3
 8002780:	2100      	movs	r1, #0
 8002782:	0028      	movs	r0, r5
 8002784:	f7fe fff8 	bl	8001778 <PE_Send_CtrlMessage>
 8002788:	2800      	cmp	r0, #0
 800278a:	d1ef      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 800278c:	2001      	movs	r0, #1
 800278e:	7728      	strb	r0, [r5, #28]
 8002790:	e654      	b.n	800243c <__iar_annotation$$branch+0x74>
 8002792:	6868      	ldr	r0, [r5, #4]
 8002794:	6800      	ldr	r0, [r0, #0]
 8002796:	0540      	lsls	r0, r0, #21
 8002798:	0f40      	lsrs	r0, r0, #29
 800279a:	2804      	cmp	r0, #4
 800279c:	d100      	bne.n	80027a0 <__iar_annotation$$branch+0x3d8>
 800279e:	e691      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 80027a0:	2000      	movs	r0, #0
 80027a2:	9000      	str	r0, [sp, #0]
 80027a4:	2350      	movs	r3, #80	@ 0x50
 80027a6:	220d      	movs	r2, #13
 80027a8:	2031      	movs	r0, #49	@ 0x31
 80027aa:	5c29      	ldrb	r1, [r5, r0]
 80027ac:	0028      	movs	r0, r5
 80027ae:	f7fe ffe3 	bl	8001778 <PE_Send_CtrlMessage>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d107      	bne.n	80027c6 <__iar_annotation$$branch+0x3fe>
 80027b6:	2003      	movs	r0, #3
 80027b8:	7728      	strb	r0, [r5, #28]
 80027ba:	83ee      	strh	r6, [r5, #30]
 80027bc:	241b      	movs	r4, #27
 80027be:	2130      	movs	r1, #48	@ 0x30
 80027c0:	7c28      	ldrb	r0, [r5, #16]
 80027c2:	f7fd ff91 	bl	80006e8 <USBPD_PE_Notification>
 80027c6:	e5cf      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80027c8:	4668      	mov	r0, sp
 80027ca:	7b00      	ldrb	r0, [r0, #12]
 80027cc:	2814      	cmp	r0, #20
 80027ce:	d017      	beq.n	8002800 <__iar_annotation$$branch+0x438>
 80027d0:	2030      	movs	r0, #48	@ 0x30
 80027d2:	5c28      	ldrb	r0, [r5, r0]
 80027d4:	2131      	movs	r1, #49	@ 0x31
 80027d6:	5c69      	ldrb	r1, [r5, r1]
 80027d8:	4288      	cmp	r0, r1
 80027da:	d111      	bne.n	8002800 <__iar_annotation$$branch+0x438>
 80027dc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80027de:	491e      	ldr	r1, [pc, #120]	@ (8002858 <__iar_annotation$$branch+0x490>)
 80027e0:	4001      	ands	r1, r0
 80027e2:	2903      	cmp	r1, #3
 80027e4:	d10c      	bne.n	8002800 <__iar_annotation$$branch+0x438>
 80027e6:	2001      	movs	r0, #1
 80027e8:	7728      	strb	r0, [r5, #28]
 80027ea:	83ef      	strh	r7, [r5, #30]
 80027ec:	24fa      	movs	r4, #250	@ 0xfa
 80027ee:	0064      	lsls	r4, r4, #1
 80027f0:	2043      	movs	r0, #67	@ 0x43
 80027f2:	7468      	strb	r0, [r5, #17]
 80027f4:	2014      	movs	r0, #20
 80027f6:	4669      	mov	r1, sp
 80027f8:	7308      	strb	r0, [r1, #12]
 80027fa:	0028      	movs	r0, r5
 80027fc:	f7fe f9df 	bl	8000bbe <PE_Clear_RxEvent>
 8002800:	e6df      	b.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002802:	9400      	str	r4, [sp, #0]
 8002804:	2343      	movs	r3, #67	@ 0x43
 8002806:	2207      	movs	r2, #7
 8002808:	2100      	movs	r1, #0
 800280a:	0028      	movs	r0, r5
 800280c:	f7fe ffb4 	bl	8001778 <PE_Send_CtrlMessage>
 8002810:	2800      	cmp	r0, #0
 8002812:	d11f      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002814:	2006      	movs	r0, #6
 8002816:	7728      	strb	r0, [r5, #28]
 8002818:	83ee      	strh	r6, [r5, #30]
 800281a:	241b      	movs	r4, #27
 800281c:	210b      	movs	r1, #11
 800281e:	e7cf      	b.n	80027c0 <__iar_annotation$$branch+0x3f8>
 8002820:	4668      	mov	r0, sp
 8002822:	7b00      	ldrb	r0, [r0, #12]
 8002824:	2811      	cmp	r0, #17
 8002826:	d115      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002828:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800282a:	490b      	ldr	r1, [pc, #44]	@ (8002858 <__iar_annotation$$branch+0x490>)
 800282c:	4001      	ands	r1, r0
 800282e:	2906      	cmp	r1, #6
 8002830:	d110      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002832:	212c      	movs	r1, #44	@ 0x2c
 8002834:	7c28      	ldrb	r0, [r5, #16]
 8002836:	f7fd ff57 	bl	80006e8 <USBPD_PE_Notification>
 800283a:	2003      	movs	r0, #3
 800283c:	7468      	strb	r0, [r5, #17]
 800283e:	2400      	movs	r4, #0
 8002840:	4668      	mov	r0, sp
 8002842:	7b00      	ldrb	r0, [r0, #12]
 8002844:	2814      	cmp	r0, #20
 8002846:	d005      	beq.n	8002854 <__iar_annotation$$branch+0x48c>
 8002848:	2014      	movs	r0, #20
 800284a:	4669      	mov	r1, sp
 800284c:	7308      	strb	r0, [r1, #12]
 800284e:	0028      	movs	r0, r5
 8002850:	f7fe f9b5 	bl	8000bbe <PE_Clear_RxEvent>
 8002854:	e588      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002856:	bf00      	nop
 8002858:	0000f01f 	.word	0x0000f01f
 800285c:	0000a328 	.word	0x0000a328
 8002860:	000083e8 	.word	0x000083e8
 8002864:	000088e3 	.word	0x000088e3
 8002868:	2000      	movs	r0, #0
 800286a:	9000      	str	r0, [sp, #0]
 800286c:	2303      	movs	r3, #3
 800286e:	2204      	movs	r2, #4
 8002870:	2100      	movs	r1, #0
 8002872:	0028      	movs	r0, r5
 8002874:	f7fe ff80 	bl	8001778 <PE_Send_CtrlMessage>
 8002878:	e576      	b.n	8002368 <__iar_annotation$$branch+0xe>
 800287a:	4668      	mov	r0, sp
 800287c:	7800      	ldrb	r0, [r0, #0]
 800287e:	2804      	cmp	r0, #4
 8002880:	d006      	beq.n	8002890 <__iar_annotation$$branch+0x4c8>
 8002882:	2000      	movs	r0, #0
 8002884:	7728      	strb	r0, [r5, #28]
 8002886:	7469      	strb	r1, [r5, #17]
 8002888:	2120      	movs	r1, #32
 800288a:	7c28      	ldrb	r0, [r5, #16]
 800288c:	f7fd ff2c 	bl	80006e8 <USBPD_PE_Notification>
 8002890:	a903      	add	r1, sp, #12
 8002892:	0028      	movs	r0, r5
 8002894:	f000 fa1a 	bl	8002ccc <PE_StateMachine_SNK_ReadyWait>
 8002898:	e565      	b.n	8002366 <__iar_annotation$$branch+0xc>
 800289a:	68a8      	ldr	r0, [r5, #8]
 800289c:	6881      	ldr	r1, [r0, #8]
 800289e:	2900      	cmp	r1, #0
 80028a0:	d02e      	beq.n	8002900 <__iar_annotation$$branch+0x538>
 80028a2:	4668      	mov	r0, sp
 80028a4:	7b40      	ldrb	r0, [r0, #13]
 80028a6:	4788      	blx	r1
 80028a8:	280a      	cmp	r0, #10
 80028aa:	d002      	beq.n	80028b2 <__iar_annotation$$branch+0x4ea>
 80028ac:	280d      	cmp	r0, #13
 80028ae:	d022      	beq.n	80028f6 <__iar_annotation$$branch+0x52e>
 80028b0:	e026      	b.n	8002900 <__iar_annotation$$branch+0x538>
 80028b2:	2201      	movs	r2, #1
 80028b4:	2100      	movs	r1, #0
 80028b6:	7c28      	ldrb	r0, [r5, #16]
 80028b8:	68ab      	ldr	r3, [r5, #8]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	4798      	blx	r3
 80028be:	2000      	movs	r0, #0
 80028c0:	9000      	str	r0, [sp, #0]
 80028c2:	2359      	movs	r3, #89	@ 0x59
 80028c4:	2203      	movs	r2, #3
 80028c6:	2100      	movs	r1, #0
 80028c8:	0028      	movs	r0, r5
 80028ca:	f7fe ff55 	bl	8001778 <PE_Send_CtrlMessage>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d110      	bne.n	80028f4 <__iar_annotation$$branch+0x52c>
 80028d2:	2008      	movs	r0, #8
 80028d4:	7728      	strb	r0, [r5, #28]
 80028d6:	6868      	ldr	r0, [r5, #4]
 80028d8:	6801      	ldr	r1, [r0, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	430a      	orrs	r2, r1
 80028de:	6002      	str	r2, [r0, #0]
 80028e0:	2206      	movs	r2, #6
 80028e2:	2100      	movs	r1, #0
 80028e4:	7c28      	ldrb	r0, [r5, #16]
 80028e6:	68ab      	ldr	r3, [r5, #8]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	4798      	blx	r3
 80028ec:	48b0      	ldr	r0, [pc, #704]	@ (8002bb0 <__iar_annotation$$branch+0x7e8>)
 80028ee:	83e8      	strh	r0, [r5, #30]
 80028f0:	24e1      	movs	r4, #225	@ 0xe1
 80028f2:	00a4      	lsls	r4, r4, #2
 80028f4:	e538      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80028f6:	2000      	movs	r0, #0
 80028f8:	9000      	str	r0, [sp, #0]
 80028fa:	2303      	movs	r3, #3
 80028fc:	220c      	movs	r2, #12
 80028fe:	e7b7      	b.n	8002870 <__iar_annotation$$branch+0x4a8>
 8002900:	202a      	movs	r0, #42	@ 0x2a
 8002902:	e5e0      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002904:	4668      	mov	r0, sp
 8002906:	7b00      	ldrb	r0, [r0, #12]
 8002908:	2811      	cmp	r0, #17
 800290a:	d119      	bne.n	8002940 <__iar_annotation$$branch+0x578>
 800290c:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800290e:	49c1      	ldr	r1, [pc, #772]	@ (8002c14 <__iar_annotation$$branch+0x84c>)
 8002910:	4001      	ands	r1, r0
 8002912:	2906      	cmp	r1, #6
 8002914:	d114      	bne.n	8002940 <__iar_annotation$$branch+0x578>
 8002916:	7f28      	ldrb	r0, [r5, #28]
 8002918:	2809      	cmp	r0, #9
 800291a:	d005      	beq.n	8002928 <__iar_annotation$$branch+0x560>
 800291c:	2209      	movs	r2, #9
 800291e:	2100      	movs	r1, #0
 8002920:	7c28      	ldrb	r0, [r5, #16]
 8002922:	68ab      	ldr	r3, [r5, #8]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	4798      	blx	r3
 8002928:	2053      	movs	r0, #83	@ 0x53
 800292a:	7468      	strb	r0, [r5, #17]
 800292c:	4668      	mov	r0, sp
 800292e:	7b00      	ldrb	r0, [r0, #12]
 8002930:	2814      	cmp	r0, #20
 8002932:	d005      	beq.n	8002940 <__iar_annotation$$branch+0x578>
 8002934:	2014      	movs	r0, #20
 8002936:	4669      	mov	r1, sp
 8002938:	7308      	strb	r0, [r1, #12]
 800293a:	0028      	movs	r0, r5
 800293c:	f7fe f93f 	bl	8000bbe <PE_Clear_RxEvent>
 8002940:	8be8      	ldrh	r0, [r5, #30]
 8002942:	03a1      	lsls	r1, r4, #14
 8002944:	4288      	cmp	r0, r1
 8002946:	d1d5      	bne.n	80028f4 <__iar_annotation$$branch+0x52c>
 8002948:	220f      	movs	r2, #15
 800294a:	2100      	movs	r1, #0
 800294c:	7c28      	ldrb	r0, [r5, #16]
 800294e:	68ab      	ldr	r3, [r5, #8]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	4798      	blx	r3
 8002954:	68a8      	ldr	r0, [r5, #8]
 8002956:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002958:	2800      	cmp	r0, #0
 800295a:	d100      	bne.n	800295e <__iar_annotation$$branch+0x596>
 800295c:	e5b2      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 800295e:	2092      	movs	r0, #146	@ 0x92
 8002960:	e5b1      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002962:	0028      	movs	r0, r5
 8002964:	f7fe fe53 	bl	800160e <PE_SetPowerNegotiation>
 8002968:	220a      	movs	r2, #10
 800296a:	2100      	movs	r1, #0
 800296c:	7c28      	ldrb	r0, [r5, #16]
 800296e:	68ab      	ldr	r3, [r5, #8]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	4798      	blx	r3
 8002974:	6868      	ldr	r0, [r5, #4]
 8002976:	7800      	ldrb	r0, [r0, #0]
 8002978:	0780      	lsls	r0, r0, #30
 800297a:	0f80      	lsrs	r0, r0, #30
 800297c:	2802      	cmp	r0, #2
 800297e:	d102      	bne.n	8002986 <__iar_annotation$$branch+0x5be>
 8002980:	7c28      	ldrb	r0, [r5, #16]
 8002982:	f003 f820 	bl	80059c6 <USBPD_PRL_SRCSetSinkNG>
 8002986:	2101      	movs	r1, #1
 8002988:	0028      	movs	r0, r5
 800298a:	f7fe f8d3 	bl	8000b34 <PE_ChangePowerRole>
 800298e:	7f28      	ldrb	r0, [r5, #28]
 8002990:	2809      	cmp	r0, #9
 8002992:	d005      	beq.n	80029a0 <__iar_annotation$$branch+0x5d8>
 8002994:	220b      	movs	r2, #11
 8002996:	2101      	movs	r1, #1
 8002998:	7c28      	ldrb	r0, [r5, #16]
 800299a:	68ab      	ldr	r3, [r5, #8]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	4798      	blx	r3
 80029a0:	2000      	movs	r0, #0
 80029a2:	9000      	str	r0, [sp, #0]
 80029a4:	235b      	movs	r3, #91	@ 0x5b
 80029a6:	2206      	movs	r2, #6
 80029a8:	2100      	movs	r1, #0
 80029aa:	0028      	movs	r0, r5
 80029ac:	f7fe fee4 	bl	8001778 <PE_Send_CtrlMessage>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d108      	bne.n	80029c6 <__iar_annotation$$branch+0x5fe>
 80029b4:	220c      	movs	r2, #12
 80029b6:	2100      	movs	r1, #0
 80029b8:	7c28      	ldrb	r0, [r5, #16]
 80029ba:	68ab      	ldr	r3, [r5, #8]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	4798      	blx	r3
 80029c0:	48c1      	ldr	r0, [pc, #772]	@ (8002cc8 <.text_3>)
 80029c2:	83e8      	strh	r0, [r5, #30]
 80029c4:	2414      	movs	r4, #20
 80029c6:	7c68      	ldrb	r0, [r5, #17]
 80029c8:	285b      	cmp	r0, #91	@ 0x5b
 80029ca:	d00f      	beq.n	80029ec <__iar_annotation$$branch+0x624>
 80029cc:	2100      	movs	r1, #0
 80029ce:	0028      	movs	r0, r5
 80029d0:	f7fe f8b0 	bl	8000b34 <PE_ChangePowerRole>
 80029d4:	2206      	movs	r2, #6
 80029d6:	2101      	movs	r1, #1
 80029d8:	7c28      	ldrb	r0, [r5, #16]
 80029da:	68ab      	ldr	r3, [r5, #8]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	4798      	blx	r3
 80029e0:	2207      	movs	r2, #7
 80029e2:	2100      	movs	r1, #0
 80029e4:	7c28      	ldrb	r0, [r5, #16]
 80029e6:	68ab      	ldr	r3, [r5, #8]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	4798      	blx	r3
 80029ec:	e4bc      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80029ee:	9400      	str	r4, [sp, #0]
 80029f0:	2358      	movs	r3, #88	@ 0x58
 80029f2:	220a      	movs	r2, #10
 80029f4:	2100      	movs	r1, #0
 80029f6:	0028      	movs	r0, r5
 80029f8:	f7fe febe 	bl	8001778 <PE_Send_CtrlMessage>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d105      	bne.n	8002a0c <__iar_annotation$$branch+0x644>
 8002a00:	2008      	movs	r0, #8
 8002a02:	7728      	strb	r0, [r5, #28]
 8002a04:	83ee      	strh	r6, [r5, #30]
 8002a06:	241b      	movs	r4, #27
 8002a08:	2202      	movs	r2, #2
 8002a0a:	e7ea      	b.n	80029e2 <__iar_annotation$$branch+0x61a>
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	e7e8      	b.n	80029e2 <__iar_annotation$$branch+0x61a>
 8002a10:	4669      	mov	r1, sp
 8002a12:	7b09      	ldrb	r1, [r1, #12]
 8002a14:	2911      	cmp	r1, #17
 8002a16:	d10c      	bne.n	8002a32 <__iar_annotation$$branch+0x66a>
 8002a18:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8002a1a:	4201      	tst	r1, r0
 8002a1c:	d109      	bne.n	8002a32 <__iar_annotation$$branch+0x66a>
 8002a1e:	06c8      	lsls	r0, r1, #27
 8002a20:	0ec0      	lsrs	r0, r0, #27
 8002a22:	2803      	cmp	r0, #3
 8002a24:	d006      	beq.n	8002a34 <__iar_annotation$$branch+0x66c>
 8002a26:	2804      	cmp	r0, #4
 8002a28:	d02d      	beq.n	8002a86 <__iar_annotation$$branch+0x6be>
 8002a2a:	280c      	cmp	r0, #12
 8002a2c:	d029      	beq.n	8002a82 <__iar_annotation$$branch+0x6ba>
 8002a2e:	2810      	cmp	r0, #16
 8002a30:	d032      	beq.n	8002a98 <__iar_annotation$$branch+0x6d0>
 8002a32:	e0a5      	b.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002a34:	6868      	ldr	r0, [r5, #4]
 8002a36:	6801      	ldr	r1, [r0, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	6002      	str	r2, [r0, #0]
 8002a3e:	485c      	ldr	r0, [pc, #368]	@ (8002bb0 <__iar_annotation$$branch+0x7e8>)
 8002a40:	83e8      	strh	r0, [r5, #30]
 8002a42:	24e1      	movs	r4, #225	@ 0xe1
 8002a44:	00a4      	lsls	r4, r4, #2
 8002a46:	7f28      	ldrb	r0, [r5, #28]
 8002a48:	2809      	cmp	r0, #9
 8002a4a:	d005      	beq.n	8002a58 <__iar_annotation$$branch+0x690>
 8002a4c:	2206      	movs	r2, #6
 8002a4e:	2100      	movs	r1, #0
 8002a50:	7c28      	ldrb	r0, [r5, #16]
 8002a52:	68ab      	ldr	r3, [r5, #8]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	4798      	blx	r3
 8002a58:	2104      	movs	r1, #4
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f7fe fdd7 	bl	800160e <PE_SetPowerNegotiation>
 8002a60:	213a      	movs	r1, #58	@ 0x3a
 8002a62:	7c28      	ldrb	r0, [r5, #16]
 8002a64:	f7fd fe40 	bl	80006e8 <USBPD_PE_Notification>
 8002a68:	4668      	mov	r0, sp
 8002a6a:	7b00      	ldrb	r0, [r0, #12]
 8002a6c:	2814      	cmp	r0, #20
 8002a6e:	d005      	beq.n	8002a7c <__iar_annotation$$branch+0x6b4>
 8002a70:	2014      	movs	r0, #20
 8002a72:	4669      	mov	r1, sp
 8002a74:	7308      	strb	r0, [r1, #12]
 8002a76:	0028      	movs	r0, r5
 8002a78:	f7fe f8a1 	bl	8000bbe <PE_Clear_RxEvent>
 8002a7c:	2059      	movs	r0, #89	@ 0x59
 8002a7e:	7468      	strb	r0, [r5, #17]
 8002a80:	e07e      	b.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002a82:	213b      	movs	r1, #59	@ 0x3b
 8002a84:	e000      	b.n	8002a88 <__iar_annotation$$branch+0x6c0>
 8002a86:	2116      	movs	r1, #22
 8002a88:	7c28      	ldrb	r0, [r5, #16]
 8002a8a:	f7fd fe2d 	bl	80006e8 <USBPD_PE_Notification>
 8002a8e:	4668      	mov	r0, sp
 8002a90:	7b00      	ldrb	r0, [r0, #12]
 8002a92:	2814      	cmp	r0, #20
 8002a94:	d108      	bne.n	8002aa8 <__iar_annotation$$branch+0x6e0>
 8002a96:	e070      	b.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002a98:	2117      	movs	r1, #23
 8002a9a:	7c28      	ldrb	r0, [r5, #16]
 8002a9c:	f7fd fe24 	bl	80006e8 <USBPD_PE_Notification>
 8002aa0:	4668      	mov	r0, sp
 8002aa2:	7b00      	ldrb	r0, [r0, #12]
 8002aa4:	2814      	cmp	r0, #20
 8002aa6:	d068      	beq.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002aa8:	2014      	movs	r0, #20
 8002aaa:	4669      	mov	r1, sp
 8002aac:	7308      	strb	r0, [r1, #12]
 8002aae:	0028      	movs	r0, r5
 8002ab0:	f7fe f885 	bl	8000bbe <PE_Clear_RxEvent>
 8002ab4:	e061      	b.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	9004      	str	r0, [sp, #16]
 8002aba:	ab04      	add	r3, sp, #16
 8002abc:	aa05      	add	r2, sp, #20
 8002abe:	2100      	movs	r1, #0
 8002ac0:	7c28      	ldrb	r0, [r5, #16]
 8002ac2:	68ae      	ldr	r6, [r5, #8]
 8002ac4:	6976      	ldr	r6, [r6, #20]
 8002ac6:	47b0      	blx	r6
 8002ac8:	2104      	movs	r1, #4
 8002aca:	9804      	ldr	r0, [sp, #16]
 8002acc:	f7fe fdf2 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <__iar_annotation$$branch+0x710>
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	e4b5      	b.n	8002444 <__iar_annotation$$branch+0x7c>
 8002ad8:	9002      	str	r0, [sp, #8]
 8002ada:	2003      	movs	r0, #3
 8002adc:	9001      	str	r0, [sp, #4]
 8002ade:	9804      	ldr	r0, [sp, #16]
 8002ae0:	0880      	lsrs	r0, r0, #2
 8002ae2:	9000      	str	r0, [sp, #0]
 8002ae4:	ab05      	add	r3, sp, #20
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2100      	movs	r1, #0
 8002aea:	0028      	movs	r0, r5
 8002aec:	f7fe fe6f 	bl	80017ce <PE_Send_DataMessage>
 8002af0:	e43a      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002af2:	2000      	movs	r0, #0
 8002af4:	9002      	str	r0, [sp, #8]
 8002af6:	2003      	movs	r0, #3
 8002af8:	9001      	str	r0, [sp, #4]
 8002afa:	2001      	movs	r0, #1
 8002afc:	9000      	str	r0, [sp, #0]
 8002afe:	002b      	movs	r3, r5
 8002b00:	332c      	adds	r3, #44	@ 0x2c
 8002b02:	2206      	movs	r2, #6
 8002b04:	2100      	movs	r1, #0
 8002b06:	0028      	movs	r0, r5
 8002b08:	f7fe fe61 	bl	80017ce <PE_Send_DataMessage>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1ef      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b10:	215d      	movs	r1, #93	@ 0x5d
 8002b12:	e655      	b.n	80027c0 <__iar_annotation$$branch+0x3f8>
 8002b14:	9400      	str	r4, [sp, #0]
 8002b16:	2366      	movs	r3, #102	@ 0x66
 8002b18:	2214      	movs	r2, #20
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	0028      	movs	r0, r5
 8002b1e:	f7fe fe2b 	bl	8001778 <PE_Send_CtrlMessage>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d1e4      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b26:	83ee      	strh	r6, [r5, #30]
 8002b28:	241b      	movs	r4, #27
 8002b2a:	214a      	movs	r1, #74	@ 0x4a
 8002b2c:	7c28      	ldrb	r0, [r5, #16]
 8002b2e:	f7fd fddb 	bl	80006e8 <USBPD_PE_Notification>
 8002b32:	200b      	movs	r0, #11
 8002b34:	7728      	strb	r0, [r5, #28]
 8002b36:	e7db      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b38:	4668      	mov	r0, sp
 8002b3a:	7b00      	ldrb	r0, [r0, #12]
 8002b3c:	2811      	cmp	r0, #17
 8002b3e:	d11f      	bne.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b40:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002b42:	0bc1      	lsrs	r1, r0, #15
 8002b44:	d01c      	beq.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b46:	06c0      	lsls	r0, r0, #27
 8002b48:	0ec0      	lsrs	r0, r0, #27
 8002b4a:	280c      	cmp	r0, #12
 8002b4c:	d118      	bne.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8002b52:	1d02      	adds	r2, r0, #4
 8002b54:	210a      	movs	r1, #10
 8002b56:	7c28      	ldrb	r0, [r5, #16]
 8002b58:	68ac      	ldr	r4, [r5, #8]
 8002b5a:	69a4      	ldr	r4, [r4, #24]
 8002b5c:	47a0      	blx	r4
 8002b5e:	4668      	mov	r0, sp
 8002b60:	7b00      	ldrb	r0, [r0, #12]
 8002b62:	2814      	cmp	r0, #20
 8002b64:	d005      	beq.n	8002b72 <__iar_annotation$$branch+0x7aa>
 8002b66:	2014      	movs	r0, #20
 8002b68:	4669      	mov	r1, sp
 8002b6a:	7308      	strb	r0, [r1, #12]
 8002b6c:	0028      	movs	r0, r5
 8002b6e:	f7fe f826 	bl	8000bbe <PE_Clear_RxEvent>
 8002b72:	214b      	movs	r1, #75	@ 0x4b
 8002b74:	7c28      	ldrb	r0, [r5, #16]
 8002b76:	f7fd fdb7 	bl	80006e8 <USBPD_PE_Notification>
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	7468      	strb	r0, [r5, #17]
 8002b7e:	2400      	movs	r4, #0
 8002b80:	8be8      	ldrh	r0, [r5, #30]
 8002b82:	2180      	movs	r1, #128	@ 0x80
 8002b84:	0209      	lsls	r1, r1, #8
 8002b86:	4288      	cmp	r0, r1
 8002b88:	d1b2      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b8a:	e041      	b.n	8002c10 <__iar_annotation$$branch+0x848>
 8002b8c:	4895      	ldr	r0, [pc, #596]	@ (8002de4 <.text_5>)
 8002b8e:	182f      	adds	r7, r5, r0
 8002b90:	9400      	str	r4, [sp, #0]
 8002b92:	2339      	movs	r3, #57	@ 0x39
 8002b94:	783a      	ldrb	r2, [r7, #0]
 8002b96:	2100      	movs	r1, #0
 8002b98:	0028      	movs	r0, r5
 8002b9a:	f7fe fded 	bl	8001778 <PE_Send_CtrlMessage>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d1a6      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002ba2:	7878      	ldrb	r0, [r7, #1]
 8002ba4:	7728      	strb	r0, [r5, #28]
 8002ba6:	2144      	movs	r1, #68	@ 0x44
 8002ba8:	7c28      	ldrb	r0, [r5, #16]
 8002baa:	f7fd fd9d 	bl	80006e8 <USBPD_PE_Notification>
 8002bae:	e4b8      	b.n	8002522 <__iar_annotation$$branch+0x15a>
 8002bb0:	00008384 	.word	0x00008384
 8002bb4:	4668      	mov	r0, sp
 8002bb6:	7b00      	ldrb	r0, [r0, #12]
 8002bb8:	2814      	cmp	r0, #20
 8002bba:	d024      	beq.n	8002c06 <__iar_annotation$$branch+0x83e>
 8002bbc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002bbe:	0bc0      	lsrs	r0, r0, #15
 8002bc0:	d00e      	beq.n	8002be0 <__iar_annotation$$branch+0x818>
 8002bc2:	0028      	movs	r0, r5
 8002bc4:	f7fe fe40 	bl	8001848 <PE_Check_ExtendedMessage>
 8002bc8:	4668      	mov	r0, sp
 8002bca:	7b00      	ldrb	r0, [r0, #12]
 8002bcc:	2814      	cmp	r0, #20
 8002bce:	d005      	beq.n	8002bdc <__iar_annotation$$branch+0x814>
 8002bd0:	2014      	movs	r0, #20
 8002bd2:	4669      	mov	r1, sp
 8002bd4:	7308      	strb	r0, [r1, #12]
 8002bd6:	0028      	movs	r0, r5
 8002bd8:	f7fd fff1 	bl	8000bbe <PE_Clear_RxEvent>
 8002bdc:	2000      	movs	r0, #0
 8002bde:	83e8      	strh	r0, [r5, #30]
 8002be0:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002be2:	490c      	ldr	r1, [pc, #48]	@ (8002c14 <__iar_annotation$$branch+0x84c>)
 8002be4:	4001      	ands	r1, r0
 8002be6:	2910      	cmp	r1, #16
 8002be8:	d10d      	bne.n	8002c06 <__iar_annotation$$branch+0x83e>
 8002bea:	2003      	movs	r0, #3
 8002bec:	7468      	strb	r0, [r5, #17]
 8002bee:	2400      	movs	r4, #0
 8002bf0:	4668      	mov	r0, sp
 8002bf2:	7b00      	ldrb	r0, [r0, #12]
 8002bf4:	2814      	cmp	r0, #20
 8002bf6:	d005      	beq.n	8002c04 <__iar_annotation$$branch+0x83c>
 8002bf8:	2014      	movs	r0, #20
 8002bfa:	4669      	mov	r1, sp
 8002bfc:	7308      	strb	r0, [r1, #12]
 8002bfe:	0028      	movs	r0, r5
 8002c00:	f7fd ffdd 	bl	8000bbe <PE_Clear_RxEvent>
 8002c04:	83ec      	strh	r4, [r5, #30]
 8002c06:	8be8      	ldrh	r0, [r5, #30]
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0209      	lsls	r1, r1, #8
 8002c0c:	4288      	cmp	r0, r1
 8002c0e:	d11c      	bne.n	8002c4a <__iar_annotation$$branch+0x882>
 8002c10:	2003      	movs	r0, #3
 8002c12:	e458      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002c14:	0000f01f 	.word	0x0000f01f
 8002c18:	0028      	movs	r0, r5
 8002c1a:	f7fe ff37 	bl	8001a8c <PE_SubStateMachine_ExtendedMessages>
 8002c1e:	e63b      	b.n	8002898 <__iar_annotation$$branch+0x4d0>
 8002c20:	a903      	add	r1, sp, #12
 8002c22:	0028      	movs	r0, r5
 8002c24:	f7fe f9d4 	bl	8000fd0 <PE_SubStateMachine_Generic>
 8002c28:	e636      	b.n	8002898 <__iar_annotation$$branch+0x4d0>
 8002c2a:	a903      	add	r1, sp, #12
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	f001 f9ef 	bl	8004010 <PE_SubStateMachine_VconnSwap>
 8002c32:	0004      	movs	r4, r0
 8002c34:	6868      	ldr	r0, [r5, #4]
 8002c36:	6800      	ldr	r0, [r0, #0]
 8002c38:	0401      	lsls	r1, r0, #16
 8002c3a:	0fc9      	lsrs	r1, r1, #31
 8002c3c:	d006      	beq.n	8002c4c <__iar_annotation$$branch+0x884>
 8002c3e:	6828      	ldr	r0, [r5, #0]
 8002c40:	6801      	ldr	r1, [r0, #0]
 8002c42:	4668      	mov	r0, sp
 8002c44:	7b40      	ldrb	r0, [r0, #13]
 8002c46:	f002 fee1 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002c4a:	e751      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	e7f8      	b.n	8002c42 <__iar_annotation$$branch+0x87a>
 8002c50:	4668      	mov	r0, sp
 8002c52:	7b01      	ldrb	r1, [r0, #12]
 8002c54:	0028      	movs	r0, r5
 8002c56:	f002 fc3b 	bl	80054d0 <PE_StateMachine_UVDM>
 8002c5a:	e749      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	9000      	str	r0, [sp, #0]
 8002c60:	2358      	movs	r3, #88	@ 0x58
 8002c62:	2213      	movs	r2, #19
 8002c64:	2100      	movs	r1, #0
 8002c66:	0028      	movs	r0, r5
 8002c68:	f7fe fd86 	bl	8001778 <PE_Send_CtrlMessage>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d1f4      	bne.n	8002c5a <__iar_annotation$$branch+0x892>
 8002c70:	2009      	movs	r0, #9
 8002c72:	7728      	strb	r0, [r5, #28]
 8002c74:	e455      	b.n	8002522 <__iar_annotation$$branch+0x15a>
 8002c76:	6968      	ldr	r0, [r5, #20]
 8002c78:	2701      	movs	r7, #1
 8002c7a:	0b41      	lsrs	r1, r0, #13
 8002c7c:	4039      	ands	r1, r7
 8002c7e:	d019      	beq.n	8002cb4 <__iar_annotation$$branch+0x8ec>
 8002c80:	0b80      	lsrs	r0, r0, #14
 8002c82:	4038      	ands	r0, r7
 8002c84:	d007      	beq.n	8002c96 <__iar_annotation$$branch+0x8ce>
 8002c86:	215b      	movs	r1, #91	@ 0x5b
 8002c88:	7c28      	ldrb	r0, [r5, #16]
 8002c8a:	f7fd fd2d 	bl	80006e8 <USBPD_PE_Notification>
 8002c8e:	6968      	ldr	r0, [r5, #20]
 8002c90:	4955      	ldr	r1, [pc, #340]	@ (8002de8 <.text_6>)
 8002c92:	4001      	ands	r1, r0
 8002c94:	6169      	str	r1, [r5, #20]
 8002c96:	2003      	movs	r0, #3
 8002c98:	7468      	strb	r0, [r5, #17]
 8002c9a:	7ca9      	ldrb	r1, [r5, #18]
 8002c9c:	2903      	cmp	r1, #3
 8002c9e:	d008      	beq.n	8002cb2 <__iar_annotation$$branch+0x8ea>
 8002ca0:	74a8      	strb	r0, [r5, #18]
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	9000      	str	r0, [sp, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2203      	movs	r2, #3
 8002caa:	7c29      	ldrb	r1, [r5, #16]
 8002cac:	2004      	movs	r0, #4
 8002cae:	6834      	ldr	r4, [r6, #0]
 8002cb0:	47a0      	blx	r4
 8002cb2:	2401      	movs	r4, #1
 8002cb4:	6968      	ldr	r0, [r5, #20]
 8002cb6:	494d      	ldr	r1, [pc, #308]	@ (8002dec <.text_7>)
 8002cb8:	4001      	ands	r1, r0
 8002cba:	6169      	str	r1, [r5, #20]
 8002cbc:	2c00      	cmp	r4, #0
 8002cbe:	d101      	bne.n	8002cc4 <__iar_annotation$$branch>

08002cc0 <__iar_annotation$$branch>:
 8002cc0:	f7ff fa3e 	bl	8002140 <USBPD_PE_StateMachine_SNK+0xb0>

08002cc4 <__iar_annotation$$branch>:
 8002cc4:	f7ff fb8e 	bl	80023e4 <__iar_annotation$$branch+0x1c>

08002cc8 <.text_3>:
 8002cc8:	00008014 	.word	0x00008014

08002ccc <PE_StateMachine_SNK_ReadyWait>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	0004      	movs	r4, r0
 8002cd0:	000e      	movs	r6, r1
 8002cd2:	2702      	movs	r7, #2
 8002cd4:	7830      	ldrb	r0, [r6, #0]
 8002cd6:	2814      	cmp	r0, #20
 8002cd8:	d00b      	beq.n	8002cf2 <PE_StateMachine_SNK_ReadyWait+0x26>
 8002cda:	0020      	movs	r0, r4
 8002cdc:	f7fe fffc 	bl	8001cd8 <PE_ManageRXEvent>
 8002ce0:	7830      	ldrb	r0, [r6, #0]
 8002ce2:	2814      	cmp	r0, #20
 8002ce4:	d07b      	beq.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ce6:	2014      	movs	r0, #20
 8002ce8:	7030      	strb	r0, [r6, #0]
 8002cea:	0020      	movs	r0, r4
 8002cec:	f7fd ff67 	bl	8000bbe <PE_Clear_RxEvent>
 8002cf0:	e075      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002cf2:	6961      	ldr	r1, [r4, #20]
 8002cf4:	0cc8      	lsrs	r0, r1, #19
 8002cf6:	03be      	lsls	r6, r7, #14
 8002cf8:	2700      	movs	r7, #0
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d021      	beq.n	8002d42 <PE_StateMachine_SNK_ReadyWait+0x76>
 8002cfe:	8c21      	ldrh	r1, [r4, #32]
 8002d00:	42b1      	cmp	r1, r6
 8002d02:	d111      	bne.n	8002d28 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002d04:	200f      	movs	r0, #15
 8002d06:	7460      	strb	r0, [r4, #17]
 8002d08:	9700      	str	r7, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2270      	movs	r2, #112	@ 0x70
 8002d0e:	7c21      	ldrb	r1, [r4, #16]
 8002d10:	2009      	movs	r0, #9
 8002d12:	4d37      	ldr	r5, [pc, #220]	@ (8002df0 <.text_8>)
 8002d14:	682d      	ldr	r5, [r5, #0]
 8002d16:	47a8      	blx	r5
 8002d18:	2098      	movs	r0, #152	@ 0x98
 8002d1a:	0080      	lsls	r0, r0, #2
 8002d1c:	5c20      	ldrb	r0, [r4, r0]
 8002d1e:	1c40      	adds	r0, r0, #1
 8002d20:	2198      	movs	r1, #152	@ 0x98
 8002d22:	0089      	lsls	r1, r1, #2
 8002d24:	5460      	strb	r0, [r4, r1]
 8002d26:	e05a      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d28:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002d2a:	0509      	lsls	r1, r1, #20
 8002d2c:	0f49      	lsrs	r1, r1, #29
 8002d2e:	180a      	adds	r2, r1, r0
 8002d30:	2333      	movs	r3, #51	@ 0x33
 8002d32:	435a      	muls	r2, r3
 8002d34:	4316      	orrs	r6, r2
 8002d36:	8426      	strh	r6, [r4, #32]
 8002d38:	180f      	adds	r7, r1, r0
 8002d3a:	2033      	movs	r0, #51	@ 0x33
 8002d3c:	4347      	muls	r7, r0
 8002d3e:	b2bf      	uxth	r7, r7
 8002d40:	e04d      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d42:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8002d44:	42b0      	cmp	r0, r6
 8002d46:	d104      	bne.n	8002d52 <PE_StateMachine_SNK_ReadyWait+0x86>
 8002d48:	2045      	movs	r0, #69	@ 0x45
 8002d4a:	7460      	strb	r0, [r4, #17]
 8002d4c:	430e      	orrs	r6, r1
 8002d4e:	6166      	str	r6, [r4, #20]
 8002d50:	e045      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d52:	7c20      	ldrb	r0, [r4, #16]
 8002d54:	f7fd ff58 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d128      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d5c:	2032      	movs	r0, #50	@ 0x32
 8002d5e:	5c20      	ldrb	r0, [r4, r0]
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d024      	beq.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d64:	6860      	ldr	r0, [r4, #4]
 8002d66:	6800      	ldr	r0, [r0, #0]
 8002d68:	2103      	movs	r1, #3
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	4002      	ands	r2, r0
 8002d6e:	2a01      	cmp	r2, #1
 8002d70:	d007      	beq.n	8002d82 <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002d72:	4001      	ands	r1, r0
 8002d74:	2902      	cmp	r1, #2
 8002d76:	d11a      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d78:	7c20      	ldrb	r0, [r4, #16]
 8002d7a:	f002 fe3b 	bl	80059f4 <USBPD_PRL_IsResistor_SinkTxOK>
 8002d7e:	2801      	cmp	r0, #1
 8002d80:	d115      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d82:	2033      	movs	r0, #51	@ 0x33
 8002d84:	5c20      	ldrb	r0, [r4, r0]
 8002d86:	2131      	movs	r1, #49	@ 0x31
 8002d88:	5460      	strb	r0, [r4, r1]
 8002d8a:	2032      	movs	r0, #50	@ 0x32
 8002d8c:	5c20      	ldrb	r0, [r4, r0]
 8002d8e:	7460      	strb	r0, [r4, #17]
 8002d90:	2845      	cmp	r0, #69	@ 0x45
 8002d92:	d102      	bne.n	8002d9a <PE_StateMachine_SNK_ReadyWait+0xce>
 8002d94:	6960      	ldr	r0, [r4, #20]
 8002d96:	4306      	orrs	r6, r0
 8002d98:	6166      	str	r6, [r4, #20]
 8002d9a:	2132      	movs	r1, #50	@ 0x32
 8002d9c:	5467      	strb	r7, [r4, r1]
 8002d9e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002da0:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002da2:	6960      	ldr	r0, [r4, #20]
 8002da4:	2180      	movs	r1, #128	@ 0x80
 8002da6:	01c9      	lsls	r1, r1, #7
 8002da8:	4301      	orrs	r1, r0
 8002daa:	6161      	str	r1, [r4, #20]
 8002dac:	e017      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002dae:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002db0:	42b0      	cmp	r0, r6
 8002db2:	d109      	bne.n	8002dc8 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002db4:	8467      	strh	r7, [r4, #34]	@ 0x22
 8002db6:	2098      	movs	r0, #152	@ 0x98
 8002db8:	0080      	lsls	r0, r0, #2
 8002dba:	1820      	adds	r0, r4, r0
 8002dbc:	7881      	ldrb	r1, [r0, #2]
 8002dbe:	1c49      	adds	r1, r1, #1
 8002dc0:	7081      	strb	r1, [r0, #2]
 8002dc2:	2005      	movs	r0, #5
 8002dc4:	7460      	strb	r0, [r4, #17]
 8002dc6:	e00a      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002dc8:	0020      	movs	r0, r4
 8002dca:	f7fe fc47 	bl	800165c <PE_CalculateMinTiming>
 8002dce:	2132      	movs	r1, #50	@ 0x32
 8002dd0:	5c61      	ldrb	r1, [r4, r1]
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d002      	beq.n	8002ddc <PE_StateMachine_SNK_ReadyWait+0x110>
 8002dd6:	2802      	cmp	r0, #2
 8002dd8:	d300      	bcc.n	8002ddc <PE_StateMachine_SNK_ReadyWait+0x110>
 8002dda:	2002      	movs	r0, #2
 8002ddc:	0007      	movs	r7, r0
 8002dde:	0038      	movs	r0, r7
 8002de0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002de4 <.text_5>:
 8002de4:	0000025e 	.word	0x0000025e

08002de8 <.text_6>:
 8002de8:	ffffbfff 	.word	0xffffbfff

08002dec <.text_7>:
 8002dec:	ffffdfff 	.word	0xffffdfff

08002df0 <.text_8>:
 8002df0:	20000000 	.word	0x20000000

08002df4 <USBPD_PE_StateMachine_SRC>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	0005      	movs	r5, r0
 8002dfa:	4829      	ldr	r0, [pc, #164]	@ (8002ea0 <USBPD_PE_StateMachine_SRC+0xac>)
 8002dfc:	00a9      	lsls	r1, r5, #2
 8002dfe:	5844      	ldr	r4, [r0, r1]
 8002e00:	7c60      	ldrb	r0, [r4, #17]
 8002e02:	2848      	cmp	r0, #72	@ 0x48
 8002e04:	d134      	bne.n	8002e70 <USBPD_PE_StateMachine_SRC+0x7c>
 8002e06:	0020      	movs	r0, r4
 8002e08:	f7fd ffc0 	bl	8000d8c <PE_Reset_ZI>
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	f7fd fff3 	bl	8000df8 <PE_Reset_Counter>
 8002e12:	6820      	ldr	r0, [r4, #0]
 8002e14:	7900      	ldrb	r0, [r0, #4]
 8002e16:	0783      	lsls	r3, r0, #30
 8002e18:	0f9b      	lsrs	r3, r3, #30
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	7c20      	ldrb	r0, [r4, #16]
 8002e20:	f002 fd83 	bl	800592a <USBPD_PRL_SetHeader>
 8002e24:	6860      	ldr	r0, [r4, #4]
 8002e26:	6801      	ldr	r1, [r0, #0]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	6002      	str	r2, [r0, #0]
 8002e2e:	6860      	ldr	r0, [r4, #4]
 8002e30:	6801      	ldr	r1, [r0, #0]
 8002e32:	2203      	movs	r2, #3
 8002e34:	4391      	bics	r1, r2
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	7912      	ldrb	r2, [r2, #4]
 8002e3a:	0792      	lsls	r2, r2, #30
 8002e3c:	0f92      	lsrs	r2, r2, #30
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	6002      	str	r2, [r0, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	7c20      	ldrb	r0, [r4, #16]
 8002e46:	f002 fde1 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002e4a:	7c20      	ldrb	r0, [r4, #16]
 8002e4c:	f003 f84a 	bl	8005ee4 <USBPD_PRL_Reset>
 8002e50:	2002      	movs	r0, #2
 8002e52:	7460      	strb	r0, [r4, #17]
 8002e54:	7ca0      	ldrb	r0, [r4, #18]
 8002e56:	2802      	cmp	r0, #2
 8002e58:	d00a      	beq.n	8002e70 <USBPD_PE_StateMachine_SRC+0x7c>
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	74a0      	strb	r0, [r4, #18]
 8002e5e:	2000      	movs	r0, #0
 8002e60:	9000      	str	r0, [sp, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	2202      	movs	r2, #2
 8002e66:	7c21      	ldrb	r1, [r4, #16]
 8002e68:	2004      	movs	r0, #4
 8002e6a:	4eca      	ldr	r6, [pc, #808]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8002e6c:	6836      	ldr	r6, [r6, #0]
 8002e6e:	47b0      	blx	r6
 8002e70:	6960      	ldr	r0, [r4, #20]
 8002e72:	0341      	lsls	r1, r0, #13
 8002e74:	0fc9      	lsrs	r1, r1, #31
 8002e76:	d006      	beq.n	8002e86 <USBPD_PE_StateMachine_SRC+0x92>
 8002e78:	49c7      	ldr	r1, [pc, #796]	@ (8003198 <__iar_annotation$$branch+0x70>)
 8002e7a:	4001      	ands	r1, r0
 8002e7c:	6161      	str	r1, [r4, #20]
 8002e7e:	2164      	movs	r1, #100	@ 0x64
 8002e80:	7c20      	ldrb	r0, [r4, #16]
 8002e82:	f7fd fc31 	bl	80006e8 <USBPD_PE_Notification>
 8002e86:	0020      	movs	r0, r4
 8002e88:	f7fd fe62 	bl	8000b50 <PE_Get_RxEvent>
 8002e8c:	4669      	mov	r1, sp
 8002e8e:	7308      	strb	r0, [r1, #12]
 8002e90:	4668      	mov	r0, sp
 8002e92:	7b00      	ldrb	r0, [r0, #12]
 8002e94:	2803      	cmp	r0, #3
 8002e96:	d105      	bne.n	8002ea4 <USBPD_PE_StateMachine_SRC+0xb0>
 8002e98:	2001      	movs	r0, #1
 8002e9a:	b007      	add	sp, #28
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	2000017c 	.word	0x2000017c
 8002ea4:	4668      	mov	r0, sp
 8002ea6:	7345      	strb	r5, [r0, #13]
 8002ea8:	6860      	ldr	r0, [r4, #4]
 8002eaa:	6800      	ldr	r0, [r0, #0]
 8002eac:	04c1      	lsls	r1, r0, #19
 8002eae:	0fc9      	lsrs	r1, r1, #31
 8002eb0:	d100      	bne.n	8002eb4 <USBPD_PE_StateMachine_SRC+0xc0>
 8002eb2:	e13b      	b.n	800312c <__iar_annotation$$branch+0x4>
 8002eb4:	6960      	ldr	r0, [r4, #20]
 8002eb6:	0381      	lsls	r1, r0, #14
 8002eb8:	0fc9      	lsrs	r1, r1, #31
 8002eba:	d100      	bne.n	8002ebe <USBPD_PE_StateMachine_SRC+0xca>
 8002ebc:	e144      	b.n	8003148 <__iar_annotation$$branch+0x20>
 8002ebe:	4668      	mov	r0, sp
 8002ec0:	7b40      	ldrb	r0, [r0, #13]
 8002ec2:	f002 fd9b 	bl	80059fc <USBPD_PRL_FastRoleSwapSignalling>
 8002ec6:	20a6      	movs	r0, #166	@ 0xa6
 8002ec8:	7460      	strb	r0, [r4, #17]
 8002eca:	2109      	movs	r1, #9
 8002ecc:	7721      	strb	r1, [r4, #28]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2232      	movs	r2, #50	@ 0x32
 8002ed2:	54a1      	strb	r1, [r4, r2]
 8002ed4:	6961      	ldr	r1, [r4, #20]
 8002ed6:	4ab1      	ldr	r2, [pc, #708]	@ (800319c <__iar_annotation$$branch+0x74>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	6162      	str	r2, [r4, #20]
 8002edc:	49b0      	ldr	r1, [pc, #704]	@ (80031a0 <__iar_annotation$$branch+0x78>)
 8002ede:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8002ee0:	7ca1      	ldrb	r1, [r4, #18]
 8002ee2:	29a6      	cmp	r1, #166	@ 0xa6
 8002ee4:	d000      	beq.n	8002ee8 <USBPD_PE_StateMachine_SRC+0xf4>
 8002ee6:	e125      	b.n	8003134 <__iar_annotation$$branch+0xc>
 8002ee8:	2502      	movs	r5, #2
 8002eea:	4668      	mov	r0, sp
 8002eec:	7b00      	ldrb	r0, [r0, #12]
 8002eee:	2811      	cmp	r0, #17
 8002ef0:	d11f      	bne.n	8002f32 <USBPD_PE_StateMachine_SRC+0x13e>
 8002ef2:	6860      	ldr	r0, [r4, #4]
 8002ef4:	6800      	ldr	r0, [r0, #0]
 8002ef6:	0701      	lsls	r1, r0, #28
 8002ef8:	0fc9      	lsrs	r1, r1, #31
 8002efa:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8002efc:	0680      	lsls	r0, r0, #26
 8002efe:	0fc2      	lsrs	r2, r0, #31
 8002f00:	4291      	cmp	r1, r2
 8002f02:	d116      	bne.n	8002f32 <USBPD_PE_StateMachine_SRC+0x13e>
 8002f04:	2014      	movs	r0, #20
 8002f06:	4669      	mov	r1, sp
 8002f08:	7308      	strb	r0, [r1, #12]
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f7fd fe57 	bl	8000bbe <PE_Clear_RxEvent>
 8002f10:	2092      	movs	r0, #146	@ 0x92
 8002f12:	7460      	strb	r0, [r4, #17]
 8002f14:	7ca0      	ldrb	r0, [r4, #18]
 8002f16:	2892      	cmp	r0, #146	@ 0x92
 8002f18:	d100      	bne.n	8002f1c <USBPD_PE_StateMachine_SRC+0x128>
 8002f1a:	e155      	b.n	80031c8 <__iar_annotation$$branch+0xa0>
 8002f1c:	2092      	movs	r0, #146	@ 0x92
 8002f1e:	74a0      	strb	r0, [r4, #18]
 8002f20:	2000      	movs	r0, #0
 8002f22:	9000      	str	r0, [sp, #0]
 8002f24:	2300      	movs	r3, #0
 8002f26:	2292      	movs	r2, #146	@ 0x92
 8002f28:	7c21      	ldrb	r1, [r4, #16]
 8002f2a:	2004      	movs	r0, #4
 8002f2c:	4e99      	ldr	r6, [pc, #612]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8002f2e:	6836      	ldr	r6, [r6, #0]
 8002f30:	47b0      	blx	r6
 8002f32:	7c60      	ldrb	r0, [r4, #17]
 8002f34:	499b      	ldr	r1, [pc, #620]	@ (80031a4 <__iar_annotation$$branch+0x7c>)
 8002f36:	1866      	adds	r6, r4, r1
 8002f38:	4f9b      	ldr	r7, [pc, #620]	@ (80031a8 <__iar_annotation$$branch+0x80>)
 8002f3a:	499c      	ldr	r1, [pc, #624]	@ (80031ac <__iar_annotation$$branch+0x84>)
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	d100      	bne.n	8002f42 <USBPD_PE_StateMachine_SRC+0x14e>
 8002f40:	e136      	b.n	80031b0 <__iar_annotation$$branch+0x88>
 8002f42:	1e42      	subs	r2, r0, #1
 8002f44:	d067      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8002f46:	1e52      	subs	r2, r2, #1
 8002f48:	d100      	bne.n	8002f4c <USBPD_PE_StateMachine_SRC+0x158>
 8002f4a:	e149      	b.n	80031e0 <__iar_annotation$$branch+0xb8>
 8002f4c:	1e52      	subs	r2, r2, #1
 8002f4e:	2a01      	cmp	r2, #1
 8002f50:	d801      	bhi.n	8002f56 <__iar_annotation$$branch+0x4>

08002f52 <__iar_annotation$$branch>:
 8002f52:	f000 fd90 	bl	8003a76 <__iar_annotation$$branch+0x94e>
 8002f56:	1e92      	subs	r2, r2, #2
 8002f58:	d100      	bne.n	8002f5c <__iar_annotation$$branch+0xa>
 8002f5a:	e189      	b.n	8003270 <__iar_annotation$$branch+0x148>
 8002f5c:	1e52      	subs	r2, r2, #1
 8002f5e:	d100      	bne.n	8002f62 <__iar_annotation$$branch+0x10>
 8002f60:	e18b      	b.n	800327a <__iar_annotation$$branch+0x152>
 8002f62:	1e52      	subs	r2, r2, #1
 8002f64:	d100      	bne.n	8002f68 <__iar_annotation$$branch+0x16>
 8002f66:	e190      	b.n	800328a <__iar_annotation$$branch+0x162>
 8002f68:	1e52      	subs	r2, r2, #1
 8002f6a:	d100      	bne.n	8002f6e <__iar_annotation$$branch+0x1c>
 8002f6c:	e1e1      	b.n	8003332 <__iar_annotation$$branch+0x20a>
 8002f6e:	1e52      	subs	r2, r2, #1
 8002f70:	d100      	bne.n	8002f74 <__iar_annotation$$branch+0x22>
 8002f72:	e223      	b.n	80033bc <__iar_annotation$$branch+0x294>
 8002f74:	1ed2      	subs	r2, r2, #3
 8002f76:	d100      	bne.n	8002f7a <__iar_annotation$$branch+0x28>
 8002f78:	e276      	b.n	8003468 <__iar_annotation$$branch+0x340>
 8002f7a:	1e52      	subs	r2, r2, #1
 8002f7c:	d100      	bne.n	8002f80 <__iar_annotation$$branch+0x2e>
 8002f7e:	e286      	b.n	800348e <__iar_annotation$$branch+0x366>
 8002f80:	1e52      	subs	r2, r2, #1
 8002f82:	d100      	bne.n	8002f86 <__iar_annotation$$branch+0x34>
 8002f84:	e11d      	b.n	80031c2 <__iar_annotation$$branch+0x9a>
 8002f86:	1e52      	subs	r2, r2, #1
 8002f88:	d100      	bne.n	8002f8c <__iar_annotation$$branch+0x3a>
 8002f8a:	e30d      	b.n	80035a8 <__iar_annotation$$branch+0x480>
 8002f8c:	1e52      	subs	r2, r2, #1
 8002f8e:	d100      	bne.n	8002f92 <__iar_annotation$$branch+0x40>
 8002f90:	e2c6      	b.n	8003520 <__iar_annotation$$branch+0x3f8>
 8002f92:	1e52      	subs	r2, r2, #1
 8002f94:	d100      	bne.n	8002f98 <__iar_annotation$$branch+0x46>
 8002f96:	e2cc      	b.n	8003532 <__iar_annotation$$branch+0x40a>
 8002f98:	1e52      	subs	r2, r2, #1
 8002f9a:	d100      	bne.n	8002f9e <__iar_annotation$$branch+0x4c>
 8002f9c:	e2d8      	b.n	8003550 <__iar_annotation$$branch+0x428>
 8002f9e:	1e52      	subs	r2, r2, #1
 8002fa0:	d100      	bne.n	8002fa4 <__iar_annotation$$branch+0x52>
 8002fa2:	e389      	b.n	80036b8 <__iar_annotation$$branch+0x590>
 8002fa4:	1e52      	subs	r2, r2, #1
 8002fa6:	d100      	bne.n	8002faa <__iar_annotation$$branch+0x58>
 8002fa8:	e32b      	b.n	8003602 <__iar_annotation$$branch+0x4da>
 8002faa:	1e52      	subs	r2, r2, #1
 8002fac:	d100      	bne.n	8002fb0 <__iar_annotation$$branch+0x5e>
 8002fae:	e332      	b.n	8003616 <__iar_annotation$$branch+0x4ee>
 8002fb0:	1e52      	subs	r2, r2, #1
 8002fb2:	d100      	bne.n	8002fb6 <__iar_annotation$$branch+0x64>
 8002fb4:	e1d5      	b.n	8003362 <__iar_annotation$$branch+0x23a>
 8002fb6:	1e52      	subs	r2, r2, #1
 8002fb8:	d100      	bne.n	8002fbc <__iar_annotation$$branch+0x6a>
 8002fba:	e34c      	b.n	8003656 <__iar_annotation$$branch+0x52e>
 8002fbc:	1e52      	subs	r2, r2, #1
 8002fbe:	2a01      	cmp	r2, #1
 8002fc0:	d929      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8002fc2:	1e92      	subs	r2, r2, #2
 8002fc4:	d100      	bne.n	8002fc8 <__iar_annotation$$branch+0x76>
 8002fc6:	e3a3      	b.n	8003710 <__iar_annotation$$branch+0x5e8>
 8002fc8:	1e52      	subs	r2, r2, #1
 8002fca:	d100      	bne.n	8002fce <__iar_annotation$$branch+0x7c>
 8002fcc:	e3b0      	b.n	8003730 <__iar_annotation$$branch+0x608>
 8002fce:	1e92      	subs	r2, r2, #2
 8002fd0:	d021      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8002fd2:	1e52      	subs	r2, r2, #1
 8002fd4:	d101      	bne.n	8002fda <__iar_annotation$$branch+0x4>

08002fd6 <__iar_annotation$$branch>:
 8002fd6:	f000 fc88 	bl	80038ea <__iar_annotation$$branch+0x7c2>
 8002fda:	1e52      	subs	r2, r2, #1
 8002fdc:	d101      	bne.n	8002fe2 <__iar_annotation$$branch+0x4>

08002fde <__iar_annotation$$branch>:
 8002fde:	f000 fc9a 	bl	8003916 <__iar_annotation$$branch+0x7ee>
 8002fe2:	1e52      	subs	r2, r2, #1
 8002fe4:	d101      	bne.n	8002fea <__iar_annotation$$branch+0x4>

08002fe6 <__iar_annotation$$branch>:
 8002fe6:	f000 fce6 	bl	80039b6 <__iar_annotation$$branch+0x88e>
 8002fea:	1e52      	subs	r2, r2, #1
 8002fec:	d101      	bne.n	8002ff2 <__iar_annotation$$branch+0x4>

08002fee <__iar_annotation$$branch>:
 8002fee:	f000 fd0f 	bl	8003a10 <__iar_annotation$$branch+0x8e8>
 8002ff2:	1e52      	subs	r2, r2, #1
 8002ff4:	d101      	bne.n	8002ffa <__iar_annotation$$branch+0x4>

08002ff6 <__iar_annotation$$branch>:
 8002ff6:	f000 fbe5 	bl	80037c4 <__iar_annotation$$branch+0x69c>
 8002ffa:	1e92      	subs	r2, r2, #2
 8002ffc:	d101      	bne.n	8003002 <__iar_annotation$$branch+0x4>

08002ffe <__iar_annotation$$branch>:
 8002ffe:	f000 fc0a 	bl	8003816 <__iar_annotation$$branch+0x6ee>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	d101      	bne.n	800300a <__iar_annotation$$branch+0x4>

08003006 <__iar_annotation$$branch>:
 8003006:	f000 fc2e 	bl	8003866 <__iar_annotation$$branch+0x73e>
 800300a:	1e52      	subs	r2, r2, #1
 800300c:	d101      	bne.n	8003012 <__iar_annotation$$branch+0x4>

0800300e <__iar_annotation$$branch>:
 800300e:	f000 fc49 	bl	80038a4 <__iar_annotation$$branch+0x77c>
 8003012:	1e52      	subs	r2, r2, #1
 8003014:	2a02      	cmp	r2, #2
 8003016:	d801      	bhi.n	800301c <__iar_annotation$$branch+0x4>

08003018 <__iar_annotation$$branch>:
 8003018:	f000 fe1b 	bl	8003c52 <__iar_annotation$$branch+0x106>
 800301c:	1ed2      	subs	r2, r2, #3
 800301e:	d101      	bne.n	8003024 <__iar_annotation$$branch+0x4>

08003020 <__iar_annotation$$branch>:
 8003020:	f000 fbf4 	bl	800380c <__iar_annotation$$branch+0x6e4>
 8003024:	1e52      	subs	r2, r2, #1
 8003026:	d101      	bne.n	800302c <__iar_annotation$$branch+0x4>

08003028 <__iar_annotation$$branch>:
 8003028:	f000 fd96 	bl	8003b58 <__iar_annotation$$branch+0xc>
 800302c:	1e52      	subs	r2, r2, #1
 800302e:	d0f2      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003030:	1e52      	subs	r2, r2, #1
 8003032:	d101      	bne.n	8003038 <__iar_annotation$$branch+0x4>

08003034 <__iar_annotation$$branch>:
 8003034:	f000 fda1 	bl	8003b7a <__iar_annotation$$branch+0x2e>
 8003038:	1e52      	subs	r2, r2, #1
 800303a:	d101      	bne.n	8003040 <__iar_annotation$$branch+0x4>

0800303c <__iar_annotation$$branch>:
 800303c:	f000 fdcf 	bl	8003bde <__iar_annotation$$branch+0x92>
 8003040:	1e52      	subs	r2, r2, #1
 8003042:	2a01      	cmp	r2, #1
 8003044:	d9e7      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003046:	1e92      	subs	r2, r2, #2
 8003048:	d001      	beq.n	800304e <__iar_annotation$$branch+0x12>
 800304a:	1e92      	subs	r2, r2, #2
 800304c:	2a05      	cmp	r2, #5
 800304e:	d801      	bhi.n	8003054 <__iar_annotation$$branch+0x4>

08003050 <__iar_annotation$$branch>:
 8003050:	f000 fdfb 	bl	8003c4a <__iar_annotation$$branch+0xfe>
 8003054:	1f92      	subs	r2, r2, #6
 8003056:	d101      	bne.n	800305c <__iar_annotation$$branch+0x4>

08003058 <__iar_annotation$$branch>:
 8003058:	f000 fdd2 	bl	8003c00 <__iar_annotation$$branch+0xb4>
 800305c:	1e52      	subs	r2, r2, #1
 800305e:	2a03      	cmp	r2, #3
 8003060:	d9d9      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003062:	3a11      	subs	r2, #17
 8003064:	d0d7      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003066:	1e52      	subs	r2, r2, #1
 8003068:	d100      	bne.n	800306c <__iar_annotation$$branch+0x14>
 800306a:	e150      	b.n	800330e <__iar_annotation$$branch+0x1e6>
 800306c:	3a0f      	subs	r2, #15
 800306e:	d101      	bne.n	8003074 <__iar_annotation$$branch+0x4>

08003070 <__iar_annotation$$branch>:
 8003070:	f000 fce9 	bl	8003a46 <__iar_annotation$$branch+0x91e>
 8003074:	1fd2      	subs	r2, r2, #7
 8003076:	2a01      	cmp	r2, #1
 8003078:	d9cd      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 800307a:	1f52      	subs	r2, r2, #5
 800307c:	2a01      	cmp	r2, #1
 800307e:	d9ca      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003080:	3a0d      	subs	r2, #13
 8003082:	d0c8      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003084:	3a12      	subs	r2, #18
 8003086:	d101      	bne.n	800308c <__iar_annotation$$branch+0x4>

08003088 <__iar_annotation$$branch>:
 8003088:	f000 fe18 	bl	8003cbc <__iar_annotation$$branch+0x62>
 800308c:	3a0c      	subs	r2, #12
 800308e:	d100      	bne.n	8003092 <__iar_annotation$$branch+0xa>
 8003090:	e09a      	b.n	80031c8 <__iar_annotation$$branch+0xa0>
 8003092:	1e52      	subs	r2, r2, #1
 8003094:	2a02      	cmp	r2, #2
 8003096:	d9be      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003098:	1ed2      	subs	r2, r2, #3
 800309a:	d100      	bne.n	800309e <__iar_annotation$$branch+0x16>
 800309c:	e213      	b.n	80034c6 <__iar_annotation$$branch+0x39e>
 800309e:	1e52      	subs	r2, r2, #1
 80030a0:	d100      	bne.n	80030a4 <__iar_annotation$$branch+0x1c>
 80030a2:	e229      	b.n	80034f8 <__iar_annotation$$branch+0x3d0>
 80030a4:	1e92      	subs	r2, r2, #2
 80030a6:	d0b6      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 80030a8:	1e52      	subs	r2, r2, #1
 80030aa:	d100      	bne.n	80030ae <__iar_annotation$$branch+0x26>
 80030ac:	e0e0      	b.n	8003270 <__iar_annotation$$branch+0x148>
 80030ae:	1e92      	subs	r2, r2, #2
 80030b0:	2a08      	cmp	r2, #8
 80030b2:	d801      	bhi.n	80030b8 <__iar_annotation$$branch+0x4>

080030b4 <__iar_annotation$$branch>:
 80030b4:	f000 fdd3 	bl	8003c5e <__iar_annotation$$branch+0x4>
 80030b8:	3a0a      	subs	r2, #10
 80030ba:	d101      	bne.n	80030c0 <__iar_annotation$$branch+0x4>

080030bc <__iar_annotation$$branch>:
 80030bc:	f000 fde2 	bl	8003c84 <__iar_annotation$$branch+0x2a>
 80030c0:	a903      	add	r1, sp, #12
 80030c2:	0020      	movs	r0, r4
 80030c4:	f001 fb32 	bl	800472c <PE_StateMachine_VDM>
 80030c8:	0005      	movs	r5, r0
 80030ca:	7c62      	ldrb	r2, [r4, #17]
 80030cc:	4e31      	ldr	r6, [pc, #196]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 80030ce:	7ca0      	ldrb	r0, [r4, #18]
 80030d0:	4290      	cmp	r0, r2
 80030d2:	d007      	beq.n	80030e4 <__iar_annotation$$branch+0x28>
 80030d4:	74a2      	strb	r2, [r4, #18]
 80030d6:	2000      	movs	r0, #0
 80030d8:	9000      	str	r0, [sp, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	7c21      	ldrb	r1, [r4, #16]
 80030de:	2004      	movs	r0, #4
 80030e0:	6837      	ldr	r7, [r6, #0]
 80030e2:	47b8      	blx	r7
 80030e4:	4668      	mov	r0, sp
 80030e6:	7b00      	ldrb	r0, [r0, #12]
 80030e8:	2814      	cmp	r0, #20
 80030ea:	d101      	bne.n	80030f0 <__iar_annotation$$branch+0x4>

080030ec <__iar_annotation$$branch>:
 80030ec:	f000 fdec 	bl	8003cc8 <__iar_annotation$$branch+0x6e>
 80030f0:	0020      	movs	r0, r4
 80030f2:	f7fd fdab 	bl	8000c4c <PE_Check_AMSConflict>
 80030f6:	2815      	cmp	r0, #21
 80030f8:	d109      	bne.n	800310e <__iar_annotation$$branch+0x22>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2814      	cmp	r0, #20
 8003100:	d005      	beq.n	800310e <__iar_annotation$$branch+0x22>
 8003102:	2014      	movs	r0, #20
 8003104:	4669      	mov	r1, sp
 8003106:	7308      	strb	r0, [r1, #12]
 8003108:	0020      	movs	r0, r4
 800310a:	f7fd fd58 	bl	8000bbe <PE_Clear_RxEvent>
 800310e:	7c62      	ldrb	r2, [r4, #17]
 8003110:	7ca0      	ldrb	r0, [r4, #18]
 8003112:	4290      	cmp	r0, r2
 8003114:	d007      	beq.n	8003126 <__iar_annotation$$branch+0x3a>
 8003116:	74a2      	strb	r2, [r4, #18]
 8003118:	2000      	movs	r0, #0
 800311a:	9000      	str	r0, [sp, #0]
 800311c:	2300      	movs	r3, #0
 800311e:	7c21      	ldrb	r1, [r4, #16]
 8003120:	2004      	movs	r0, #4
 8003122:	6835      	ldr	r5, [r6, #0]
 8003124:	47a8      	blx	r5
 8003126:	2500      	movs	r5, #0

08003128 <__iar_annotation$$branch>:
 8003128:	f000 fded 	bl	8003d06 <__iar_annotation$$branch+0xac>
 800312c:	2500      	movs	r5, #0
 800312e:	43ed      	mvns	r5, r5
 8003130:	0028      	movs	r0, r5
 8003132:	e6b2      	b.n	8002e9a <USBPD_PE_StateMachine_SRC+0xa6>
 8003134:	74a0      	strb	r0, [r4, #18]
 8003136:	2000      	movs	r0, #0
 8003138:	9000      	str	r0, [sp, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	22a6      	movs	r2, #166	@ 0xa6
 800313e:	7c21      	ldrb	r1, [r4, #16]
 8003140:	2004      	movs	r0, #4
 8003142:	4d14      	ldr	r5, [pc, #80]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8003144:	682d      	ldr	r5, [r5, #0]
 8003146:	47a8      	blx	r5
 8003148:	2502      	movs	r5, #2
 800314a:	2032      	movs	r0, #50	@ 0x32
 800314c:	5c20      	ldrb	r0, [r4, r0]
 800314e:	280f      	cmp	r0, #15
 8003150:	d001      	beq.n	8003156 <__iar_annotation$$branch+0x2e>
 8003152:	2814      	cmp	r0, #20
 8003154:	d11c      	bne.n	8003190 <__iar_annotation$$branch+0x68>
 8003156:	4668      	mov	r0, sp
 8003158:	7b00      	ldrb	r0, [r0, #12]
 800315a:	2814      	cmp	r0, #20
 800315c:	d005      	beq.n	800316a <__iar_annotation$$branch+0x42>
 800315e:	2014      	movs	r0, #20
 8003160:	4669      	mov	r1, sp
 8003162:	7308      	strb	r0, [r1, #12]
 8003164:	0020      	movs	r0, r4
 8003166:	f7fd fd2a 	bl	8000bbe <PE_Clear_RxEvent>
 800316a:	2032      	movs	r0, #50	@ 0x32
 800316c:	5c22      	ldrb	r2, [r4, r0]
 800316e:	7462      	strb	r2, [r4, #17]
 8003170:	2000      	movs	r0, #0
 8003172:	2332      	movs	r3, #50	@ 0x32
 8003174:	54e0      	strb	r0, [r4, r3]
 8003176:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8003178:	7ca0      	ldrb	r0, [r4, #18]
 800317a:	4290      	cmp	r0, r2
 800317c:	d008      	beq.n	8003190 <__iar_annotation$$branch+0x68>
 800317e:	74a2      	strb	r2, [r4, #18]
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	7c21      	ldrb	r1, [r4, #16]
 8003188:	2004      	movs	r0, #4
 800318a:	4e02      	ldr	r6, [pc, #8]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 800318c:	6836      	ldr	r6, [r6, #0]
 800318e:	47b0      	blx	r6
 8003190:	e6ab      	b.n	8002eea <USBPD_PE_StateMachine_SRC+0xf6>
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000
 8003198:	fffbffff 	.word	0xfffbffff
 800319c:	fffdffff 	.word	0xfffdffff
 80031a0:	00008011 	.word	0x00008011
 80031a4:	0000025e 	.word	0x0000025e
 80031a8:	0000801b 	.word	0x0000801b
 80031ac:	0000f01f 	.word	0x0000f01f
 80031b0:	6860      	ldr	r0, [r4, #4]
 80031b2:	6801      	ldr	r1, [r0, #0]
 80031b4:	2210      	movs	r2, #16
 80031b6:	4391      	bics	r1, r2
 80031b8:	6001      	str	r1, [r0, #0]
 80031ba:	215f      	movs	r1, #95	@ 0x5f
 80031bc:	7c20      	ldrb	r0, [r4, #16]
 80031be:	f7fd fa93 	bl	80006e8 <USBPD_PE_Notification>
 80031c2:	2500      	movs	r5, #0
 80031c4:	43ed      	mvns	r5, r5
 80031c6:	e780      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80031c8:	6860      	ldr	r0, [r4, #4]
 80031ca:	6801      	ldr	r1, [r0, #0]
 80031cc:	2210      	movs	r2, #16
 80031ce:	4391      	bics	r1, r2
 80031d0:	6001      	str	r1, [r0, #0]
 80031d2:	68a0      	ldr	r0, [r4, #8]
 80031d4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80031d6:	2900      	cmp	r1, #0
 80031d8:	d0f3      	beq.n	80031c2 <__iar_annotation$$branch+0x9a>
 80031da:	7c20      	ldrb	r0, [r4, #16]
 80031dc:	4788      	blx	r1
 80031de:	e7f0      	b.n	80031c2 <__iar_annotation$$branch+0x9a>
 80031e0:	2701      	movs	r7, #1
 80031e2:	6860      	ldr	r0, [r4, #4]
 80031e4:	6800      	ldr	r0, [r0, #0]
 80031e6:	0bc0      	lsrs	r0, r0, #15
 80031e8:	4038      	ands	r0, r7
 80031ea:	d002      	beq.n	80031f2 <__iar_annotation$$branch+0xca>
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	6801      	ldr	r1, [r0, #0]
 80031f0:	e000      	b.n	80031f4 <__iar_annotation$$branch+0xcc>
 80031f2:	2101      	movs	r1, #1
 80031f4:	4668      	mov	r0, sp
 80031f6:	7b40      	ldrb	r0, [r0, #13]
 80031f8:	f002 fc08 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80031fc:	6860      	ldr	r0, [r4, #4]
 80031fe:	6801      	ldr	r1, [r0, #0]
 8003200:	0b0a      	lsrs	r2, r1, #12
 8003202:	403a      	ands	r2, r7
 8003204:	d02f      	beq.n	8003266 <__iar_annotation$$branch+0x13e>
 8003206:	078a      	lsls	r2, r1, #30
 8003208:	0f92      	lsrs	r2, r2, #30
 800320a:	2a01      	cmp	r2, #1
 800320c:	d101      	bne.n	8003212 <__iar_annotation$$branch+0xea>
 800320e:	2200      	movs	r2, #0
 8003210:	e000      	b.n	8003214 <__iar_annotation$$branch+0xec>
 8003212:	2220      	movs	r2, #32
 8003214:	2320      	movs	r3, #32
 8003216:	4399      	bics	r1, r3
 8003218:	430a      	orrs	r2, r1
 800321a:	6002      	str	r2, [r0, #0]
 800321c:	2000      	movs	r0, #0
 800321e:	70f0      	strb	r0, [r6, #3]
 8003220:	2101      	movs	r1, #1
 8003222:	0020      	movs	r0, r4
 8003224:	f7fe f9f3 	bl	800160e <PE_SetPowerNegotiation>
 8003228:	6860      	ldr	r0, [r4, #4]
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	0901      	lsrs	r1, r0, #4
 800322e:	4039      	ands	r1, r7
 8003230:	d005      	beq.n	800323e <__iar_annotation$$branch+0x116>
 8003232:	48ae      	ldr	r0, [pc, #696]	@ (80034ec <__iar_annotation$$branch+0x3c4>)
 8003234:	83e0      	strh	r0, [r4, #30]
 8003236:	2514      	movs	r5, #20
 8003238:	2006      	movs	r0, #6
 800323a:	7460      	strb	r0, [r4, #17]
 800323c:	e745      	b.n	80030ca <__iar_annotation$$branch+0xe>
 800323e:	0bc0      	lsrs	r0, r0, #15
 8003240:	4007      	ands	r7, r0
 8003242:	d00a      	beq.n	800325a <__iar_annotation$$branch+0x132>
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	7800      	ldrb	r0, [r0, #0]
 8003248:	0780      	lsls	r0, r0, #30
 800324a:	d400      	bmi.n	800324e <__iar_annotation$$branch+0x126>
 800324c:	e087      	b.n	800335e <__iar_annotation$$branch+0x236>
 800324e:	7930      	ldrb	r0, [r6, #4]
 8003250:	2814      	cmp	r0, #20
 8003252:	d300      	bcc.n	8003256 <__iar_annotation$$branch+0x12e>
 8003254:	e083      	b.n	800335e <__iar_annotation$$branch+0x236>
 8003256:	68e1      	ldr	r1, [r4, #12]
 8003258:	2900      	cmp	r1, #0
 800325a:	d100      	bne.n	800325e <__iar_annotation$$branch+0x136>
 800325c:	e07f      	b.n	800335e <__iar_annotation$$branch+0x236>
 800325e:	1c40      	adds	r0, r0, #1
 8003260:	7130      	strb	r0, [r6, #4]
 8003262:	2005      	movs	r0, #5
 8003264:	e7e9      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003266:	2121      	movs	r1, #33	@ 0x21
 8003268:	7c20      	ldrb	r0, [r4, #16]
 800326a:	f7fd fa3d 	bl	80006e8 <USBPD_PE_Notification>
 800326e:	e04c      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 8003270:	a903      	add	r1, sp, #12
 8003272:	0020      	movs	r0, r4
 8003274:	f000 fd8c 	bl	8003d90 <PE_StateMachine_VDMCable>
 8003278:	e726      	b.n	80030c8 <__iar_annotation$$branch+0xc>
 800327a:	8be0      	ldrh	r0, [r4, #30]
 800327c:	03a9      	lsls	r1, r5, #14
 800327e:	4288      	cmp	r0, r1
 8003280:	d102      	bne.n	8003288 <__iar_annotation$$branch+0x160>
 8003282:	2007      	movs	r0, #7
 8003284:	7460      	strb	r0, [r4, #17]
 8003286:	2500      	movs	r5, #0
 8003288:	e71f      	b.n	80030ca <__iar_annotation$$branch+0xe>
 800328a:	6960      	ldr	r0, [r4, #20]
 800328c:	0740      	lsls	r0, r0, #29
 800328e:	0fc1      	lsrs	r1, r0, #31
 8003290:	0020      	movs	r0, r4
 8003292:	f000 fd45 	bl	8003d20 <PE_Send_SRCCapabilities>
 8003296:	2805      	cmp	r0, #5
 8003298:	d002      	beq.n	80032a0 <__iar_annotation$$branch+0x178>
 800329a:	2809      	cmp	r0, #9
 800329c:	d0f4      	beq.n	8003288 <__iar_annotation$$branch+0x160>
 800329e:	e011      	b.n	80032c4 <__iar_annotation$$branch+0x19c>
 80032a0:	2001      	movs	r0, #1
 80032a2:	7720      	strb	r0, [r4, #28]
 80032a4:	6960      	ldr	r0, [r4, #20]
 80032a6:	2104      	movs	r1, #4
 80032a8:	4301      	orrs	r1, r0
 80032aa:	6161      	str	r1, [r4, #20]
 80032ac:	2000      	movs	r0, #0
 80032ae:	70f0      	strb	r0, [r6, #3]
 80032b0:	70b0      	strb	r0, [r6, #2]
 80032b2:	83e7      	strh	r7, [r4, #30]
 80032b4:	251b      	movs	r5, #27
 80032b6:	2016      	movs	r0, #22
 80032b8:	7460      	strb	r0, [r4, #17]
 80032ba:	210f      	movs	r1, #15
 80032bc:	7c20      	ldrb	r0, [r4, #16]
 80032be:	f7fd fa13 	bl	80006e8 <USBPD_PE_Notification>
 80032c2:	e702      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80032c4:	6960      	ldr	r0, [r4, #20]
 80032c6:	0741      	lsls	r1, r0, #29
 80032c8:	0fc9      	lsrs	r1, r1, #31
 80032ca:	d10f      	bne.n	80032ec <__iar_annotation$$branch+0x1c4>
 80032cc:	78f0      	ldrb	r0, [r6, #3]
 80032ce:	2833      	cmp	r0, #51	@ 0x33
 80032d0:	d217      	bcs.n	8003302 <__iar_annotation$$branch+0x1da>
 80032d2:	4887      	ldr	r0, [pc, #540]	@ (80034f0 <__iar_annotation$$branch+0x3c8>)
 80032d4:	83e0      	strh	r0, [r4, #30]
 80032d6:	2596      	movs	r5, #150	@ 0x96
 80032d8:	2008      	movs	r0, #8
 80032da:	7460      	strb	r0, [r4, #17]
 80032dc:	4885      	ldr	r0, [pc, #532]	@ (80034f4 <__iar_annotation$$branch+0x3cc>)
 80032de:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80032e0:	4201      	tst	r1, r0
 80032e2:	d002      	beq.n	80032ea <__iar_annotation$$branch+0x1c2>
 80032e4:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80032e6:	0005      	movs	r5, r0
 80032e8:	400d      	ands	r5, r1
 80032ea:	e6ee      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80032ec:	6860      	ldr	r0, [r4, #4]
 80032ee:	7800      	ldrb	r0, [r0, #0]
 80032f0:	0780      	lsls	r0, r0, #30
 80032f2:	0f80      	lsrs	r0, r0, #30
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d102      	bne.n	80032fe <__iar_annotation$$branch+0x1d6>
 80032f8:	7c20      	ldrb	r0, [r4, #16]
 80032fa:	f002 fb68 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 80032fe:	2011      	movs	r0, #17
 8003300:	e7c0      	b.n	8003284 <__iar_annotation$$branch+0x15c>
 8003302:	2121      	movs	r1, #33	@ 0x21
 8003304:	7c20      	ldrb	r0, [r4, #16]
 8003306:	f7fd f9ef 	bl	80006e8 <USBPD_PE_Notification>
 800330a:	2000      	movs	r0, #0
 800330c:	e795      	b.n	800323a <__iar_annotation$$branch+0x112>
 800330e:	2100      	movs	r1, #0
 8003310:	0020      	movs	r0, r4
 8003312:	f000 fd05 	bl	8003d20 <PE_Send_SRCCapabilities>
 8003316:	2805      	cmp	r0, #5
 8003318:	d107      	bne.n	800332a <__iar_annotation$$branch+0x202>
 800331a:	2104      	movs	r1, #4
 800331c:	0020      	movs	r0, r4
 800331e:	f7fe f976 	bl	800160e <PE_SetPowerNegotiation>
 8003322:	2001      	movs	r0, #1
 8003324:	7720      	strb	r0, [r4, #28]
 8003326:	83e7      	strh	r7, [r4, #30]
 8003328:	e7c5      	b.n	80032b6 <__iar_annotation$$branch+0x18e>
 800332a:	2000      	movs	r0, #0
 800332c:	7720      	strb	r0, [r4, #28]
 800332e:	2011      	movs	r0, #17
 8003330:	e783      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003332:	03a8      	lsls	r0, r5, #14
 8003334:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003336:	4281      	cmp	r1, r0
 8003338:	d106      	bne.n	8003348 <__iar_annotation$$branch+0x220>
 800333a:	2100      	movs	r1, #0
 800333c:	8461      	strh	r1, [r4, #34]	@ 0x22
 800333e:	7931      	ldrb	r1, [r6, #4]
 8003340:	1c49      	adds	r1, r1, #1
 8003342:	7131      	strb	r1, [r6, #4]
 8003344:	2105      	movs	r1, #5
 8003346:	7461      	strb	r1, [r4, #17]
 8003348:	8be1      	ldrh	r1, [r4, #30]
 800334a:	4281      	cmp	r1, r0
 800334c:	d1cd      	bne.n	80032ea <__iar_annotation$$branch+0x1c2>
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	6840      	ldr	r0, [r0, #4]
 8003352:	0601      	lsls	r1, r0, #24
 8003354:	0fc9      	lsrs	r1, r1, #31
 8003356:	d002      	beq.n	800335e <__iar_annotation$$branch+0x236>
 8003358:	78f0      	ldrb	r0, [r6, #3]
 800335a:	1c40      	adds	r0, r0, #1
 800335c:	70f0      	strb	r0, [r6, #3]
 800335e:	2007      	movs	r0, #7
 8003360:	e76b      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003362:	4668      	mov	r0, sp
 8003364:	7b00      	ldrb	r0, [r0, #12]
 8003366:	2811      	cmp	r0, #17
 8003368:	d109      	bne.n	800337e <__iar_annotation$$branch+0x256>
 800336a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800336c:	0bc1      	lsrs	r1, r0, #15
 800336e:	d106      	bne.n	800337e <__iar_annotation$$branch+0x256>
 8003370:	0b01      	lsrs	r1, r0, #12
 8003372:	0749      	lsls	r1, r1, #29
 8003374:	d100      	bne.n	8003378 <__iar_annotation$$branch+0x250>
 8003376:	e111      	b.n	800359c <__iar_annotation$$branch+0x474>
 8003378:	06c0      	lsls	r0, r0, #27
 800337a:	0ec0      	lsrs	r0, r0, #27
 800337c:	2802      	cmp	r0, #2
 800337e:	d000      	beq.n	8003382 <__iar_annotation$$branch+0x25a>
 8003380:	e10c      	b.n	800359c <__iar_annotation$$branch+0x474>
 8003382:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003384:	7881      	ldrb	r1, [r0, #2]
 8003386:	78c2      	ldrb	r2, [r0, #3]
 8003388:	0212      	lsls	r2, r2, #8
 800338a:	1889      	adds	r1, r1, r2
 800338c:	7902      	ldrb	r2, [r0, #4]
 800338e:	0412      	lsls	r2, r2, #16
 8003390:	1889      	adds	r1, r1, r2
 8003392:	7940      	ldrb	r0, [r0, #5]
 8003394:	0600      	lsls	r0, r0, #24
 8003396:	1808      	adds	r0, r1, r0
 8003398:	9000      	str	r0, [sp, #0]
 800339a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800339c:	0600      	lsls	r0, r0, #24
 800339e:	0f81      	lsrs	r1, r0, #30
 80033a0:	7c20      	ldrb	r0, [r4, #16]
 80033a2:	f7fd fd5b 	bl	8000e5c <PE_ExtRevisionInteroperability>
 80033a6:	2304      	movs	r3, #4
 80033a8:	466a      	mov	r2, sp
 80033aa:	2106      	movs	r1, #6
 80033ac:	7c20      	ldrb	r0, [r4, #16]
 80033ae:	68a5      	ldr	r5, [r4, #8]
 80033b0:	69ad      	ldr	r5, [r5, #24]
 80033b2:	47a8      	blx	r5
 80033b4:	2009      	movs	r0, #9
 80033b6:	7460      	strb	r0, [r4, #17]
 80033b8:	2500      	movs	r5, #0
 80033ba:	e0e5      	b.n	8003588 <__iar_annotation$$branch+0x460>
 80033bc:	2702      	movs	r7, #2
 80033be:	2507      	movs	r5, #7
 80033c0:	a901      	add	r1, sp, #4
 80033c2:	7c20      	ldrb	r0, [r4, #16]
 80033c4:	68a2      	ldr	r2, [r4, #8]
 80033c6:	69d2      	ldr	r2, [r2, #28]
 80033c8:	4790      	blx	r2
 80033ca:	280a      	cmp	r0, #10
 80033cc:	d010      	beq.n	80033f0 <__iar_annotation$$branch+0x2c8>
 80033ce:	280b      	cmp	r0, #11
 80033d0:	d035      	beq.n	800343e <__iar_annotation$$branch+0x316>
 80033d2:	280d      	cmp	r0, #13
 80033d4:	6860      	ldr	r0, [r4, #4]
 80033d6:	6800      	ldr	r0, [r0, #0]
 80033d8:	d136      	bne.n	8003448 <__iar_annotation$$branch+0x320>
 80033da:	0a00      	lsrs	r0, r0, #8
 80033dc:	4005      	ands	r5, r0
 80033de:	2d03      	cmp	r5, #3
 80033e0:	d101      	bne.n	80033e6 <__iar_annotation$$branch+0x2be>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e000      	b.n	80033e8 <__iar_annotation$$branch+0x2c0>
 80033e6:	230e      	movs	r3, #14
 80033e8:	2000      	movs	r0, #0
 80033ea:	9000      	str	r0, [sp, #0]
 80033ec:	220c      	movs	r2, #12
 80033ee:	e035      	b.n	800345c <__iar_annotation$$branch+0x334>
 80033f0:	48a9      	ldr	r0, [pc, #676]	@ (8003698 <__iar_annotation$$branch+0x570>)
 80033f2:	83e0      	strh	r0, [r4, #30]
 80033f4:	271e      	movs	r7, #30
 80033f6:	6860      	ldr	r0, [r4, #4]
 80033f8:	6800      	ldr	r0, [r0, #0]
 80033fa:	0a00      	lsrs	r0, r0, #8
 80033fc:	4005      	ands	r5, r0
 80033fe:	2d01      	cmp	r5, #1
 8003400:	d00b      	beq.n	800341a <__iar_annotation$$branch+0x2f2>
 8003402:	9801      	ldr	r0, [sp, #4]
 8003404:	2803      	cmp	r0, #3
 8003406:	d108      	bne.n	800341a <__iar_annotation$$branch+0x2f2>
 8003408:	6960      	ldr	r0, [r4, #20]
 800340a:	06c0      	lsls	r0, r0, #27
 800340c:	0f80      	lsrs	r0, r0, #30
 800340e:	2803      	cmp	r0, #3
 8003410:	d103      	bne.n	800341a <__iar_annotation$$branch+0x2f2>
 8003412:	2080      	movs	r0, #128	@ 0x80
 8003414:	0200      	lsls	r0, r0, #8
 8003416:	83e0      	strh	r0, [r4, #30]
 8003418:	2700      	movs	r7, #0
 800341a:	2000      	movs	r0, #0
 800341c:	9000      	str	r0, [sp, #0]
 800341e:	230c      	movs	r3, #12
 8003420:	2203      	movs	r2, #3
 8003422:	2100      	movs	r1, #0
 8003424:	0020      	movs	r0, r4
 8003426:	f7fe f9a7 	bl	8001778 <PE_Send_CtrlMessage>
 800342a:	6960      	ldr	r0, [r4, #20]
 800342c:	2118      	movs	r1, #24
 800342e:	4388      	bics	r0, r1
 8003430:	9901      	ldr	r1, [sp, #4]
 8003432:	00c9      	lsls	r1, r1, #3
 8003434:	2218      	movs	r2, #24
 8003436:	400a      	ands	r2, r1
 8003438:	4302      	orrs	r2, r0
 800343a:	6162      	str	r2, [r4, #20]
 800343c:	e012      	b.n	8003464 <__iar_annotation$$branch+0x33c>
 800343e:	2000      	movs	r0, #0
 8003440:	9000      	str	r0, [sp, #0]
 8003442:	230c      	movs	r3, #12
 8003444:	2202      	movs	r2, #2
 8003446:	e009      	b.n	800345c <__iar_annotation$$branch+0x334>
 8003448:	0a00      	lsrs	r0, r0, #8
 800344a:	4005      	ands	r5, r0
 800344c:	2d03      	cmp	r5, #3
 800344e:	d101      	bne.n	8003454 <__iar_annotation$$branch+0x32c>
 8003450:	2303      	movs	r3, #3
 8003452:	e000      	b.n	8003456 <__iar_annotation$$branch+0x32e>
 8003454:	230e      	movs	r3, #14
 8003456:	2000      	movs	r0, #0
 8003458:	9000      	str	r0, [sp, #0]
 800345a:	2204      	movs	r2, #4
 800345c:	2100      	movs	r1, #0
 800345e:	0020      	movs	r0, r4
 8003460:	f7fe f98a 	bl	8001778 <PE_Send_CtrlMessage>
 8003464:	003d      	movs	r5, r7
 8003466:	e630      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003468:	8be0      	ldrh	r0, [r4, #30]
 800346a:	03a9      	lsls	r1, r5, #14
 800346c:	4288      	cmp	r0, r1
 800346e:	d1fa      	bne.n	8003466 <__iar_annotation$$branch+0x33e>
 8003470:	2104      	movs	r1, #4
 8003472:	0020      	movs	r0, r4
 8003474:	f7fe f8cb 	bl	800160e <PE_SetPowerNegotiation>
 8003478:	68a0      	ldr	r0, [r4, #8]
 800347a:	6801      	ldr	r1, [r0, #0]
 800347c:	2900      	cmp	r1, #0
 800347e:	d0f2      	beq.n	8003466 <__iar_annotation$$branch+0x33e>
 8003480:	7c20      	ldrb	r0, [r4, #16]
 8003482:	4788      	blx	r1
 8003484:	2800      	cmp	r0, #0
 8003486:	d000      	beq.n	800348a <__iar_annotation$$branch+0x362>
 8003488:	e2db      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 800348a:	200d      	movs	r0, #13
 800348c:	e6d5      	b.n	800323a <__iar_annotation$$branch+0x112>
 800348e:	2000      	movs	r0, #0
 8003490:	9000      	str	r0, [sp, #0]
 8003492:	2303      	movs	r3, #3
 8003494:	2206      	movs	r2, #6
 8003496:	2100      	movs	r1, #0
 8003498:	0020      	movs	r0, r4
 800349a:	f7fe f96d 	bl	8001778 <PE_Send_CtrlMessage>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d110      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034a2:	2103      	movs	r1, #3
 80034a4:	0020      	movs	r0, r4
 80034a6:	f7fe f8b2 	bl	800160e <PE_SetPowerNegotiation>
 80034aa:	2110      	movs	r1, #16
 80034ac:	7c20      	ldrb	r0, [r4, #16]
 80034ae:	f7fd f91b 	bl	80006e8 <USBPD_PE_Notification>
 80034b2:	2000      	movs	r0, #0
 80034b4:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80034b6:	6960      	ldr	r0, [r4, #20]
 80034b8:	06c0      	lsls	r0, r0, #27
 80034ba:	0f80      	lsrs	r0, r0, #30
 80034bc:	2803      	cmp	r0, #3
 80034be:	d101      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034c0:	4876      	ldr	r0, [pc, #472]	@ (800369c <__iar_annotation$$branch+0x574>)
 80034c2:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80034c4:	e601      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80034c6:	2001      	movs	r0, #1
 80034c8:	9000      	str	r0, [sp, #0]
 80034ca:	2397      	movs	r3, #151	@ 0x97
 80034cc:	2202      	movs	r2, #2
 80034ce:	2100      	movs	r1, #0
 80034d0:	0020      	movs	r0, r4
 80034d2:	f7fe f951 	bl	8001778 <PE_Send_CtrlMessage>
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d1f4      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034da:	7725      	strb	r5, [r4, #28]
 80034dc:	2129      	movs	r1, #41	@ 0x29
 80034de:	7c20      	ldrb	r0, [r4, #16]
 80034e0:	f7fd f902 	bl	80006e8 <USBPD_PE_Notification>
 80034e4:	486e      	ldr	r0, [pc, #440]	@ (80036a0 <__iar_annotation$$branch+0x578>)
 80034e6:	83e0      	strh	r0, [r4, #30]
 80034e8:	4d6e      	ldr	r5, [pc, #440]	@ (80036a4 <__iar_annotation$$branch+0x57c>)
 80034ea:	e5ee      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80034ec:	00008014 	.word	0x00008014
 80034f0:	00008096 	.word	0x00008096
 80034f4:	00007fff 	.word	0x00007fff
 80034f8:	8be0      	ldrh	r0, [r4, #30]
 80034fa:	03a9      	lsls	r1, r5, #14
 80034fc:	4288      	cmp	r0, r1
 80034fe:	d1f4      	bne.n	80034ea <__iar_annotation$$branch+0x3c2>
 8003500:	212a      	movs	r1, #42	@ 0x2a
 8003502:	7c20      	ldrb	r0, [r4, #16]
 8003504:	f7fd f8f0 	bl	80006e8 <USBPD_PE_Notification>
 8003508:	2000      	movs	r0, #0
 800350a:	9000      	str	r0, [sp, #0]
 800350c:	2303      	movs	r3, #3
 800350e:	2206      	movs	r2, #6
 8003510:	2100      	movs	r1, #0
 8003512:	0020      	movs	r0, r4
 8003514:	f7fe f930 	bl	8001778 <PE_Send_CtrlMessage>
 8003518:	2800      	cmp	r0, #0
 800351a:	d109      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 800351c:	212e      	movs	r1, #46	@ 0x2e
 800351e:	e6cd      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003520:	2000      	movs	r0, #0
 8003522:	9000      	str	r0, [sp, #0]
 8003524:	2307      	movs	r3, #7
 8003526:	2203      	movs	r2, #3
 8003528:	2100      	movs	r1, #0
 800352a:	0020      	movs	r0, r4
 800352c:	f7fe f924 	bl	8001778 <PE_Send_CtrlMessage>
 8003530:	e5cb      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003532:	2000      	movs	r0, #0
 8003534:	9000      	str	r0, [sp, #0]
 8003536:	2312      	movs	r3, #18
 8003538:	220d      	movs	r2, #13
 800353a:	2031      	movs	r0, #49	@ 0x31
 800353c:	5c21      	ldrb	r1, [r4, r0]
 800353e:	0020      	movs	r0, r4
 8003540:	f7fe f91a 	bl	8001778 <PE_Send_CtrlMessage>
 8003544:	2800      	cmp	r0, #0
 8003546:	d1f3      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 8003548:	83e7      	strh	r7, [r4, #30]
 800354a:	251b      	movs	r5, #27
 800354c:	2130      	movs	r1, #48	@ 0x30
 800354e:	e6b5      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003550:	4668      	mov	r0, sp
 8003552:	7b00      	ldrb	r0, [r0, #12]
 8003554:	2814      	cmp	r0, #20
 8003556:	d021      	beq.n	800359c <__iar_annotation$$branch+0x474>
 8003558:	2030      	movs	r0, #48	@ 0x30
 800355a:	5c20      	ldrb	r0, [r4, r0]
 800355c:	2231      	movs	r2, #49	@ 0x31
 800355e:	5ca2      	ldrb	r2, [r4, r2]
 8003560:	4290      	cmp	r0, r2
 8003562:	d11b      	bne.n	800359c <__iar_annotation$$branch+0x474>
 8003564:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003566:	4001      	ands	r1, r0
 8003568:	2903      	cmp	r1, #3
 800356a:	d117      	bne.n	800359c <__iar_annotation$$branch+0x474>
 800356c:	2131      	movs	r1, #49	@ 0x31
 800356e:	7c20      	ldrb	r0, [r4, #16]
 8003570:	f7fd f8ba 	bl	80006e8 <USBPD_PE_Notification>
 8003574:	2030      	movs	r0, #48	@ 0x30
 8003576:	5c20      	ldrb	r0, [r4, r0]
 8003578:	2800      	cmp	r0, #0
 800357a:	d102      	bne.n	8003582 <__iar_annotation$$branch+0x45a>
 800357c:	2007      	movs	r0, #7
 800357e:	7460      	strb	r0, [r4, #17]
 8003580:	e002      	b.n	8003588 <__iar_annotation$$branch+0x460>
 8003582:	2003      	movs	r0, #3
 8003584:	7460      	strb	r0, [r4, #17]
 8003586:	2500      	movs	r5, #0
 8003588:	4668      	mov	r0, sp
 800358a:	7b00      	ldrb	r0, [r0, #12]
 800358c:	2814      	cmp	r0, #20
 800358e:	d005      	beq.n	800359c <__iar_annotation$$branch+0x474>
 8003590:	2014      	movs	r0, #20
 8003592:	4669      	mov	r1, sp
 8003594:	7308      	strb	r0, [r1, #12]
 8003596:	0020      	movs	r0, r4
 8003598:	f7fd fb11 	bl	8000bbe <PE_Clear_RxEvent>
 800359c:	8be0      	ldrh	r0, [r4, #30]
 800359e:	2180      	movs	r1, #128	@ 0x80
 80035a0:	0209      	lsls	r1, r1, #8
 80035a2:	4288      	cmp	r0, r1
 80035a4:	d1c4      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 80035a6:	e24c      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 80035a8:	6860      	ldr	r0, [r4, #4]
 80035aa:	7800      	ldrb	r0, [r0, #0]
 80035ac:	0780      	lsls	r0, r0, #30
 80035ae:	0f80      	lsrs	r0, r0, #30
 80035b0:	2802      	cmp	r0, #2
 80035b2:	d102      	bne.n	80035ba <__iar_annotation$$branch+0x492>
 80035b4:	7c20      	ldrb	r0, [r4, #16]
 80035b6:	f002 fa0a 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 80035ba:	2105      	movs	r1, #5
 80035bc:	0020      	movs	r0, r4
 80035be:	f7fd fa99 	bl	8000af4 <PE_Send_RESET>
 80035c2:	6860      	ldr	r0, [r4, #4]
 80035c4:	6801      	ldr	r1, [r0, #0]
 80035c6:	2210      	movs	r2, #16
 80035c8:	4391      	bics	r1, r2
 80035ca:	6001      	str	r1, [r0, #0]
 80035cc:	78b0      	ldrb	r0, [r6, #2]
 80035ce:	1c40      	adds	r0, r0, #1
 80035d0:	70b0      	strb	r0, [r6, #2]
 80035d2:	6961      	ldr	r1, [r4, #20]
 80035d4:	4834      	ldr	r0, [pc, #208]	@ (80036a8 <__iar_annotation$$branch+0x580>)
 80035d6:	4008      	ands	r0, r1
 80035d8:	6160      	str	r0, [r4, #20]
 80035da:	2100      	movs	r1, #0
 80035dc:	2232      	movs	r2, #50	@ 0x32
 80035de:	54a1      	strb	r1, [r4, r2]
 80035e0:	4932      	ldr	r1, [pc, #200]	@ (80036ac <__iar_annotation$$branch+0x584>)
 80035e2:	4001      	ands	r1, r0
 80035e4:	6161      	str	r1, [r4, #20]
 80035e6:	2202      	movs	r2, #2
 80035e8:	2101      	movs	r1, #1
 80035ea:	0020      	movs	r0, r4
 80035ec:	f7fe f806 	bl	80015fc <PE_CallHardResetCallback>
 80035f0:	2169      	movs	r1, #105	@ 0x69
 80035f2:	4668      	mov	r0, sp
 80035f4:	7b40      	ldrb	r0, [r0, #13]
 80035f6:	f7fd f877 	bl	80006e8 <USBPD_PE_Notification>
 80035fa:	83e7      	strh	r7, [r4, #30]
 80035fc:	251b      	movs	r5, #27
 80035fe:	2015      	movs	r0, #21
 8003600:	e61b      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003602:	6860      	ldr	r0, [r4, #4]
 8003604:	7800      	ldrb	r0, [r0, #0]
 8003606:	0780      	lsls	r0, r0, #30
 8003608:	0f80      	lsrs	r0, r0, #30
 800360a:	2802      	cmp	r0, #2
 800360c:	d1f0      	bne.n	80035f0 <__iar_annotation$$branch+0x4c8>
 800360e:	7c20      	ldrb	r0, [r4, #16]
 8003610:	f002 f9dd 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003614:	e7ec      	b.n	80035f0 <__iar_annotation$$branch+0x4c8>
 8003616:	8be0      	ldrh	r0, [r4, #30]
 8003618:	03a9      	lsls	r1, r5, #14
 800361a:	4288      	cmp	r0, r1
 800361c:	d11a      	bne.n	8003654 <__iar_annotation$$branch+0x52c>
 800361e:	6960      	ldr	r0, [r4, #20]
 8003620:	78b1      	ldrb	r1, [r6, #2]
 8003622:	2903      	cmp	r1, #3
 8003624:	d303      	bcc.n	800362e <__iar_annotation$$branch+0x506>
 8003626:	0741      	lsls	r1, r0, #29
 8003628:	0fc9      	lsrs	r1, r1, #31
 800362a:	d130      	bne.n	800368e <__iar_annotation$$branch+0x566>
 800362c:	e66d      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 800362e:	4920      	ldr	r1, [pc, #128]	@ (80036b0 <__iar_annotation$$branch+0x588>)
 8003630:	83e1      	strh	r1, [r4, #30]
 8003632:	2117      	movs	r1, #23
 8003634:	7461      	strb	r1, [r4, #17]
 8003636:	2500      	movs	r5, #0
 8003638:	0540      	lsls	r0, r0, #21
 800363a:	0f80      	lsrs	r0, r0, #30
 800363c:	1e42      	subs	r2, r0, #1
 800363e:	4192      	sbcs	r2, r2
 8003640:	0fd2      	lsrs	r2, r2, #31
 8003642:	2101      	movs	r1, #1
 8003644:	0020      	movs	r0, r4
 8003646:	f7fd ffd9 	bl	80015fc <PE_CallHardResetCallback>
 800364a:	2203      	movs	r2, #3
 800364c:	2101      	movs	r1, #1
 800364e:	0020      	movs	r0, r4
 8003650:	f7fd ffd4 	bl	80015fc <PE_CallHardResetCallback>
 8003654:	e539      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003656:	2100      	movs	r1, #0
 8003658:	4668      	mov	r0, sp
 800365a:	7b40      	ldrb	r0, [r0, #13]
 800365c:	68a2      	ldr	r2, [r4, #8]
 800365e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003660:	4790      	blx	r2
 8003662:	2801      	cmp	r0, #1
 8003664:	d105      	bne.n	8003672 <__iar_annotation$$branch+0x54a>
 8003666:	4813      	ldr	r0, [pc, #76]	@ (80036b4 <__iar_annotation$$branch+0x58c>)
 8003668:	83e0      	strh	r0, [r4, #30]
 800366a:	25c8      	movs	r5, #200	@ 0xc8
 800366c:	00ad      	lsls	r5, r5, #2
 800366e:	2013      	movs	r0, #19
 8003670:	7460      	strb	r0, [r4, #17]
 8003672:	8be0      	ldrh	r0, [r4, #30]
 8003674:	2180      	movs	r1, #128	@ 0x80
 8003676:	0209      	lsls	r1, r1, #8
 8003678:	4288      	cmp	r0, r1
 800367a:	d1eb      	bne.n	8003654 <__iar_annotation$$branch+0x52c>
 800367c:	2206      	movs	r2, #6
 800367e:	2101      	movs	r1, #1
 8003680:	0020      	movs	r0, r4
 8003682:	f7fd ffbb 	bl	80015fc <PE_CallHardResetCallback>
 8003686:	6960      	ldr	r0, [r4, #20]
 8003688:	0741      	lsls	r1, r0, #29
 800368a:	0fc9      	lsrs	r1, r1, #31
 800368c:	d003      	beq.n	8003696 <__iar_annotation$$branch+0x56e>
 800368e:	68a0      	ldr	r0, [r4, #8]
 8003690:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003692:	2800      	cmp	r0, #0
 8003694:	d137      	bne.n	8003706 <__iar_annotation$$branch+0x5de>
 8003696:	e638      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 8003698:	0000801e 	.word	0x0000801e
 800369c:	0000b6b0 	.word	0x0000b6b0
 80036a0:	00008226 	.word	0x00008226
 80036a4:	00000226 	.word	0x00000226
 80036a8:	fffff9ff 	.word	0xfffff9ff
 80036ac:	fffffe3f 	.word	0xfffffe3f
 80036b0:	0000828a 	.word	0x0000828a
 80036b4:	00008320 	.word	0x00008320
 80036b8:	8be0      	ldrh	r0, [r4, #30]
 80036ba:	03a9      	lsls	r1, r5, #14
 80036bc:	4288      	cmp	r0, r1
 80036be:	d126      	bne.n	800370e <__iar_annotation$$branch+0x5e6>
 80036c0:	2204      	movs	r2, #4
 80036c2:	2101      	movs	r1, #1
 80036c4:	0020      	movs	r0, r4
 80036c6:	f7fd ff99 	bl	80015fc <PE_CallHardResetCallback>
 80036ca:	2101      	movs	r1, #1
 80036cc:	4668      	mov	r0, sp
 80036ce:	7b40      	ldrb	r0, [r0, #13]
 80036d0:	68a2      	ldr	r2, [r4, #8]
 80036d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036d4:	4790      	blx	r2
 80036d6:	2801      	cmp	r0, #1
 80036d8:	d10d      	bne.n	80036f6 <__iar_annotation$$branch+0x5ce>
 80036da:	0020      	movs	r0, r4
 80036dc:	f7fd fb1d 	bl	8000d1a <PE_Reset_HardReset>
 80036e0:	2168      	movs	r1, #104	@ 0x68
 80036e2:	4668      	mov	r0, sp
 80036e4:	7b40      	ldrb	r0, [r0, #13]
 80036e6:	f7fc ffff 	bl	80006e8 <USBPD_PE_Notification>
 80036ea:	2205      	movs	r2, #5
 80036ec:	2101      	movs	r1, #1
 80036ee:	0020      	movs	r0, r4
 80036f0:	f7fd ff84 	bl	80015fc <PE_CallHardResetCallback>
 80036f4:	e633      	b.n	800335e <__iar_annotation$$branch+0x236>
 80036f6:	2206      	movs	r2, #6
 80036f8:	2101      	movs	r1, #1
 80036fa:	0020      	movs	r0, r4
 80036fc:	f7fd ff7e 	bl	80015fc <PE_CallHardResetCallback>
 8003700:	68a0      	ldr	r0, [r4, #8]
 8003702:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003704:	2800      	cmp	r0, #0
 8003706:	d000      	beq.n	800370a <__iar_annotation$$branch+0x5e2>
 8003708:	e2d6      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 800370a:	2500      	movs	r5, #0
 800370c:	7465      	strb	r5, [r4, #17]
 800370e:	e4dc      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003710:	2001      	movs	r0, #1
 8003712:	9000      	str	r0, [sp, #0]
 8003714:	231b      	movs	r3, #27
 8003716:	2207      	movs	r2, #7
 8003718:	2100      	movs	r1, #0
 800371a:	0020      	movs	r0, r4
 800371c:	f7fe f82c 	bl	8001778 <PE_Send_CtrlMessage>
 8003720:	2800      	cmp	r0, #0
 8003722:	d1f4      	bne.n	800370e <__iar_annotation$$branch+0x5e6>
 8003724:	2006      	movs	r0, #6
 8003726:	7720      	strb	r0, [r4, #28]
 8003728:	83e7      	strh	r7, [r4, #30]
 800372a:	251b      	movs	r5, #27
 800372c:	210b      	movs	r1, #11
 800372e:	e5c5      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003730:	4668      	mov	r0, sp
 8003732:	7b00      	ldrb	r0, [r0, #12]
 8003734:	2811      	cmp	r0, #17
 8003736:	d13e      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003738:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800373a:	0bc1      	lsrs	r1, r0, #15
 800373c:	d11f      	bne.n	800377e <__iar_annotation$$branch+0x656>
 800373e:	0441      	lsls	r1, r0, #17
 8003740:	0f49      	lsrs	r1, r1, #29
 8003742:	d01c      	beq.n	800377e <__iar_annotation$$branch+0x656>
 8003744:	06c0      	lsls	r0, r0, #27
 8003746:	0ec0      	lsrs	r0, r0, #27
 8003748:	2801      	cmp	r0, #1
 800374a:	d118      	bne.n	800377e <__iar_annotation$$branch+0x656>
 800374c:	008b      	lsls	r3, r1, #2
 800374e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003750:	1c82      	adds	r2, r0, #2
 8003752:	2104      	movs	r1, #4
 8003754:	7c20      	ldrb	r0, [r4, #16]
 8003756:	68a5      	ldr	r5, [r4, #8]
 8003758:	69ad      	ldr	r5, [r5, #24]
 800375a:	47a8      	blx	r5
 800375c:	2003      	movs	r0, #3
 800375e:	7460      	strb	r0, [r4, #17]
 8003760:	2500      	movs	r5, #0
 8003762:	4668      	mov	r0, sp
 8003764:	7b00      	ldrb	r0, [r0, #12]
 8003766:	2814      	cmp	r0, #20
 8003768:	d005      	beq.n	8003776 <__iar_annotation$$branch+0x64e>
 800376a:	2014      	movs	r0, #20
 800376c:	4669      	mov	r1, sp
 800376e:	7308      	strb	r0, [r1, #12]
 8003770:	0020      	movs	r0, r4
 8003772:	f7fd fa24 	bl	8000bbe <PE_Clear_RxEvent>
 8003776:	210d      	movs	r1, #13
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f7fc ffb5 	bl	80006e8 <USBPD_PE_Notification>
 800377e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003780:	21f0      	movs	r1, #240	@ 0xf0
 8003782:	0209      	lsls	r1, r1, #8
 8003784:	4001      	ands	r1, r0
 8003786:	d116      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003788:	06c0      	lsls	r0, r0, #27
 800378a:	0ec0      	lsrs	r0, r0, #27
 800378c:	2804      	cmp	r0, #4
 800378e:	d001      	beq.n	8003794 <__iar_annotation$$branch+0x66c>
 8003790:	2810      	cmp	r0, #16
 8003792:	d110      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003794:	2003      	movs	r0, #3
 8003796:	7460      	strb	r0, [r4, #17]
 8003798:	2500      	movs	r5, #0
 800379a:	4668      	mov	r0, sp
 800379c:	7b00      	ldrb	r0, [r0, #12]
 800379e:	2814      	cmp	r0, #20
 80037a0:	d005      	beq.n	80037ae <__iar_annotation$$branch+0x686>
 80037a2:	2014      	movs	r0, #20
 80037a4:	4669      	mov	r1, sp
 80037a6:	7308      	strb	r0, [r1, #12]
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fd fa08 	bl	8000bbe <PE_Clear_RxEvent>
 80037ae:	210e      	movs	r1, #14
 80037b0:	7c20      	ldrb	r0, [r4, #16]
 80037b2:	f7fc ff99 	bl	80006e8 <USBPD_PE_Notification>
 80037b6:	8be0      	ldrh	r0, [r4, #30]
 80037b8:	2180      	movs	r1, #128	@ 0x80
 80037ba:	0209      	lsls	r1, r1, #8
 80037bc:	4288      	cmp	r0, r1
 80037be:	d11f      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 80037c0:	2003      	movs	r0, #3
 80037c2:	e55f      	b.n	8003284 <__iar_annotation$$branch+0x15c>
 80037c4:	68a0      	ldr	r0, [r4, #8]
 80037c6:	6881      	ldr	r1, [r0, #8]
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d01f      	beq.n	800380c <__iar_annotation$$branch+0x6e4>
 80037cc:	7c20      	ldrb	r0, [r4, #16]
 80037ce:	4788      	blx	r1
 80037d0:	280a      	cmp	r0, #10
 80037d2:	d002      	beq.n	80037da <__iar_annotation$$branch+0x6b2>
 80037d4:	280d      	cmp	r0, #13
 80037d6:	d014      	beq.n	8003802 <__iar_annotation$$branch+0x6da>
 80037d8:	e018      	b.n	800380c <__iar_annotation$$branch+0x6e4>
 80037da:	1cf8      	adds	r0, r7, #3
 80037dc:	83e0      	strh	r0, [r4, #30]
 80037de:	251e      	movs	r5, #30
 80037e0:	2000      	movs	r0, #0
 80037e2:	9000      	str	r0, [sp, #0]
 80037e4:	2324      	movs	r3, #36	@ 0x24
 80037e6:	2203      	movs	r2, #3
 80037e8:	2100      	movs	r1, #0
 80037ea:	0020      	movs	r0, r4
 80037ec:	f7fd ffc4 	bl	8001778 <PE_Send_CtrlMessage>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d105      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 80037f4:	2201      	movs	r2, #1
 80037f6:	2101      	movs	r1, #1
 80037f8:	7c20      	ldrb	r0, [r4, #16]
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	4798      	blx	r3
 8003800:	e463      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003802:	2000      	movs	r0, #0
 8003804:	9000      	str	r0, [sp, #0]
 8003806:	2303      	movs	r3, #3
 8003808:	220c      	movs	r2, #12
 800380a:	e68d      	b.n	8003528 <__iar_annotation$$branch+0x400>
 800380c:	2000      	movs	r0, #0
 800380e:	9000      	str	r0, [sp, #0]
 8003810:	2303      	movs	r3, #3
 8003812:	2204      	movs	r2, #4
 8003814:	e688      	b.n	8003528 <__iar_annotation$$branch+0x400>
 8003816:	8be0      	ldrh	r0, [r4, #30]
 8003818:	03a9      	lsls	r1, r5, #14
 800381a:	4288      	cmp	r0, r1
 800381c:	d1f0      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 800381e:	2104      	movs	r1, #4
 8003820:	0020      	movs	r0, r4
 8003822:	f7fd fef4 	bl	800160e <PE_SetPowerNegotiation>
 8003826:	6860      	ldr	r0, [r4, #4]
 8003828:	6801      	ldr	r1, [r0, #0]
 800382a:	2210      	movs	r2, #16
 800382c:	430a      	orrs	r2, r1
 800382e:	6002      	str	r2, [r0, #0]
 8003830:	2206      	movs	r2, #6
 8003832:	2101      	movs	r1, #1
 8003834:	7c20      	ldrb	r0, [r4, #16]
 8003836:	68a3      	ldr	r3, [r4, #8]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	4798      	blx	r3
 800383c:	2207      	movs	r2, #7
 800383e:	2101      	movs	r1, #1
 8003840:	7c20      	ldrb	r0, [r4, #16]
 8003842:	68a3      	ldr	r3, [r4, #8]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	4798      	blx	r3
 8003848:	2100      	movs	r1, #0
 800384a:	7c20      	ldrb	r0, [r4, #16]
 800384c:	f002 f889 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 8003850:	2000      	movs	r0, #0
 8003852:	9000      	str	r0, [sp, #0]
 8003854:	2325      	movs	r3, #37	@ 0x25
 8003856:	2206      	movs	r2, #6
 8003858:	2100      	movs	r1, #0
 800385a:	0020      	movs	r0, r4
 800385c:	f7fd ff8c 	bl	8001778 <PE_Send_CtrlMessage>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1cd      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003864:	e0c9      	b.n	80039fa <__iar_annotation$$branch+0x8d2>
 8003866:	4668      	mov	r0, sp
 8003868:	7b00      	ldrb	r0, [r0, #12]
 800386a:	2811      	cmp	r0, #17
 800386c:	d10b      	bne.n	8003886 <__iar_annotation$$branch+0x75e>
 800386e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003870:	4001      	ands	r1, r0
 8003872:	2906      	cmp	r1, #6
 8003874:	d107      	bne.n	8003886 <__iar_annotation$$branch+0x75e>
 8003876:	2014      	movs	r0, #20
 8003878:	4669      	mov	r1, sp
 800387a:	7308      	strb	r0, [r1, #12]
 800387c:	0020      	movs	r0, r4
 800387e:	f7fd f99e 	bl	8000bbe <PE_Clear_RxEvent>
 8003882:	2026      	movs	r0, #38	@ 0x26
 8003884:	7460      	strb	r0, [r4, #17]
 8003886:	8be0      	ldrh	r0, [r4, #30]
 8003888:	03a9      	lsls	r1, r5, #14
 800388a:	4288      	cmp	r0, r1
 800388c:	d1b8      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 800388e:	68a3      	ldr	r3, [r4, #8]
 8003890:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003892:	2800      	cmp	r0, #0
 8003894:	d000      	beq.n	8003898 <__iar_annotation$$branch+0x770>
 8003896:	e20f      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 8003898:	220a      	movs	r2, #10
 800389a:	2101      	movs	r1, #1
 800389c:	7c20      	ldrb	r0, [r4, #16]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	4798      	blx	r3
 80038a2:	e0ce      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 80038a4:	2100      	movs	r1, #0
 80038a6:	0020      	movs	r0, r4
 80038a8:	f7fd f944 	bl	8000b34 <PE_ChangePowerRole>
 80038ac:	220d      	movs	r2, #13
 80038ae:	2100      	movs	r1, #0
 80038b0:	7c20      	ldrb	r0, [r4, #16]
 80038b2:	68a3      	ldr	r3, [r4, #8]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	4798      	blx	r3
 80038b8:	2114      	movs	r1, #20
 80038ba:	7c20      	ldrb	r0, [r4, #16]
 80038bc:	f7fc ff14 	bl	80006e8 <USBPD_PE_Notification>
 80038c0:	220e      	movs	r2, #14
 80038c2:	2100      	movs	r1, #0
 80038c4:	7c20      	ldrb	r0, [r4, #16]
 80038c6:	68a3      	ldr	r3, [r4, #8]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	4798      	blx	r3
 80038cc:	6860      	ldr	r0, [r4, #4]
 80038ce:	7800      	ldrb	r0, [r0, #0]
 80038d0:	0780      	lsls	r0, r0, #30
 80038d2:	0f80      	lsrs	r0, r0, #30
 80038d4:	2801      	cmp	r0, #1
 80038d6:	d104      	bne.n	80038e2 <__iar_annotation$$branch+0x7ba>
 80038d8:	2101      	movs	r1, #1
 80038da:	4668      	mov	r0, sp
 80038dc:	7b40      	ldrb	r0, [r0, #13]
 80038de:	f002 f895 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80038e2:	0020      	movs	r0, r4
 80038e4:	f7fd fa90 	bl	8000e08 <PE_Reset_StateMachine>
 80038e8:	e4cd      	b.n	8003286 <__iar_annotation$$branch+0x15e>
 80038ea:	2001      	movs	r0, #1
 80038ec:	9000      	str	r0, [sp, #0]
 80038ee:	231f      	movs	r3, #31
 80038f0:	220a      	movs	r2, #10
 80038f2:	2100      	movs	r1, #0
 80038f4:	0020      	movs	r0, r4
 80038f6:	f7fd ff3f 	bl	8001778 <PE_Send_CtrlMessage>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d1c6      	bne.n	800388c <__iar_annotation$$branch+0x764>
 80038fe:	2008      	movs	r0, #8
 8003900:	7720      	strb	r0, [r4, #28]
 8003902:	83e7      	strh	r7, [r4, #30]
 8003904:	251b      	movs	r5, #27
 8003906:	2202      	movs	r2, #2
 8003908:	2101      	movs	r1, #1
 800390a:	7c20      	ldrb	r0, [r4, #16]
 800390c:	68a3      	ldr	r3, [r4, #8]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	4798      	blx	r3
 8003912:	2139      	movs	r1, #57	@ 0x39
 8003914:	e4d2      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003916:	4668      	mov	r0, sp
 8003918:	7b00      	ldrb	r0, [r0, #12]
 800391a:	2811      	cmp	r0, #17
 800391c:	d145      	bne.n	80039aa <__iar_annotation$$branch+0x882>
 800391e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003920:	391f      	subs	r1, #31
 8003922:	4001      	ands	r1, r0
 8003924:	d141      	bne.n	80039aa <__iar_annotation$$branch+0x882>
 8003926:	06c0      	lsls	r0, r0, #27
 8003928:	0ec0      	lsrs	r0, r0, #27
 800392a:	2803      	cmp	r0, #3
 800392c:	d006      	beq.n	800393c <__iar_annotation$$branch+0x814>
 800392e:	2804      	cmp	r0, #4
 8003930:	d012      	beq.n	8003958 <__iar_annotation$$branch+0x830>
 8003932:	280c      	cmp	r0, #12
 8003934:	d008      	beq.n	8003948 <__iar_annotation$$branch+0x820>
 8003936:	2810      	cmp	r0, #16
 8003938:	d020      	beq.n	800397c <__iar_annotation$$branch+0x854>
 800393a:	e036      	b.n	80039aa <__iar_annotation$$branch+0x882>
 800393c:	213a      	movs	r1, #58	@ 0x3a
 800393e:	7c20      	ldrb	r0, [r4, #16]
 8003940:	f7fc fed2 	bl	80006e8 <USBPD_PE_Notification>
 8003944:	2020      	movs	r0, #32
 8003946:	e012      	b.n	800396e <__iar_annotation$$branch+0x846>
 8003948:	2205      	movs	r2, #5
 800394a:	2101      	movs	r1, #1
 800394c:	7c20      	ldrb	r0, [r4, #16]
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	4798      	blx	r3
 8003954:	213b      	movs	r1, #59	@ 0x3b
 8003956:	e006      	b.n	8003966 <__iar_annotation$$branch+0x83e>
 8003958:	2204      	movs	r2, #4
 800395a:	2101      	movs	r1, #1
 800395c:	7c20      	ldrb	r0, [r4, #16]
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	4798      	blx	r3
 8003964:	2116      	movs	r1, #22
 8003966:	7c20      	ldrb	r0, [r4, #16]
 8003968:	f7fc febe 	bl	80006e8 <USBPD_PE_Notification>
 800396c:	2003      	movs	r0, #3
 800396e:	7460      	strb	r0, [r4, #17]
 8003970:	2500      	movs	r5, #0
 8003972:	4668      	mov	r0, sp
 8003974:	7b00      	ldrb	r0, [r0, #12]
 8003976:	2814      	cmp	r0, #20
 8003978:	d111      	bne.n	800399e <__iar_annotation$$branch+0x876>
 800397a:	e016      	b.n	80039aa <__iar_annotation$$branch+0x882>
 800397c:	2204      	movs	r2, #4
 800397e:	2101      	movs	r1, #1
 8003980:	7c20      	ldrb	r0, [r4, #16]
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	4798      	blx	r3
 8003988:	2117      	movs	r1, #23
 800398a:	7c20      	ldrb	r0, [r4, #16]
 800398c:	f7fc feac 	bl	80006e8 <USBPD_PE_Notification>
 8003990:	2003      	movs	r0, #3
 8003992:	7460      	strb	r0, [r4, #17]
 8003994:	2500      	movs	r5, #0
 8003996:	4668      	mov	r0, sp
 8003998:	7b00      	ldrb	r0, [r0, #12]
 800399a:	2814      	cmp	r0, #20
 800399c:	d005      	beq.n	80039aa <__iar_annotation$$branch+0x882>
 800399e:	2014      	movs	r0, #20
 80039a0:	4669      	mov	r1, sp
 80039a2:	7308      	strb	r0, [r1, #12]
 80039a4:	0020      	movs	r0, r4
 80039a6:	f7fd f90a 	bl	8000bbe <PE_Clear_RxEvent>
 80039aa:	8be0      	ldrh	r0, [r4, #30]
 80039ac:	2180      	movs	r1, #128	@ 0x80
 80039ae:	0209      	lsls	r1, r1, #8
 80039b0:	4288      	cmp	r0, r1
 80039b2:	d12c      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 80039b4:	e704      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 80039b6:	6860      	ldr	r0, [r4, #4]
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	430a      	orrs	r2, r1
 80039be:	6002      	str	r2, [r0, #0]
 80039c0:	7f20      	ldrb	r0, [r4, #28]
 80039c2:	2809      	cmp	r0, #9
 80039c4:	d005      	beq.n	80039d2 <__iar_annotation$$branch+0x8aa>
 80039c6:	2206      	movs	r2, #6
 80039c8:	2101      	movs	r1, #1
 80039ca:	7c20      	ldrb	r0, [r4, #16]
 80039cc:	68a3      	ldr	r3, [r4, #8]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	4798      	blx	r3
 80039d2:	2207      	movs	r2, #7
 80039d4:	2101      	movs	r1, #1
 80039d6:	7c20      	ldrb	r0, [r4, #16]
 80039d8:	68a3      	ldr	r3, [r4, #8]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	4798      	blx	r3
 80039de:	2100      	movs	r1, #0
 80039e0:	7c20      	ldrb	r0, [r4, #16]
 80039e2:	f001 ffbe 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 80039e6:	2000      	movs	r0, #0
 80039e8:	9000      	str	r0, [sp, #0]
 80039ea:	2321      	movs	r3, #33	@ 0x21
 80039ec:	2206      	movs	r2, #6
 80039ee:	2100      	movs	r1, #0
 80039f0:	0020      	movs	r0, r4
 80039f2:	f7fd fec1 	bl	8001778 <PE_Send_CtrlMessage>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d109      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 80039fa:	2208      	movs	r2, #8
 80039fc:	2101      	movs	r1, #1
 80039fe:	7c20      	ldrb	r0, [r4, #16]
 8003a00:	68a3      	ldr	r3, [r4, #8]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	4798      	blx	r3
 8003a06:	48c5      	ldr	r0, [pc, #788]	@ (8003d1c <.text_3>)
 8003a08:	83e0      	strh	r0, [r4, #30]
 8003a0a:	25eb      	movs	r5, #235	@ 0xeb
 8003a0c:	006d      	lsls	r5, r5, #1
 8003a0e:	e6f7      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003a10:	4668      	mov	r0, sp
 8003a12:	7b00      	ldrb	r0, [r0, #12]
 8003a14:	2811      	cmp	r0, #17
 8003a16:	d10b      	bne.n	8003a30 <__iar_annotation$$branch+0x908>
 8003a18:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003a1a:	4001      	ands	r1, r0
 8003a1c:	2906      	cmp	r1, #6
 8003a1e:	d107      	bne.n	8003a30 <__iar_annotation$$branch+0x908>
 8003a20:	2026      	movs	r0, #38	@ 0x26
 8003a22:	7460      	strb	r0, [r4, #17]
 8003a24:	2014      	movs	r0, #20
 8003a26:	4669      	mov	r1, sp
 8003a28:	7308      	strb	r0, [r1, #12]
 8003a2a:	0020      	movs	r0, r4
 8003a2c:	f7fd f8c7 	bl	8000bbe <PE_Clear_RxEvent>
 8003a30:	8be0      	ldrh	r0, [r4, #30]
 8003a32:	03a9      	lsls	r1, r5, #14
 8003a34:	4288      	cmp	r0, r1
 8003a36:	d1ea      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 8003a38:	68a0      	ldr	r0, [r4, #8]
 8003a3a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d000      	beq.n	8003a42 <__iar_annotation$$branch+0x91a>
 8003a40:	e13a      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 8003a42:	200f      	movs	r0, #15
 8003a44:	e6bd      	b.n	80037c2 <__iar_annotation$$branch+0x69a>
 8003a46:	8be0      	ldrh	r0, [r4, #30]
 8003a48:	03a9      	lsls	r1, r5, #14
 8003a4a:	4288      	cmp	r0, r1
 8003a4c:	d1df      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 8003a4e:	220e      	movs	r2, #14
 8003a50:	2101      	movs	r1, #1
 8003a52:	7c20      	ldrb	r0, [r4, #16]
 8003a54:	68a3      	ldr	r3, [r4, #8]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	4798      	blx	r3
 8003a5a:	6860      	ldr	r0, [r4, #4]
 8003a5c:	7800      	ldrb	r0, [r0, #0]
 8003a5e:	0780      	lsls	r0, r0, #30
 8003a60:	0f80      	lsrs	r0, r0, #30
 8003a62:	2802      	cmp	r0, #2
 8003a64:	d102      	bne.n	8003a6c <__iar_annotation$$branch+0x944>
 8003a66:	7c20      	ldrb	r0, [r4, #16]
 8003a68:	f001 ffb1 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	f7fd f9cb 	bl	8000e08 <PE_Reset_StateMachine>
 8003a72:	2115      	movs	r1, #21
 8003a74:	e74e      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003a76:	2803      	cmp	r0, #3
 8003a78:	d110      	bne.n	8003a9c <__iar_annotation$$branch+0x974>
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	7720      	strb	r0, [r4, #28]
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	7800      	ldrb	r0, [r0, #0]
 8003a82:	0780      	lsls	r0, r0, #30
 8003a84:	0f80      	lsrs	r0, r0, #30
 8003a86:	2802      	cmp	r0, #2
 8003a88:	d102      	bne.n	8003a90 <__iar_annotation$$branch+0x968>
 8003a8a:	7c20      	ldrb	r0, [r4, #16]
 8003a8c:	f001 ff9f 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003a90:	2004      	movs	r0, #4
 8003a92:	7460      	strb	r0, [r4, #17]
 8003a94:	2167      	movs	r1, #103	@ 0x67
 8003a96:	7c20      	ldrb	r0, [r4, #16]
 8003a98:	f7fc fe26 	bl	80006e8 <USBPD_PE_Notification>
 8003a9c:	4668      	mov	r0, sp
 8003a9e:	7b00      	ldrb	r0, [r0, #12]
 8003aa0:	2814      	cmp	r0, #20
 8003aa2:	d00d      	beq.n	8003ac0 <__iar_annotation$$branch+0x998>
 8003aa4:	0020      	movs	r0, r4
 8003aa6:	f7fe f917 	bl	8001cd8 <PE_ManageRXEvent>
 8003aaa:	4668      	mov	r0, sp
 8003aac:	7b00      	ldrb	r0, [r0, #12]
 8003aae:	2814      	cmp	r0, #20
 8003ab0:	d005      	beq.n	8003abe <__iar_annotation$$branch+0x996>
 8003ab2:	2014      	movs	r0, #20
 8003ab4:	4669      	mov	r1, sp
 8003ab6:	7308      	strb	r0, [r1, #12]
 8003ab8:	0020      	movs	r0, r4
 8003aba:	f7fd f880 	bl	8000bbe <PE_Clear_RxEvent>
 8003abe:	e69f      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003ac0:	6960      	ldr	r0, [r4, #20]
 8003ac2:	0cc0      	lsrs	r0, r0, #19
 8003ac4:	03ad      	lsls	r5, r5, #14
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d01e      	beq.n	8003b08 <__iar_annotation$$branch+0x9e0>
 8003aca:	8c21      	ldrh	r1, [r4, #32]
 8003acc:	42a9      	cmp	r1, r5
 8003ace:	d10e      	bne.n	8003aee <__iar_annotation$$branch+0x9c6>
 8003ad0:	200f      	movs	r0, #15
 8003ad2:	7460      	strb	r0, [r4, #17]
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	9000      	str	r0, [sp, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2270      	movs	r2, #112	@ 0x70
 8003adc:	7c21      	ldrb	r1, [r4, #16]
 8003ade:	2009      	movs	r0, #9
 8003ae0:	4da5      	ldr	r5, [pc, #660]	@ (8003d78 <.text_5>)
 8003ae2:	682d      	ldr	r5, [r5, #0]
 8003ae4:	47a8      	blx	r5
 8003ae6:	78b0      	ldrb	r0, [r6, #2]
 8003ae8:	1c40      	adds	r0, r0, #1
 8003aea:	70b0      	strb	r0, [r6, #2]
 8003aec:	e6fc      	b.n	80038e8 <__iar_annotation$$branch+0x7c0>
 8003aee:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003af0:	0509      	lsls	r1, r1, #20
 8003af2:	0f49      	lsrs	r1, r1, #29
 8003af4:	180a      	adds	r2, r1, r0
 8003af6:	2333      	movs	r3, #51	@ 0x33
 8003af8:	435a      	muls	r2, r3
 8003afa:	4315      	orrs	r5, r2
 8003afc:	8425      	strh	r5, [r4, #32]
 8003afe:	180d      	adds	r5, r1, r0
 8003b00:	2033      	movs	r0, #51	@ 0x33
 8003b02:	4345      	muls	r5, r0
 8003b04:	b2ad      	uxth	r5, r5
 8003b06:	e67b      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003b08:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003b0a:	42a8      	cmp	r0, r5
 8003b0c:	d099      	beq.n	8003a42 <__iar_annotation$$branch+0x91a>
 8003b0e:	7c20      	ldrb	r0, [r4, #16]
 8003b10:	f7fd f87a 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d113      	bne.n	8003b40 <__iar_annotation$$branch+0xa18>
 8003b18:	2032      	movs	r0, #50	@ 0x32
 8003b1a:	5c20      	ldrb	r0, [r4, r0]
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d00f      	beq.n	8003b40 <__iar_annotation$$branch+0xa18>
 8003b20:	2133      	movs	r1, #51	@ 0x33
 8003b22:	5c61      	ldrb	r1, [r4, r1]
 8003b24:	2231      	movs	r2, #49	@ 0x31
 8003b26:	54a1      	strb	r1, [r4, r2]
 8003b28:	7460      	strb	r0, [r4, #17]
 8003b2a:	2500      	movs	r5, #0
 8003b2c:	2132      	movs	r1, #50	@ 0x32
 8003b2e:	5465      	strb	r5, [r4, r1]
 8003b30:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003b32:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8003b34:	6960      	ldr	r0, [r4, #20]
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	01c9      	lsls	r1, r1, #7
 8003b3a:	4301      	orrs	r1, r0
 8003b3c:	6161      	str	r1, [r4, #20]
 8003b3e:	e65f      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003b40:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8003b42:	42a8      	cmp	r0, r5
 8003b44:	d104      	bne.n	8003b50 <__iar_annotation$$branch+0x4>
 8003b46:	2500      	movs	r5, #0
 8003b48:	8465      	strh	r5, [r4, #34]	@ 0x22
 8003b4a:	7930      	ldrb	r0, [r6, #4]

08003b4c <__iar_annotation$$branch>:
 8003b4c:	f7ff fb87 	bl	800325e <__iar_annotation$$branch+0x136>
 8003b50:	0020      	movs	r0, r4
 8003b52:	f7fd fd83 	bl	800165c <PE_CalculateMinTiming>
 8003b56:	e080      	b.n	8003c5a <__iar_annotation$$branch>
 8003b58:	2000      	movs	r0, #0
 8003b5a:	9002      	str	r0, [sp, #8]
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	9001      	str	r0, [sp, #4]
 8003b60:	2001      	movs	r0, #1
 8003b62:	9000      	str	r0, [sp, #0]
 8003b64:	0023      	movs	r3, r4
 8003b66:	332c      	adds	r3, #44	@ 0x2c
 8003b68:	2206      	movs	r2, #6
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	0020      	movs	r0, r4
 8003b6e:	f7fd fe2e 	bl	80017ce <PE_Send_DataMessage>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d1e3      	bne.n	8003b3e <__iar_annotation$$branch+0xa16>
 8003b76:	215d      	movs	r1, #93	@ 0x5d
 8003b78:	e6cc      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	9004      	str	r0, [sp, #16]
 8003b7e:	ab04      	add	r3, sp, #16
 8003b80:	aa05      	add	r2, sp, #20
 8003b82:	210a      	movs	r1, #10
 8003b84:	4668      	mov	r0, sp
 8003b86:	7b40      	ldrb	r0, [r0, #13]
 8003b88:	68a7      	ldr	r7, [r4, #8]
 8003b8a:	697f      	ldr	r7, [r7, #20]
 8003b8c:	47b8      	blx	r7
 8003b8e:	2104      	movs	r1, #4
 8003b90:	9804      	ldr	r0, [sp, #16]
 8003b92:	f7fd fd8f 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d11f      	bne.n	8003bda <__iar_annotation$$branch+0x8e>
 8003b9a:	71f0      	strb	r0, [r6, #7]
 8003b9c:	7230      	strb	r0, [r6, #8]
 8003b9e:	7c20      	ldrb	r0, [r4, #16]
 8003ba0:	f7fd fa04 	bl	8000fac <PE_Get_UnchunkedSupport>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d103      	bne.n	8003bb0 <__iar_annotation$$branch+0x64>
 8003ba8:	7a30      	ldrb	r0, [r6, #8]
 8003baa:	2180      	movs	r1, #128	@ 0x80
 8003bac:	4301      	orrs	r1, r0
 8003bae:	7231      	strb	r1, [r6, #8]
 8003bb0:	9a04      	ldr	r2, [sp, #16]
 8003bb2:	a905      	add	r1, sp, #20
 8003bb4:	4871      	ldr	r0, [pc, #452]	@ (8003d7c <.text_6>)
 8003bb6:	1820      	adds	r0, r4, r0
 8003bb8:	f012 fd48 	bl	801664c <__aeabi_memcpy>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	9002      	str	r0, [sp, #8]
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	9001      	str	r0, [sp, #4]
 8003bc4:	2008      	movs	r0, #8
 8003bc6:	9000      	str	r0, [sp, #0]
 8003bc8:	486d      	ldr	r0, [pc, #436]	@ (8003d80 <.text_7>)
 8003bca:	1823      	adds	r3, r4, r0
 8003bcc:	220c      	movs	r2, #12
 8003bce:	2100      	movs	r1, #0
 8003bd0:	0020      	movs	r0, r4
 8003bd2:	f7fd ff2f 	bl	8001a34 <PE_Send_ExtendedMessage>
 8003bd6:	214c      	movs	r1, #76	@ 0x4c
 8003bd8:	e69c      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003bda:	2001      	movs	r0, #1
 8003bdc:	e510      	b.n	8003600 <__iar_annotation$$branch+0x4d8>
 8003bde:	2001      	movs	r0, #1
 8003be0:	9000      	str	r0, [sp, #0]
 8003be2:	2339      	movs	r3, #57	@ 0x39
 8003be4:	7832      	ldrb	r2, [r6, #0]
 8003be6:	2033      	movs	r0, #51	@ 0x33
 8003be8:	5c21      	ldrb	r1, [r4, r0]
 8003bea:	0020      	movs	r0, r4
 8003bec:	f7fd fdc4 	bl	8001778 <PE_Send_CtrlMessage>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d144      	bne.n	8003c7e <__iar_annotation$$branch+0x24>
 8003bf4:	7870      	ldrb	r0, [r6, #1]
 8003bf6:	7720      	strb	r0, [r4, #28]
 8003bf8:	83e7      	strh	r7, [r4, #30]
 8003bfa:	251b      	movs	r5, #27
 8003bfc:	2144      	movs	r1, #68	@ 0x44
 8003bfe:	e689      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003c00:	8be0      	ldrh	r0, [r4, #30]
 8003c02:	03a9      	lsls	r1, r5, #14
 8003c04:	4288      	cmp	r0, r1
 8003c06:	d104      	bne.n	8003c12 <__iar_annotation$$branch+0xc6>
 8003c08:	4668      	mov	r0, sp
 8003c0a:	7b00      	ldrb	r0, [r0, #12]
 8003c0c:	2814      	cmp	r0, #20
 8003c0e:	d100      	bne.n	8003c12 <__iar_annotation$$branch+0xc6>
 8003c10:	e5d6      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 8003c12:	4668      	mov	r0, sp
 8003c14:	7b00      	ldrb	r0, [r0, #12]
 8003c16:	2814      	cmp	r0, #20
 8003c18:	d031      	beq.n	8003c7e <__iar_annotation$$branch+0x24>
 8003c1a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003c1c:	0bc1      	lsrs	r1, r0, #15
 8003c1e:	d003      	beq.n	8003c28 <__iar_annotation$$branch+0xdc>
 8003c20:	0020      	movs	r0, r4
 8003c22:	f7fd fe11 	bl	8001848 <PE_Check_ExtendedMessage>
 8003c26:	e740      	b.n	8003aaa <__iar_annotation$$branch+0x982>
 8003c28:	06c0      	lsls	r0, r0, #27
 8003c2a:	0ec0      	lsrs	r0, r0, #27
 8003c2c:	2810      	cmp	r0, #16
 8003c2e:	d000      	beq.n	8003c32 <__iar_annotation$$branch+0xe6>
 8003c30:	e5c6      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 8003c32:	2014      	movs	r0, #20
 8003c34:	4669      	mov	r1, sp
 8003c36:	7308      	strb	r0, [r1, #12]
 8003c38:	0020      	movs	r0, r4
 8003c3a:	f7fc ffc0 	bl	8000bbe <PE_Clear_RxEvent>
 8003c3e:	2500      	movs	r5, #0
 8003c40:	83e5      	strh	r5, [r4, #30]
 8003c42:	2003      	movs	r0, #3
 8003c44:	7460      	strb	r0, [r4, #17]
 8003c46:	2159      	movs	r1, #89	@ 0x59
 8003c48:	e664      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003c4a:	0020      	movs	r0, r4
 8003c4c:	f7fd ff1e 	bl	8001a8c <PE_SubStateMachine_ExtendedMessages>
 8003c50:	e003      	b.n	8003c5a <__iar_annotation$$branch>
 8003c52:	a903      	add	r1, sp, #12
 8003c54:	0020      	movs	r0, r4
 8003c56:	f7fd f9bb 	bl	8000fd0 <PE_SubStateMachine_Generic>

08003c5a <__iar_annotation$$branch>:
 8003c5a:	f7ff fa35 	bl	80030c8 <__iar_annotation$$branch+0xc>
 8003c5e:	a903      	add	r1, sp, #12
 8003c60:	0020      	movs	r0, r4
 8003c62:	f000 f9d5 	bl	8004010 <PE_SubStateMachine_VconnSwap>
 8003c66:	0005      	movs	r5, r0
 8003c68:	6860      	ldr	r0, [r4, #4]
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	0401      	lsls	r1, r0, #16
 8003c6e:	0fc9      	lsrs	r1, r1, #31
 8003c70:	d006      	beq.n	8003c80 <__iar_annotation$$branch+0x26>
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	6801      	ldr	r1, [r0, #0]
 8003c76:	4668      	mov	r0, sp
 8003c78:	7b40      	ldrb	r0, [r0, #13]
 8003c7a:	f001 fec7 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8003c7e:	e5bf      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003c80:	2101      	movs	r1, #1
 8003c82:	e7f8      	b.n	8003c76 <__iar_annotation$$branch+0x1c>
 8003c84:	4668      	mov	r0, sp
 8003c86:	7b00      	ldrb	r0, [r0, #12]
 8003c88:	2811      	cmp	r0, #17
 8003c8a:	d111      	bne.n	8003cb0 <__iar_annotation$$branch+0x56>
 8003c8c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003c8e:	4001      	ands	r1, r0
 8003c90:	2913      	cmp	r1, #19
 8003c92:	d10d      	bne.n	8003cb0 <__iar_annotation$$branch+0x56>
 8003c94:	2014      	movs	r0, #20
 8003c96:	4669      	mov	r1, sp
 8003c98:	7308      	strb	r0, [r1, #12]
 8003c9a:	0020      	movs	r0, r4
 8003c9c:	f7fc ff8f 	bl	8000bbe <PE_Clear_RxEvent>
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	9000      	str	r0, [sp, #0]
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	2100      	movs	r1, #0
 8003caa:	0020      	movs	r0, r4
 8003cac:	f7fd fd64 	bl	8001778 <PE_Send_CtrlMessage>
 8003cb0:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8003cb2:	03a9      	lsls	r1, r5, #14
 8003cb4:	4288      	cmp	r0, r1
 8003cb6:	d106      	bne.n	8003cc6 <__iar_annotation$$branch+0x6c>
 8003cb8:	2092      	movs	r0, #146	@ 0x92
 8003cba:	e582      	b.n	80037c2 <__iar_annotation$$branch+0x69a>
 8003cbc:	4668      	mov	r0, sp
 8003cbe:	7b01      	ldrb	r1, [r0, #12]
 8003cc0:	0020      	movs	r0, r4
 8003cc2:	f001 fc05 	bl	80054d0 <PE_StateMachine_UVDM>
 8003cc6:	e59b      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003cc8:	6960      	ldr	r0, [r4, #20]
 8003cca:	2701      	movs	r7, #1
 8003ccc:	0b41      	lsrs	r1, r0, #13
 8003cce:	4039      	ands	r1, r7
 8003cd0:	d019      	beq.n	8003d06 <__iar_annotation$$branch+0xac>
 8003cd2:	0b80      	lsrs	r0, r0, #14
 8003cd4:	4038      	ands	r0, r7
 8003cd6:	d007      	beq.n	8003ce8 <__iar_annotation$$branch+0x8e>
 8003cd8:	215b      	movs	r1, #91	@ 0x5b
 8003cda:	7c20      	ldrb	r0, [r4, #16]
 8003cdc:	f7fc fd04 	bl	80006e8 <USBPD_PE_Notification>
 8003ce0:	6960      	ldr	r0, [r4, #20]
 8003ce2:	4928      	ldr	r1, [pc, #160]	@ (8003d84 <.text_8>)
 8003ce4:	4001      	ands	r1, r0
 8003ce6:	6161      	str	r1, [r4, #20]
 8003ce8:	2003      	movs	r0, #3
 8003cea:	7460      	strb	r0, [r4, #17]
 8003cec:	7ca1      	ldrb	r1, [r4, #18]
 8003cee:	2903      	cmp	r1, #3
 8003cf0:	d008      	beq.n	8003d04 <__iar_annotation$$branch+0xaa>
 8003cf2:	74a0      	strb	r0, [r4, #18]
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	9000      	str	r0, [sp, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	7c21      	ldrb	r1, [r4, #16]
 8003cfe:	2004      	movs	r0, #4
 8003d00:	6835      	ldr	r5, [r6, #0]
 8003d02:	47a8      	blx	r5
 8003d04:	2501      	movs	r5, #1
 8003d06:	6960      	ldr	r0, [r4, #20]
 8003d08:	491f      	ldr	r1, [pc, #124]	@ (8003d88 <.text_9>)
 8003d0a:	4001      	ands	r1, r0
 8003d0c:	6161      	str	r1, [r4, #20]
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	d101      	bne.n	8003d16 <__iar_annotation$$branch>

08003d12 <__iar_annotation$$branch>:
 8003d12:	f7ff f8c9 	bl	8002ea8 <USBPD_PE_StateMachine_SRC+0xb4>

08003d16 <__iar_annotation$$branch>:
 8003d16:	f7ff fa0b 	bl	8003130 <__iar_annotation$$branch+0x8>
	...

08003d1c <.text_3>:
 8003d1c:	000081d6 	.word	0x000081d6

08003d20 <PE_Send_SRCCapabilities>:
 8003d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003d22:	0004      	movs	r4, r0
 8003d24:	000d      	movs	r5, r1
 8003d26:	2000      	movs	r0, #0
 8003d28:	9002      	str	r0, [sp, #8]
 8003d2a:	ab02      	add	r3, sp, #8
 8003d2c:	4817      	ldr	r0, [pc, #92]	@ (8003d8c <.text_10>)
 8003d2e:	1822      	adds	r2, r4, r0
 8003d30:	2100      	movs	r1, #0
 8003d32:	7c20      	ldrb	r0, [r4, #16]
 8003d34:	68a6      	ldr	r6, [r4, #8]
 8003d36:	6976      	ldr	r6, [r6, #20]
 8003d38:	47b0      	blx	r6
 8003d3a:	9802      	ldr	r0, [sp, #8]
 8003d3c:	1c80      	adds	r0, r0, #2
 8003d3e:	9002      	str	r0, [sp, #8]
 8003d40:	2104      	movs	r1, #4
 8003d42:	9802      	ldr	r0, [sp, #8]
 8003d44:	f7fd fcb6 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d113      	bne.n	8003d74 <PE_Send_SRCCapabilities+0x54>
 8003d4c:	6860      	ldr	r0, [r4, #4]
 8003d4e:	6800      	ldr	r0, [r0, #0]
 8003d50:	04c1      	lsls	r1, r0, #19
 8003d52:	0fc9      	lsrs	r1, r1, #31
 8003d54:	d00e      	beq.n	8003d74 <PE_Send_SRCCapabilities+0x54>
 8003d56:	9501      	str	r5, [sp, #4]
 8003d58:	9802      	ldr	r0, [sp, #8]
 8003d5a:	b280      	uxth	r0, r0
 8003d5c:	9000      	str	r0, [sp, #0]
 8003d5e:	4808      	ldr	r0, [pc, #32]	@ (8003d80 <.text_7>)
 8003d60:	1823      	adds	r3, r4, r0
 8003d62:	2201      	movs	r2, #1
 8003d64:	2100      	movs	r1, #0
 8003d66:	7c20      	ldrb	r0, [r4, #16]
 8003d68:	f001 fe54 	bl	8005a14 <USBPD_PRL_SendMessage>
 8003d6c:	2803      	cmp	r0, #3
 8003d6e:	d0e7      	beq.n	8003d40 <PE_Send_SRCCapabilities+0x20>
 8003d70:	b004      	add	sp, #16
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	2010      	movs	r0, #16
 8003d76:	e7fb      	b.n	8003d70 <PE_Send_SRCCapabilities+0x50>

08003d78 <.text_5>:
 8003d78:	20000000 	.word	0x20000000

08003d7c <.text_6>:
 8003d7c:	00000267 	.word	0x00000267

08003d80 <.text_7>:
 8003d80:	00000263 	.word	0x00000263

08003d84 <.text_8>:
 8003d84:	ffffbfff 	.word	0xffffbfff

08003d88 <.text_9>:
 8003d88:	ffffdfff 	.word	0xffffdfff

08003d8c <.text_10>:
 8003d8c:	00000265 	.word	0x00000265

08003d90 <PE_StateMachine_VDMCable>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	b08c      	sub	sp, #48	@ 0x30
 8003d94:	0004      	movs	r4, r0
 8003d96:	2502      	movs	r5, #2
 8003d98:	2607      	movs	r6, #7
 8003d9a:	7c60      	ldrb	r0, [r4, #17]
 8003d9c:	2805      	cmp	r0, #5
 8003d9e:	d002      	beq.n	8003da6 <PE_StateMachine_VDMCable+0x16>
 8003da0:	289a      	cmp	r0, #154	@ 0x9a
 8003da2:	d072      	beq.n	8003e8a <PE_StateMachine_VDMCable+0xfa>
 8003da4:	e127      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003da6:	6860      	ldr	r0, [r4, #4]
 8003da8:	7800      	ldrb	r0, [r0, #0]
 8003daa:	0781      	lsls	r1, r0, #30
 8003dac:	0f89      	lsrs	r1, r1, #30
 8003dae:	0020      	movs	r0, r4
 8003db0:	f000 fa5e 	bl	8004270 <PE_ExtRevisionInteroperability_Cable>
 8003db4:	2094      	movs	r0, #148	@ 0x94
 8003db6:	0080      	lsls	r0, r0, #2
 8003db8:	5821      	ldr	r1, [r4, r0]
 8003dba:	201f      	movs	r0, #31
 8003dbc:	4381      	bics	r1, r0
 8003dbe:	488f      	ldr	r0, [pc, #572]	@ (8003ffc <.text_3>)
 8003dc0:	4308      	orrs	r0, r1
 8003dc2:	2194      	movs	r1, #148	@ 0x94
 8003dc4:	0089      	lsls	r1, r1, #2
 8003dc6:	5060      	str	r0, [r4, r1]
 8003dc8:	6861      	ldr	r1, [r4, #4]
 8003dca:	9100      	str	r1, [sp, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	9a00      	ldr	r2, [sp, #0]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	0953      	lsrs	r3, r2, #5
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	4a8a      	ldr	r2, [pc, #552]	@ (8004000 <.text_4>)
 8003dd8:	4002      	ands	r2, r0
 8003dda:	0358      	lsls	r0, r3, #13
 8003ddc:	4310      	orrs	r0, r2
 8003dde:	22ff      	movs	r2, #255	@ 0xff
 8003de0:	0612      	lsls	r2, r2, #24
 8003de2:	4302      	orrs	r2, r0
 8003de4:	2094      	movs	r0, #148	@ 0x94
 8003de6:	0080      	lsls	r0, r0, #2
 8003de8:	5022      	str	r2, [r4, r0]
 8003dea:	9800      	ldr	r0, [sp, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	0880      	lsrs	r0, r0, #2
 8003df0:	4001      	ands	r1, r0
 8003df2:	d003      	beq.n	8003dfc <PE_StateMachine_VDMCable+0x6c>
 8003df4:	6960      	ldr	r0, [r4, #20]
 8003df6:	0741      	lsls	r1, r0, #29
 8003df8:	0fc8      	lsrs	r0, r1, #31
 8003dfa:	e000      	b.n	8003dfe <PE_StateMachine_VDMCable+0x6e>
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	2194      	movs	r1, #148	@ 0x94
 8003e00:	0089      	lsls	r1, r1, #2
 8003e02:	1867      	adds	r7, r4, r1
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	209a      	movs	r0, #154	@ 0x9a
 8003e08:	9001      	str	r0, [sp, #4]
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	9000      	str	r0, [sp, #0]
 8003e0e:	003b      	movs	r3, r7
 8003e10:	220f      	movs	r2, #15
 8003e12:	2101      	movs	r1, #1
 8003e14:	0020      	movs	r0, r4
 8003e16:	f7fd fcda 	bl	80017ce <PE_Send_DataMessage>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d109      	bne.n	8003e32 <PE_StateMachine_VDMCable+0xa2>
 8003e1e:	6960      	ldr	r0, [r4, #20]
 8003e20:	03e9      	lsls	r1, r5, #15
 8003e22:	4301      	orrs	r1, r0
 8003e24:	6161      	str	r1, [r4, #20]
 8003e26:	2051      	movs	r0, #81	@ 0x51
 8003e28:	7720      	strb	r0, [r4, #28]
 8003e2a:	4876      	ldr	r0, [pc, #472]	@ (8004004 <.text_5>)
 8003e2c:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003e2e:	251e      	movs	r5, #30
 8003e30:	e0e1      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e32:	2809      	cmp	r0, #9
 8003e34:	d0fc      	beq.n	8003e30 <PE_StateMachine_VDMCable+0xa0>
 8003e36:	7cb8      	ldrb	r0, [r7, #18]
 8003e38:	2815      	cmp	r0, #21
 8003e3a:	d202      	bcs.n	8003e42 <PE_StateMachine_VDMCable+0xb2>
 8003e3c:	4872      	ldr	r0, [pc, #456]	@ (8004008 <.text_6>)
 8003e3e:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003e40:	e00a      	b.n	8003e58 <PE_StateMachine_VDMCable+0xc8>
 8003e42:	68e0      	ldr	r0, [r4, #12]
 8003e44:	6940      	ldr	r0, [r0, #20]
 8003e46:	9000      	str	r0, [sp, #0]
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d005      	beq.n	8003e58 <PE_StateMachine_VDMCable+0xc8>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2205      	movs	r2, #5
 8003e50:	2101      	movs	r1, #1
 8003e52:	7c20      	ldrb	r0, [r4, #16]
 8003e54:	9f00      	ldr	r7, [sp, #0]
 8003e56:	47b8      	blx	r7
 8003e58:	6860      	ldr	r0, [r4, #4]
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	0a00      	lsrs	r0, r0, #8
 8003e5e:	4030      	ands	r0, r6
 8003e60:	2803      	cmp	r0, #3
 8003e62:	d100      	bne.n	8003e66 <PE_StateMachine_VDMCable+0xd6>
 8003e64:	e0a4      	b.n	8003fb0 <PE_StateMachine_VDMCable+0x220>
 8003e66:	4869      	ldr	r0, [pc, #420]	@ (800400c <.text_7>)
 8003e68:	8be1      	ldrh	r1, [r4, #30]
 8003e6a:	4201      	tst	r1, r0
 8003e6c:	d00b      	beq.n	8003e86 <PE_StateMachine_VDMCable+0xf6>
 8003e6e:	2108      	movs	r1, #8
 8003e70:	7461      	strb	r1, [r4, #17]
 8003e72:	8be1      	ldrh	r1, [r4, #30]
 8003e74:	4001      	ands	r1, r0
 8003e76:	292d      	cmp	r1, #45	@ 0x2d
 8003e78:	d203      	bcs.n	8003e82 <PE_StateMachine_VDMCable+0xf2>
 8003e7a:	8be1      	ldrh	r1, [r4, #30]
 8003e7c:	0005      	movs	r5, r0
 8003e7e:	400d      	ands	r5, r1
 8003e80:	e0b9      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e82:	252d      	movs	r5, #45	@ 0x2d
 8003e84:	e0b7      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e86:	7466      	strb	r6, [r4, #17]
 8003e88:	e0b5      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e8a:	9101      	str	r1, [sp, #4]
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	f7fc fecf 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8003e92:	4669      	mov	r1, sp
 8003e94:	7008      	strb	r0, [r1, #0]
 8003e96:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003e98:	2700      	movs	r7, #0
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	9801      	ldr	r0, [sp, #4]
 8003e9e:	7800      	ldrb	r0, [r0, #0]
 8003ea0:	466b      	mov	r3, sp
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4298      	cmp	r0, r3
 8003ea6:	d14f      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003ea8:	0bc8      	lsrs	r0, r1, #15
 8003eaa:	d14d      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eac:	0b08      	lsrs	r0, r1, #12
 8003eae:	4230      	tst	r0, r6
 8003eb0:	d04a      	beq.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eb2:	201f      	movs	r0, #31
 8003eb4:	4008      	ands	r0, r1
 8003eb6:	280f      	cmp	r0, #15
 8003eb8:	d146      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003ebc:	7880      	ldrb	r0, [r0, #2]
 8003ebe:	9000      	str	r0, [sp, #0]
 8003ec0:	4002      	ands	r2, r0
 8003ec2:	2a01      	cmp	r2, #1
 8003ec4:	d13b      	bne.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003ec6:	0980      	lsrs	r0, r0, #6
 8003ec8:	d039      	beq.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003eca:	0608      	lsls	r0, r1, #24
 8003ecc:	0f81      	lsrs	r1, r0, #30
 8003ece:	0020      	movs	r0, r4
 8003ed0:	f000 f9ce 	bl	8004270 <PE_ExtRevisionInteroperability_Cable>
 8003ed4:	68e0      	ldr	r0, [r4, #12]
 8003ed6:	6940      	ldr	r0, [r0, #20]
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d023      	beq.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003edc:	9800      	ldr	r0, [sp, #0]
 8003ede:	0985      	lsrs	r5, r0, #6
 8003ee0:	07a8      	lsls	r0, r5, #30
 8003ee2:	0f80      	lsrs	r0, r0, #30
 8003ee4:	2801      	cmp	r0, #1
 8003ee6:	d11d      	bne.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003ee8:	aa03      	add	r2, sp, #12
 8003eea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003eec:	1d81      	adds	r1, r0, #6
 8003eee:	7c20      	ldrb	r0, [r4, #16]
 8003ef0:	f001 fb9a 	bl	8005628 <PE_SVDM_CheckIdentity>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d111      	bne.n	8003f1c <PE_StateMachine_VDMCable+0x18c>
 8003ef8:	ab03      	add	r3, sp, #12
 8003efa:	07aa      	lsls	r2, r5, #30
 8003efc:	0f92      	lsrs	r2, r2, #30
 8003efe:	2101      	movs	r1, #1
 8003f00:	7c20      	ldrb	r0, [r4, #16]
 8003f02:	68e5      	ldr	r5, [r4, #12]
 8003f04:	696d      	ldr	r5, [r5, #20]
 8003f06:	47a8      	blx	r5
 8003f08:	2152      	movs	r1, #82	@ 0x52
 8003f0a:	7c20      	ldrb	r0, [r4, #16]
 8003f0c:	f7fc fbec 	bl	80006e8 <USBPD_PE_Notification>
 8003f10:	2014      	movs	r0, #20
 8003f12:	2194      	movs	r1, #148	@ 0x94
 8003f14:	0089      	lsls	r1, r1, #2
 8003f16:	1861      	adds	r1, r4, r1
 8003f18:	7488      	strb	r0, [r1, #18]
 8003f1a:	e003      	b.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003f1c:	211b      	movs	r1, #27
 8003f1e:	7c20      	ldrb	r0, [r4, #16]
 8003f20:	f7fc fbe2 	bl	80006e8 <USBPD_PE_Notification>
 8003f24:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f26:	6860      	ldr	r0, [r4, #4]
 8003f28:	6800      	ldr	r0, [r0, #0]
 8003f2a:	0a00      	lsrs	r0, r0, #8
 8003f2c:	4030      	ands	r0, r6
 8003f2e:	2803      	cmp	r0, #3
 8003f30:	d102      	bne.n	8003f38 <PE_StateMachine_VDMCable+0x1a8>
 8003f32:	7460      	strb	r0, [r4, #17]
 8003f34:	2500      	movs	r5, #0
 8003f36:	e002      	b.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003f38:	7466      	strb	r6, [r4, #17]
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	7727      	strb	r7, [r4, #28]
 8003f3e:	9801      	ldr	r0, [sp, #4]
 8003f40:	7800      	ldrb	r0, [r0, #0]
 8003f42:	2814      	cmp	r0, #20
 8003f44:	d119      	bne.n	8003f7a <PE_StateMachine_VDMCable+0x1ea>
 8003f46:	e056      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f48:	2003      	movs	r0, #3
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	2a10      	cmp	r2, #16
 8003f4e:	d11b      	bne.n	8003f88 <PE_StateMachine_VDMCable+0x1f8>
 8003f50:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f52:	6861      	ldr	r1, [r4, #4]
 8003f54:	6809      	ldr	r1, [r1, #0]
 8003f56:	0a09      	lsrs	r1, r1, #8
 8003f58:	4031      	ands	r1, r6
 8003f5a:	2903      	cmp	r1, #3
 8003f5c:	d102      	bne.n	8003f64 <PE_StateMachine_VDMCable+0x1d4>
 8003f5e:	7460      	strb	r0, [r4, #17]
 8003f60:	2500      	movs	r5, #0
 8003f62:	e002      	b.n	8003f6a <PE_StateMachine_VDMCable+0x1da>
 8003f64:	7466      	strb	r6, [r4, #17]
 8003f66:	2500      	movs	r5, #0
 8003f68:	7727      	strb	r7, [r4, #28]
 8003f6a:	2159      	movs	r1, #89	@ 0x59
 8003f6c:	7c20      	ldrb	r0, [r4, #16]
 8003f6e:	f7fc fbbb 	bl	80006e8 <USBPD_PE_Notification>
 8003f72:	9801      	ldr	r0, [sp, #4]
 8003f74:	7800      	ldrb	r0, [r0, #0]
 8003f76:	2814      	cmp	r0, #20
 8003f78:	d03d      	beq.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f7a:	2014      	movs	r0, #20
 8003f7c:	9901      	ldr	r1, [sp, #4]
 8003f7e:	7008      	strb	r0, [r1, #0]
 8003f80:	0020      	movs	r0, r4
 8003f82:	f7fc fe1c 	bl	8000bbe <PE_Clear_RxEvent>
 8003f86:	e036      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f88:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003f8a:	03aa      	lsls	r2, r5, #14
 8003f8c:	4291      	cmp	r1, r2
 8003f8e:	d132      	bne.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f90:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f92:	6861      	ldr	r1, [r4, #4]
 8003f94:	680a      	ldr	r2, [r1, #0]
 8003f96:	0a13      	lsrs	r3, r2, #8
 8003f98:	4033      	ands	r3, r6
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d10c      	bne.n	8003fb8 <PE_StateMachine_VDMCable+0x228>
 8003f9e:	68e0      	ldr	r0, [r4, #12]
 8003fa0:	6945      	ldr	r5, [r0, #20]
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	d004      	beq.n	8003fb0 <PE_StateMachine_VDMCable+0x220>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2204      	movs	r2, #4
 8003faa:	2101      	movs	r1, #1
 8003fac:	7c20      	ldrb	r0, [r4, #16]
 8003fae:	47a8      	blx	r5
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	7460      	strb	r0, [r4, #17]
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	e01e      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003fb8:	0e93      	lsrs	r3, r2, #26
 8003fba:	4018      	ands	r0, r3
 8003fbc:	2802      	cmp	r0, #2
 8003fbe:	d10e      	bne.n	8003fde <PE_StateMachine_VDMCable+0x24e>
 8003fc0:	48b7      	ldr	r0, [pc, #732]	@ (80042a0 <.text_10>)
 8003fc2:	4010      	ands	r0, r2
 8003fc4:	066a      	lsls	r2, r5, #25
 8003fc6:	4302      	orrs	r2, r0
 8003fc8:	600a      	str	r2, [r1, #0]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	7c20      	ldrb	r0, [r4, #16]
 8003fce:	f001 fcea 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003fd2:	480d      	ldr	r0, [pc, #52]	@ (8004008 <.text_6>)
 8003fd4:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003fd6:	252d      	movs	r5, #45	@ 0x2d
 8003fd8:	2008      	movs	r0, #8
 8003fda:	7460      	strb	r0, [r4, #17]
 8003fdc:	e00a      	b.n	8003ff4 <PE_StateMachine_VDMCable+0x264>
 8003fde:	68e0      	ldr	r0, [r4, #12]
 8003fe0:	6945      	ldr	r5, [r0, #20]
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	d004      	beq.n	8003ff0 <PE_StateMachine_VDMCable+0x260>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2204      	movs	r2, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	7c20      	ldrb	r0, [r4, #16]
 8003fee:	47a8      	blx	r5
 8003ff0:	7466      	strb	r6, [r4, #17]
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	7727      	strb	r7, [r4, #28]
 8003ff6:	0028      	movs	r0, r5
 8003ff8:	b00d      	add	sp, #52	@ 0x34
 8003ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ffc <.text_3>:
 8003ffc:	00008001 	.word	0x00008001

08004000 <.text_4>:
 8004000:	0000983f 	.word	0x0000983f

08004004 <.text_5>:
 8004004:	0000801e 	.word	0x0000801e

08004008 <.text_6>:
 8004008:	0000802d 	.word	0x0000802d

0800400c <.text_7>:
 800400c:	00007fff 	.word	0x00007fff

08004010 <PE_SubStateMachine_VconnSwap>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	0004      	movs	r4, r0
 8004014:	2502      	movs	r5, #2
 8004016:	2703      	movs	r7, #3
 8004018:	4ea2      	ldr	r6, [pc, #648]	@ (80042a4 <.text_11>)
 800401a:	2014      	movs	r0, #20
 800401c:	7c62      	ldrb	r2, [r4, #17]
 800401e:	2a9d      	cmp	r2, #157	@ 0x9d
 8004020:	d010      	beq.n	8004044 <PE_SubStateMachine_VconnSwap+0x34>
 8004022:	d30e      	bcc.n	8004042 <PE_SubStateMachine_VconnSwap+0x32>
 8004024:	2a9f      	cmp	r2, #159	@ 0x9f
 8004026:	d057      	beq.n	80040d8 <PE_SubStateMachine_VconnSwap+0xc8>
 8004028:	d33d      	bcc.n	80040a6 <PE_SubStateMachine_VconnSwap+0x96>
 800402a:	2aa1      	cmp	r2, #161	@ 0xa1
 800402c:	d100      	bne.n	8004030 <PE_SubStateMachine_VconnSwap+0x20>
 800402e:	e085      	b.n	800413c <PE_SubStateMachine_VconnSwap+0x12c>
 8004030:	d377      	bcc.n	8004122 <PE_SubStateMachine_VconnSwap+0x112>
 8004032:	2aa3      	cmp	r2, #163	@ 0xa3
 8004034:	d100      	bne.n	8004038 <PE_SubStateMachine_VconnSwap+0x28>
 8004036:	e0a3      	b.n	8004180 <PE_SubStateMachine_VconnSwap+0x170>
 8004038:	d200      	bcs.n	800403c <PE_SubStateMachine_VconnSwap+0x2c>
 800403a:	e08e      	b.n	800415a <PE_SubStateMachine_VconnSwap+0x14a>
 800403c:	2aa4      	cmp	r2, #164	@ 0xa4
 800403e:	d100      	bne.n	8004042 <PE_SubStateMachine_VconnSwap+0x32>
 8004040:	e106      	b.n	8004250 <PE_SubStateMachine_VconnSwap+0x240>
 8004042:	e113      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004044:	6860      	ldr	r0, [r4, #4]
 8004046:	6800      	ldr	r0, [r0, #0]
 8004048:	21b8      	movs	r1, #184	@ 0xb8
 800404a:	0149      	lsls	r1, r1, #5
 800404c:	4001      	ands	r1, r0
 800404e:	2098      	movs	r0, #152	@ 0x98
 8004050:	0140      	lsls	r0, r0, #5
 8004052:	4281      	cmp	r1, r0
 8004054:	d121      	bne.n	800409a <PE_SubStateMachine_VconnSwap+0x8a>
 8004056:	7c20      	ldrb	r0, [r4, #16]
 8004058:	68a1      	ldr	r1, [r4, #8]
 800405a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800405c:	4788      	blx	r1
 800405e:	280a      	cmp	r0, #10
 8004060:	d002      	beq.n	8004068 <PE_SubStateMachine_VconnSwap+0x58>
 8004062:	280d      	cmp	r0, #13
 8004064:	d007      	beq.n	8004076 <PE_SubStateMachine_VconnSwap+0x66>
 8004066:	e00f      	b.n	8004088 <PE_SubStateMachine_VconnSwap+0x78>
 8004068:	209e      	movs	r0, #158	@ 0x9e
 800406a:	7460      	strb	r0, [r4, #17]
 800406c:	6960      	ldr	r0, [r4, #20]
 800406e:	02e9      	lsls	r1, r5, #11
 8004070:	4301      	orrs	r1, r0
 8004072:	6161      	str	r1, [r4, #20]
 8004074:	e0fa      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004076:	2000      	movs	r0, #0
 8004078:	9000      	str	r0, [sp, #0]
 800407a:	2303      	movs	r3, #3
 800407c:	220c      	movs	r2, #12
 800407e:	2100      	movs	r1, #0
 8004080:	0020      	movs	r0, r4
 8004082:	f7fd fb79 	bl	8001778 <PE_Send_CtrlMessage>
 8004086:	e0f1      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004088:	2000      	movs	r0, #0
 800408a:	9000      	str	r0, [sp, #0]
 800408c:	2303      	movs	r3, #3
 800408e:	2204      	movs	r2, #4
 8004090:	2100      	movs	r1, #0
 8004092:	0020      	movs	r0, r4
 8004094:	f7fd fb70 	bl	8001778 <PE_Send_CtrlMessage>
 8004098:	e002      	b.n	80040a0 <PE_SubStateMachine_VconnSwap+0x90>
 800409a:	6960      	ldr	r0, [r4, #20]
 800409c:	4006      	ands	r6, r0
 800409e:	6166      	str	r6, [r4, #20]
 80040a0:	7467      	strb	r7, [r4, #17]
 80040a2:	2500      	movs	r5, #0
 80040a4:	e0e2      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 80040a6:	2000      	movs	r0, #0
 80040a8:	9000      	str	r0, [sp, #0]
 80040aa:	239e      	movs	r3, #158	@ 0x9e
 80040ac:	2203      	movs	r2, #3
 80040ae:	2100      	movs	r1, #0
 80040b0:	0020      	movs	r0, r4
 80040b2:	f7fd fb61 	bl	8001778 <PE_Send_CtrlMessage>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d1f4      	bne.n	80040a4 <PE_SubStateMachine_VconnSwap+0x94>
 80040ba:	6860      	ldr	r0, [r4, #4]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	0401      	lsls	r1, r0, #16
 80040c0:	0fc9      	lsrs	r1, r1, #31
 80040c2:	d005      	beq.n	80040d0 <PE_SubStateMachine_VconnSwap+0xc0>
 80040c4:	209f      	movs	r0, #159	@ 0x9f
 80040c6:	7460      	strb	r0, [r4, #17]
 80040c8:	4877      	ldr	r0, [pc, #476]	@ (80042a8 <.text_12>)
 80040ca:	83e0      	strh	r0, [r4, #30]
 80040cc:	2596      	movs	r5, #150	@ 0x96
 80040ce:	e001      	b.n	80040d4 <PE_SubStateMachine_VconnSwap+0xc4>
 80040d0:	20a0      	movs	r0, #160	@ 0xa0
 80040d2:	7460      	strb	r0, [r4, #17]
 80040d4:	213f      	movs	r1, #63	@ 0x3f
 80040d6:	e0b7      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 80040d8:	8be2      	ldrh	r2, [r4, #30]
 80040da:	03ab      	lsls	r3, r5, #14
 80040dc:	429a      	cmp	r2, r3
 80040de:	d100      	bne.n	80040e2 <PE_SubStateMachine_VconnSwap+0xd2>
 80040e0:	e0ac      	b.n	800423c <PE_SubStateMachine_VconnSwap+0x22c>
 80040e2:	780a      	ldrb	r2, [r1, #0]
 80040e4:	2a11      	cmp	r2, #17
 80040e6:	d11b      	bne.n	8004120 <PE_SubStateMachine_VconnSwap+0x110>
 80040e8:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80040ea:	4b70      	ldr	r3, [pc, #448]	@ (80042ac <.text_13>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d116      	bne.n	8004120 <PE_SubStateMachine_VconnSwap+0x110>
 80040f2:	7008      	strb	r0, [r1, #0]
 80040f4:	0020      	movs	r0, r4
 80040f6:	f7fc fd62 	bl	8000bbe <PE_Clear_RxEvent>
 80040fa:	68a0      	ldr	r0, [r4, #8]
 80040fc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80040fe:	2a00      	cmp	r2, #0
 8004100:	d002      	beq.n	8004108 <PE_SubStateMachine_VconnSwap+0xf8>
 8004102:	2100      	movs	r1, #0
 8004104:	7c20      	ldrb	r0, [r4, #16]
 8004106:	4790      	blx	r2
 8004108:	6960      	ldr	r0, [r4, #20]
 800410a:	4006      	ands	r6, r0
 800410c:	6166      	str	r6, [r4, #20]
 800410e:	7467      	strb	r7, [r4, #17]
 8004110:	2500      	movs	r5, #0
 8004112:	2142      	movs	r1, #66	@ 0x42
 8004114:	7c20      	ldrb	r0, [r4, #16]
 8004116:	f7fc fae7 	bl	80006e8 <USBPD_PE_Notification>
 800411a:	8465      	strh	r5, [r4, #34]	@ 0x22
 800411c:	4964      	ldr	r1, [pc, #400]	@ (80042b0 <.text_14>)
 800411e:	5465      	strb	r5, [r4, r1]
 8004120:	e0a4      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004122:	68a0      	ldr	r0, [r4, #8]
 8004124:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004126:	2a00      	cmp	r2, #0
 8004128:	d002      	beq.n	8004130 <PE_SubStateMachine_VconnSwap+0x120>
 800412a:	2101      	movs	r1, #1
 800412c:	7c20      	ldrb	r0, [r4, #16]
 800412e:	4790      	blx	r2
 8004130:	20a1      	movs	r0, #161	@ 0xa1
 8004132:	7460      	strb	r0, [r4, #17]
 8004134:	2000      	movs	r0, #0
 8004136:	495e      	ldr	r1, [pc, #376]	@ (80042b0 <.text_14>)
 8004138:	5460      	strb	r0, [r4, r1]
 800413a:	e097      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 800413c:	2000      	movs	r0, #0
 800413e:	9000      	str	r0, [sp, #0]
 8004140:	2303      	movs	r3, #3
 8004142:	2206      	movs	r2, #6
 8004144:	2100      	movs	r1, #0
 8004146:	0020      	movs	r0, r4
 8004148:	f7fd fb16 	bl	8001778 <PE_Send_CtrlMessage>
 800414c:	2800      	cmp	r0, #0
 800414e:	d1f4      	bne.n	800413a <PE_SubStateMachine_VconnSwap+0x12a>
 8004150:	6960      	ldr	r0, [r4, #20]
 8004152:	4006      	ands	r6, r0
 8004154:	6166      	str	r6, [r4, #20]
 8004156:	2142      	movs	r1, #66	@ 0x42
 8004158:	e076      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 800415a:	2000      	movs	r0, #0
 800415c:	9000      	str	r0, [sp, #0]
 800415e:	23a3      	movs	r3, #163	@ 0xa3
 8004160:	220b      	movs	r2, #11
 8004162:	2100      	movs	r1, #0
 8004164:	0020      	movs	r0, r4
 8004166:	f7fd fb07 	bl	8001778 <PE_Send_CtrlMessage>
 800416a:	2800      	cmp	r0, #0
 800416c:	d1e5      	bne.n	800413a <PE_SubStateMachine_VconnSwap+0x12a>
 800416e:	6960      	ldr	r0, [r4, #20]
 8004170:	02e9      	lsls	r1, r5, #11
 8004172:	4301      	orrs	r1, r0
 8004174:	6161      	str	r1, [r4, #20]
 8004176:	484f      	ldr	r0, [pc, #316]	@ (80042b4 <.text_15>)
 8004178:	83e0      	strh	r0, [r4, #30]
 800417a:	251b      	movs	r5, #27
 800417c:	213e      	movs	r1, #62	@ 0x3e
 800417e:	e063      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 8004180:	780a      	ldrb	r2, [r1, #0]
 8004182:	2a11      	cmp	r2, #17
 8004184:	d155      	bne.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 8004186:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8004188:	23f0      	movs	r3, #240	@ 0xf0
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4013      	ands	r3, r2
 800418e:	d150      	bne.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 8004190:	06d2      	lsls	r2, r2, #27
 8004192:	0ed2      	lsrs	r2, r2, #27
 8004194:	2a03      	cmp	r2, #3
 8004196:	d006      	beq.n	80041a6 <PE_SubStateMachine_VconnSwap+0x196>
 8004198:	2a04      	cmp	r2, #4
 800419a:	d024      	beq.n	80041e6 <PE_SubStateMachine_VconnSwap+0x1d6>
 800419c:	2a0c      	cmp	r2, #12
 800419e:	d014      	beq.n	80041ca <PE_SubStateMachine_VconnSwap+0x1ba>
 80041a0:	2a10      	cmp	r2, #16
 80041a2:	d02e      	beq.n	8004202 <PE_SubStateMachine_VconnSwap+0x1f2>
 80041a4:	e045      	b.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	0413      	lsls	r3, r2, #16
 80041ac:	0fdb      	lsrs	r3, r3, #31
 80041ae:	d001      	beq.n	80041b4 <PE_SubStateMachine_VconnSwap+0x1a4>
 80041b0:	229f      	movs	r2, #159	@ 0x9f
 80041b2:	e000      	b.n	80041b6 <PE_SubStateMachine_VconnSwap+0x1a6>
 80041b4:	22a0      	movs	r2, #160	@ 0xa0
 80041b6:	7462      	strb	r2, [r4, #17]
 80041b8:	780a      	ldrb	r2, [r1, #0]
 80041ba:	2a14      	cmp	r2, #20
 80041bc:	d003      	beq.n	80041c6 <PE_SubStateMachine_VconnSwap+0x1b6>
 80041be:	7008      	strb	r0, [r1, #0]
 80041c0:	0020      	movs	r0, r4
 80041c2:	f7fc fcfc 	bl	8000bbe <PE_Clear_RxEvent>
 80041c6:	213f      	movs	r1, #63	@ 0x3f
 80041c8:	e030      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 80041ca:	6962      	ldr	r2, [r4, #20]
 80041cc:	4032      	ands	r2, r6
 80041ce:	6162      	str	r2, [r4, #20]
 80041d0:	7467      	strb	r7, [r4, #17]
 80041d2:	2500      	movs	r5, #0
 80041d4:	780a      	ldrb	r2, [r1, #0]
 80041d6:	2a14      	cmp	r2, #20
 80041d8:	d003      	beq.n	80041e2 <PE_SubStateMachine_VconnSwap+0x1d2>
 80041da:	7008      	strb	r0, [r1, #0]
 80041dc:	0020      	movs	r0, r4
 80041de:	f7fc fcee 	bl	8000bbe <PE_Clear_RxEvent>
 80041e2:	2140      	movs	r1, #64	@ 0x40
 80041e4:	e022      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 80041e6:	6962      	ldr	r2, [r4, #20]
 80041e8:	4032      	ands	r2, r6
 80041ea:	6162      	str	r2, [r4, #20]
 80041ec:	7467      	strb	r7, [r4, #17]
 80041ee:	2500      	movs	r5, #0
 80041f0:	780a      	ldrb	r2, [r1, #0]
 80041f2:	2a14      	cmp	r2, #20
 80041f4:	d003      	beq.n	80041fe <PE_SubStateMachine_VconnSwap+0x1ee>
 80041f6:	7008      	strb	r0, [r1, #0]
 80041f8:	0020      	movs	r0, r4
 80041fa:	f7fc fce0 	bl	8000bbe <PE_Clear_RxEvent>
 80041fe:	2141      	movs	r1, #65	@ 0x41
 8004200:	e014      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	0413      	lsls	r3, r2, #16
 8004208:	0fdb      	lsrs	r3, r3, #31
 800420a:	d102      	bne.n	8004212 <PE_SubStateMachine_VconnSwap+0x202>
 800420c:	22a4      	movs	r2, #164	@ 0xa4
 800420e:	7462      	strb	r2, [r4, #17]
 8004210:	e004      	b.n	800421c <PE_SubStateMachine_VconnSwap+0x20c>
 8004212:	6962      	ldr	r2, [r4, #20]
 8004214:	4032      	ands	r2, r6
 8004216:	6162      	str	r2, [r4, #20]
 8004218:	7467      	strb	r7, [r4, #17]
 800421a:	2500      	movs	r5, #0
 800421c:	780a      	ldrb	r2, [r1, #0]
 800421e:	2a14      	cmp	r2, #20
 8004220:	d003      	beq.n	800422a <PE_SubStateMachine_VconnSwap+0x21a>
 8004222:	7008      	strb	r0, [r1, #0]
 8004224:	0020      	movs	r0, r4
 8004226:	f7fc fcca 	bl	8000bbe <PE_Clear_RxEvent>
 800422a:	2143      	movs	r1, #67	@ 0x43
 800422c:	7c20      	ldrb	r0, [r4, #16]
 800422e:	f7fc fa5b 	bl	80006e8 <USBPD_PE_Notification>
 8004232:	8be0      	ldrh	r0, [r4, #30]
 8004234:	2180      	movs	r1, #128	@ 0x80
 8004236:	0209      	lsls	r1, r1, #8
 8004238:	4288      	cmp	r0, r1
 800423a:	d117      	bne.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 800423c:	6960      	ldr	r0, [r4, #20]
 800423e:	4006      	ands	r6, r0
 8004240:	6166      	str	r6, [r4, #20]
 8004242:	7467      	strb	r7, [r4, #17]
 8004244:	2500      	movs	r5, #0
 8004246:	211c      	movs	r1, #28
 8004248:	7c20      	ldrb	r0, [r4, #16]
 800424a:	f7fc fa4d 	bl	80006e8 <USBPD_PE_Notification>
 800424e:	e00d      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004250:	68a0      	ldr	r0, [r4, #8]
 8004252:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004254:	2a00      	cmp	r2, #0
 8004256:	d002      	beq.n	800425e <PE_SubStateMachine_VconnSwap+0x24e>
 8004258:	2101      	movs	r1, #1
 800425a:	7c20      	ldrb	r0, [r4, #16]
 800425c:	4790      	blx	r2
 800425e:	6960      	ldr	r0, [r4, #20]
 8004260:	4006      	ands	r6, r0
 8004262:	6166      	str	r6, [r4, #20]
 8004264:	7467      	strb	r7, [r4, #17]
 8004266:	2500      	movs	r5, #0
 8004268:	4813      	ldr	r0, [pc, #76]	@ (80042b8 <.text_16>)
 800426a:	8460      	strh	r0, [r4, #34]	@ 0x22
 800426c:	0028      	movs	r0, r5
 800426e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004270 <PE_ExtRevisionInteroperability_Cable>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	000a      	movs	r2, r1
 8004274:	6843      	ldr	r3, [r0, #4]
 8004276:	681c      	ldr	r4, [r3, #0]
 8004278:	2103      	movs	r1, #3
 800427a:	2503      	movs	r5, #3
 800427c:	4025      	ands	r5, r4
 800427e:	42aa      	cmp	r2, r5
 8004280:	d300      	bcc.n	8004284 <PE_ExtRevisionInteroperability_Cable+0x14>
 8004282:	002a      	movs	r2, r5
 8004284:	4d06      	ldr	r5, [pc, #24]	@ (80042a0 <.text_10>)
 8004286:	4025      	ands	r5, r4
 8004288:	0694      	lsls	r4, r2, #26
 800428a:	068a      	lsls	r2, r1, #26
 800428c:	4022      	ands	r2, r4
 800428e:	432a      	orrs	r2, r5
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	0e92      	lsrs	r2, r2, #26
 8004294:	4011      	ands	r1, r2
 8004296:	7c00      	ldrb	r0, [r0, #16]
 8004298:	f001 fb85 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 800429c:	bd31      	pop	{r0, r4, r5, pc}
	...

080042a0 <.text_10>:
 80042a0:	f3ffffff 	.word	0xf3ffffff

080042a4 <.text_11>:
 80042a4:	ffffefff 	.word	0xffffefff

080042a8 <.text_12>:
 80042a8:	00008096 	.word	0x00008096

080042ac <.text_13>:
 80042ac:	0000f01f 	.word	0x0000f01f

080042b0 <.text_14>:
 80042b0:	00000262 	.word	0x00000262

080042b4 <.text_15>:
 80042b4:	0000801b 	.word	0x0000801b

080042b8 <.text_16>:
 80042b8:	0000802d 	.word	0x0000802d

080042bc <USBPD_PE_SVDM_RequestIdentity>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	000a      	movs	r2, r1
 80042c0:	49aa      	ldr	r1, [pc, #680]	@ (800456c <.text_8>)
 80042c2:	0083      	lsls	r3, r0, #2
 80042c4:	58cb      	ldr	r3, [r1, r3]
 80042c6:	2110      	movs	r1, #16
 80042c8:	2401      	movs	r4, #1
 80042ca:	681d      	ldr	r5, [r3, #0]
 80042cc:	686d      	ldr	r5, [r5, #4]
 80042ce:	0a6d      	lsrs	r5, r5, #9
 80042d0:	4025      	ands	r5, r4
 80042d2:	d004      	beq.n	80042de <USBPD_PE_SVDM_RequestIdentity+0x22>
 80042d4:	68dd      	ldr	r5, [r3, #12]
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	d001      	beq.n	80042de <USBPD_PE_SVDM_RequestIdentity+0x22>
 80042da:	2a02      	cmp	r2, #2
 80042dc:	d101      	bne.n	80042e2 <USBPD_PE_SVDM_RequestIdentity+0x26>
 80042de:	2102      	movs	r1, #2
 80042e0:	e02d      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 80042e2:	2532      	movs	r5, #50	@ 0x32
 80042e4:	5d5d      	ldrb	r5, [r3, r5]
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	d104      	bne.n	80042f4 <USBPD_PE_SVDM_RequestIdentity+0x38>
 80042ea:	685d      	ldr	r5, [r3, #4]
 80042ec:	682d      	ldr	r5, [r5, #0]
 80042ee:	0b2d      	lsrs	r5, r5, #12
 80042f0:	402c      	ands	r4, r5
 80042f2:	d101      	bne.n	80042f8 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 80042f4:	2103      	movs	r1, #3
 80042f6:	e022      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 80042f8:	2433      	movs	r4, #51	@ 0x33
 80042fa:	551a      	strb	r2, [r3, r4]
 80042fc:	2507      	movs	r5, #7
 80042fe:	2a00      	cmp	r2, #0
 8004300:	d002      	beq.n	8004308 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 8004302:	2a01      	cmp	r2, #1
 8004304:	d008      	beq.n	8004318 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 8004306:	e01a      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	0a12      	lsrs	r2, r2, #8
 800430e:	4015      	ands	r5, r2
 8004310:	2d03      	cmp	r5, #3
 8004312:	d114      	bne.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004314:	217d      	movs	r1, #125	@ 0x7d
 8004316:	e00c      	b.n	8004332 <USBPD_PE_SVDM_RequestIdentity+0x76>
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	4eab      	ldr	r6, [pc, #684]	@ (80045cc <.text_10>)
 800431e:	4016      	ands	r6, r2
 8004320:	2782      	movs	r7, #130	@ 0x82
 8004322:	007f      	lsls	r7, r7, #1
 8004324:	42be      	cmp	r6, r7
 8004326:	d003      	beq.n	8004330 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8004328:	0a12      	lsrs	r2, r2, #8
 800432a:	4015      	ands	r5, r2
 800432c:	2d03      	cmp	r5, #3
 800432e:	d106      	bne.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004330:	2105      	movs	r1, #5
 8004332:	2232      	movs	r2, #50	@ 0x32
 8004334:	5499      	strb	r1, [r3, r2]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800433a:	4788      	blx	r1
 800433c:	2100      	movs	r1, #0
 800433e:	0008      	movs	r0, r1
 8004340:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004342 <USBPD_PE_SVDM_RequestSVID>:
 8004342:	b570      	push	{r4, r5, r6, lr}
 8004344:	000a      	movs	r2, r1
 8004346:	4989      	ldr	r1, [pc, #548]	@ (800456c <.text_8>)
 8004348:	0083      	lsls	r3, r0, #2
 800434a:	58cb      	ldr	r3, [r1, r3]
 800434c:	2110      	movs	r1, #16
 800434e:	68dc      	ldr	r4, [r3, #12]
 8004350:	2c00      	cmp	r4, #0
 8004352:	d001      	beq.n	8004358 <USBPD_PE_SVDM_RequestSVID+0x16>
 8004354:	2a02      	cmp	r2, #2
 8004356:	d101      	bne.n	800435c <USBPD_PE_SVDM_RequestSVID+0x1a>
 8004358:	2102      	movs	r1, #2
 800435a:	e020      	b.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800435c:	2432      	movs	r4, #50	@ 0x32
 800435e:	5d1c      	ldrb	r4, [r3, r4]
 8004360:	2c00      	cmp	r4, #0
 8004362:	d105      	bne.n	8004370 <USBPD_PE_SVDM_RequestSVID+0x2e>
 8004364:	685c      	ldr	r4, [r3, #4]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	2401      	movs	r4, #1
 800436a:	0b2e      	lsrs	r6, r5, #12
 800436c:	4026      	ands	r6, r4
 800436e:	d101      	bne.n	8004374 <USBPD_PE_SVDM_RequestSVID+0x32>
 8004370:	2103      	movs	r1, #3
 8004372:	e014      	b.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004374:	056d      	lsls	r5, r5, #21
 8004376:	0f6d      	lsrs	r5, r5, #29
 8004378:	2d03      	cmp	r5, #3
 800437a:	d110      	bne.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800437c:	2533      	movs	r5, #51	@ 0x33
 800437e:	555a      	strb	r2, [r3, r5]
 8004380:	257f      	movs	r5, #127	@ 0x7f
 8004382:	2632      	movs	r6, #50	@ 0x32
 8004384:	559d      	strb	r5, [r3, r6]
 8004386:	2a00      	cmp	r2, #0
 8004388:	d005      	beq.n	8004396 <USBPD_PE_SVDM_RequestSVID+0x54>
 800438a:	2a01      	cmp	r2, #1
 800438c:	d107      	bne.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	0c12      	lsrs	r2, r2, #16
 8004392:	4014      	ands	r4, r2
 8004394:	d003      	beq.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004396:	6899      	ldr	r1, [r3, #8]
 8004398:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800439a:	4788      	blx	r1
 800439c:	2100      	movs	r1, #0
 800439e:	0008      	movs	r0, r1
 80043a0:	bd70      	pop	{r4, r5, r6, pc}

080043a2 <USBPD_PE_SVDM_RequestMode>:
 80043a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a4:	000b      	movs	r3, r1
 80043a6:	4971      	ldr	r1, [pc, #452]	@ (800456c <.text_8>)
 80043a8:	0084      	lsls	r4, r0, #2
 80043aa:	590c      	ldr	r4, [r1, r4]
 80043ac:	2110      	movs	r1, #16
 80043ae:	68e5      	ldr	r5, [r4, #12]
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	d001      	beq.n	80043b8 <USBPD_PE_SVDM_RequestMode+0x16>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d101      	bne.n	80043bc <USBPD_PE_SVDM_RequestMode+0x1a>
 80043b8:	2102      	movs	r1, #2
 80043ba:	e023      	b.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043bc:	2532      	movs	r5, #50	@ 0x32
 80043be:	5d65      	ldrb	r5, [r4, r5]
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	d105      	bne.n	80043d0 <USBPD_PE_SVDM_RequestMode+0x2e>
 80043c4:	6865      	ldr	r5, [r4, #4]
 80043c6:	682e      	ldr	r6, [r5, #0]
 80043c8:	2501      	movs	r5, #1
 80043ca:	0b37      	lsrs	r7, r6, #12
 80043cc:	402f      	ands	r7, r5
 80043ce:	d101      	bne.n	80043d4 <USBPD_PE_SVDM_RequestMode+0x32>
 80043d0:	2103      	movs	r1, #3
 80043d2:	e017      	b.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043d4:	0576      	lsls	r6, r6, #21
 80043d6:	0f76      	lsrs	r6, r6, #29
 80043d8:	2e03      	cmp	r6, #3
 80043da:	d113      	bne.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043dc:	2633      	movs	r6, #51	@ 0x33
 80043de:	55a3      	strb	r3, [r4, r6]
 80043e0:	2681      	movs	r6, #129	@ 0x81
 80043e2:	2732      	movs	r7, #50	@ 0x32
 80043e4:	55e6      	strb	r6, [r4, r7]
 80043e6:	2696      	movs	r6, #150	@ 0x96
 80043e8:	00b6      	lsls	r6, r6, #2
 80043ea:	53a2      	strh	r2, [r4, r6]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <USBPD_PE_SVDM_RequestMode+0x5a>
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d107      	bne.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043f4:	6962      	ldr	r2, [r4, #20]
 80043f6:	0c12      	lsrs	r2, r2, #16
 80043f8:	4015      	ands	r5, r2
 80043fa:	d003      	beq.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043fc:	68a1      	ldr	r1, [r4, #8]
 80043fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004400:	4788      	blx	r1
 8004402:	2100      	movs	r1, #0
 8004404:	0008      	movs	r0, r1
 8004406:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004408 <USBPD_PE_SVDM_RequestModeEnter>:
 8004408:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800440a:	4858      	ldr	r0, [pc, #352]	@ (800456c <.text_8>)
 800440c:	466c      	mov	r4, sp
 800440e:	7824      	ldrb	r4, [r4, #0]
 8004410:	00a4      	lsls	r4, r4, #2
 8004412:	5904      	ldr	r4, [r0, r4]
 8004414:	2010      	movs	r0, #16
 8004416:	68e5      	ldr	r5, [r4, #12]
 8004418:	2d00      	cmp	r5, #0
 800441a:	d101      	bne.n	8004420 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 800441c:	2002      	movs	r0, #2
 800441e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004420:	2532      	movs	r5, #50	@ 0x32
 8004422:	5d65      	ldrb	r5, [r4, r5]
 8004424:	2d00      	cmp	r5, #0
 8004426:	d105      	bne.n	8004434 <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 8004428:	6865      	ldr	r5, [r4, #4]
 800442a:	682e      	ldr	r6, [r5, #0]
 800442c:	2501      	movs	r5, #1
 800442e:	0b37      	lsrs	r7, r6, #12
 8004430:	402f      	ands	r7, r5
 8004432:	d101      	bne.n	8004438 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 8004434:	2003      	movs	r0, #3
 8004436:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004438:	27e1      	movs	r7, #225	@ 0xe1
 800443a:	00ff      	lsls	r7, r7, #3
 800443c:	4037      	ands	r7, r6
 800443e:	26c2      	movs	r6, #194	@ 0xc2
 8004440:	00b6      	lsls	r6, r6, #2
 8004442:	42b7      	cmp	r7, r6
 8004444:	d11e      	bne.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004446:	2633      	movs	r6, #51	@ 0x33
 8004448:	55a1      	strb	r1, [r4, r6]
 800444a:	2682      	movs	r6, #130	@ 0x82
 800444c:	2732      	movs	r7, #50	@ 0x32
 800444e:	55e6      	strb	r6, [r4, r7]
 8004450:	2696      	movs	r6, #150	@ 0x96
 8004452:	00b6      	lsls	r6, r6, #2
 8004454:	53a2      	strh	r2, [r4, r6]
 8004456:	6966      	ldr	r6, [r4, #20]
 8004458:	4aaf      	ldr	r2, [pc, #700]	@ (8004718 <.text_13>)
 800445a:	4032      	ands	r2, r6
 800445c:	019e      	lsls	r6, r3, #6
 800445e:	23e0      	movs	r3, #224	@ 0xe0
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4033      	ands	r3, r6
 8004464:	4313      	orrs	r3, r2
 8004466:	6163      	str	r3, [r4, #20]
 8004468:	2900      	cmp	r1, #0
 800446a:	d005      	beq.n	8004478 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 800446c:	2902      	cmp	r1, #2
 800446e:	d000      	beq.n	8004472 <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004470:	d208      	bcs.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004472:	0c19      	lsrs	r1, r3, #16
 8004474:	400d      	ands	r5, r1
 8004476:	d005      	beq.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004478:	4668      	mov	r0, sp
 800447a:	7800      	ldrb	r0, [r0, #0]
 800447c:	68a1      	ldr	r1, [r4, #8]
 800447e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004480:	4788      	blx	r1
 8004482:	2000      	movs	r0, #0
 8004484:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004486 <USBPD_PE_SVDM_RequestModeExit>:
 8004486:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004488:	4838      	ldr	r0, [pc, #224]	@ (800456c <.text_8>)
 800448a:	466c      	mov	r4, sp
 800448c:	7824      	ldrb	r4, [r4, #0]
 800448e:	00a4      	lsls	r4, r4, #2
 8004490:	5904      	ldr	r4, [r0, r4]
 8004492:	2010      	movs	r0, #16
 8004494:	68e5      	ldr	r5, [r4, #12]
 8004496:	2d00      	cmp	r5, #0
 8004498:	d101      	bne.n	800449e <USBPD_PE_SVDM_RequestModeExit+0x18>
 800449a:	2002      	movs	r0, #2
 800449c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800449e:	2532      	movs	r5, #50	@ 0x32
 80044a0:	5d65      	ldrb	r5, [r4, r5]
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	d105      	bne.n	80044b2 <USBPD_PE_SVDM_RequestModeExit+0x2c>
 80044a6:	6865      	ldr	r5, [r4, #4]
 80044a8:	682e      	ldr	r6, [r5, #0]
 80044aa:	2501      	movs	r5, #1
 80044ac:	0b37      	lsrs	r7, r6, #12
 80044ae:	402f      	ands	r7, r5
 80044b0:	d101      	bne.n	80044b6 <USBPD_PE_SVDM_RequestModeExit+0x30>
 80044b2:	2003      	movs	r0, #3
 80044b4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80044b6:	27e1      	movs	r7, #225	@ 0xe1
 80044b8:	00ff      	lsls	r7, r7, #3
 80044ba:	4037      	ands	r7, r6
 80044bc:	26c2      	movs	r6, #194	@ 0xc2
 80044be:	00b6      	lsls	r6, r6, #2
 80044c0:	42b7      	cmp	r7, r6
 80044c2:	d11e      	bne.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044c4:	2633      	movs	r6, #51	@ 0x33
 80044c6:	55a1      	strb	r1, [r4, r6]
 80044c8:	2683      	movs	r6, #131	@ 0x83
 80044ca:	2732      	movs	r7, #50	@ 0x32
 80044cc:	55e6      	strb	r6, [r4, r7]
 80044ce:	2696      	movs	r6, #150	@ 0x96
 80044d0:	00b6      	lsls	r6, r6, #2
 80044d2:	53a2      	strh	r2, [r4, r6]
 80044d4:	6966      	ldr	r6, [r4, #20]
 80044d6:	4a90      	ldr	r2, [pc, #576]	@ (8004718 <.text_13>)
 80044d8:	4032      	ands	r2, r6
 80044da:	019e      	lsls	r6, r3, #6
 80044dc:	23e0      	movs	r3, #224	@ 0xe0
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	4033      	ands	r3, r6
 80044e2:	4313      	orrs	r3, r2
 80044e4:	6163      	str	r3, [r4, #20]
 80044e6:	2900      	cmp	r1, #0
 80044e8:	d005      	beq.n	80044f6 <USBPD_PE_SVDM_RequestModeExit+0x70>
 80044ea:	2902      	cmp	r1, #2
 80044ec:	d000      	beq.n	80044f0 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 80044ee:	d208      	bcs.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044f0:	0c19      	lsrs	r1, r3, #16
 80044f2:	400d      	ands	r5, r1
 80044f4:	d005      	beq.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044f6:	4668      	mov	r0, sp
 80044f8:	7800      	ldrb	r0, [r0, #0]
 80044fa:	68a1      	ldr	r1, [r4, #8]
 80044fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80044fe:	4788      	blx	r1
 8004500:	2000      	movs	r0, #0
 8004502:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004504 <USBPD_PE_SVDM_RequestSpecific>:
 8004504:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004506:	4819      	ldr	r0, [pc, #100]	@ (800456c <.text_8>)
 8004508:	466c      	mov	r4, sp
 800450a:	7824      	ldrb	r4, [r4, #0]
 800450c:	00a4      	lsls	r4, r4, #2
 800450e:	5904      	ldr	r4, [r0, r4]
 8004510:	2010      	movs	r0, #16
 8004512:	68e5      	ldr	r5, [r4, #12]
 8004514:	2d00      	cmp	r5, #0
 8004516:	d101      	bne.n	800451c <USBPD_PE_SVDM_RequestSpecific+0x18>
 8004518:	2002      	movs	r0, #2
 800451a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800451c:	2532      	movs	r5, #50	@ 0x32
 800451e:	5d65      	ldrb	r5, [r4, r5]
 8004520:	2d00      	cmp	r5, #0
 8004522:	d105      	bne.n	8004530 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 8004524:	6865      	ldr	r5, [r4, #4]
 8004526:	682d      	ldr	r5, [r5, #0]
 8004528:	2601      	movs	r6, #1
 800452a:	0b2f      	lsrs	r7, r5, #12
 800452c:	4037      	ands	r7, r6
 800452e:	d101      	bne.n	8004534 <USBPD_PE_SVDM_RequestSpecific+0x30>
 8004530:	2003      	movs	r0, #3
 8004532:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004534:	6967      	ldr	r7, [r4, #20]
 8004536:	0c3f      	lsrs	r7, r7, #16
 8004538:	403e      	ands	r6, r7
 800453a:	d101      	bne.n	8004540 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 800453c:	000e      	movs	r6, r1
 800453e:	d113      	bne.n	8004568 <USBPD_PE_SVDM_RequestSpecific+0x64>
 8004540:	056d      	lsls	r5, r5, #21
 8004542:	0f6d      	lsrs	r5, r5, #29
 8004544:	2d03      	cmp	r5, #3
 8004546:	d10f      	bne.n	8004568 <USBPD_PE_SVDM_RequestSpecific+0x64>
 8004548:	2033      	movs	r0, #51	@ 0x33
 800454a:	5421      	strb	r1, [r4, r0]
 800454c:	2085      	movs	r0, #133	@ 0x85
 800454e:	2132      	movs	r1, #50	@ 0x32
 8004550:	5460      	strb	r0, [r4, r1]
 8004552:	2095      	movs	r0, #149	@ 0x95
 8004554:	0080      	lsls	r0, r0, #2
 8004556:	1820      	adds	r0, r4, r0
 8004558:	6002      	str	r2, [r0, #0]
 800455a:	8083      	strh	r3, [r0, #4]
 800455c:	4668      	mov	r0, sp
 800455e:	7800      	ldrb	r0, [r0, #0]
 8004560:	68a1      	ldr	r1, [r4, #8]
 8004562:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004564:	4788      	blx	r1
 8004566:	2000      	movs	r0, #0
 8004568:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

0800456c <.text_8>:
 800456c:	2000017c 	.word	0x2000017c

08004570 <USBPD_PE_SVDM_RequestAttention>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	000b      	movs	r3, r1
 8004574:	4969      	ldr	r1, [pc, #420]	@ (800471c <.text_14>)
 8004576:	0084      	lsls	r4, r0, #2
 8004578:	590d      	ldr	r5, [r1, r4]
 800457a:	2110      	movs	r1, #16
 800457c:	68ec      	ldr	r4, [r5, #12]
 800457e:	2c00      	cmp	r4, #0
 8004580:	d001      	beq.n	8004586 <USBPD_PE_SVDM_RequestAttention+0x16>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <USBPD_PE_SVDM_RequestAttention+0x1a>
 8004586:	2102      	movs	r1, #2
 8004588:	e01e      	b.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 800458a:	2332      	movs	r3, #50	@ 0x32
 800458c:	5ceb      	ldrb	r3, [r5, r3]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d104      	bne.n	800459c <USBPD_PE_SVDM_RequestAttention+0x2c>
 8004592:	686b      	ldr	r3, [r5, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	04dc      	lsls	r4, r3, #19
 8004598:	0fe4      	lsrs	r4, r4, #31
 800459a:	d101      	bne.n	80045a0 <USBPD_PE_SVDM_RequestAttention+0x30>
 800459c:	2103      	movs	r1, #3
 800459e:	e013      	b.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 80045a0:	055b      	lsls	r3, r3, #21
 80045a2:	0f5b      	lsrs	r3, r3, #29
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d10f      	bne.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 80045a8:	2400      	movs	r4, #0
 80045aa:	2333      	movs	r3, #51	@ 0x33
 80045ac:	54ec      	strb	r4, [r5, r3]
 80045ae:	2184      	movs	r1, #132	@ 0x84
 80045b0:	2332      	movs	r3, #50	@ 0x32
 80045b2:	54e9      	strb	r1, [r5, r3]
 80045b4:	2195      	movs	r1, #149	@ 0x95
 80045b6:	0089      	lsls	r1, r1, #2
 80045b8:	1869      	adds	r1, r5, r1
 80045ba:	2306      	movs	r3, #6
 80045bc:	600b      	str	r3, [r1, #0]
 80045be:	808a      	strh	r2, [r1, #4]
 80045c0:	68a9      	ldr	r1, [r5, #8]
 80045c2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80045c4:	4788      	blx	r1
 80045c6:	2100      	movs	r1, #0
 80045c8:	0008      	movs	r0, r1
 80045ca:	bd32      	pop	{r1, r4, r5, pc}

080045cc <.text_10>:
 80045cc:	00000704 	.word	0x00000704

080045d0 <USBPD_PE_UVDM_RequestMessage>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	000a      	movs	r2, r1
 80045d4:	4951      	ldr	r1, [pc, #324]	@ (800471c <.text_14>)
 80045d6:	0083      	lsls	r3, r0, #2
 80045d8:	58cb      	ldr	r3, [r1, r3]
 80045da:	2110      	movs	r1, #16
 80045dc:	68dc      	ldr	r4, [r3, #12]
 80045de:	2c00      	cmp	r4, #0
 80045e0:	d101      	bne.n	80045e6 <USBPD_PE_UVDM_RequestMessage+0x16>
 80045e2:	2102      	movs	r1, #2
 80045e4:	e01d      	b.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 80045e6:	2432      	movs	r4, #50	@ 0x32
 80045e8:	5d1c      	ldrb	r4, [r3, r4]
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	d105      	bne.n	80045fa <USBPD_PE_UVDM_RequestMessage+0x2a>
 80045ee:	685c      	ldr	r4, [r3, #4]
 80045f0:	6824      	ldr	r4, [r4, #0]
 80045f2:	2501      	movs	r5, #1
 80045f4:	0b26      	lsrs	r6, r4, #12
 80045f6:	402e      	ands	r6, r5
 80045f8:	d101      	bne.n	80045fe <USBPD_PE_UVDM_RequestMessage+0x2e>
 80045fa:	2103      	movs	r1, #3
 80045fc:	e011      	b.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 80045fe:	0be6      	lsrs	r6, r4, #15
 8004600:	4035      	ands	r5, r6
 8004602:	d101      	bne.n	8004608 <USBPD_PE_UVDM_RequestMessage+0x38>
 8004604:	0015      	movs	r5, r2
 8004606:	d10c      	bne.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 8004608:	0564      	lsls	r4, r4, #21
 800460a:	0f64      	lsrs	r4, r4, #29
 800460c:	2c03      	cmp	r4, #3
 800460e:	d108      	bne.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 8004610:	2133      	movs	r1, #51	@ 0x33
 8004612:	545a      	strb	r2, [r3, r1]
 8004614:	2186      	movs	r1, #134	@ 0x86
 8004616:	2232      	movs	r2, #50	@ 0x32
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	6899      	ldr	r1, [r3, #8]
 800461c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800461e:	4788      	blx	r1
 8004620:	2100      	movs	r1, #0
 8004622:	0008      	movs	r0, r1
 8004624:	bd70      	pop	{r4, r5, r6, pc}

08004626 <PE_Receive_SVDM>:
 8004626:	493e      	ldr	r1, [pc, #248]	@ (8004720 <.text_15>)
 8004628:	1842      	adds	r2, r0, r1
 800462a:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 800462c:	0449      	lsls	r1, r1, #17
 800462e:	0f49      	lsrs	r1, r1, #29
 8004630:	1e49      	subs	r1, r1, #1
 8004632:	7611      	strb	r1, [r2, #24]
 8004634:	2131      	movs	r1, #49	@ 0x31
 8004636:	5c41      	ldrb	r1, [r0, r1]
 8004638:	2900      	cmp	r1, #0
 800463a:	d000      	beq.n	800463e <PE_Receive_SVDM+0x18>
 800463c:	4770      	bx	lr
 800463e:	b570      	push	{r4, r5, r6, lr}
 8004640:	2300      	movs	r3, #0
 8004642:	e010      	b.n	8004666 <PE_Receive_SVDM+0x40>
 8004644:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8004646:	009c      	lsls	r4, r3, #2
 8004648:	1909      	adds	r1, r1, r4
 800464a:	798c      	ldrb	r4, [r1, #6]
 800464c:	79cd      	ldrb	r5, [r1, #7]
 800464e:	022d      	lsls	r5, r5, #8
 8004650:	1964      	adds	r4, r4, r5
 8004652:	7a0d      	ldrb	r5, [r1, #8]
 8004654:	042d      	lsls	r5, r5, #16
 8004656:	1964      	adds	r4, r4, r5
 8004658:	7a49      	ldrb	r1, [r1, #9]
 800465a:	0609      	lsls	r1, r1, #24
 800465c:	1861      	adds	r1, r4, r1
 800465e:	009c      	lsls	r4, r3, #2
 8004660:	5111      	str	r1, [r2, r4]
 8004662:	1c5b      	adds	r3, r3, #1
 8004664:	b2db      	uxtb	r3, r3
 8004666:	7e11      	ldrb	r1, [r2, #24]
 8004668:	428b      	cmp	r3, r1
 800466a:	dbeb      	blt.n	8004644 <PE_Receive_SVDM+0x1e>
 800466c:	0004      	movs	r4, r0
 800466e:	2503      	movs	r5, #3
 8004670:	4b2c      	ldr	r3, [pc, #176]	@ (8004724 <.text_16>)
 8004672:	482d      	ldr	r0, [pc, #180]	@ (8004728 <.text_17>)
 8004674:	2694      	movs	r6, #148	@ 0x94
 8004676:	00b6      	lsls	r6, r6, #2
 8004678:	5da6      	ldrb	r6, [r4, r6]
 800467a:	06f6      	lsls	r6, r6, #27
 800467c:	0ef6      	lsrs	r6, r6, #27
 800467e:	1e76      	subs	r6, r6, #1
 8004680:	d00d      	beq.n	800469e <PE_Receive_SVDM+0x78>
 8004682:	1e76      	subs	r6, r6, #1
 8004684:	d022      	beq.n	80046cc <PE_Receive_SVDM+0xa6>
 8004686:	1e76      	subs	r6, r6, #1
 8004688:	d025      	beq.n	80046d6 <PE_Receive_SVDM+0xb0>
 800468a:	1e76      	subs	r6, r6, #1
 800468c:	d028      	beq.n	80046e0 <PE_Receive_SVDM+0xba>
 800468e:	1e76      	subs	r6, r6, #1
 8004690:	d02b      	beq.n	80046ea <PE_Receive_SVDM+0xc4>
 8004692:	1e76      	subs	r6, r6, #1
 8004694:	d02e      	beq.n	80046f4 <PE_Receive_SVDM+0xce>
 8004696:	3e0a      	subs	r6, #10
 8004698:	2e0f      	cmp	r6, #15
 800469a:	d937      	bls.n	800470c <PE_Receive_SVDM+0xe6>
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	2150      	movs	r1, #80	@ 0x50
 80046a0:	7721      	strb	r1, [r4, #28]
 80046a2:	6861      	ldr	r1, [r4, #4]
 80046a4:	680a      	ldr	r2, [r1, #0]
 80046a6:	0693      	lsls	r3, r2, #26
 80046a8:	0fdb      	lsrs	r3, r3, #31
 80046aa:	2694      	movs	r6, #148	@ 0x94
 80046ac:	00b6      	lsls	r6, r6, #2
 80046ae:	59a6      	ldr	r6, [r4, r6]
 80046b0:	0b76      	lsrs	r6, r6, #13
 80046b2:	4035      	ands	r5, r6
 80046b4:	429d      	cmp	r5, r3
 80046b6:	da00      	bge.n	80046ba <PE_Receive_SVDM+0x94>
 80046b8:	002b      	movs	r3, r5
 80046ba:	2520      	movs	r5, #32
 80046bc:	43aa      	bics	r2, r5
 80046be:	015b      	lsls	r3, r3, #5
 80046c0:	402b      	ands	r3, r5
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
 80046c6:	83e0      	strh	r0, [r4, #30]
 80046c8:	2075      	movs	r0, #117	@ 0x75
 80046ca:	e023      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046cc:	2152      	movs	r1, #82	@ 0x52
 80046ce:	7721      	strb	r1, [r4, #28]
 80046d0:	83e0      	strh	r0, [r4, #30]
 80046d2:	2076      	movs	r0, #118	@ 0x76
 80046d4:	e01e      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046d6:	2153      	movs	r1, #83	@ 0x53
 80046d8:	7721      	strb	r1, [r4, #28]
 80046da:	83e0      	strh	r0, [r4, #30]
 80046dc:	2078      	movs	r0, #120	@ 0x78
 80046de:	e019      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046e0:	2054      	movs	r0, #84	@ 0x54
 80046e2:	7720      	strb	r0, [r4, #28]
 80046e4:	83e3      	strh	r3, [r4, #30]
 80046e6:	2079      	movs	r0, #121	@ 0x79
 80046e8:	e014      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046ea:	2055      	movs	r0, #85	@ 0x55
 80046ec:	7720      	strb	r0, [r4, #28]
 80046ee:	83e3      	strh	r3, [r4, #30]
 80046f0:	207a      	movs	r0, #122	@ 0x7a
 80046f2:	e00f      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <PE_Receive_SVDM+0xe2>
 80046fc:	2900      	cmp	r1, #0
 80046fe:	d000      	beq.n	8004702 <PE_Receive_SVDM+0xdc>
 8004700:	2101      	movs	r1, #1
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	7c20      	ldrb	r0, [r4, #16]
 8004706:	4798      	blx	r3
 8004708:	7465      	strb	r5, [r4, #17]
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	215a      	movs	r1, #90	@ 0x5a
 800470e:	7721      	strb	r1, [r4, #28]
 8004710:	83e0      	strh	r0, [r4, #30]
 8004712:	207b      	movs	r0, #123	@ 0x7b
 8004714:	7460      	strb	r0, [r4, #17]
 8004716:	bd70      	pop	{r4, r5, r6, pc}

08004718 <.text_13>:
 8004718:	fffffe3f 	.word	0xfffffe3f

0800471c <.text_14>:
 800471c:	2000017c 	.word	0x2000017c

08004720 <.text_15>:
 8004720:	00000494 	.word	0x00000494

08004724 <.text_16>:
 8004724:	00008019 	.word	0x00008019

08004728 <.text_17>:
 8004728:	0000800f 	.word	0x0000800f

0800472c <PE_StateMachine_VDM>:
 800472c:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 800472e:	b09c      	sub	sp, #112	@ 0x70
 8004730:	0005      	movs	r5, r0
 8004732:	2002      	movs	r0, #2
 8004734:	9004      	str	r0, [sp, #16]
 8004736:	7c6a      	ldrb	r2, [r5, #17]
 8004738:	0010      	movs	r0, r2
 800473a:	3875      	subs	r0, #117	@ 0x75
 800473c:	2807      	cmp	r0, #7
 800473e:	d206      	bcs.n	800474e <__iar_annotation$$branch+0x4>
 8004740:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8004742:	7800      	ldrb	r0, [r0, #0]
 8004744:	2814      	cmp	r0, #20
 8004746:	d002      	beq.n	800474e <__iar_annotation$$branch+0x4>
 8004748:	2002      	movs	r0, #2

0800474a <__iar_annotation$$branch>:
 800474a:	f000 febc 	bl	80054c6 <__iar_annotation$$branch+0xce4>
 800474e:	2094      	movs	r0, #148	@ 0x94
 8004750:	0080      	lsls	r0, r0, #2
 8004752:	182c      	adds	r4, r5, r0
 8004754:	210b      	movs	r1, #11
 8004756:	271e      	movs	r7, #30
 8004758:	201f      	movs	r0, #31
 800475a:	43c0      	mvns	r0, r0
 800475c:	26c0      	movs	r6, #192	@ 0xc0
 800475e:	43f6      	mvns	r6, r6
 8004760:	2a75      	cmp	r2, #117	@ 0x75
 8004762:	d041      	beq.n	80047e8 <__iar_annotation$$branch+0x6>
 8004764:	2a76      	cmp	r2, #118	@ 0x76
 8004766:	d100      	bne.n	800476a <__iar_annotation$$branch+0x20>
 8004768:	e0bb      	b.n	80048e2 <__iar_annotation$$branch+0x100>
 800476a:	2a77      	cmp	r2, #119	@ 0x77
 800476c:	d100      	bne.n	8004770 <__iar_annotation$$branch+0x26>
 800476e:	e144      	b.n	80049fa <__iar_annotation$$branch+0x218>
 8004770:	2a78      	cmp	r2, #120	@ 0x78
 8004772:	d100      	bne.n	8004776 <__iar_annotation$$branch+0x2c>
 8004774:	e1b4      	b.n	8004ae0 <__iar_annotation$$branch+0x2fe>
 8004776:	2a79      	cmp	r2, #121	@ 0x79
 8004778:	d100      	bne.n	800477c <__iar_annotation$$branch+0x32>
 800477a:	e216      	b.n	8004baa <__iar_annotation$$branch+0x3c8>
 800477c:	2a7a      	cmp	r2, #122	@ 0x7a
 800477e:	d100      	bne.n	8004782 <__iar_annotation$$branch+0x38>
 8004780:	e24b      	b.n	8004c1a <__iar_annotation$$branch+0x438>
 8004782:	2a7b      	cmp	r2, #123	@ 0x7b
 8004784:	d100      	bne.n	8004788 <__iar_annotation$$branch+0x3e>
 8004786:	e292      	b.n	8004cae <__iar_annotation$$branch+0x4cc>
 8004788:	2a7d      	cmp	r2, #125	@ 0x7d
 800478a:	d100      	bne.n	800478e <__iar_annotation$$branch+0x44>
 800478c:	e2e0      	b.n	8004d50 <__iar_annotation$$branch+0x56e>
 800478e:	2a7f      	cmp	r2, #127	@ 0x7f
 8004790:	d100      	bne.n	8004794 <__iar_annotation$$branch+0x4a>
 8004792:	e352      	b.n	8004e3a <__iar_annotation$$branch+0x658>
 8004794:	2a81      	cmp	r2, #129	@ 0x81
 8004796:	d100      	bne.n	800479a <__iar_annotation$$branch+0x50>
 8004798:	e3c2      	b.n	8004f20 <__iar_annotation$$branch+0x73e>
 800479a:	2a82      	cmp	r2, #130	@ 0x82
 800479c:	d101      	bne.n	80047a2 <__iar_annotation$$branch+0x4>

0800479e <__iar_annotation$$branch>:
 800479e:	f000 fc3b 	bl	8005018 <__iar_annotation$$branch+0x836>
 80047a2:	2a83      	cmp	r2, #131	@ 0x83
 80047a4:	d101      	bne.n	80047aa <__iar_annotation$$branch+0x4>

080047a6 <__iar_annotation$$branch>:
 80047a6:	f000 fcc9 	bl	800513c <__iar_annotation$$branch+0x95a>
 80047aa:	2a84      	cmp	r2, #132	@ 0x84
 80047ac:	d101      	bne.n	80047b2 <__iar_annotation$$branch+0x4>

080047ae <__iar_annotation$$branch>:
 80047ae:	f000 fe38 	bl	8005422 <__iar_annotation$$branch+0xc40>
 80047b2:	2a85      	cmp	r2, #133	@ 0x85
 80047b4:	d101      	bne.n	80047ba <__iar_annotation$$branch+0x4>

080047b6 <__iar_annotation$$branch>:
 80047b6:	f000 fd5d 	bl	8005274 <__iar_annotation$$branch+0xa92>
 80047ba:	2a87      	cmp	r2, #135	@ 0x87
 80047bc:	d100      	bne.n	80047c0 <__iar_annotation$$branch+0xa>
 80047be:	e2fc      	b.n	8004dba <__iar_annotation$$branch+0x5d8>
 80047c0:	2a89      	cmp	r2, #137	@ 0x89
 80047c2:	d100      	bne.n	80047c6 <__iar_annotation$$branch+0x10>
 80047c4:	e375      	b.n	8004eb2 <__iar_annotation$$branch+0x6d0>
 80047c6:	2a8b      	cmp	r2, #139	@ 0x8b
 80047c8:	d101      	bne.n	80047ce <__iar_annotation$$branch+0x4>

080047ca <__iar_annotation$$branch>:
 80047ca:	f000 fbe4 	bl	8004f96 <__iar_annotation$$branch+0x7b4>
 80047ce:	2a8c      	cmp	r2, #140	@ 0x8c
 80047d0:	d101      	bne.n	80047d6 <__iar_annotation$$branch+0x4>

080047d2 <__iar_annotation$$branch>:
 80047d2:	f000 fc63 	bl	800509c <__iar_annotation$$branch+0x8ba>
 80047d6:	2a8d      	cmp	r2, #141	@ 0x8d
 80047d8:	d101      	bne.n	80047de <__iar_annotation$$branch+0x4>

080047da <__iar_annotation$$branch>:
 80047da:	f000 fcf7 	bl	80051cc <__iar_annotation$$branch+0x9ea>
 80047de:	2a8f      	cmp	r2, #143	@ 0x8f
 80047e0:	d101      	bne.n	80047e6 <__iar_annotation$$branch+0x4>

080047e2 <__iar_annotation$$branch>:
 80047e2:	f000 fda5 	bl	8005330 <__iar_annotation$$branch+0xb4e>
 80047e6:	e2b2      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 80047e8:	2201      	movs	r2, #1
 80047ea:	9203      	str	r2, [sp, #12]
 80047ec:	03d3      	lsls	r3, r2, #15
 80047ee:	8bea      	ldrh	r2, [r5, #30]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d100      	bne.n	80047f6 <__iar_annotation$$branch+0x14>
 80047f4:	e262      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 80047f6:	2701      	movs	r7, #1
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	4010      	ands	r0, r2
 80047fc:	4338      	orrs	r0, r7
 80047fe:	6020      	str	r0, [r4, #0]
 8004800:	4303      	orrs	r3, r0
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	6868      	ldr	r0, [r5, #4]
 8004806:	6800      	ldr	r0, [r0, #0]
 8004808:	0942      	lsrs	r2, r0, #5
 800480a:	403a      	ands	r2, r7
 800480c:	48c9      	ldr	r0, [pc, #804]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 800480e:	4018      	ands	r0, r3
 8004810:	0352      	lsls	r2, r2, #13
 8004812:	4302      	orrs	r2, r0
 8004814:	6022      	str	r2, [r4, #0]
 8004816:	6868      	ldr	r0, [r5, #4]
 8004818:	6800      	ldr	r0, [r0, #0]
 800481a:	4001      	ands	r1, r0
 800481c:	2909      	cmp	r1, #9
 800481e:	d051      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004820:	68e8      	ldr	r0, [r5, #12]
 8004822:	2800      	cmp	r0, #0
 8004824:	d04e      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004826:	6803      	ldr	r3, [r0, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d04b      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 800482c:	0c10      	lsrs	r0, r2, #16
 800482e:	21ff      	movs	r1, #255	@ 0xff
 8004830:	0209      	lsls	r1, r1, #8
 8004832:	4288      	cmp	r0, r1
 8004834:	d146      	bne.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004836:	a90b      	add	r1, sp, #44	@ 0x2c
 8004838:	7c28      	ldrb	r0, [r5, #16]
 800483a:	4798      	blx	r3
 800483c:	2803      	cmp	r0, #3
 800483e:	d002      	beq.n	8004846 <__iar_annotation$$branch+0x64>
 8004840:	280f      	cmp	r0, #15
 8004842:	d005      	beq.n	8004850 <__iar_annotation$$branch+0x6e>
 8004844:	e03e      	b.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	21c0      	movs	r1, #192	@ 0xc0
 800484a:	4301      	orrs	r1, r0
 800484c:	6021      	str	r1, [r4, #0]
 800484e:	e03e      	b.n	80048ce <__iar_annotation$$branch+0xec>
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	4006      	ands	r6, r0
 8004854:	2040      	movs	r0, #64	@ 0x40
 8004856:	4330      	orrs	r0, r6
 8004858:	6020      	str	r0, [r4, #0]
 800485a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800485c:	9015      	str	r0, [sp, #84]	@ 0x54
 800485e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004860:	9016      	str	r0, [sp, #88]	@ 0x58
 8004862:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004864:	9017      	str	r0, [sp, #92]	@ 0x5c
 8004866:	2004      	movs	r0, #4
 8004868:	9003      	str	r0, [sp, #12]
 800486a:	a80b      	add	r0, sp, #44	@ 0x2c
 800486c:	2120      	movs	r1, #32
 800486e:	5c40      	ldrb	r0, [r0, r1]
 8004870:	0841      	lsrs	r1, r0, #1
 8004872:	4239      	tst	r1, r7
 8004874:	d003      	beq.n	800487e <__iar_annotation$$branch+0x9c>
 8004876:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004878:	9118      	str	r1, [sp, #96]	@ 0x60
 800487a:	2105      	movs	r1, #5
 800487c:	9103      	str	r1, [sp, #12]
 800487e:	08c2      	lsrs	r2, r0, #3
 8004880:	2101      	movs	r1, #1
 8004882:	4011      	ands	r1, r2
 8004884:	d008      	beq.n	8004898 <__iar_annotation$$branch+0xb6>
 8004886:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8004888:	aa14      	add	r2, sp, #80	@ 0x50
 800488a:	9b03      	ldr	r3, [sp, #12]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	50d6      	str	r6, [r2, r3]
 8004890:	9a03      	ldr	r2, [sp, #12]
 8004892:	1c52      	adds	r2, r2, #1
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	9203      	str	r2, [sp, #12]
 8004898:	0900      	lsrs	r0, r0, #4
 800489a:	4238      	tst	r0, r7
 800489c:	d017      	beq.n	80048ce <__iar_annotation$$branch+0xec>
 800489e:	2900      	cmp	r1, #0
 80048a0:	d007      	beq.n	80048b2 <__iar_annotation$$branch+0xd0>
 80048a2:	2000      	movs	r0, #0
 80048a4:	a914      	add	r1, sp, #80	@ 0x50
 80048a6:	9a03      	ldr	r2, [sp, #12]
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	5088      	str	r0, [r1, r2]
 80048ac:	9803      	ldr	r0, [sp, #12]
 80048ae:	1c40      	adds	r0, r0, #1
 80048b0:	9003      	str	r0, [sp, #12]
 80048b2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80048b4:	a914      	add	r1, sp, #80	@ 0x50
 80048b6:	9a03      	ldr	r2, [sp, #12]
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	5088      	str	r0, [r1, r2]
 80048bc:	9803      	ldr	r0, [sp, #12]
 80048be:	1c40      	adds	r0, r0, #1
 80048c0:	9003      	str	r0, [sp, #12]
 80048c2:	e004      	b.n	80048ce <__iar_annotation$$branch+0xec>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	4006      	ands	r6, r0
 80048c8:	2080      	movs	r0, #128	@ 0x80
 80048ca:	4330      	orrs	r0, r6
 80048cc:	6020      	str	r0, [r4, #0]
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	9014      	str	r0, [sp, #80]	@ 0x50
 80048d2:	2000      	movs	r0, #0
 80048d4:	9002      	str	r0, [sp, #8]
 80048d6:	2003      	movs	r0, #3
 80048d8:	9001      	str	r0, [sp, #4]
 80048da:	9803      	ldr	r0, [sp, #12]
 80048dc:	9000      	str	r0, [sp, #0]
 80048de:	ab14      	add	r3, sp, #80	@ 0x50
 80048e0:	e22f      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 80048e2:	2201      	movs	r2, #1
 80048e4:	466b      	mov	r3, sp
 80048e6:	731a      	strb	r2, [r3, #12]
 80048e8:	03d2      	lsls	r2, r2, #15
 80048ea:	8beb      	ldrh	r3, [r5, #30]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <__iar_annotation$$branch+0x110>
 80048f0:	e1e4      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	4018      	ands	r0, r3
 80048f6:	2302      	movs	r3, #2
 80048f8:	4303      	orrs	r3, r0
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	6868      	ldr	r0, [r5, #4]
 8004902:	6803      	ldr	r3, [r0, #0]
 8004904:	0698      	lsls	r0, r3, #26
 8004906:	0fc0      	lsrs	r0, r0, #31
 8004908:	4b8a      	ldr	r3, [pc, #552]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 800490a:	4013      	ands	r3, r2
 800490c:	0340      	lsls	r0, r0, #13
 800490e:	4318      	orrs	r0, r3
 8004910:	6020      	str	r0, [r4, #0]
 8004912:	686a      	ldr	r2, [r5, #4]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	4011      	ands	r1, r2
 8004918:	2909      	cmp	r1, #9
 800491a:	d05f      	beq.n	80049dc <__iar_annotation$$branch+0x1fa>
 800491c:	68e9      	ldr	r1, [r5, #12]
 800491e:	684b      	ldr	r3, [r1, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05b      	beq.n	80049dc <__iar_annotation$$branch+0x1fa>
 8004924:	0c00      	lsrs	r0, r0, #16
 8004926:	21ff      	movs	r1, #255	@ 0xff
 8004928:	0209      	lsls	r1, r1, #8
 800492a:	4288      	cmp	r0, r1
 800492c:	d156      	bne.n	80049dc <__iar_annotation$$branch+0x1fa>
 800492e:	4882      	ldr	r0, [pc, #520]	@ (8004b38 <__iar_annotation$$branch+0x356>)
 8004930:	182a      	adds	r2, r5, r0
 8004932:	a905      	add	r1, sp, #20
 8004934:	7c28      	ldrb	r0, [r5, #16]
 8004936:	4798      	blx	r3
 8004938:	2803      	cmp	r0, #3
 800493a:	d04b      	beq.n	80049d4 <__iar_annotation$$branch+0x1f2>
 800493c:	280f      	cmp	r0, #15
 800493e:	d14d      	bne.n	80049dc <__iar_annotation$$branch+0x1fa>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	4006      	ands	r6, r0
 8004944:	2040      	movs	r0, #64	@ 0x40
 8004946:	4330      	orrs	r0, r6
 8004948:	6020      	str	r0, [r4, #0]
 800494a:	211c      	movs	r1, #28
 800494c:	a806      	add	r0, sp, #24
 800494e:	f011 fe88 	bl	8016662 <__aeabi_memclr>
 8004952:	2300      	movs	r3, #0
 8004954:	2200      	movs	r2, #0
 8004956:	a806      	add	r0, sp, #24
 8004958:	9000      	str	r0, [sp, #0]
 800495a:	e014      	b.n	8004986 <__iar_annotation$$branch+0x1a4>
 800495c:	005f      	lsls	r7, r3, #1
 800495e:	5bf6      	ldrh	r6, [r6, r7]
 8004960:	0436      	lsls	r6, r6, #16
 8004962:	430e      	orrs	r6, r1
 8004964:	6006      	str	r6, [r0, #0]
 8004966:	e00d      	b.n	8004984 <__iar_annotation$$branch+0x1a2>
 8004968:	1c52      	adds	r2, r2, #1
 800496a:	9800      	ldr	r0, [sp, #0]
 800496c:	1d00      	adds	r0, r0, #4
 800496e:	0859      	lsrs	r1, r3, #1
 8004970:	0089      	lsls	r1, r1, #2
 8004972:	1840      	adds	r0, r0, r1
 8004974:	07d9      	lsls	r1, r3, #31
 8004976:	6801      	ldr	r1, [r0, #0]
 8004978:	9e05      	ldr	r6, [sp, #20]
 800497a:	d5ef      	bpl.n	800495c <__iar_annotation$$branch+0x17a>
 800497c:	005f      	lsls	r7, r3, #1
 800497e:	5bf6      	ldrh	r6, [r6, r7]
 8004980:	4331      	orrs	r1, r6
 8004982:	6001      	str	r1, [r0, #0]
 8004984:	1c5b      	adds	r3, r3, #1
 8004986:	486d      	ldr	r0, [pc, #436]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004988:	1828      	adds	r0, r5, r0
 800498a:	7840      	ldrb	r0, [r0, #1]
 800498c:	4283      	cmp	r3, r0
 800498e:	d201      	bcs.n	8004994 <__iar_annotation$$branch+0x1b2>
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d3e9      	bcc.n	8004968 <__iar_annotation$$branch+0x186>
 8004994:	1a80      	subs	r0, r0, r2
 8004996:	4969      	ldr	r1, [pc, #420]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004998:	1869      	adds	r1, r5, r1
 800499a:	7048      	strb	r0, [r1, #1]
 800499c:	b2d0      	uxtb	r0, r2
 800499e:	280c      	cmp	r0, #12
 80049a0:	d111      	bne.n	80049c6 <__iar_annotation$$branch+0x1e4>
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	9006      	str	r0, [sp, #24]
 80049a6:	2000      	movs	r0, #0
 80049a8:	9002      	str	r0, [sp, #8]
 80049aa:	2077      	movs	r0, #119	@ 0x77
 80049ac:	9001      	str	r0, [sp, #4]
 80049ae:	2007      	movs	r0, #7
 80049b0:	9000      	str	r0, [sp, #0]
 80049b2:	ab06      	add	r3, sp, #24
 80049b4:	220f      	movs	r2, #15
 80049b6:	2031      	movs	r0, #49	@ 0x31
 80049b8:	5c29      	ldrb	r1, [r5, r0]
 80049ba:	0028      	movs	r0, r5
 80049bc:	f7fc ff07 	bl	80017ce <PE_Send_DataMessage>
 80049c0:	485f      	ldr	r0, [pc, #380]	@ (8004b40 <__iar_annotation$$branch+0x35e>)
 80049c2:	83e8      	strh	r0, [r5, #30]
 80049c4:	e1c3      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 80049c6:	0612      	lsls	r2, r2, #24
 80049c8:	0e50      	lsrs	r0, r2, #25
 80049ca:	1c80      	adds	r0, r0, #2
 80049cc:	4669      	mov	r1, sp
 80049ce:	7308      	strb	r0, [r1, #12]
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	e008      	b.n	80049e6 <__iar_annotation$$branch+0x204>
 80049d4:	6821      	ldr	r1, [r4, #0]
 80049d6:	20c0      	movs	r0, #192	@ 0xc0
 80049d8:	4308      	orrs	r0, r1
 80049da:	e003      	b.n	80049e4 <__iar_annotation$$branch+0x202>
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	4006      	ands	r6, r0
 80049e0:	2080      	movs	r0, #128	@ 0x80
 80049e2:	4330      	orrs	r0, r6
 80049e4:	6020      	str	r0, [r4, #0]
 80049e6:	9006      	str	r0, [sp, #24]
 80049e8:	2000      	movs	r0, #0
 80049ea:	9002      	str	r0, [sp, #8]
 80049ec:	2003      	movs	r0, #3
 80049ee:	9001      	str	r0, [sp, #4]
 80049f0:	4668      	mov	r0, sp
 80049f2:	7b00      	ldrb	r0, [r0, #12]
 80049f4:	9000      	str	r0, [sp, #0]
 80049f6:	ab06      	add	r3, sp, #24
 80049f8:	e1a3      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 80049fa:	2180      	movs	r1, #128	@ 0x80
 80049fc:	0209      	lsls	r1, r1, #8
 80049fe:	8bea      	ldrh	r2, [r5, #30]
 8004a00:	428a      	cmp	r2, r1
 8004a02:	d100      	bne.n	8004a06 <__iar_annotation$$branch+0x224>
 8004a04:	e15a      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	4010      	ands	r0, r2
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	4302      	orrs	r2, r0
 8004a0e:	6022      	str	r2, [r4, #0]
 8004a10:	b292      	uxth	r2, r2
 8004a12:	20ff      	movs	r0, #255	@ 0xff
 8004a14:	0600      	lsls	r0, r0, #24
 8004a16:	4310      	orrs	r0, r2
 8004a18:	6020      	str	r0, [r4, #0]
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	2701      	movs	r7, #1
 8004a20:	6868      	ldr	r0, [r5, #4]
 8004a22:	6800      	ldr	r0, [r0, #0]
 8004a24:	0940      	lsrs	r0, r0, #5
 8004a26:	4038      	ands	r0, r7
 8004a28:	4a42      	ldr	r2, [pc, #264]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 8004a2a:	400a      	ands	r2, r1
 8004a2c:	0340      	lsls	r0, r0, #13
 8004a2e:	4310      	orrs	r0, r2
 8004a30:	6020      	str	r0, [r4, #0]
 8004a32:	4006      	ands	r6, r0
 8004a34:	2040      	movs	r0, #64	@ 0x40
 8004a36:	4330      	orrs	r0, r6
 8004a38:	6020      	str	r0, [r4, #0]
 8004a3a:	aa03      	add	r2, sp, #12
 8004a3c:	a905      	add	r1, sp, #20
 8004a3e:	7c28      	ldrb	r0, [r5, #16]
 8004a40:	68eb      	ldr	r3, [r5, #12]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4798      	blx	r3
 8004a46:	211c      	movs	r1, #28
 8004a48:	a806      	add	r0, sp, #24
 8004a4a:	f011 fe0a 	bl	8016662 <__aeabi_memclr>
 8004a4e:	2100      	movs	r1, #0
 8004a50:	2200      	movs	r2, #0
 8004a52:	a806      	add	r0, sp, #24
 8004a54:	002c      	movs	r4, r5
 8004a56:	e016      	b.n	8004a86 <__iar_annotation$$branch+0x2a4>
 8004a58:	004d      	lsls	r5, r1, #1
 8004a5a:	5b75      	ldrh	r5, [r6, r5]
 8004a5c:	042d      	lsls	r5, r5, #16
 8004a5e:	4666      	mov	r6, ip
 8004a60:	4335      	orrs	r5, r6
 8004a62:	601d      	str	r5, [r3, #0]
 8004a64:	e00e      	b.n	8004a84 <__iar_annotation$$branch+0x2a2>
 8004a66:	1c52      	adds	r2, r2, #1
 8004a68:	1d03      	adds	r3, r0, #4
 8004a6a:	084d      	lsrs	r5, r1, #1
 8004a6c:	00ad      	lsls	r5, r5, #2
 8004a6e:	195b      	adds	r3, r3, r5
 8004a70:	4239      	tst	r1, r7
 8004a72:	681e      	ldr	r6, [r3, #0]
 8004a74:	46b4      	mov	ip, r6
 8004a76:	9e05      	ldr	r6, [sp, #20]
 8004a78:	d0ee      	beq.n	8004a58 <__iar_annotation$$branch+0x276>
 8004a7a:	004d      	lsls	r5, r1, #1
 8004a7c:	5b75      	ldrh	r5, [r6, r5]
 8004a7e:	4666      	mov	r6, ip
 8004a80:	432e      	orrs	r6, r5
 8004a82:	601e      	str	r6, [r3, #0]
 8004a84:	1c49      	adds	r1, r1, #1
 8004a86:	4b2d      	ldr	r3, [pc, #180]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004a88:	18e3      	adds	r3, r4, r3
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	d201      	bcs.n	8004a94 <__iar_annotation$$branch+0x2b2>
 8004a90:	290c      	cmp	r1, #12
 8004a92:	d3e8      	bcc.n	8004a66 <__iar_annotation$$branch+0x284>
 8004a94:	1a98      	subs	r0, r3, r2
 8004a96:	4929      	ldr	r1, [pc, #164]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004a98:	1861      	adds	r1, r4, r1
 8004a9a:	7048      	strb	r0, [r1, #1]
 8004a9c:	b2d0      	uxtb	r0, r2
 8004a9e:	280c      	cmp	r0, #12
 8004aa0:	d10f      	bne.n	8004ac2 <__iar_annotation$$branch+0x2e0>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	9002      	str	r0, [sp, #8]
 8004aa6:	2077      	movs	r0, #119	@ 0x77
 8004aa8:	9001      	str	r0, [sp, #4]
 8004aaa:	2007      	movs	r0, #7
 8004aac:	9000      	str	r0, [sp, #0]
 8004aae:	ab06      	add	r3, sp, #24
 8004ab0:	220f      	movs	r2, #15
 8004ab2:	2031      	movs	r0, #49	@ 0x31
 8004ab4:	5c21      	ldrb	r1, [r4, r0]
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	f7fc fe89 	bl	80017ce <PE_Send_DataMessage>
 8004abc:	4820      	ldr	r0, [pc, #128]	@ (8004b40 <__iar_annotation$$branch+0x35e>)
 8004abe:	83e0      	strh	r0, [r4, #30]
 8004ac0:	e145      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	9002      	str	r0, [sp, #8]
 8004ac6:	2003      	movs	r0, #3
 8004ac8:	9001      	str	r0, [sp, #4]
 8004aca:	0610      	lsls	r0, r2, #24
 8004acc:	0e40      	lsrs	r0, r0, #25
 8004ace:	1c80      	adds	r0, r0, #2
 8004ad0:	b2c0      	uxtb	r0, r0
 8004ad2:	9000      	str	r0, [sp, #0]
 8004ad4:	ab06      	add	r3, sp, #24
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	2031      	movs	r0, #49	@ 0x31
 8004ada:	5c21      	ldrb	r1, [r4, r0]
 8004adc:	0020      	movs	r0, r4
 8004ade:	e134      	b.n	8004d4a <__iar_annotation$$branch+0x568>
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	9206      	str	r2, [sp, #24]
 8004ae4:	03d2      	lsls	r2, r2, #15
 8004ae6:	8beb      	ldrh	r3, [r5, #30]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d100      	bne.n	8004aee <__iar_annotation$$branch+0x30c>
 8004aec:	e3c1      	b.n	8005272 <__iar_annotation$$branch+0xa90>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	4018      	ands	r0, r3
 8004af2:	2303      	movs	r3, #3
 8004af4:	4303      	orrs	r3, r0
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	6868      	ldr	r0, [r5, #4]
 8004afe:	6803      	ldr	r3, [r0, #0]
 8004b00:	0698      	lsls	r0, r3, #26
 8004b02:	0fc0      	lsrs	r0, r0, #31
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	0340      	lsls	r0, r0, #13
 8004b0a:	4318      	orrs	r0, r3
 8004b0c:	6020      	str	r0, [r4, #0]
 8004b0e:	686a      	ldr	r2, [r5, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	4011      	ands	r1, r2
 8004b14:	2909      	cmp	r1, #9
 8004b16:	d037      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b18:	68e9      	ldr	r1, [r5, #12]
 8004b1a:	688f      	ldr	r7, [r1, #8]
 8004b1c:	2f00      	cmp	r7, #0
 8004b1e:	d033      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b20:	ab03      	add	r3, sp, #12
 8004b22:	aa05      	add	r2, sp, #20
 8004b24:	0c01      	lsrs	r1, r0, #16
 8004b26:	7c28      	ldrb	r0, [r5, #16]
 8004b28:	47b8      	blx	r7
 8004b2a:	2803      	cmp	r0, #3
 8004b2c:	d00a      	beq.n	8004b44 <__iar_annotation$$branch+0x362>
 8004b2e:	280f      	cmp	r0, #15
 8004b30:	d00d      	beq.n	8004b4e <__iar_annotation$$branch+0x36c>
 8004b32:	e029      	b.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b34:	ffff9fff 	.word	0xffff9fff
 8004b38:	000004ad 	.word	0x000004ad
 8004b3c:	000004ac 	.word	0x000004ac
 8004b40:	0000800f 	.word	0x0000800f
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	21c0      	movs	r1, #192	@ 0xc0
 8004b48:	4301      	orrs	r1, r0
 8004b4a:	6021      	str	r1, [r4, #0]
 8004b4c:	e023      	b.n	8004b96 <__iar_annotation$$branch+0x3b4>
 8004b4e:	4668      	mov	r0, sp
 8004b50:	7b00      	ldrb	r0, [r0, #12]
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d018      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b56:	4668      	mov	r0, sp
 8004b58:	7b02      	ldrb	r2, [r0, #12]
 8004b5a:	2a07      	cmp	r2, #7
 8004b5c:	d214      	bcs.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	4006      	ands	r6, r0
 8004b62:	2040      	movs	r0, #64	@ 0x40
 8004b64:	4330      	orrs	r0, r6
 8004b66:	6020      	str	r0, [r4, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9806      	ldr	r0, [sp, #24]
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d211      	bcs.n	8004b94 <__iar_annotation$$branch+0x3b2>
 8004b70:	9905      	ldr	r1, [sp, #20]
 8004b72:	6809      	ldr	r1, [r1, #0]
 8004b74:	ae07      	add	r6, sp, #28
 8004b76:	1d36      	adds	r6, r6, #4
 8004b78:	009f      	lsls	r7, r3, #2
 8004b7a:	51f1      	str	r1, [r6, r7]
 8004b7c:	9905      	ldr	r1, [sp, #20]
 8004b7e:	1d09      	adds	r1, r1, #4
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	1c40      	adds	r0, r0, #1
 8004b84:	1c5b      	adds	r3, r3, #1
 8004b86:	e7f1      	b.n	8004b6c <__iar_annotation$$branch+0x38a>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	4006      	ands	r6, r0
 8004b8c:	2080      	movs	r0, #128	@ 0x80
 8004b8e:	4330      	orrs	r0, r6
 8004b90:	6020      	str	r0, [r4, #0]
 8004b92:	e000      	b.n	8004b96 <__iar_annotation$$branch+0x3b4>
 8004b94:	9006      	str	r0, [sp, #24]
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	9007      	str	r0, [sp, #28]
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	9002      	str	r0, [sp, #8]
 8004b9e:	2003      	movs	r0, #3
 8004ba0:	9001      	str	r0, [sp, #4]
 8004ba2:	9806      	ldr	r0, [sp, #24]
 8004ba4:	9000      	str	r0, [sp, #0]
 8004ba6:	ab07      	add	r3, sp, #28
 8004ba8:	e0cb      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 8004baa:	2180      	movs	r1, #128	@ 0x80
 8004bac:	0209      	lsls	r1, r1, #8
 8004bae:	8bea      	ldrh	r2, [r5, #30]
 8004bb0:	428a      	cmp	r2, r1
 8004bb2:	d100      	bne.n	8004bb6 <__iar_annotation$$branch+0x3d4>
 8004bb4:	e35d      	b.n	8005272 <__iar_annotation$$branch+0xa90>
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	4010      	ands	r0, r2
 8004bba:	2204      	movs	r2, #4
 8004bbc:	4302      	orrs	r2, r0
 8004bbe:	6022      	str	r2, [r4, #0]
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	6021      	str	r1, [r4, #0]
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	686a      	ldr	r2, [r5, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	0952      	lsrs	r2, r2, #5
 8004bcc:	4002      	ands	r2, r0
 8004bce:	4ba6      	ldr	r3, [pc, #664]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004bd0:	400b      	ands	r3, r1
 8004bd2:	0351      	lsls	r1, r2, #13
 8004bd4:	4319      	orrs	r1, r3
 8004bd6:	6021      	str	r1, [r4, #0]
 8004bd8:	686a      	ldr	r2, [r5, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	08d2      	lsrs	r2, r2, #3
 8004bde:	4010      	ands	r0, r2
 8004be0:	d152      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004be2:	68e8      	ldr	r0, [r5, #12]
 8004be4:	68c3      	ldr	r3, [r0, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d04e      	beq.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004bea:	2707      	movs	r7, #7
 8004bec:	0a0a      	lsrs	r2, r1, #8
 8004bee:	403a      	ands	r2, r7
 8004bf0:	0c09      	lsrs	r1, r1, #16
 8004bf2:	7c28      	ldrb	r0, [r5, #16]
 8004bf4:	4798      	blx	r3
 8004bf6:	2803      	cmp	r0, #3
 8004bf8:	d041      	beq.n	8004c7e <__iar_annotation$$branch+0x49c>
 8004bfa:	280f      	cmp	r0, #15
 8004bfc:	d144      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	4006      	ands	r6, r0
 8004c02:	2040      	movs	r0, #64	@ 0x40
 8004c04:	4330      	orrs	r0, r6
 8004c06:	6020      	str	r0, [r4, #0]
 8004c08:	0a00      	lsrs	r0, r0, #8
 8004c0a:	4007      	ands	r7, r0
 8004c0c:	6968      	ldr	r0, [r5, #20]
 8004c0e:	4940      	ldr	r1, [pc, #256]	@ (8004d10 <__iar_annotation$$branch+0x52e>)
 8004c10:	4001      	ands	r1, r0
 8004c12:	01b8      	lsls	r0, r7, #6
 8004c14:	4308      	orrs	r0, r1
 8004c16:	6168      	str	r0, [r5, #20]
 8004c18:	e03b      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c1a:	2180      	movs	r1, #128	@ 0x80
 8004c1c:	0209      	lsls	r1, r1, #8
 8004c1e:	8bea      	ldrh	r2, [r5, #30]
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d04b      	beq.n	8004cbc <__iar_annotation$$branch+0x4da>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	4010      	ands	r0, r2
 8004c28:	2205      	movs	r2, #5
 8004c2a:	4302      	orrs	r2, r0
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	6021      	str	r1, [r4, #0]
 8004c32:	2001      	movs	r0, #1
 8004c34:	686a      	ldr	r2, [r5, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	0952      	lsrs	r2, r2, #5
 8004c3a:	4002      	ands	r2, r0
 8004c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004c3e:	400b      	ands	r3, r1
 8004c40:	0351      	lsls	r1, r2, #13
 8004c42:	4319      	orrs	r1, r3
 8004c44:	6021      	str	r1, [r4, #0]
 8004c46:	686a      	ldr	r2, [r5, #4]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	08d2      	lsrs	r2, r2, #3
 8004c4c:	4010      	ands	r0, r2
 8004c4e:	d11b      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c50:	68e8      	ldr	r0, [r5, #12]
 8004c52:	6903      	ldr	r3, [r0, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d017      	beq.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c58:	0548      	lsls	r0, r1, #21
 8004c5a:	0f42      	lsrs	r2, r0, #29
 8004c5c:	0c09      	lsrs	r1, r1, #16
 8004c5e:	7c28      	ldrb	r0, [r5, #16]
 8004c60:	4798      	blx	r3
 8004c62:	2803      	cmp	r0, #3
 8004c64:	d00b      	beq.n	8004c7e <__iar_annotation$$branch+0x49c>
 8004c66:	280f      	cmp	r0, #15
 8004c68:	d10e      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	4006      	ands	r6, r0
 8004c6e:	2040      	movs	r0, #64	@ 0x40
 8004c70:	4330      	orrs	r0, r6
 8004c72:	6020      	str	r0, [r4, #0]
 8004c74:	6968      	ldr	r0, [r5, #20]
 8004c76:	4926      	ldr	r1, [pc, #152]	@ (8004d10 <__iar_annotation$$branch+0x52e>)
 8004c78:	4001      	ands	r1, r0
 8004c7a:	6169      	str	r1, [r5, #20]
 8004c7c:	e009      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	21c0      	movs	r1, #192	@ 0xc0
 8004c82:	4301      	orrs	r1, r0
 8004c84:	6021      	str	r1, [r4, #0]
 8004c86:	e004      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	4006      	ands	r6, r0
 8004c8c:	2080      	movs	r0, #128	@ 0x80
 8004c8e:	4330      	orrs	r0, r6
 8004c90:	6020      	str	r0, [r4, #0]
 8004c92:	2000      	movs	r0, #0
 8004c94:	9002      	str	r0, [sp, #8]
 8004c96:	2003      	movs	r0, #3
 8004c98:	9001      	str	r0, [sp, #4]
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	9000      	str	r0, [sp, #0]
 8004c9e:	0023      	movs	r3, r4
 8004ca0:	220f      	movs	r2, #15
 8004ca2:	2031      	movs	r0, #49	@ 0x31
 8004ca4:	5c29      	ldrb	r1, [r5, r0]
 8004ca6:	0028      	movs	r0, r5
 8004ca8:	f7fc fd91 	bl	80017ce <PE_Send_DataMessage>
 8004cac:	e04f      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004cae:	2001      	movs	r0, #1
 8004cb0:	4669      	mov	r1, sp
 8004cb2:	7308      	strb	r0, [r1, #12]
 8004cb4:	8be8      	ldrh	r0, [r5, #30]
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	0209      	lsls	r1, r1, #8
 8004cba:	4288      	cmp	r0, r1
 8004cbc:	d100      	bne.n	8004cc0 <__iar_annotation$$branch+0x4de>
 8004cbe:	e3ab      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 8004cc0:	68e8      	ldr	r0, [r5, #12]
 8004cc2:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8004cc4:	2f00      	cmp	r7, #0
 8004cc6:	d02a      	beq.n	8004d1e <__iar_annotation$$branch+0x53c>
 8004cc8:	4868      	ldr	r0, [pc, #416]	@ (8004e6c <__iar_annotation$$branch+0x68a>)
 8004cca:	182b      	adds	r3, r5, r0
 8004ccc:	3018      	adds	r0, #24
 8004cce:	182a      	adds	r2, r5, r0
 8004cd0:	7820      	ldrb	r0, [r4, #0]
 8004cd2:	06c1      	lsls	r1, r0, #27
 8004cd4:	0ec9      	lsrs	r1, r1, #27
 8004cd6:	7c28      	ldrb	r0, [r5, #16]
 8004cd8:	47b8      	blx	r7
 8004cda:	2803      	cmp	r0, #3
 8004cdc:	d01a      	beq.n	8004d14 <__iar_annotation$$branch+0x532>
 8004cde:	280f      	cmp	r0, #15
 8004ce0:	d11d      	bne.n	8004d1e <__iar_annotation$$branch+0x53c>
 8004ce2:	6820      	ldr	r0, [r4, #0]
 8004ce4:	4006      	ands	r6, r0
 8004ce6:	2040      	movs	r0, #64	@ 0x40
 8004ce8:	4330      	orrs	r0, r6
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	4668      	mov	r0, sp
 8004cf0:	7b00      	ldrb	r0, [r0, #12]
 8004cf2:	495f      	ldr	r1, [pc, #380]	@ (8004e70 <__iar_annotation$$branch+0x68e>)
 8004cf4:	5c69      	ldrb	r1, [r5, r1]
 8004cf6:	428a      	cmp	r2, r1
 8004cf8:	d217      	bcs.n	8004d2a <__iar_annotation$$branch+0x548>
 8004cfa:	0091      	lsls	r1, r2, #2
 8004cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e6c <__iar_annotation$$branch+0x68a>)
 8004cfe:	18eb      	adds	r3, r5, r3
 8004d00:	585b      	ldr	r3, [r3, r1]
 8004d02:	ae05      	add	r6, sp, #20
 8004d04:	1d36      	adds	r6, r6, #4
 8004d06:	5073      	str	r3, [r6, r1]
 8004d08:	1c40      	adds	r0, r0, #1
 8004d0a:	1c52      	adds	r2, r2, #1
 8004d0c:	e7f1      	b.n	8004cf2 <__iar_annotation$$branch+0x510>
 8004d0e:	bf00      	nop
 8004d10:	fffffe3f 	.word	0xfffffe3f
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	21c0      	movs	r1, #192	@ 0xc0
 8004d18:	4301      	orrs	r1, r0
 8004d1a:	6021      	str	r1, [r4, #0]
 8004d1c:	e007      	b.n	8004d2e <__iar_annotation$$branch+0x54c>
 8004d1e:	6820      	ldr	r0, [r4, #0]
 8004d20:	4006      	ands	r6, r0
 8004d22:	2080      	movs	r0, #128	@ 0x80
 8004d24:	4330      	orrs	r0, r6
 8004d26:	6020      	str	r0, [r4, #0]
 8004d28:	e001      	b.n	8004d2e <__iar_annotation$$branch+0x54c>
 8004d2a:	4669      	mov	r1, sp
 8004d2c:	7308      	strb	r0, [r1, #12]
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	9005      	str	r0, [sp, #20]
 8004d32:	2000      	movs	r0, #0
 8004d34:	9002      	str	r0, [sp, #8]
 8004d36:	2003      	movs	r0, #3
 8004d38:	9001      	str	r0, [sp, #4]
 8004d3a:	4668      	mov	r0, sp
 8004d3c:	7b00      	ldrb	r0, [r0, #12]
 8004d3e:	9000      	str	r0, [sp, #0]
 8004d40:	ab05      	add	r3, sp, #20
 8004d42:	220f      	movs	r2, #15
 8004d44:	2031      	movs	r0, #49	@ 0x31
 8004d46:	5c29      	ldrb	r1, [r5, r0]
 8004d48:	0028      	movs	r0, r5
 8004d4a:	f7fc fd40 	bl	80017ce <PE_Send_DataMessage>
 8004d4e:	e3b9      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8004d50:	2101      	movs	r1, #1
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	4010      	ands	r0, r2
 8004d56:	4308      	orrs	r0, r1
 8004d58:	6020      	str	r0, [r4, #0]
 8004d5a:	03ca      	lsls	r2, r1, #15
 8004d5c:	4302      	orrs	r2, r0
 8004d5e:	6022      	str	r2, [r4, #0]
 8004d60:	6868      	ldr	r0, [r5, #4]
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	0943      	lsrs	r3, r0, #5
 8004d66:	400b      	ands	r3, r1
 8004d68:	483f      	ldr	r0, [pc, #252]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004d6a:	4010      	ands	r0, r2
 8004d6c:	035a      	lsls	r2, r3, #13
 8004d6e:	4302      	orrs	r2, r0
 8004d70:	6022      	str	r2, [r4, #0]
 8004d72:	48bf      	ldr	r0, [pc, #764]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004d74:	4010      	ands	r0, r2
 8004d76:	6020      	str	r0, [r4, #0]
 8004d78:	4006      	ands	r6, r0
 8004d7a:	6026      	str	r6, [r4, #0]
 8004d7c:	b2b0      	uxth	r0, r6
 8004d7e:	22ff      	movs	r2, #255	@ 0xff
 8004d80:	0612      	lsls	r2, r2, #24
 8004d82:	4302      	orrs	r2, r0
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	6868      	ldr	r0, [r5, #4]
 8004d88:	6800      	ldr	r0, [r0, #0]
 8004d8a:	0880      	lsrs	r0, r0, #2
 8004d8c:	4001      	ands	r1, r0
 8004d8e:	d003      	beq.n	8004d98 <__iar_annotation$$branch+0x5b6>
 8004d90:	6968      	ldr	r0, [r5, #20]
 8004d92:	0741      	lsls	r1, r0, #29
 8004d94:	0fc8      	lsrs	r0, r1, #31
 8004d96:	e000      	b.n	8004d9a <__iar_annotation$$branch+0x5b8>
 8004d98:	2002      	movs	r0, #2
 8004d9a:	9002      	str	r0, [sp, #8]
 8004d9c:	2087      	movs	r0, #135	@ 0x87
 8004d9e:	9001      	str	r0, [sp, #4]
 8004da0:	2001      	movs	r0, #1
 8004da2:	9000      	str	r0, [sp, #0]
 8004da4:	0023      	movs	r3, r4
 8004da6:	220f      	movs	r2, #15
 8004da8:	2031      	movs	r0, #49	@ 0x31
 8004daa:	5c29      	ldrb	r1, [r5, r0]
 8004dac:	0028      	movs	r0, r5
 8004dae:	f7fc fd0e 	bl	80017ce <PE_Send_DataMessage>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d1cb      	bne.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004db6:	2050      	movs	r0, #80	@ 0x50
 8004db8:	e0e8      	b.n	8004f8c <__iar_annotation$$branch+0x7aa>
 8004dba:	2031      	movs	r0, #49	@ 0x31
 8004dbc:	5c28      	ldrb	r0, [r5, r0]
 8004dbe:	f7fb ff37 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004dc2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004dc4:	7809      	ldrb	r1, [r1, #0]
 8004dc6:	4281      	cmp	r1, r0
 8004dc8:	d000      	beq.n	8004dcc <__iar_annotation$$branch+0x5ea>
 8004dca:	e245      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004dcc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004dce:	0bc2      	lsrs	r2, r0, #15
 8004dd0:	d176      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004dd2:	0b02      	lsrs	r2, r0, #12
 8004dd4:	0752      	lsls	r2, r2, #29
 8004dd6:	d012      	beq.n	8004dfe <__iar_annotation$$branch+0x61c>
 8004dd8:	06c0      	lsls	r0, r0, #27
 8004dda:	0ec0      	lsrs	r0, r0, #27
 8004ddc:	280f      	cmp	r0, #15
 8004dde:	d16f      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004de0:	2914      	cmp	r1, #20
 8004de2:	d005      	beq.n	8004df0 <__iar_annotation$$branch+0x60e>
 8004de4:	2014      	movs	r0, #20
 8004de6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004de8:	7008      	strb	r0, [r1, #0]
 8004dea:	0028      	movs	r0, r5
 8004dec:	f7fb fee7 	bl	8000bbe <PE_Clear_RxEvent>
 8004df0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004df2:	7881      	ldrb	r1, [r0, #2]
 8004df4:	06ca      	lsls	r2, r1, #27
 8004df6:	0ed2      	lsrs	r2, r2, #27
 8004df8:	2a01      	cmp	r2, #1
 8004dfa:	d161      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004dfc:	098c      	lsrs	r4, r1, #6
 8004dfe:	d100      	bne.n	8004e02 <__iar_annotation$$branch+0x620>
 8004e00:	e22a      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004e02:	68e9      	ldr	r1, [r5, #12]
 8004e04:	6949      	ldr	r1, [r1, #20]
 8004e06:	2900      	cmp	r1, #0
 8004e08:	d100      	bne.n	8004e0c <__iar_annotation$$branch+0x62a>
 8004e0a:	e2e3      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004e0c:	2103      	movs	r1, #3
 8004e0e:	4021      	ands	r1, r4
 8004e10:	2901      	cmp	r1, #1
 8004e12:	d000      	beq.n	8004e16 <__iar_annotation$$branch+0x634>
 8004e14:	e2de      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004e16:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e18:	1d81      	adds	r1, r0, #6
 8004e1a:	7c28      	ldrb	r0, [r5, #16]
 8004e1c:	f000 fc04 	bl	8005628 <PE_SVDM_CheckIdentity>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d108      	bne.n	8004e36 <__iar_annotation$$branch+0x654>
 8004e24:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004e26:	2201      	movs	r2, #1
 8004e28:	2100      	movs	r1, #0
 8004e2a:	7c28      	ldrb	r0, [r5, #16]
 8004e2c:	68ec      	ldr	r4, [r5, #12]
 8004e2e:	6964      	ldr	r4, [r4, #20]
 8004e30:	47a0      	blx	r4
 8004e32:	2151      	movs	r1, #81	@ 0x51
 8004e34:	e0ec      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004e36:	211b      	movs	r1, #27
 8004e38:	e0ea      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004e3a:	6821      	ldr	r1, [r4, #0]
 8004e3c:	400e      	ands	r6, r1
 8004e3e:	6026      	str	r6, [r4, #0]
 8004e40:	2102      	movs	r1, #2
 8004e42:	4030      	ands	r0, r6
 8004e44:	4308      	orrs	r0, r1
 8004e46:	6020      	str	r0, [r4, #0]
 8004e48:	b280      	uxth	r0, r0
 8004e4a:	22ff      	movs	r2, #255	@ 0xff
 8004e4c:	0612      	lsls	r2, r2, #24
 8004e4e:	4302      	orrs	r2, r0
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	0388      	lsls	r0, r1, #14
 8004e54:	4310      	orrs	r0, r2
 8004e56:	6020      	str	r0, [r4, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	686b      	ldr	r3, [r5, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	095e      	lsrs	r6, r3, #5
 8004e60:	4016      	ands	r6, r2
 8004e62:	4b01      	ldr	r3, [pc, #4]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004e64:	e006      	b.n	8004e74 <__iar_annotation$$branch+0x692>
 8004e66:	bf00      	nop
 8004e68:	ffff9fff 	.word	0xffff9fff
 8004e6c:	00000494 	.word	0x00000494
 8004e70:	000004ac 	.word	0x000004ac
 8004e74:	4003      	ands	r3, r0
 8004e76:	0370      	lsls	r0, r6, #13
 8004e78:	4318      	orrs	r0, r3
 8004e7a:	6020      	str	r0, [r4, #0]
 8004e7c:	4b7c      	ldr	r3, [pc, #496]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004e7e:	4003      	ands	r3, r0
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	6868      	ldr	r0, [r5, #4]
 8004e84:	6800      	ldr	r0, [r0, #0]
 8004e86:	0880      	lsrs	r0, r0, #2
 8004e88:	4002      	ands	r2, r0
 8004e8a:	d002      	beq.n	8004e92 <__iar_annotation$$branch+0x6b0>
 8004e8c:	6968      	ldr	r0, [r5, #20]
 8004e8e:	0740      	lsls	r0, r0, #29
 8004e90:	0fc1      	lsrs	r1, r0, #31
 8004e92:	9102      	str	r1, [sp, #8]
 8004e94:	2089      	movs	r0, #137	@ 0x89
 8004e96:	9001      	str	r0, [sp, #4]
 8004e98:	2001      	movs	r0, #1
 8004e9a:	9000      	str	r0, [sp, #0]
 8004e9c:	0023      	movs	r3, r4
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	2031      	movs	r0, #49	@ 0x31
 8004ea2:	5c29      	ldrb	r1, [r5, r0]
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	f7fc fc92 	bl	80017ce <PE_Send_DataMessage>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d172      	bne.n	8004f94 <__iar_annotation$$branch+0x7b2>
 8004eae:	2052      	movs	r0, #82	@ 0x52
 8004eb0:	e06c      	b.n	8004f8c <__iar_annotation$$branch+0x7aa>
 8004eb2:	2031      	movs	r0, #49	@ 0x31
 8004eb4:	5c28      	ldrb	r0, [r5, r0]
 8004eb6:	f7fb febb 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004eba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004ebc:	7809      	ldrb	r1, [r1, #0]
 8004ebe:	4281      	cmp	r1, r0
 8004ec0:	d000      	beq.n	8004ec4 <__iar_annotation$$branch+0x6e2>
 8004ec2:	e1c9      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004ec4:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004ec6:	0bc2      	lsrs	r2, r0, #15
 8004ec8:	d1fa      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004eca:	0b02      	lsrs	r2, r0, #12
 8004ecc:	0752      	lsls	r2, r2, #29
 8004ece:	d06f      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004ed0:	06c0      	lsls	r0, r0, #27
 8004ed2:	0ec0      	lsrs	r0, r0, #27
 8004ed4:	280f      	cmp	r0, #15
 8004ed6:	d1f3      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004ed8:	2914      	cmp	r1, #20
 8004eda:	d005      	beq.n	8004ee8 <__iar_annotation$$branch+0x706>
 8004edc:	2014      	movs	r0, #20
 8004ede:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004ee0:	7008      	strb	r0, [r1, #0]
 8004ee2:	0028      	movs	r0, r5
 8004ee4:	f7fb fe6b 	bl	8000bbe <PE_Clear_RxEvent>
 8004ee8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004eea:	7881      	ldrb	r1, [r0, #2]
 8004eec:	06ca      	lsls	r2, r1, #27
 8004eee:	0ed2      	lsrs	r2, r2, #27
 8004ef0:	2a02      	cmp	r2, #2
 8004ef2:	d1e5      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004ef4:	060c      	lsls	r4, r1, #24
 8004ef6:	d05b      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004ef8:	68e9      	ldr	r1, [r5, #12]
 8004efa:	6989      	ldr	r1, [r1, #24]
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d100      	bne.n	8004f02 <__iar_annotation$$branch+0x720>
 8004f00:	e268      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004f02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f04:	1d81      	adds	r1, r0, #6
 8004f06:	7c28      	ldrb	r0, [r5, #16]
 8004f08:	f000 fc55 	bl	80057b6 <PE_SVDM_CheckSVIDs>
 8004f0c:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004f0e:	0fa2      	lsrs	r2, r4, #30
 8004f10:	2031      	movs	r0, #49	@ 0x31
 8004f12:	5c29      	ldrb	r1, [r5, r0]
 8004f14:	7c28      	ldrb	r0, [r5, #16]
 8004f16:	68ec      	ldr	r4, [r5, #12]
 8004f18:	69a4      	ldr	r4, [r4, #24]
 8004f1a:	47a0      	blx	r4
 8004f1c:	2153      	movs	r1, #83	@ 0x53
 8004f1e:	e077      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004f20:	6821      	ldr	r1, [r4, #0]
 8004f22:	400e      	ands	r6, r1
 8004f24:	6026      	str	r6, [r4, #0]
 8004f26:	4030      	ands	r0, r6
 8004f28:	2103      	movs	r1, #3
 8004f2a:	4301      	orrs	r1, r0
 8004f2c:	6021      	str	r1, [r4, #0]
 8004f2e:	8920      	ldrh	r0, [r4, #8]
 8004f30:	b28a      	uxth	r2, r1
 8004f32:	0401      	lsls	r1, r0, #16
 8004f34:	4311      	orrs	r1, r2
 8004f36:	6021      	str	r1, [r4, #0]
 8004f38:	2080      	movs	r0, #128	@ 0x80
 8004f3a:	0200      	lsls	r0, r0, #8
 8004f3c:	4308      	orrs	r0, r1
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	686a      	ldr	r2, [r5, #4]
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	0952      	lsrs	r2, r2, #5
 8004f48:	400a      	ands	r2, r1
 8004f4a:	4b9e      	ldr	r3, [pc, #632]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8004f4c:	4003      	ands	r3, r0
 8004f4e:	0350      	lsls	r0, r2, #13
 8004f50:	4318      	orrs	r0, r3
 8004f52:	6020      	str	r0, [r4, #0]
 8004f54:	4a46      	ldr	r2, [pc, #280]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004f56:	4002      	ands	r2, r0
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	6868      	ldr	r0, [r5, #4]
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	0880      	lsrs	r0, r0, #2
 8004f60:	4001      	ands	r1, r0
 8004f62:	d003      	beq.n	8004f6c <__iar_annotation$$branch+0x78a>
 8004f64:	6968      	ldr	r0, [r5, #20]
 8004f66:	0741      	lsls	r1, r0, #29
 8004f68:	0fc8      	lsrs	r0, r1, #31
 8004f6a:	e000      	b.n	8004f6e <__iar_annotation$$branch+0x78c>
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	9002      	str	r0, [sp, #8]
 8004f70:	208b      	movs	r0, #139	@ 0x8b
 8004f72:	9001      	str	r0, [sp, #4]
 8004f74:	2001      	movs	r0, #1
 8004f76:	9000      	str	r0, [sp, #0]
 8004f78:	0023      	movs	r3, r4
 8004f7a:	220f      	movs	r2, #15
 8004f7c:	2031      	movs	r0, #49	@ 0x31
 8004f7e:	5c29      	ldrb	r1, [r5, r0]
 8004f80:	0028      	movs	r0, r5
 8004f82:	f7fc fc24 	bl	80017ce <PE_Send_DataMessage>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d104      	bne.n	8004f94 <__iar_annotation$$branch+0x7b2>
 8004f8a:	2053      	movs	r0, #83	@ 0x53
 8004f8c:	7728      	strb	r0, [r5, #28]
 8004f8e:	488e      	ldr	r0, [pc, #568]	@ (80051c8 <__iar_annotation$$branch+0x9e6>)
 8004f90:	83e8      	strh	r0, [r5, #30]
 8004f92:	9704      	str	r7, [sp, #16]
 8004f94:	e296      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8004f96:	2031      	movs	r0, #49	@ 0x31
 8004f98:	5c28      	ldrb	r0, [r5, r0]
 8004f9a:	f7fb fe49 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004f9e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004fa0:	7809      	ldrb	r1, [r1, #0]
 8004fa2:	4281      	cmp	r1, r0
 8004fa4:	d18c      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004fa6:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004fa8:	0bc2      	lsrs	r2, r0, #15
 8004faa:	d189      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004fac:	0b02      	lsrs	r2, r0, #12
 8004fae:	0752      	lsls	r2, r2, #29
 8004fb0:	d100      	bne.n	8004fb4 <__iar_annotation$$branch+0x7d2>
 8004fb2:	e151      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004fb4:	06c0      	lsls	r0, r0, #27
 8004fb6:	0ec0      	lsrs	r0, r0, #27
 8004fb8:	280f      	cmp	r0, #15
 8004fba:	d000      	beq.n	8004fbe <__iar_annotation$$branch+0x7dc>
 8004fbc:	e14c      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004fbe:	2914      	cmp	r1, #20
 8004fc0:	d005      	beq.n	8004fce <__iar_annotation$$branch+0x7ec>
 8004fc2:	2014      	movs	r0, #20
 8004fc4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004fc6:	7008      	strb	r0, [r1, #0]
 8004fc8:	0028      	movs	r0, r5
 8004fca:	f7fb fdf8 	bl	8000bbe <PE_Clear_RxEvent>
 8004fce:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004fd0:	7881      	ldrb	r1, [r0, #2]
 8004fd2:	06ca      	lsls	r2, r1, #27
 8004fd4:	0ed2      	lsrs	r2, r2, #27
 8004fd6:	2a03      	cmp	r2, #3
 8004fd8:	d1ef      	bne.n	8004fba <__iar_annotation$$branch+0x7d8>
 8004fda:	098e      	lsrs	r6, r1, #6
 8004fdc:	d0e8      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004fde:	68e9      	ldr	r1, [r5, #12]
 8004fe0:	69c9      	ldr	r1, [r1, #28]
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d017      	beq.n	8005016 <__iar_annotation$$branch+0x834>
 8004fe6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004fe8:	1d82      	adds	r2, r0, #6
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	0c01      	lsrs	r1, r0, #16
 8004fee:	7c28      	ldrb	r0, [r5, #16]
 8004ff0:	f000 fc22 	bl	8005838 <PE_SVDM_CheckModes>
 8004ff4:	2403      	movs	r4, #3
 8004ff6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4032      	ands	r2, r6
 8004ffc:	2031      	movs	r0, #49	@ 0x31
 8004ffe:	5c29      	ldrb	r1, [r5, r0]
 8005000:	7c28      	ldrb	r0, [r5, #16]
 8005002:	68ef      	ldr	r7, [r5, #12]
 8005004:	69ff      	ldr	r7, [r7, #28]
 8005006:	47b8      	blx	r7
 8005008:	4034      	ands	r4, r6
 800500a:	2c01      	cmp	r4, #1
 800500c:	d103      	bne.n	8005016 <__iar_annotation$$branch+0x834>
 800500e:	2154      	movs	r1, #84	@ 0x54
 8005010:	7c28      	ldrb	r0, [r5, #16]
 8005012:	f7fb fb69 	bl	80006e8 <USBPD_PE_Notification>
 8005016:	e1dd      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005018:	6821      	ldr	r1, [r4, #0]
 800501a:	400e      	ands	r6, r1
 800501c:	6026      	str	r6, [r4, #0]
 800501e:	4030      	ands	r0, r6
 8005020:	2104      	movs	r1, #4
 8005022:	4301      	orrs	r1, r0
 8005024:	6021      	str	r1, [r4, #0]
 8005026:	8920      	ldrh	r0, [r4, #8]
 8005028:	b289      	uxth	r1, r1
 800502a:	0400      	lsls	r0, r0, #16
 800502c:	4308      	orrs	r0, r1
 800502e:	6020      	str	r0, [r4, #0]
 8005030:	2180      	movs	r1, #128	@ 0x80
 8005032:	0209      	lsls	r1, r1, #8
 8005034:	4301      	orrs	r1, r0
 8005036:	6021      	str	r1, [r4, #0]
 8005038:	2001      	movs	r0, #1
 800503a:	686a      	ldr	r2, [r5, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	0952      	lsrs	r2, r2, #5
 8005040:	4002      	ands	r2, r0
 8005042:	4b60      	ldr	r3, [pc, #384]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8005044:	400b      	ands	r3, r1
 8005046:	0351      	lsls	r1, r2, #13
 8005048:	4319      	orrs	r1, r3
 800504a:	6021      	str	r1, [r4, #0]
 800504c:	696a      	ldr	r2, [r5, #20]
 800504e:	05d2      	lsls	r2, r2, #23
 8005050:	0f52      	lsrs	r2, r2, #29
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8005054:	400b      	ands	r3, r1
 8005056:	0211      	lsls	r1, r2, #8
 8005058:	4319      	orrs	r1, r3
 800505a:	6021      	str	r1, [r4, #0]
 800505c:	6869      	ldr	r1, [r5, #4]
 800505e:	6809      	ldr	r1, [r1, #0]
 8005060:	0889      	lsrs	r1, r1, #2
 8005062:	4008      	ands	r0, r1
 8005064:	d006      	beq.n	8005074 <__iar_annotation$$branch+0x892>
 8005066:	6968      	ldr	r0, [r5, #20]
 8005068:	0741      	lsls	r1, r0, #29
 800506a:	0fc8      	lsrs	r0, r1, #31
 800506c:	e003      	b.n	8005076 <__iar_annotation$$branch+0x894>
 800506e:	bf00      	nop
 8005070:	fffff8ff 	.word	0xfffff8ff
 8005074:	2002      	movs	r0, #2
 8005076:	9002      	str	r0, [sp, #8]
 8005078:	208c      	movs	r0, #140	@ 0x8c
 800507a:	9001      	str	r0, [sp, #4]
 800507c:	2001      	movs	r0, #1
 800507e:	9000      	str	r0, [sp, #0]
 8005080:	0023      	movs	r3, r4
 8005082:	220f      	movs	r2, #15
 8005084:	2031      	movs	r0, #49	@ 0x31
 8005086:	5c29      	ldrb	r1, [r5, r0]
 8005088:	0028      	movs	r0, r5
 800508a:	f7fc fba0 	bl	80017ce <PE_Send_DataMessage>
 800508e:	2800      	cmp	r0, #0
 8005090:	d000      	beq.n	8005094 <__iar_annotation$$branch+0x8b2>
 8005092:	e217      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005094:	2054      	movs	r0, #84	@ 0x54
 8005096:	7728      	strb	r0, [r5, #28]
 8005098:	2134      	movs	r1, #52	@ 0x34
 800509a:	e08c      	b.n	80051b6 <__iar_annotation$$branch+0x9d4>
 800509c:	2634      	movs	r6, #52	@ 0x34
 800509e:	2031      	movs	r0, #49	@ 0x31
 80050a0:	5c28      	ldrb	r0, [r5, r0]
 80050a2:	f7fb fdc5 	bl	8000c30 <PE_Convert_SOPRxEvent>
 80050a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80050a8:	7809      	ldrb	r1, [r1, #0]
 80050aa:	4281      	cmp	r1, r0
 80050ac:	d144      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050ae:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80050b0:	0bc2      	lsrs	r2, r0, #15
 80050b2:	d141      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050b4:	2707      	movs	r7, #7
 80050b6:	0b02      	lsrs	r2, r0, #12
 80050b8:	423a      	tst	r2, r7
 80050ba:	d03d      	beq.n	8005138 <__iar_annotation$$branch+0x956>
 80050bc:	06c0      	lsls	r0, r0, #27
 80050be:	0ec0      	lsrs	r0, r0, #27
 80050c0:	280f      	cmp	r0, #15
 80050c2:	d139      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050c4:	2914      	cmp	r1, #20
 80050c6:	d005      	beq.n	80050d4 <__iar_annotation$$branch+0x8f2>
 80050c8:	2014      	movs	r0, #20
 80050ca:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80050cc:	7008      	strb	r0, [r1, #0]
 80050ce:	0028      	movs	r0, r5
 80050d0:	f7fb fd75 	bl	8000bbe <PE_Clear_RxEvent>
 80050d4:	2000      	movs	r0, #0
 80050d6:	7728      	strb	r0, [r5, #28]
 80050d8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80050da:	7880      	ldrb	r0, [r0, #2]
 80050dc:	06c1      	lsls	r1, r0, #27
 80050de:	0ec9      	lsrs	r1, r1, #27
 80050e0:	2904      	cmp	r1, #4
 80050e2:	d129      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050e4:	0980      	lsrs	r0, r0, #6
 80050e6:	d027      	beq.n	8005138 <__iar_annotation$$branch+0x956>
 80050e8:	9001      	str	r0, [sp, #4]
 80050ea:	488f      	ldr	r0, [pc, #572]	@ (8005328 <__iar_annotation$$branch+0xb46>)
 80050ec:	9901      	ldr	r1, [sp, #4]
 80050ee:	2901      	cmp	r1, #1
 80050f0:	d004      	beq.n	80050fc <__iar_annotation$$branch+0x91a>
 80050f2:	d30e      	bcc.n	8005112 <__iar_annotation$$branch+0x930>
 80050f4:	2903      	cmp	r1, #3
 80050f6:	d008      	beq.n	800510a <__iar_annotation$$branch+0x928>
 80050f8:	d302      	bcc.n	8005100 <__iar_annotation$$branch+0x91e>
 80050fa:	e00a      	b.n	8005112 <__iar_annotation$$branch+0x930>
 80050fc:	2635      	movs	r6, #53	@ 0x35
 80050fe:	e008      	b.n	8005112 <__iar_annotation$$branch+0x930>
 8005100:	6969      	ldr	r1, [r5, #20]
 8005102:	4008      	ands	r0, r1
 8005104:	6168      	str	r0, [r5, #20]
 8005106:	2636      	movs	r6, #54	@ 0x36
 8005108:	e003      	b.n	8005112 <__iar_annotation$$branch+0x930>
 800510a:	6969      	ldr	r1, [r5, #20]
 800510c:	4008      	ands	r0, r1
 800510e:	6168      	str	r0, [r5, #20]
 8005110:	2637      	movs	r6, #55	@ 0x37
 8005112:	0031      	movs	r1, r6
 8005114:	7c28      	ldrb	r0, [r5, #16]
 8005116:	f7fb fae7 	bl	80006e8 <USBPD_PE_Notification>
 800511a:	68e8      	ldr	r0, [r5, #12]
 800511c:	6a06      	ldr	r6, [r0, #32]
 800511e:	2e00      	cmp	r6, #0
 8005120:	d009      	beq.n	8005136 <__iar_annotation$$branch+0x954>
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	0a01      	lsrs	r1, r0, #8
 8005126:	400f      	ands	r7, r1
 8005128:	9700      	str	r7, [sp, #0]
 800512a:	0c03      	lsrs	r3, r0, #16
 800512c:	9a01      	ldr	r2, [sp, #4]
 800512e:	2031      	movs	r0, #49	@ 0x31
 8005130:	5c29      	ldrb	r1, [r5, r0]
 8005132:	7c28      	ldrb	r0, [r5, #16]
 8005134:	47b0      	blx	r6
 8005136:	e14d      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005138:	5da8      	ldrb	r0, [r5, r6]
 800513a:	e08f      	b.n	800525c <__iar_annotation$$branch+0xa7a>
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	400e      	ands	r6, r1
 8005140:	6026      	str	r6, [r4, #0]
 8005142:	4030      	ands	r0, r6
 8005144:	2105      	movs	r1, #5
 8005146:	4301      	orrs	r1, r0
 8005148:	6021      	str	r1, [r4, #0]
 800514a:	8920      	ldrh	r0, [r4, #8]
 800514c:	b289      	uxth	r1, r1
 800514e:	0400      	lsls	r0, r0, #16
 8005150:	4308      	orrs	r0, r1
 8005152:	6020      	str	r0, [r4, #0]
 8005154:	2180      	movs	r1, #128	@ 0x80
 8005156:	0209      	lsls	r1, r1, #8
 8005158:	4301      	orrs	r1, r0
 800515a:	6021      	str	r1, [r4, #0]
 800515c:	2001      	movs	r0, #1
 800515e:	686a      	ldr	r2, [r5, #4]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	0952      	lsrs	r2, r2, #5
 8005164:	4002      	ands	r2, r0
 8005166:	4b17      	ldr	r3, [pc, #92]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8005168:	400b      	ands	r3, r1
 800516a:	0351      	lsls	r1, r2, #13
 800516c:	4319      	orrs	r1, r3
 800516e:	6021      	str	r1, [r4, #0]
 8005170:	696a      	ldr	r2, [r5, #20]
 8005172:	05d2      	lsls	r2, r2, #23
 8005174:	0f52      	lsrs	r2, r2, #29
 8005176:	4b6d      	ldr	r3, [pc, #436]	@ (800532c <__iar_annotation$$branch+0xb4a>)
 8005178:	400b      	ands	r3, r1
 800517a:	0211      	lsls	r1, r2, #8
 800517c:	4319      	orrs	r1, r3
 800517e:	6021      	str	r1, [r4, #0]
 8005180:	6869      	ldr	r1, [r5, #4]
 8005182:	6809      	ldr	r1, [r1, #0]
 8005184:	0889      	lsrs	r1, r1, #2
 8005186:	4008      	ands	r0, r1
 8005188:	d003      	beq.n	8005192 <__iar_annotation$$branch+0x9b0>
 800518a:	6968      	ldr	r0, [r5, #20]
 800518c:	0741      	lsls	r1, r0, #29
 800518e:	0fc8      	lsrs	r0, r1, #31
 8005190:	e000      	b.n	8005194 <__iar_annotation$$branch+0x9b2>
 8005192:	2002      	movs	r0, #2
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	208d      	movs	r0, #141	@ 0x8d
 8005198:	9001      	str	r0, [sp, #4]
 800519a:	2001      	movs	r0, #1
 800519c:	9000      	str	r0, [sp, #0]
 800519e:	0023      	movs	r3, r4
 80051a0:	220f      	movs	r2, #15
 80051a2:	2031      	movs	r0, #49	@ 0x31
 80051a4:	5c29      	ldrb	r1, [r5, r0]
 80051a6:	0028      	movs	r0, r5
 80051a8:	f7fc fb11 	bl	80017ce <PE_Send_DataMessage>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d15e      	bne.n	800526e <__iar_annotation$$branch+0xa8c>
 80051b0:	2055      	movs	r0, #85	@ 0x55
 80051b2:	7728      	strb	r0, [r5, #28]
 80051b4:	2155      	movs	r1, #85	@ 0x55
 80051b6:	7c28      	ldrb	r0, [r5, #16]
 80051b8:	f7fb fa96 	bl	80006e8 <USBPD_PE_Notification>
 80051bc:	48c3      	ldr	r0, [pc, #780]	@ (80054cc <.text_19>)
 80051be:	83e8      	strh	r0, [r5, #30]
 80051c0:	2032      	movs	r0, #50	@ 0x32
 80051c2:	e12c      	b.n	800541e <__iar_annotation$$branch+0xc3c>
 80051c4:	ffff9fff 	.word	0xffff9fff
 80051c8:	0000801e 	.word	0x0000801e
 80051cc:	2031      	movs	r0, #49	@ 0x31
 80051ce:	5c28      	ldrb	r0, [r5, r0]
 80051d0:	f7fb fd2e 	bl	8000c30 <PE_Convert_SOPRxEvent>
 80051d4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80051d6:	7809      	ldrb	r1, [r1, #0]
 80051d8:	4281      	cmp	r1, r0
 80051da:	d13d      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051dc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80051de:	0bc2      	lsrs	r2, r0, #15
 80051e0:	d13a      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051e2:	2607      	movs	r6, #7
 80051e4:	0b02      	lsrs	r2, r0, #12
 80051e6:	4232      	tst	r2, r6
 80051e8:	d036      	beq.n	8005258 <__iar_annotation$$branch+0xa76>
 80051ea:	06c0      	lsls	r0, r0, #27
 80051ec:	0ec0      	lsrs	r0, r0, #27
 80051ee:	280f      	cmp	r0, #15
 80051f0:	d132      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051f2:	2914      	cmp	r1, #20
 80051f4:	d005      	beq.n	8005202 <__iar_annotation$$branch+0xa20>
 80051f6:	2014      	movs	r0, #20
 80051f8:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80051fa:	7008      	strb	r0, [r1, #0]
 80051fc:	0028      	movs	r0, r5
 80051fe:	f7fb fcde 	bl	8000bbe <PE_Clear_RxEvent>
 8005202:	2000      	movs	r0, #0
 8005204:	7728      	strb	r0, [r5, #28]
 8005206:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005208:	7880      	ldrb	r0, [r0, #2]
 800520a:	06c1      	lsls	r1, r0, #27
 800520c:	0ec9      	lsrs	r1, r1, #27
 800520e:	2905      	cmp	r1, #5
 8005210:	d122      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 8005212:	0980      	lsrs	r0, r0, #6
 8005214:	d020      	beq.n	8005258 <__iar_annotation$$branch+0xa76>
 8005216:	9001      	str	r0, [sp, #4]
 8005218:	2801      	cmp	r0, #1
 800521a:	d004      	beq.n	8005226 <__iar_annotation$$branch+0xa44>
 800521c:	d309      	bcc.n	8005232 <__iar_annotation$$branch+0xa50>
 800521e:	2803      	cmp	r0, #3
 8005220:	d005      	beq.n	800522e <__iar_annotation$$branch+0xa4c>
 8005222:	d302      	bcc.n	800522a <__iar_annotation$$branch+0xa48>
 8005224:	e005      	b.n	8005232 <__iar_annotation$$branch+0xa50>
 8005226:	2156      	movs	r1, #86	@ 0x56
 8005228:	e004      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 800522a:	2157      	movs	r1, #87	@ 0x57
 800522c:	e002      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 800522e:	2158      	movs	r1, #88	@ 0x58
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 8005232:	2155      	movs	r1, #85	@ 0x55
 8005234:	7c28      	ldrb	r0, [r5, #16]
 8005236:	f7fb fa57 	bl	80006e8 <USBPD_PE_Notification>
 800523a:	68e8      	ldr	r0, [r5, #12]
 800523c:	6a47      	ldr	r7, [r0, #36]	@ 0x24
 800523e:	2f00      	cmp	r7, #0
 8005240:	d009      	beq.n	8005256 <__iar_annotation$$branch+0xa74>
 8005242:	6820      	ldr	r0, [r4, #0]
 8005244:	0a01      	lsrs	r1, r0, #8
 8005246:	400e      	ands	r6, r1
 8005248:	9600      	str	r6, [sp, #0]
 800524a:	0c03      	lsrs	r3, r0, #16
 800524c:	9a01      	ldr	r2, [sp, #4]
 800524e:	2031      	movs	r0, #49	@ 0x31
 8005250:	5c29      	ldrb	r1, [r5, r0]
 8005252:	7c28      	ldrb	r0, [r5, #16]
 8005254:	47b8      	blx	r7
 8005256:	e0bd      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005258:	2034      	movs	r0, #52	@ 0x34
 800525a:	5c28      	ldrb	r0, [r5, r0]
 800525c:	06c0      	lsls	r0, r0, #27
 800525e:	0ec0      	lsrs	r0, r0, #27
 8005260:	2810      	cmp	r0, #16
 8005262:	d100      	bne.n	8005266 <__iar_annotation$$branch+0xa84>
 8005264:	e0bf      	b.n	80053e6 <__iar_annotation$$branch+0xc04>
 8005266:	8be8      	ldrh	r0, [r5, #30]
 8005268:	2180      	movs	r1, #128	@ 0x80
 800526a:	0209      	lsls	r1, r1, #8
 800526c:	4288      	cmp	r0, r1
 800526e:	d000      	beq.n	8005272 <__iar_annotation$$branch+0xa90>
 8005270:	e128      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005272:	e0d1      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 8005274:	2100      	movs	r1, #0
 8005276:	466a      	mov	r2, sp
 8005278:	7311      	strb	r1, [r2, #12]
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	400e      	ands	r6, r1
 800527e:	6026      	str	r6, [r4, #0]
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	4030      	ands	r0, r6
 8005284:	06c9      	lsls	r1, r1, #27
 8005286:	0ec9      	lsrs	r1, r1, #27
 8005288:	4301      	orrs	r1, r0
 800528a:	6021      	str	r1, [r4, #0]
 800528c:	8920      	ldrh	r0, [r4, #8]
 800528e:	b28a      	uxth	r2, r1
 8005290:	0401      	lsls	r1, r0, #16
 8005292:	4311      	orrs	r1, r2
 8005294:	6021      	str	r1, [r4, #0]
 8005296:	2080      	movs	r0, #128	@ 0x80
 8005298:	0200      	lsls	r0, r0, #8
 800529a:	4308      	orrs	r0, r1
 800529c:	6020      	str	r0, [r4, #0]
 800529e:	2601      	movs	r6, #1
 80052a0:	6869      	ldr	r1, [r5, #4]
 80052a2:	6809      	ldr	r1, [r1, #0]
 80052a4:	0949      	lsrs	r1, r1, #5
 80052a6:	4031      	ands	r1, r6
 80052a8:	4aaa      	ldr	r2, [pc, #680]	@ (8005554 <.text_21>)
 80052aa:	4002      	ands	r2, r0
 80052ac:	0348      	lsls	r0, r1, #13
 80052ae:	4310      	orrs	r0, r2
 80052b0:	6020      	str	r0, [r4, #0]
 80052b2:	491e      	ldr	r1, [pc, #120]	@ (800532c <__iar_annotation$$branch+0xb4a>)
 80052b4:	4001      	ands	r1, r0
 80052b6:	0230      	lsls	r0, r6, #8
 80052b8:	4308      	orrs	r0, r1
 80052ba:	6020      	str	r0, [r4, #0]
 80052bc:	9005      	str	r0, [sp, #20]
 80052be:	68e8      	ldr	r0, [r5, #12]
 80052c0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80052c2:	9001      	str	r0, [sp, #4]
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d00b      	beq.n	80052e0 <__iar_annotation$$branch+0xafe>
 80052c8:	a805      	add	r0, sp, #20
 80052ca:	1d00      	adds	r0, r0, #4
 80052cc:	9000      	str	r0, [sp, #0]
 80052ce:	ab03      	add	r3, sp, #12
 80052d0:	7820      	ldrb	r0, [r4, #0]
 80052d2:	06c2      	lsls	r2, r0, #27
 80052d4:	0ed2      	lsrs	r2, r2, #27
 80052d6:	2031      	movs	r0, #49	@ 0x31
 80052d8:	5c29      	ldrb	r1, [r5, r0]
 80052da:	7c28      	ldrb	r0, [r5, #16]
 80052dc:	9c01      	ldr	r4, [sp, #4]
 80052de:	47a0      	blx	r4
 80052e0:	4668      	mov	r0, sp
 80052e2:	7b00      	ldrb	r0, [r0, #12]
 80052e4:	1c40      	adds	r0, r0, #1
 80052e6:	4669      	mov	r1, sp
 80052e8:	7308      	strb	r0, [r1, #12]
 80052ea:	6868      	ldr	r0, [r5, #4]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	0880      	lsrs	r0, r0, #2
 80052f0:	4006      	ands	r6, r0
 80052f2:	d003      	beq.n	80052fc <__iar_annotation$$branch+0xb1a>
 80052f4:	6968      	ldr	r0, [r5, #20]
 80052f6:	0741      	lsls	r1, r0, #29
 80052f8:	0fc8      	lsrs	r0, r1, #31
 80052fa:	e000      	b.n	80052fe <__iar_annotation$$branch+0xb1c>
 80052fc:	2002      	movs	r0, #2
 80052fe:	9002      	str	r0, [sp, #8]
 8005300:	208f      	movs	r0, #143	@ 0x8f
 8005302:	9001      	str	r0, [sp, #4]
 8005304:	4668      	mov	r0, sp
 8005306:	7b00      	ldrb	r0, [r0, #12]
 8005308:	9000      	str	r0, [sp, #0]
 800530a:	ab05      	add	r3, sp, #20
 800530c:	220f      	movs	r2, #15
 800530e:	2031      	movs	r0, #49	@ 0x31
 8005310:	5c29      	ldrb	r1, [r5, r0]
 8005312:	0028      	movs	r0, r5
 8005314:	f7fc fa5b 	bl	80017ce <PE_Send_DataMessage>
 8005318:	2800      	cmp	r0, #0
 800531a:	d104      	bne.n	8005326 <__iar_annotation$$branch+0xb44>
 800531c:	205a      	movs	r0, #90	@ 0x5a
 800531e:	7728      	strb	r0, [r5, #28]
 8005320:	48bf      	ldr	r0, [pc, #764]	@ (8005620 <.text_23>)
 8005322:	83e8      	strh	r0, [r5, #30]
 8005324:	9704      	str	r7, [sp, #16]
 8005326:	e0ca      	b.n	80054be <__iar_annotation$$branch+0xcdc>
 8005328:	fffffe3f 	.word	0xfffffe3f
 800532c:	fffff8ff 	.word	0xfffff8ff
 8005330:	2607      	movs	r6, #7
 8005332:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8005334:	0b00      	lsrs	r0, r0, #12
 8005336:	2107      	movs	r1, #7
 8005338:	4001      	ands	r1, r0
 800533a:	1e48      	subs	r0, r1, #1
 800533c:	4669      	mov	r1, sp
 800533e:	7108      	strb	r0, [r1, #4]
 8005340:	2031      	movs	r0, #49	@ 0x31
 8005342:	5c28      	ldrb	r0, [r5, r0]
 8005344:	f7fb fc74 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8005348:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800534a:	7809      	ldrb	r1, [r1, #0]
 800534c:	4281      	cmp	r1, r0
 800534e:	d144      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005350:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8005352:	0bc2      	lsrs	r2, r0, #15
 8005354:	d141      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005356:	0b02      	lsrs	r2, r0, #12
 8005358:	4232      	tst	r2, r6
 800535a:	d03e      	beq.n	80053da <__iar_annotation$$branch+0xbf8>
 800535c:	06c0      	lsls	r0, r0, #27
 800535e:	0ec0      	lsrs	r0, r0, #27
 8005360:	280f      	cmp	r0, #15
 8005362:	d13a      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005364:	2914      	cmp	r1, #20
 8005366:	d005      	beq.n	8005374 <__iar_annotation$$branch+0xb92>
 8005368:	2014      	movs	r0, #20
 800536a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800536c:	7008      	strb	r0, [r1, #0]
 800536e:	0028      	movs	r0, r5
 8005370:	f7fb fc25 	bl	8000bbe <PE_Clear_RxEvent>
 8005374:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005376:	7880      	ldrb	r0, [r0, #2]
 8005378:	06c1      	lsls	r1, r0, #27
 800537a:	0ec9      	lsrs	r1, r1, #27
 800537c:	6862      	ldr	r2, [r4, #4]
 800537e:	4291      	cmp	r1, r2
 8005380:	d12b      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005382:	0981      	lsrs	r1, r0, #6
 8005384:	d029      	beq.n	80053da <__iar_annotation$$branch+0xbf8>
 8005386:	68e9      	ldr	r1, [r5, #12]
 8005388:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 800538a:	2900      	cmp	r1, #0
 800538c:	d022      	beq.n	80053d4 <__iar_annotation$$branch+0xbf2>
 800538e:	2600      	movs	r6, #0
 8005390:	e011      	b.n	80053b6 <__iar_annotation$$branch+0xbd4>
 8005392:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8005394:	00b2      	lsls	r2, r6, #2
 8005396:	188b      	adds	r3, r1, r2
 8005398:	799c      	ldrb	r4, [r3, #6]
 800539a:	79df      	ldrb	r7, [r3, #7]
 800539c:	023f      	lsls	r7, r7, #8
 800539e:	19e4      	adds	r4, r4, r7
 80053a0:	3108      	adds	r1, #8
 80053a2:	5c89      	ldrb	r1, [r1, r2]
 80053a4:	0409      	lsls	r1, r1, #16
 80053a6:	1861      	adds	r1, r4, r1
 80053a8:	7a5a      	ldrb	r2, [r3, #9]
 80053aa:	0612      	lsls	r2, r2, #24
 80053ac:	1889      	adds	r1, r1, r2
 80053ae:	aa05      	add	r2, sp, #20
 80053b0:	00b3      	lsls	r3, r6, #2
 80053b2:	50d1      	str	r1, [r2, r3]
 80053b4:	1c76      	adds	r6, r6, #1
 80053b6:	4669      	mov	r1, sp
 80053b8:	7909      	ldrb	r1, [r1, #4]
 80053ba:	428e      	cmp	r6, r1
 80053bc:	d3e9      	bcc.n	8005392 <__iar_annotation$$branch+0xbb0>
 80053be:	a905      	add	r1, sp, #20
 80053c0:	9100      	str	r1, [sp, #0]
 80053c2:	ab01      	add	r3, sp, #4
 80053c4:	06c2      	lsls	r2, r0, #27
 80053c6:	0ed2      	lsrs	r2, r2, #27
 80053c8:	2031      	movs	r0, #49	@ 0x31
 80053ca:	5c29      	ldrb	r1, [r5, r0]
 80053cc:	7c28      	ldrb	r0, [r5, #16]
 80053ce:	68ec      	ldr	r4, [r5, #12]
 80053d0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 80053d2:	47a0      	blx	r4
 80053d4:	2000      	movs	r0, #0
 80053d6:	83e8      	strh	r0, [r5, #30]
 80053d8:	e01e      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 80053da:	2034      	movs	r0, #52	@ 0x34
 80053dc:	5c28      	ldrb	r0, [r5, r0]
 80053de:	06c0      	lsls	r0, r0, #27
 80053e0:	0ec0      	lsrs	r0, r0, #27
 80053e2:	2810      	cmp	r0, #16
 80053e4:	d113      	bne.n	800540e <__iar_annotation$$branch+0xc2c>
 80053e6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80053e8:	7800      	ldrb	r0, [r0, #0]
 80053ea:	2814      	cmp	r0, #20
 80053ec:	d005      	beq.n	80053fa <__iar_annotation$$branch+0xc18>
 80053ee:	2014      	movs	r0, #20
 80053f0:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80053f2:	7008      	strb	r0, [r1, #0]
 80053f4:	0028      	movs	r0, r5
 80053f6:	f7fb fbe2 	bl	8000bbe <PE_Clear_RxEvent>
 80053fa:	2000      	movs	r0, #0
 80053fc:	83e8      	strh	r0, [r5, #30]
 80053fe:	2103      	movs	r1, #3
 8005400:	7469      	strb	r1, [r5, #17]
 8005402:	9004      	str	r0, [sp, #16]
 8005404:	2159      	movs	r1, #89	@ 0x59
 8005406:	7c28      	ldrb	r0, [r5, #16]
 8005408:	f7fb f96e 	bl	80006e8 <USBPD_PE_Notification>
 800540c:	e05a      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 800540e:	8be8      	ldrh	r0, [r5, #30]
 8005410:	2180      	movs	r1, #128	@ 0x80
 8005412:	0209      	lsls	r1, r1, #8
 8005414:	4288      	cmp	r0, r1
 8005416:	d155      	bne.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005418:	2003      	movs	r0, #3
 800541a:	7468      	strb	r0, [r5, #17]
 800541c:	2000      	movs	r0, #0
 800541e:	9004      	str	r0, [sp, #16]
 8005420:	e050      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005422:	2100      	movs	r1, #0
 8005424:	466a      	mov	r2, sp
 8005426:	7311      	strb	r1, [r2, #12]
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	400e      	ands	r6, r1
 800542c:	6026      	str	r6, [r4, #0]
 800542e:	6861      	ldr	r1, [r4, #4]
 8005430:	4030      	ands	r0, r6
 8005432:	06c9      	lsls	r1, r1, #27
 8005434:	0ec9      	lsrs	r1, r1, #27
 8005436:	4301      	orrs	r1, r0
 8005438:	6021      	str	r1, [r4, #0]
 800543a:	8920      	ldrh	r0, [r4, #8]
 800543c:	b28a      	uxth	r2, r1
 800543e:	0401      	lsls	r1, r0, #16
 8005440:	4311      	orrs	r1, r2
 8005442:	6021      	str	r1, [r4, #0]
 8005444:	2080      	movs	r0, #128	@ 0x80
 8005446:	0200      	lsls	r0, r0, #8
 8005448:	4308      	orrs	r0, r1
 800544a:	6020      	str	r0, [r4, #0]
 800544c:	2601      	movs	r6, #1
 800544e:	6869      	ldr	r1, [r5, #4]
 8005450:	6809      	ldr	r1, [r1, #0]
 8005452:	0949      	lsrs	r1, r1, #5
 8005454:	4031      	ands	r1, r6
 8005456:	4a3f      	ldr	r2, [pc, #252]	@ (8005554 <.text_21>)
 8005458:	4002      	ands	r2, r0
 800545a:	0348      	lsls	r0, r1, #13
 800545c:	4310      	orrs	r0, r2
 800545e:	6020      	str	r0, [r4, #0]
 8005460:	4970      	ldr	r1, [pc, #448]	@ (8005624 <.text_24>)
 8005462:	4001      	ands	r1, r0
 8005464:	0230      	lsls	r0, r6, #8
 8005466:	4308      	orrs	r0, r1
 8005468:	6020      	str	r0, [r4, #0]
 800546a:	9005      	str	r0, [sp, #20]
 800546c:	68e8      	ldr	r0, [r5, #12]
 800546e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <__iar_annotation$$branch+0xc9c>
 8005474:	a805      	add	r0, sp, #20
 8005476:	1d02      	adds	r2, r0, #4
 8005478:	a903      	add	r1, sp, #12
 800547a:	7c28      	ldrb	r0, [r5, #16]
 800547c:	4798      	blx	r3
 800547e:	4668      	mov	r0, sp
 8005480:	7b00      	ldrb	r0, [r0, #12]
 8005482:	1c40      	adds	r0, r0, #1
 8005484:	4669      	mov	r1, sp
 8005486:	7308      	strb	r0, [r1, #12]
 8005488:	6868      	ldr	r0, [r5, #4]
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	0880      	lsrs	r0, r0, #2
 800548e:	4006      	ands	r6, r0
 8005490:	d003      	beq.n	800549a <__iar_annotation$$branch+0xcb8>
 8005492:	6968      	ldr	r0, [r5, #20]
 8005494:	0741      	lsls	r1, r0, #29
 8005496:	0fc8      	lsrs	r0, r1, #31
 8005498:	e000      	b.n	800549c <__iar_annotation$$branch+0xcba>
 800549a:	2002      	movs	r0, #2
 800549c:	9002      	str	r0, [sp, #8]
 800549e:	2003      	movs	r0, #3
 80054a0:	9001      	str	r0, [sp, #4]
 80054a2:	4668      	mov	r0, sp
 80054a4:	7b00      	ldrb	r0, [r0, #12]
 80054a6:	9000      	str	r0, [sp, #0]
 80054a8:	ab05      	add	r3, sp, #20
 80054aa:	220f      	movs	r2, #15
 80054ac:	2031      	movs	r0, #49	@ 0x31
 80054ae:	5c29      	ldrb	r1, [r5, r0]
 80054b0:	0028      	movs	r0, r5
 80054b2:	f7fc f98c 	bl	80017ce <PE_Send_DataMessage>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d101      	bne.n	80054be <__iar_annotation$$branch+0xcdc>
 80054ba:	205a      	movs	r0, #90	@ 0x5a
 80054bc:	7728      	strb	r0, [r5, #28]
 80054be:	2000      	movs	r0, #0
 80054c0:	2132      	movs	r1, #50	@ 0x32
 80054c2:	5468      	strb	r0, [r5, r1]
 80054c4:	9804      	ldr	r0, [sp, #16]
 80054c6:	b01d      	add	sp, #116	@ 0x74
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080054cc <.text_19>:
 80054cc:	00008032 	.word	0x00008032

080054d0 <PE_StateMachine_UVDM>:
 80054d0:	2914      	cmp	r1, #20
 80054d2:	d000      	beq.n	80054d6 <PE_StateMachine_UVDM+0x6>
 80054d4:	4770      	bx	lr
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	b08c      	sub	sp, #48	@ 0x30
 80054da:	0004      	movs	r4, r0
 80054dc:	68e0      	ldr	r0, [r4, #12]
 80054de:	2800      	cmp	r0, #0
 80054e0:	d035      	beq.n	800554e <PE_StateMachine_UVDM+0x7e>
 80054e2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d032      	beq.n	800554e <PE_StateMachine_UVDM+0x7e>
 80054e8:	2500      	movs	r5, #0
 80054ea:	4669      	mov	r1, sp
 80054ec:	730d      	strb	r5, [r1, #12]
 80054ee:	a805      	add	r0, sp, #20
 80054f0:	1d03      	adds	r3, r0, #4
 80054f2:	aa03      	add	r2, sp, #12
 80054f4:	a904      	add	r1, sp, #16
 80054f6:	7c20      	ldrb	r0, [r4, #16]
 80054f8:	68e6      	ldr	r6, [r4, #12]
 80054fa:	6bf6      	ldr	r6, [r6, #60]	@ 0x3c
 80054fc:	47b0      	blx	r6
 80054fe:	9804      	ldr	r0, [sp, #16]
 8005500:	49cc      	ldr	r1, [pc, #816]	@ (8005834 <.text_27>)
 8005502:	4001      	ands	r1, r0
 8005504:	9104      	str	r1, [sp, #16]
 8005506:	4668      	mov	r0, sp
 8005508:	7b00      	ldrb	r0, [r0, #12]
 800550a:	1c40      	adds	r0, r0, #1
 800550c:	4669      	mov	r1, sp
 800550e:	7308      	strb	r0, [r1, #12]
 8005510:	9804      	ldr	r0, [sp, #16]
 8005512:	9005      	str	r0, [sp, #20]
 8005514:	6860      	ldr	r0, [r4, #4]
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	0741      	lsls	r1, r0, #29
 800551a:	0fc9      	lsrs	r1, r1, #31
 800551c:	d003      	beq.n	8005526 <PE_StateMachine_UVDM+0x56>
 800551e:	6960      	ldr	r0, [r4, #20]
 8005520:	0741      	lsls	r1, r0, #29
 8005522:	0fc8      	lsrs	r0, r1, #31
 8005524:	e000      	b.n	8005528 <PE_StateMachine_UVDM+0x58>
 8005526:	2002      	movs	r0, #2
 8005528:	9002      	str	r0, [sp, #8]
 800552a:	2003      	movs	r0, #3
 800552c:	9001      	str	r0, [sp, #4]
 800552e:	4668      	mov	r0, sp
 8005530:	7b00      	ldrb	r0, [r0, #12]
 8005532:	9000      	str	r0, [sp, #0]
 8005534:	ab05      	add	r3, sp, #20
 8005536:	220f      	movs	r2, #15
 8005538:	2031      	movs	r0, #49	@ 0x31
 800553a:	5c21      	ldrb	r1, [r4, r0]
 800553c:	0020      	movs	r0, r4
 800553e:	f7fc f946 	bl	80017ce <PE_Send_DataMessage>
 8005542:	2800      	cmp	r0, #0
 8005544:	d101      	bne.n	800554a <PE_StateMachine_UVDM+0x7a>
 8005546:	2059      	movs	r0, #89	@ 0x59
 8005548:	7720      	strb	r0, [r4, #28]
 800554a:	2032      	movs	r0, #50	@ 0x32
 800554c:	5425      	strb	r5, [r4, r0]
 800554e:	b00c      	add	sp, #48	@ 0x30
 8005550:	bd70      	pop	{r4, r5, r6, pc}
	...

08005554 <.text_21>:
 8005554:	ffff9fff 	.word	0xffff9fff

08005558 <PE_Check_DataMessageVDM>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	2403      	movs	r4, #3
 800555c:	2501      	movs	r5, #1
 800555e:	6801      	ldr	r1, [r0, #0]
 8005560:	6849      	ldr	r1, [r1, #4]
 8005562:	0949      	lsrs	r1, r1, #5
 8005564:	4029      	ands	r1, r5
 8005566:	d01f      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 8005568:	68c1      	ldr	r1, [r0, #12]
 800556a:	2900      	cmp	r1, #0
 800556c:	d01c      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 800556e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005570:	788a      	ldrb	r2, [r1, #2]
 8005572:	78cb      	ldrb	r3, [r1, #3]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	18d2      	adds	r2, r2, r3
 8005578:	790b      	ldrb	r3, [r1, #4]
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	18d2      	adds	r2, r2, r3
 800557e:	7949      	ldrb	r1, [r1, #5]
 8005580:	0609      	lsls	r1, r1, #24
 8005582:	1851      	adds	r1, r2, r1
 8005584:	9100      	str	r1, [sp, #0]
 8005586:	0bca      	lsrs	r2, r1, #15
 8005588:	402a      	ands	r2, r5
 800558a:	d014      	beq.n	80055b6 <PE_Check_DataMessageVDM+0x5e>
 800558c:	2394      	movs	r3, #148	@ 0x94
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	50c1      	str	r1, [r0, r3]
 8005592:	0989      	lsrs	r1, r1, #6
 8005594:	4021      	ands	r1, r4
 8005596:	d107      	bne.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 8005598:	6801      	ldr	r1, [r0, #0]
 800559a:	6849      	ldr	r1, [r1, #4]
 800559c:	0a09      	lsrs	r1, r1, #8
 800559e:	4029      	ands	r1, r5
 80055a0:	d002      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 80055a2:	f7ff f840 	bl	8004626 <PE_Receive_SVDM>
 80055a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80055a8:	6841      	ldr	r1, [r0, #4]
 80055aa:	6809      	ldr	r1, [r1, #0]
 80055ac:	400c      	ands	r4, r1
 80055ae:	2c02      	cmp	r4, #2
 80055b0:	d134      	bne.n	800561c <PE_Check_DataMessageVDM+0xc4>
 80055b2:	7445      	strb	r5, [r0, #17]
 80055b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80055b6:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 80055b8:	0449      	lsls	r1, r1, #17
 80055ba:	0f49      	lsrs	r1, r1, #29
 80055bc:	1e49      	subs	r1, r1, #1
 80055be:	4ab1      	ldr	r2, [pc, #708]	@ (8005884 <.text_29>)
 80055c0:	5481      	strb	r1, [r0, r2]
 80055c2:	0006      	movs	r6, r0
 80055c4:	2000      	movs	r0, #0
 80055c6:	e00f      	b.n	80055e8 <PE_Check_DataMessageVDM+0x90>
 80055c8:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 80055ca:	0082      	lsls	r2, r0, #2
 80055cc:	1889      	adds	r1, r1, r2
 80055ce:	798a      	ldrb	r2, [r1, #6]
 80055d0:	79cf      	ldrb	r7, [r1, #7]
 80055d2:	023f      	lsls	r7, r7, #8
 80055d4:	19d2      	adds	r2, r2, r7
 80055d6:	7a0f      	ldrb	r7, [r1, #8]
 80055d8:	043f      	lsls	r7, r7, #16
 80055da:	19d2      	adds	r2, r2, r7
 80055dc:	7a49      	ldrb	r1, [r1, #9]
 80055de:	0609      	lsls	r1, r1, #24
 80055e0:	1851      	adds	r1, r2, r1
 80055e2:	0082      	lsls	r2, r0, #2
 80055e4:	5099      	str	r1, [r3, r2]
 80055e6:	1c40      	adds	r0, r0, #1
 80055e8:	49a7      	ldr	r1, [pc, #668]	@ (8005888 <.text_30>)
 80055ea:	1873      	adds	r3, r6, r1
 80055ec:	3118      	adds	r1, #24
 80055ee:	1872      	adds	r2, r6, r1
 80055f0:	7811      	ldrb	r1, [r2, #0]
 80055f2:	4288      	cmp	r0, r1
 80055f4:	d3e8      	bcc.n	80055c8 <PE_Check_DataMessageVDM+0x70>
 80055f6:	9900      	ldr	r1, [sp, #0]
 80055f8:	68f0      	ldr	r0, [r6, #12]
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d008      	beq.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 80055fe:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8005600:	2f00      	cmp	r7, #0
 8005602:	d005      	beq.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 8005604:	7c30      	ldrb	r0, [r6, #16]
 8005606:	47b8      	blx	r7
 8005608:	2800      	cmp	r0, #0
 800560a:	d101      	bne.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 800560c:	7474      	strb	r4, [r6, #17]
 800560e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005610:	6870      	ldr	r0, [r6, #4]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	4004      	ands	r4, r0
 8005616:	2c02      	cmp	r4, #2
 8005618:	d100      	bne.n	800561c <PE_Check_DataMessageVDM+0xc4>
 800561a:	7475      	strb	r5, [r6, #17]
 800561c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08005620 <.text_23>:
 8005620:	0000801e 	.word	0x0000801e

08005624 <.text_24>:
 8005624:	fffff8ff 	.word	0xfffff8ff

08005628 <PE_SVDM_CheckIdentity>:
 8005628:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 800562a:	0003      	movs	r3, r0
 800562c:	2000      	movs	r0, #0
 800562e:	4c97      	ldr	r4, [pc, #604]	@ (800588c <.text_31>)
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	58e3      	ldr	r3, [r4, r3]
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005638:	045b      	lsls	r3, r3, #17
 800563a:	0f5b      	lsrs	r3, r3, #29
 800563c:	1e5c      	subs	r4, r3, #1
 800563e:	b2e3      	uxtb	r3, r4
 8005640:	2b03      	cmp	r3, #3
 8005642:	d200      	bcs.n	8005646 <PE_SVDM_CheckIdentity+0x1e>
 8005644:	e0b5      	b.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005646:	000b      	movs	r3, r1
 8005648:	7819      	ldrb	r1, [r3, #0]
 800564a:	785d      	ldrb	r5, [r3, #1]
 800564c:	022d      	lsls	r5, r5, #8
 800564e:	1949      	adds	r1, r1, r5
 8005650:	789d      	ldrb	r5, [r3, #2]
 8005652:	042d      	lsls	r5, r5, #16
 8005654:	1949      	adds	r1, r1, r5
 8005656:	78dd      	ldrb	r5, [r3, #3]
 8005658:	062d      	lsls	r5, r5, #24
 800565a:	194d      	adds	r5, r1, r5
 800565c:	6015      	str	r5, [r2, #0]
 800565e:	7919      	ldrb	r1, [r3, #4]
 8005660:	795e      	ldrb	r6, [r3, #5]
 8005662:	0236      	lsls	r6, r6, #8
 8005664:	1989      	adds	r1, r1, r6
 8005666:	799e      	ldrb	r6, [r3, #6]
 8005668:	0436      	lsls	r6, r6, #16
 800566a:	1989      	adds	r1, r1, r6
 800566c:	79de      	ldrb	r6, [r3, #7]
 800566e:	0636      	lsls	r6, r6, #24
 8005670:	1989      	adds	r1, r1, r6
 8005672:	6051      	str	r1, [r2, #4]
 8005674:	2108      	movs	r1, #8
 8005676:	7a1e      	ldrb	r6, [r3, #8]
 8005678:	7a5f      	ldrb	r7, [r3, #9]
 800567a:	023f      	lsls	r7, r7, #8
 800567c:	19f6      	adds	r6, r6, r7
 800567e:	7a9f      	ldrb	r7, [r3, #10]
 8005680:	043f      	lsls	r7, r7, #16
 8005682:	19f6      	adds	r6, r6, r7
 8005684:	7adf      	ldrb	r7, [r3, #11]
 8005686:	063f      	lsls	r7, r7, #24
 8005688:	19f6      	adds	r6, r6, r7
 800568a:	6096      	str	r6, [r2, #8]
 800568c:	1ee4      	subs	r4, r4, #3
 800568e:	2620      	movs	r6, #32
 8005690:	5d97      	ldrb	r7, [r2, r6]
 8005692:	26e0      	movs	r6, #224	@ 0xe0
 8005694:	403e      	ands	r6, r7
 8005696:	466f      	mov	r7, sp
 8005698:	703e      	strb	r6, [r7, #0]
 800569a:	466e      	mov	r6, sp
 800569c:	7836      	ldrb	r6, [r6, #0]
 800569e:	2720      	movs	r7, #32
 80056a0:	55d6      	strb	r6, [r2, r7]
 80056a2:	0626      	lsls	r6, r4, #24
 80056a4:	d022      	beq.n	80056ec <PE_SVDM_CheckIdentity+0xc4>
 80056a6:	1e66      	subs	r6, r4, #1
 80056a8:	466f      	mov	r7, sp
 80056aa:	707e      	strb	r6, [r7, #1]
 80056ac:	00ae      	lsls	r6, r5, #2
 80056ae:	0f76      	lsrs	r6, r6, #29
 80056b0:	2e05      	cmp	r6, #5
 80056b2:	d827      	bhi.n	8005704 <PE_SVDM_CheckIdentity+0xdc>
 80056b4:	a701      	add	r7, pc, #4	@ (adr r7, 80056bc <PE_SVDM_CheckIdentity+0x94>)
 80056b6:	5dbf      	ldrb	r7, [r7, r6]
 80056b8:	44bf      	add	pc, r7
 80056ba:	bf00      	nop
 80056bc:	5a060632 	.word	0x5a060632
 80056c0:	a680      	.short	0xa680
 80056c2:	210c      	movs	r1, #12
 80056c4:	466c      	mov	r4, sp
 80056c6:	7824      	ldrb	r4, [r4, #0]
 80056c8:	2608      	movs	r6, #8
 80056ca:	4326      	orrs	r6, r4
 80056cc:	2420      	movs	r4, #32
 80056ce:	5516      	strb	r6, [r2, r4]
 80056d0:	7b1c      	ldrb	r4, [r3, #12]
 80056d2:	7b5e      	ldrb	r6, [r3, #13]
 80056d4:	0236      	lsls	r6, r6, #8
 80056d6:	19a4      	adds	r4, r4, r6
 80056d8:	7b9e      	ldrb	r6, [r3, #14]
 80056da:	0436      	lsls	r6, r6, #16
 80056dc:	19a4      	adds	r4, r4, r6
 80056de:	7bde      	ldrb	r6, [r3, #15]
 80056e0:	0636      	lsls	r6, r6, #24
 80056e2:	19a4      	adds	r4, r4, r6
 80056e4:	6194      	str	r4, [r2, #24]
 80056e6:	466c      	mov	r4, sp
 80056e8:	7864      	ldrb	r4, [r4, #1]
 80056ea:	0026      	movs	r6, r4
 80056ec:	d062      	beq.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 80056ee:	9e01      	ldr	r6, [sp, #4]
 80056f0:	8eb6      	ldrh	r6, [r6, #52]	@ 0x34
 80056f2:	0636      	lsls	r6, r6, #24
 80056f4:	0fb6      	lsrs	r6, r6, #30
 80056f6:	2e02      	cmp	r6, #2
 80056f8:	d35c      	bcc.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 80056fa:	01ad      	lsls	r5, r5, #6
 80056fc:	0f6d      	lsrs	r5, r5, #29
 80056fe:	d059      	beq.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 8005700:	1e6d      	subs	r5, r5, #1
 8005702:	2d02      	cmp	r5, #2
 8005704:	d855      	bhi.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005706:	2520      	movs	r5, #32
 8005708:	5d55      	ldrb	r5, [r2, r5]
 800570a:	08ef      	lsrs	r7, r5, #3
 800570c:	07ff      	lsls	r7, r7, #31
 800570e:	d53b      	bpl.n	8005788 <PE_SVDM_CheckIdentity+0x160>
 8005710:	3108      	adds	r1, #8
 8005712:	1e64      	subs	r4, r4, #1
 8005714:	e039      	b.n	800578a <PE_SVDM_CheckIdentity+0x162>
 8005716:	210c      	movs	r1, #12
 8005718:	466c      	mov	r4, sp
 800571a:	7824      	ldrb	r4, [r4, #0]
 800571c:	2601      	movs	r6, #1
 800571e:	4326      	orrs	r6, r4
 8005720:	2420      	movs	r4, #32
 8005722:	5516      	strb	r6, [r2, r4]
 8005724:	7b1c      	ldrb	r4, [r3, #12]
 8005726:	7b5e      	ldrb	r6, [r3, #13]
 8005728:	0236      	lsls	r6, r6, #8
 800572a:	19a4      	adds	r4, r4, r6
 800572c:	7b9e      	ldrb	r6, [r3, #14]
 800572e:	0436      	lsls	r6, r6, #16
 8005730:	19a4      	adds	r4, r4, r6
 8005732:	7bde      	ldrb	r6, [r3, #15]
 8005734:	0636      	lsls	r6, r6, #24
 8005736:	19a4      	adds	r4, r4, r6
 8005738:	60d4      	str	r4, [r2, #12]
 800573a:	e7d4      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 800573c:	210c      	movs	r1, #12
 800573e:	466c      	mov	r4, sp
 8005740:	7824      	ldrb	r4, [r4, #0]
 8005742:	2604      	movs	r6, #4
 8005744:	4326      	orrs	r6, r4
 8005746:	2420      	movs	r4, #32
 8005748:	5516      	strb	r6, [r2, r4]
 800574a:	7b1c      	ldrb	r4, [r3, #12]
 800574c:	7b5e      	ldrb	r6, [r3, #13]
 800574e:	0236      	lsls	r6, r6, #8
 8005750:	19a4      	adds	r4, r4, r6
 8005752:	7b9e      	ldrb	r6, [r3, #14]
 8005754:	0436      	lsls	r6, r6, #16
 8005756:	19a4      	adds	r4, r4, r6
 8005758:	7bde      	ldrb	r6, [r3, #15]
 800575a:	0636      	lsls	r6, r6, #24
 800575c:	19a4      	adds	r4, r4, r6
 800575e:	6154      	str	r4, [r2, #20]
 8005760:	e7c1      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 8005762:	210c      	movs	r1, #12
 8005764:	466c      	mov	r4, sp
 8005766:	7824      	ldrb	r4, [r4, #0]
 8005768:	2602      	movs	r6, #2
 800576a:	4326      	orrs	r6, r4
 800576c:	2420      	movs	r4, #32
 800576e:	5516      	strb	r6, [r2, r4]
 8005770:	7b1c      	ldrb	r4, [r3, #12]
 8005772:	7b5e      	ldrb	r6, [r3, #13]
 8005774:	0236      	lsls	r6, r6, #8
 8005776:	19a4      	adds	r4, r4, r6
 8005778:	7b9e      	ldrb	r6, [r3, #14]
 800577a:	0436      	lsls	r6, r6, #16
 800577c:	19a4      	adds	r4, r4, r6
 800577e:	7bde      	ldrb	r6, [r3, #15]
 8005780:	0636      	lsls	r6, r6, #24
 8005782:	19a4      	adds	r4, r4, r6
 8005784:	6114      	str	r4, [r2, #16]
 8005786:	e7ae      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 8005788:	1d09      	adds	r1, r1, #4
 800578a:	b2e4      	uxtb	r4, r4
 800578c:	2c01      	cmp	r4, #1
 800578e:	d110      	bne.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005790:	2410      	movs	r4, #16
 8005792:	432c      	orrs	r4, r5
 8005794:	2520      	movs	r5, #32
 8005796:	5554      	strb	r4, [r2, r5]
 8005798:	1859      	adds	r1, r3, r1
 800579a:	780b      	ldrb	r3, [r1, #0]
 800579c:	784c      	ldrb	r4, [r1, #1]
 800579e:	0224      	lsls	r4, r4, #8
 80057a0:	191b      	adds	r3, r3, r4
 80057a2:	788c      	ldrb	r4, [r1, #2]
 80057a4:	0424      	lsls	r4, r4, #16
 80057a6:	191b      	adds	r3, r3, r4
 80057a8:	78c9      	ldrb	r1, [r1, #3]
 80057aa:	0609      	lsls	r1, r1, #24
 80057ac:	1859      	adds	r1, r3, r1
 80057ae:	61d1      	str	r1, [r2, #28]
 80057b0:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 80057b2:	2002      	movs	r0, #2
 80057b4:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

080057b6 <PE_SVDM_CheckSVIDs>:
 80057b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b8:	4b34      	ldr	r3, [pc, #208]	@ (800588c <.text_31>)
 80057ba:	0080      	lsls	r0, r0, #2
 80057bc:	5818      	ldr	r0, [r3, r0]
 80057be:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 80057c0:	0440      	lsls	r0, r0, #17
 80057c2:	0f40      	lsrs	r0, r0, #29
 80057c4:	1e46      	subs	r6, r0, #1
 80057c6:	b2f6      	uxtb	r6, r6
 80057c8:	2000      	movs	r0, #0
 80057ca:	2500      	movs	r5, #0
 80057cc:	7610      	strb	r0, [r2, #24]
 80057ce:	7650      	strb	r0, [r2, #25]
 80057d0:	000b      	movs	r3, r1
 80057d2:	0014      	movs	r4, r2
 80057d4:	0031      	movs	r1, r6
 80057d6:	5c1a      	ldrb	r2, [r3, r0]
 80057d8:	1c5e      	adds	r6, r3, #1
 80057da:	5c36      	ldrb	r6, [r6, r0]
 80057dc:	0236      	lsls	r6, r6, #8
 80057de:	1992      	adds	r2, r2, r6
 80057e0:	7e26      	ldrb	r6, [r4, #24]
 80057e2:	0076      	lsls	r6, r6, #1
 80057e4:	53a2      	strh	r2, [r4, r6]
 80057e6:	7e26      	ldrb	r6, [r4, #24]
 80057e8:	2201      	movs	r2, #1
 80057ea:	0077      	lsls	r7, r6, #1
 80057ec:	5be7      	ldrh	r7, [r4, r7]
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	d002      	beq.n	80057f8 <PE_SVDM_CheckSVIDs+0x42>
 80057f2:	1c76      	adds	r6, r6, #1
 80057f4:	7626      	strb	r6, [r4, #24]
 80057f6:	e001      	b.n	80057fc <PE_SVDM_CheckSVIDs+0x46>
 80057f8:	2501      	movs	r5, #1
 80057fa:	7662      	strb	r2, [r4, #25]
 80057fc:	1c80      	adds	r0, r0, #2
 80057fe:	b2c0      	uxtb	r0, r0
 8005800:	5c1e      	ldrb	r6, [r3, r0]
 8005802:	1c5f      	adds	r7, r3, #1
 8005804:	5c3f      	ldrb	r7, [r7, r0]
 8005806:	023f      	lsls	r7, r7, #8
 8005808:	19f6      	adds	r6, r6, r7
 800580a:	7e27      	ldrb	r7, [r4, #24]
 800580c:	007f      	lsls	r7, r7, #1
 800580e:	53e6      	strh	r6, [r4, r7]
 8005810:	7e26      	ldrb	r6, [r4, #24]
 8005812:	0077      	lsls	r7, r6, #1
 8005814:	5be7      	ldrh	r7, [r4, r7]
 8005816:	2f00      	cmp	r7, #0
 8005818:	d002      	beq.n	8005820 <PE_SVDM_CheckSVIDs+0x6a>
 800581a:	1c76      	adds	r6, r6, #1
 800581c:	7626      	strb	r6, [r4, #24]
 800581e:	e001      	b.n	8005824 <PE_SVDM_CheckSVIDs+0x6e>
 8005820:	2501      	movs	r5, #1
 8005822:	7662      	strb	r2, [r4, #25]
 8005824:	1c80      	adds	r0, r0, #2
 8005826:	b2c0      	uxtb	r0, r0
 8005828:	008a      	lsls	r2, r1, #2
 800582a:	4290      	cmp	r0, r2
 800582c:	d201      	bcs.n	8005832 <PE_SVDM_CheckSVIDs+0x7c>
 800582e:	002a      	movs	r2, r5
 8005830:	d0d1      	beq.n	80057d6 <PE_SVDM_CheckSVIDs+0x20>
 8005832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005834 <.text_27>:
 8005834:	ffff7fff 	.word	0xffff7fff

08005838 <PE_SVDM_CheckModes>:
 8005838:	b530      	push	{r4, r5, lr}
 800583a:	4c14      	ldr	r4, [pc, #80]	@ (800588c <.text_31>)
 800583c:	0080      	lsls	r0, r0, #2
 800583e:	5820      	ldr	r0, [r4, r0]
 8005840:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8005842:	0440      	lsls	r0, r0, #17
 8005844:	0f40      	lsrs	r0, r0, #29
 8005846:	1e40      	subs	r0, r0, #1
 8005848:	b2c0      	uxtb	r0, r0
 800584a:	2400      	movs	r4, #0
 800584c:	8399      	strh	r1, [r3, #28]
 800584e:	601c      	str	r4, [r3, #0]
 8005850:	5d11      	ldrb	r1, [r2, r4]
 8005852:	1915      	adds	r5, r2, r4
 8005854:	786d      	ldrb	r5, [r5, #1]
 8005856:	022d      	lsls	r5, r5, #8
 8005858:	1949      	adds	r1, r1, r5
 800585a:	1915      	adds	r5, r2, r4
 800585c:	78ad      	ldrb	r5, [r5, #2]
 800585e:	042d      	lsls	r5, r5, #16
 8005860:	1949      	adds	r1, r1, r5
 8005862:	1915      	adds	r5, r2, r4
 8005864:	78ed      	ldrb	r5, [r5, #3]
 8005866:	062d      	lsls	r5, r5, #24
 8005868:	1949      	adds	r1, r1, r5
 800586a:	681d      	ldr	r5, [r3, #0]
 800586c:	00ad      	lsls	r5, r5, #2
 800586e:	195d      	adds	r5, r3, r5
 8005870:	6069      	str	r1, [r5, #4]
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	1c49      	adds	r1, r1, #1
 8005876:	6019      	str	r1, [r3, #0]
 8005878:	1d24      	adds	r4, r4, #4
 800587a:	b2e4      	uxtb	r4, r4
 800587c:	0081      	lsls	r1, r0, #2
 800587e:	428c      	cmp	r4, r1
 8005880:	d3e6      	bcc.n	8005850 <PE_SVDM_CheckModes+0x18>
 8005882:	bd30      	pop	{r4, r5, pc}

08005884 <.text_29>:
 8005884:	000004ac 	.word	0x000004ac

08005888 <.text_30>:
 8005888:	00000494 	.word	0x00000494

0800588c <.text_31>:
 800588c:	2000017c 	.word	0x2000017c

08005890 <USBPD_PRL_TimerCounter>:
 8005890:	4954      	ldr	r1, [pc, #336]	@ (80059e4 <.text_15>)
 8005892:	0080      	lsls	r0, r0, #2
 8005894:	1808      	adds	r0, r1, r0
 8005896:	6801      	ldr	r1, [r0, #0]
 8005898:	790a      	ldrb	r2, [r1, #4]
 800589a:	2a00      	cmp	r2, #0
 800589c:	d002      	beq.n	80058a4 <USBPD_PRL_TimerCounter+0x14>
 800589e:	790a      	ldrb	r2, [r1, #4]
 80058a0:	1e52      	subs	r2, r2, #1
 80058a2:	710a      	strb	r2, [r1, #4]
 80058a4:	6800      	ldr	r0, [r0, #0]
 80058a6:	7841      	ldrb	r1, [r0, #1]
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d001      	beq.n	80058b0 <USBPD_PRL_TimerCounter+0x20>
 80058ac:	1e49      	subs	r1, r1, #1
 80058ae:	7041      	strb	r1, [r0, #1]
 80058b0:	4770      	bx	lr
	...

080058b4 <USBPD_PRL_Init>:
 80058b4:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80058b6:	b081      	sub	sp, #4
 80058b8:	0014      	movs	r4, r2
 80058ba:	001d      	movs	r5, r3
 80058bc:	2616      	movs	r6, #22
 80058be:	209c      	movs	r0, #156	@ 0x9c
 80058c0:	0040      	lsls	r0, r0, #1
 80058c2:	f010 fdc1 	bl	8016448 <malloc>
 80058c6:	0007      	movs	r7, r0
 80058c8:	d01e      	beq.n	8005908 <USBPD_PRL_Init+0x54>
 80058ca:	9e02      	ldr	r6, [sp, #8]
 80058cc:	219c      	movs	r1, #156	@ 0x9c
 80058ce:	0049      	lsls	r1, r1, #1
 80058d0:	f010 fec7 	bl	8016662 <__aeabi_memclr>
 80058d4:	220f      	movs	r2, #15
 80058d6:	2103      	movs	r1, #3
 80058d8:	1db8      	adds	r0, r7, #6
 80058da:	f010 febb 	bl	8016654 <__aeabi_memset>
 80058de:	4841      	ldr	r0, [pc, #260]	@ (80059e4 <.text_15>)
 80058e0:	4669      	mov	r1, sp
 80058e2:	7909      	ldrb	r1, [r1, #4]
 80058e4:	0089      	lsls	r1, r1, #2
 80058e6:	5047      	str	r7, [r0, r1]
 80058e8:	62bc      	str	r4, [r7, #40]	@ 0x28
 80058ea:	62fd      	str	r5, [r7, #44]	@ 0x2c
 80058ec:	2001      	movs	r0, #1
 80058ee:	9000      	str	r0, [sp, #0]
 80058f0:	6870      	ldr	r0, [r6, #4]
 80058f2:	0743      	lsls	r3, r0, #29
 80058f4:	0fdb      	lsrs	r3, r3, #31
 80058f6:	003a      	movs	r2, r7
 80058f8:	3230      	adds	r2, #48	@ 0x30
 80058fa:	bf00      	nop
 80058fc:	a103      	add	r1, pc, #12	@ (adr r1, 800590c <USBPD_PRL_Init::PRL_PhyCallbacks>)
 80058fe:	4668      	mov	r0, sp
 8005900:	7900      	ldrb	r0, [r0, #4]
 8005902:	f009 fdaf 	bl	800f464 <USBPD_PHY_Init>
 8005906:	0006      	movs	r6, r0
 8005908:	0030      	movs	r0, r6
 800590a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800590c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 800590c:	5f45 0800 629d 0800 62f7 0800 6311 0800     E_...b...b...c..
 800591c:	6319 0800 5a05 0800                         .c...Z..

08005924 <USBPD_PRL_GetMemoryConsumption>:
 8005924:	20ea      	movs	r0, #234	@ 0xea
 8005926:	0080      	lsls	r0, r0, #2
 8005928:	4770      	bx	lr

0800592a <USBPD_PRL_SetHeader>:
 800592a:	b530      	push	{r4, r5, lr}
 800592c:	4c2d      	ldr	r4, [pc, #180]	@ (80059e4 <.text_15>)
 800592e:	0080      	lsls	r0, r0, #2
 8005930:	5820      	ldr	r0, [r4, r0]
 8005932:	8a44      	ldrh	r4, [r0, #18]
 8005934:	4d2c      	ldr	r5, [pc, #176]	@ (80059e8 <.text_16>)
 8005936:	4025      	ands	r5, r4
 8005938:	0209      	lsls	r1, r1, #8
 800593a:	2480      	movs	r4, #128	@ 0x80
 800593c:	0064      	lsls	r4, r4, #1
 800593e:	4021      	ands	r1, r4
 8005940:	4329      	orrs	r1, r5
 8005942:	8241      	strh	r1, [r0, #18]
 8005944:	4c29      	ldr	r4, [pc, #164]	@ (80059ec <.text_17>)
 8005946:	400c      	ands	r4, r1
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	2220      	movs	r2, #32
 800594c:	4011      	ands	r1, r2
 800594e:	4321      	orrs	r1, r4
 8005950:	8241      	strh	r1, [r0, #18]
 8005952:	4a27      	ldr	r2, [pc, #156]	@ (80059f0 <.text_18>)
 8005954:	400a      	ands	r2, r1
 8005956:	0199      	lsls	r1, r3, #6
 8005958:	23c0      	movs	r3, #192	@ 0xc0
 800595a:	400b      	ands	r3, r1
 800595c:	4313      	orrs	r3, r2
 800595e:	8243      	strh	r3, [r0, #18]
 8005960:	bd30      	pop	{r4, r5, pc}

08005962 <USBPD_PRL_SetHeaderPowerRole>:
 8005962:	4a20      	ldr	r2, [pc, #128]	@ (80059e4 <.text_15>)
 8005964:	0080      	lsls	r0, r0, #2
 8005966:	5810      	ldr	r0, [r2, r0]
 8005968:	8a42      	ldrh	r2, [r0, #18]
 800596a:	4b1f      	ldr	r3, [pc, #124]	@ (80059e8 <.text_16>)
 800596c:	4013      	ands	r3, r2
 800596e:	0209      	lsls	r1, r1, #8
 8005970:	2280      	movs	r2, #128	@ 0x80
 8005972:	0052      	lsls	r2, r2, #1
 8005974:	e007      	b.n	8005986 <.text_10>

08005976 <USBPD_PRL_SetHeaderDataRole>:
 8005976:	4a1b      	ldr	r2, [pc, #108]	@ (80059e4 <.text_15>)
 8005978:	0080      	lsls	r0, r0, #2
 800597a:	5810      	ldr	r0, [r2, r0]
 800597c:	8a42      	ldrh	r2, [r0, #18]
 800597e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <.text_17>)
 8005980:	4013      	ands	r3, r2
 8005982:	0149      	lsls	r1, r1, #5
 8005984:	2220      	movs	r2, #32

08005986 <.text_10>:
 8005986:	4011      	ands	r1, r2
 8005988:	4319      	orrs	r1, r3
 800598a:	8241      	strh	r1, [r0, #18]
 800598c:	4770      	bx	lr

0800598e <USBPD_PRL_SetHeaderSpecification>:
 800598e:	4a15      	ldr	r2, [pc, #84]	@ (80059e4 <.text_15>)
 8005990:	0080      	lsls	r0, r0, #2
 8005992:	5810      	ldr	r0, [r2, r0]
 8005994:	8a42      	ldrh	r2, [r0, #18]
 8005996:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <.text_18>)
 8005998:	4013      	ands	r3, r2
 800599a:	0189      	lsls	r1, r1, #6
 800599c:	22c0      	movs	r2, #192	@ 0xc0
 800599e:	400a      	ands	r2, r1
 80059a0:	431a      	orrs	r2, r3
 80059a2:	8242      	strh	r2, [r0, #18]
 80059a4:	4770      	bx	lr

080059a6 <USBPD_PRL_CBL_SetHeaderSpecification>:
 80059a6:	4a0f      	ldr	r2, [pc, #60]	@ (80059e4 <.text_15>)
 80059a8:	0080      	lsls	r0, r0, #2
 80059aa:	5810      	ldr	r0, [r2, r0]
 80059ac:	018a      	lsls	r2, r1, #6
 80059ae:	21c0      	movs	r1, #192	@ 0xc0
 80059b0:	4011      	ands	r1, r2
 80059b2:	4a0f      	ldr	r2, [pc, #60]	@ (80059f0 <.text_18>)
 80059b4:	8a83      	ldrh	r3, [r0, #20]
 80059b6:	4013      	ands	r3, r2
 80059b8:	430b      	orrs	r3, r1
 80059ba:	8283      	strh	r3, [r0, #20]
 80059bc:	8ac3      	ldrh	r3, [r0, #22]
 80059be:	401a      	ands	r2, r3
 80059c0:	4311      	orrs	r1, r2
 80059c2:	82c1      	strh	r1, [r0, #22]
 80059c4:	4770      	bx	lr

080059c6 <USBPD_PRL_SRCSetSinkNG>:
 80059c6:	b580      	push	{r7, lr}
 80059c8:	f009 fe41 	bl	800f64e <USBPD_PHY_SetResistor_SinkTxNG>
 80059cc:	bd01      	pop	{r0, pc}

080059ce <USBPD_PRL_SRCReleaseSinkNG>:
 80059ce:	b510      	push	{r4, lr}
 80059d0:	0004      	movs	r4, r0
 80059d2:	f009 fe4b 	bl	800f66c <USBPD_PHY_SetResistor_SinkTxOK>
 80059d6:	2000      	movs	r0, #0
 80059d8:	4902      	ldr	r1, [pc, #8]	@ (80059e4 <.text_15>)
 80059da:	00a2      	lsls	r2, r4, #2
 80059dc:	5889      	ldr	r1, [r1, r2]
 80059de:	7148      	strb	r0, [r1, #5]
 80059e0:	bd10      	pop	{r4, pc}
	...

080059e4 <.text_15>:
 80059e4:	20000188 	.word	0x20000188

080059e8 <.text_16>:
 80059e8:	0000feff 	.word	0x0000feff

080059ec <.text_17>:
 80059ec:	0000ffdf 	.word	0x0000ffdf

080059f0 <.text_18>:
 80059f0:	0000ff3f 	.word	0x0000ff3f

080059f4 <USBPD_PRL_IsResistor_SinkTxOK>:
 80059f4:	b580      	push	{r7, lr}
 80059f6:	f009 fe5f 	bl	800f6b8 <USBPD_PHY_IsResistor_SinkTxOk>
 80059fa:	bd02      	pop	{r1, pc}

080059fc <USBPD_PRL_FastRoleSwapSignalling>:
 80059fc:	b580      	push	{r7, lr}
 80059fe:	f009 fe6b 	bl	800f6d8 <USBPD_PHY_FastRoleSwapSignalling>
 8005a02:	bd01      	pop	{r0, pc}

08005a04 <PRL_FastRoleSwapReception>:
 8005a04:	b580      	push	{r7, lr}
 8005a06:	f7fb fa4d 	bl	8000ea4 <PE_PRL_FastRoleSwapReception>
 8005a0a:	bd01      	pop	{r0, pc}

08005a0c <USBPD_PRL_SOPCapability>:
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	f009 fe3d 	bl	800f68c <USBPD_PHY_SOPSupported>
 8005a12:	bd01      	pop	{r0, pc}

08005a14 <USBPD_PRL_SendMessage>:
 8005a14:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8005a16:	b087      	sub	sp, #28
 8005a18:	2503      	movs	r5, #3
 8005a1a:	4668      	mov	r0, sp
 8005a1c:	7f00      	ldrb	r0, [r0, #28]
 8005a1e:	9005      	str	r0, [sp, #20]
 8005a20:	48ca      	ldr	r0, [pc, #808]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	1880      	adds	r0, r0, r2
 8005a28:	9000      	str	r0, [sp, #0]
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	0004      	movs	r4, r0
 8005a2e:	7962      	ldrb	r2, [r4, #5]
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	d004      	beq.n	8005a3e <USBPD_PRL_SendMessage+0x2a>
 8005a34:	7a62      	ldrb	r2, [r4, #9]
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	d101      	bne.n	8005a3e <USBPD_PRL_SendMessage+0x2a>
 8005a3a:	220f      	movs	r2, #15
 8005a3c:	7142      	strb	r2, [r0, #5]
 8005a3e:	466a      	mov	r2, sp
 8005a40:	7111      	strb	r1, [r2, #4]
 8005a42:	4669      	mov	r1, sp
 8005a44:	7909      	ldrb	r1, [r1, #4]
 8005a46:	9104      	str	r1, [sp, #16]
 8005a48:	1861      	adds	r1, r4, r1
 8005a4a:	9a05      	ldr	r2, [sp, #20]
 8005a4c:	0052      	lsls	r2, r2, #1
 8005a4e:	1c52      	adds	r2, r2, #1
 8005a50:	466e      	mov	r6, sp
 8005a52:	7172      	strb	r2, [r6, #5]
 8005a54:	9a04      	ldr	r2, [sp, #16]
 8005a56:	0052      	lsls	r2, r2, #1
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	9302      	str	r3, [sp, #8]
 8005a5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005a60:	7963      	ldrb	r3, [r4, #5]
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d900      	bls.n	8005a68 <USBPD_PRL_SendMessage+0x54>
 8005a66:	e1f6      	b.n	8005e56 <USBPD_PRL_SendMessage+0x442>
 8005a68:	a701      	add	r7, pc, #4	@ (adr r7, 8005a70 <USBPD_PRL_SendMessage+0x5c>)
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	5aff      	ldrh	r7, [r7, r3]
 8005a6e:	44bf      	add	pc, r7
 8005a70:	00480020 	.word	0x00480020
 8005a74:	03e4005e 	.word	0x03e4005e
 8005a78:	00a8006a 	.word	0x00a8006a
 8005a7c:	015a0086 	.word	0x015a0086
 8005a80:	03e403e4 	.word	0x03e403e4
 8005a84:	030802de 	.word	0x030802de
 8005a88:	03560334 	.word	0x03560334
 8005a8c:	03de03e4 	.word	0x03de03e4
 8005a90:	03a6      	.short	0x03a6
 8005a92:	f3ef 8710 	mrs	r7, PRIMASK
 8005a96:	b672      	cpsid	i
 8005a98:	4668      	mov	r0, sp
 8005a9a:	7f00      	ldrb	r0, [r0, #28]
 8005a9c:	f7fb f8b4 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d105      	bne.n	8005ab0 <USBPD_PRL_SendMessage+0x9c>
 8005aa4:	7aa0      	ldrb	r0, [r4, #10]
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d102      	bne.n	8005ab0 <USBPD_PRL_SendMessage+0x9c>
 8005aaa:	20ff      	movs	r0, #255	@ 0xff
 8005aac:	7260      	strb	r0, [r4, #9]
 8005aae:	e000      	b.n	8005ab2 <USBPD_PRL_SendMessage+0x9e>
 8005ab0:	7266      	strb	r6, [r4, #9]
 8005ab2:	f387 8810 	msr	PRIMASK, r7
 8005ab6:	2006      	movs	r0, #6
 8005ab8:	e1a0      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005aba:	4668      	mov	r0, sp
 8005abc:	7f00      	ldrb	r0, [r0, #28]
 8005abe:	f009 fdc6 	bl	800f64e <USBPD_PHY_SetResistor_SinkTxNG>
 8005ac2:	2002      	movs	r0, #2
 8005ac4:	9900      	ldr	r1, [sp, #0]
 8005ac6:	6809      	ldr	r1, [r1, #0]
 8005ac8:	7148      	strb	r0, [r1, #5]
 8005aca:	2013      	movs	r0, #19
 8005acc:	7060      	strb	r0, [r4, #1]
 8005ace:	e1c4      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005ad0:	2a01      	cmp	r2, #1
 8005ad2:	d10f      	bne.n	8005af4 <USBPD_PRL_SendMessage+0xe0>
 8005ad4:	7861      	ldrb	r1, [r4, #1]
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d10a      	bne.n	8005af0 <USBPD_PRL_SendMessage+0xdc>
 8005ada:	e01c      	b.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005adc:	2a02      	cmp	r2, #2
 8005ade:	d109      	bne.n	8005af4 <USBPD_PRL_SendMessage+0xe0>
 8005ae0:	4668      	mov	r0, sp
 8005ae2:	7f00      	ldrb	r0, [r0, #28]
 8005ae4:	f009 fde8 	bl	800f6b8 <USBPD_PHY_IsResistor_SinkTxOk>
 8005ae8:	2801      	cmp	r0, #1
 8005aea:	d101      	bne.n	8005af0 <USBPD_PRL_SendMessage+0xdc>
 8005aec:	2005      	movs	r0, #5
 8005aee:	e185      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005af0:	2509      	movs	r5, #9
 8005af2:	e1b2      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005af4:	2106      	movs	r1, #6
 8005af6:	e154      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005af8:	9903      	ldr	r1, [sp, #12]
 8005afa:	1861      	adds	r1, r4, r1
 8005afc:	8a49      	ldrh	r1, [r1, #18]
 8005afe:	0609      	lsls	r1, r1, #24
 8005b00:	0f89      	lsrs	r1, r1, #30
 8005b02:	2902      	cmp	r1, #2
 8005b04:	d107      	bne.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005b06:	2a01      	cmp	r2, #1
 8005b08:	d101      	bne.n	8005b0e <USBPD_PRL_SendMessage+0xfa>
 8005b0a:	7142      	strb	r2, [r0, #5]
 8005b0c:	e1a5      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005b0e:	2a02      	cmp	r2, #2
 8005b10:	d101      	bne.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005b12:	2104      	movs	r1, #4
 8005b14:	e145      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005b16:	2105      	movs	r1, #5
 8005b18:	e143      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005b1a:	9803      	ldr	r0, [sp, #12]
 8005b1c:	1820      	adds	r0, r4, r0
 8005b1e:	8a43      	ldrh	r3, [r0, #18]
 8005b20:	4acf      	ldr	r2, [pc, #828]	@ (8005e60 <.text_24>)
 8005b22:	401a      	ands	r2, r3
 8005b24:	ab08      	add	r3, sp, #32
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	06db      	lsls	r3, r3, #27
 8005b2a:	0edb      	lsrs	r3, r3, #27
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	8243      	strh	r3, [r0, #18]
 8005b30:	045a      	lsls	r2, r3, #17
 8005b32:	0c52      	lsrs	r2, r2, #17
 8005b34:	ab08      	add	r3, sp, #32
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	09db      	lsrs	r3, r3, #7
 8005b3a:	03db      	lsls	r3, r3, #15
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	8243      	strh	r3, [r0, #18]
 8005b40:	70a6      	strb	r6, [r4, #2]
 8005b42:	8a43      	ldrh	r3, [r0, #18]
 8005b44:	0bda      	lsrs	r2, r3, #15
 8005b46:	d023      	beq.n	8005b90 <USBPD_PRL_SendMessage+0x17c>
 8005b48:	9a02      	ldr	r2, [sp, #8]
 8005b4a:	7892      	ldrb	r2, [r2, #2]
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	78db      	ldrb	r3, [r3, #3]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	18d2      	adds	r2, r2, r3
 8005b54:	83a2      	strh	r2, [r4, #28]
 8005b56:	8ba2      	ldrh	r2, [r4, #28]
 8005b58:	0a93      	lsrs	r3, r2, #10
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d40f      	bmi.n	8005b7e <USBPD_PRL_SendMessage+0x16a>
 8005b5e:	0ad2      	lsrs	r2, r2, #11
 8005b60:	0712      	lsls	r2, r2, #28
 8005b62:	d122      	bne.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b64:	466a      	mov	r2, sp
 8005b66:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8005b68:	1f12      	subs	r2, r2, #4
 8005b6a:	8462      	strh	r2, [r4, #34]	@ 0x22
 8005b6c:	05d2      	lsls	r2, r2, #23
 8005b6e:	0dd2      	lsrs	r2, r2, #23
 8005b70:	8ba3      	ldrh	r3, [r4, #28]
 8005b72:	27fe      	movs	r7, #254	@ 0xfe
 8005b74:	023f      	lsls	r7, r7, #8
 8005b76:	401f      	ands	r7, r3
 8005b78:	433a      	orrs	r2, r7
 8005b7a:	83a2      	strh	r2, [r4, #28]
 8005b7c:	e015      	b.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b7e:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005b80:	8a42      	ldrh	r2, [r0, #18]
 8005b82:	4bb8      	ldr	r3, [pc, #736]	@ (8005e64 <.text_25>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	2280      	movs	r2, #128	@ 0x80
 8005b88:	0152      	lsls	r2, r2, #5
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	8242      	strh	r2, [r0, #18]
 8005b8e:	e00c      	b.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b90:	4ab4      	ldr	r2, [pc, #720]	@ (8005e64 <.text_25>)
 8005b92:	401a      	ands	r2, r3
 8005b94:	466b      	mov	r3, sp
 8005b96:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005b98:	1e9b      	subs	r3, r3, #2
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	27e0      	movs	r7, #224	@ 0xe0
 8005ba0:	01ff      	lsls	r7, r7, #7
 8005ba2:	401f      	ands	r7, r3
 8005ba4:	4317      	orrs	r7, r2
 8005ba6:	8247      	strh	r7, [r0, #18]
 8005ba8:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005baa:	aa08      	add	r2, sp, #32
 8005bac:	7812      	ldrb	r2, [r2, #0]
 8005bae:	2a0d      	cmp	r2, #13
 8005bb0:	d10a      	bne.n	8005bc8 <USBPD_PRL_SendMessage+0x1b4>
 8005bb2:	8a40      	ldrh	r0, [r0, #18]
 8005bb4:	22f0      	movs	r2, #240	@ 0xf0
 8005bb6:	0212      	lsls	r2, r2, #8
 8005bb8:	4002      	ands	r2, r0
 8005bba:	d105      	bne.n	8005bc8 <USBPD_PRL_SendMessage+0x1b4>
 8005bbc:	72ce      	strb	r6, [r1, #11]
 8005bbe:	220f      	movs	r2, #15
 8005bc0:	2103      	movs	r1, #3
 8005bc2:	1da0      	adds	r0, r4, #6
 8005bc4:	f010 fd46 	bl	8016654 <__aeabi_memset>
 8005bc8:	2007      	movs	r0, #7
 8005bca:	e117      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005bcc:	4669      	mov	r1, sp
 8005bce:	8f0c      	ldrh	r4, [r1, #56]	@ 0x38
 8005bd0:	9903      	ldr	r1, [sp, #12]
 8005bd2:	1841      	adds	r1, r0, r1
 8005bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005bd6:	466b      	mov	r3, sp
 8005bd8:	7f1b      	ldrb	r3, [r3, #28]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	58d2      	ldr	r2, [r2, r3]
 8005bde:	466b      	mov	r3, sp
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	18d2      	adds	r2, r2, r3
 8005be6:	8a52      	ldrh	r2, [r2, #18]
 8005be8:	0bd3      	lsrs	r3, r2, #15
 8005bea:	d074      	beq.n	8005cd6 <USBPD_PRL_SendMessage+0x2c2>
 8005bec:	8b83      	ldrh	r3, [r0, #28]
 8005bee:	0a9b      	lsrs	r3, r3, #10
 8005bf0:	07db      	lsls	r3, r3, #31
 8005bf2:	d465      	bmi.n	8005cc0 <USBPD_PRL_SendMessage+0x2ac>
 8005bf4:	4b55      	ldr	r3, [pc, #340]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005bf6:	466f      	mov	r7, sp
 8005bf8:	7f3f      	ldrb	r7, [r7, #28]
 8005bfa:	00bf      	lsls	r7, r7, #2
 8005bfc:	59db      	ldr	r3, [r3, r7]
 8005bfe:	8b9b      	ldrh	r3, [r3, #28]
 8005c00:	8c47      	ldrh	r7, [r0, #34]	@ 0x22
 8005c02:	2f1b      	cmp	r7, #27
 8005c04:	d30a      	bcc.n	8005c1c <USBPD_PRL_SendMessage+0x208>
 8005c06:	0bdf      	lsrs	r7, r3, #15
 8005c08:	d008      	beq.n	8005c1c <USBPD_PRL_SendMessage+0x208>
 8005c0a:	23e0      	movs	r3, #224	@ 0xe0
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	824b      	strh	r3, [r1, #18]
 8005c12:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 8005c14:	391a      	subs	r1, #26
 8005c16:	8441      	strh	r1, [r0, #34]	@ 0x22
 8005c18:	241e      	movs	r4, #30
 8005c1a:	e051      	b.n	8005cc0 <USBPD_PRL_SendMessage+0x2ac>
 8005c1c:	0ada      	lsrs	r2, r3, #11
 8005c1e:	0712      	lsls	r2, r2, #28
 8005c20:	d107      	bne.n	8005c32 <USBPD_PRL_SendMessage+0x21e>
 8005c22:	22fe      	movs	r2, #254	@ 0xfe
 8005c24:	0212      	lsls	r2, r2, #8
 8005c26:	401a      	ands	r2, r3
 8005c28:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c2a:	05db      	lsls	r3, r3, #23
 8005c2c:	0ddb      	lsrs	r3, r3, #23
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	8383      	strh	r3, [r0, #28]
 8005c32:	8a4b      	ldrh	r3, [r1, #18]
 8005c34:	4a8b      	ldr	r2, [pc, #556]	@ (8005e64 <.text_25>)
 8005c36:	401a      	ands	r2, r3
 8005c38:	824a      	strh	r2, [r1, #18]
 8005c3a:	8b83      	ldrh	r3, [r0, #28]
 8005c3c:	0bdb      	lsrs	r3, r3, #15
 8005c3e:	d03c      	beq.n	8005cba <USBPD_PRL_SendMessage+0x2a6>
 8005c40:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c42:	1c9b      	adds	r3, r3, #2
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	031b      	lsls	r3, r3, #12
 8005c48:	24e0      	movs	r4, #224	@ 0xe0
 8005c4a:	01e4      	lsls	r4, r4, #7
 8005c4c:	401c      	ands	r4, r3
 8005c4e:	4314      	orrs	r4, r2
 8005c50:	824c      	strh	r4, [r1, #18]
 8005c52:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8005c54:	1c80      	adds	r0, r0, #2
 8005c56:	0781      	lsls	r1, r0, #30
 8005c58:	0f89      	lsrs	r1, r1, #30
 8005c5a:	d025      	beq.n	8005ca8 <USBPD_PRL_SendMessage+0x294>
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	483b      	ldr	r0, [pc, #236]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005c60:	9b05      	ldr	r3, [sp, #20]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	18c0      	adds	r0, r0, r3
 8005c66:	9000      	str	r0, [sp, #0]
 8005c68:	9802      	ldr	r0, [sp, #8]
 8005c6a:	9102      	str	r1, [sp, #8]
 8005c6c:	e004      	b.n	8005c78 <USBPD_PRL_SendMessage+0x264>
 8005c6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005c70:	1859      	adds	r1, r3, r1
 8005c72:	1841      	adds	r1, r0, r1
 8005c74:	710e      	strb	r6, [r1, #4]
 8005c76:	1c52      	adds	r2, r2, #1
 8005c78:	9900      	ldr	r1, [sp, #0]
 8005c7a:	680b      	ldr	r3, [r1, #0]
 8005c7c:	b2d1      	uxtb	r1, r2
 8005c7e:	2404      	movs	r4, #4
 8005c80:	9f02      	ldr	r7, [sp, #8]
 8005c82:	1be4      	subs	r4, r4, r7
 8005c84:	42a1      	cmp	r1, r4
 8005c86:	d3f2      	bcc.n	8005c6e <USBPD_PRL_SendMessage+0x25a>
 8005c88:	9002      	str	r0, [sp, #8]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	3012      	adds	r0, #18
 8005c8e:	9903      	ldr	r1, [sp, #12]
 8005c90:	1840      	adds	r0, r0, r1
 8005c92:	8801      	ldrh	r1, [r0, #0]
 8005c94:	4a73      	ldr	r2, [pc, #460]	@ (8005e64 <.text_25>)
 8005c96:	400a      	ands	r2, r1
 8005c98:	0b09      	lsrs	r1, r1, #12
 8005c9a:	1c49      	adds	r1, r1, #1
 8005c9c:	0309      	lsls	r1, r1, #12
 8005c9e:	23e0      	movs	r3, #224	@ 0xe0
 8005ca0:	01db      	lsls	r3, r3, #7
 8005ca2:	400b      	ands	r3, r1
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	8003      	strh	r3, [r0, #0]
 8005ca8:	9800      	ldr	r0, [sp, #0]
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	3012      	adds	r0, #18
 8005cae:	9903      	ldr	r1, [sp, #12]
 8005cb0:	5a40      	ldrh	r0, [r0, r1]
 8005cb2:	0440      	lsls	r0, r0, #17
 8005cb4:	0f40      	lsrs	r0, r0, #29
 8005cb6:	0084      	lsls	r4, r0, #2
 8005cb8:	1ca4      	adds	r4, r4, #2
 8005cba:	9800      	ldr	r0, [sp, #0]
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	8446      	strh	r6, [r0, #34]	@ 0x22
 8005cc0:	9800      	ldr	r0, [sp, #0]
 8005cc2:	6800      	ldr	r0, [r0, #0]
 8005cc4:	8b80      	ldrh	r0, [r0, #28]
 8005cc6:	9902      	ldr	r1, [sp, #8]
 8005cc8:	7088      	strb	r0, [r1, #2]
 8005cca:	9800      	ldr	r0, [sp, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	8b80      	ldrh	r0, [r0, #28]
 8005cd0:	0a00      	lsrs	r0, r0, #8
 8005cd2:	9902      	ldr	r1, [sp, #8]
 8005cd4:	70c8      	strb	r0, [r1, #3]
 8005cd6:	9800      	ldr	r0, [sp, #0]
 8005cd8:	6802      	ldr	r2, [r0, #0]
 8005cda:	0010      	movs	r0, r2
 8005cdc:	3012      	adds	r0, #18
 8005cde:	9903      	ldr	r1, [sp, #12]
 8005ce0:	1840      	adds	r0, r0, r1
 8005ce2:	8803      	ldrh	r3, [r0, #0]
 8005ce4:	498c      	ldr	r1, [pc, #560]	@ (8005f18 <.text_30>)
 8005ce6:	4019      	ands	r1, r3
 8005ce8:	320b      	adds	r2, #11
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	5cd2      	ldrb	r2, [r2, r3]
 8005cee:	0253      	lsls	r3, r2, #9
 8005cf0:	22e0      	movs	r2, #224	@ 0xe0
 8005cf2:	0112      	lsls	r2, r2, #4
 8005cf4:	401a      	ands	r2, r3
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	8002      	strh	r2, [r0, #0]
 8005cfa:	9802      	ldr	r0, [sp, #8]
 8005cfc:	7002      	strb	r2, [r0, #0]
 8005cfe:	9800      	ldr	r0, [sp, #0]
 8005d00:	6800      	ldr	r0, [r0, #0]
 8005d02:	3012      	adds	r0, #18
 8005d04:	9903      	ldr	r1, [sp, #12]
 8005d06:	5a40      	ldrh	r0, [r0, r1]
 8005d08:	0a00      	lsrs	r0, r0, #8
 8005d0a:	9902      	ldr	r1, [sp, #8]
 8005d0c:	7048      	strb	r0, [r1, #1]
 8005d0e:	9800      	ldr	r0, [sp, #0]
 8005d10:	6800      	ldr	r0, [r0, #0]
 8005d12:	81c4      	strh	r4, [r0, #14]
 8005d14:	210a      	movs	r1, #10
 8005d16:	7141      	strb	r1, [r0, #5]
 8005d18:	2102      	movs	r1, #2
 8005d1a:	7401      	strb	r1, [r0, #16]
 8005d1c:	b2a0      	uxth	r0, r4
 8005d1e:	9000      	str	r0, [sp, #0]
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	4668      	mov	r0, sp
 8005d24:	7902      	ldrb	r2, [r0, #4]
 8005d26:	7f01      	ldrb	r1, [r0, #28]
 8005d28:	2002      	movs	r0, #2
 8005d2a:	4e7c      	ldr	r6, [pc, #496]	@ (8005f1c <.text_31>)
 8005d2c:	6836      	ldr	r6, [r6, #0]
 8005d2e:	47b0      	blx	r6
 8005d30:	497b      	ldr	r1, [pc, #492]	@ (8005f20 <.text_32>)
 8005d32:	4668      	mov	r0, sp
 8005d34:	7940      	ldrb	r0, [r0, #5]
 8005d36:	f00b f837 	bl	8010da8 <USBPD_TIM_Start>
 8005d3a:	b2a3      	uxth	r3, r4
 8005d3c:	9a02      	ldr	r2, [sp, #8]
 8005d3e:	4668      	mov	r0, sp
 8005d40:	7901      	ldrb	r1, [r0, #4]
 8005d42:	7f00      	ldrb	r0, [r0, #28]
 8005d44:	f009 fc3d 	bl	800f5c2 <USBPD_PHY_SendMessage>
 8005d48:	e087      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005d4a:	bf00      	nop
 8005d4c:	20000188 	.word	0x20000188
 8005d50:	f3ef 8410 	mrs	r4, PRIMASK
 8005d54:	b672      	cpsid	i
 8005d56:	9800      	ldr	r0, [sp, #0]
 8005d58:	6800      	ldr	r0, [r0, #0]
 8005d5a:	7940      	ldrb	r0, [r0, #5]
 8005d5c:	280a      	cmp	r0, #10
 8005d5e:	d109      	bne.n	8005d74 <USBPD_PRL_SendMessage+0x360>
 8005d60:	4668      	mov	r0, sp
 8005d62:	7940      	ldrb	r0, [r0, #5]
 8005d64:	f00b f88e 	bl	8010e84 <USBPD_TIM_IsExpired>
 8005d68:	2801      	cmp	r0, #1
 8005d6a:	d103      	bne.n	8005d74 <USBPD_PRL_SendMessage+0x360>
 8005d6c:	200d      	movs	r0, #13
 8005d6e:	9900      	ldr	r1, [sp, #0]
 8005d70:	6809      	ldr	r1, [r1, #0]
 8005d72:	7148      	strb	r0, [r1, #5]
 8005d74:	f384 8810 	msr	PRIMASK, r4
 8005d78:	e06f      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005d7a:	7aca      	ldrb	r2, [r1, #11]
 8005d7c:	8b67      	ldrh	r7, [r4, #26]
 8005d7e:	053f      	lsls	r7, r7, #20
 8005d80:	0f7f      	lsrs	r7, r7, #29
 8005d82:	42ba      	cmp	r2, r7
 8005d84:	d10c      	bne.n	8005da0 <USBPD_PRL_SendMessage+0x38c>
 8005d86:	7ea3      	ldrb	r3, [r4, #26]
 8005d88:	06db      	lsls	r3, r3, #27
 8005d8a:	0edb      	lsrs	r3, r3, #27
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <USBPD_PRL_SendMessage+0x38c>
 8005d90:	1c52      	adds	r2, r2, #1
 8005d92:	0750      	lsls	r0, r2, #29
 8005d94:	0f40      	lsrs	r0, r0, #29
 8005d96:	72c8      	strb	r0, [r1, #11]
 8005d98:	9800      	ldr	r0, [sp, #0]
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	7146      	strb	r6, [r0, #5]
 8005d9e:	e011      	b.n	8005dc4 <USBPD_PRL_SendMessage+0x3b0>
 8005da0:	210d      	movs	r1, #13
 8005da2:	7141      	strb	r1, [r0, #5]
 8005da4:	e059      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005da6:	7ac8      	ldrb	r0, [r1, #11]
 8005da8:	1c40      	adds	r0, r0, #1
 8005daa:	0740      	lsls	r0, r0, #29
 8005dac:	0f40      	lsrs	r0, r0, #29
 8005dae:	72c8      	strb	r0, [r1, #11]
 8005db0:	9800      	ldr	r0, [sp, #0]
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	7146      	strb	r6, [r0, #5]
 8005db6:	8ba1      	ldrh	r1, [r4, #28]
 8005db8:	485a      	ldr	r0, [pc, #360]	@ (8005f24 <.text_33>)
 8005dba:	4008      	ands	r0, r1
 8005dbc:	83a0      	strh	r0, [r4, #28]
 8005dbe:	495a      	ldr	r1, [pc, #360]	@ (8005f28 <.text_34>)
 8005dc0:	4001      	ands	r1, r0
 8005dc2:	83a1      	strh	r1, [r4, #28]
 8005dc4:	2505      	movs	r5, #5
 8005dc6:	e048      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005dc8:	78a0      	ldrb	r0, [r4, #2]
 8005dca:	1c40      	adds	r0, r0, #1
 8005dcc:	70a0      	strb	r0, [r4, #2]
 8005dce:	9a03      	ldr	r2, [sp, #12]
 8005dd0:	18a2      	adds	r2, r4, r2
 8005dd2:	8a52      	ldrh	r2, [r2, #18]
 8005dd4:	0613      	lsls	r3, r2, #24
 8005dd6:	0f9b      	lsrs	r3, r3, #30
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <USBPD_PRL_SendMessage+0x3cc>
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e000      	b.n	8005de2 <USBPD_PRL_SendMessage+0x3ce>
 8005de0:	2302      	movs	r3, #2
 8005de2:	0bd2      	lsrs	r2, r2, #15
 8005de4:	d006      	beq.n	8005df4 <USBPD_PRL_SendMessage+0x3e0>
 8005de6:	8ba2      	ldrh	r2, [r4, #28]
 8005de8:	0bd4      	lsrs	r4, r2, #15
 8005dea:	d103      	bne.n	8005df4 <USBPD_PRL_SendMessage+0x3e0>
 8005dec:	05d2      	lsls	r2, r2, #23
 8005dee:	0dd2      	lsrs	r2, r2, #23
 8005df0:	2a1b      	cmp	r2, #27
 8005df2:	d207      	bcs.n	8005e04 <USBPD_PRL_SendMessage+0x3f0>
 8005df4:	b2c0      	uxtb	r0, r0
 8005df6:	4283      	cmp	r3, r0
 8005df8:	d304      	bcc.n	8005e04 <USBPD_PRL_SendMessage+0x3f0>
 8005dfa:	2010      	movs	r0, #16
 8005dfc:	9900      	ldr	r1, [sp, #0]
 8005dfe:	6809      	ldr	r1, [r1, #0]
 8005e00:	7148      	strb	r0, [r1, #5]
 8005e02:	e02a      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e04:	9800      	ldr	r0, [sp, #0]
 8005e06:	6800      	ldr	r0, [r0, #0]
 8005e08:	7146      	strb	r6, [r0, #5]
 8005e0a:	2507      	movs	r5, #7
 8005e0c:	7ac8      	ldrb	r0, [r1, #11]
 8005e0e:	1c40      	adds	r0, r0, #1
 8005e10:	2207      	movs	r2, #7
 8005e12:	4002      	ands	r2, r0
 8005e14:	72ca      	strb	r2, [r1, #11]
 8005e16:	e020      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e18:	210a      	movs	r1, #10
 8005e1a:	7141      	strb	r1, [r0, #5]
 8005e1c:	2002      	movs	r0, #2
 8005e1e:	7420      	strb	r0, [r4, #16]
 8005e20:	493f      	ldr	r1, [pc, #252]	@ (8005f20 <.text_32>)
 8005e22:	4668      	mov	r0, sp
 8005e24:	7940      	ldrb	r0, [r0, #5]
 8005e26:	f00a ffbf 	bl	8010da8 <USBPD_TIM_Start>
 8005e2a:	89e3      	ldrh	r3, [r4, #14]
 8005e2c:	9a02      	ldr	r2, [sp, #8]
 8005e2e:	4668      	mov	r0, sp
 8005e30:	7901      	ldrb	r1, [r0, #4]
 8005e32:	7f00      	ldrb	r0, [r0, #28]
 8005e34:	f009 fbc5 	bl	800f5c2 <USBPD_PHY_SendMessage>
 8005e38:	4668      	mov	r0, sp
 8005e3a:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 8005e3c:	9000      	str	r0, [sp, #0]
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	4668      	mov	r0, sp
 8005e42:	7902      	ldrb	r2, [r0, #4]
 8005e44:	7f01      	ldrb	r1, [r0, #28]
 8005e46:	2002      	movs	r0, #2
 8005e48:	4c34      	ldr	r4, [pc, #208]	@ (8005f1c <.text_31>)
 8005e4a:	6824      	ldr	r4, [r4, #0]
 8005e4c:	47a0      	blx	r4
 8005e4e:	e004      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e50:	7146      	strb	r6, [r0, #5]
 8005e52:	2506      	movs	r5, #6
 8005e54:	e001      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e56:	7146      	strb	r6, [r0, #5]
 8005e58:	2510      	movs	r5, #16
 8005e5a:	0028      	movs	r0, r5
 8005e5c:	b009      	add	sp, #36	@ 0x24
 8005e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e60 <.text_24>:
 8005e60:	0000ffe0 	.word	0x0000ffe0

08005e64 <.text_25>:
 8005e64:	00008fff 	.word	0x00008fff

08005e68 <USBPD_PRL_ResetRequestProcess>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	0005      	movs	r5, r0
 8005e6c:	000e      	movs	r6, r1
 8005e6e:	482f      	ldr	r0, [pc, #188]	@ (8005f2c <.text_35>)
 8005e70:	00a9      	lsls	r1, r5, #2
 8005e72:	1840      	adds	r0, r0, r1
 8005e74:	9000      	str	r0, [sp, #0]
 8005e76:	6804      	ldr	r4, [r0, #0]
 8005e78:	2700      	movs	r7, #0
 8005e7a:	70e7      	strb	r7, [r4, #3]
 8005e7c:	72e7      	strb	r7, [r4, #11]
 8005e7e:	7327      	strb	r7, [r4, #12]
 8005e80:	7367      	strb	r7, [r4, #13]
 8005e82:	220f      	movs	r2, #15
 8005e84:	2103      	movs	r1, #3
 8005e86:	1da0      	adds	r0, r4, #6
 8005e88:	f010 fbe4 	bl	8016654 <__aeabi_memset>
 8005e8c:	9800      	ldr	r0, [sp, #0]
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	7147      	strb	r7, [r0, #5]
 8005e92:	9700      	str	r7, [sp, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	0032      	movs	r2, r6
 8005e98:	0029      	movs	r1, r5
 8005e9a:	2002      	movs	r0, #2
 8005e9c:	4f1f      	ldr	r7, [pc, #124]	@ (8005f1c <.text_31>)
 8005e9e:	683f      	ldr	r7, [r7, #0]
 8005ea0:	47b8      	blx	r7
 8005ea2:	0028      	movs	r0, r5
 8005ea4:	f000 f849 	bl	8005f3a <PRL_DisableRX>
 8005ea8:	0031      	movs	r1, r6
 8005eaa:	0028      	movs	r0, r5
 8005eac:	f009 fb73 	bl	800f596 <USBPD_PHY_ResetRequest>
 8005eb0:	2005      	movs	r0, #5
 8005eb2:	7120      	strb	r0, [r4, #4]
 8005eb4:	78e0      	ldrb	r0, [r4, #3]
 8005eb6:	2801      	cmp	r0, #1
 8005eb8:	d002      	beq.n	8005ec0 <USBPD_PRL_ResetRequestProcess+0x58>
 8005eba:	7920      	ldrb	r0, [r4, #4]
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d1f9      	bne.n	8005eb4 <USBPD_PRL_ResetRequestProcess+0x4c>
 8005ec0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005ec2 <USBDPD_PRL_BistCarrierEyeMode>:
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	2905      	cmp	r1, #5
 8005ec6:	d102      	bne.n	8005ece <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005ec8:	f009 fb9a 	bl	800f600 <USBPD_PHY_Send_BIST_Pattern>
 8005ecc:	bd02      	pop	{r1, pc}
 8005ece:	2010      	movs	r0, #16
 8005ed0:	bd02      	pop	{r1, pc}

08005ed2 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	2905      	cmp	r1, #5
 8005ed6:	d103      	bne.n	8005ee0 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005ed8:	2107      	movs	r1, #7
 8005eda:	f009 fba1 	bl	800f620 <USBPD_PHY_ExitTransmit>
 8005ede:	bd02      	pop	{r1, pc}
 8005ee0:	2010      	movs	r0, #16
 8005ee2:	bd02      	pop	{r1, pc}

08005ee4 <USBPD_PRL_Reset>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	0004      	movs	r4, r0
 8005ee8:	4810      	ldr	r0, [pc, #64]	@ (8005f2c <.text_35>)
 8005eea:	00a1      	lsls	r1, r4, #2
 8005eec:	5845      	ldr	r5, [r0, r1]
 8005eee:	2600      	movs	r6, #0
 8005ef0:	716e      	strb	r6, [r5, #5]
 8005ef2:	702e      	strb	r6, [r5, #0]
 8005ef4:	712e      	strb	r6, [r5, #4]
 8005ef6:	72ee      	strb	r6, [r5, #11]
 8005ef8:	732e      	strb	r6, [r5, #12]
 8005efa:	736e      	strb	r6, [r5, #13]
 8005efc:	220f      	movs	r2, #15
 8005efe:	2103      	movs	r1, #3
 8005f00:	1da8      	adds	r0, r5, #6
 8005f02:	f010 fba7 	bl	8016654 <__aeabi_memset>
 8005f06:	2025      	movs	r0, #37	@ 0x25
 8005f08:	542e      	strb	r6, [r5, r0]
 8005f0a:	0020      	movs	r0, r4
 8005f0c:	f009 fb39 	bl	800f582 <USBPD_PHY_Reset>
 8005f10:	0020      	movs	r0, r4
 8005f12:	f009 fbf0 	bl	800f6f6 <USBPD_PHY_EnableRX>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}

08005f18 <.text_30>:
 8005f18:	0000f1ff 	.word	0x0000f1ff

08005f1c <.text_31>:
 8005f1c:	20000000 	.word	0x20000000

08005f20 <.text_32>:
 8005f20:	00002710 	.word	0x00002710

08005f24 <.text_33>:
 8005f24:	000087ff 	.word	0x000087ff

08005f28 <.text_34>:
 8005f28:	0000fbff 	.word	0x0000fbff

08005f2c <.text_35>:
 8005f2c:	20000188 	.word	0x20000188

08005f30 <USBPD_PRL_Stop>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	f009 fbef 	bl	800f714 <USBPD_PHY_DisableRX>
 8005f36:	bd01      	pop	{r0, pc}

08005f38 <USBPD_PRL_DeInit>:
 8005f38:	4770      	bx	lr

08005f3a <PRL_DisableRX>:
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	f009 fbea 	bl	800f714 <USBPD_PHY_DisableRX>
 8005f40:	bd01      	pop	{r0, pc}
	...

08005f44 <PRL_Received>:
 8005f44:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	a809      	add	r0, sp, #36	@ 0x24
 8005f4a:	7805      	ldrb	r5, [r0, #0]
 8005f4c:	48d0      	ldr	r0, [pc, #832]	@ (8006290 <PRL_Received+0x34c>)
 8005f4e:	00a9      	lsls	r1, r5, #2
 8005f50:	1846      	adds	r6, r0, r1
 8005f52:	6834      	ldr	r4, [r6, #0]
 8005f54:	4628      	mov	r0, r5
 8005f56:	f009 fb09 	bl	800f56c <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005f5a:	a909      	add	r1, sp, #36	@ 0x24
 8005f5c:	7809      	ldrb	r1, [r1, #0]
 8005f5e:	0049      	lsls	r1, r1, #1
 8005f60:	466a      	mov	r2, sp
 8005f62:	7011      	strb	r1, [r2, #0]
 8005f64:	0001      	movs	r1, r0
 8005f66:	4668      	mov	r0, sp
 8005f68:	7800      	ldrb	r0, [r0, #0]
 8005f6a:	f00a ff1d 	bl	8010da8 <USBPD_TIM_Start>
 8005f6e:	2030      	movs	r0, #48	@ 0x30
 8005f70:	5c20      	ldrb	r0, [r4, r0]
 8005f72:	2131      	movs	r1, #49	@ 0x31
 8005f74:	5c61      	ldrb	r1, [r4, r1]
 8005f76:	0209      	lsls	r1, r1, #8
 8005f78:	1840      	adds	r0, r0, r1
 8005f7a:	4669      	mov	r1, sp
 8005f7c:	8088      	strh	r0, [r1, #4]
 8005f7e:	4668      	mov	r0, sp
 8005f80:	8880      	ldrh	r0, [r0, #4]
 8005f82:	0440      	lsls	r0, r0, #17
 8005f84:	0f40      	lsrs	r0, r0, #29
 8005f86:	0080      	lsls	r0, r0, #2
 8005f88:	9005      	str	r0, [sp, #20]
 8005f8a:	1c80      	adds	r0, r0, #2
 8005f8c:	9007      	str	r0, [sp, #28]
 8005f8e:	48c1      	ldr	r0, [pc, #772]	@ (8006294 <.text_40>)
 8005f90:	8889      	ldrh	r1, [r1, #4]
 8005f92:	4001      	ands	r1, r0
 8005f94:	2901      	cmp	r1, #1
 8005f96:	d116      	bne.n	8005fc6 <PRL_Received+0x82>
 8005f98:	0068      	lsls	r0, r5, #1
 8005f9a:	1c40      	adds	r0, r0, #1
 8005f9c:	b2c0      	uxtb	r0, r0
 8005f9e:	f00a ff71 	bl	8010e84 <USBPD_TIM_IsExpired>
 8005fa2:	2801      	cmp	r0, #1
 8005fa4:	d04c      	beq.n	8006040 <PRL_Received+0xfc>
 8005fa6:	200b      	movs	r0, #11
 8005fa8:	6831      	ldr	r1, [r6, #0]
 8005faa:	7148      	strb	r0, [r1, #5]
 8005fac:	4668      	mov	r0, sp
 8005fae:	8880      	ldrh	r0, [r0, #4]
 8005fb0:	8360      	strh	r0, [r4, #26]
 8005fb2:	9807      	ldr	r0, [sp, #28]
 8005fb4:	9000      	str	r0, [sp, #0]
 8005fb6:	0023      	movs	r3, r4
 8005fb8:	3330      	adds	r3, #48	@ 0x30
 8005fba:	a80a      	add	r0, sp, #40	@ 0x28
 8005fbc:	7802      	ldrb	r2, [r0, #0]
 8005fbe:	a809      	add	r0, sp, #36	@ 0x24
 8005fc0:	7801      	ldrb	r1, [r0, #0]
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e15f      	b.n	8006286 <PRL_Received+0x342>
 8005fc6:	49b4      	ldr	r1, [pc, #720]	@ (8006298 <.text_41>)
 8005fc8:	880f      	ldrh	r7, [r1, #0]
 8005fca:	2601      	movs	r6, #1
 8005fcc:	72a6      	strb	r6, [r4, #10]
 8005fce:	a90a      	add	r1, sp, #40	@ 0x28
 8005fd0:	7809      	ldrb	r1, [r1, #0]
 8005fd2:	1861      	adds	r1, r4, r1
 8005fd4:	9104      	str	r1, [sp, #16]
 8005fd6:	2500      	movs	r5, #0
 8005fd8:	4669      	mov	r1, sp
 8005fda:	8889      	ldrh	r1, [r1, #4]
 8005fdc:	4008      	ands	r0, r1
 8005fde:	280d      	cmp	r0, #13
 8005fe0:	d106      	bne.n	8005ff0 <PRL_Received+0xac>
 8005fe2:	9904      	ldr	r1, [sp, #16]
 8005fe4:	72cd      	strb	r5, [r1, #11]
 8005fe6:	220f      	movs	r2, #15
 8005fe8:	2103      	movs	r1, #3
 8005fea:	1da0      	adds	r0, r4, #6
 8005fec:	f010 fb32 	bl	8016654 <__aeabi_memset>
 8005ff0:	a80a      	add	r0, sp, #40	@ 0x28
 8005ff2:	7800      	ldrb	r0, [r0, #0]
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d10d      	bne.n	8006014 <PRL_Received+0xd0>
 8005ff8:	8a61      	ldrh	r1, [r4, #18]
 8005ffa:	094a      	lsrs	r2, r1, #5
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	4010      	ands	r0, r2
 8006000:	0a0a      	lsrs	r2, r1, #8
 8006002:	2101      	movs	r1, #1
 8006004:	4011      	ands	r1, r2
 8006006:	4abf      	ldr	r2, [pc, #764]	@ (8006304 <.text_44>)
 8006008:	403a      	ands	r2, r7
 800600a:	0143      	lsls	r3, r0, #5
 800600c:	4313      	orrs	r3, r2
 800600e:	0208      	lsls	r0, r1, #8
 8006010:	4318      	orrs	r0, r3
 8006012:	e001      	b.n	8006018 <PRL_Received+0xd4>
 8006014:	48bc      	ldr	r0, [pc, #752]	@ (8006308 <.text_45>)
 8006016:	4038      	ands	r0, r7
 8006018:	49bc      	ldr	r1, [pc, #752]	@ (800630c <.text_46>)
 800601a:	4001      	ands	r1, r0
 800601c:	4668      	mov	r0, sp
 800601e:	8880      	ldrh	r0, [r0, #4]
 8006020:	22e0      	movs	r2, #224	@ 0xe0
 8006022:	0112      	lsls	r2, r2, #4
 8006024:	4002      	ands	r2, r0
 8006026:	430a      	orrs	r2, r1
 8006028:	2040      	movs	r0, #64	@ 0x40
 800602a:	4310      	orrs	r0, r2
 800602c:	7620      	strb	r0, [r4, #24]
 800602e:	0a00      	lsrs	r0, r0, #8
 8006030:	7660      	strb	r0, [r4, #25]
 8006032:	a80a      	add	r0, sp, #40	@ 0x28
 8006034:	7801      	ldrb	r1, [r0, #0]
 8006036:	a809      	add	r0, sp, #36	@ 0x24
 8006038:	7800      	ldrb	r0, [r0, #0]
 800603a:	f7fa ff49 	bl	8000ed0 <PE_PRL_PostReceiveEvent>
 800603e:	2800      	cmp	r0, #0
 8006040:	d100      	bne.n	8006044 <PRL_Received+0x100>
 8006042:	e123      	b.n	800628c <PRL_Received+0x348>
 8006044:	7426      	strb	r6, [r4, #16]
 8006046:	4668      	mov	r0, sp
 8006048:	7800      	ldrb	r0, [r0, #0]
 800604a:	f00a ff1b 	bl	8010e84 <USBPD_TIM_IsExpired>
 800604e:	2800      	cmp	r0, #0
 8006050:	d0f9      	beq.n	8006046 <PRL_Received+0x102>
 8006052:	2302      	movs	r3, #2
 8006054:	0022      	movs	r2, r4
 8006056:	3218      	adds	r2, #24
 8006058:	a80a      	add	r0, sp, #40	@ 0x28
 800605a:	7801      	ldrb	r1, [r0, #0]
 800605c:	a809      	add	r0, sp, #36	@ 0x24
 800605e:	7800      	ldrb	r0, [r0, #0]
 8006060:	f009 faaf 	bl	800f5c2 <USBPD_PHY_SendMessage>
 8006064:	9006      	str	r0, [sp, #24]
 8006066:	a80a      	add	r0, sp, #40	@ 0x28
 8006068:	7800      	ldrb	r0, [r0, #0]
 800606a:	7260      	strb	r0, [r4, #9]
 800606c:	0021      	movs	r1, r4
 800606e:	3130      	adds	r1, #48	@ 0x30
 8006070:	a809      	add	r0, sp, #36	@ 0x24
 8006072:	7800      	ldrb	r0, [r0, #0]
 8006074:	f7fa ff60 	bl	8000f38 <PE_PRL_PostReceiveEventCopy>
 8006078:	2033      	movs	r0, #51	@ 0x33
 800607a:	5c20      	ldrb	r0, [r4, r0]
 800607c:	2132      	movs	r1, #50	@ 0x32
 800607e:	5c61      	ldrb	r1, [r4, r1]
 8006080:	0203      	lsls	r3, r0, #8
 8006082:	18ca      	adds	r2, r1, r3
 8006084:	466b      	mov	r3, sp
 8006086:	80da      	strh	r2, [r3, #6]
 8006088:	466a      	mov	r2, sp
 800608a:	8892      	ldrh	r2, [r2, #4]
 800608c:	0452      	lsls	r2, r2, #17
 800608e:	0f52      	lsrs	r2, r2, #29
 8006090:	81da      	strh	r2, [r3, #14]
 8006092:	466a      	mov	r2, sp
 8006094:	88d2      	ldrh	r2, [r2, #6]
 8006096:	05d2      	lsls	r2, r2, #23
 8006098:	0dd2      	lsrs	r2, r2, #23
 800609a:	811a      	strh	r2, [r3, #8]
 800609c:	466a      	mov	r2, sp
 800609e:	88d2      	ldrh	r2, [r2, #6]
 80060a0:	0bd2      	lsrs	r2, r2, #15
 80060a2:	819a      	strh	r2, [r3, #12]
 80060a4:	466a      	mov	r2, sp
 80060a6:	8892      	ldrh	r2, [r2, #4]
 80060a8:	0bd2      	lsrs	r2, r2, #15
 80060aa:	815a      	strh	r2, [r3, #10]
 80060ac:	d007      	beq.n	80060be <PRL_Received+0x17a>
 80060ae:	466a      	mov	r2, sp
 80060b0:	8992      	ldrh	r2, [r2, #12]
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	d103      	bne.n	80060be <PRL_Received+0x17a>
 80060b6:	4668      	mov	r0, sp
 80060b8:	8900      	ldrh	r0, [r0, #8]
 80060ba:	1d00      	adds	r0, r0, #4
 80060bc:	e01b      	b.n	80060f6 <PRL_Received+0x1b2>
 80060be:	7822      	ldrb	r2, [r4, #0]
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d117      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060c4:	466a      	mov	r2, sp
 80060c6:	89d2      	ldrh	r2, [r2, #14]
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	d013      	beq.n	80060f4 <PRL_Received+0x1b0>
 80060cc:	466a      	mov	r2, sp
 80060ce:	8892      	ldrh	r2, [r2, #4]
 80060d0:	06d2      	lsls	r2, r2, #27
 80060d2:	0ed2      	lsrs	r2, r2, #27
 80060d4:	2a03      	cmp	r2, #3
 80060d6:	d10d      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060d8:	0200      	lsls	r0, r0, #8
 80060da:	1808      	adds	r0, r1, r0
 80060dc:	2134      	movs	r1, #52	@ 0x34
 80060de:	5c61      	ldrb	r1, [r4, r1]
 80060e0:	0409      	lsls	r1, r1, #16
 80060e2:	1840      	adds	r0, r0, r1
 80060e4:	2135      	movs	r1, #53	@ 0x35
 80060e6:	5c61      	ldrb	r1, [r4, r1]
 80060e8:	0609      	lsls	r1, r1, #24
 80060ea:	1840      	adds	r0, r0, r1
 80060ec:	0f00      	lsrs	r0, r0, #28
 80060ee:	2808      	cmp	r0, #8
 80060f0:	d100      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060f2:	7026      	strb	r6, [r4, #0]
 80060f4:	9807      	ldr	r0, [sp, #28]
 80060f6:	9000      	str	r0, [sp, #0]
 80060f8:	0023      	movs	r3, r4
 80060fa:	3330      	adds	r3, #48	@ 0x30
 80060fc:	a80a      	add	r0, sp, #40	@ 0x28
 80060fe:	7802      	ldrb	r2, [r0, #0]
 8006100:	a809      	add	r0, sp, #36	@ 0x24
 8006102:	7801      	ldrb	r1, [r0, #0]
 8006104:	2001      	movs	r0, #1
 8006106:	4fc1      	ldr	r7, [pc, #772]	@ (800640c <.text_51>)
 8006108:	683f      	ldr	r7, [r7, #0]
 800610a:	47b8      	blx	r7
 800610c:	9806      	ldr	r0, [sp, #24]
 800610e:	2800      	cmp	r0, #0
 8006110:	d10b      	bne.n	800612a <PRL_Received+0x1e6>
 8006112:	2002      	movs	r0, #2
 8006114:	9000      	str	r0, [sp, #0]
 8006116:	0023      	movs	r3, r4
 8006118:	3318      	adds	r3, #24
 800611a:	a80a      	add	r0, sp, #40	@ 0x28
 800611c:	7802      	ldrb	r2, [r0, #0]
 800611e:	a809      	add	r0, sp, #36	@ 0x24
 8006120:	7801      	ldrb	r1, [r0, #0]
 8006122:	2002      	movs	r0, #2
 8006124:	4fb9      	ldr	r7, [pc, #740]	@ (800640c <.text_51>)
 8006126:	683f      	ldr	r7, [r7, #0]
 8006128:	47b8      	blx	r7
 800612a:	4668      	mov	r0, sp
 800612c:	8880      	ldrh	r0, [r0, #4]
 800612e:	0a40      	lsrs	r0, r0, #9
 8006130:	2107      	movs	r1, #7
 8006132:	9a04      	ldr	r2, [sp, #16]
 8006134:	7992      	ldrb	r2, [r2, #6]
 8006136:	2307      	movs	r3, #7
 8006138:	4003      	ands	r3, r0
 800613a:	429a      	cmp	r2, r3
 800613c:	d103      	bne.n	8006146 <PRL_Received+0x202>
 800613e:	9a06      	ldr	r2, [sp, #24]
 8006140:	2a00      	cmp	r2, #0
 8006142:	d100      	bne.n	8006146 <PRL_Received+0x202>
 8006144:	e08f      	b.n	8006266 <PRL_Received+0x322>
 8006146:	4001      	ands	r1, r0
 8006148:	9804      	ldr	r0, [sp, #16]
 800614a:	7181      	strb	r1, [r0, #6]
 800614c:	4668      	mov	r0, sp
 800614e:	8880      	ldrh	r0, [r0, #4]
 8006150:	8420      	strh	r0, [r4, #32]
 8006152:	4668      	mov	r0, sp
 8006154:	8940      	ldrh	r0, [r0, #10]
 8006156:	2800      	cmp	r0, #0
 8006158:	d043      	beq.n	80061e2 <PRL_Received+0x29e>
 800615a:	4668      	mov	r0, sp
 800615c:	8980      	ldrh	r0, [r0, #12]
 800615e:	2800      	cmp	r0, #0
 8006160:	d03f      	beq.n	80061e2 <PRL_Received+0x29e>
 8006162:	4668      	mov	r0, sp
 8006164:	88c0      	ldrh	r0, [r0, #6]
 8006166:	83e0      	strh	r0, [r4, #30]
 8006168:	4668      	mov	r0, sp
 800616a:	88c0      	ldrh	r0, [r0, #6]
 800616c:	0440      	lsls	r0, r0, #17
 800616e:	0f01      	lsrs	r1, r0, #28
 8006170:	201a      	movs	r0, #26
 8006172:	4348      	muls	r0, r1
 8006174:	9905      	ldr	r1, [sp, #20]
 8006176:	1e89      	subs	r1, r1, #2
 8006178:	466a      	mov	r2, sp
 800617a:	88d2      	ldrh	r2, [r2, #6]
 800617c:	23f8      	movs	r3, #248	@ 0xf8
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	4013      	ands	r3, r2
 8006182:	d12f      	bne.n	80061e4 <PRL_Received+0x2a0>
 8006184:	466a      	mov	r2, sp
 8006186:	88d2      	ldrh	r2, [r2, #6]
 8006188:	05d2      	lsls	r2, r2, #23
 800618a:	0dd2      	lsrs	r2, r2, #23
 800618c:	466b      	mov	r3, sp
 800618e:	89db      	ldrh	r3, [r3, #14]
 8006190:	2b07      	cmp	r3, #7
 8006192:	d30a      	bcc.n	80061aa <PRL_Received+0x266>
 8006194:	2a1a      	cmp	r2, #26
 8006196:	d811      	bhi.n	80061bc <PRL_Received+0x278>
 8006198:	e007      	b.n	80061aa <PRL_Received+0x266>
 800619a:	0023      	movs	r3, r4
 800619c:	3334      	adds	r3, #52	@ 0x34
 800619e:	5d5b      	ldrb	r3, [r3, r5]
 80061a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061a2:	182f      	adds	r7, r5, r0
 80061a4:	55f3      	strb	r3, [r6, r7]
 80061a6:	1c6d      	adds	r5, r5, #1
 80061a8:	b2ad      	uxth	r5, r5
 80061aa:	428d      	cmp	r5, r1
 80061ac:	d3f5      	bcc.n	800619a <PRL_Received+0x256>
 80061ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80061b0:	4291      	cmp	r1, r2
 80061b2:	d301      	bcc.n	80061b8 <PRL_Received+0x274>
 80061b4:	4669      	mov	r1, sp
 80061b6:	8909      	ldrh	r1, [r1, #8]
 80061b8:	8001      	strh	r1, [r0, #0]
 80061ba:	e00c      	b.n	80061d6 <PRL_Received+0x292>
 80061bc:	2025      	movs	r0, #37	@ 0x25
 80061be:	5426      	strb	r6, [r4, r0]
 80061c0:	0020      	movs	r0, r4
 80061c2:	3034      	adds	r0, #52	@ 0x34
 80061c4:	5d40      	ldrb	r0, [r0, r5]
 80061c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80061c8:	5548      	strb	r0, [r1, r5]
 80061ca:	1c6d      	adds	r5, r5, #1
 80061cc:	2d1a      	cmp	r5, #26
 80061ce:	d3f7      	bcc.n	80061c0 <PRL_Received+0x27c>
 80061d0:	201a      	movs	r0, #26
 80061d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80061d4:	8008      	strh	r0, [r1, #0]
 80061d6:	a80a      	add	r0, sp, #40	@ 0x28
 80061d8:	7801      	ldrb	r1, [r0, #0]
 80061da:	a809      	add	r0, sp, #36	@ 0x24
 80061dc:	7800      	ldrb	r0, [r0, #0]
 80061de:	f7fa fe77 	bl	8000ed0 <PE_PRL_PostReceiveEvent>
 80061e2:	e053      	b.n	800628c <PRL_Received+0x348>
 80061e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	9b05      	ldr	r3, [sp, #20]
 80061ea:	18d3      	adds	r3, r2, r3
 80061ec:	1e9b      	subs	r3, r3, #2
 80061ee:	27ff      	movs	r7, #255	@ 0xff
 80061f0:	1dbf      	adds	r7, r7, #6
 80061f2:	321a      	adds	r2, #26
 80061f4:	42ba      	cmp	r2, r7
 80061f6:	d21b      	bcs.n	8006230 <PRL_Received+0x2ec>
 80061f8:	466a      	mov	r2, sp
 80061fa:	8912      	ldrh	r2, [r2, #8]
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d217      	bcs.n	8006230 <PRL_Received+0x2ec>
 8006200:	2225      	movs	r2, #37	@ 0x25
 8006202:	54a6      	strb	r6, [r4, r2]
 8006204:	e007      	b.n	8006216 <PRL_Received+0x2d2>
 8006206:	0022      	movs	r2, r4
 8006208:	3234      	adds	r2, #52	@ 0x34
 800620a:	5d52      	ldrb	r2, [r2, r5]
 800620c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800620e:	182e      	adds	r6, r5, r0
 8006210:	559a      	strb	r2, [r3, r6]
 8006212:	1c6d      	adds	r5, r5, #1
 8006214:	b2ad      	uxth	r5, r5
 8006216:	428d      	cmp	r5, r1
 8006218:	d3f5      	bcc.n	8006206 <PRL_Received+0x2c2>
 800621a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800621c:	8801      	ldrh	r1, [r0, #0]
 800621e:	466a      	mov	r2, sp
 8006220:	8892      	ldrh	r2, [r2, #4]
 8006222:	0a92      	lsrs	r2, r2, #10
 8006224:	231c      	movs	r3, #28
 8006226:	4013      	ands	r3, r2
 8006228:	1e9a      	subs	r2, r3, #2
 800622a:	1889      	adds	r1, r1, r2
 800622c:	8001      	strh	r1, [r0, #0]
 800622e:	e02d      	b.n	800628c <PRL_Received+0x348>
 8006230:	42bb      	cmp	r3, r7
 8006232:	d215      	bcs.n	8006260 <PRL_Received+0x31c>
 8006234:	466a      	mov	r2, sp
 8006236:	8912      	ldrh	r2, [r2, #8]
 8006238:	4293      	cmp	r3, r2
 800623a:	d311      	bcc.n	8006260 <PRL_Received+0x31c>
 800623c:	2225      	movs	r2, #37	@ 0x25
 800623e:	54a6      	strb	r6, [r4, r2]
 8006240:	e007      	b.n	8006252 <PRL_Received+0x30e>
 8006242:	0022      	movs	r2, r4
 8006244:	3234      	adds	r2, #52	@ 0x34
 8006246:	5d52      	ldrb	r2, [r2, r5]
 8006248:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800624a:	182e      	adds	r6, r5, r0
 800624c:	559a      	strb	r2, [r3, r6]
 800624e:	1c6d      	adds	r5, r5, #1
 8006250:	b2ad      	uxth	r5, r5
 8006252:	428d      	cmp	r5, r1
 8006254:	d3f5      	bcc.n	8006242 <PRL_Received+0x2fe>
 8006256:	4668      	mov	r0, sp
 8006258:	8900      	ldrh	r0, [r0, #8]
 800625a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800625c:	8008      	strh	r0, [r1, #0]
 800625e:	e015      	b.n	800628c <PRL_Received+0x348>
 8006260:	2025      	movs	r0, #37	@ 0x25
 8006262:	5425      	strb	r5, [r4, r0]
 8006264:	e012      	b.n	800628c <PRL_Received+0x348>
 8006266:	20ff      	movs	r0, #255	@ 0xff
 8006268:	7260      	strb	r0, [r4, #9]
 800626a:	7425      	strb	r5, [r4, #16]
 800626c:	a809      	add	r0, sp, #36	@ 0x24
 800626e:	7800      	ldrb	r0, [r0, #0]
 8006270:	f7fa fe4a 	bl	8000f08 <PE_PRL_PostReceiveEventError>
 8006274:	72a5      	strb	r5, [r4, #10]
 8006276:	2017      	movs	r0, #23
 8006278:	9000      	str	r0, [sp, #0]
 800627a:	bf00      	nop
 800627c:	a367      	add	r3, pc, #412	@ (adr r3, 800641c <.text_55>)
 800627e:	2200      	movs	r2, #0
 8006280:	a809      	add	r0, sp, #36	@ 0x24
 8006282:	7801      	ldrb	r1, [r0, #0]
 8006284:	2006      	movs	r0, #6
 8006286:	4c61      	ldr	r4, [pc, #388]	@ (800640c <.text_51>)
 8006288:	6824      	ldr	r4, [r4, #0]
 800628a:	47a0      	blx	r4
 800628c:	b00b      	add	sp, #44	@ 0x2c
 800628e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006290:	20000188 	.word	0x20000188

08006294 <.text_40>:
 8006294:	0000f01f 	.word	0x0000f01f

08006298 <.text_41>:
 8006298:	0801679c 	.word	0x0801679c

0800629c <PRL_ResetIndicate>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	0004      	movs	r4, r0
 80062a0:	000d      	movs	r5, r1
 80062a2:	2d05      	cmp	r5, #5
 80062a4:	d119      	bne.n	80062da <PRL_ResetIndicate+0x3e>
 80062a6:	485a      	ldr	r0, [pc, #360]	@ (8006410 <.text_52>)
 80062a8:	00a1      	lsls	r1, r4, #2
 80062aa:	1840      	adds	r0, r0, r1
 80062ac:	9000      	str	r0, [sp, #0]
 80062ae:	6807      	ldr	r7, [r0, #0]
 80062b0:	2600      	movs	r6, #0
 80062b2:	2000      	movs	r0, #0
 80062b4:	b2c2      	uxtb	r2, r0
 80062b6:	18ba      	adds	r2, r7, r2
 80062b8:	72d6      	strb	r6, [r2, #11]
 80062ba:	1c40      	adds	r0, r0, #1
 80062bc:	b2c1      	uxtb	r1, r0
 80062be:	2903      	cmp	r1, #3
 80062c0:	d3f8      	bcc.n	80062b4 <PRL_ResetIndicate+0x18>
 80062c2:	220f      	movs	r2, #15
 80062c4:	2103      	movs	r1, #3
 80062c6:	1db8      	adds	r0, r7, #6
 80062c8:	f010 f9c4 	bl	8016654 <__aeabi_memset>
 80062cc:	9900      	ldr	r1, [sp, #0]
 80062ce:	6809      	ldr	r1, [r1, #0]
 80062d0:	714e      	strb	r6, [r1, #5]
 80062d2:	703e      	strb	r6, [r7, #0]
 80062d4:	0020      	movs	r0, r4
 80062d6:	f7ff fe30 	bl	8005f3a <PRL_DisableRX>
 80062da:	2000      	movs	r0, #0
 80062dc:	9000      	str	r0, [sp, #0]
 80062de:	2300      	movs	r3, #0
 80062e0:	002a      	movs	r2, r5
 80062e2:	0021      	movs	r1, r4
 80062e4:	2001      	movs	r0, #1
 80062e6:	4e49      	ldr	r6, [pc, #292]	@ (800640c <.text_51>)
 80062e8:	6836      	ldr	r6, [r6, #0]
 80062ea:	47b0      	blx	r6
 80062ec:	0029      	movs	r1, r5
 80062ee:	0020      	movs	r0, r4
 80062f0:	f7fa fce6 	bl	8000cc0 <PE_PRL_ResetReceived>
 80062f4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080062f6 <PRL_ResetCompleted>:
 80062f6:	2101      	movs	r1, #1
 80062f8:	4a45      	ldr	r2, [pc, #276]	@ (8006410 <.text_52>)
 80062fa:	0080      	lsls	r0, r0, #2
 80062fc:	5810      	ldr	r0, [r2, r0]
 80062fe:	70c1      	strb	r1, [r0, #3]
 8006300:	4770      	bx	lr
	...

08006304 <.text_44>:
 8006304:	0000fedf 	.word	0x0000fedf

08006308 <.text_45>:
 8006308:	0000feff 	.word	0x0000feff

0800630c <.text_46>:
 800630c:	0000f13f 	.word	0x0000f13f

08006310 <PRL_BistCompleted>:
 8006310:	b580      	push	{r7, lr}
 8006312:	f7fa fd01 	bl	8000d18 <PE_PRL_BistCompleted>
 8006316:	bd01      	pop	{r0, pc}

08006318 <PRL_TxCompleted>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	0004      	movs	r4, r0
 800631c:	4a3c      	ldr	r2, [pc, #240]	@ (8006410 <.text_52>)
 800631e:	00a3      	lsls	r3, r4, #2
 8006320:	58d6      	ldr	r6, [r2, r3]
 8006322:	2500      	movs	r5, #0
 8006324:	7c32      	ldrb	r2, [r6, #16]
 8006326:	2a01      	cmp	r2, #1
 8006328:	d002      	beq.n	8006330 <PRL_TxCompleted+0x18>
 800632a:	2a02      	cmp	r2, #2
 800632c:	d009      	beq.n	8006342 <PRL_TxCompleted+0x2a>
 800632e:	e010      	b.n	8006352 <PRL_TxCompleted+0x3a>
 8006330:	2900      	cmp	r1, #0
 8006332:	d102      	bne.n	800633a <PRL_TxCompleted+0x22>
 8006334:	f7fa fe1a 	bl	8000f6c <PE_PRL_PostReceiveEventComplete>
 8006338:	e001      	b.n	800633e <PRL_TxCompleted+0x26>
 800633a:	f7fa fde5 	bl	8000f08 <PE_PRL_PostReceiveEventError>
 800633e:	72b5      	strb	r5, [r6, #10]
 8006340:	e007      	b.n	8006352 <PRL_TxCompleted+0x3a>
 8006342:	f009 f905 	bl	800f550 <USBPD_PHY_GetRetryTimerValue>
 8006346:	0001      	movs	r1, r0
 8006348:	0060      	lsls	r0, r4, #1
 800634a:	1c40      	adds	r0, r0, #1
 800634c:	b2c0      	uxtb	r0, r0
 800634e:	f00a fd2b 	bl	8010da8 <USBPD_TIM_Start>
 8006352:	7435      	strb	r5, [r6, #16]
 8006354:	bd70      	pop	{r4, r5, r6, pc}

08006356 <USBPD_PRL_PrepareExtendedTxChunkSending>:
 8006356:	b570      	push	{r4, r5, r6, lr}
 8006358:	4c2d      	ldr	r4, [pc, #180]	@ (8006410 <.text_52>)
 800635a:	0080      	lsls	r0, r0, #2
 800635c:	5820      	ldr	r0, [r4, r0]
 800635e:	2480      	movs	r4, #128	@ 0x80
 8006360:	0224      	lsls	r4, r4, #8
 8006362:	8b85      	ldrh	r5, [r0, #28]
 8006364:	4e2b      	ldr	r6, [pc, #172]	@ (8006414 <.text_53>)
 8006366:	402e      	ands	r6, r5
 8006368:	02c9      	lsls	r1, r1, #11
 800636a:	4331      	orrs	r1, r6
 800636c:	25fe      	movs	r5, #254	@ 0xfe
 800636e:	022d      	lsls	r5, r5, #8
 8006370:	400d      	ands	r5, r1
 8006372:	05d1      	lsls	r1, r2, #23
 8006374:	0dc9      	lsrs	r1, r1, #23
 8006376:	4329      	orrs	r1, r5
 8006378:	4321      	orrs	r1, r4
 800637a:	8381      	strh	r1, [r0, #28]
 800637c:	8a41      	ldrh	r1, [r0, #18]
 800637e:	430c      	orrs	r4, r1
 8006380:	8244      	strh	r4, [r0, #18]
 8006382:	4a25      	ldr	r2, [pc, #148]	@ (8006418 <.text_54>)
 8006384:	4022      	ands	r2, r4
 8006386:	2120      	movs	r1, #32
 8006388:	5c41      	ldrb	r1, [r0, r1]
 800638a:	06c9      	lsls	r1, r1, #27
 800638c:	0ec9      	lsrs	r1, r1, #27
 800638e:	4311      	orrs	r1, r2
 8006390:	8241      	strh	r1, [r0, #18]
 8006392:	7019      	strb	r1, [r3, #0]
 8006394:	8a41      	ldrh	r1, [r0, #18]
 8006396:	0a09      	lsrs	r1, r1, #8
 8006398:	7059      	strb	r1, [r3, #1]
 800639a:	8b81      	ldrh	r1, [r0, #28]
 800639c:	7099      	strb	r1, [r3, #2]
 800639e:	8b80      	ldrh	r0, [r0, #28]
 80063a0:	0a00      	lsrs	r0, r0, #8
 80063a2:	70d8      	strb	r0, [r3, #3]
 80063a4:	bd70      	pop	{r4, r5, r6, pc}

080063a6 <USBPD_PRL_PrepareChunkRequest>:
 80063a6:	b510      	push	{r4, lr}
 80063a8:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <.text_52>)
 80063aa:	0080      	lsls	r0, r0, #2
 80063ac:	5810      	ldr	r0, [r2, r0]
 80063ae:	8b83      	ldrh	r3, [r0, #28]
 80063b0:	2284      	movs	r2, #132	@ 0x84
 80063b2:	0212      	lsls	r2, r2, #8
 80063b4:	431a      	orrs	r2, r3
 80063b6:	8382      	strh	r2, [r0, #28]
 80063b8:	2386      	movs	r3, #134	@ 0x86
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	4013      	ands	r3, r2
 80063be:	8bc2      	ldrh	r2, [r0, #30]
 80063c0:	0ad2      	lsrs	r2, r2, #11
 80063c2:	1c52      	adds	r2, r2, #1
 80063c4:	02d2      	lsls	r2, r2, #11
 80063c6:	24f0      	movs	r4, #240	@ 0xf0
 80063c8:	01e4      	lsls	r4, r4, #7
 80063ca:	4014      	ands	r4, r2
 80063cc:	431c      	orrs	r4, r3
 80063ce:	8384      	strh	r4, [r0, #28]
 80063d0:	8a43      	ldrh	r3, [r0, #18]
 80063d2:	2280      	movs	r2, #128	@ 0x80
 80063d4:	0212      	lsls	r2, r2, #8
 80063d6:	431a      	orrs	r2, r3
 80063d8:	0003      	movs	r3, r0
 80063da:	3312      	adds	r3, #18
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	4c0e      	ldr	r4, [pc, #56]	@ (8006418 <.text_54>)
 80063e0:	4014      	ands	r4, r2
 80063e2:	2220      	movs	r2, #32
 80063e4:	5c82      	ldrb	r2, [r0, r2]
 80063e6:	06d2      	lsls	r2, r2, #27
 80063e8:	0ed2      	lsrs	r2, r2, #27
 80063ea:	4322      	orrs	r2, r4
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	7142      	strb	r2, [r0, #5]
 80063f2:	8a43      	ldrh	r3, [r0, #18]
 80063f4:	700b      	strb	r3, [r1, #0]
 80063f6:	8a43      	ldrh	r3, [r0, #18]
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	704b      	strb	r3, [r1, #1]
 80063fc:	8b83      	ldrh	r3, [r0, #28]
 80063fe:	708b      	strb	r3, [r1, #2]
 8006400:	8b80      	ldrh	r0, [r0, #28]
 8006402:	0a00      	lsrs	r0, r0, #8
 8006404:	70c8      	strb	r0, [r1, #3]
 8006406:	710a      	strb	r2, [r1, #4]
 8006408:	714a      	strb	r2, [r1, #5]
 800640a:	bd10      	pop	{r4, pc}

0800640c <.text_51>:
 800640c:	20000000 	.word	0x20000000

08006410 <.text_52>:
 8006410:	20000188 	.word	0x20000188

08006414 <.text_53>:
 8006414:	000083ff 	.word	0x000083ff

08006418 <.text_54>:
 8006418:	0000ffe0 	.word	0x0000ffe0

0800641c <.text_55>:
 800641c:	5f4c5250 	.word	0x5f4c5250
 8006420:	4e455645 	.word	0x4e455645
 8006424:	58525f54 	.word	0x58525f54
 8006428:	5349445f 	.word	0x5349445f
 800642c:	44524143 	.word	0x44524143
 8006430:	00004445 	.word	0x00004445

08006434 <__udivsi3>:
 8006434:	2200      	movs	r2, #0
 8006436:	0843      	lsrs	r3, r0, #1
 8006438:	428b      	cmp	r3, r1
 800643a:	d374      	bcc.n	8006526 <__udivsi3+0xf2>
 800643c:	0903      	lsrs	r3, r0, #4
 800643e:	428b      	cmp	r3, r1
 8006440:	d35f      	bcc.n	8006502 <__udivsi3+0xce>
 8006442:	0a03      	lsrs	r3, r0, #8
 8006444:	428b      	cmp	r3, r1
 8006446:	d344      	bcc.n	80064d2 <__udivsi3+0x9e>
 8006448:	0b03      	lsrs	r3, r0, #12
 800644a:	428b      	cmp	r3, r1
 800644c:	d328      	bcc.n	80064a0 <__udivsi3+0x6c>
 800644e:	0c03      	lsrs	r3, r0, #16
 8006450:	428b      	cmp	r3, r1
 8006452:	d30d      	bcc.n	8006470 <__udivsi3+0x3c>
 8006454:	22ff      	movs	r2, #255	@ 0xff
 8006456:	0209      	lsls	r1, r1, #8
 8006458:	ba12      	rev	r2, r2
 800645a:	0c03      	lsrs	r3, r0, #16
 800645c:	428b      	cmp	r3, r1
 800645e:	d302      	bcc.n	8006466 <__udivsi3+0x32>
 8006460:	1212      	asrs	r2, r2, #8
 8006462:	0209      	lsls	r1, r1, #8
 8006464:	d065      	beq.n	8006532 <__udivsi3+0xfe>
 8006466:	0b03      	lsrs	r3, r0, #12
 8006468:	428b      	cmp	r3, r1
 800646a:	d319      	bcc.n	80064a0 <__udivsi3+0x6c>
 800646c:	e000      	b.n	8006470 <__udivsi3+0x3c>
 800646e:	0a09      	lsrs	r1, r1, #8
 8006470:	0bc3      	lsrs	r3, r0, #15
 8006472:	428b      	cmp	r3, r1
 8006474:	d301      	bcc.n	800647a <__udivsi3+0x46>
 8006476:	03cb      	lsls	r3, r1, #15
 8006478:	1ac0      	subs	r0, r0, r3
 800647a:	4152      	adcs	r2, r2
 800647c:	0b83      	lsrs	r3, r0, #14
 800647e:	428b      	cmp	r3, r1
 8006480:	d301      	bcc.n	8006486 <__udivsi3+0x52>
 8006482:	038b      	lsls	r3, r1, #14
 8006484:	1ac0      	subs	r0, r0, r3
 8006486:	4152      	adcs	r2, r2
 8006488:	0b43      	lsrs	r3, r0, #13
 800648a:	428b      	cmp	r3, r1
 800648c:	d301      	bcc.n	8006492 <__udivsi3+0x5e>
 800648e:	034b      	lsls	r3, r1, #13
 8006490:	1ac0      	subs	r0, r0, r3
 8006492:	4152      	adcs	r2, r2
 8006494:	0b03      	lsrs	r3, r0, #12
 8006496:	428b      	cmp	r3, r1
 8006498:	d301      	bcc.n	800649e <__udivsi3+0x6a>
 800649a:	030b      	lsls	r3, r1, #12
 800649c:	1ac0      	subs	r0, r0, r3
 800649e:	4152      	adcs	r2, r2
 80064a0:	0ac3      	lsrs	r3, r0, #11
 80064a2:	428b      	cmp	r3, r1
 80064a4:	d301      	bcc.n	80064aa <__udivsi3+0x76>
 80064a6:	02cb      	lsls	r3, r1, #11
 80064a8:	1ac0      	subs	r0, r0, r3
 80064aa:	4152      	adcs	r2, r2
 80064ac:	0a83      	lsrs	r3, r0, #10
 80064ae:	428b      	cmp	r3, r1
 80064b0:	d301      	bcc.n	80064b6 <__udivsi3+0x82>
 80064b2:	028b      	lsls	r3, r1, #10
 80064b4:	1ac0      	subs	r0, r0, r3
 80064b6:	4152      	adcs	r2, r2
 80064b8:	0a43      	lsrs	r3, r0, #9
 80064ba:	428b      	cmp	r3, r1
 80064bc:	d301      	bcc.n	80064c2 <__udivsi3+0x8e>
 80064be:	024b      	lsls	r3, r1, #9
 80064c0:	1ac0      	subs	r0, r0, r3
 80064c2:	4152      	adcs	r2, r2
 80064c4:	0a03      	lsrs	r3, r0, #8
 80064c6:	428b      	cmp	r3, r1
 80064c8:	d301      	bcc.n	80064ce <__udivsi3+0x9a>
 80064ca:	020b      	lsls	r3, r1, #8
 80064cc:	1ac0      	subs	r0, r0, r3
 80064ce:	4152      	adcs	r2, r2
 80064d0:	d2cd      	bcs.n	800646e <__udivsi3+0x3a>
 80064d2:	09c3      	lsrs	r3, r0, #7
 80064d4:	428b      	cmp	r3, r1
 80064d6:	d301      	bcc.n	80064dc <__udivsi3+0xa8>
 80064d8:	01cb      	lsls	r3, r1, #7
 80064da:	1ac0      	subs	r0, r0, r3
 80064dc:	4152      	adcs	r2, r2
 80064de:	0983      	lsrs	r3, r0, #6
 80064e0:	428b      	cmp	r3, r1
 80064e2:	d301      	bcc.n	80064e8 <__udivsi3+0xb4>
 80064e4:	018b      	lsls	r3, r1, #6
 80064e6:	1ac0      	subs	r0, r0, r3
 80064e8:	4152      	adcs	r2, r2
 80064ea:	0943      	lsrs	r3, r0, #5
 80064ec:	428b      	cmp	r3, r1
 80064ee:	d301      	bcc.n	80064f4 <__udivsi3+0xc0>
 80064f0:	014b      	lsls	r3, r1, #5
 80064f2:	1ac0      	subs	r0, r0, r3
 80064f4:	4152      	adcs	r2, r2
 80064f6:	0903      	lsrs	r3, r0, #4
 80064f8:	428b      	cmp	r3, r1
 80064fa:	d301      	bcc.n	8006500 <__udivsi3+0xcc>
 80064fc:	010b      	lsls	r3, r1, #4
 80064fe:	1ac0      	subs	r0, r0, r3
 8006500:	4152      	adcs	r2, r2
 8006502:	08c3      	lsrs	r3, r0, #3
 8006504:	428b      	cmp	r3, r1
 8006506:	d301      	bcc.n	800650c <__udivsi3+0xd8>
 8006508:	00cb      	lsls	r3, r1, #3
 800650a:	1ac0      	subs	r0, r0, r3
 800650c:	4152      	adcs	r2, r2
 800650e:	0883      	lsrs	r3, r0, #2
 8006510:	428b      	cmp	r3, r1
 8006512:	d301      	bcc.n	8006518 <__udivsi3+0xe4>
 8006514:	008b      	lsls	r3, r1, #2
 8006516:	1ac0      	subs	r0, r0, r3
 8006518:	4152      	adcs	r2, r2
 800651a:	0843      	lsrs	r3, r0, #1
 800651c:	428b      	cmp	r3, r1
 800651e:	d301      	bcc.n	8006524 <__udivsi3+0xf0>
 8006520:	004b      	lsls	r3, r1, #1
 8006522:	1ac0      	subs	r0, r0, r3
 8006524:	4152      	adcs	r2, r2
 8006526:	1a41      	subs	r1, r0, r1
 8006528:	d200      	bcs.n	800652c <__udivsi3+0xf8>
 800652a:	4601      	mov	r1, r0
 800652c:	4152      	adcs	r2, r2
 800652e:	4610      	mov	r0, r2
 8006530:	4770      	bx	lr
 8006532:	e7ff      	b.n	8006534 <__udivsi3+0x100>
 8006534:	b501      	push	{r0, lr}
 8006536:	2000      	movs	r0, #0
 8006538:	f000 f806 	bl	8006548 <__aeabi_idiv0>
 800653c:	bd02      	pop	{r1, pc}
 800653e:	46c0      	nop			@ (mov r8, r8)

08006540 <__aeabi_uidivmod>:
 8006540:	2900      	cmp	r1, #0
 8006542:	d0f7      	beq.n	8006534 <__udivsi3+0x100>
 8006544:	e776      	b.n	8006434 <__udivsi3>
 8006546:	4770      	bx	lr

08006548 <__aeabi_idiv0>:
 8006548:	4770      	bx	lr
 800654a:	46c0      	nop			@ (mov r8, r8)

0800654c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b087      	sub	sp, #28
 8006550:	af02      	add	r7, sp, #8
 8006552:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8006554:	2380      	movs	r3, #128	@ 0x80
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4a1a      	ldr	r2, [pc, #104]	@ (80065c4 <tx_application_define+0x78>)
 800655a:	491b      	ldr	r1, [pc, #108]	@ (80065c8 <tx_application_define+0x7c>)
 800655c:	481b      	ldr	r0, [pc, #108]	@ (80065cc <tx_application_define+0x80>)
 800655e:	2434      	movs	r4, #52	@ 0x34
 8006560:	9400      	str	r4, [sp, #0]
 8006562:	f00c fdbb 	bl	80130dc <_txe_byte_pool_create>
 8006566:	1e03      	subs	r3, r0, #0
 8006568:	d105      	bne.n	8006576 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800656a:	4b18      	ldr	r3, [pc, #96]	@ (80065cc <tx_application_define+0x80>)
 800656c:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	0018      	movs	r0, r3
 8006572:	f000 f8e3 	bl	800673c <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8006576:	2380      	movs	r3, #128	@ 0x80
 8006578:	021b      	lsls	r3, r3, #8
 800657a:	4a15      	ldr	r2, [pc, #84]	@ (80065d0 <tx_application_define+0x84>)
 800657c:	4915      	ldr	r1, [pc, #84]	@ (80065d4 <tx_application_define+0x88>)
 800657e:	4816      	ldr	r0, [pc, #88]	@ (80065d8 <tx_application_define+0x8c>)
 8006580:	2434      	movs	r4, #52	@ 0x34
 8006582:	9400      	str	r4, [sp, #0]
 8006584:	f00c fdaa 	bl	80130dc <_txe_byte_pool_create>
 8006588:	1e03      	subs	r3, r0, #0
 800658a:	d105      	bne.n	8006598 <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 800658c:	4b12      	ldr	r3, [pc, #72]	@ (80065d8 <tx_application_define+0x8c>)
 800658e:	60fb      	str	r3, [r7, #12]

    if (MX_USBX_Device_Init(memory_ptr) != UX_SUCCESS)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	0018      	movs	r0, r3
 8006594:	f00f ff4b 	bl	801642e <MX_USBX_Device_Init>

    /* USER CODE BEGIN MX_USBX_Device_Init_Success */

    /* USER CODE END MX_USBX_Device_Init_Success */
  }
  if (tx_byte_pool_create(&usbpd_app_byte_pool, "USBPD App memory pool", usbpd_byte_pool_buffer, USBPD_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8006598:	23c0      	movs	r3, #192	@ 0xc0
 800659a:	015b      	lsls	r3, r3, #5
 800659c:	4a0f      	ldr	r2, [pc, #60]	@ (80065dc <tx_application_define+0x90>)
 800659e:	4910      	ldr	r1, [pc, #64]	@ (80065e0 <tx_application_define+0x94>)
 80065a0:	4810      	ldr	r0, [pc, #64]	@ (80065e4 <tx_application_define+0x98>)
 80065a2:	2434      	movs	r4, #52	@ 0x34
 80065a4:	9400      	str	r4, [sp, #0]
 80065a6:	f00c fd99 	bl	80130dc <_txe_byte_pool_create>
 80065aa:	1e03      	subs	r3, r0, #0
 80065ac:	d105      	bne.n	80065ba <tx_application_define+0x6e>
  {
    /* USER CODE BEGIN USBPD_Byte_Pool_Success */

    /* USER CODE END USBPD_Byte_Pool_Success */

    memory_ptr = (VOID *)&usbpd_app_byte_pool;
 80065ae:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <tx_application_define+0x98>)
 80065b0:	60fb      	str	r3, [r7, #12]
    if (MX_USBPD_Init(memory_ptr) != TX_SUCCESS)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	0018      	movs	r0, r3
 80065b6:	f00f fa03 	bl	80159c0 <MX_USBPD_Init>
    }
    /* USER CODE BEGIN  MX_USBPD_Init_Success */

    /* USER CODE END  MX_USBPD_Init_Success */
  }
}
 80065ba:	46c0      	nop			@ (mov r8, r8)
 80065bc:	46bd      	mov	sp, r7
 80065be:	b005      	add	sp, #20
 80065c0:	bd90      	pop	{r4, r7, pc}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	20000194 	.word	0x20000194
 80065c8:	08016698 	.word	0x08016698
 80065cc:	20000594 	.word	0x20000594
 80065d0:	200005c8 	.word	0x200005c8
 80065d4:	080166ac 	.word	0x080166ac
 80065d8:	200085c8 	.word	0x200085c8
 80065dc:	200085fc 	.word	0x200085fc
 80065e0:	080166c0 	.word	0x080166c0
 80065e4:	20009dfc 	.word	0x20009dfc

080065e8 <create_threads>:

/* Create thread pointers */
TX_THREAD scan_keys_thread_ptr;

/* Call this function from App_ThreadX_Init() to create threads */
void create_threads(){
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b089      	sub	sp, #36	@ 0x24
 80065ec:	af08      	add	r7, sp, #32
	tx_thread_create(&scan_keys_thread_ptr, SCAN_KEYS_THREAD_NAME, scan_keys_thread, 0x1234, scan_keys_thread_stack, SCAN_KEYS_THREAD_STACK_SIZE, SCAN_KEYS_THREAD_PRIORITY, SCAN_KEYS_THREAD_PRIORITY, 1, TX_AUTO_START);
 80065ee:	4c0d      	ldr	r4, [pc, #52]	@ (8006624 <create_threads+0x3c>)
 80065f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006628 <create_threads+0x40>)
 80065f2:	490e      	ldr	r1, [pc, #56]	@ (800662c <create_threads+0x44>)
 80065f4:	480e      	ldr	r0, [pc, #56]	@ (8006630 <create_threads+0x48>)
 80065f6:	23b0      	movs	r3, #176	@ 0xb0
 80065f8:	9306      	str	r3, [sp, #24]
 80065fa:	2301      	movs	r3, #1
 80065fc:	9305      	str	r3, [sp, #20]
 80065fe:	2301      	movs	r3, #1
 8006600:	9304      	str	r3, [sp, #16]
 8006602:	230f      	movs	r3, #15
 8006604:	9303      	str	r3, [sp, #12]
 8006606:	230f      	movs	r3, #15
 8006608:	9302      	str	r3, [sp, #8]
 800660a:	2380      	movs	r3, #128	@ 0x80
 800660c:	00db      	lsls	r3, r3, #3
 800660e:	9301      	str	r3, [sp, #4]
 8006610:	4b08      	ldr	r3, [pc, #32]	@ (8006634 <create_threads+0x4c>)
 8006612:	9300      	str	r3, [sp, #0]
 8006614:	0023      	movs	r3, r4
 8006616:	f00c ff67 	bl	80134e8 <_txe_thread_create>
}
 800661a:	46c0      	nop			@ (mov r8, r8)
 800661c:	46bd      	mov	sp, r7
 800661e:	b001      	add	sp, #4
 8006620:	bd90      	pop	{r4, r7, pc}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	00001234 	.word	0x00001234
 8006628:	08006639 	.word	0x08006639
 800662c:	080166d8 	.word	0x080166d8
 8006630:	2000a230 	.word	0x2000a230
 8006634:	20009e30 	.word	0x20009e30

08006638 <scan_keys_thread>:
#define PORT_B_PINS (KEY_B4_Pin | KEY_A1_Pin | KEY_C5_Pin | ENC_SW_Pin | KEY_E3_Pin | KEY_E2_Pin | KEY_A2_Pin | KEY_B5_Pin | KEY_A3_Pin)
#define PORT_C_PINS (KEY_A4_Pin | KEY_A5_Pin | KEY_E1_Pin | KEY_D1_Pin | KEY_D2_Pin)
#define PORT_D_PINS (KEY_C6_Pin)
#define PORT_F_PINS (KEY_D3_Pin | KEY_D4_Pin)

void scan_keys_thread(uint32_t initial_input){
 8006638:	b5f0      	push	{r4, r5, r6, r7, lr}
 800663a:	b089      	sub	sp, #36	@ 0x24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

	uint16_t keys_pressed_port_a = 0;
 8006640:	231e      	movs	r3, #30
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	2200      	movs	r2, #0
 8006646:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_b = 0;
 8006648:	231c      	movs	r3, #28
 800664a:	18fb      	adds	r3, r7, r3
 800664c:	2200      	movs	r2, #0
 800664e:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_c = 0;
 8006650:	231a      	movs	r3, #26
 8006652:	18fb      	adds	r3, r7, r3
 8006654:	2200      	movs	r2, #0
 8006656:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_d = 0;
 8006658:	2318      	movs	r3, #24
 800665a:	18fb      	adds	r3, r7, r3
 800665c:	2200      	movs	r2, #0
 800665e:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_f = 0;
 8006660:	2316      	movs	r3, #22
 8006662:	18fb      	adds	r3, r7, r3
 8006664:	2200      	movs	r2, #0
 8006666:	801a      	strh	r2, [r3, #0]

	uint16_t keys_pressed_port_a_prev = 0;
 8006668:	2314      	movs	r3, #20
 800666a:	18fb      	adds	r3, r7, r3
 800666c:	2200      	movs	r2, #0
 800666e:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_b_prev = 0;
 8006670:	2312      	movs	r3, #18
 8006672:	18fb      	adds	r3, r7, r3
 8006674:	2200      	movs	r2, #0
 8006676:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_c_prev = 0;
 8006678:	2310      	movs	r3, #16
 800667a:	18fb      	adds	r3, r7, r3
 800667c:	2200      	movs	r2, #0
 800667e:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_d_prev = 0;
 8006680:	230e      	movs	r3, #14
 8006682:	18fb      	adds	r3, r7, r3
 8006684:	2200      	movs	r2, #0
 8006686:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_f_prev = 0;
 8006688:	230c      	movs	r3, #12
 800668a:	18fb      	adds	r3, r7, r3
 800668c:	2200      	movs	r2, #0
 800668e:	801a      	strh	r2, [r3, #0]

	while (1){
		// TODO: atomic load IDR
		keys_pressed_port_a = (GPIOA->IDR) & PORT_A_PINS;
 8006690:	23a0      	movs	r3, #160	@ 0xa0
 8006692:	05db      	lsls	r3, r3, #23
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	b29a      	uxth	r2, r3
 8006698:	201e      	movs	r0, #30
 800669a:	183b      	adds	r3, r7, r0
 800669c:	4920      	ldr	r1, [pc, #128]	@ (8006720 <scan_keys_thread+0xe8>)
 800669e:	400a      	ands	r2, r1
 80066a0:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_b = (GPIOB->IDR) & PORT_B_PINS;
 80066a2:	4b20      	ldr	r3, [pc, #128]	@ (8006724 <scan_keys_thread+0xec>)
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	241c      	movs	r4, #28
 80066aa:	193b      	adds	r3, r7, r4
 80066ac:	491e      	ldr	r1, [pc, #120]	@ (8006728 <scan_keys_thread+0xf0>)
 80066ae:	400a      	ands	r2, r1
 80066b0:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_c = (GPIOC->IDR) & PORT_C_PINS;
 80066b2:	4b1e      	ldr	r3, [pc, #120]	@ (800672c <scan_keys_thread+0xf4>)
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	251a      	movs	r5, #26
 80066ba:	197b      	adds	r3, r7, r5
 80066bc:	491c      	ldr	r1, [pc, #112]	@ (8006730 <scan_keys_thread+0xf8>)
 80066be:	400a      	ands	r2, r1
 80066c0:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_d = (GPIOD->IDR) & PORT_D_PINS;
 80066c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006734 <scan_keys_thread+0xfc>)
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	b29a      	uxth	r2, r3
 80066c8:	2618      	movs	r6, #24
 80066ca:	19bb      	adds	r3, r7, r6
 80066cc:	2102      	movs	r1, #2
 80066ce:	400a      	ands	r2, r1
 80066d0:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_f = (GPIOF->IDR) & PORT_F_PINS;
 80066d2:	4b19      	ldr	r3, [pc, #100]	@ (8006738 <scan_keys_thread+0x100>)
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	2316      	movs	r3, #22
 80066da:	18fb      	adds	r3, r7, r3
 80066dc:	2103      	movs	r1, #3
 80066de:	400a      	ands	r2, r1
 80066e0:	801a      	strh	r2, [r3, #0]


		// TODO: Stuff goes here


		keys_pressed_port_a_prev = keys_pressed_port_a;
 80066e2:	2114      	movs	r1, #20
 80066e4:	187b      	adds	r3, r7, r1
 80066e6:	183a      	adds	r2, r7, r0
 80066e8:	8812      	ldrh	r2, [r2, #0]
 80066ea:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_b_prev = keys_pressed_port_b;
 80066ec:	2112      	movs	r1, #18
 80066ee:	187b      	adds	r3, r7, r1
 80066f0:	193a      	adds	r2, r7, r4
 80066f2:	8812      	ldrh	r2, [r2, #0]
 80066f4:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_c_prev = keys_pressed_port_c;
 80066f6:	2110      	movs	r1, #16
 80066f8:	187b      	adds	r3, r7, r1
 80066fa:	197a      	adds	r2, r7, r5
 80066fc:	8812      	ldrh	r2, [r2, #0]
 80066fe:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_d_prev = keys_pressed_port_d;
 8006700:	210e      	movs	r1, #14
 8006702:	187b      	adds	r3, r7, r1
 8006704:	19ba      	adds	r2, r7, r6
 8006706:	8812      	ldrh	r2, [r2, #0]
 8006708:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_f_prev = keys_pressed_port_f;
 800670a:	210c      	movs	r1, #12
 800670c:	187b      	adds	r3, r7, r1
 800670e:	2216      	movs	r2, #22
 8006710:	18ba      	adds	r2, r7, r2
 8006712:	8812      	ldrh	r2, [r2, #0]
 8006714:	801a      	strh	r2, [r3, #0]
		tx_thread_sleep(10); // TODO: Remove sleep and do proper timing
 8006716:	200a      	movs	r0, #10
 8006718:	f00b fde6 	bl	80122e8 <_tx_thread_sleep>
		keys_pressed_port_a = (GPIOA->IDR) & PORT_A_PINS;
 800671c:	46c0      	nop			@ (mov r8, r8)
 800671e:	e7b7      	b.n	8006690 <scan_keys_thread+0x58>
 8006720:	ffff86ff 	.word	0xffff86ff
 8006724:	50000400 	.word	0x50000400
 8006728:	00001f47 	.word	0x00001f47
 800672c:	50000800 	.word	0x50000800
 8006730:	ffffe0c0 	.word	0xffffe0c0
 8006734:	50000c00 	.word	0x50000c00
 8006738:	50001400 	.word	0x50001400

0800673c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
  create_threads();
 800674c:	f7ff ff4c 	bl	80065e8 <create_threads>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8006750:	68fb      	ldr	r3, [r7, #12]
}
 8006752:	0018      	movs	r0, r3
 8006754:	46bd      	mov	sp, r7
 8006756:	b004      	add	sp, #16
 8006758:	bd80      	pop	{r7, pc}

0800675a <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800675e:	f00a feff 	bl	8011560 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8006762:	46c0      	nop			@ (mov r8, r8)
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	0002      	movs	r2, r0
 8006770:	1dfb      	adds	r3, r7, #7
 8006772:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006774:	1dfb      	adds	r3, r7, #7
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b7f      	cmp	r3, #127	@ 0x7f
 800677a:	d809      	bhi.n	8006790 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800677c:	1dfb      	adds	r3, r7, #7
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	001a      	movs	r2, r3
 8006782:	231f      	movs	r3, #31
 8006784:	401a      	ands	r2, r3
 8006786:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <__NVIC_EnableIRQ+0x30>)
 8006788:	2101      	movs	r1, #1
 800678a:	4091      	lsls	r1, r2
 800678c:	000a      	movs	r2, r1
 800678e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006790:	46c0      	nop			@ (mov r8, r8)
 8006792:	46bd      	mov	sp, r7
 8006794:	b002      	add	sp, #8
 8006796:	bd80      	pop	{r7, pc}
 8006798:	e000e100 	.word	0xe000e100

0800679c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800679c:	b590      	push	{r4, r7, lr}
 800679e:	b083      	sub	sp, #12
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	0002      	movs	r2, r0
 80067a4:	6039      	str	r1, [r7, #0]
 80067a6:	1dfb      	adds	r3, r7, #7
 80067a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80067aa:	1dfb      	adds	r3, r7, #7
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80067b0:	d828      	bhi.n	8006804 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067b2:	4a2f      	ldr	r2, [pc, #188]	@ (8006870 <__NVIC_SetPriority+0xd4>)
 80067b4:	1dfb      	adds	r3, r7, #7
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	089b      	lsrs	r3, r3, #2
 80067bc:	33c0      	adds	r3, #192	@ 0xc0
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	589b      	ldr	r3, [r3, r2]
 80067c2:	1dfa      	adds	r2, r7, #7
 80067c4:	7812      	ldrb	r2, [r2, #0]
 80067c6:	0011      	movs	r1, r2
 80067c8:	2203      	movs	r2, #3
 80067ca:	400a      	ands	r2, r1
 80067cc:	00d2      	lsls	r2, r2, #3
 80067ce:	21ff      	movs	r1, #255	@ 0xff
 80067d0:	4091      	lsls	r1, r2
 80067d2:	000a      	movs	r2, r1
 80067d4:	43d2      	mvns	r2, r2
 80067d6:	401a      	ands	r2, r3
 80067d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	019b      	lsls	r3, r3, #6
 80067de:	22ff      	movs	r2, #255	@ 0xff
 80067e0:	401a      	ands	r2, r3
 80067e2:	1dfb      	adds	r3, r7, #7
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	0018      	movs	r0, r3
 80067e8:	2303      	movs	r3, #3
 80067ea:	4003      	ands	r3, r0
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80067f0:	481f      	ldr	r0, [pc, #124]	@ (8006870 <__NVIC_SetPriority+0xd4>)
 80067f2:	1dfb      	adds	r3, r7, #7
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	b25b      	sxtb	r3, r3
 80067f8:	089b      	lsrs	r3, r3, #2
 80067fa:	430a      	orrs	r2, r1
 80067fc:	33c0      	adds	r3, #192	@ 0xc0
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006802:	e031      	b.n	8006868 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006804:	4a1b      	ldr	r2, [pc, #108]	@ (8006874 <__NVIC_SetPriority+0xd8>)
 8006806:	1dfb      	adds	r3, r7, #7
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	0019      	movs	r1, r3
 800680c:	230f      	movs	r3, #15
 800680e:	400b      	ands	r3, r1
 8006810:	3b08      	subs	r3, #8
 8006812:	089b      	lsrs	r3, r3, #2
 8006814:	3306      	adds	r3, #6
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	18d3      	adds	r3, r2, r3
 800681a:	3304      	adds	r3, #4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	1dfa      	adds	r2, r7, #7
 8006820:	7812      	ldrb	r2, [r2, #0]
 8006822:	0011      	movs	r1, r2
 8006824:	2203      	movs	r2, #3
 8006826:	400a      	ands	r2, r1
 8006828:	00d2      	lsls	r2, r2, #3
 800682a:	21ff      	movs	r1, #255	@ 0xff
 800682c:	4091      	lsls	r1, r2
 800682e:	000a      	movs	r2, r1
 8006830:	43d2      	mvns	r2, r2
 8006832:	401a      	ands	r2, r3
 8006834:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	019b      	lsls	r3, r3, #6
 800683a:	22ff      	movs	r2, #255	@ 0xff
 800683c:	401a      	ands	r2, r3
 800683e:	1dfb      	adds	r3, r7, #7
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	0018      	movs	r0, r3
 8006844:	2303      	movs	r3, #3
 8006846:	4003      	ands	r3, r0
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800684c:	4809      	ldr	r0, [pc, #36]	@ (8006874 <__NVIC_SetPriority+0xd8>)
 800684e:	1dfb      	adds	r3, r7, #7
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	001c      	movs	r4, r3
 8006854:	230f      	movs	r3, #15
 8006856:	4023      	ands	r3, r4
 8006858:	3b08      	subs	r3, #8
 800685a:	089b      	lsrs	r3, r3, #2
 800685c:	430a      	orrs	r2, r1
 800685e:	3306      	adds	r3, #6
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	18c3      	adds	r3, r0, r3
 8006864:	3304      	adds	r3, #4
 8006866:	601a      	str	r2, [r3, #0]
}
 8006868:	46c0      	nop			@ (mov r8, r8)
 800686a:	46bd      	mov	sp, r7
 800686c:	b003      	add	sp, #12
 800686e:	bd90      	pop	{r4, r7, pc}
 8006870:	e000e100 	.word	0xe000e100
 8006874:	e000ed00 	.word	0xe000ed00

08006878 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800687e:	4b13      	ldr	r3, [pc, #76]	@ (80068cc <MX_DMA_Init+0x54>)
 8006880:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006882:	4b12      	ldr	r3, [pc, #72]	@ (80068cc <MX_DMA_Init+0x54>)
 8006884:	2101      	movs	r1, #1
 8006886:	430a      	orrs	r2, r1
 8006888:	639a      	str	r2, [r3, #56]	@ 0x38
 800688a:	4b10      	ldr	r3, [pc, #64]	@ (80068cc <MX_DMA_Init+0x54>)
 800688c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800688e:	2201      	movs	r2, #1
 8006890:	4013      	ands	r3, r2
 8006892:	607b      	str	r3, [r7, #4]
 8006894:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 8006896:	2100      	movs	r1, #0
 8006898:	2009      	movs	r0, #9
 800689a:	f7ff ff7f 	bl	800679c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800689e:	2009      	movs	r0, #9
 80068a0:	f7ff ff62 	bl	8006768 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 80068a4:	2100      	movs	r1, #0
 80068a6:	200a      	movs	r0, #10
 80068a8:	f7ff ff78 	bl	800679c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80068ac:	200a      	movs	r0, #10
 80068ae:	f7ff ff5b 	bl	8006768 <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 80068b2:	2200      	movs	r2, #0
 80068b4:	2100      	movs	r1, #0
 80068b6:	200b      	movs	r0, #11
 80068b8:	f001 f978 	bl	8007bac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 80068bc:	200b      	movs	r0, #11
 80068be:	f001 f98a 	bl	8007bd6 <HAL_NVIC_EnableIRQ>

}
 80068c2:	46c0      	nop			@ (mov r8, r8)
 80068c4:	46bd      	mov	sp, r7
 80068c6:	b002      	add	sp, #8
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	40021000 	.word	0x40021000

080068d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80068d0:	b590      	push	{r4, r7, lr}
 80068d2:	b08b      	sub	sp, #44	@ 0x2c
 80068d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068d6:	2414      	movs	r4, #20
 80068d8:	193b      	adds	r3, r7, r4
 80068da:	0018      	movs	r0, r3
 80068dc:	2314      	movs	r3, #20
 80068de:	001a      	movs	r2, r3
 80068e0:	2100      	movs	r1, #0
 80068e2:	f00f fe6d 	bl	80165c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068e6:	4b5e      	ldr	r3, [pc, #376]	@ (8006a60 <MX_GPIO_Init+0x190>)
 80068e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068ea:	4b5d      	ldr	r3, [pc, #372]	@ (8006a60 <MX_GPIO_Init+0x190>)
 80068ec:	2104      	movs	r1, #4
 80068ee:	430a      	orrs	r2, r1
 80068f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80068f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a60 <MX_GPIO_Init+0x190>)
 80068f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068f6:	2204      	movs	r2, #4
 80068f8:	4013      	ands	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
 80068fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80068fe:	4b58      	ldr	r3, [pc, #352]	@ (8006a60 <MX_GPIO_Init+0x190>)
 8006900:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006902:	4b57      	ldr	r3, [pc, #348]	@ (8006a60 <MX_GPIO_Init+0x190>)
 8006904:	2120      	movs	r1, #32
 8006906:	430a      	orrs	r2, r1
 8006908:	635a      	str	r2, [r3, #52]	@ 0x34
 800690a:	4b55      	ldr	r3, [pc, #340]	@ (8006a60 <MX_GPIO_Init+0x190>)
 800690c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800690e:	2220      	movs	r2, #32
 8006910:	4013      	ands	r3, r2
 8006912:	60fb      	str	r3, [r7, #12]
 8006914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006916:	4b52      	ldr	r3, [pc, #328]	@ (8006a60 <MX_GPIO_Init+0x190>)
 8006918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800691a:	4b51      	ldr	r3, [pc, #324]	@ (8006a60 <MX_GPIO_Init+0x190>)
 800691c:	2101      	movs	r1, #1
 800691e:	430a      	orrs	r2, r1
 8006920:	635a      	str	r2, [r3, #52]	@ 0x34
 8006922:	4b4f      	ldr	r3, [pc, #316]	@ (8006a60 <MX_GPIO_Init+0x190>)
 8006924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006926:	2201      	movs	r2, #1
 8006928:	4013      	ands	r3, r2
 800692a:	60bb      	str	r3, [r7, #8]
 800692c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800692e:	4b4c      	ldr	r3, [pc, #304]	@ (8006a60 <MX_GPIO_Init+0x190>)
 8006930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006932:	4b4b      	ldr	r3, [pc, #300]	@ (8006a60 <MX_GPIO_Init+0x190>)
 8006934:	2102      	movs	r1, #2
 8006936:	430a      	orrs	r2, r1
 8006938:	635a      	str	r2, [r3, #52]	@ 0x34
 800693a:	4b49      	ldr	r3, [pc, #292]	@ (8006a60 <MX_GPIO_Init+0x190>)
 800693c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800693e:	2202      	movs	r2, #2
 8006940:	4013      	ands	r3, r2
 8006942:	607b      	str	r3, [r7, #4]
 8006944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006946:	4b46      	ldr	r3, [pc, #280]	@ (8006a60 <MX_GPIO_Init+0x190>)
 8006948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800694a:	4b45      	ldr	r3, [pc, #276]	@ (8006a60 <MX_GPIO_Init+0x190>)
 800694c:	2108      	movs	r1, #8
 800694e:	430a      	orrs	r2, r1
 8006950:	635a      	str	r2, [r3, #52]	@ 0x34
 8006952:	4b43      	ldr	r3, [pc, #268]	@ (8006a60 <MX_GPIO_Init+0x190>)
 8006954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006956:	2208      	movs	r2, #8
 8006958:	4013      	ands	r3, r2
 800695a:	603b      	str	r3, [r7, #0]
 800695c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT1_LED_GPIO_Port, STAT1_LED_Pin, GPIO_PIN_RESET);
 800695e:	4b41      	ldr	r3, [pc, #260]	@ (8006a64 <MX_GPIO_Init+0x194>)
 8006960:	2200      	movs	r2, #0
 8006962:	2108      	movs	r1, #8
 8006964:	0018      	movs	r0, r3
 8006966:	f001 fab3 	bl	8007ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT2_LED_GPIO_Port, STAT2_LED_Pin, GPIO_PIN_RESET);
 800696a:	4b3f      	ldr	r3, [pc, #252]	@ (8006a68 <MX_GPIO_Init+0x198>)
 800696c:	2200      	movs	r2, #0
 800696e:	2108      	movs	r1, #8
 8006970:	0018      	movs	r0, r3
 8006972:	f001 faad 	bl	8007ed0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = KEY_E1_Pin|KEY_D1_Pin|KEY_D2_Pin|KEY_A4_Pin
 8006976:	193b      	adds	r3, r7, r4
 8006978:	4a3c      	ldr	r2, [pc, #240]	@ (8006a6c <MX_GPIO_Init+0x19c>)
 800697a:	601a      	str	r2, [r3, #0]
                          |KEY_A5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800697c:	193b      	adds	r3, r7, r4
 800697e:	2200      	movs	r2, #0
 8006980:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006982:	193b      	adds	r3, r7, r4
 8006984:	2201      	movs	r2, #1
 8006986:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006988:	193b      	adds	r3, r7, r4
 800698a:	4a39      	ldr	r2, [pc, #228]	@ (8006a70 <MX_GPIO_Init+0x1a0>)
 800698c:	0019      	movs	r1, r3
 800698e:	0010      	movs	r0, r2
 8006990:	f001 f932 	bl	8007bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = KEY_D3_Pin|KEY_D4_Pin;
 8006994:	193b      	adds	r3, r7, r4
 8006996:	2203      	movs	r2, #3
 8006998:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800699a:	193b      	adds	r3, r7, r4
 800699c:	2200      	movs	r2, #0
 800699e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069a0:	193b      	adds	r3, r7, r4
 80069a2:	2201      	movs	r2, #1
 80069a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80069a6:	193b      	adds	r3, r7, r4
 80069a8:	4a32      	ldr	r2, [pc, #200]	@ (8006a74 <MX_GPIO_Init+0x1a4>)
 80069aa:	0019      	movs	r1, r3
 80069ac:	0010      	movs	r0, r2
 80069ae:	f001 f923 	bl	8007bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin
 80069b2:	193b      	adds	r3, r7, r4
 80069b4:	4a30      	ldr	r2, [pc, #192]	@ (8006a78 <MX_GPIO_Init+0x1a8>)
 80069b6:	601a      	str	r2, [r3, #0]
                          |KEY_D5_Pin|KEY_B1_Pin|KEY_B2_Pin|KEY_B3_Pin
                          |KEY_D6_Pin|KEY_A6_Pin|KEY_B6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069b8:	193b      	adds	r3, r7, r4
 80069ba:	2200      	movs	r2, #0
 80069bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069be:	193b      	adds	r3, r7, r4
 80069c0:	2201      	movs	r2, #1
 80069c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069c4:	193a      	adds	r2, r7, r4
 80069c6:	23a0      	movs	r3, #160	@ 0xa0
 80069c8:	05db      	lsls	r3, r3, #23
 80069ca:	0011      	movs	r1, r2
 80069cc:	0018      	movs	r0, r3
 80069ce:	f001 f913 	bl	8007bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = KEY_B4_Pin|KEY_A1_Pin|KEY_C5_Pin|KEY_A2_Pin
 80069d2:	193b      	adds	r3, r7, r4
 80069d4:	4a29      	ldr	r2, [pc, #164]	@ (8006a7c <MX_GPIO_Init+0x1ac>)
 80069d6:	601a      	str	r2, [r3, #0]
                          |KEY_B5_Pin|KEY_A3_Pin|ENC_SW_Pin|KEY_E3_Pin
                          |KEY_E2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069d8:	193b      	adds	r3, r7, r4
 80069da:	2200      	movs	r2, #0
 80069dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069de:	193b      	adds	r3, r7, r4
 80069e0:	2201      	movs	r2, #1
 80069e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069e4:	193b      	adds	r3, r7, r4
 80069e6:	4a20      	ldr	r2, [pc, #128]	@ (8006a68 <MX_GPIO_Init+0x198>)
 80069e8:	0019      	movs	r1, r3
 80069ea:	0010      	movs	r0, r2
 80069ec:	f001 f904 	bl	8007bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_C6_Pin;
 80069f0:	193b      	adds	r3, r7, r4
 80069f2:	2202      	movs	r2, #2
 80069f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80069f6:	193b      	adds	r3, r7, r4
 80069f8:	2200      	movs	r2, #0
 80069fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069fc:	193b      	adds	r3, r7, r4
 80069fe:	2201      	movs	r2, #1
 8006a00:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(KEY_C6_GPIO_Port, &GPIO_InitStruct);
 8006a02:	193b      	adds	r3, r7, r4
 8006a04:	4a17      	ldr	r2, [pc, #92]	@ (8006a64 <MX_GPIO_Init+0x194>)
 8006a06:	0019      	movs	r1, r3
 8006a08:	0010      	movs	r0, r2
 8006a0a:	f001 f8f5 	bl	8007bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STAT1_LED_Pin;
 8006a0e:	193b      	adds	r3, r7, r4
 8006a10:	2208      	movs	r2, #8
 8006a12:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a14:	193b      	adds	r3, r7, r4
 8006a16:	2201      	movs	r2, #1
 8006a18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1a:	193b      	adds	r3, r7, r4
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	2200      	movs	r2, #0
 8006a24:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STAT1_LED_GPIO_Port, &GPIO_InitStruct);
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	4a0e      	ldr	r2, [pc, #56]	@ (8006a64 <MX_GPIO_Init+0x194>)
 8006a2a:	0019      	movs	r1, r3
 8006a2c:	0010      	movs	r0, r2
 8006a2e:	f001 f8e3 	bl	8007bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STAT2_LED_Pin;
 8006a32:	0021      	movs	r1, r4
 8006a34:	187b      	adds	r3, r7, r1
 8006a36:	2208      	movs	r2, #8
 8006a38:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a3a:	187b      	adds	r3, r7, r1
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a40:	187b      	adds	r3, r7, r1
 8006a42:	2200      	movs	r2, #0
 8006a44:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a46:	187b      	adds	r3, r7, r1
 8006a48:	2200      	movs	r2, #0
 8006a4a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STAT2_LED_GPIO_Port, &GPIO_InitStruct);
 8006a4c:	187b      	adds	r3, r7, r1
 8006a4e:	4a06      	ldr	r2, [pc, #24]	@ (8006a68 <MX_GPIO_Init+0x198>)
 8006a50:	0019      	movs	r1, r3
 8006a52:	0010      	movs	r0, r2
 8006a54:	f001 f8d0 	bl	8007bf8 <HAL_GPIO_Init>

}
 8006a58:	46c0      	nop			@ (mov r8, r8)
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	b00b      	add	sp, #44	@ 0x2c
 8006a5e:	bd90      	pop	{r4, r7, pc}
 8006a60:	40021000 	.word	0x40021000
 8006a64:	50000c00 	.word	0x50000c00
 8006a68:	50000400 	.word	0x50000400
 8006a6c:	0000e0c0 	.word	0x0000e0c0
 8006a70:	50000800 	.word	0x50000800
 8006a74:	50001400 	.word	0x50001400
 8006a78:	000086ff 	.word	0x000086ff
 8006a7c:	00001f47 	.word	0x00001f47

08006a80 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006a84:	4b1b      	ldr	r3, [pc, #108]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006a86:	4a1c      	ldr	r2, [pc, #112]	@ (8006af8 <MX_I2C2_Init+0x78>)
 8006a88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8006a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8006afc <MX_I2C2_Init+0x7c>)
 8006a8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006a90:	4b18      	ldr	r3, [pc, #96]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006a96:	4b17      	ldr	r3, [pc, #92]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006a98:	2201      	movs	r2, #1
 8006a9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006a9c:	4b15      	ldr	r3, [pc, #84]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006aa2:	4b14      	ldr	r3, [pc, #80]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006aa8:	4b12      	ldr	r3, [pc, #72]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006aae:	4b11      	ldr	r3, [pc, #68]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006ab6:	2200      	movs	r2, #0
 8006ab8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006aba:	4b0e      	ldr	r3, [pc, #56]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006abc:	0018      	movs	r0, r3
 8006abe:	f001 fa25 	bl	8007f0c <HAL_I2C_Init>
 8006ac2:	1e03      	subs	r3, r0, #0
 8006ac4:	d001      	beq.n	8006aca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006ac6:	f000 f93d 	bl	8006d44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006aca:	4b0a      	ldr	r3, [pc, #40]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006acc:	2100      	movs	r1, #0
 8006ace:	0018      	movs	r0, r3
 8006ad0:	f001 fac2 	bl	8008058 <HAL_I2CEx_ConfigAnalogFilter>
 8006ad4:	1e03      	subs	r3, r0, #0
 8006ad6:	d001      	beq.n	8006adc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006ad8:	f000 f934 	bl	8006d44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006adc:	4b05      	ldr	r3, [pc, #20]	@ (8006af4 <MX_I2C2_Init+0x74>)
 8006ade:	2100      	movs	r1, #0
 8006ae0:	0018      	movs	r0, r3
 8006ae2:	f001 fb05 	bl	80080f0 <HAL_I2CEx_ConfigDigitalFilter>
 8006ae6:	1e03      	subs	r3, r0, #0
 8006ae8:	d001      	beq.n	8006aee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006aea:	f000 f92b 	bl	8006d44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006aee:	46c0      	nop			@ (mov r8, r8)
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	2000a2e0 	.word	0x2000a2e0
 8006af8:	40005800 	.word	0x40005800
 8006afc:	10707dbc 	.word	0x10707dbc

08006b00 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006b00:	b590      	push	{r4, r7, lr}
 8006b02:	b09f      	sub	sp, #124	@ 0x7c
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b08:	2364      	movs	r3, #100	@ 0x64
 8006b0a:	18fb      	adds	r3, r7, r3
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	2314      	movs	r3, #20
 8006b10:	001a      	movs	r2, r3
 8006b12:	2100      	movs	r1, #0
 8006b14:	f00f fd54 	bl	80165c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006b18:	2414      	movs	r4, #20
 8006b1a:	193b      	adds	r3, r7, r4
 8006b1c:	0018      	movs	r0, r3
 8006b1e:	2350      	movs	r3, #80	@ 0x50
 8006b20:	001a      	movs	r2, r3
 8006b22:	2100      	movs	r1, #0
 8006b24:	f00f fd4c 	bl	80165c0 <memset>
  if(i2cHandle->Instance==I2C2)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a22      	ldr	r2, [pc, #136]	@ (8006bb8 <HAL_I2C_MspInit+0xb8>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d13e      	bne.n	8006bb0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006b32:	193b      	adds	r3, r7, r4
 8006b34:	2240      	movs	r2, #64	@ 0x40
 8006b36:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006b38:	193b      	adds	r3, r7, r4
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b3e:	193b      	adds	r3, r7, r4
 8006b40:	0018      	movs	r0, r3
 8006b42:	f003 fc1f 	bl	800a384 <HAL_RCCEx_PeriphCLKConfig>
 8006b46:	1e03      	subs	r3, r0, #0
 8006b48:	d001      	beq.n	8006b4e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8006b4a:	f000 f8fb 	bl	8006d44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006bbc <HAL_I2C_MspInit+0xbc>)
 8006b50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b52:	4b1a      	ldr	r3, [pc, #104]	@ (8006bbc <HAL_I2C_MspInit+0xbc>)
 8006b54:	2102      	movs	r1, #2
 8006b56:	430a      	orrs	r2, r1
 8006b58:	635a      	str	r2, [r3, #52]	@ 0x34
 8006b5a:	4b18      	ldr	r3, [pc, #96]	@ (8006bbc <HAL_I2C_MspInit+0xbc>)
 8006b5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b5e:	2202      	movs	r2, #2
 8006b60:	4013      	ands	r3, r2
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8006b66:	2164      	movs	r1, #100	@ 0x64
 8006b68:	187b      	adds	r3, r7, r1
 8006b6a:	22c0      	movs	r2, #192	@ 0xc0
 8006b6c:	01d2      	lsls	r2, r2, #7
 8006b6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b70:	187b      	adds	r3, r7, r1
 8006b72:	2212      	movs	r2, #18
 8006b74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b76:	187b      	adds	r3, r7, r1
 8006b78:	2200      	movs	r2, #0
 8006b7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b7c:	187b      	adds	r3, r7, r1
 8006b7e:	2200      	movs	r2, #0
 8006b80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006b82:	187b      	adds	r3, r7, r1
 8006b84:	2206      	movs	r2, #6
 8006b86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b88:	187b      	adds	r3, r7, r1
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006bc0 <HAL_I2C_MspInit+0xc0>)
 8006b8c:	0019      	movs	r1, r3
 8006b8e:	0010      	movs	r0, r2
 8006b90:	f001 f832 	bl	8007bf8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006b94:	4b09      	ldr	r3, [pc, #36]	@ (8006bbc <HAL_I2C_MspInit+0xbc>)
 8006b96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b98:	4b08      	ldr	r3, [pc, #32]	@ (8006bbc <HAL_I2C_MspInit+0xbc>)
 8006b9a:	2180      	movs	r1, #128	@ 0x80
 8006b9c:	03c9      	lsls	r1, r1, #15
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006ba2:	4b06      	ldr	r3, [pc, #24]	@ (8006bbc <HAL_I2C_MspInit+0xbc>)
 8006ba4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006ba6:	2380      	movs	r3, #128	@ 0x80
 8006ba8:	03db      	lsls	r3, r3, #15
 8006baa:	4013      	ands	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006bb0:	46c0      	nop			@ (mov r8, r8)
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	b01f      	add	sp, #124	@ 0x7c
 8006bb6:	bd90      	pop	{r4, r7, pc}
 8006bb8:	40005800 	.word	0x40005800
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	50000400 	.word	0x50000400

08006bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006bc8:	f000 fea6 	bl	8007918 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006bcc:	f000 f814 	bl	8006bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006bd0:	f7ff fe7e 	bl	80068d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006bd4:	f7ff fe50 	bl	8006878 <MX_DMA_Init>
  MX_I2C2_Init();
 8006bd8:	f7ff ff52 	bl	8006a80 <MX_I2C2_Init>
  MX_TIM3_Init();
 8006bdc:	f000 f9dc 	bl	8006f98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8006be0:	f000 fa3e 	bl	8007060 <MX_TIM4_Init>
  MX_UCPD1_Init();
 8006be4:	f000 fd28 	bl	8007638 <MX_UCPD1_Init>
  MX_UCPD2_Init();
 8006be8:	f000 fdcc 	bl	8007784 <MX_UCPD2_Init>
  /* Call PreOsInit function */
  USBPD_PreInitOs();
 8006bec:	f00e feda 	bl	80159a4 <USBPD_PreInitOs>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8006bf0:	f7ff fdb3 	bl	800675a <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006bf4:	46c0      	nop			@ (mov r8, r8)
 8006bf6:	e7fd      	b.n	8006bf4 <main+0x30>

08006bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006bf8:	b590      	push	{r4, r7, lr}
 8006bfa:	b09b      	sub	sp, #108	@ 0x6c
 8006bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006bfe:	242c      	movs	r4, #44	@ 0x2c
 8006c00:	193b      	adds	r3, r7, r4
 8006c02:	0018      	movs	r0, r3
 8006c04:	233c      	movs	r3, #60	@ 0x3c
 8006c06:	001a      	movs	r2, r3
 8006c08:	2100      	movs	r1, #0
 8006c0a:	f00f fcd9 	bl	80165c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c0e:	231c      	movs	r3, #28
 8006c10:	18fb      	adds	r3, r7, r3
 8006c12:	0018      	movs	r0, r3
 8006c14:	2310      	movs	r3, #16
 8006c16:	001a      	movs	r2, r3
 8006c18:	2100      	movs	r1, #0
 8006c1a:	f00f fcd1 	bl	80165c0 <memset>
  RCC_CRSInitTypeDef pInit = {0};
 8006c1e:	1d3b      	adds	r3, r7, #4
 8006c20:	0018      	movs	r0, r3
 8006c22:	2318      	movs	r3, #24
 8006c24:	001a      	movs	r2, r3
 8006c26:	2100      	movs	r1, #0
 8006c28:	f00f fcca 	bl	80165c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c2c:	2380      	movs	r3, #128	@ 0x80
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	0018      	movs	r0, r3
 8006c32:	f002 fe27 	bl	8009884 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8006c36:	193b      	adds	r3, r7, r4
 8006c38:	2222      	movs	r2, #34	@ 0x22
 8006c3a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006c3c:	193b      	adds	r3, r7, r4
 8006c3e:	2280      	movs	r2, #128	@ 0x80
 8006c40:	0052      	lsls	r2, r2, #1
 8006c42:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006c44:	193b      	adds	r3, r7, r4
 8006c46:	2280      	movs	r2, #128	@ 0x80
 8006c48:	03d2      	lsls	r2, r2, #15
 8006c4a:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8006c4c:	0021      	movs	r1, r4
 8006c4e:	187b      	adds	r3, r7, r1
 8006c50:	2200      	movs	r2, #0
 8006c52:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006c54:	187b      	adds	r3, r7, r1
 8006c56:	2240      	movs	r2, #64	@ 0x40
 8006c58:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006c5a:	187b      	adds	r3, r7, r1
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006c60:	187b      	adds	r3, r7, r1
 8006c62:	2202      	movs	r2, #2
 8006c64:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8006c66:	187b      	adds	r3, r7, r1
 8006c68:	2200      	movs	r2, #0
 8006c6a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8006c6c:	187b      	adds	r3, r7, r1
 8006c6e:	2208      	movs	r2, #8
 8006c70:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006c72:	187b      	adds	r3, r7, r1
 8006c74:	2280      	movs	r2, #128	@ 0x80
 8006c76:	0292      	lsls	r2, r2, #10
 8006c78:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8006c7a:	187b      	adds	r3, r7, r1
 8006c7c:	22c0      	movs	r2, #192	@ 0xc0
 8006c7e:	04d2      	lsls	r2, r2, #19
 8006c80:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006c82:	187b      	adds	r3, r7, r1
 8006c84:	2280      	movs	r2, #128	@ 0x80
 8006c86:	0592      	lsls	r2, r2, #22
 8006c88:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	0018      	movs	r0, r3
 8006c8e:	f002 fe45 	bl	800991c <HAL_RCC_OscConfig>
 8006c92:	1e03      	subs	r3, r0, #0
 8006c94:	d001      	beq.n	8006c9a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8006c96:	f000 f855 	bl	8006d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c9a:	211c      	movs	r1, #28
 8006c9c:	187b      	adds	r3, r7, r1
 8006c9e:	2207      	movs	r2, #7
 8006ca0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006ca2:	187b      	adds	r3, r7, r1
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ca8:	187b      	adds	r3, r7, r1
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006cae:	187b      	adds	r3, r7, r1
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8006cb4:	187b      	adds	r3, r7, r1
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f003 f98f 	bl	8009fdc <HAL_RCC_ClockConfig>
 8006cbe:	1e03      	subs	r3, r0, #0
 8006cc0:	d001      	beq.n	8006cc6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8006cc2:	f000 f83f 	bl	8006d44 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8006cc6:	4b14      	ldr	r3, [pc, #80]	@ (8006d18 <SystemClock_Config+0x120>)
 8006cc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cca:	4b13      	ldr	r3, [pc, #76]	@ (8006d18 <SystemClock_Config+0x120>)
 8006ccc:	2180      	movs	r1, #128	@ 0x80
 8006cce:	0249      	lsls	r1, r1, #9
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006cd4:	4b10      	ldr	r3, [pc, #64]	@ (8006d18 <SystemClock_Config+0x120>)
 8006cd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cd8:	2380      	movs	r3, #128	@ 0x80
 8006cda:	025b      	lsls	r3, r3, #9
 8006cdc:	4013      	ands	r3, r2
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 8006ce2:	1d3b      	adds	r3, r7, #4
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	601a      	str	r2, [r3, #0]
  pInit.Source = RCC_CRS_SYNC_SOURCE_USB;
 8006ce8:	1d3b      	adds	r3, r7, #4
 8006cea:	2280      	movs	r2, #128	@ 0x80
 8006cec:	0592      	lsls	r2, r2, #22
 8006cee:	605a      	str	r2, [r3, #4]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8006cf0:	1d3b      	adds	r3, r7, #4
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	609a      	str	r2, [r3, #8]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8006cf6:	1d3b      	adds	r3, r7, #4
 8006cf8:	4a08      	ldr	r2, [pc, #32]	@ (8006d1c <SystemClock_Config+0x124>)
 8006cfa:	60da      	str	r2, [r3, #12]
  pInit.ErrorLimitValue = 34;
 8006cfc:	1d3b      	adds	r3, r7, #4
 8006cfe:	2222      	movs	r2, #34	@ 0x22
 8006d00:	611a      	str	r2, [r3, #16]
  pInit.HSI48CalibrationValue = 32;
 8006d02:	1d3b      	adds	r3, r7, #4
 8006d04:	2220      	movs	r2, #32
 8006d06:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&pInit);
 8006d08:	1d3b      	adds	r3, r7, #4
 8006d0a:	0018      	movs	r0, r3
 8006d0c:	f003 fd96 	bl	800a83c <HAL_RCCEx_CRSConfig>
}
 8006d10:	46c0      	nop			@ (mov r8, r8)
 8006d12:	46bd      	mov	sp, r7
 8006d14:	b01b      	add	sp, #108	@ 0x6c
 8006d16:	bd90      	pop	{r4, r7, pc}
 8006d18:	40021000 	.word	0x40021000
 8006d1c:	0000bb7f 	.word	0x0000bb7f

08006d20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a04      	ldr	r2, [pc, #16]	@ (8006d40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d101      	bne.n	8006d36 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006d32:	f000 fe11 	bl	8007958 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006d36:	46c0      	nop			@ (mov r8, r8)
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b002      	add	sp, #8
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	46c0      	nop			@ (mov r8, r8)
 8006d40:	40001000 	.word	0x40001000

08006d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d48:	b672      	cpsid	i
}
 8006d4a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d4c:	46c0      	nop			@ (mov r8, r8)
 8006d4e:	e7fd      	b.n	8006d4c <Error_Handler+0x8>

08006d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d56:	4b15      	ldr	r3, [pc, #84]	@ (8006dac <HAL_MspInit+0x5c>)
 8006d58:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d5a:	4b14      	ldr	r3, [pc, #80]	@ (8006dac <HAL_MspInit+0x5c>)
 8006d5c:	2101      	movs	r1, #1
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	641a      	str	r2, [r3, #64]	@ 0x40
 8006d62:	4b12      	ldr	r3, [pc, #72]	@ (8006dac <HAL_MspInit+0x5c>)
 8006d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d66:	2201      	movs	r2, #1
 8006d68:	4013      	ands	r3, r2
 8006d6a:	607b      	str	r3, [r7, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8006dac <HAL_MspInit+0x5c>)
 8006d70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d72:	4b0e      	ldr	r3, [pc, #56]	@ (8006dac <HAL_MspInit+0x5c>)
 8006d74:	2180      	movs	r1, #128	@ 0x80
 8006d76:	0549      	lsls	r1, r1, #21
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8006dac <HAL_MspInit+0x5c>)
 8006d7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006d80:	2380      	movs	r3, #128	@ 0x80
 8006d82:	055b      	lsls	r3, r3, #21
 8006d84:	4013      	ands	r3, r2
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8006d8a:	2004      	movs	r0, #4
 8006d8c:	f000 fe24 	bl	80079d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8006d90:	f000 fe4a 	bl	8007a28 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8006d94:	2000      	movs	r0, #0
 8006d96:	f000 fe33 	bl	8007a00 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8006d9a:	23c0      	movs	r3, #192	@ 0xc0
 8006d9c:	00db      	lsls	r3, r3, #3
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f000 fe66 	bl	8007a70 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006da4:	46c0      	nop			@ (mov r8, r8)
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b002      	add	sp, #8
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	40021000 	.word	0x40021000

08006db0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006db0:	b5b0      	push	{r4, r5, r7, lr}
 8006db2:	b08c      	sub	sp, #48	@ 0x30
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8006db8:	232b      	movs	r3, #43	@ 0x2b
 8006dba:	18fb      	adds	r3, r7, r3
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006dc0:	4b37      	ldr	r3, [pc, #220]	@ (8006ea0 <HAL_InitTick+0xf0>)
 8006dc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006dc4:	4b36      	ldr	r3, [pc, #216]	@ (8006ea0 <HAL_InitTick+0xf0>)
 8006dc6:	2110      	movs	r1, #16
 8006dc8:	430a      	orrs	r2, r1
 8006dca:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006dcc:	4b34      	ldr	r3, [pc, #208]	@ (8006ea0 <HAL_InitTick+0xf0>)
 8006dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dd0:	2210      	movs	r2, #16
 8006dd2:	4013      	ands	r3, r2
 8006dd4:	60bb      	str	r3, [r7, #8]
 8006dd6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006dd8:	230c      	movs	r3, #12
 8006dda:	18fa      	adds	r2, r7, r3
 8006ddc:	2410      	movs	r4, #16
 8006dde:	193b      	adds	r3, r7, r4
 8006de0:	0011      	movs	r1, r2
 8006de2:	0018      	movs	r0, r3
 8006de4:	f003 faa4 	bl	800a330 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006de8:	193b      	adds	r3, r7, r4
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d104      	bne.n	8006dfe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006df4:	f003 fa86 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 8006df8:	0003      	movs	r3, r0
 8006dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dfc:	e004      	b.n	8006e08 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006dfe:	f003 fa81 	bl	800a304 <HAL_RCC_GetPCLK1Freq>
 8006e02:	0003      	movs	r3, r0
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e0a:	4926      	ldr	r1, [pc, #152]	@ (8006ea4 <HAL_InitTick+0xf4>)
 8006e0c:	0018      	movs	r0, r3
 8006e0e:	f7ff fb11 	bl	8006434 <__udivsi3>
 8006e12:	0003      	movs	r3, r0
 8006e14:	3b01      	subs	r3, #1
 8006e16:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006e18:	4b23      	ldr	r3, [pc, #140]	@ (8006ea8 <HAL_InitTick+0xf8>)
 8006e1a:	4a24      	ldr	r2, [pc, #144]	@ (8006eac <HAL_InitTick+0xfc>)
 8006e1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006e1e:	4b22      	ldr	r3, [pc, #136]	@ (8006ea8 <HAL_InitTick+0xf8>)
 8006e20:	4a23      	ldr	r2, [pc, #140]	@ (8006eb0 <HAL_InitTick+0x100>)
 8006e22:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006e24:	4b20      	ldr	r3, [pc, #128]	@ (8006ea8 <HAL_InitTick+0xf8>)
 8006e26:	6a3a      	ldr	r2, [r7, #32]
 8006e28:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8006e2a:	4b1f      	ldr	r3, [pc, #124]	@ (8006ea8 <HAL_InitTick+0xf8>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006e30:	4b1d      	ldr	r3, [pc, #116]	@ (8006ea8 <HAL_InitTick+0xf8>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006e36:	4b1c      	ldr	r3, [pc, #112]	@ (8006ea8 <HAL_InitTick+0xf8>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006e3c:	252b      	movs	r5, #43	@ 0x2b
 8006e3e:	197c      	adds	r4, r7, r5
 8006e40:	4b19      	ldr	r3, [pc, #100]	@ (8006ea8 <HAL_InitTick+0xf8>)
 8006e42:	0018      	movs	r0, r3
 8006e44:	f003 fd40 	bl	800a8c8 <HAL_TIM_Base_Init>
 8006e48:	0003      	movs	r3, r0
 8006e4a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8006e4c:	197b      	adds	r3, r7, r5
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d11e      	bne.n	8006e92 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006e54:	197c      	adds	r4, r7, r5
 8006e56:	4b14      	ldr	r3, [pc, #80]	@ (8006ea8 <HAL_InitTick+0xf8>)
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f003 fd95 	bl	800a988 <HAL_TIM_Base_Start_IT>
 8006e5e:	0003      	movs	r3, r0
 8006e60:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8006e62:	197b      	adds	r3, r7, r5
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d113      	bne.n	8006e92 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 8006e6a:	2011      	movs	r0, #17
 8006e6c:	f000 feb3 	bl	8007bd6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d809      	bhi.n	8006e8a <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	0019      	movs	r1, r3
 8006e7c:	2011      	movs	r0, #17
 8006e7e:	f000 fe95 	bl	8007bac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006e82:	4b0c      	ldr	r3, [pc, #48]	@ (8006eb4 <HAL_InitTick+0x104>)
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	e003      	b.n	8006e92 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8006e8a:	232b      	movs	r3, #43	@ 0x2b
 8006e8c:	18fb      	adds	r3, r7, r3
 8006e8e:	2201      	movs	r2, #1
 8006e90:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8006e92:	232b      	movs	r3, #43	@ 0x2b
 8006e94:	18fb      	adds	r3, r7, r3
 8006e96:	781b      	ldrb	r3, [r3, #0]
}
 8006e98:	0018      	movs	r0, r3
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	b00c      	add	sp, #48	@ 0x30
 8006e9e:	bdb0      	pop	{r4, r5, r7, pc}
 8006ea0:	40021000 	.word	0x40021000
 8006ea4:	000f4240 	.word	0x000f4240
 8006ea8:	2000a334 	.word	0x2000a334
 8006eac:	40001000 	.word	0x40001000
 8006eb0:	000003e7 	.word	0x000003e7
 8006eb4:	20000008 	.word	0x20000008

08006eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006ebc:	46c0      	nop			@ (mov r8, r8)
 8006ebe:	e7fd      	b.n	8006ebc <NMI_Handler+0x4>

08006ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ec4:	46c0      	nop			@ (mov r8, r8)
 8006ec6:	e7fd      	b.n	8006ec4 <HardFault_Handler+0x4>

08006ec8 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8006ecc:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <USB_UCPD1_2_IRQHandler+0x1c>)
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f001 f9c0 	bl	8008254 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 8006ed4:	f008 f899 	bl	800f00a <USBPD_PORT0_IRQHandler>
  USBPD_PORT1_IRQHandler();
 8006ed8:	f008 f89f 	bl	800f01a <USBPD_PORT1_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8006edc:	46c0      	nop			@ (mov r8, r8)
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	46c0      	nop			@ (mov r8, r8)
 8006ee4:	2000a41c 	.word	0x2000a41c

08006ee8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006eec:	46c0      	nop			@ (mov r8, r8)
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8006ef6:	46c0      	nop			@ (mov r8, r8)
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 8006f00:	46c0      	nop			@ (mov r8, r8)
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006f0c:	4b03      	ldr	r3, [pc, #12]	@ (8006f1c <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 8006f0e:	0018      	movs	r0, r3
 8006f10:	f003 fe9c 	bl	800ac4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8006f14:	46c0      	nop			@ (mov r8, r8)
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	46c0      	nop			@ (mov r8, r8)
 8006f1c:	2000a334 	.word	0x2000a334

08006f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f28:	4a14      	ldr	r2, [pc, #80]	@ (8006f7c <_sbrk+0x5c>)
 8006f2a:	4b15      	ldr	r3, [pc, #84]	@ (8006f80 <_sbrk+0x60>)
 8006f2c:	1ad3      	subs	r3, r2, r3
 8006f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f34:	4b13      	ldr	r3, [pc, #76]	@ (8006f84 <_sbrk+0x64>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f3c:	4b11      	ldr	r3, [pc, #68]	@ (8006f84 <_sbrk+0x64>)
 8006f3e:	4a12      	ldr	r2, [pc, #72]	@ (8006f88 <_sbrk+0x68>)
 8006f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f42:	4b10      	ldr	r3, [pc, #64]	@ (8006f84 <_sbrk+0x64>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	18d3      	adds	r3, r2, r3
 8006f4a:	693a      	ldr	r2, [r7, #16]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d207      	bcs.n	8006f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f50:	f00f fb50 	bl	80165f4 <__errno>
 8006f54:	0003      	movs	r3, r0
 8006f56:	220c      	movs	r2, #12
 8006f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	425b      	negs	r3, r3
 8006f5e:	e009      	b.n	8006f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f60:	4b08      	ldr	r3, [pc, #32]	@ (8006f84 <_sbrk+0x64>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f66:	4b07      	ldr	r3, [pc, #28]	@ (8006f84 <_sbrk+0x64>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	18d2      	adds	r2, r2, r3
 8006f6e:	4b05      	ldr	r3, [pc, #20]	@ (8006f84 <_sbrk+0x64>)
 8006f70:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8006f72:	68fb      	ldr	r3, [r7, #12]
}
 8006f74:	0018      	movs	r0, r3
 8006f76:	46bd      	mov	sp, r7
 8006f78:	b006      	add	sp, #24
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20024000 	.word	0x20024000
 8006f80:	00000400 	.word	0x00000400
 8006f84:	2000a380 	.word	0x2000a380
 8006f88:	2000b200 	.word	0x2000b200

08006f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f90:	46c0      	nop			@ (mov r8, r8)
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
	...

08006f98 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006f98:	b590      	push	{r4, r7, lr}
 8006f9a:	b08d      	sub	sp, #52	@ 0x34
 8006f9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006f9e:	240c      	movs	r4, #12
 8006fa0:	193b      	adds	r3, r7, r4
 8006fa2:	0018      	movs	r0, r3
 8006fa4:	2324      	movs	r3, #36	@ 0x24
 8006fa6:	001a      	movs	r2, r3
 8006fa8:	2100      	movs	r1, #0
 8006faa:	f00f fb09 	bl	80165c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006fae:	003b      	movs	r3, r7
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	001a      	movs	r2, r3
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	f00f fb02 	bl	80165c0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006fbc:	4b25      	ldr	r3, [pc, #148]	@ (8007054 <MX_TIM3_Init+0xbc>)
 8006fbe:	4a26      	ldr	r2, [pc, #152]	@ (8007058 <MX_TIM3_Init+0xc0>)
 8006fc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8006fc2:	4b24      	ldr	r3, [pc, #144]	@ (8007054 <MX_TIM3_Init+0xbc>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fc8:	4b22      	ldr	r3, [pc, #136]	@ (8007054 <MX_TIM3_Init+0xbc>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8006fce:	4b21      	ldr	r3, [pc, #132]	@ (8007054 <MX_TIM3_Init+0xbc>)
 8006fd0:	4a22      	ldr	r2, [pc, #136]	@ (800705c <MX_TIM3_Init+0xc4>)
 8006fd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8007054 <MX_TIM3_Init+0xbc>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fda:	4b1e      	ldr	r3, [pc, #120]	@ (8007054 <MX_TIM3_Init+0xbc>)
 8006fdc:	2200      	movs	r2, #0
 8006fde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8006fe0:	0021      	movs	r1, r4
 8006fe2:	187b      	adds	r3, r7, r1
 8006fe4:	2203      	movs	r2, #3
 8006fe6:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006fe8:	187b      	adds	r3, r7, r1
 8006fea:	2200      	movs	r2, #0
 8006fec:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	2201      	movs	r2, #1
 8006ff2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006ff4:	187b      	adds	r3, r7, r1
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8006ffa:	187b      	adds	r3, r7, r1
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007000:	187b      	adds	r3, r7, r1
 8007002:	2200      	movs	r2, #0
 8007004:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007006:	187b      	adds	r3, r7, r1
 8007008:	2201      	movs	r2, #1
 800700a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800700c:	187b      	adds	r3, r7, r1
 800700e:	2200      	movs	r2, #0
 8007010:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8007012:	187b      	adds	r3, r7, r1
 8007014:	2200      	movs	r2, #0
 8007016:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007018:	187a      	adds	r2, r7, r1
 800701a:	4b0e      	ldr	r3, [pc, #56]	@ (8007054 <MX_TIM3_Init+0xbc>)
 800701c:	0011      	movs	r1, r2
 800701e:	0018      	movs	r0, r3
 8007020:	f003 fd6c 	bl	800aafc <HAL_TIM_Encoder_Init>
 8007024:	1e03      	subs	r3, r0, #0
 8007026:	d001      	beq.n	800702c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8007028:	f7ff fe8c 	bl	8006d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800702c:	003b      	movs	r3, r7
 800702e:	2200      	movs	r2, #0
 8007030:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007032:	003b      	movs	r3, r7
 8007034:	2200      	movs	r2, #0
 8007036:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007038:	003a      	movs	r2, r7
 800703a:	4b06      	ldr	r3, [pc, #24]	@ (8007054 <MX_TIM3_Init+0xbc>)
 800703c:	0011      	movs	r1, r2
 800703e:	0018      	movs	r0, r3
 8007040:	f004 fb88 	bl	800b754 <HAL_TIMEx_MasterConfigSynchronization>
 8007044:	1e03      	subs	r3, r0, #0
 8007046:	d001      	beq.n	800704c <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8007048:	f7ff fe7c 	bl	8006d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800704c:	46c0      	nop			@ (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b00d      	add	sp, #52	@ 0x34
 8007052:	bd90      	pop	{r4, r7, pc}
 8007054:	2000a384 	.word	0x2000a384
 8007058:	40000400 	.word	0x40000400
 800705c:	0000ffff 	.word	0x0000ffff

08007060 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b08a      	sub	sp, #40	@ 0x28
 8007064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007066:	231c      	movs	r3, #28
 8007068:	18fb      	adds	r3, r7, r3
 800706a:	0018      	movs	r0, r3
 800706c:	230c      	movs	r3, #12
 800706e:	001a      	movs	r2, r3
 8007070:	2100      	movs	r1, #0
 8007072:	f00f faa5 	bl	80165c0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007076:	003b      	movs	r3, r7
 8007078:	0018      	movs	r0, r3
 800707a:	231c      	movs	r3, #28
 800707c:	001a      	movs	r2, r3
 800707e:	2100      	movs	r1, #0
 8007080:	f00f fa9e 	bl	80165c0 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007084:	4b24      	ldr	r3, [pc, #144]	@ (8007118 <MX_TIM4_Init+0xb8>)
 8007086:	4a25      	ldr	r2, [pc, #148]	@ (800711c <MX_TIM4_Init+0xbc>)
 8007088:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800708a:	4b23      	ldr	r3, [pc, #140]	@ (8007118 <MX_TIM4_Init+0xb8>)
 800708c:	2200      	movs	r2, #0
 800708e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007090:	4b21      	ldr	r3, [pc, #132]	@ (8007118 <MX_TIM4_Init+0xb8>)
 8007092:	2200      	movs	r2, #0
 8007094:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8007096:	4b20      	ldr	r3, [pc, #128]	@ (8007118 <MX_TIM4_Init+0xb8>)
 8007098:	4a21      	ldr	r2, [pc, #132]	@ (8007120 <MX_TIM4_Init+0xc0>)
 800709a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800709c:	4b1e      	ldr	r3, [pc, #120]	@ (8007118 <MX_TIM4_Init+0xb8>)
 800709e:	2200      	movs	r2, #0
 80070a0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80070a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007118 <MX_TIM4_Init+0xb8>)
 80070a4:	2200      	movs	r2, #0
 80070a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80070a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007118 <MX_TIM4_Init+0xb8>)
 80070aa:	0018      	movs	r0, r3
 80070ac:	f003 fcce 	bl	800aa4c <HAL_TIM_PWM_Init>
 80070b0:	1e03      	subs	r3, r0, #0
 80070b2:	d001      	beq.n	80070b8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80070b4:	f7ff fe46 	bl	8006d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80070b8:	211c      	movs	r1, #28
 80070ba:	187b      	adds	r3, r7, r1
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070c0:	187b      	adds	r3, r7, r1
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80070c6:	187a      	adds	r2, r7, r1
 80070c8:	4b13      	ldr	r3, [pc, #76]	@ (8007118 <MX_TIM4_Init+0xb8>)
 80070ca:	0011      	movs	r1, r2
 80070cc:	0018      	movs	r0, r3
 80070ce:	f004 fb41 	bl	800b754 <HAL_TIMEx_MasterConfigSynchronization>
 80070d2:	1e03      	subs	r3, r0, #0
 80070d4:	d001      	beq.n	80070da <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 80070d6:	f7ff fe35 	bl	8006d44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80070da:	003b      	movs	r3, r7
 80070dc:	2260      	movs	r2, #96	@ 0x60
 80070de:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80070e0:	003b      	movs	r3, r7
 80070e2:	2200      	movs	r2, #0
 80070e4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80070e6:	003b      	movs	r3, r7
 80070e8:	2200      	movs	r2, #0
 80070ea:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80070ec:	003b      	movs	r3, r7
 80070ee:	2200      	movs	r2, #0
 80070f0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80070f2:	0039      	movs	r1, r7
 80070f4:	4b08      	ldr	r3, [pc, #32]	@ (8007118 <MX_TIM4_Init+0xb8>)
 80070f6:	2204      	movs	r2, #4
 80070f8:	0018      	movs	r0, r3
 80070fa:	f003 feaf 	bl	800ae5c <HAL_TIM_PWM_ConfigChannel>
 80070fe:	1e03      	subs	r3, r0, #0
 8007100:	d001      	beq.n	8007106 <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 8007102:	f7ff fe1f 	bl	8006d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007106:	4b04      	ldr	r3, [pc, #16]	@ (8007118 <MX_TIM4_Init+0xb8>)
 8007108:	0018      	movs	r0, r3
 800710a:	f000 f873 	bl	80071f4 <HAL_TIM_MspPostInit>

}
 800710e:	46c0      	nop			@ (mov r8, r8)
 8007110:	46bd      	mov	sp, r7
 8007112:	b00a      	add	sp, #40	@ 0x28
 8007114:	bd80      	pop	{r7, pc}
 8007116:	46c0      	nop			@ (mov r8, r8)
 8007118:	2000a3d0 	.word	0x2000a3d0
 800711c:	40000800 	.word	0x40000800
 8007120:	0000ffff 	.word	0x0000ffff

08007124 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007124:	b590      	push	{r4, r7, lr}
 8007126:	b08b      	sub	sp, #44	@ 0x2c
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800712c:	2414      	movs	r4, #20
 800712e:	193b      	adds	r3, r7, r4
 8007130:	0018      	movs	r0, r3
 8007132:	2314      	movs	r3, #20
 8007134:	001a      	movs	r2, r3
 8007136:	2100      	movs	r1, #0
 8007138:	f00f fa42 	bl	80165c0 <memset>
  if(tim_encoderHandle->Instance==TIM3)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1a      	ldr	r2, [pc, #104]	@ (80071ac <HAL_TIM_Encoder_MspInit+0x88>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d12d      	bne.n	80071a2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007146:	4b1a      	ldr	r3, [pc, #104]	@ (80071b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8007148:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800714a:	4b19      	ldr	r3, [pc, #100]	@ (80071b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800714c:	2102      	movs	r1, #2
 800714e:	430a      	orrs	r2, r1
 8007150:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007152:	4b17      	ldr	r3, [pc, #92]	@ (80071b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8007154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007156:	2202      	movs	r2, #2
 8007158:	4013      	ands	r3, r2
 800715a:	613b      	str	r3, [r7, #16]
 800715c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800715e:	4b14      	ldr	r3, [pc, #80]	@ (80071b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8007160:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007162:	4b13      	ldr	r3, [pc, #76]	@ (80071b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8007164:	2102      	movs	r1, #2
 8007166:	430a      	orrs	r2, r1
 8007168:	635a      	str	r2, [r3, #52]	@ 0x34
 800716a:	4b11      	ldr	r3, [pc, #68]	@ (80071b0 <HAL_TIM_Encoder_MspInit+0x8c>)
 800716c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800716e:	2202      	movs	r2, #2
 8007170:	4013      	ands	r3, r2
 8007172:	60fb      	str	r3, [r7, #12]
 8007174:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8007176:	0021      	movs	r1, r4
 8007178:	187b      	adds	r3, r7, r1
 800717a:	2230      	movs	r2, #48	@ 0x30
 800717c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800717e:	187b      	adds	r3, r7, r1
 8007180:	2202      	movs	r2, #2
 8007182:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007184:	187b      	adds	r3, r7, r1
 8007186:	2200      	movs	r2, #0
 8007188:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800718a:	187b      	adds	r3, r7, r1
 800718c:	2200      	movs	r2, #0
 800718e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8007190:	187b      	adds	r3, r7, r1
 8007192:	2201      	movs	r2, #1
 8007194:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007196:	187b      	adds	r3, r7, r1
 8007198:	4a06      	ldr	r2, [pc, #24]	@ (80071b4 <HAL_TIM_Encoder_MspInit+0x90>)
 800719a:	0019      	movs	r1, r3
 800719c:	0010      	movs	r0, r2
 800719e:	f000 fd2b 	bl	8007bf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80071a2:	46c0      	nop			@ (mov r8, r8)
 80071a4:	46bd      	mov	sp, r7
 80071a6:	b00b      	add	sp, #44	@ 0x2c
 80071a8:	bd90      	pop	{r4, r7, pc}
 80071aa:	46c0      	nop			@ (mov r8, r8)
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40021000 	.word	0x40021000
 80071b4:	50000400 	.word	0x50000400

080071b8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <HAL_TIM_PWM_MspInit+0x34>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d10b      	bne.n	80071e2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80071ca:	4b09      	ldr	r3, [pc, #36]	@ (80071f0 <HAL_TIM_PWM_MspInit+0x38>)
 80071cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80071ce:	4b08      	ldr	r3, [pc, #32]	@ (80071f0 <HAL_TIM_PWM_MspInit+0x38>)
 80071d0:	2104      	movs	r1, #4
 80071d2:	430a      	orrs	r2, r1
 80071d4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80071d6:	4b06      	ldr	r3, [pc, #24]	@ (80071f0 <HAL_TIM_PWM_MspInit+0x38>)
 80071d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071da:	2204      	movs	r2, #4
 80071dc:	4013      	ands	r3, r2
 80071de:	60fb      	str	r3, [r7, #12]
 80071e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80071e2:	46c0      	nop			@ (mov r8, r8)
 80071e4:	46bd      	mov	sp, r7
 80071e6:	b004      	add	sp, #16
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	40000800 	.word	0x40000800
 80071f0:	40021000 	.word	0x40021000

080071f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80071f4:	b590      	push	{r4, r7, lr}
 80071f6:	b089      	sub	sp, #36	@ 0x24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071fc:	240c      	movs	r4, #12
 80071fe:	193b      	adds	r3, r7, r4
 8007200:	0018      	movs	r0, r3
 8007202:	2314      	movs	r3, #20
 8007204:	001a      	movs	r2, r3
 8007206:	2100      	movs	r1, #0
 8007208:	f00f f9da 	bl	80165c0 <memset>
  if(timHandle->Instance==TIM4)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a14      	ldr	r2, [pc, #80]	@ (8007264 <HAL_TIM_MspPostInit+0x70>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d121      	bne.n	800725a <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007216:	4b14      	ldr	r3, [pc, #80]	@ (8007268 <HAL_TIM_MspPostInit+0x74>)
 8007218:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800721a:	4b13      	ldr	r3, [pc, #76]	@ (8007268 <HAL_TIM_MspPostInit+0x74>)
 800721c:	2102      	movs	r1, #2
 800721e:	430a      	orrs	r2, r1
 8007220:	635a      	str	r2, [r3, #52]	@ 0x34
 8007222:	4b11      	ldr	r3, [pc, #68]	@ (8007268 <HAL_TIM_MspPostInit+0x74>)
 8007224:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007226:	2202      	movs	r2, #2
 8007228:	4013      	ands	r3, r2
 800722a:	60bb      	str	r3, [r7, #8]
 800722c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = NEOPIXEL_Pin;
 800722e:	0021      	movs	r1, r4
 8007230:	187b      	adds	r3, r7, r1
 8007232:	2280      	movs	r2, #128	@ 0x80
 8007234:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007236:	187b      	adds	r3, r7, r1
 8007238:	2202      	movs	r2, #2
 800723a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800723c:	187b      	adds	r3, r7, r1
 800723e:	2200      	movs	r2, #0
 8007240:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007242:	187b      	adds	r3, r7, r1
 8007244:	2200      	movs	r2, #0
 8007246:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM4;
 8007248:	187b      	adds	r3, r7, r1
 800724a:	2209      	movs	r2, #9
 800724c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(NEOPIXEL_GPIO_Port, &GPIO_InitStruct);
 800724e:	187b      	adds	r3, r7, r1
 8007250:	4a06      	ldr	r2, [pc, #24]	@ (800726c <HAL_TIM_MspPostInit+0x78>)
 8007252:	0019      	movs	r1, r3
 8007254:	0010      	movs	r0, r2
 8007256:	f000 fccf 	bl	8007bf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	46bd      	mov	sp, r7
 800725e:	b009      	add	sp, #36	@ 0x24
 8007260:	bd90      	pop	{r4, r7, pc}
 8007262:	46c0      	nop			@ (mov r8, r8)
 8007264:	40000800 	.word	0x40000800
 8007268:	40021000 	.word	0x40021000
 800726c:	50000400 	.word	0x50000400

08007270 <__NVIC_EnableIRQ>:
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b082      	sub	sp, #8
 8007274:	af00      	add	r7, sp, #0
 8007276:	0002      	movs	r2, r0
 8007278:	1dfb      	adds	r3, r7, #7
 800727a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800727c:	1dfb      	adds	r3, r7, #7
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	2b7f      	cmp	r3, #127	@ 0x7f
 8007282:	d809      	bhi.n	8007298 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007284:	1dfb      	adds	r3, r7, #7
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	001a      	movs	r2, r3
 800728a:	231f      	movs	r3, #31
 800728c:	401a      	ands	r2, r3
 800728e:	4b04      	ldr	r3, [pc, #16]	@ (80072a0 <__NVIC_EnableIRQ+0x30>)
 8007290:	2101      	movs	r1, #1
 8007292:	4091      	lsls	r1, r2
 8007294:	000a      	movs	r2, r1
 8007296:	601a      	str	r2, [r3, #0]
}
 8007298:	46c0      	nop			@ (mov r8, r8)
 800729a:	46bd      	mov	sp, r7
 800729c:	b002      	add	sp, #8
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	e000e100 	.word	0xe000e100

080072a4 <__NVIC_SetPriority>:
{
 80072a4:	b590      	push	{r4, r7, lr}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	0002      	movs	r2, r0
 80072ac:	6039      	str	r1, [r7, #0]
 80072ae:	1dfb      	adds	r3, r7, #7
 80072b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80072b2:	1dfb      	adds	r3, r7, #7
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80072b8:	d828      	bhi.n	800730c <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072ba:	4a2f      	ldr	r2, [pc, #188]	@ (8007378 <__NVIC_SetPriority+0xd4>)
 80072bc:	1dfb      	adds	r3, r7, #7
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	b25b      	sxtb	r3, r3
 80072c2:	089b      	lsrs	r3, r3, #2
 80072c4:	33c0      	adds	r3, #192	@ 0xc0
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	589b      	ldr	r3, [r3, r2]
 80072ca:	1dfa      	adds	r2, r7, #7
 80072cc:	7812      	ldrb	r2, [r2, #0]
 80072ce:	0011      	movs	r1, r2
 80072d0:	2203      	movs	r2, #3
 80072d2:	400a      	ands	r2, r1
 80072d4:	00d2      	lsls	r2, r2, #3
 80072d6:	21ff      	movs	r1, #255	@ 0xff
 80072d8:	4091      	lsls	r1, r2
 80072da:	000a      	movs	r2, r1
 80072dc:	43d2      	mvns	r2, r2
 80072de:	401a      	ands	r2, r3
 80072e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	019b      	lsls	r3, r3, #6
 80072e6:	22ff      	movs	r2, #255	@ 0xff
 80072e8:	401a      	ands	r2, r3
 80072ea:	1dfb      	adds	r3, r7, #7
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	0018      	movs	r0, r3
 80072f0:	2303      	movs	r3, #3
 80072f2:	4003      	ands	r3, r0
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80072f8:	481f      	ldr	r0, [pc, #124]	@ (8007378 <__NVIC_SetPriority+0xd4>)
 80072fa:	1dfb      	adds	r3, r7, #7
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	b25b      	sxtb	r3, r3
 8007300:	089b      	lsrs	r3, r3, #2
 8007302:	430a      	orrs	r2, r1
 8007304:	33c0      	adds	r3, #192	@ 0xc0
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	501a      	str	r2, [r3, r0]
}
 800730a:	e031      	b.n	8007370 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800730c:	4a1b      	ldr	r2, [pc, #108]	@ (800737c <__NVIC_SetPriority+0xd8>)
 800730e:	1dfb      	adds	r3, r7, #7
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	0019      	movs	r1, r3
 8007314:	230f      	movs	r3, #15
 8007316:	400b      	ands	r3, r1
 8007318:	3b08      	subs	r3, #8
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	3306      	adds	r3, #6
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	18d3      	adds	r3, r2, r3
 8007322:	3304      	adds	r3, #4
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	1dfa      	adds	r2, r7, #7
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	0011      	movs	r1, r2
 800732c:	2203      	movs	r2, #3
 800732e:	400a      	ands	r2, r1
 8007330:	00d2      	lsls	r2, r2, #3
 8007332:	21ff      	movs	r1, #255	@ 0xff
 8007334:	4091      	lsls	r1, r2
 8007336:	000a      	movs	r2, r1
 8007338:	43d2      	mvns	r2, r2
 800733a:	401a      	ands	r2, r3
 800733c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	019b      	lsls	r3, r3, #6
 8007342:	22ff      	movs	r2, #255	@ 0xff
 8007344:	401a      	ands	r2, r3
 8007346:	1dfb      	adds	r3, r7, #7
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	0018      	movs	r0, r3
 800734c:	2303      	movs	r3, #3
 800734e:	4003      	ands	r3, r0
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007354:	4809      	ldr	r0, [pc, #36]	@ (800737c <__NVIC_SetPriority+0xd8>)
 8007356:	1dfb      	adds	r3, r7, #7
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	001c      	movs	r4, r3
 800735c:	230f      	movs	r3, #15
 800735e:	4023      	ands	r3, r4
 8007360:	3b08      	subs	r3, #8
 8007362:	089b      	lsrs	r3, r3, #2
 8007364:	430a      	orrs	r2, r1
 8007366:	3306      	adds	r3, #6
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	18c3      	adds	r3, r0, r3
 800736c:	3304      	adds	r3, #4
 800736e:	601a      	str	r2, [r3, #0]
}
 8007370:	46c0      	nop			@ (mov r8, r8)
 8007372:	46bd      	mov	sp, r7
 8007374:	b003      	add	sp, #12
 8007376:	bd90      	pop	{r4, r7, pc}
 8007378:	e000e100 	.word	0xe000e100
 800737c:	e000ed00 	.word	0xe000ed00

08007380 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b086      	sub	sp, #24
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8007390:	4a0c      	ldr	r2, [pc, #48]	@ (80073c4 <LL_DMA_SetDataTransferDirection+0x44>)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	18d3      	adds	r3, r2, r3
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	001a      	movs	r2, r3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	18d3      	adds	r3, r2, r3
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a09      	ldr	r2, [pc, #36]	@ (80073c8 <LL_DMA_SetDataTransferDirection+0x48>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	0019      	movs	r1, r3
 80073a6:	4a07      	ldr	r2, [pc, #28]	@ (80073c4 <LL_DMA_SetDataTransferDirection+0x44>)
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	18d3      	adds	r3, r2, r3
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	001a      	movs	r2, r3
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	18d3      	adds	r3, r2, r3
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	430a      	orrs	r2, r1
 80073b8:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80073ba:	46c0      	nop			@ (mov r8, r8)
 80073bc:	46bd      	mov	sp, r7
 80073be:	b006      	add	sp, #24
 80073c0:	bd80      	pop	{r7, pc}
 80073c2:	46c0      	nop			@ (mov r8, r8)
 80073c4:	08016800 	.word	0x08016800
 80073c8:	ffffbfef 	.word	0xffffbfef

080073cc <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	60f8      	str	r0, [r7, #12]
 80073d4:	60b9      	str	r1, [r7, #8]
 80073d6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 80073dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007410 <LL_DMA_SetMode+0x44>)
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	18d3      	adds	r3, r2, r3
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	001a      	movs	r2, r3
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	18d3      	adds	r3, r2, r3
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	2220      	movs	r2, #32
 80073ee:	4393      	bics	r3, r2
 80073f0:	0019      	movs	r1, r3
 80073f2:	4a07      	ldr	r2, [pc, #28]	@ (8007410 <LL_DMA_SetMode+0x44>)
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	18d3      	adds	r3, r2, r3
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	001a      	movs	r2, r3
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	18d3      	adds	r3, r2, r3
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	430a      	orrs	r2, r1
 8007404:	601a      	str	r2, [r3, #0]
             Mode);
}
 8007406:	46c0      	nop			@ (mov r8, r8)
 8007408:	46bd      	mov	sp, r7
 800740a:	b006      	add	sp, #24
 800740c:	bd80      	pop	{r7, pc}
 800740e:	46c0      	nop			@ (mov r8, r8)
 8007410:	08016800 	.word	0x08016800

08007414 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b086      	sub	sp, #24
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8007424:	4a0c      	ldr	r2, [pc, #48]	@ (8007458 <LL_DMA_SetPeriphIncMode+0x44>)
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	18d3      	adds	r3, r2, r3
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	001a      	movs	r2, r3
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	18d3      	adds	r3, r2, r3
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2240      	movs	r2, #64	@ 0x40
 8007436:	4393      	bics	r3, r2
 8007438:	0019      	movs	r1, r3
 800743a:	4a07      	ldr	r2, [pc, #28]	@ (8007458 <LL_DMA_SetPeriphIncMode+0x44>)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	18d3      	adds	r3, r2, r3
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	001a      	movs	r2, r3
 8007444:	697b      	ldr	r3, [r7, #20]
 8007446:	18d3      	adds	r3, r2, r3
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	430a      	orrs	r2, r1
 800744c:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 800744e:	46c0      	nop			@ (mov r8, r8)
 8007450:	46bd      	mov	sp, r7
 8007452:	b006      	add	sp, #24
 8007454:	bd80      	pop	{r7, pc}
 8007456:	46c0      	nop			@ (mov r8, r8)
 8007458:	08016800 	.word	0x08016800

0800745c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 800746c:	4a0c      	ldr	r2, [pc, #48]	@ (80074a0 <LL_DMA_SetMemoryIncMode+0x44>)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	18d3      	adds	r3, r2, r3
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	001a      	movs	r2, r3
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	18d3      	adds	r3, r2, r3
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	2280      	movs	r2, #128	@ 0x80
 800747e:	4393      	bics	r3, r2
 8007480:	0019      	movs	r1, r3
 8007482:	4a07      	ldr	r2, [pc, #28]	@ (80074a0 <LL_DMA_SetMemoryIncMode+0x44>)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	18d3      	adds	r3, r2, r3
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	001a      	movs	r2, r3
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	18d3      	adds	r3, r2, r3
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	430a      	orrs	r2, r1
 8007494:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8007496:	46c0      	nop			@ (mov r8, r8)
 8007498:	46bd      	mov	sp, r7
 800749a:	b006      	add	sp, #24
 800749c:	bd80      	pop	{r7, pc}
 800749e:	46c0      	nop			@ (mov r8, r8)
 80074a0:	08016800 	.word	0x08016800

080074a4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b086      	sub	sp, #24
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 80074b4:	4a0c      	ldr	r2, [pc, #48]	@ (80074e8 <LL_DMA_SetPeriphSize+0x44>)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	18d3      	adds	r3, r2, r3
 80074ba:	781b      	ldrb	r3, [r3, #0]
 80074bc:	001a      	movs	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	18d3      	adds	r3, r2, r3
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a09      	ldr	r2, [pc, #36]	@ (80074ec <LL_DMA_SetPeriphSize+0x48>)
 80074c6:	4013      	ands	r3, r2
 80074c8:	0019      	movs	r1, r3
 80074ca:	4a07      	ldr	r2, [pc, #28]	@ (80074e8 <LL_DMA_SetPeriphSize+0x44>)
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	18d3      	adds	r3, r2, r3
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	001a      	movs	r2, r3
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	18d3      	adds	r3, r2, r3
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	430a      	orrs	r2, r1
 80074dc:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80074de:	46c0      	nop			@ (mov r8, r8)
 80074e0:	46bd      	mov	sp, r7
 80074e2:	b006      	add	sp, #24
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	08016800 	.word	0x08016800
 80074ec:	fffffcff 	.word	0xfffffcff

080074f0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8007500:	4a0c      	ldr	r2, [pc, #48]	@ (8007534 <LL_DMA_SetMemorySize+0x44>)
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	18d3      	adds	r3, r2, r3
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	001a      	movs	r2, r3
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	18d3      	adds	r3, r2, r3
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a09      	ldr	r2, [pc, #36]	@ (8007538 <LL_DMA_SetMemorySize+0x48>)
 8007512:	4013      	ands	r3, r2
 8007514:	0019      	movs	r1, r3
 8007516:	4a07      	ldr	r2, [pc, #28]	@ (8007534 <LL_DMA_SetMemorySize+0x44>)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	18d3      	adds	r3, r2, r3
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	001a      	movs	r2, r3
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	18d3      	adds	r3, r2, r3
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	430a      	orrs	r2, r1
 8007528:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 800752a:	46c0      	nop			@ (mov r8, r8)
 800752c:	46bd      	mov	sp, r7
 800752e:	b006      	add	sp, #24
 8007530:	bd80      	pop	{r7, pc}
 8007532:	46c0      	nop			@ (mov r8, r8)
 8007534:	08016800 	.word	0x08016800
 8007538:	fffff3ff 	.word	0xfffff3ff

0800753c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b086      	sub	sp, #24
 8007540:	af00      	add	r7, sp, #0
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 800754c:	4a0c      	ldr	r2, [pc, #48]	@ (8007580 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	18d3      	adds	r3, r2, r3
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	001a      	movs	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	18d3      	adds	r3, r2, r3
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a09      	ldr	r2, [pc, #36]	@ (8007584 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800755e:	4013      	ands	r3, r2
 8007560:	0019      	movs	r1, r3
 8007562:	4a07      	ldr	r2, [pc, #28]	@ (8007580 <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	18d3      	adds	r3, r2, r3
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	001a      	movs	r2, r3
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	18d3      	adds	r3, r2, r3
 8007570:	687a      	ldr	r2, [r7, #4]
 8007572:	430a      	orrs	r2, r1
 8007574:	601a      	str	r2, [r3, #0]
             Priority);
}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	46bd      	mov	sp, r7
 800757a:	b006      	add	sp, #24
 800757c:	bd80      	pop	{r7, pc}
 800757e:	46c0      	nop			@ (mov r8, r8)
 8007580:	08016800 	.word	0x08016800
 8007584:	ffffcfff 	.word	0xffffcfff

08007588 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	0a9b      	lsrs	r3, r3, #10
 8007598:	4a0f      	ldr	r2, [pc, #60]	@ (80075d8 <LL_DMA_SetPeriphRequest+0x50>)
 800759a:	405a      	eors	r2, r3
 800759c:	0013      	movs	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	1a9b      	subs	r3, r3, r2
 80075a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	18d3      	adds	r3, r2, r3
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4a0b      	ldr	r2, [pc, #44]	@ (80075dc <LL_DMA_SetPeriphRequest+0x54>)
 80075ae:	4694      	mov	ip, r2
 80075b0:	4463      	add	r3, ip
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	227f      	movs	r2, #127	@ 0x7f
 80075b6:	4393      	bics	r3, r2
 80075b8:	0019      	movs	r1, r3
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	18d3      	adds	r3, r2, r3
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	4a06      	ldr	r2, [pc, #24]	@ (80075dc <LL_DMA_SetPeriphRequest+0x54>)
 80075c4:	4694      	mov	ip, r2
 80075c6:	4463      	add	r3, ip
 80075c8:	687a      	ldr	r2, [r7, #4]
 80075ca:	430a      	orrs	r2, r1
 80075cc:	601a      	str	r2, [r3, #0]
}
 80075ce:	46c0      	nop			@ (mov r8, r8)
 80075d0:	46bd      	mov	sp, r7
 80075d2:	b006      	add	sp, #24
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	46c0      	nop			@ (mov r8, r8)
 80075d8:	00100080 	.word	0x00100080
 80075dc:	40020800 	.word	0x40020800

080075e0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80075e8:	4b07      	ldr	r3, [pc, #28]	@ (8007608 <LL_APB1_GRP1_EnableClock+0x28>)
 80075ea:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80075ec:	4b06      	ldr	r3, [pc, #24]	@ (8007608 <LL_APB1_GRP1_EnableClock+0x28>)
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	430a      	orrs	r2, r1
 80075f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80075f4:	4b04      	ldr	r3, [pc, #16]	@ (8007608 <LL_APB1_GRP1_EnableClock+0x28>)
 80075f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	4013      	ands	r3, r2
 80075fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	46c0      	nop			@ (mov r8, r8)
 8007602:	46bd      	mov	sp, r7
 8007604:	b004      	add	sp, #16
 8007606:	bd80      	pop	{r7, pc}
 8007608:	40021000 	.word	0x40021000

0800760c <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8007614:	4b07      	ldr	r3, [pc, #28]	@ (8007634 <LL_IOP_GRP1_EnableClock+0x28>)
 8007616:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007618:	4b06      	ldr	r3, [pc, #24]	@ (8007634 <LL_IOP_GRP1_EnableClock+0x28>)
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	430a      	orrs	r2, r1
 800761e:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8007620:	4b04      	ldr	r3, [pc, #16]	@ (8007634 <LL_IOP_GRP1_EnableClock+0x28>)
 8007622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	4013      	ands	r3, r2
 8007628:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800762a:	68fb      	ldr	r3, [r7, #12]
}
 800762c:	46c0      	nop			@ (mov r8, r8)
 800762e:	46bd      	mov	sp, r7
 8007630:	b004      	add	sp, #16
 8007632:	bd80      	pop	{r7, pc}
 8007634:	40021000 	.word	0x40021000

08007638 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800763e:	003b      	movs	r3, r7
 8007640:	0018      	movs	r0, r3
 8007642:	2318      	movs	r3, #24
 8007644:	001a      	movs	r2, r3
 8007646:	2100      	movs	r1, #0
 8007648:	f00e ffba 	bl	80165c0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800764c:	2380      	movs	r3, #128	@ 0x80
 800764e:	049b      	lsls	r3, r3, #18
 8007650:	0018      	movs	r0, r3
 8007652:	f7ff ffc5 	bl	80075e0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8007656:	2002      	movs	r0, #2
 8007658:	f7ff ffd8 	bl	800760c <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 800765c:	2001      	movs	r0, #1
 800765e:	f7ff ffd5 	bl	800760c <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8007662:	003b      	movs	r3, r7
 8007664:	2280      	movs	r2, #128	@ 0x80
 8007666:	0212      	lsls	r2, r2, #8
 8007668:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800766a:	003b      	movs	r3, r7
 800766c:	2203      	movs	r2, #3
 800766e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007670:	003b      	movs	r3, r7
 8007672:	2200      	movs	r2, #0
 8007674:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007676:	003b      	movs	r3, r7
 8007678:	4a40      	ldr	r2, [pc, #256]	@ (800777c <MX_UCPD1_Init+0x144>)
 800767a:	0019      	movs	r1, r3
 800767c:	0010      	movs	r0, r2
 800767e:	f004 fabd 	bl	800bbfc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8007682:	003b      	movs	r3, r7
 8007684:	2280      	movs	r2, #128	@ 0x80
 8007686:	0052      	lsls	r2, r2, #1
 8007688:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800768a:	003b      	movs	r3, r7
 800768c:	2203      	movs	r2, #3
 800768e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007690:	003b      	movs	r3, r7
 8007692:	2200      	movs	r2, #0
 8007694:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007696:	003a      	movs	r2, r7
 8007698:	23a0      	movs	r3, #160	@ 0xa0
 800769a:	05db      	lsls	r3, r3, #23
 800769c:	0011      	movs	r1, r2
 800769e:	0018      	movs	r0, r3
 80076a0:	f004 faac 	bl	800bbfc <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 80076a4:	4b36      	ldr	r3, [pc, #216]	@ (8007780 <MX_UCPD1_Init+0x148>)
 80076a6:	223a      	movs	r2, #58	@ 0x3a
 80076a8:	2100      	movs	r1, #0
 80076aa:	0018      	movs	r0, r3
 80076ac:	f7ff ff6c 	bl	8007588 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80076b0:	4b33      	ldr	r3, [pc, #204]	@ (8007780 <MX_UCPD1_Init+0x148>)
 80076b2:	2200      	movs	r2, #0
 80076b4:	2100      	movs	r1, #0
 80076b6:	0018      	movs	r0, r3
 80076b8:	f7ff fe62 	bl	8007380 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80076bc:	4b30      	ldr	r3, [pc, #192]	@ (8007780 <MX_UCPD1_Init+0x148>)
 80076be:	2200      	movs	r2, #0
 80076c0:	2100      	movs	r1, #0
 80076c2:	0018      	movs	r0, r3
 80076c4:	f7ff ff3a 	bl	800753c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80076c8:	4b2d      	ldr	r3, [pc, #180]	@ (8007780 <MX_UCPD1_Init+0x148>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	2100      	movs	r1, #0
 80076ce:	0018      	movs	r0, r3
 80076d0:	f7ff fe7c 	bl	80073cc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80076d4:	4b2a      	ldr	r3, [pc, #168]	@ (8007780 <MX_UCPD1_Init+0x148>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	2100      	movs	r1, #0
 80076da:	0018      	movs	r0, r3
 80076dc:	f7ff fe9a 	bl	8007414 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80076e0:	4b27      	ldr	r3, [pc, #156]	@ (8007780 <MX_UCPD1_Init+0x148>)
 80076e2:	2280      	movs	r2, #128	@ 0x80
 80076e4:	2100      	movs	r1, #0
 80076e6:	0018      	movs	r0, r3
 80076e8:	f7ff feb8 	bl	800745c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80076ec:	4b24      	ldr	r3, [pc, #144]	@ (8007780 <MX_UCPD1_Init+0x148>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	2100      	movs	r1, #0
 80076f2:	0018      	movs	r0, r3
 80076f4:	f7ff fed6 	bl	80074a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80076f8:	4b21      	ldr	r3, [pc, #132]	@ (8007780 <MX_UCPD1_Init+0x148>)
 80076fa:	2200      	movs	r2, #0
 80076fc:	2100      	movs	r1, #0
 80076fe:	0018      	movs	r0, r3
 8007700:	f7ff fef6 	bl	80074f0 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8007704:	4b1e      	ldr	r3, [pc, #120]	@ (8007780 <MX_UCPD1_Init+0x148>)
 8007706:	223b      	movs	r2, #59	@ 0x3b
 8007708:	2101      	movs	r1, #1
 800770a:	0018      	movs	r0, r3
 800770c:	f7ff ff3c 	bl	8007588 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007710:	4b1b      	ldr	r3, [pc, #108]	@ (8007780 <MX_UCPD1_Init+0x148>)
 8007712:	2210      	movs	r2, #16
 8007714:	2101      	movs	r1, #1
 8007716:	0018      	movs	r0, r3
 8007718:	f7ff fe32 	bl	8007380 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 800771c:	4b18      	ldr	r3, [pc, #96]	@ (8007780 <MX_UCPD1_Init+0x148>)
 800771e:	2200      	movs	r2, #0
 8007720:	2101      	movs	r1, #1
 8007722:	0018      	movs	r0, r3
 8007724:	f7ff ff0a 	bl	800753c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8007728:	4b15      	ldr	r3, [pc, #84]	@ (8007780 <MX_UCPD1_Init+0x148>)
 800772a:	2200      	movs	r2, #0
 800772c:	2101      	movs	r1, #1
 800772e:	0018      	movs	r0, r3
 8007730:	f7ff fe4c 	bl	80073cc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8007734:	4b12      	ldr	r3, [pc, #72]	@ (8007780 <MX_UCPD1_Init+0x148>)
 8007736:	2200      	movs	r2, #0
 8007738:	2101      	movs	r1, #1
 800773a:	0018      	movs	r0, r3
 800773c:	f7ff fe6a 	bl	8007414 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8007740:	4b0f      	ldr	r3, [pc, #60]	@ (8007780 <MX_UCPD1_Init+0x148>)
 8007742:	2280      	movs	r2, #128	@ 0x80
 8007744:	2101      	movs	r1, #1
 8007746:	0018      	movs	r0, r3
 8007748:	f7ff fe88 	bl	800745c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 800774c:	4b0c      	ldr	r3, [pc, #48]	@ (8007780 <MX_UCPD1_Init+0x148>)
 800774e:	2200      	movs	r2, #0
 8007750:	2101      	movs	r1, #1
 8007752:	0018      	movs	r0, r3
 8007754:	f7ff fea6 	bl	80074a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8007758:	4b09      	ldr	r3, [pc, #36]	@ (8007780 <MX_UCPD1_Init+0x148>)
 800775a:	2200      	movs	r2, #0
 800775c:	2101      	movs	r1, #1
 800775e:	0018      	movs	r0, r3
 8007760:	f7ff fec6 	bl	80074f0 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 8007764:	2100      	movs	r1, #0
 8007766:	2008      	movs	r0, #8
 8007768:	f7ff fd9c 	bl	80072a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 800776c:	2008      	movs	r0, #8
 800776e:	f7ff fd7f 	bl	8007270 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8007772:	46c0      	nop			@ (mov r8, r8)
 8007774:	46bd      	mov	sp, r7
 8007776:	b006      	add	sp, #24
 8007778:	bd80      	pop	{r7, pc}
 800777a:	46c0      	nop			@ (mov r8, r8)
 800777c:	50000400 	.word	0x50000400
 8007780:	40020000 	.word	0x40020000

08007784 <MX_UCPD2_Init>:
/* UCPD2 init function */
void MX_UCPD2_Init(void)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD2_Init 0 */

  /* USER CODE END UCPD2_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800778a:	003b      	movs	r3, r7
 800778c:	0018      	movs	r0, r3
 800778e:	2318      	movs	r3, #24
 8007790:	001a      	movs	r2, r3
 8007792:	2100      	movs	r1, #0
 8007794:	f00e ff14 	bl	80165c0 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8007798:	2380      	movs	r3, #128	@ 0x80
 800779a:	04db      	lsls	r3, r3, #19
 800779c:	0018      	movs	r0, r3
 800779e:	f7ff ff1f 	bl	80075e0 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 80077a2:	2008      	movs	r0, #8
 80077a4:	f7ff ff32 	bl	800760c <LL_IOP_GRP1_EnableClock>
  /**UCPD2 GPIO Configuration
  PD0   ------> UCPD2_CC1
  PD2   ------> UCPD2_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80077a8:	003b      	movs	r3, r7
 80077aa:	2201      	movs	r2, #1
 80077ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80077ae:	003b      	movs	r3, r7
 80077b0:	2203      	movs	r2, #3
 80077b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077b4:	003b      	movs	r3, r7
 80077b6:	2200      	movs	r2, #0
 80077b8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077ba:	003b      	movs	r3, r7
 80077bc:	4a3f      	ldr	r2, [pc, #252]	@ (80078bc <MX_UCPD2_Init+0x138>)
 80077be:	0019      	movs	r1, r3
 80077c0:	0010      	movs	r0, r2
 80077c2:	f004 fa1b 	bl	800bbfc <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80077c6:	003b      	movs	r3, r7
 80077c8:	2204      	movs	r2, #4
 80077ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80077cc:	003b      	movs	r3, r7
 80077ce:	2203      	movs	r2, #3
 80077d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80077d2:	003b      	movs	r3, r7
 80077d4:	2200      	movs	r2, #0
 80077d6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80077d8:	003b      	movs	r3, r7
 80077da:	4a38      	ldr	r2, [pc, #224]	@ (80078bc <MX_UCPD2_Init+0x138>)
 80077dc:	0019      	movs	r1, r3
 80077de:	0010      	movs	r0, r2
 80077e0:	f004 fa0c 	bl	800bbfc <LL_GPIO_Init>

  /* UCPD2 DMA Init */

  /* UCPD2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD2_RX);
 80077e4:	4b36      	ldr	r3, [pc, #216]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 80077e6:	223c      	movs	r2, #60	@ 0x3c
 80077e8:	2102      	movs	r1, #2
 80077ea:	0018      	movs	r0, r3
 80077ec:	f7ff fecc 	bl	8007588 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80077f0:	4b33      	ldr	r3, [pc, #204]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	2102      	movs	r1, #2
 80077f6:	0018      	movs	r0, r3
 80077f8:	f7ff fdc2 	bl	8007380 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 80077fc:	4b30      	ldr	r3, [pc, #192]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 80077fe:	2200      	movs	r2, #0
 8007800:	2102      	movs	r1, #2
 8007802:	0018      	movs	r0, r3
 8007804:	f7ff fe9a 	bl	800753c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8007808:	4b2d      	ldr	r3, [pc, #180]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 800780a:	2200      	movs	r2, #0
 800780c:	2102      	movs	r1, #2
 800780e:	0018      	movs	r0, r3
 8007810:	f7ff fddc 	bl	80073cc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8007814:	4b2a      	ldr	r3, [pc, #168]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 8007816:	2200      	movs	r2, #0
 8007818:	2102      	movs	r1, #2
 800781a:	0018      	movs	r0, r3
 800781c:	f7ff fdfa 	bl	8007414 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 8007820:	4b27      	ldr	r3, [pc, #156]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 8007822:	2280      	movs	r2, #128	@ 0x80
 8007824:	2102      	movs	r1, #2
 8007826:	0018      	movs	r0, r3
 8007828:	f7ff fe18 	bl	800745c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 800782c:	4b24      	ldr	r3, [pc, #144]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 800782e:	2200      	movs	r2, #0
 8007830:	2102      	movs	r1, #2
 8007832:	0018      	movs	r0, r3
 8007834:	f7ff fe36 	bl	80074a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8007838:	4b21      	ldr	r3, [pc, #132]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 800783a:	2200      	movs	r2, #0
 800783c:	2102      	movs	r1, #2
 800783e:	0018      	movs	r0, r3
 8007840:	f7ff fe56 	bl	80074f0 <LL_DMA_SetMemorySize>

  /* UCPD2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD2_TX);
 8007844:	4b1e      	ldr	r3, [pc, #120]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 8007846:	223d      	movs	r2, #61	@ 0x3d
 8007848:	2103      	movs	r1, #3
 800784a:	0018      	movs	r0, r3
 800784c:	f7ff fe9c 	bl	8007588 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007850:	4b1b      	ldr	r3, [pc, #108]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 8007852:	2210      	movs	r2, #16
 8007854:	2103      	movs	r1, #3
 8007856:	0018      	movs	r0, r3
 8007858:	f7ff fd92 	bl	8007380 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 800785c:	4b18      	ldr	r3, [pc, #96]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 800785e:	2200      	movs	r2, #0
 8007860:	2103      	movs	r1, #3
 8007862:	0018      	movs	r0, r3
 8007864:	f7ff fe6a 	bl	800753c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8007868:	4b15      	ldr	r3, [pc, #84]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 800786a:	2200      	movs	r2, #0
 800786c:	2103      	movs	r1, #3
 800786e:	0018      	movs	r0, r3
 8007870:	f7ff fdac 	bl	80073cc <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8007874:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 8007876:	2200      	movs	r2, #0
 8007878:	2103      	movs	r1, #3
 800787a:	0018      	movs	r0, r3
 800787c:	f7ff fdca 	bl	8007414 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8007880:	4b0f      	ldr	r3, [pc, #60]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 8007882:	2280      	movs	r2, #128	@ 0x80
 8007884:	2103      	movs	r1, #3
 8007886:	0018      	movs	r0, r3
 8007888:	f7ff fde8 	bl	800745c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 800788c:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 800788e:	2200      	movs	r2, #0
 8007890:	2103      	movs	r1, #3
 8007892:	0018      	movs	r0, r3
 8007894:	f7ff fe06 	bl	80074a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8007898:	4b09      	ldr	r3, [pc, #36]	@ (80078c0 <MX_UCPD2_Init+0x13c>)
 800789a:	2200      	movs	r2, #0
 800789c:	2103      	movs	r1, #3
 800789e:	0018      	movs	r0, r3
 80078a0:	f7ff fe26 	bl	80074f0 <LL_DMA_SetMemorySize>

  /* UCPD2 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 80078a4:	2100      	movs	r1, #0
 80078a6:	2008      	movs	r0, #8
 80078a8:	f7ff fcfc 	bl	80072a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80078ac:	2008      	movs	r0, #8
 80078ae:	f7ff fcdf 	bl	8007270 <__NVIC_EnableIRQ>
  /* USER CODE END UCPD2_Init 1 */
  /* USER CODE BEGIN UCPD2_Init 2 */

  /* USER CODE END UCPD2_Init 2 */

}
 80078b2:	46c0      	nop			@ (mov r8, r8)
 80078b4:	46bd      	mov	sp, r7
 80078b6:	b006      	add	sp, #24
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	46c0      	nop			@ (mov r8, r8)
 80078bc:	50000c00 	.word	0x50000c00
 80078c0:	40020000 	.word	0x40020000

080078c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80078c4:	480d      	ldr	r0, [pc, #52]	@ (80078fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80078c6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80078c8:	f7ff fb60 	bl	8006f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80078cc:	480c      	ldr	r0, [pc, #48]	@ (8007900 <LoopForever+0x6>)
  ldr r1, =_edata
 80078ce:	490d      	ldr	r1, [pc, #52]	@ (8007904 <LoopForever+0xa>)
  ldr r2, =_sidata
 80078d0:	4a0d      	ldr	r2, [pc, #52]	@ (8007908 <LoopForever+0xe>)
  movs r3, #0
 80078d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80078d4:	e002      	b.n	80078dc <LoopCopyDataInit>

080078d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80078d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80078d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80078da:	3304      	adds	r3, #4

080078dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80078dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80078de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80078e0:	d3f9      	bcc.n	80078d6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80078e2:	4a0a      	ldr	r2, [pc, #40]	@ (800790c <LoopForever+0x12>)
  ldr r4, =_ebss
 80078e4:	4c0a      	ldr	r4, [pc, #40]	@ (8007910 <LoopForever+0x16>)
  movs r3, #0
 80078e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80078e8:	e001      	b.n	80078ee <LoopFillZerobss>

080078ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80078ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80078ec:	3204      	adds	r2, #4

080078ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80078ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80078f0:	d3fb      	bcc.n	80078ea <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80078f2:	f00e fe85 	bl	8016600 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80078f6:	f7ff f965 	bl	8006bc4 <main>

080078fa <LoopForever>:

LoopForever:
  b LoopForever
 80078fa:	e7fe      	b.n	80078fa <LoopForever>
  ldr   r0, =_estack
 80078fc:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8007900:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007904:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8007908:	0801699c 	.word	0x0801699c
  ldr r2, =_sbss
 800790c:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8007910:	2000b200 	.word	0x2000b200

08007914 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007914:	e7fe      	b.n	8007914 <ADC1_COMP_IRQHandler>
	...

08007918 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800791e:	1dfb      	adds	r3, r7, #7
 8007920:	2200      	movs	r2, #0
 8007922:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007924:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <HAL_Init+0x3c>)
 8007926:	681a      	ldr	r2, [r3, #0]
 8007928:	4b0a      	ldr	r3, [pc, #40]	@ (8007954 <HAL_Init+0x3c>)
 800792a:	2180      	movs	r1, #128	@ 0x80
 800792c:	0049      	lsls	r1, r1, #1
 800792e:	430a      	orrs	r2, r1
 8007930:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007932:	2003      	movs	r0, #3
 8007934:	f7ff fa3c 	bl	8006db0 <HAL_InitTick>
 8007938:	1e03      	subs	r3, r0, #0
 800793a:	d003      	beq.n	8007944 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800793c:	1dfb      	adds	r3, r7, #7
 800793e:	2201      	movs	r2, #1
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e001      	b.n	8007948 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8007944:	f7ff fa04 	bl	8006d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007948:	1dfb      	adds	r3, r7, #7
 800794a:	781b      	ldrb	r3, [r3, #0]
}
 800794c:	0018      	movs	r0, r3
 800794e:	46bd      	mov	sp, r7
 8007950:	b002      	add	sp, #8
 8007952:	bd80      	pop	{r7, pc}
 8007954:	40022000 	.word	0x40022000

08007958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800795c:	4b05      	ldr	r3, [pc, #20]	@ (8007974 <HAL_IncTick+0x1c>)
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	001a      	movs	r2, r3
 8007962:	4b05      	ldr	r3, [pc, #20]	@ (8007978 <HAL_IncTick+0x20>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	18d2      	adds	r2, r2, r3
 8007968:	4b03      	ldr	r3, [pc, #12]	@ (8007978 <HAL_IncTick+0x20>)
 800796a:	601a      	str	r2, [r3, #0]
}
 800796c:	46c0      	nop			@ (mov r8, r8)
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	46c0      	nop			@ (mov r8, r8)
 8007974:	2000000c 	.word	0x2000000c
 8007978:	2000a6fc 	.word	0x2000a6fc

0800797c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	af00      	add	r7, sp, #0
  return uwTick;
 8007980:	4b02      	ldr	r3, [pc, #8]	@ (800798c <HAL_GetTick+0x10>)
 8007982:	681b      	ldr	r3, [r3, #0]
}
 8007984:	0018      	movs	r0, r3
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	46c0      	nop			@ (mov r8, r8)
 800798c:	2000a6fc 	.word	0x2000a6fc

08007990 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007998:	f7ff fff0 	bl	800797c <HAL_GetTick>
 800799c:	0003      	movs	r3, r0
 800799e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	3301      	adds	r3, #1
 80079a8:	d005      	beq.n	80079b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80079aa:	4b0a      	ldr	r3, [pc, #40]	@ (80079d4 <HAL_Delay+0x44>)
 80079ac:	781b      	ldrb	r3, [r3, #0]
 80079ae:	001a      	movs	r2, r3
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	189b      	adds	r3, r3, r2
 80079b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80079b6:	46c0      	nop			@ (mov r8, r8)
 80079b8:	f7ff ffe0 	bl	800797c <HAL_GetTick>
 80079bc:	0002      	movs	r2, r0
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d8f7      	bhi.n	80079b8 <HAL_Delay+0x28>
  {
  }
}
 80079c8:	46c0      	nop			@ (mov r8, r8)
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	46bd      	mov	sp, r7
 80079ce:	b004      	add	sp, #16
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	46c0      	nop			@ (mov r8, r8)
 80079d4:	2000000c 	.word	0x2000000c

080079d8 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *         This parameter can be one of the following values:
  *         @arg @ref SYSCFG_VREFBUF_VoltageScale
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80079e0:	4b06      	ldr	r3, [pc, #24]	@ (80079fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2204      	movs	r2, #4
 80079e6:	4393      	bics	r3, r2
 80079e8:	0019      	movs	r1, r3
 80079ea:	4b04      	ldr	r3, [pc, #16]	@ (80079fc <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80079ec:	687a      	ldr	r2, [r7, #4]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	601a      	str	r2, [r3, #0]
}
 80079f2:	46c0      	nop			@ (mov r8, r8)
 80079f4:	46bd      	mov	sp, r7
 80079f6:	b002      	add	sp, #8
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	46c0      	nop			@ (mov r8, r8)
 80079fc:	40010030 	.word	0x40010030

08007a00 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	4393      	bics	r3, r2
 8007a10:	0019      	movs	r1, r3
 8007a12:	4b04      	ldr	r3, [pc, #16]	@ (8007a24 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	601a      	str	r2, [r3, #0]
}
 8007a1a:	46c0      	nop			@ (mov r8, r8)
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	b002      	add	sp, #8
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	46c0      	nop			@ (mov r8, r8)
 8007a24:	40010030 	.word	0x40010030

08007a28 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8007a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8007a6c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	4b0e      	ldr	r3, [pc, #56]	@ (8007a6c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8007a34:	2101      	movs	r1, #1
 8007a36:	430a      	orrs	r2, r1
 8007a38:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007a3a:	f7ff ff9f 	bl	800797c <HAL_GetTick>
 8007a3e:	0003      	movs	r3, r0
 8007a40:	607b      	str	r3, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8007a42:	e008      	b.n	8007a56 <HAL_SYSCFG_EnableVREFBUF+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8007a44:	f7ff ff9a 	bl	800797c <HAL_GetTick>
 8007a48:	0002      	movs	r2, r0
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	1ad3      	subs	r3, r2, r3
 8007a4e:	2b0a      	cmp	r3, #10
 8007a50:	d901      	bls.n	8007a56 <HAL_SYSCFG_EnableVREFBUF+0x2e>
    {
      return HAL_TIMEOUT;
 8007a52:	2303      	movs	r3, #3
 8007a54:	e005      	b.n	8007a62 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8007a56:	4b05      	ldr	r3, [pc, #20]	@ (8007a6c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	2208      	movs	r2, #8
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	d0f1      	beq.n	8007a44 <HAL_SYSCFG_EnableVREFBUF+0x1c>
    }
  }

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	0018      	movs	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	b002      	add	sp, #8
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	46c0      	nop			@ (mov r8, r8)
 8007a6c:	40010030 	.word	0x40010030

08007a70 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8007a78:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a06      	ldr	r2, [pc, #24]	@ (8007a98 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8007a7e:	4013      	ands	r3, r2
 8007a80:	0019      	movs	r1, r3
 8007a82:	4b04      	ldr	r3, [pc, #16]	@ (8007a94 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	601a      	str	r2, [r3, #0]
}
 8007a8a:	46c0      	nop			@ (mov r8, r8)
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	b002      	add	sp, #8
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	40010000 	.word	0x40010000
 8007a98:	fffff9ff 	.word	0xfffff9ff

08007a9c <__NVIC_EnableIRQ>:
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	0002      	movs	r2, r0
 8007aa4:	1dfb      	adds	r3, r7, #7
 8007aa6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007aa8:	1dfb      	adds	r3, r7, #7
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b7f      	cmp	r3, #127	@ 0x7f
 8007aae:	d809      	bhi.n	8007ac4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ab0:	1dfb      	adds	r3, r7, #7
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	001a      	movs	r2, r3
 8007ab6:	231f      	movs	r3, #31
 8007ab8:	401a      	ands	r2, r3
 8007aba:	4b04      	ldr	r3, [pc, #16]	@ (8007acc <__NVIC_EnableIRQ+0x30>)
 8007abc:	2101      	movs	r1, #1
 8007abe:	4091      	lsls	r1, r2
 8007ac0:	000a      	movs	r2, r1
 8007ac2:	601a      	str	r2, [r3, #0]
}
 8007ac4:	46c0      	nop			@ (mov r8, r8)
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	b002      	add	sp, #8
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	e000e100 	.word	0xe000e100

08007ad0 <__NVIC_SetPriority>:
{
 8007ad0:	b590      	push	{r4, r7, lr}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	0002      	movs	r2, r0
 8007ad8:	6039      	str	r1, [r7, #0]
 8007ada:	1dfb      	adds	r3, r7, #7
 8007adc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007ade:	1dfb      	adds	r3, r7, #7
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ae4:	d828      	bhi.n	8007b38 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8007ba4 <__NVIC_SetPriority+0xd4>)
 8007ae8:	1dfb      	adds	r3, r7, #7
 8007aea:	781b      	ldrb	r3, [r3, #0]
 8007aec:	b25b      	sxtb	r3, r3
 8007aee:	089b      	lsrs	r3, r3, #2
 8007af0:	33c0      	adds	r3, #192	@ 0xc0
 8007af2:	009b      	lsls	r3, r3, #2
 8007af4:	589b      	ldr	r3, [r3, r2]
 8007af6:	1dfa      	adds	r2, r7, #7
 8007af8:	7812      	ldrb	r2, [r2, #0]
 8007afa:	0011      	movs	r1, r2
 8007afc:	2203      	movs	r2, #3
 8007afe:	400a      	ands	r2, r1
 8007b00:	00d2      	lsls	r2, r2, #3
 8007b02:	21ff      	movs	r1, #255	@ 0xff
 8007b04:	4091      	lsls	r1, r2
 8007b06:	000a      	movs	r2, r1
 8007b08:	43d2      	mvns	r2, r2
 8007b0a:	401a      	ands	r2, r3
 8007b0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	019b      	lsls	r3, r3, #6
 8007b12:	22ff      	movs	r2, #255	@ 0xff
 8007b14:	401a      	ands	r2, r3
 8007b16:	1dfb      	adds	r3, r7, #7
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	0018      	movs	r0, r3
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	4003      	ands	r3, r0
 8007b20:	00db      	lsls	r3, r3, #3
 8007b22:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b24:	481f      	ldr	r0, [pc, #124]	@ (8007ba4 <__NVIC_SetPriority+0xd4>)
 8007b26:	1dfb      	adds	r3, r7, #7
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	b25b      	sxtb	r3, r3
 8007b2c:	089b      	lsrs	r3, r3, #2
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	33c0      	adds	r3, #192	@ 0xc0
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	501a      	str	r2, [r3, r0]
}
 8007b36:	e031      	b.n	8007b9c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b38:	4a1b      	ldr	r2, [pc, #108]	@ (8007ba8 <__NVIC_SetPriority+0xd8>)
 8007b3a:	1dfb      	adds	r3, r7, #7
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	0019      	movs	r1, r3
 8007b40:	230f      	movs	r3, #15
 8007b42:	400b      	ands	r3, r1
 8007b44:	3b08      	subs	r3, #8
 8007b46:	089b      	lsrs	r3, r3, #2
 8007b48:	3306      	adds	r3, #6
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	18d3      	adds	r3, r2, r3
 8007b4e:	3304      	adds	r3, #4
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	1dfa      	adds	r2, r7, #7
 8007b54:	7812      	ldrb	r2, [r2, #0]
 8007b56:	0011      	movs	r1, r2
 8007b58:	2203      	movs	r2, #3
 8007b5a:	400a      	ands	r2, r1
 8007b5c:	00d2      	lsls	r2, r2, #3
 8007b5e:	21ff      	movs	r1, #255	@ 0xff
 8007b60:	4091      	lsls	r1, r2
 8007b62:	000a      	movs	r2, r1
 8007b64:	43d2      	mvns	r2, r2
 8007b66:	401a      	ands	r2, r3
 8007b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	019b      	lsls	r3, r3, #6
 8007b6e:	22ff      	movs	r2, #255	@ 0xff
 8007b70:	401a      	ands	r2, r3
 8007b72:	1dfb      	adds	r3, r7, #7
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	0018      	movs	r0, r3
 8007b78:	2303      	movs	r3, #3
 8007b7a:	4003      	ands	r3, r0
 8007b7c:	00db      	lsls	r3, r3, #3
 8007b7e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b80:	4809      	ldr	r0, [pc, #36]	@ (8007ba8 <__NVIC_SetPriority+0xd8>)
 8007b82:	1dfb      	adds	r3, r7, #7
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	001c      	movs	r4, r3
 8007b88:	230f      	movs	r3, #15
 8007b8a:	4023      	ands	r3, r4
 8007b8c:	3b08      	subs	r3, #8
 8007b8e:	089b      	lsrs	r3, r3, #2
 8007b90:	430a      	orrs	r2, r1
 8007b92:	3306      	adds	r3, #6
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	18c3      	adds	r3, r0, r3
 8007b98:	3304      	adds	r3, #4
 8007b9a:	601a      	str	r2, [r3, #0]
}
 8007b9c:	46c0      	nop			@ (mov r8, r8)
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	b003      	add	sp, #12
 8007ba2:	bd90      	pop	{r4, r7, pc}
 8007ba4:	e000e100 	.word	0xe000e100
 8007ba8:	e000ed00 	.word	0xe000ed00

08007bac <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60b9      	str	r1, [r7, #8]
 8007bb4:	607a      	str	r2, [r7, #4]
 8007bb6:	210f      	movs	r1, #15
 8007bb8:	187b      	adds	r3, r7, r1
 8007bba:	1c02      	adds	r2, r0, #0
 8007bbc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8007bbe:	68ba      	ldr	r2, [r7, #8]
 8007bc0:	187b      	adds	r3, r7, r1
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	b25b      	sxtb	r3, r3
 8007bc6:	0011      	movs	r1, r2
 8007bc8:	0018      	movs	r0, r3
 8007bca:	f7ff ff81 	bl	8007ad0 <__NVIC_SetPriority>
}
 8007bce:	46c0      	nop			@ (mov r8, r8)
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	b004      	add	sp, #16
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b082      	sub	sp, #8
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	0002      	movs	r2, r0
 8007bde:	1dfb      	adds	r3, r7, #7
 8007be0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007be2:	1dfb      	adds	r3, r7, #7
 8007be4:	781b      	ldrb	r3, [r3, #0]
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	0018      	movs	r0, r3
 8007bea:	f7ff ff57 	bl	8007a9c <__NVIC_EnableIRQ>
}
 8007bee:	46c0      	nop			@ (mov r8, r8)
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	b002      	add	sp, #8
 8007bf4:	bd80      	pop	{r7, pc}
	...

08007bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b086      	sub	sp, #24
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007c02:	2300      	movs	r3, #0
 8007c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007c06:	e14d      	b.n	8007ea4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2101      	movs	r1, #1
 8007c0e:	697a      	ldr	r2, [r7, #20]
 8007c10:	4091      	lsls	r1, r2
 8007c12:	000a      	movs	r2, r1
 8007c14:	4013      	ands	r3, r2
 8007c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d100      	bne.n	8007c20 <HAL_GPIO_Init+0x28>
 8007c1e:	e13e      	b.n	8007e9e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	2203      	movs	r2, #3
 8007c26:	4013      	ands	r3, r2
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d005      	beq.n	8007c38 <HAL_GPIO_Init+0x40>
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	2203      	movs	r2, #3
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d130      	bne.n	8007c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	005b      	lsls	r3, r3, #1
 8007c42:	2203      	movs	r2, #3
 8007c44:	409a      	lsls	r2, r3
 8007c46:	0013      	movs	r3, r2
 8007c48:	43da      	mvns	r2, r3
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	409a      	lsls	r2, r3
 8007c5a:	0013      	movs	r3, r2
 8007c5c:	693a      	ldr	r2, [r7, #16]
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	693a      	ldr	r2, [r7, #16]
 8007c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	685b      	ldr	r3, [r3, #4]
 8007c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c6e:	2201      	movs	r2, #1
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	409a      	lsls	r2, r3
 8007c74:	0013      	movs	r3, r2
 8007c76:	43da      	mvns	r2, r3
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	685b      	ldr	r3, [r3, #4]
 8007c82:	091b      	lsrs	r3, r3, #4
 8007c84:	2201      	movs	r2, #1
 8007c86:	401a      	ands	r2, r3
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	409a      	lsls	r2, r3
 8007c8c:	0013      	movs	r3, r2
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	4313      	orrs	r3, r2
 8007c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c9a:	683b      	ldr	r3, [r7, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2203      	movs	r2, #3
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d017      	beq.n	8007cd6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	005b      	lsls	r3, r3, #1
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	409a      	lsls	r2, r3
 8007cb4:	0013      	movs	r3, r2
 8007cb6:	43da      	mvns	r2, r3
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	689a      	ldr	r2, [r3, #8]
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	005b      	lsls	r3, r3, #1
 8007cc6:	409a      	lsls	r2, r3
 8007cc8:	0013      	movs	r3, r2
 8007cca:	693a      	ldr	r2, [r7, #16]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007cd6:	683b      	ldr	r3, [r7, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	2203      	movs	r2, #3
 8007cdc:	4013      	ands	r3, r2
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d123      	bne.n	8007d2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	08da      	lsrs	r2, r3, #3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	3208      	adds	r2, #8
 8007cea:	0092      	lsls	r2, r2, #2
 8007cec:	58d3      	ldr	r3, [r2, r3]
 8007cee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2207      	movs	r2, #7
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	220f      	movs	r2, #15
 8007cfa:	409a      	lsls	r2, r3
 8007cfc:	0013      	movs	r3, r2
 8007cfe:	43da      	mvns	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	4013      	ands	r3, r2
 8007d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	691a      	ldr	r2, [r3, #16]
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	2107      	movs	r1, #7
 8007d0e:	400b      	ands	r3, r1
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	409a      	lsls	r2, r3
 8007d14:	0013      	movs	r3, r2
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	08da      	lsrs	r2, r3, #3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3208      	adds	r2, #8
 8007d24:	0092      	lsls	r2, r2, #2
 8007d26:	6939      	ldr	r1, [r7, #16]
 8007d28:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	2203      	movs	r2, #3
 8007d36:	409a      	lsls	r2, r3
 8007d38:	0013      	movs	r3, r2
 8007d3a:	43da      	mvns	r2, r3
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	4013      	ands	r3, r2
 8007d40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2203      	movs	r2, #3
 8007d48:	401a      	ands	r2, r3
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	409a      	lsls	r2, r3
 8007d50:	0013      	movs	r3, r2
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	23c0      	movs	r3, #192	@ 0xc0
 8007d64:	029b      	lsls	r3, r3, #10
 8007d66:	4013      	ands	r3, r2
 8007d68:	d100      	bne.n	8007d6c <HAL_GPIO_Init+0x174>
 8007d6a:	e098      	b.n	8007e9e <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8007d6c:	4a53      	ldr	r2, [pc, #332]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	089b      	lsrs	r3, r3, #2
 8007d72:	3318      	adds	r3, #24
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	589b      	ldr	r3, [r3, r2]
 8007d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2203      	movs	r2, #3
 8007d7e:	4013      	ands	r3, r2
 8007d80:	00db      	lsls	r3, r3, #3
 8007d82:	220f      	movs	r2, #15
 8007d84:	409a      	lsls	r2, r3
 8007d86:	0013      	movs	r3, r2
 8007d88:	43da      	mvns	r2, r3
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	4013      	ands	r3, r2
 8007d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	23a0      	movs	r3, #160	@ 0xa0
 8007d94:	05db      	lsls	r3, r3, #23
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d019      	beq.n	8007dce <HAL_GPIO_Init+0x1d6>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a48      	ldr	r2, [pc, #288]	@ (8007ec0 <HAL_GPIO_Init+0x2c8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <HAL_GPIO_Init+0x1d2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a47      	ldr	r2, [pc, #284]	@ (8007ec4 <HAL_GPIO_Init+0x2cc>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00d      	beq.n	8007dc6 <HAL_GPIO_Init+0x1ce>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a46      	ldr	r2, [pc, #280]	@ (8007ec8 <HAL_GPIO_Init+0x2d0>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d007      	beq.n	8007dc2 <HAL_GPIO_Init+0x1ca>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a45      	ldr	r2, [pc, #276]	@ (8007ecc <HAL_GPIO_Init+0x2d4>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d101      	bne.n	8007dbe <HAL_GPIO_Init+0x1c6>
 8007dba:	2304      	movs	r3, #4
 8007dbc:	e008      	b.n	8007dd0 <HAL_GPIO_Init+0x1d8>
 8007dbe:	2305      	movs	r3, #5
 8007dc0:	e006      	b.n	8007dd0 <HAL_GPIO_Init+0x1d8>
 8007dc2:	2303      	movs	r3, #3
 8007dc4:	e004      	b.n	8007dd0 <HAL_GPIO_Init+0x1d8>
 8007dc6:	2302      	movs	r3, #2
 8007dc8:	e002      	b.n	8007dd0 <HAL_GPIO_Init+0x1d8>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <HAL_GPIO_Init+0x1d8>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	2103      	movs	r1, #3
 8007dd4:	400a      	ands	r2, r1
 8007dd6:	00d2      	lsls	r2, r2, #3
 8007dd8:	4093      	lsls	r3, r2
 8007dda:	693a      	ldr	r2, [r7, #16]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8007de0:	4936      	ldr	r1, [pc, #216]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	089b      	lsrs	r3, r3, #2
 8007de6:	3318      	adds	r3, #24
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	693a      	ldr	r2, [r7, #16]
 8007dec:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007dee:	4b33      	ldr	r3, [pc, #204]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	43da      	mvns	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	2380      	movs	r3, #128	@ 0x80
 8007e04:	035b      	lsls	r3, r3, #13
 8007e06:	4013      	ands	r3, r2
 8007e08:	d003      	beq.n	8007e12 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007e12:	4b2a      	ldr	r3, [pc, #168]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007e14:	693a      	ldr	r2, [r7, #16]
 8007e16:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8007e18:	4b28      	ldr	r3, [pc, #160]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	43da      	mvns	r2, r3
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	4013      	ands	r3, r2
 8007e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	2380      	movs	r3, #128	@ 0x80
 8007e2e:	039b      	lsls	r3, r3, #14
 8007e30:	4013      	ands	r3, r2
 8007e32:	d003      	beq.n	8007e3c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8007e34:	693a      	ldr	r2, [r7, #16]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007e3e:	693a      	ldr	r2, [r7, #16]
 8007e40:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007e42:	4a1e      	ldr	r2, [pc, #120]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007e44:	2384      	movs	r3, #132	@ 0x84
 8007e46:	58d3      	ldr	r3, [r2, r3]
 8007e48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	43da      	mvns	r2, r3
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	4013      	ands	r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	2380      	movs	r3, #128	@ 0x80
 8007e5a:	029b      	lsls	r3, r3, #10
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	d003      	beq.n	8007e68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007e60:	693a      	ldr	r2, [r7, #16]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007e68:	4914      	ldr	r1, [pc, #80]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007e6a:	2284      	movs	r2, #132	@ 0x84
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8007e70:	4a12      	ldr	r2, [pc, #72]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007e72:	2380      	movs	r3, #128	@ 0x80
 8007e74:	58d3      	ldr	r3, [r2, r3]
 8007e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	43da      	mvns	r2, r3
 8007e7c:	693b      	ldr	r3, [r7, #16]
 8007e7e:	4013      	ands	r3, r2
 8007e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	685a      	ldr	r2, [r3, #4]
 8007e86:	2380      	movs	r3, #128	@ 0x80
 8007e88:	025b      	lsls	r3, r3, #9
 8007e8a:	4013      	ands	r3, r2
 8007e8c:	d003      	beq.n	8007e96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007e96:	4909      	ldr	r1, [pc, #36]	@ (8007ebc <HAL_GPIO_Init+0x2c4>)
 8007e98:	2280      	movs	r2, #128	@ 0x80
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	40da      	lsrs	r2, r3
 8007eac:	1e13      	subs	r3, r2, #0
 8007eae:	d000      	beq.n	8007eb2 <HAL_GPIO_Init+0x2ba>
 8007eb0:	e6aa      	b.n	8007c08 <HAL_GPIO_Init+0x10>
  }
}
 8007eb2:	46c0      	nop			@ (mov r8, r8)
 8007eb4:	46c0      	nop			@ (mov r8, r8)
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	b006      	add	sp, #24
 8007eba:	bd80      	pop	{r7, pc}
 8007ebc:	40021800 	.word	0x40021800
 8007ec0:	50000400 	.word	0x50000400
 8007ec4:	50000800 	.word	0x50000800
 8007ec8:	50000c00 	.word	0x50000c00
 8007ecc:	50001000 	.word	0x50001000

08007ed0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b082      	sub	sp, #8
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	0008      	movs	r0, r1
 8007eda:	0011      	movs	r1, r2
 8007edc:	1cbb      	adds	r3, r7, #2
 8007ede:	1c02      	adds	r2, r0, #0
 8007ee0:	801a      	strh	r2, [r3, #0]
 8007ee2:	1c7b      	adds	r3, r7, #1
 8007ee4:	1c0a      	adds	r2, r1, #0
 8007ee6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ee8:	1c7b      	adds	r3, r7, #1
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ef0:	1cbb      	adds	r3, r7, #2
 8007ef2:	881a      	ldrh	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007ef8:	e003      	b.n	8007f02 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007efa:	1cbb      	adds	r3, r7, #2
 8007efc:	881a      	ldrh	r2, [r3, #0]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007f02:	46c0      	nop			@ (mov r8, r8)
 8007f04:	46bd      	mov	sp, r7
 8007f06:	b002      	add	sp, #8
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d101      	bne.n	8007f1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	e08f      	b.n	800803e <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2241      	movs	r2, #65	@ 0x41
 8007f22:	5c9b      	ldrb	r3, [r3, r2]
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d107      	bne.n	8007f3a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2240      	movs	r2, #64	@ 0x40
 8007f2e:	2100      	movs	r1, #0
 8007f30:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	0018      	movs	r0, r3
 8007f36:	f7fe fde3 	bl	8006b00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2241      	movs	r2, #65	@ 0x41
 8007f3e:	2124      	movs	r1, #36	@ 0x24
 8007f40:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	681a      	ldr	r2, [r3, #0]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	438a      	bics	r2, r1
 8007f50:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	685a      	ldr	r2, [r3, #4]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	493b      	ldr	r1, [pc, #236]	@ (8008048 <HAL_I2C_Init+0x13c>)
 8007f5c:	400a      	ands	r2, r1
 8007f5e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4938      	ldr	r1, [pc, #224]	@ (800804c <HAL_I2C_Init+0x140>)
 8007f6c:	400a      	ands	r2, r1
 8007f6e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d108      	bne.n	8007f8a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2180      	movs	r1, #128	@ 0x80
 8007f82:	0209      	lsls	r1, r1, #8
 8007f84:	430a      	orrs	r2, r1
 8007f86:	609a      	str	r2, [r3, #8]
 8007f88:	e007      	b.n	8007f9a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	689a      	ldr	r2, [r3, #8]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2184      	movs	r1, #132	@ 0x84
 8007f94:	0209      	lsls	r1, r1, #8
 8007f96:	430a      	orrs	r2, r1
 8007f98:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d109      	bne.n	8007fb6 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685a      	ldr	r2, [r3, #4]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2180      	movs	r1, #128	@ 0x80
 8007fae:	0109      	lsls	r1, r1, #4
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	605a      	str	r2, [r3, #4]
 8007fb4:	e007      	b.n	8007fc6 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	685a      	ldr	r2, [r3, #4]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4923      	ldr	r1, [pc, #140]	@ (8008050 <HAL_I2C_Init+0x144>)
 8007fc2:	400a      	ands	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	685a      	ldr	r2, [r3, #4]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4920      	ldr	r1, [pc, #128]	@ (8008054 <HAL_I2C_Init+0x148>)
 8007fd2:	430a      	orrs	r2, r1
 8007fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	491a      	ldr	r1, [pc, #104]	@ (800804c <HAL_I2C_Init+0x140>)
 8007fe2:	400a      	ands	r2, r1
 8007fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	691a      	ldr	r2, [r3, #16]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	431a      	orrs	r2, r3
 8007ff0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	430a      	orrs	r2, r1
 8007ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	69d9      	ldr	r1, [r3, #28]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1a      	ldr	r2, [r3, #32]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2101      	movs	r1, #1
 800801c:	430a      	orrs	r2, r1
 800801e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2241      	movs	r2, #65	@ 0x41
 800802a:	2120      	movs	r1, #32
 800802c:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2242      	movs	r2, #66	@ 0x42
 8008038:	2100      	movs	r1, #0
 800803a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	0018      	movs	r0, r3
 8008040:	46bd      	mov	sp, r7
 8008042:	b002      	add	sp, #8
 8008044:	bd80      	pop	{r7, pc}
 8008046:	46c0      	nop			@ (mov r8, r8)
 8008048:	f0ffffff 	.word	0xf0ffffff
 800804c:	ffff7fff 	.word	0xffff7fff
 8008050:	fffff7ff 	.word	0xfffff7ff
 8008054:	02008000 	.word	0x02008000

08008058 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2241      	movs	r2, #65	@ 0x41
 8008066:	5c9b      	ldrb	r3, [r3, r2]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b20      	cmp	r3, #32
 800806c:	d138      	bne.n	80080e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2240      	movs	r2, #64	@ 0x40
 8008072:	5c9b      	ldrb	r3, [r3, r2]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d101      	bne.n	800807c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008078:	2302      	movs	r3, #2
 800807a:	e032      	b.n	80080e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2240      	movs	r2, #64	@ 0x40
 8008080:	2101      	movs	r1, #1
 8008082:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2241      	movs	r2, #65	@ 0x41
 8008088:	2124      	movs	r1, #36	@ 0x24
 800808a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	2101      	movs	r1, #1
 8008098:	438a      	bics	r2, r1
 800809a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4911      	ldr	r1, [pc, #68]	@ (80080ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80080a8:	400a      	ands	r2, r1
 80080aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6819      	ldr	r1, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	430a      	orrs	r2, r1
 80080ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	2101      	movs	r1, #1
 80080c8:	430a      	orrs	r2, r1
 80080ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2241      	movs	r2, #65	@ 0x41
 80080d0:	2120      	movs	r1, #32
 80080d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2240      	movs	r2, #64	@ 0x40
 80080d8:	2100      	movs	r1, #0
 80080da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	e000      	b.n	80080e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80080e0:	2302      	movs	r3, #2
  }
}
 80080e2:	0018      	movs	r0, r3
 80080e4:	46bd      	mov	sp, r7
 80080e6:	b002      	add	sp, #8
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	46c0      	nop			@ (mov r8, r8)
 80080ec:	ffffefff 	.word	0xffffefff

080080f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2241      	movs	r2, #65	@ 0x41
 80080fe:	5c9b      	ldrb	r3, [r3, r2]
 8008100:	b2db      	uxtb	r3, r3
 8008102:	2b20      	cmp	r3, #32
 8008104:	d139      	bne.n	800817a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2240      	movs	r2, #64	@ 0x40
 800810a:	5c9b      	ldrb	r3, [r3, r2]
 800810c:	2b01      	cmp	r3, #1
 800810e:	d101      	bne.n	8008114 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008110:	2302      	movs	r3, #2
 8008112:	e033      	b.n	800817c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2240      	movs	r2, #64	@ 0x40
 8008118:	2101      	movs	r1, #1
 800811a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2241      	movs	r2, #65	@ 0x41
 8008120:	2124      	movs	r1, #36	@ 0x24
 8008122:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2101      	movs	r1, #1
 8008130:	438a      	bics	r2, r1
 8008132:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4a11      	ldr	r2, [pc, #68]	@ (8008184 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8008140:	4013      	ands	r3, r2
 8008142:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	021b      	lsls	r3, r3, #8
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2101      	movs	r1, #1
 8008162:	430a      	orrs	r2, r1
 8008164:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2241      	movs	r2, #65	@ 0x41
 800816a:	2120      	movs	r1, #32
 800816c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2240      	movs	r2, #64	@ 0x40
 8008172:	2100      	movs	r1, #0
 8008174:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	e000      	b.n	800817c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800817a:	2302      	movs	r3, #2
  }
}
 800817c:	0018      	movs	r0, r3
 800817e:	46bd      	mov	sp, r7
 8008180:	b004      	add	sp, #16
 8008182:	bd80      	pop	{r7, pc}
 8008184:	fffff0ff 	.word	0xfffff0ff

08008188 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	000a      	movs	r2, r1
 8008192:	1cbb      	adds	r3, r7, #2
 8008194:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8008196:	230a      	movs	r3, #10
 8008198:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 800819a:	e002      	b.n	80081a2 <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3b01      	subs	r3, #1
 80081a0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d1f9      	bne.n	800819c <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 80081a8:	1cbb      	adds	r3, r7, #2
 80081aa:	881b      	ldrh	r3, [r3, #0]
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	4a06      	ldr	r2, [pc, #24]	@ (80081c8 <PCD_GET_EP_RX_CNT+0x40>)
 80081b0:	4694      	mov	ip, r2
 80081b2:	4463      	add	r3, ip
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	0c1b      	lsrs	r3, r3, #16
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	059b      	lsls	r3, r3, #22
 80081bc:	0d9b      	lsrs	r3, r3, #22
 80081be:	b29b      	uxth	r3, r3
}
 80081c0:	0018      	movs	r0, r3
 80081c2:	46bd      	mov	sp, r7
 80081c4:	b004      	add	sp, #16
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40009800 	.word	0x40009800

080081cc <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	000a      	movs	r2, r1
 80081d6:	1cbb      	adds	r3, r7, #2
 80081d8:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80081da:	230a      	movs	r3, #10
 80081dc:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80081de:	e002      	b.n	80081e6 <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d1f9      	bne.n	80081e0 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 80081ec:	1cbb      	adds	r3, r7, #2
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	4a06      	ldr	r2, [pc, #24]	@ (800820c <PCD_GET_EP_DBUF0_CNT+0x40>)
 80081f4:	4694      	mov	ip, r2
 80081f6:	4463      	add	r3, ip
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	0c1b      	lsrs	r3, r3, #16
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	059b      	lsls	r3, r3, #22
 8008200:	0d9b      	lsrs	r3, r3, #22
 8008202:	b29b      	uxth	r3, r3
}
 8008204:	0018      	movs	r0, r3
 8008206:	46bd      	mov	sp, r7
 8008208:	b004      	add	sp, #16
 800820a:	bd80      	pop	{r7, pc}
 800820c:	40009800 	.word	0x40009800

08008210 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	000a      	movs	r2, r1
 800821a:	1cbb      	adds	r3, r7, #2
 800821c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800821e:	230a      	movs	r3, #10
 8008220:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8008222:	e002      	b.n	800822a <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	3b01      	subs	r3, #1
 8008228:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1f9      	bne.n	8008224 <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 8008230:	1cbb      	adds	r3, r7, #2
 8008232:	881b      	ldrh	r3, [r3, #0]
 8008234:	00db      	lsls	r3, r3, #3
 8008236:	4a06      	ldr	r2, [pc, #24]	@ (8008250 <PCD_GET_EP_DBUF1_CNT+0x40>)
 8008238:	4694      	mov	ip, r2
 800823a:	4463      	add	r3, ip
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	0c1b      	lsrs	r3, r3, #16
 8008240:	b29b      	uxth	r3, r3
 8008242:	059b      	lsls	r3, r3, #22
 8008244:	0d9b      	lsrs	r3, r3, #22
 8008246:	b29b      	uxth	r3, r3
}
 8008248:	0018      	movs	r0, r3
 800824a:	46bd      	mov	sp, r7
 800824c:	b004      	add	sp, #16
 800824e:	bd80      	pop	{r7, pc}
 8008250:	40009800 	.word	0x40009800

08008254 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	0018      	movs	r0, r3
 8008262:	f005 f94c 	bl	800d4fe <USB_ReadInterrupts>
 8008266:	0003      	movs	r3, r0
 8008268:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800826a:	4a7c      	ldr	r2, [pc, #496]	@ (800845c <HAL_PCD_IRQHandler+0x208>)
 800826c:	23a0      	movs	r3, #160	@ 0xa0
 800826e:	58d3      	ldr	r3, [r2, r3]
 8008270:	2204      	movs	r2, #4
 8008272:	4013      	ands	r3, r2
 8008274:	d100      	bne.n	8008278 <HAL_PCD_IRQHandler+0x24>
 8008276:	e0ed      	b.n	8008454 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	2380      	movs	r3, #128	@ 0x80
 800827c:	021b      	lsls	r3, r3, #8
 800827e:	4013      	ands	r3, r2
 8008280:	d004      	beq.n	800828c <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	0018      	movs	r0, r3
 8008286:	f000 facd 	bl	8008824 <PCD_EP_ISR_Handler>

    return;
 800828a:	e0e4      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	2380      	movs	r3, #128	@ 0x80
 8008290:	00db      	lsls	r3, r3, #3
 8008292:	4013      	ands	r3, r2
 8008294:	d011      	beq.n	80082ba <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	496f      	ldr	r1, [pc, #444]	@ (8008460 <HAL_PCD_IRQHandler+0x20c>)
 80082a2:	400a      	ands	r2, r1
 80082a4:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	0018      	movs	r0, r3
 80082aa:	f00d fa55 	bl	8015758 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2100      	movs	r1, #0
 80082b2:	0018      	movs	r0, r3
 80082b4:	f000 f8fc 	bl	80084b0 <HAL_PCD_SetAddress>

    return;
 80082b8:	e0cd      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	2380      	movs	r3, #128	@ 0x80
 80082be:	01db      	lsls	r3, r3, #7
 80082c0:	4013      	ands	r3, r2
 80082c2:	d008      	beq.n	80082d6 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4965      	ldr	r1, [pc, #404]	@ (8008464 <HAL_PCD_IRQHandler+0x210>)
 80082d0:	400a      	ands	r2, r1
 80082d2:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80082d4:	e0bf      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	2380      	movs	r3, #128	@ 0x80
 80082da:	019b      	lsls	r3, r3, #6
 80082dc:	4013      	ands	r3, r2
 80082de:	d008      	beq.n	80082f2 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	495f      	ldr	r1, [pc, #380]	@ (8008468 <HAL_PCD_IRQHandler+0x214>)
 80082ec:	400a      	ands	r2, r1
 80082ee:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80082f0:	e0b1      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	2380      	movs	r3, #128	@ 0x80
 80082f6:	015b      	lsls	r3, r3, #5
 80082f8:	4013      	ands	r3, r2
 80082fa:	d02c      	beq.n	8008356 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2104      	movs	r1, #4
 8008308:	438a      	bics	r2, r1
 800830a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	2108      	movs	r1, #8
 8008318:	438a      	bics	r2, r1
 800831a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	23b3      	movs	r3, #179	@ 0xb3
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	5cd3      	ldrb	r3, [r2, r3]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d109      	bne.n	800833c <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	23b3      	movs	r3, #179	@ 0xb3
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	2100      	movs	r1, #0
 8008330:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2100      	movs	r1, #0
 8008336:	0018      	movs	r0, r3
 8008338:	f001 fa98 	bl	800986c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	0018      	movs	r0, r3
 8008340:	f000 f8ae 	bl	80084a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4947      	ldr	r1, [pc, #284]	@ (800846c <HAL_PCD_IRQHandler+0x218>)
 8008350:	400a      	ands	r2, r1
 8008352:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8008354:	e07f      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	2380      	movs	r3, #128	@ 0x80
 800835a:	011b      	lsls	r3, r3, #4
 800835c:	4013      	ands	r3, r2
 800835e:	d01c      	beq.n	800839a <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2108      	movs	r1, #8
 800836c:	430a      	orrs	r2, r1
 800836e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	493d      	ldr	r1, [pc, #244]	@ (8008470 <HAL_PCD_IRQHandler+0x21c>)
 800837c:	400a      	ands	r2, r1
 800837e:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2104      	movs	r1, #4
 800838c:	430a      	orrs	r2, r1
 800838e:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	0018      	movs	r0, r3
 8008394:	f000 f87c 	bl	8008490 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008398:	e05d      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2280      	movs	r2, #128	@ 0x80
 800839e:	4013      	ands	r3, r2
 80083a0:	d038      	beq.n	8008414 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4931      	ldr	r1, [pc, #196]	@ (8008474 <HAL_PCD_IRQHandler+0x220>)
 80083ae:	400a      	ands	r2, r1
 80083b0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80083b2:	687a      	ldr	r2, [r7, #4]
 80083b4:	23b3      	movs	r3, #179	@ 0xb3
 80083b6:	009b      	lsls	r3, r3, #2
 80083b8:	5cd3      	ldrb	r3, [r2, r3]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d125      	bne.n	800840a <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	2104      	movs	r1, #4
 80083ca:	430a      	orrs	r2, r1
 80083cc:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2108      	movs	r1, #8
 80083da:	430a      	orrs	r2, r1
 80083dc:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	23b3      	movs	r3, #179	@ 0xb3
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	2101      	movs	r1, #1
 80083e6:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083ee:	089b      	lsrs	r3, r3, #2
 80083f0:	223c      	movs	r2, #60	@ 0x3c
 80083f2:	4013      	ands	r3, r2
 80083f4:	0019      	movs	r1, r3
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	23b4      	movs	r3, #180	@ 0xb4
 80083fa:	009b      	lsls	r3, r3, #2
 80083fc:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2101      	movs	r1, #1
 8008402:	0018      	movs	r0, r3
 8008404:	f001 fa32 	bl	800986c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008408:	e025      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	0018      	movs	r0, r3
 800840e:	f000 f83f 	bl	8008490 <HAL_PCD_SuspendCallback>
    return;
 8008412:	e020      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	2380      	movs	r3, #128	@ 0x80
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	4013      	ands	r3, r2
 800841c:	d00c      	beq.n	8008438 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4913      	ldr	r1, [pc, #76]	@ (8008478 <HAL_PCD_IRQHandler+0x224>)
 800842a:	400a      	ands	r2, r1
 800842c:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	0018      	movs	r0, r3
 8008432:	f000 f825 	bl	8008480 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008436:	e00e      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8008438:	68fa      	ldr	r2, [r7, #12]
 800843a:	2380      	movs	r3, #128	@ 0x80
 800843c:	005b      	lsls	r3, r3, #1
 800843e:	4013      	ands	r3, r2
 8008440:	d009      	beq.n	8008456 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	490b      	ldr	r1, [pc, #44]	@ (800847c <HAL_PCD_IRQHandler+0x228>)
 800844e:	400a      	ands	r2, r1
 8008450:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8008452:	e000      	b.n	8008456 <HAL_PCD_IRQHandler+0x202>
    return;
 8008454:	46c0      	nop			@ (mov r8, r8)
  }
}
 8008456:	46bd      	mov	sp, r7
 8008458:	b004      	add	sp, #16
 800845a:	bd80      	pop	{r7, pc}
 800845c:	40010000 	.word	0x40010000
 8008460:	0000fbff 	.word	0x0000fbff
 8008464:	0000bfff 	.word	0x0000bfff
 8008468:	0000dfff 	.word	0x0000dfff
 800846c:	0000efff 	.word	0x0000efff
 8008470:	0000f7ff 	.word	0x0000f7ff
 8008474:	0000ff7f 	.word	0x0000ff7f
 8008478:	0000fdff 	.word	0x0000fdff
 800847c:	0000feff 	.word	0x0000feff

08008480 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b082      	sub	sp, #8
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 8008488:	46c0      	nop			@ (mov r8, r8)
 800848a:	46bd      	mov	sp, r7
 800848c:	b002      	add	sp, #8
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 8008498:	46c0      	nop			@ (mov r8, r8)
 800849a:	46bd      	mov	sp, r7
 800849c:	b002      	add	sp, #8
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80084a8:	46c0      	nop			@ (mov r8, r8)
 80084aa:	46bd      	mov	sp, r7
 80084ac:	b002      	add	sp, #8
 80084ae:	bd80      	pop	{r7, pc}

080084b0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	000a      	movs	r2, r1
 80084ba:	1cfb      	adds	r3, r7, #3
 80084bc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	23a5      	movs	r3, #165	@ 0xa5
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	5cd3      	ldrb	r3, [r2, r3]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d101      	bne.n	80084ce <HAL_PCD_SetAddress+0x1e>
 80084ca:	2302      	movs	r3, #2
 80084cc:	e016      	b.n	80084fc <HAL_PCD_SetAddress+0x4c>
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	23a5      	movs	r3, #165	@ 0xa5
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	2101      	movs	r1, #1
 80084d6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	1cfa      	adds	r2, r7, #3
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	1cfb      	adds	r3, r7, #3
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	0019      	movs	r1, r3
 80084ea:	0010      	movs	r0, r2
 80084ec:	f004 fff4 	bl	800d4d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	23a5      	movs	r3, #165	@ 0xa5
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	2100      	movs	r1, #0
 80084f8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	0018      	movs	r0, r3
 80084fe:	46bd      	mov	sp, r7
 8008500:	b002      	add	sp, #8
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008504:	b590      	push	{r4, r7, lr}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	000c      	movs	r4, r1
 800850e:	0010      	movs	r0, r2
 8008510:	0019      	movs	r1, r3
 8008512:	1cfb      	adds	r3, r7, #3
 8008514:	1c22      	adds	r2, r4, #0
 8008516:	701a      	strb	r2, [r3, #0]
 8008518:	003b      	movs	r3, r7
 800851a:	1c02      	adds	r2, r0, #0
 800851c:	801a      	strh	r2, [r3, #0]
 800851e:	1cbb      	adds	r3, r7, #2
 8008520:	1c0a      	adds	r2, r1, #0
 8008522:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008524:	230b      	movs	r3, #11
 8008526:	18fb      	adds	r3, r7, r3
 8008528:	2200      	movs	r2, #0
 800852a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800852c:	1cfb      	adds	r3, r7, #3
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	b25b      	sxtb	r3, r3
 8008532:	2b00      	cmp	r3, #0
 8008534:	da10      	bge.n	8008558 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008536:	1cfb      	adds	r3, r7, #3
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	2207      	movs	r2, #7
 800853c:	401a      	ands	r2, r3
 800853e:	0013      	movs	r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	189b      	adds	r3, r3, r2
 8008544:	00db      	lsls	r3, r3, #3
 8008546:	3310      	adds	r3, #16
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	18d3      	adds	r3, r2, r3
 800854c:	3304      	adds	r3, #4
 800854e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2201      	movs	r2, #1
 8008554:	705a      	strb	r2, [r3, #1]
 8008556:	e010      	b.n	800857a <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008558:	1cfb      	adds	r3, r7, #3
 800855a:	781b      	ldrb	r3, [r3, #0]
 800855c:	2207      	movs	r2, #7
 800855e:	401a      	ands	r2, r3
 8008560:	0013      	movs	r3, r2
 8008562:	009b      	lsls	r3, r3, #2
 8008564:	189b      	adds	r3, r3, r2
 8008566:	00db      	lsls	r3, r3, #3
 8008568:	3351      	adds	r3, #81	@ 0x51
 800856a:	33ff      	adds	r3, #255	@ 0xff
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	18d3      	adds	r3, r2, r3
 8008570:	3304      	adds	r3, #4
 8008572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800857a:	1cfb      	adds	r3, r7, #3
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2207      	movs	r2, #7
 8008580:	4013      	ands	r3, r2
 8008582:	b2da      	uxtb	r2, r3
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008588:	003b      	movs	r3, r7
 800858a:	881a      	ldrh	r2, [r3, #0]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	1cba      	adds	r2, r7, #2
 8008594:	7812      	ldrb	r2, [r2, #0]
 8008596:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008598:	1cbb      	adds	r3, r7, #2
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b02      	cmp	r3, #2
 800859e:	d102      	bne.n	80085a6 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	2200      	movs	r2, #0
 80085a4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	23a5      	movs	r3, #165	@ 0xa5
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	5cd3      	ldrb	r3, [r2, r3]
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d101      	bne.n	80085b6 <HAL_PCD_EP_Open+0xb2>
 80085b2:	2302      	movs	r3, #2
 80085b4:	e013      	b.n	80085de <HAL_PCD_EP_Open+0xda>
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	23a5      	movs	r3, #165	@ 0xa5
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	2101      	movs	r1, #1
 80085be:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68fa      	ldr	r2, [r7, #12]
 80085c6:	0011      	movs	r1, r2
 80085c8:	0018      	movs	r0, r3
 80085ca:	f003 fbf9 	bl	800bdc0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	23a5      	movs	r3, #165	@ 0xa5
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	2100      	movs	r1, #0
 80085d6:	54d1      	strb	r1, [r2, r3]

  return ret;
 80085d8:	230b      	movs	r3, #11
 80085da:	18fb      	adds	r3, r7, r3
 80085dc:	781b      	ldrb	r3, [r3, #0]
}
 80085de:	0018      	movs	r0, r3
 80085e0:	46bd      	mov	sp, r7
 80085e2:	b005      	add	sp, #20
 80085e4:	bd90      	pop	{r4, r7, pc}

080085e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b086      	sub	sp, #24
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	607a      	str	r2, [r7, #4]
 80085f0:	603b      	str	r3, [r7, #0]
 80085f2:	200b      	movs	r0, #11
 80085f4:	183b      	adds	r3, r7, r0
 80085f6:	1c0a      	adds	r2, r1, #0
 80085f8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80085fa:	0001      	movs	r1, r0
 80085fc:	187b      	adds	r3, r7, r1
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	2207      	movs	r2, #7
 8008602:	401a      	ands	r2, r3
 8008604:	0013      	movs	r3, r2
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	189b      	adds	r3, r3, r2
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	3351      	adds	r3, #81	@ 0x51
 800860e:	33ff      	adds	r3, #255	@ 0xff
 8008610:	68fa      	ldr	r2, [r7, #12]
 8008612:	18d3      	adds	r3, r2, r3
 8008614:	3304      	adds	r3, #4
 8008616:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008618:	697b      	ldr	r3, [r7, #20]
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	2200      	movs	r2, #0
 8008628:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	2200      	movs	r2, #0
 800862e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008630:	187b      	adds	r3, r7, r1
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	2207      	movs	r2, #7
 8008636:	4013      	ands	r3, r2
 8008638:	b2da      	uxtb	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	697a      	ldr	r2, [r7, #20]
 8008644:	0011      	movs	r1, r2
 8008646:	0018      	movs	r0, r3
 8008648:	f003 feee 	bl	800c428 <USB_EPStartXfer>

  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	0018      	movs	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	b006      	add	sp, #24
 8008654:	bd80      	pop	{r7, pc}

08008656 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008656:	b580      	push	{r7, lr}
 8008658:	b082      	sub	sp, #8
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
 800865e:	000a      	movs	r2, r1
 8008660:	1cfb      	adds	r3, r7, #3
 8008662:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008664:	1cfb      	adds	r3, r7, #3
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	2207      	movs	r2, #7
 800866a:	401a      	ands	r2, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	23b8      	movs	r3, #184	@ 0xb8
 8008670:	0059      	lsls	r1, r3, #1
 8008672:	0013      	movs	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	189b      	adds	r3, r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	18c3      	adds	r3, r0, r3
 800867c:	185b      	adds	r3, r3, r1
 800867e:	681b      	ldr	r3, [r3, #0]
}
 8008680:	0018      	movs	r0, r3
 8008682:	46bd      	mov	sp, r7
 8008684:	b002      	add	sp, #8
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b086      	sub	sp, #24
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	607a      	str	r2, [r7, #4]
 8008692:	603b      	str	r3, [r7, #0]
 8008694:	200b      	movs	r0, #11
 8008696:	183b      	adds	r3, r7, r0
 8008698:	1c0a      	adds	r2, r1, #0
 800869a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800869c:	183b      	adds	r3, r7, r0
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	2207      	movs	r2, #7
 80086a2:	401a      	ands	r2, r3
 80086a4:	0013      	movs	r3, r2
 80086a6:	009b      	lsls	r3, r3, #2
 80086a8:	189b      	adds	r3, r3, r2
 80086aa:	00db      	lsls	r3, r3, #3
 80086ac:	3310      	adds	r3, #16
 80086ae:	68fa      	ldr	r2, [r7, #12]
 80086b0:	18d3      	adds	r3, r2, r3
 80086b2:	3304      	adds	r3, #4
 80086b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	683a      	ldr	r2, [r7, #0]
 80086c0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2224      	movs	r2, #36	@ 0x24
 80086c6:	2101      	movs	r1, #1
 80086c8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	683a      	ldr	r2, [r7, #0]
 80086ce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2200      	movs	r2, #0
 80086d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2201      	movs	r2, #1
 80086da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80086dc:	183b      	adds	r3, r7, r0
 80086de:	781b      	ldrb	r3, [r3, #0]
 80086e0:	2207      	movs	r2, #7
 80086e2:	4013      	ands	r3, r2
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	697a      	ldr	r2, [r7, #20]
 80086f0:	0011      	movs	r1, r2
 80086f2:	0018      	movs	r0, r3
 80086f4:	f003 fe98 	bl	800c428 <USB_EPStartXfer>

  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	0018      	movs	r0, r3
 80086fc:	46bd      	mov	sp, r7
 80086fe:	b006      	add	sp, #24
 8008700:	bd80      	pop	{r7, pc}

08008702 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b084      	sub	sp, #16
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	000a      	movs	r2, r1
 800870c:	1cfb      	adds	r3, r7, #3
 800870e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008710:	1cfb      	adds	r3, r7, #3
 8008712:	781b      	ldrb	r3, [r3, #0]
 8008714:	2207      	movs	r2, #7
 8008716:	4013      	ands	r3, r2
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	7912      	ldrb	r2, [r2, #4]
 800871c:	4293      	cmp	r3, r2
 800871e:	d901      	bls.n	8008724 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8008720:	2301      	movs	r3, #1
 8008722:	e048      	b.n	80087b6 <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008724:	1cfb      	adds	r3, r7, #3
 8008726:	781b      	ldrb	r3, [r3, #0]
 8008728:	b25b      	sxtb	r3, r3
 800872a:	2b00      	cmp	r3, #0
 800872c:	da10      	bge.n	8008750 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800872e:	1cfb      	adds	r3, r7, #3
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	2207      	movs	r2, #7
 8008734:	401a      	ands	r2, r3
 8008736:	0013      	movs	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	189b      	adds	r3, r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	3310      	adds	r3, #16
 8008740:	687a      	ldr	r2, [r7, #4]
 8008742:	18d3      	adds	r3, r2, r3
 8008744:	3304      	adds	r3, #4
 8008746:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	2201      	movs	r2, #1
 800874c:	705a      	strb	r2, [r3, #1]
 800874e:	e00e      	b.n	800876e <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008750:	1cfb      	adds	r3, r7, #3
 8008752:	781a      	ldrb	r2, [r3, #0]
 8008754:	0013      	movs	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	189b      	adds	r3, r3, r2
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	3351      	adds	r3, #81	@ 0x51
 800875e:	33ff      	adds	r3, #255	@ 0xff
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	18d3      	adds	r3, r2, r3
 8008764:	3304      	adds	r3, #4
 8008766:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008774:	1cfb      	adds	r3, r7, #3
 8008776:	781b      	ldrb	r3, [r3, #0]
 8008778:	2207      	movs	r2, #7
 800877a:	4013      	ands	r3, r2
 800877c:	b2da      	uxtb	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	23a5      	movs	r3, #165	@ 0xa5
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	5cd3      	ldrb	r3, [r2, r3]
 800878a:	2b01      	cmp	r3, #1
 800878c:	d101      	bne.n	8008792 <HAL_PCD_EP_SetStall+0x90>
 800878e:	2302      	movs	r3, #2
 8008790:	e011      	b.n	80087b6 <HAL_PCD_EP_SetStall+0xb4>
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	23a5      	movs	r3, #165	@ 0xa5
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	2101      	movs	r1, #1
 800879a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	0011      	movs	r1, r2
 80087a4:	0018      	movs	r0, r3
 80087a6:	f004 fe55 	bl	800d454 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	23a5      	movs	r3, #165	@ 0xa5
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	2100      	movs	r1, #0
 80087b2:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	0018      	movs	r0, r3
 80087b8:	46bd      	mov	sp, r7
 80087ba:	b004      	add	sp, #16
 80087bc:	bd80      	pop	{r7, pc}

080087be <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b082      	sub	sp, #8
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	000a      	movs	r2, r1
 80087c8:	1cfb      	adds	r3, r7, #3
 80087ca:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	23a5      	movs	r3, #165	@ 0xa5
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	5cd3      	ldrb	r3, [r2, r3]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d101      	bne.n	80087dc <HAL_PCD_EP_Flush+0x1e>
 80087d8:	2302      	movs	r3, #2
 80087da:	e01f      	b.n	800881c <HAL_PCD_EP_Flush+0x5e>
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	23a5      	movs	r3, #165	@ 0xa5
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	2101      	movs	r1, #1
 80087e4:	54d1      	strb	r1, [r2, r3]

  if ((ep_addr & 0x80U) == 0x80U)
 80087e6:	1cfb      	adds	r3, r7, #3
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	b25b      	sxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	da0a      	bge.n	8008806 <HAL_PCD_EP_Flush+0x48>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	1cfb      	adds	r3, r7, #3
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2107      	movs	r1, #7
 80087fa:	400b      	ands	r3, r1
 80087fc:	0019      	movs	r1, r3
 80087fe:	0010      	movs	r0, r2
 8008800:	f003 facb 	bl	800bd9a <USB_FlushTxFifo>
 8008804:	e004      	b.n	8008810 <HAL_PCD_EP_Flush+0x52>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	0018      	movs	r0, r3
 800880c:	f003 facf 	bl	800bdae <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	23a5      	movs	r3, #165	@ 0xa5
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	2100      	movs	r1, #0
 8008818:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	0018      	movs	r0, r3
 800881e:	46bd      	mov	sp, r7
 8008820:	b002      	add	sp, #8
 8008822:	bd80      	pop	{r7, pc}

08008824 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008824:	b5b0      	push	{r4, r5, r7, lr}
 8008826:	b08e      	sub	sp, #56	@ 0x38
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800882c:	e355      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008834:	2022      	movs	r0, #34	@ 0x22
 8008836:	183b      	adds	r3, r7, r0
 8008838:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 800883a:	183b      	adds	r3, r7, r0
 800883c:	881b      	ldrh	r3, [r3, #0]
 800883e:	b2da      	uxtb	r2, r3
 8008840:	2421      	movs	r4, #33	@ 0x21
 8008842:	193b      	adds	r3, r7, r4
 8008844:	210f      	movs	r1, #15
 8008846:	400a      	ands	r2, r1
 8008848:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800884a:	193b      	adds	r3, r7, r4
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d000      	beq.n	8008854 <PCD_EP_ISR_Handler+0x30>
 8008852:	e12b      	b.n	8008aac <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008854:	183b      	adds	r3, r7, r0
 8008856:	881b      	ldrh	r3, [r3, #0]
 8008858:	2210      	movs	r2, #16
 800885a:	4013      	ands	r3, r2
 800885c:	d140      	bne.n	80088e0 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4ac5      	ldr	r2, [pc, #788]	@ (8008b7c <PCD_EP_ISR_Handler+0x358>)
 8008866:	4013      	ands	r3, r2
 8008868:	60bb      	str	r3, [r7, #8]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	2180      	movs	r1, #128	@ 0x80
 8008872:	0209      	lsls	r1, r1, #8
 8008874:	430a      	orrs	r2, r1
 8008876:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	3314      	adds	r3, #20
 800887c:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800887e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008880:	781b      	ldrb	r3, [r3, #0]
 8008882:	00db      	lsls	r3, r3, #3
 8008884:	4abe      	ldr	r2, [pc, #760]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008886:	4694      	mov	ip, r2
 8008888:	4463      	add	r3, ip
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	0c1b      	lsrs	r3, r3, #16
 800888e:	059b      	lsls	r3, r3, #22
 8008890:	0d9a      	lsrs	r2, r3, #22
 8008892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008894:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008898:	695a      	ldr	r2, [r3, #20]
 800889a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800889c:	69db      	ldr	r3, [r3, #28]
 800889e:	18d2      	adds	r2, r2, r3
 80088a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088a2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2100      	movs	r1, #0
 80088a8:	0018      	movs	r0, r3
 80088aa:	f00c fe23 	bl	80154f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	7c5b      	ldrb	r3, [r3, #17]
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d100      	bne.n	80088ba <PCD_EP_ISR_Handler+0x96>
 80088b8:	e30f      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
 80088ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d000      	beq.n	80088c4 <PCD_EP_ISR_Handler+0xa0>
 80088c2:	e30a      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	7c5b      	ldrb	r3, [r3, #17]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2280      	movs	r2, #128	@ 0x80
 80088cc:	4252      	negs	r2, r2
 80088ce:	4313      	orrs	r3, r2
 80088d0:	b2da      	uxtb	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2200      	movs	r2, #0
 80088dc:	745a      	strb	r2, [r3, #17]
 80088de:	e2fc      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3355      	adds	r3, #85	@ 0x55
 80088e4:	33ff      	adds	r3, #255	@ 0xff
 80088e6:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	2132      	movs	r1, #50	@ 0x32
 80088f0:	187b      	adds	r3, r7, r1
 80088f2:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80088f4:	187b      	adds	r3, r7, r1
 80088f6:	881a      	ldrh	r2, [r3, #0]
 80088f8:	2380      	movs	r3, #128	@ 0x80
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	4013      	ands	r3, r2
 80088fe:	d029      	beq.n	8008954 <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	0019      	movs	r1, r3
 800890a:	0010      	movs	r0, r2
 800890c:	f7ff fc3c 	bl	8008188 <PCD_GET_EP_RX_CNT>
 8008910:	0003      	movs	r3, r0
 8008912:	001a      	movs	r2, r3
 8008914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008916:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6818      	ldr	r0, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	22a7      	movs	r2, #167	@ 0xa7
 8008920:	0092      	lsls	r2, r2, #2
 8008922:	1899      	adds	r1, r3, r2
 8008924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008926:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800892c:	b29b      	uxth	r3, r3
 800892e:	f004 fe69 	bl	800d604 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a92      	ldr	r2, [pc, #584]	@ (8008b84 <PCD_EP_ISR_Handler+0x360>)
 800893a:	4013      	ands	r3, r2
 800893c:	60fb      	str	r3, [r7, #12]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68fa      	ldr	r2, [r7, #12]
 8008944:	2180      	movs	r1, #128	@ 0x80
 8008946:	430a      	orrs	r2, r1
 8008948:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	0018      	movs	r0, r3
 800894e:	f00c fd4d 	bl	80153ec <HAL_PCD_SetupStageCallback>
 8008952:	e2c2      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8008954:	2332      	movs	r3, #50	@ 0x32
 8008956:	18fb      	adds	r3, r7, r3
 8008958:	2200      	movs	r2, #0
 800895a:	5e9b      	ldrsh	r3, [r3, r2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	db00      	blt.n	8008962 <PCD_EP_ISR_Handler+0x13e>
 8008960:	e2bb      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a86      	ldr	r2, [pc, #536]	@ (8008b84 <PCD_EP_ISR_Handler+0x360>)
 800896a:	4013      	ands	r3, r2
 800896c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008974:	2180      	movs	r1, #128	@ 0x80
 8008976:	430a      	orrs	r2, r1
 8008978:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	0019      	movs	r1, r3
 8008984:	0010      	movs	r0, r2
 8008986:	f7ff fbff 	bl	8008188 <PCD_GET_EP_RX_CNT>
 800898a:	0003      	movs	r3, r0
 800898c:	001a      	movs	r2, r3
 800898e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008990:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d01a      	beq.n	80089d0 <PCD_EP_ISR_Handler+0x1ac>
 800899a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899c:	695b      	ldr	r3, [r3, #20]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d016      	beq.n	80089d0 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089a8:	6959      	ldr	r1, [r3, #20]
 80089aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ac:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80089ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089b0:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	f004 fe26 	bl	800d604 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80089b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ba:	695a      	ldr	r2, [r3, #20]
 80089bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	18d2      	adds	r2, r2, r3
 80089c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089c4:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2100      	movs	r1, #0
 80089ca:	0018      	movs	r0, r3
 80089cc:	f00c fe3a 	bl	8015644 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	2132      	movs	r1, #50	@ 0x32
 80089d8:	187b      	adds	r3, r7, r1
 80089da:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80089dc:	187b      	adds	r3, r7, r1
 80089de:	881a      	ldrh	r2, [r3, #0]
 80089e0:	2380      	movs	r3, #128	@ 0x80
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	4013      	ands	r3, r2
 80089e6:	d000      	beq.n	80089ea <PCD_EP_ISR_Handler+0x1c6>
 80089e8:	e277      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
 80089ea:	187b      	adds	r3, r7, r1
 80089ec:	881a      	ldrh	r2, [r3, #0]
 80089ee:	23c0      	movs	r3, #192	@ 0xc0
 80089f0:	019b      	lsls	r3, r3, #6
 80089f2:	401a      	ands	r2, r3
 80089f4:	23c0      	movs	r3, #192	@ 0xc0
 80089f6:	019b      	lsls	r3, r3, #6
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d100      	bne.n	80089fe <PCD_EP_ISR_Handler+0x1da>
 80089fc:	e26d      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80089fe:	4b60      	ldr	r3, [pc, #384]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	4b5f      	ldr	r3, [pc, #380]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008a04:	0192      	lsls	r2, r2, #6
 8008a06:	0992      	lsrs	r2, r2, #6
 8008a08:	605a      	str	r2, [r3, #4]
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008a10:	d916      	bls.n	8008a40 <PCD_EP_ISR_Handler+0x21c>
 8008a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	617b      	str	r3, [r7, #20]
 8008a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	221f      	movs	r2, #31
 8008a20:	4013      	ands	r3, r2
 8008a22:	d102      	bne.n	8008a2a <PCD_EP_ISR_Handler+0x206>
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	3b01      	subs	r3, #1
 8008a28:	617b      	str	r3, [r7, #20]
 8008a2a:	4b55      	ldr	r3, [pc, #340]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008a2c:	685a      	ldr	r2, [r3, #4]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	069b      	lsls	r3, r3, #26
 8008a32:	431a      	orrs	r2, r3
 8008a34:	4b52      	ldr	r3, [pc, #328]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008a36:	2180      	movs	r1, #128	@ 0x80
 8008a38:	0609      	lsls	r1, r1, #24
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	e01e      	b.n	8008a7e <PCD_EP_ISR_Handler+0x25a>
 8008a40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d107      	bne.n	8008a58 <PCD_EP_ISR_Handler+0x234>
 8008a48:	4b4d      	ldr	r3, [pc, #308]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008a4a:	685a      	ldr	r2, [r3, #4]
 8008a4c:	4b4c      	ldr	r3, [pc, #304]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008a4e:	2180      	movs	r1, #128	@ 0x80
 8008a50:	0609      	lsls	r1, r1, #24
 8008a52:	430a      	orrs	r2, r1
 8008a54:	605a      	str	r2, [r3, #4]
 8008a56:	e012      	b.n	8008a7e <PCD_EP_ISR_Handler+0x25a>
 8008a58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	085b      	lsrs	r3, r3, #1
 8008a5e:	617b      	str	r3, [r7, #20]
 8008a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a62:	691b      	ldr	r3, [r3, #16]
 8008a64:	2201      	movs	r2, #1
 8008a66:	4013      	ands	r3, r2
 8008a68:	d002      	beq.n	8008a70 <PCD_EP_ISR_Handler+0x24c>
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	3301      	adds	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	4b43      	ldr	r3, [pc, #268]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008a72:	6859      	ldr	r1, [r3, #4]
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	069a      	lsls	r2, r3, #26
 8008a78:	4b41      	ldr	r3, [pc, #260]	@ (8008b80 <PCD_EP_ISR_Handler+0x35c>)
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a40      	ldr	r2, [pc, #256]	@ (8008b88 <PCD_EP_ISR_Handler+0x364>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	613b      	str	r3, [r7, #16]
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	2280      	movs	r2, #128	@ 0x80
 8008a8e:	0152      	lsls	r2, r2, #5
 8008a90:	4053      	eors	r3, r2
 8008a92:	613b      	str	r3, [r7, #16]
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2280      	movs	r2, #128	@ 0x80
 8008a98:	0192      	lsls	r2, r2, #6
 8008a9a:	4053      	eors	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	4939      	ldr	r1, [pc, #228]	@ (8008b8c <PCD_EP_ISR_Handler+0x368>)
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	601a      	str	r2, [r3, #0]
 8008aaa:	e216      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	001a      	movs	r2, r3
 8008ab2:	2121      	movs	r1, #33	@ 0x21
 8008ab4:	187b      	adds	r3, r7, r1
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	18d3      	adds	r3, r2, r3
 8008abc:	681a      	ldr	r2, [r3, #0]
 8008abe:	2032      	movs	r0, #50	@ 0x32
 8008ac0:	183b      	adds	r3, r7, r0
 8008ac2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8008ac4:	183b      	adds	r3, r7, r0
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	5e9b      	ldrsh	r3, [r3, r2]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	db00      	blt.n	8008ad0 <PCD_EP_ISR_Handler+0x2ac>
 8008ace:	e0e0      	b.n	8008c92 <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	001a      	movs	r2, r3
 8008ad6:	187b      	adds	r3, r7, r1
 8008ad8:	781b      	ldrb	r3, [r3, #0]
 8008ada:	009b      	lsls	r3, r3, #2
 8008adc:	18d3      	adds	r3, r2, r3
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4a28      	ldr	r2, [pc, #160]	@ (8008b84 <PCD_EP_ISR_Handler+0x360>)
 8008ae2:	4013      	ands	r3, r2
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	001a      	movs	r2, r3
 8008aec:	0008      	movs	r0, r1
 8008aee:	187b      	adds	r3, r7, r1
 8008af0:	781b      	ldrb	r3, [r3, #0]
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	18d3      	adds	r3, r2, r3
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	2180      	movs	r1, #128	@ 0x80
 8008afa:	430a      	orrs	r2, r1
 8008afc:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008afe:	183b      	adds	r3, r7, r0
 8008b00:	781a      	ldrb	r2, [r3, #0]
 8008b02:	0013      	movs	r3, r2
 8008b04:	009b      	lsls	r3, r3, #2
 8008b06:	189b      	adds	r3, r3, r2
 8008b08:	00db      	lsls	r3, r3, #3
 8008b0a:	3351      	adds	r3, #81	@ 0x51
 8008b0c:	33ff      	adds	r3, #255	@ 0xff
 8008b0e:	687a      	ldr	r2, [r7, #4]
 8008b10:	18d3      	adds	r3, r2, r3
 8008b12:	3304      	adds	r3, #4
 8008b14:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b18:	7b1b      	ldrb	r3, [r3, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d11c      	bne.n	8008b58 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b24:	781b      	ldrb	r3, [r3, #0]
 8008b26:	2524      	movs	r5, #36	@ 0x24
 8008b28:	197c      	adds	r4, r7, r5
 8008b2a:	0019      	movs	r1, r3
 8008b2c:	0010      	movs	r0, r2
 8008b2e:	f7ff fb2b 	bl	8008188 <PCD_GET_EP_RX_CNT>
 8008b32:	0003      	movs	r3, r0
 8008b34:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 8008b36:	002c      	movs	r4, r5
 8008b38:	193b      	adds	r3, r7, r4
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d100      	bne.n	8008b42 <PCD_EP_ISR_Handler+0x31e>
 8008b40:	e07f      	b.n	8008c42 <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6818      	ldr	r0, [r3, #0]
 8008b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b48:	6959      	ldr	r1, [r3, #20]
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b4c:	88da      	ldrh	r2, [r3, #6]
 8008b4e:	193b      	adds	r3, r7, r4
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	f004 fd57 	bl	800d604 <USB_ReadPMA>
 8008b56:	e074      	b.n	8008c42 <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b5a:	78db      	ldrb	r3, [r3, #3]
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d117      	bne.n	8008b90 <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008b60:	2324      	movs	r3, #36	@ 0x24
 8008b62:	18fc      	adds	r4, r7, r3
 8008b64:	2332      	movs	r3, #50	@ 0x32
 8008b66:	18fb      	adds	r3, r7, r3
 8008b68:	881a      	ldrh	r2, [r3, #0]
 8008b6a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	0018      	movs	r0, r3
 8008b70:	f000 f9c8 	bl	8008f04 <HAL_PCD_EP_DB_Receive>
 8008b74:	0003      	movs	r3, r0
 8008b76:	8023      	strh	r3, [r4, #0]
 8008b78:	e063      	b.n	8008c42 <PCD_EP_ISR_Handler+0x41e>
 8008b7a:	46c0      	nop			@ (mov r8, r8)
 8008b7c:	07ff8f0f 	.word	0x07ff8f0f
 8008b80:	40009800 	.word	0x40009800
 8008b84:	07ff0f8f 	.word	0x07ff0f8f
 8008b88:	07ffbf8f 	.word	0x07ffbf8f
 8008b8c:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	001a      	movs	r2, r3
 8008b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b98:	781b      	ldrb	r3, [r3, #0]
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	18d3      	adds	r3, r2, r3
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4ad4      	ldr	r2, [pc, #848]	@ (8008ef4 <PCD_EP_ISR_Handler+0x6d0>)
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	61bb      	str	r3, [r7, #24]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	001a      	movs	r2, r3
 8008bac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	18d3      	adds	r3, r2, r3
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	49d0      	ldr	r1, [pc, #832]	@ (8008ef8 <PCD_EP_ISR_Handler+0x6d4>)
 8008bb8:	430a      	orrs	r2, r1
 8008bba:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	001a      	movs	r2, r3
 8008bc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bc4:	781b      	ldrb	r3, [r3, #0]
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	18d3      	adds	r3, r2, r3
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	2380      	movs	r3, #128	@ 0x80
 8008bce:	01db      	lsls	r3, r3, #7
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	d01b      	beq.n	8008c0c <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	2524      	movs	r5, #36	@ 0x24
 8008bde:	197c      	adds	r4, r7, r5
 8008be0:	0019      	movs	r1, r3
 8008be2:	0010      	movs	r0, r2
 8008be4:	f7ff faf2 	bl	80081cc <PCD_GET_EP_DBUF0_CNT>
 8008be8:	0003      	movs	r3, r0
 8008bea:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8008bec:	002c      	movs	r4, r5
 8008bee:	193b      	adds	r3, r7, r4
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d025      	beq.n	8008c42 <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6818      	ldr	r0, [r3, #0]
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bfc:	6959      	ldr	r1, [r3, #20]
 8008bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c00:	891a      	ldrh	r2, [r3, #8]
 8008c02:	193b      	adds	r3, r7, r4
 8008c04:	881b      	ldrh	r3, [r3, #0]
 8008c06:	f004 fcfd 	bl	800d604 <USB_ReadPMA>
 8008c0a:	e01a      	b.n	8008c42 <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	2524      	movs	r5, #36	@ 0x24
 8008c16:	197c      	adds	r4, r7, r5
 8008c18:	0019      	movs	r1, r3
 8008c1a:	0010      	movs	r0, r2
 8008c1c:	f7ff faf8 	bl	8008210 <PCD_GET_EP_DBUF1_CNT>
 8008c20:	0003      	movs	r3, r0
 8008c22:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 8008c24:	002c      	movs	r4, r5
 8008c26:	193b      	adds	r3, r7, r4
 8008c28:	881b      	ldrh	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d009      	beq.n	8008c42 <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c34:	6959      	ldr	r1, [r3, #20]
 8008c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c38:	895a      	ldrh	r2, [r3, #10]
 8008c3a:	193b      	adds	r3, r7, r4
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	f004 fce1 	bl	800d604 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8008c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c44:	69da      	ldr	r2, [r3, #28]
 8008c46:	2124      	movs	r1, #36	@ 0x24
 8008c48:	187b      	adds	r3, r7, r1
 8008c4a:	881b      	ldrh	r3, [r3, #0]
 8008c4c:	18d2      	adds	r2, r2, r3
 8008c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8008c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c54:	695a      	ldr	r2, [r3, #20]
 8008c56:	187b      	adds	r3, r7, r1
 8008c58:	881b      	ldrh	r3, [r3, #0]
 8008c5a:	18d2      	adds	r2, r2, r3
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8008c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <PCD_EP_ISR_Handler+0x450>
 8008c68:	187b      	adds	r3, r7, r1
 8008c6a:	881a      	ldrh	r2, [r3, #0]
 8008c6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6e:	691b      	ldr	r3, [r3, #16]
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d207      	bcs.n	8008c84 <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8008c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c76:	781a      	ldrb	r2, [r3, #0]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	0011      	movs	r1, r2
 8008c7c:	0018      	movs	r0, r3
 8008c7e:	f00c fce1 	bl	8015644 <HAL_PCD_DataOutStageCallback>
 8008c82:	e006      	b.n	8008c92 <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c8a:	0011      	movs	r1, r2
 8008c8c:	0018      	movs	r0, r3
 8008c8e:	f003 fbcb 	bl	800c428 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 8008c92:	2032      	movs	r0, #50	@ 0x32
 8008c94:	183b      	adds	r3, r7, r0
 8008c96:	881b      	ldrh	r3, [r3, #0]
 8008c98:	2280      	movs	r2, #128	@ 0x80
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	d100      	bne.n	8008ca0 <PCD_EP_ISR_Handler+0x47c>
 8008c9e:	e11c      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 8008ca0:	2121      	movs	r1, #33	@ 0x21
 8008ca2:	187b      	adds	r3, r7, r1
 8008ca4:	781a      	ldrb	r2, [r3, #0]
 8008ca6:	0013      	movs	r3, r2
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	189b      	adds	r3, r3, r2
 8008cac:	00db      	lsls	r3, r3, #3
 8008cae:	3310      	adds	r3, #16
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	18d3      	adds	r3, r2, r3
 8008cb4:	3304      	adds	r3, #4
 8008cb6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	001a      	movs	r2, r3
 8008cbe:	187b      	adds	r3, r7, r1
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	18d3      	adds	r3, r2, r3
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4a8c      	ldr	r2, [pc, #560]	@ (8008efc <PCD_EP_ISR_Handler+0x6d8>)
 8008cca:	4013      	ands	r3, r2
 8008ccc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	001a      	movs	r2, r3
 8008cd4:	187b      	adds	r3, r7, r1
 8008cd6:	781b      	ldrb	r3, [r3, #0]
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	18d3      	adds	r3, r2, r3
 8008cdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008cde:	2180      	movs	r1, #128	@ 0x80
 8008ce0:	0209      	lsls	r1, r1, #8
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8008ce6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ce8:	78db      	ldrb	r3, [r3, #3]
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d000      	beq.n	8008cf0 <PCD_EP_ISR_Handler+0x4cc>
 8008cee:	e0a3      	b.n	8008e38 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 8008cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	7b1b      	ldrb	r3, [r3, #12]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d100      	bne.n	8008d00 <PCD_EP_ISR_Handler+0x4dc>
 8008cfe:	e093      	b.n	8008e28 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008d00:	183b      	adds	r3, r7, r0
 8008d02:	881b      	ldrh	r3, [r3, #0]
 8008d04:	2240      	movs	r2, #64	@ 0x40
 8008d06:	4013      	ands	r3, r2
 8008d08:	d047      	beq.n	8008d9a <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0c:	785b      	ldrb	r3, [r3, #1]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d121      	bne.n	8008d56 <PCD_EP_ISR_Handler+0x532>
 8008d12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	4a79      	ldr	r2, [pc, #484]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008d1a:	4694      	mov	ip, r2
 8008d1c:	4463      	add	r3, ip
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	00db      	lsls	r3, r3, #3
 8008d26:	4976      	ldr	r1, [pc, #472]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008d28:	468c      	mov	ip, r1
 8008d2a:	4463      	add	r3, ip
 8008d2c:	0192      	lsls	r2, r2, #6
 8008d2e:	0992      	lsrs	r2, r2, #6
 8008d30:	601a      	str	r2, [r3, #0]
 8008d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	00db      	lsls	r3, r3, #3
 8008d38:	4a71      	ldr	r2, [pc, #452]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008d3a:	4694      	mov	ip, r2
 8008d3c:	4463      	add	r3, ip
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	496e      	ldr	r1, [pc, #440]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008d48:	468c      	mov	ip, r1
 8008d4a:	4463      	add	r3, ip
 8008d4c:	2180      	movs	r1, #128	@ 0x80
 8008d4e:	0609      	lsls	r1, r1, #24
 8008d50:	430a      	orrs	r2, r1
 8008d52:	601a      	str	r2, [r3, #0]
 8008d54:	e068      	b.n	8008e28 <PCD_EP_ISR_Handler+0x604>
 8008d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d164      	bne.n	8008e28 <PCD_EP_ISR_Handler+0x604>
 8008d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	00db      	lsls	r3, r3, #3
 8008d64:	4a66      	ldr	r2, [pc, #408]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008d66:	4694      	mov	ip, r2
 8008d68:	4463      	add	r3, ip
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d6e:	781b      	ldrb	r3, [r3, #0]
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	4963      	ldr	r1, [pc, #396]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008d74:	468c      	mov	ip, r1
 8008d76:	4463      	add	r3, ip
 8008d78:	0412      	lsls	r2, r2, #16
 8008d7a:	0c12      	lsrs	r2, r2, #16
 8008d7c:	601a      	str	r2, [r3, #0]
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	00db      	lsls	r3, r3, #3
 8008d84:	4a5e      	ldr	r2, [pc, #376]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008d86:	189a      	adds	r2, r3, r2
 8008d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	495c      	ldr	r1, [pc, #368]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008d90:	468c      	mov	ip, r1
 8008d92:	4463      	add	r3, ip
 8008d94:	6812      	ldr	r2, [r2, #0]
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	e046      	b.n	8008e28 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008d9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d9c:	785b      	ldrb	r3, [r3, #1]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d121      	bne.n	8008de6 <PCD_EP_ISR_Handler+0x5c2>
 8008da2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	00db      	lsls	r3, r3, #3
 8008da8:	4a55      	ldr	r2, [pc, #340]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008daa:	4694      	mov	ip, r2
 8008dac:	4463      	add	r3, ip
 8008dae:	685a      	ldr	r2, [r3, #4]
 8008db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	00db      	lsls	r3, r3, #3
 8008db6:	4952      	ldr	r1, [pc, #328]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008db8:	468c      	mov	ip, r1
 8008dba:	4463      	add	r3, ip
 8008dbc:	0192      	lsls	r2, r2, #6
 8008dbe:	0992      	lsrs	r2, r2, #6
 8008dc0:	605a      	str	r2, [r3, #4]
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc4:	781b      	ldrb	r3, [r3, #0]
 8008dc6:	00db      	lsls	r3, r3, #3
 8008dc8:	4a4d      	ldr	r2, [pc, #308]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008dca:	4694      	mov	ip, r2
 8008dcc:	4463      	add	r3, ip
 8008dce:	685a      	ldr	r2, [r3, #4]
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	494a      	ldr	r1, [pc, #296]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008dd8:	468c      	mov	ip, r1
 8008dda:	4463      	add	r3, ip
 8008ddc:	2180      	movs	r1, #128	@ 0x80
 8008dde:	0609      	lsls	r1, r1, #24
 8008de0:	430a      	orrs	r2, r1
 8008de2:	605a      	str	r2, [r3, #4]
 8008de4:	e020      	b.n	8008e28 <PCD_EP_ISR_Handler+0x604>
 8008de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d11c      	bne.n	8008e28 <PCD_EP_ISR_Handler+0x604>
 8008dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008df0:	781b      	ldrb	r3, [r3, #0]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4a42      	ldr	r2, [pc, #264]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008df6:	4694      	mov	ip, r2
 8008df8:	4463      	add	r3, ip
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	493f      	ldr	r1, [pc, #252]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008e04:	468c      	mov	ip, r1
 8008e06:	4463      	add	r3, ip
 8008e08:	0412      	lsls	r2, r2, #16
 8008e0a:	0c12      	lsrs	r2, r2, #16
 8008e0c:	605a      	str	r2, [r3, #4]
 8008e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	00db      	lsls	r3, r3, #3
 8008e14:	4a3a      	ldr	r2, [pc, #232]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008e16:	189a      	adds	r2, r3, r2
 8008e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e1a:	781b      	ldrb	r3, [r3, #0]
 8008e1c:	00db      	lsls	r3, r3, #3
 8008e1e:	4938      	ldr	r1, [pc, #224]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008e20:	468c      	mov	ip, r1
 8008e22:	4463      	add	r3, ip
 8008e24:	6852      	ldr	r2, [r2, #4]
 8008e26:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e2a:	781a      	ldrb	r2, [r3, #0]
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	0011      	movs	r1, r2
 8008e30:	0018      	movs	r0, r3
 8008e32:	f00c fb5f 	bl	80154f4 <HAL_PCD_DataInStageCallback>
 8008e36:	e050      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8008e38:	2332      	movs	r3, #50	@ 0x32
 8008e3a:	18fb      	adds	r3, r7, r3
 8008e3c:	881a      	ldrh	r2, [r3, #0]
 8008e3e:	2380      	movs	r3, #128	@ 0x80
 8008e40:	005b      	lsls	r3, r3, #1
 8008e42:	4013      	ands	r3, r2
 8008e44:	d141      	bne.n	8008eca <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008e46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	00db      	lsls	r3, r3, #3
 8008e4c:	4a2c      	ldr	r2, [pc, #176]	@ (8008f00 <PCD_EP_ISR_Handler+0x6dc>)
 8008e4e:	4694      	mov	ip, r2
 8008e50:	4463      	add	r3, ip
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	0c1b      	lsrs	r3, r3, #16
 8008e56:	b29a      	uxth	r2, r3
 8008e58:	2126      	movs	r1, #38	@ 0x26
 8008e5a:	187b      	adds	r3, r7, r1
 8008e5c:	0592      	lsls	r2, r2, #22
 8008e5e:	0d92      	lsrs	r2, r2, #22
 8008e60:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8008e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e64:	699a      	ldr	r2, [r3, #24]
 8008e66:	187b      	adds	r3, r7, r1
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	429a      	cmp	r2, r3
 8008e6c:	d907      	bls.n	8008e7e <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 8008e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e70:	699a      	ldr	r2, [r3, #24]
 8008e72:	187b      	adds	r3, r7, r1
 8008e74:	881b      	ldrh	r3, [r3, #0]
 8008e76:	1ad2      	subs	r2, r2, r3
 8008e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e7a:	619a      	str	r2, [r3, #24]
 8008e7c:	e002      	b.n	8008e84 <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e80:	2200      	movs	r2, #0
 8008e82:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8008e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d107      	bne.n	8008e9c <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8008e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e8e:	781a      	ldrb	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	0011      	movs	r1, r2
 8008e94:	0018      	movs	r0, r3
 8008e96:	f00c fb2d 	bl	80154f4 <HAL_PCD_DataInStageCallback>
 8008e9a:	e01e      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8008e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e9e:	695a      	ldr	r2, [r3, #20]
 8008ea0:	2126      	movs	r1, #38	@ 0x26
 8008ea2:	187b      	adds	r3, r7, r1
 8008ea4:	881b      	ldrh	r3, [r3, #0]
 8008ea6:	18d2      	adds	r2, r2, r3
 8008ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eaa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8008eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eae:	69da      	ldr	r2, [r3, #28]
 8008eb0:	187b      	adds	r3, r7, r1
 8008eb2:	881b      	ldrh	r3, [r3, #0]
 8008eb4:	18d2      	adds	r2, r2, r3
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ec0:	0011      	movs	r1, r2
 8008ec2:	0018      	movs	r0, r3
 8008ec4:	f003 fab0 	bl	800c428 <USB_EPStartXfer>
 8008ec8:	e007      	b.n	8008eda <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8008eca:	2332      	movs	r3, #50	@ 0x32
 8008ecc:	18fb      	adds	r3, r7, r3
 8008ece:	881a      	ldrh	r2, [r3, #0]
 8008ed0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	0018      	movs	r0, r3
 8008ed6:	f000 f8ff 	bl	80090d8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008ee0:	2380      	movs	r3, #128	@ 0x80
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	d000      	beq.n	8008eea <PCD_EP_ISR_Handler+0x6c6>
 8008ee8:	e4a1      	b.n	800882e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	0018      	movs	r0, r3
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	b00e      	add	sp, #56	@ 0x38
 8008ef2:	bdb0      	pop	{r4, r5, r7, pc}
 8008ef4:	07ff8f8f 	.word	0x07ff8f8f
 8008ef8:	000080c0 	.word	0x000080c0
 8008efc:	07ff8f0f 	.word	0x07ff8f0f
 8008f00:	40009800 	.word	0x40009800

08008f04 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8008f04:	b5b0      	push	{r4, r5, r7, lr}
 8008f06:	b08a      	sub	sp, #40	@ 0x28
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	1dbb      	adds	r3, r7, #6
 8008f10:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8008f12:	1dbb      	adds	r3, r7, #6
 8008f14:	881a      	ldrh	r2, [r3, #0]
 8008f16:	2380      	movs	r3, #128	@ 0x80
 8008f18:	01db      	lsls	r3, r3, #7
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	d067      	beq.n	8008fee <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	251e      	movs	r5, #30
 8008f28:	197c      	adds	r4, r7, r5
 8008f2a:	0019      	movs	r1, r3
 8008f2c:	0010      	movs	r0, r2
 8008f2e:	f7ff f94d 	bl	80081cc <PCD_GET_EP_DBUF0_CNT>
 8008f32:	0003      	movs	r3, r0
 8008f34:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	699a      	ldr	r2, [r3, #24]
 8008f3a:	197b      	adds	r3, r7, r5
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d307      	bcc.n	8008f52 <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	699a      	ldr	r2, [r3, #24]
 8008f46:	197b      	adds	r3, r7, r5
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	1ad2      	subs	r2, r2, r3
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	619a      	str	r2, [r3, #24]
 8008f50:	e002      	b.n	8008f58 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	2200      	movs	r2, #0
 8008f56:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d11a      	bne.n	8008f96 <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	001a      	movs	r2, r3
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	18d3      	adds	r3, r2, r3
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a55      	ldr	r2, [pc, #340]	@ (80090c8 <HAL_PCD_EP_DB_Receive+0x1c4>)
 8008f72:	4013      	ands	r3, r2
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	2280      	movs	r2, #128	@ 0x80
 8008f7a:	0192      	lsls	r2, r2, #6
 8008f7c:	4053      	eors	r3, r2
 8008f7e:	61bb      	str	r3, [r7, #24]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	001a      	movs	r2, r3
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	18d3      	adds	r3, r2, r3
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	494e      	ldr	r1, [pc, #312]	@ (80090cc <HAL_PCD_EP_DB_Receive+0x1c8>)
 8008f92:	430a      	orrs	r2, r1
 8008f94:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8008f96:	1dbb      	adds	r3, r7, #6
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	2240      	movs	r2, #64	@ 0x40
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	d015      	beq.n	8008fcc <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	001a      	movs	r2, r3
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	18d3      	adds	r3, r2, r3
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a47      	ldr	r2, [pc, #284]	@ (80090d0 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8008fb2:	4013      	ands	r3, r2
 8008fb4:	617b      	str	r3, [r7, #20]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	001a      	movs	r2, r3
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	18d3      	adds	r3, r2, r3
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	4943      	ldr	r1, [pc, #268]	@ (80090d4 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8008fc8:	430a      	orrs	r2, r1
 8008fca:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 8008fcc:	241e      	movs	r4, #30
 8008fce:	193b      	adds	r3, r7, r4
 8008fd0:	881b      	ldrh	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d100      	bne.n	8008fd8 <HAL_PCD_EP_DB_Receive+0xd4>
 8008fd6:	e070      	b.n	80090ba <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	6818      	ldr	r0, [r3, #0]
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	6959      	ldr	r1, [r3, #20]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	891a      	ldrh	r2, [r3, #8]
 8008fe4:	193b      	adds	r3, r7, r4
 8008fe6:	881b      	ldrh	r3, [r3, #0]
 8008fe8:	f004 fb0c 	bl	800d604 <USB_ReadPMA>
 8008fec:	e065      	b.n	80090ba <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	251e      	movs	r5, #30
 8008ff8:	197c      	adds	r4, r7, r5
 8008ffa:	0019      	movs	r1, r3
 8008ffc:	0010      	movs	r0, r2
 8008ffe:	f7ff f907 	bl	8008210 <PCD_GET_EP_DBUF1_CNT>
 8009002:	0003      	movs	r3, r0
 8009004:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	699a      	ldr	r2, [r3, #24]
 800900a:	197b      	adds	r3, r7, r5
 800900c:	881b      	ldrh	r3, [r3, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d307      	bcc.n	8009022 <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	699a      	ldr	r2, [r3, #24]
 8009016:	197b      	adds	r3, r7, r5
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	1ad2      	subs	r2, r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	619a      	str	r2, [r3, #24]
 8009020:	e002      	b.n	8009028 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d11a      	bne.n	8009066 <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	001a      	movs	r2, r3
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	781b      	ldrb	r3, [r3, #0]
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	18d3      	adds	r3, r2, r3
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a21      	ldr	r2, [pc, #132]	@ (80090c8 <HAL_PCD_EP_DB_Receive+0x1c4>)
 8009042:	4013      	ands	r3, r2
 8009044:	627b      	str	r3, [r7, #36]	@ 0x24
 8009046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009048:	2280      	movs	r2, #128	@ 0x80
 800904a:	0192      	lsls	r2, r2, #6
 800904c:	4053      	eors	r3, r2
 800904e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	001a      	movs	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	781b      	ldrb	r3, [r3, #0]
 800905a:	009b      	lsls	r3, r3, #2
 800905c:	18d3      	adds	r3, r2, r3
 800905e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009060:	491a      	ldr	r1, [pc, #104]	@ (80090cc <HAL_PCD_EP_DB_Receive+0x1c8>)
 8009062:	430a      	orrs	r2, r1
 8009064:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009066:	1dbb      	adds	r3, r7, #6
 8009068:	881b      	ldrh	r3, [r3, #0]
 800906a:	2240      	movs	r2, #64	@ 0x40
 800906c:	4013      	ands	r3, r2
 800906e:	d115      	bne.n	800909c <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	001a      	movs	r2, r3
 8009076:	68bb      	ldr	r3, [r7, #8]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	18d3      	adds	r3, r2, r3
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a13      	ldr	r2, [pc, #76]	@ (80090d0 <HAL_PCD_EP_DB_Receive+0x1cc>)
 8009082:	4013      	ands	r3, r2
 8009084:	623b      	str	r3, [r7, #32]
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	001a      	movs	r2, r3
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	009b      	lsls	r3, r3, #2
 8009092:	18d3      	adds	r3, r2, r3
 8009094:	6a3a      	ldr	r2, [r7, #32]
 8009096:	490f      	ldr	r1, [pc, #60]	@ (80090d4 <HAL_PCD_EP_DB_Receive+0x1d0>)
 8009098:	430a      	orrs	r2, r1
 800909a:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800909c:	241e      	movs	r4, #30
 800909e:	193b      	adds	r3, r7, r4
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d009      	beq.n	80090ba <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6818      	ldr	r0, [r3, #0]
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	6959      	ldr	r1, [r3, #20]
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	895a      	ldrh	r2, [r3, #10]
 80090b2:	193b      	adds	r3, r7, r4
 80090b4:	881b      	ldrh	r3, [r3, #0]
 80090b6:	f004 faa5 	bl	800d604 <USB_ReadPMA>
    }
  }

  return count;
 80090ba:	231e      	movs	r3, #30
 80090bc:	18fb      	adds	r3, r7, r3
 80090be:	881b      	ldrh	r3, [r3, #0]
}
 80090c0:	0018      	movs	r0, r3
 80090c2:	46bd      	mov	sp, r7
 80090c4:	b00a      	add	sp, #40	@ 0x28
 80090c6:	bdb0      	pop	{r4, r5, r7, pc}
 80090c8:	07ffbf8f 	.word	0x07ffbf8f
 80090cc:	00008080 	.word	0x00008080
 80090d0:	07ff8f8f 	.word	0x07ff8f8f
 80090d4:	000080c0 	.word	0x000080c0

080090d8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80090d8:	b5b0      	push	{r4, r5, r7, lr}
 80090da:	b08e      	sub	sp, #56	@ 0x38
 80090dc:	af00      	add	r7, sp, #0
 80090de:	60f8      	str	r0, [r7, #12]
 80090e0:	60b9      	str	r1, [r7, #8]
 80090e2:	1dbb      	adds	r3, r7, #6
 80090e4:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80090e6:	1dbb      	adds	r3, r7, #6
 80090e8:	881b      	ldrh	r3, [r3, #0]
 80090ea:	2240      	movs	r2, #64	@ 0x40
 80090ec:	4013      	ands	r3, r2
 80090ee:	d100      	bne.n	80090f2 <HAL_PCD_EP_DB_Transmit+0x1a>
 80090f0:	e1c3      	b.n	800947a <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681a      	ldr	r2, [r3, #0]
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	251e      	movs	r5, #30
 80090fc:	197c      	adds	r4, r7, r5
 80090fe:	0019      	movs	r1, r3
 8009100:	0010      	movs	r0, r2
 8009102:	f7ff f863 	bl	80081cc <PCD_GET_EP_DBUF0_CNT>
 8009106:	0003      	movs	r3, r0
 8009108:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	699a      	ldr	r2, [r3, #24]
 800910e:	197b      	adds	r3, r7, r5
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	429a      	cmp	r2, r3
 8009114:	d907      	bls.n	8009126 <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	699a      	ldr	r2, [r3, #24]
 800911a:	197b      	adds	r3, r7, r5
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	1ad2      	subs	r2, r2, r3
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	619a      	str	r2, [r3, #24]
 8009124:	e002      	b.n	800912c <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	2200      	movs	r2, #0
 800912a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d000      	beq.n	8009136 <HAL_PCD_EP_DB_Transmit+0x5e>
 8009134:	e0b2      	b.n	800929c <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	785b      	ldrb	r3, [r3, #1]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d121      	bne.n	8009182 <HAL_PCD_EP_DB_Transmit+0xaa>
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	00db      	lsls	r3, r3, #3
 8009144:	4ada      	ldr	r2, [pc, #872]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009146:	4694      	mov	ip, r2
 8009148:	4463      	add	r3, ip
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	49d7      	ldr	r1, [pc, #860]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009154:	468c      	mov	ip, r1
 8009156:	4463      	add	r3, ip
 8009158:	0192      	lsls	r2, r2, #6
 800915a:	0992      	lsrs	r2, r2, #6
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	781b      	ldrb	r3, [r3, #0]
 8009162:	00db      	lsls	r3, r3, #3
 8009164:	4ad2      	ldr	r2, [pc, #840]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009166:	4694      	mov	ip, r2
 8009168:	4463      	add	r3, ip
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	68bb      	ldr	r3, [r7, #8]
 800916e:	781b      	ldrb	r3, [r3, #0]
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	49cf      	ldr	r1, [pc, #828]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009174:	468c      	mov	ip, r1
 8009176:	4463      	add	r3, ip
 8009178:	2180      	movs	r1, #128	@ 0x80
 800917a:	0609      	lsls	r1, r1, #24
 800917c:	430a      	orrs	r2, r1
 800917e:	601a      	str	r2, [r3, #0]
 8009180:	e020      	b.n	80091c4 <HAL_PCD_EP_DB_Transmit+0xec>
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	785b      	ldrb	r3, [r3, #1]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d11c      	bne.n	80091c4 <HAL_PCD_EP_DB_Transmit+0xec>
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	00db      	lsls	r3, r3, #3
 8009190:	4ac7      	ldr	r2, [pc, #796]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009192:	4694      	mov	ip, r2
 8009194:	4463      	add	r3, ip
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	49c4      	ldr	r1, [pc, #784]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80091a0:	468c      	mov	ip, r1
 80091a2:	4463      	add	r3, ip
 80091a4:	0412      	lsls	r2, r2, #16
 80091a6:	0c12      	lsrs	r2, r2, #16
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	00db      	lsls	r3, r3, #3
 80091b0:	4abf      	ldr	r2, [pc, #764]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80091b2:	189a      	adds	r2, r3, r2
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	49bd      	ldr	r1, [pc, #756]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80091bc:	468c      	mov	ip, r1
 80091be:	4463      	add	r3, ip
 80091c0:	6812      	ldr	r2, [r2, #0]
 80091c2:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d121      	bne.n	8009210 <HAL_PCD_EP_DB_Transmit+0x138>
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	781b      	ldrb	r3, [r3, #0]
 80091d0:	00db      	lsls	r3, r3, #3
 80091d2:	4ab7      	ldr	r2, [pc, #732]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80091d4:	4694      	mov	ip, r2
 80091d6:	4463      	add	r3, ip
 80091d8:	685a      	ldr	r2, [r3, #4]
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	781b      	ldrb	r3, [r3, #0]
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	49b3      	ldr	r1, [pc, #716]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80091e2:	468c      	mov	ip, r1
 80091e4:	4463      	add	r3, ip
 80091e6:	0192      	lsls	r2, r2, #6
 80091e8:	0992      	lsrs	r2, r2, #6
 80091ea:	605a      	str	r2, [r3, #4]
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	781b      	ldrb	r3, [r3, #0]
 80091f0:	00db      	lsls	r3, r3, #3
 80091f2:	4aaf      	ldr	r2, [pc, #700]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80091f4:	4694      	mov	ip, r2
 80091f6:	4463      	add	r3, ip
 80091f8:	685a      	ldr	r2, [r3, #4]
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	00db      	lsls	r3, r3, #3
 8009200:	49ab      	ldr	r1, [pc, #684]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009202:	468c      	mov	ip, r1
 8009204:	4463      	add	r3, ip
 8009206:	2180      	movs	r1, #128	@ 0x80
 8009208:	0609      	lsls	r1, r1, #24
 800920a:	430a      	orrs	r2, r1
 800920c:	605a      	str	r2, [r3, #4]
 800920e:	e020      	b.n	8009252 <HAL_PCD_EP_DB_Transmit+0x17a>
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	785b      	ldrb	r3, [r3, #1]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d11c      	bne.n	8009252 <HAL_PCD_EP_DB_Transmit+0x17a>
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	781b      	ldrb	r3, [r3, #0]
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	4aa4      	ldr	r2, [pc, #656]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009220:	4694      	mov	ip, r2
 8009222:	4463      	add	r3, ip
 8009224:	685a      	ldr	r2, [r3, #4]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	00db      	lsls	r3, r3, #3
 800922c:	49a0      	ldr	r1, [pc, #640]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800922e:	468c      	mov	ip, r1
 8009230:	4463      	add	r3, ip
 8009232:	0412      	lsls	r2, r2, #16
 8009234:	0c12      	lsrs	r2, r2, #16
 8009236:	605a      	str	r2, [r3, #4]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	00db      	lsls	r3, r3, #3
 800923e:	4a9c      	ldr	r2, [pc, #624]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009240:	189a      	adds	r2, r3, r2
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	00db      	lsls	r3, r3, #3
 8009248:	4999      	ldr	r1, [pc, #612]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800924a:	468c      	mov	ip, r1
 800924c:	4463      	add	r3, ip
 800924e:	6852      	ldr	r2, [r2, #4]
 8009250:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	0011      	movs	r1, r2
 800925a:	0018      	movs	r0, r3
 800925c:	f00c f94a 	bl	80154f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009260:	1dbb      	adds	r3, r7, #6
 8009262:	881a      	ldrh	r2, [r3, #0]
 8009264:	2380      	movs	r3, #128	@ 0x80
 8009266:	01db      	lsls	r3, r3, #7
 8009268:	4013      	ands	r3, r2
 800926a:	d100      	bne.n	800926e <HAL_PCD_EP_DB_Transmit+0x196>
 800926c:	e2d5      	b.n	800981a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	001a      	movs	r2, r3
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	18d3      	adds	r3, r2, r3
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a8d      	ldr	r2, [pc, #564]	@ (80094b4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 8009280:	4013      	ands	r3, r2
 8009282:	637b      	str	r3, [r7, #52]	@ 0x34
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	001a      	movs	r2, r3
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	18d3      	adds	r3, r2, r3
 8009292:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009294:	4988      	ldr	r1, [pc, #544]	@ (80094b8 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 8009296:	430a      	orrs	r2, r1
 8009298:	601a      	str	r2, [r3, #0]
 800929a:	e2be      	b.n	800981a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800929c:	1dbb      	adds	r3, r7, #6
 800929e:	881a      	ldrh	r2, [r3, #0]
 80092a0:	2380      	movs	r3, #128	@ 0x80
 80092a2:	01db      	lsls	r3, r3, #7
 80092a4:	4013      	ands	r3, r2
 80092a6:	d015      	beq.n	80092d4 <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	001a      	movs	r2, r3
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	18d3      	adds	r3, r2, r3
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4a7e      	ldr	r2, [pc, #504]	@ (80094b4 <HAL_PCD_EP_DB_Transmit+0x3dc>)
 80092ba:	4013      	ands	r3, r2
 80092bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	001a      	movs	r2, r3
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	18d3      	adds	r3, r2, r3
 80092cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80092ce:	497a      	ldr	r1, [pc, #488]	@ (80094b8 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 80092d0:	430a      	orrs	r2, r1
 80092d2:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80092d4:	68bb      	ldr	r3, [r7, #8]
 80092d6:	2224      	movs	r2, #36	@ 0x24
 80092d8:	5c9b      	ldrb	r3, [r3, r2]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d000      	beq.n	80092e0 <HAL_PCD_EP_DB_Transmit+0x208>
 80092de:	e29c      	b.n	800981a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	695a      	ldr	r2, [r3, #20]
 80092e4:	211e      	movs	r1, #30
 80092e6:	187b      	adds	r3, r7, r1
 80092e8:	881b      	ldrh	r3, [r3, #0]
 80092ea:	18d2      	adds	r2, r2, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	69da      	ldr	r2, [r3, #28]
 80092f4:	187b      	adds	r3, r7, r1
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	18d2      	adds	r2, r2, r3
 80092fa:	68bb      	ldr	r3, [r7, #8]
 80092fc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6a1a      	ldr	r2, [r3, #32]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	429a      	cmp	r2, r3
 8009308:	d309      	bcc.n	800931e <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	6a1a      	ldr	r2, [r3, #32]
 8009314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009316:	1ad2      	subs	r2, r2, r3
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	621a      	str	r2, [r3, #32]
 800931c:	e016      	b.n	800934c <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	6a1b      	ldr	r3, [r3, #32]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d108      	bne.n	8009338 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 8009326:	231e      	movs	r3, #30
 8009328:	18fb      	adds	r3, r7, r3
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	2224      	movs	r2, #36	@ 0x24
 8009332:	2100      	movs	r1, #0
 8009334:	5499      	strb	r1, [r3, r2]
 8009336:	e009      	b.n	800934c <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2224      	movs	r2, #36	@ 0x24
 800933c:	2100      	movs	r1, #0
 800933e:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	2200      	movs	r2, #0
 800934a:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	785b      	ldrb	r3, [r3, #1]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d162      	bne.n	800941a <HAL_PCD_EP_DB_Transmit+0x342>
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	00db      	lsls	r3, r3, #3
 800935a:	4a55      	ldr	r2, [pc, #340]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800935c:	4694      	mov	ip, r2
 800935e:	4463      	add	r3, ip
 8009360:	681a      	ldr	r2, [r3, #0]
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	00db      	lsls	r3, r3, #3
 8009368:	4951      	ldr	r1, [pc, #324]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800936a:	468c      	mov	ip, r1
 800936c:	4463      	add	r3, ip
 800936e:	0192      	lsls	r2, r2, #6
 8009370:	0992      	lsrs	r2, r2, #6
 8009372:	601a      	str	r2, [r3, #0]
 8009374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009376:	2b3e      	cmp	r3, #62	@ 0x3e
 8009378:	d91e      	bls.n	80093b8 <HAL_PCD_EP_DB_Transmit+0x2e0>
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009382:	221f      	movs	r2, #31
 8009384:	4013      	ands	r3, r2
 8009386:	d102      	bne.n	800938e <HAL_PCD_EP_DB_Transmit+0x2b6>
 8009388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800938a:	3b01      	subs	r3, #1
 800938c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	00db      	lsls	r3, r3, #3
 8009394:	4a46      	ldr	r2, [pc, #280]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009396:	4694      	mov	ip, r2
 8009398:	4463      	add	r3, ip
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939e:	069b      	lsls	r3, r3, #26
 80093a0:	431a      	orrs	r2, r3
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4941      	ldr	r1, [pc, #260]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80093aa:	468c      	mov	ip, r1
 80093ac:	4463      	add	r3, ip
 80093ae:	2180      	movs	r1, #128	@ 0x80
 80093b0:	0609      	lsls	r1, r1, #24
 80093b2:	430a      	orrs	r2, r1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	e055      	b.n	8009464 <HAL_PCD_EP_DB_Transmit+0x38c>
 80093b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d111      	bne.n	80093e2 <HAL_PCD_EP_DB_Transmit+0x30a>
 80093be:	68bb      	ldr	r3, [r7, #8]
 80093c0:	781b      	ldrb	r3, [r3, #0]
 80093c2:	00db      	lsls	r3, r3, #3
 80093c4:	4a3a      	ldr	r2, [pc, #232]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80093c6:	4694      	mov	ip, r2
 80093c8:	4463      	add	r3, ip
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	00db      	lsls	r3, r3, #3
 80093d2:	4937      	ldr	r1, [pc, #220]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80093d4:	468c      	mov	ip, r1
 80093d6:	4463      	add	r3, ip
 80093d8:	2180      	movs	r1, #128	@ 0x80
 80093da:	0609      	lsls	r1, r1, #24
 80093dc:	430a      	orrs	r2, r1
 80093de:	601a      	str	r2, [r3, #0]
 80093e0:	e040      	b.n	8009464 <HAL_PCD_EP_DB_Transmit+0x38c>
 80093e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e4:	085b      	lsrs	r3, r3, #1
 80093e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ea:	2201      	movs	r2, #1
 80093ec:	4013      	ands	r3, r2
 80093ee:	d002      	beq.n	80093f6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	3301      	adds	r3, #1
 80093f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	4a2c      	ldr	r2, [pc, #176]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 80093fe:	4694      	mov	ip, r2
 8009400:	4463      	add	r3, ip
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009406:	069a      	lsls	r2, r3, #26
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	4828      	ldr	r0, [pc, #160]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009410:	4684      	mov	ip, r0
 8009412:	4463      	add	r3, ip
 8009414:	430a      	orrs	r2, r1
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	e024      	b.n	8009464 <HAL_PCD_EP_DB_Transmit+0x38c>
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	2b01      	cmp	r3, #1
 8009420:	d120      	bne.n	8009464 <HAL_PCD_EP_DB_Transmit+0x38c>
 8009422:	68bb      	ldr	r3, [r7, #8]
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	00db      	lsls	r3, r3, #3
 8009428:	4a21      	ldr	r2, [pc, #132]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800942a:	4694      	mov	ip, r2
 800942c:	4463      	add	r3, ip
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	00db      	lsls	r3, r3, #3
 8009436:	491e      	ldr	r1, [pc, #120]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 8009438:	468c      	mov	ip, r1
 800943a:	4463      	add	r3, ip
 800943c:	0412      	lsls	r2, r2, #16
 800943e:	0c12      	lsrs	r2, r2, #16
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	68bb      	ldr	r3, [r7, #8]
 8009444:	781b      	ldrb	r3, [r3, #0]
 8009446:	00db      	lsls	r3, r3, #3
 8009448:	4a19      	ldr	r2, [pc, #100]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800944a:	4694      	mov	ip, r2
 800944c:	4463      	add	r3, ip
 800944e:	6819      	ldr	r1, [r3, #0]
 8009450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009452:	041a      	lsls	r2, r3, #16
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	00db      	lsls	r3, r3, #3
 800945a:	4815      	ldr	r0, [pc, #84]	@ (80094b0 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800945c:	4684      	mov	ip, r0
 800945e:	4463      	add	r3, ip
 8009460:	430a      	orrs	r2, r1
 8009462:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	6959      	ldr	r1, [r3, #20]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	891a      	ldrh	r2, [r3, #8]
 8009470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009472:	b29b      	uxth	r3, r3
 8009474:	f004 f850 	bl	800d518 <USB_WritePMA>
 8009478:	e1cf      	b.n	800981a <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	781b      	ldrb	r3, [r3, #0]
 8009482:	251e      	movs	r5, #30
 8009484:	197c      	adds	r4, r7, r5
 8009486:	0019      	movs	r1, r3
 8009488:	0010      	movs	r0, r2
 800948a:	f7fe fec1 	bl	8008210 <PCD_GET_EP_DBUF1_CNT>
 800948e:	0003      	movs	r3, r0
 8009490:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	699a      	ldr	r2, [r3, #24]
 8009496:	197b      	adds	r3, r7, r5
 8009498:	881b      	ldrh	r3, [r3, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d30e      	bcc.n	80094bc <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	699a      	ldr	r2, [r3, #24]
 80094a2:	197b      	adds	r3, r7, r5
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	1ad2      	subs	r2, r2, r3
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	619a      	str	r2, [r3, #24]
 80094ac:	e009      	b.n	80094c2 <HAL_PCD_EP_DB_Transmit+0x3ea>
 80094ae:	46c0      	nop			@ (mov r8, r8)
 80094b0:	40009800 	.word	0x40009800
 80094b4:	07ff8f8f 	.word	0x07ff8f8f
 80094b8:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2200      	movs	r2, #0
 80094c0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	699b      	ldr	r3, [r3, #24]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d000      	beq.n	80094cc <HAL_PCD_EP_DB_Transmit+0x3f4>
 80094ca:	e0b2      	b.n	8009632 <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	785b      	ldrb	r3, [r3, #1]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d121      	bne.n	8009518 <HAL_PCD_EP_DB_Transmit+0x440>
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	781b      	ldrb	r3, [r3, #0]
 80094d8:	00db      	lsls	r3, r3, #3
 80094da:	4ab5      	ldr	r2, [pc, #724]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80094dc:	4694      	mov	ip, r2
 80094de:	4463      	add	r3, ip
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	49b1      	ldr	r1, [pc, #708]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80094ea:	468c      	mov	ip, r1
 80094ec:	4463      	add	r3, ip
 80094ee:	0192      	lsls	r2, r2, #6
 80094f0:	0992      	lsrs	r2, r2, #6
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	781b      	ldrb	r3, [r3, #0]
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	4aad      	ldr	r2, [pc, #692]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80094fc:	4694      	mov	ip, r2
 80094fe:	4463      	add	r3, ip
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	49a9      	ldr	r1, [pc, #676]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800950a:	468c      	mov	ip, r1
 800950c:	4463      	add	r3, ip
 800950e:	2180      	movs	r1, #128	@ 0x80
 8009510:	0609      	lsls	r1, r1, #24
 8009512:	430a      	orrs	r2, r1
 8009514:	601a      	str	r2, [r3, #0]
 8009516:	e020      	b.n	800955a <HAL_PCD_EP_DB_Transmit+0x482>
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	785b      	ldrb	r3, [r3, #1]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d11c      	bne.n	800955a <HAL_PCD_EP_DB_Transmit+0x482>
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	4aa2      	ldr	r2, [pc, #648]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009528:	4694      	mov	ip, r2
 800952a:	4463      	add	r3, ip
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	781b      	ldrb	r3, [r3, #0]
 8009532:	00db      	lsls	r3, r3, #3
 8009534:	499e      	ldr	r1, [pc, #632]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009536:	468c      	mov	ip, r1
 8009538:	4463      	add	r3, ip
 800953a:	0412      	lsls	r2, r2, #16
 800953c:	0c12      	lsrs	r2, r2, #16
 800953e:	601a      	str	r2, [r3, #0]
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	00db      	lsls	r3, r3, #3
 8009546:	4a9a      	ldr	r2, [pc, #616]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009548:	189a      	adds	r2, r3, r2
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	4997      	ldr	r1, [pc, #604]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009552:	468c      	mov	ip, r1
 8009554:	4463      	add	r3, ip
 8009556:	6812      	ldr	r2, [r2, #0]
 8009558:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d121      	bne.n	80095a6 <HAL_PCD_EP_DB_Transmit+0x4ce>
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	4a91      	ldr	r2, [pc, #580]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800956a:	4694      	mov	ip, r2
 800956c:	4463      	add	r3, ip
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	00db      	lsls	r3, r3, #3
 8009576:	498e      	ldr	r1, [pc, #568]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009578:	468c      	mov	ip, r1
 800957a:	4463      	add	r3, ip
 800957c:	0192      	lsls	r2, r2, #6
 800957e:	0992      	lsrs	r2, r2, #6
 8009580:	605a      	str	r2, [r3, #4]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	00db      	lsls	r3, r3, #3
 8009588:	4a89      	ldr	r2, [pc, #548]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800958a:	4694      	mov	ip, r2
 800958c:	4463      	add	r3, ip
 800958e:	685a      	ldr	r2, [r3, #4]
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	00db      	lsls	r3, r3, #3
 8009596:	4986      	ldr	r1, [pc, #536]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009598:	468c      	mov	ip, r1
 800959a:	4463      	add	r3, ip
 800959c:	2180      	movs	r1, #128	@ 0x80
 800959e:	0609      	lsls	r1, r1, #24
 80095a0:	430a      	orrs	r2, r1
 80095a2:	605a      	str	r2, [r3, #4]
 80095a4:	e020      	b.n	80095e8 <HAL_PCD_EP_DB_Transmit+0x510>
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d11c      	bne.n	80095e8 <HAL_PCD_EP_DB_Transmit+0x510>
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	781b      	ldrb	r3, [r3, #0]
 80095b2:	00db      	lsls	r3, r3, #3
 80095b4:	4a7e      	ldr	r2, [pc, #504]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80095b6:	4694      	mov	ip, r2
 80095b8:	4463      	add	r3, ip
 80095ba:	685a      	ldr	r2, [r3, #4]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	00db      	lsls	r3, r3, #3
 80095c2:	497b      	ldr	r1, [pc, #492]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80095c4:	468c      	mov	ip, r1
 80095c6:	4463      	add	r3, ip
 80095c8:	0412      	lsls	r2, r2, #16
 80095ca:	0c12      	lsrs	r2, r2, #16
 80095cc:	605a      	str	r2, [r3, #4]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	00db      	lsls	r3, r3, #3
 80095d4:	4a76      	ldr	r2, [pc, #472]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80095d6:	189a      	adds	r2, r3, r2
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	4974      	ldr	r1, [pc, #464]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80095e0:	468c      	mov	ip, r1
 80095e2:	4463      	add	r3, ip
 80095e4:	6852      	ldr	r2, [r2, #4]
 80095e6:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	0011      	movs	r1, r2
 80095f0:	0018      	movs	r0, r3
 80095f2:	f00b ff7f 	bl	80154f4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80095f6:	1dbb      	adds	r3, r7, #6
 80095f8:	881a      	ldrh	r2, [r3, #0]
 80095fa:	2380      	movs	r3, #128	@ 0x80
 80095fc:	01db      	lsls	r3, r3, #7
 80095fe:	4013      	ands	r3, r2
 8009600:	d000      	beq.n	8009604 <HAL_PCD_EP_DB_Transmit+0x52c>
 8009602:	e10a      	b.n	800981a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	001a      	movs	r2, r3
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	18d3      	adds	r3, r2, r3
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a67      	ldr	r2, [pc, #412]	@ (80097b4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8009616:	4013      	ands	r3, r2
 8009618:	623b      	str	r3, [r7, #32]
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	001a      	movs	r2, r3
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	781b      	ldrb	r3, [r3, #0]
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	18d3      	adds	r3, r2, r3
 8009628:	6a3a      	ldr	r2, [r7, #32]
 800962a:	4963      	ldr	r1, [pc, #396]	@ (80097b8 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800962c:	430a      	orrs	r2, r1
 800962e:	601a      	str	r2, [r3, #0]
 8009630:	e0f3      	b.n	800981a <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009632:	1dbb      	adds	r3, r7, #6
 8009634:	881a      	ldrh	r2, [r3, #0]
 8009636:	2380      	movs	r3, #128	@ 0x80
 8009638:	01db      	lsls	r3, r3, #7
 800963a:	4013      	ands	r3, r2
 800963c:	d115      	bne.n	800966a <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	001a      	movs	r2, r3
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	18d3      	adds	r3, r2, r3
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	4a59      	ldr	r2, [pc, #356]	@ (80097b4 <HAL_PCD_EP_DB_Transmit+0x6dc>)
 8009650:	4013      	ands	r3, r2
 8009652:	617b      	str	r3, [r7, #20]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	001a      	movs	r2, r3
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	18d3      	adds	r3, r2, r3
 8009662:	697a      	ldr	r2, [r7, #20]
 8009664:	4954      	ldr	r1, [pc, #336]	@ (80097b8 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 8009666:	430a      	orrs	r2, r1
 8009668:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	2224      	movs	r2, #36	@ 0x24
 800966e:	5c9b      	ldrb	r3, [r3, r2]
 8009670:	2b01      	cmp	r3, #1
 8009672:	d000      	beq.n	8009676 <HAL_PCD_EP_DB_Transmit+0x59e>
 8009674:	e0d1      	b.n	800981a <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	695a      	ldr	r2, [r3, #20]
 800967a:	211e      	movs	r1, #30
 800967c:	187b      	adds	r3, r7, r1
 800967e:	881b      	ldrh	r3, [r3, #0]
 8009680:	18d2      	adds	r2, r2, r3
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	69da      	ldr	r2, [r3, #28]
 800968a:	187b      	adds	r3, r7, r1
 800968c:	881b      	ldrh	r3, [r3, #0]
 800968e:	18d2      	adds	r2, r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	6a1a      	ldr	r2, [r3, #32]
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	691b      	ldr	r3, [r3, #16]
 800969c:	429a      	cmp	r2, r3
 800969e:	d309      	bcc.n	80096b4 <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 80096a6:	68bb      	ldr	r3, [r7, #8]
 80096a8:	6a1a      	ldr	r2, [r3, #32]
 80096aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ac:	1ad2      	subs	r2, r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	621a      	str	r2, [r3, #32]
 80096b2:	e016      	b.n	80096e2 <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d108      	bne.n	80096ce <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 80096bc:	231e      	movs	r3, #30
 80096be:	18fb      	adds	r3, r7, r3
 80096c0:	881b      	ldrh	r3, [r3, #0]
 80096c2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	2224      	movs	r2, #36	@ 0x24
 80096c8:	2100      	movs	r1, #0
 80096ca:	5499      	strb	r1, [r3, r2]
 80096cc:	e009      	b.n	80096e2 <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2200      	movs	r2, #0
 80096d8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2224      	movs	r2, #36	@ 0x24
 80096de:	2100      	movs	r1, #0
 80096e0:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d168      	bne.n	80097bc <HAL_PCD_EP_DB_Transmit+0x6e4>
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	4a2f      	ldr	r2, [pc, #188]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80096f2:	4694      	mov	ip, r2
 80096f4:	4463      	add	r3, ip
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	00db      	lsls	r3, r3, #3
 80096fe:	492c      	ldr	r1, [pc, #176]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009700:	468c      	mov	ip, r1
 8009702:	4463      	add	r3, ip
 8009704:	0192      	lsls	r2, r2, #6
 8009706:	0992      	lsrs	r2, r2, #6
 8009708:	605a      	str	r2, [r3, #4]
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	2b3e      	cmp	r3, #62	@ 0x3e
 800970e:	d91e      	bls.n	800974e <HAL_PCD_EP_DB_Transmit+0x676>
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	095b      	lsrs	r3, r3, #5
 8009714:	61bb      	str	r3, [r7, #24]
 8009716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009718:	221f      	movs	r2, #31
 800971a:	4013      	ands	r3, r2
 800971c:	d102      	bne.n	8009724 <HAL_PCD_EP_DB_Transmit+0x64c>
 800971e:	69bb      	ldr	r3, [r7, #24]
 8009720:	3b01      	subs	r3, #1
 8009722:	61bb      	str	r3, [r7, #24]
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	00db      	lsls	r3, r3, #3
 800972a:	4a21      	ldr	r2, [pc, #132]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800972c:	4694      	mov	ip, r2
 800972e:	4463      	add	r3, ip
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	69bb      	ldr	r3, [r7, #24]
 8009734:	069b      	lsls	r3, r3, #26
 8009736:	431a      	orrs	r2, r3
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	491c      	ldr	r1, [pc, #112]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009740:	468c      	mov	ip, r1
 8009742:	4463      	add	r3, ip
 8009744:	2180      	movs	r1, #128	@ 0x80
 8009746:	0609      	lsls	r1, r1, #24
 8009748:	430a      	orrs	r2, r1
 800974a:	605a      	str	r2, [r3, #4]
 800974c:	e05b      	b.n	8009806 <HAL_PCD_EP_DB_Transmit+0x72e>
 800974e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009750:	2b00      	cmp	r3, #0
 8009752:	d111      	bne.n	8009778 <HAL_PCD_EP_DB_Transmit+0x6a0>
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	00db      	lsls	r3, r3, #3
 800975a:	4a15      	ldr	r2, [pc, #84]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800975c:	4694      	mov	ip, r2
 800975e:	4463      	add	r3, ip
 8009760:	685a      	ldr	r2, [r3, #4]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	781b      	ldrb	r3, [r3, #0]
 8009766:	00db      	lsls	r3, r3, #3
 8009768:	4911      	ldr	r1, [pc, #68]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800976a:	468c      	mov	ip, r1
 800976c:	4463      	add	r3, ip
 800976e:	2180      	movs	r1, #128	@ 0x80
 8009770:	0609      	lsls	r1, r1, #24
 8009772:	430a      	orrs	r2, r1
 8009774:	605a      	str	r2, [r3, #4]
 8009776:	e046      	b.n	8009806 <HAL_PCD_EP_DB_Transmit+0x72e>
 8009778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977a:	085b      	lsrs	r3, r3, #1
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009780:	2201      	movs	r2, #1
 8009782:	4013      	ands	r3, r2
 8009784:	d002      	beq.n	800978c <HAL_PCD_EP_DB_Transmit+0x6b4>
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	3301      	adds	r3, #1
 800978a:	61bb      	str	r3, [r7, #24]
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	781b      	ldrb	r3, [r3, #0]
 8009790:	00db      	lsls	r3, r3, #3
 8009792:	4a07      	ldr	r2, [pc, #28]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 8009794:	4694      	mov	ip, r2
 8009796:	4463      	add	r3, ip
 8009798:	6859      	ldr	r1, [r3, #4]
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	069a      	lsls	r2, r3, #26
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	4802      	ldr	r0, [pc, #8]	@ (80097b0 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 80097a6:	4684      	mov	ip, r0
 80097a8:	4463      	add	r3, ip
 80097aa:	430a      	orrs	r2, r1
 80097ac:	605a      	str	r2, [r3, #4]
 80097ae:	e02a      	b.n	8009806 <HAL_PCD_EP_DB_Transmit+0x72e>
 80097b0:	40009800 	.word	0x40009800
 80097b4:	07ff8f8f 	.word	0x07ff8f8f
 80097b8:	0000c080 	.word	0x0000c080
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	785b      	ldrb	r3, [r3, #1]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d120      	bne.n	8009806 <HAL_PCD_EP_DB_Transmit+0x72e>
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	781b      	ldrb	r3, [r3, #0]
 80097c8:	00db      	lsls	r3, r3, #3
 80097ca:	4a25      	ldr	r2, [pc, #148]	@ (8009860 <HAL_PCD_EP_DB_Transmit+0x788>)
 80097cc:	4694      	mov	ip, r2
 80097ce:	4463      	add	r3, ip
 80097d0:	685a      	ldr	r2, [r3, #4]
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	00db      	lsls	r3, r3, #3
 80097d8:	4921      	ldr	r1, [pc, #132]	@ (8009860 <HAL_PCD_EP_DB_Transmit+0x788>)
 80097da:	468c      	mov	ip, r1
 80097dc:	4463      	add	r3, ip
 80097de:	0412      	lsls	r2, r2, #16
 80097e0:	0c12      	lsrs	r2, r2, #16
 80097e2:	605a      	str	r2, [r3, #4]
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	4a1d      	ldr	r2, [pc, #116]	@ (8009860 <HAL_PCD_EP_DB_Transmit+0x788>)
 80097ec:	4694      	mov	ip, r2
 80097ee:	4463      	add	r3, ip
 80097f0:	6859      	ldr	r1, [r3, #4]
 80097f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f4:	041a      	lsls	r2, r3, #16
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	4818      	ldr	r0, [pc, #96]	@ (8009860 <HAL_PCD_EP_DB_Transmit+0x788>)
 80097fe:	4684      	mov	ip, r0
 8009800:	4463      	add	r3, ip
 8009802:	430a      	orrs	r2, r1
 8009804:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	6818      	ldr	r0, [r3, #0]
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6959      	ldr	r1, [r3, #20]
 800980e:	68bb      	ldr	r3, [r7, #8]
 8009810:	895a      	ldrh	r2, [r3, #10]
 8009812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009814:	b29b      	uxth	r3, r3
 8009816:	f003 fe7f 	bl	800d518 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	001a      	movs	r2, r3
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	009b      	lsls	r3, r3, #2
 8009826:	18d3      	adds	r3, r2, r3
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a0e      	ldr	r2, [pc, #56]	@ (8009864 <HAL_PCD_EP_DB_Transmit+0x78c>)
 800982c:	4013      	ands	r3, r2
 800982e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009832:	2210      	movs	r2, #16
 8009834:	4053      	eors	r3, r2
 8009836:	633b      	str	r3, [r7, #48]	@ 0x30
 8009838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800983a:	2220      	movs	r2, #32
 800983c:	4053      	eors	r3, r2
 800983e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	001a      	movs	r2, r3
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	009b      	lsls	r3, r3, #2
 800984c:	18d3      	adds	r3, r2, r3
 800984e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009850:	4905      	ldr	r1, [pc, #20]	@ (8009868 <HAL_PCD_EP_DB_Transmit+0x790>)
 8009852:	430a      	orrs	r2, r1
 8009854:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009856:	2300      	movs	r3, #0
}
 8009858:	0018      	movs	r0, r3
 800985a:	46bd      	mov	sp, r7
 800985c:	b00e      	add	sp, #56	@ 0x38
 800985e:	bdb0      	pop	{r4, r5, r7, pc}
 8009860:	40009800 	.word	0x40009800
 8009864:	07ff8fbf 	.word	0x07ff8fbf
 8009868:	00008080 	.word	0x00008080

0800986c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	000a      	movs	r2, r1
 8009876:	1cfb      	adds	r3, r7, #3
 8009878:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800987a:	46c0      	nop			@ (mov r8, r8)
 800987c:	46bd      	mov	sp, r7
 800987e:	b002      	add	sp, #8
 8009880:	bd80      	pop	{r7, pc}
	...

08009884 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800988c:	4b19      	ldr	r3, [pc, #100]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a19      	ldr	r2, [pc, #100]	@ (80098f8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8009892:	4013      	ands	r3, r2
 8009894:	0019      	movs	r1, r3
 8009896:	4b17      	ldr	r3, [pc, #92]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	430a      	orrs	r2, r1
 800989c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	2380      	movs	r3, #128	@ 0x80
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	429a      	cmp	r2, r3
 80098a6:	d11f      	bne.n	80098e8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80098a8:	4b14      	ldr	r3, [pc, #80]	@ (80098fc <HAL_PWREx_ControlVoltageScaling+0x78>)
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	0013      	movs	r3, r2
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	189b      	adds	r3, r3, r2
 80098b2:	005b      	lsls	r3, r3, #1
 80098b4:	4912      	ldr	r1, [pc, #72]	@ (8009900 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80098b6:	0018      	movs	r0, r3
 80098b8:	f7fc fdbc 	bl	8006434 <__udivsi3>
 80098bc:	0003      	movs	r3, r0
 80098be:	3301      	adds	r3, #1
 80098c0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80098c2:	e008      	b.n	80098d6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	3b01      	subs	r3, #1
 80098ce:	60fb      	str	r3, [r7, #12]
 80098d0:	e001      	b.n	80098d6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e009      	b.n	80098ea <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80098d6:	4b07      	ldr	r3, [pc, #28]	@ (80098f4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	2380      	movs	r3, #128	@ 0x80
 80098dc:	00db      	lsls	r3, r3, #3
 80098de:	401a      	ands	r2, r3
 80098e0:	2380      	movs	r3, #128	@ 0x80
 80098e2:	00db      	lsls	r3, r3, #3
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d0ed      	beq.n	80098c4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80098e8:	2300      	movs	r3, #0
}
 80098ea:	0018      	movs	r0, r3
 80098ec:	46bd      	mov	sp, r7
 80098ee:	b004      	add	sp, #16
 80098f0:	bd80      	pop	{r7, pc}
 80098f2:	46c0      	nop			@ (mov r8, r8)
 80098f4:	40007000 	.word	0x40007000
 80098f8:	fffff9ff 	.word	0xfffff9ff
 80098fc:	20000004 	.word	0x20000004
 8009900:	000f4240 	.word	0x000f4240

08009904 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8009908:	4b03      	ldr	r3, [pc, #12]	@ (8009918 <LL_RCC_GetAPB1Prescaler+0x14>)
 800990a:	689a      	ldr	r2, [r3, #8]
 800990c:	23e0      	movs	r3, #224	@ 0xe0
 800990e:	01db      	lsls	r3, r3, #7
 8009910:	4013      	ands	r3, r2
}
 8009912:	0018      	movs	r0, r3
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	40021000 	.word	0x40021000

0800991c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d102      	bne.n	8009930 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800992a:	2301      	movs	r3, #1
 800992c:	f000 fb50 	bl	8009fd0 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	2201      	movs	r2, #1
 8009936:	4013      	ands	r3, r2
 8009938:	d100      	bne.n	800993c <HAL_RCC_OscConfig+0x20>
 800993a:	e07c      	b.n	8009a36 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800993c:	4bc3      	ldr	r3, [pc, #780]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 800993e:	689b      	ldr	r3, [r3, #8]
 8009940:	2238      	movs	r2, #56	@ 0x38
 8009942:	4013      	ands	r3, r2
 8009944:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009946:	4bc1      	ldr	r3, [pc, #772]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	2203      	movs	r2, #3
 800994c:	4013      	ands	r3, r2
 800994e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	2b10      	cmp	r3, #16
 8009954:	d102      	bne.n	800995c <HAL_RCC_OscConfig+0x40>
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	2b03      	cmp	r3, #3
 800995a:	d002      	beq.n	8009962 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	2b08      	cmp	r3, #8
 8009960:	d10b      	bne.n	800997a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009962:	4bba      	ldr	r3, [pc, #744]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	2380      	movs	r3, #128	@ 0x80
 8009968:	029b      	lsls	r3, r3, #10
 800996a:	4013      	ands	r3, r2
 800996c:	d062      	beq.n	8009a34 <HAL_RCC_OscConfig+0x118>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	685b      	ldr	r3, [r3, #4]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d15e      	bne.n	8009a34 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e32a      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	685a      	ldr	r2, [r3, #4]
 800997e:	2380      	movs	r3, #128	@ 0x80
 8009980:	025b      	lsls	r3, r3, #9
 8009982:	429a      	cmp	r2, r3
 8009984:	d107      	bne.n	8009996 <HAL_RCC_OscConfig+0x7a>
 8009986:	4bb1      	ldr	r3, [pc, #708]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	4bb0      	ldr	r3, [pc, #704]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 800998c:	2180      	movs	r1, #128	@ 0x80
 800998e:	0249      	lsls	r1, r1, #9
 8009990:	430a      	orrs	r2, r1
 8009992:	601a      	str	r2, [r3, #0]
 8009994:	e020      	b.n	80099d8 <HAL_RCC_OscConfig+0xbc>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	23a0      	movs	r3, #160	@ 0xa0
 800999c:	02db      	lsls	r3, r3, #11
 800999e:	429a      	cmp	r2, r3
 80099a0:	d10e      	bne.n	80099c0 <HAL_RCC_OscConfig+0xa4>
 80099a2:	4baa      	ldr	r3, [pc, #680]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	4ba9      	ldr	r3, [pc, #676]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099a8:	2180      	movs	r1, #128	@ 0x80
 80099aa:	02c9      	lsls	r1, r1, #11
 80099ac:	430a      	orrs	r2, r1
 80099ae:	601a      	str	r2, [r3, #0]
 80099b0:	4ba6      	ldr	r3, [pc, #664]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	4ba5      	ldr	r3, [pc, #660]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099b6:	2180      	movs	r1, #128	@ 0x80
 80099b8:	0249      	lsls	r1, r1, #9
 80099ba:	430a      	orrs	r2, r1
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e00b      	b.n	80099d8 <HAL_RCC_OscConfig+0xbc>
 80099c0:	4ba2      	ldr	r3, [pc, #648]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099c2:	681a      	ldr	r2, [r3, #0]
 80099c4:	4ba1      	ldr	r3, [pc, #644]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099c6:	49a2      	ldr	r1, [pc, #648]	@ (8009c50 <HAL_RCC_OscConfig+0x334>)
 80099c8:	400a      	ands	r2, r1
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	4b9f      	ldr	r3, [pc, #636]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	4b9e      	ldr	r3, [pc, #632]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099d2:	49a0      	ldr	r1, [pc, #640]	@ (8009c54 <HAL_RCC_OscConfig+0x338>)
 80099d4:	400a      	ands	r2, r1
 80099d6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d014      	beq.n	8009a0a <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099e0:	f7fd ffcc 	bl	800797c <HAL_GetTick>
 80099e4:	0003      	movs	r3, r0
 80099e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099e8:	e008      	b.n	80099fc <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80099ea:	f7fd ffc7 	bl	800797c <HAL_GetTick>
 80099ee:	0002      	movs	r2, r0
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	1ad3      	subs	r3, r2, r3
 80099f4:	2b64      	cmp	r3, #100	@ 0x64
 80099f6:	d901      	bls.n	80099fc <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e2e9      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099fc:	4b93      	ldr	r3, [pc, #588]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 80099fe:	681a      	ldr	r2, [r3, #0]
 8009a00:	2380      	movs	r3, #128	@ 0x80
 8009a02:	029b      	lsls	r3, r3, #10
 8009a04:	4013      	ands	r3, r2
 8009a06:	d0f0      	beq.n	80099ea <HAL_RCC_OscConfig+0xce>
 8009a08:	e015      	b.n	8009a36 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a0a:	f7fd ffb7 	bl	800797c <HAL_GetTick>
 8009a0e:	0003      	movs	r3, r0
 8009a10:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a12:	e008      	b.n	8009a26 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a14:	f7fd ffb2 	bl	800797c <HAL_GetTick>
 8009a18:	0002      	movs	r2, r0
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	1ad3      	subs	r3, r2, r3
 8009a1e:	2b64      	cmp	r3, #100	@ 0x64
 8009a20:	d901      	bls.n	8009a26 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e2d4      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009a26:	4b89      	ldr	r3, [pc, #548]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	2380      	movs	r3, #128	@ 0x80
 8009a2c:	029b      	lsls	r3, r3, #10
 8009a2e:	4013      	ands	r3, r2
 8009a30:	d1f0      	bne.n	8009a14 <HAL_RCC_OscConfig+0xf8>
 8009a32:	e000      	b.n	8009a36 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a34:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2202      	movs	r2, #2
 8009a3c:	4013      	ands	r3, r2
 8009a3e:	d100      	bne.n	8009a42 <HAL_RCC_OscConfig+0x126>
 8009a40:	e099      	b.n	8009b76 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a42:	4b82      	ldr	r3, [pc, #520]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	2238      	movs	r2, #56	@ 0x38
 8009a48:	4013      	ands	r3, r2
 8009a4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	2203      	movs	r2, #3
 8009a52:	4013      	ands	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8009a56:	69bb      	ldr	r3, [r7, #24]
 8009a58:	2b10      	cmp	r3, #16
 8009a5a:	d102      	bne.n	8009a62 <HAL_RCC_OscConfig+0x146>
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d002      	beq.n	8009a68 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d135      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009a68:	4b78      	ldr	r3, [pc, #480]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	2380      	movs	r3, #128	@ 0x80
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	4013      	ands	r3, r2
 8009a72:	d005      	beq.n	8009a80 <HAL_RCC_OscConfig+0x164>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d101      	bne.n	8009a80 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	e2a7      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009a80:	4b72      	ldr	r3, [pc, #456]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	4a74      	ldr	r2, [pc, #464]	@ (8009c58 <HAL_RCC_OscConfig+0x33c>)
 8009a86:	4013      	ands	r3, r2
 8009a88:	0019      	movs	r1, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	021a      	lsls	r2, r3, #8
 8009a90:	4b6e      	ldr	r3, [pc, #440]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009a92:	430a      	orrs	r2, r1
 8009a94:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d112      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009a9c:	4b6b      	ldr	r3, [pc, #428]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a6e      	ldr	r2, [pc, #440]	@ (8009c5c <HAL_RCC_OscConfig+0x340>)
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	0019      	movs	r1, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	691a      	ldr	r2, [r3, #16]
 8009aaa:	4b68      	ldr	r3, [pc, #416]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009aac:	430a      	orrs	r2, r1
 8009aae:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8009ab0:	4b66      	ldr	r3, [pc, #408]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	0adb      	lsrs	r3, r3, #11
 8009ab6:	2207      	movs	r2, #7
 8009ab8:	4013      	ands	r3, r2
 8009aba:	4a69      	ldr	r2, [pc, #420]	@ (8009c60 <HAL_RCC_OscConfig+0x344>)
 8009abc:	40da      	lsrs	r2, r3
 8009abe:	4b69      	ldr	r3, [pc, #420]	@ (8009c64 <HAL_RCC_OscConfig+0x348>)
 8009ac0:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009ac2:	4b69      	ldr	r3, [pc, #420]	@ (8009c68 <HAL_RCC_OscConfig+0x34c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	0018      	movs	r0, r3
 8009ac8:	f7fd f972 	bl	8006db0 <HAL_InitTick>
 8009acc:	1e03      	subs	r3, r0, #0
 8009ace:	d051      	beq.n	8009b74 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e27d      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d030      	beq.n	8009b3e <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8009adc:	4b5b      	ldr	r3, [pc, #364]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a5e      	ldr	r2, [pc, #376]	@ (8009c5c <HAL_RCC_OscConfig+0x340>)
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	0019      	movs	r1, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	691a      	ldr	r2, [r3, #16]
 8009aea:	4b58      	ldr	r3, [pc, #352]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009aec:	430a      	orrs	r2, r1
 8009aee:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8009af0:	4b56      	ldr	r3, [pc, #344]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009af2:	681a      	ldr	r2, [r3, #0]
 8009af4:	4b55      	ldr	r3, [pc, #340]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009af6:	2180      	movs	r1, #128	@ 0x80
 8009af8:	0049      	lsls	r1, r1, #1
 8009afa:	430a      	orrs	r2, r1
 8009afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009afe:	f7fd ff3d 	bl	800797c <HAL_GetTick>
 8009b02:	0003      	movs	r3, r0
 8009b04:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b06:	e008      	b.n	8009b1a <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b08:	f7fd ff38 	bl	800797c <HAL_GetTick>
 8009b0c:	0002      	movs	r2, r0
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	1ad3      	subs	r3, r2, r3
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d901      	bls.n	8009b1a <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8009b16:	2303      	movs	r3, #3
 8009b18:	e25a      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009b1a:	4b4c      	ldr	r3, [pc, #304]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009b1c:	681a      	ldr	r2, [r3, #0]
 8009b1e:	2380      	movs	r3, #128	@ 0x80
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	4013      	ands	r3, r2
 8009b24:	d0f0      	beq.n	8009b08 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b26:	4b49      	ldr	r3, [pc, #292]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	4a4b      	ldr	r2, [pc, #300]	@ (8009c58 <HAL_RCC_OscConfig+0x33c>)
 8009b2c:	4013      	ands	r3, r2
 8009b2e:	0019      	movs	r1, r3
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	021a      	lsls	r2, r3, #8
 8009b36:	4b45      	ldr	r3, [pc, #276]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009b38:	430a      	orrs	r2, r1
 8009b3a:	605a      	str	r2, [r3, #4]
 8009b3c:	e01b      	b.n	8009b76 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8009b3e:	4b43      	ldr	r3, [pc, #268]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4b42      	ldr	r3, [pc, #264]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009b44:	4949      	ldr	r1, [pc, #292]	@ (8009c6c <HAL_RCC_OscConfig+0x350>)
 8009b46:	400a      	ands	r2, r1
 8009b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b4a:	f7fd ff17 	bl	800797c <HAL_GetTick>
 8009b4e:	0003      	movs	r3, r0
 8009b50:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b52:	e008      	b.n	8009b66 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b54:	f7fd ff12 	bl	800797c <HAL_GetTick>
 8009b58:	0002      	movs	r2, r0
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d901      	bls.n	8009b66 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8009b62:	2303      	movs	r3, #3
 8009b64:	e234      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009b66:	4b39      	ldr	r3, [pc, #228]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009b68:	681a      	ldr	r2, [r3, #0]
 8009b6a:	2380      	movs	r3, #128	@ 0x80
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4013      	ands	r3, r2
 8009b70:	d1f0      	bne.n	8009b54 <HAL_RCC_OscConfig+0x238>
 8009b72:	e000      	b.n	8009b76 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b74:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2208      	movs	r2, #8
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d047      	beq.n	8009c10 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8009b80:	4b32      	ldr	r3, [pc, #200]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	2238      	movs	r2, #56	@ 0x38
 8009b86:	4013      	ands	r3, r2
 8009b88:	2b18      	cmp	r3, #24
 8009b8a:	d10a      	bne.n	8009ba2 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8009b8c:	4b2f      	ldr	r3, [pc, #188]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009b8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009b90:	2202      	movs	r2, #2
 8009b92:	4013      	ands	r3, r2
 8009b94:	d03c      	beq.n	8009c10 <HAL_RCC_OscConfig+0x2f4>
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	699b      	ldr	r3, [r3, #24]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d138      	bne.n	8009c10 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e216      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	699b      	ldr	r3, [r3, #24]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d019      	beq.n	8009bde <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8009baa:	4b28      	ldr	r3, [pc, #160]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009bac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009bae:	4b27      	ldr	r3, [pc, #156]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009bb0:	2101      	movs	r1, #1
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bb6:	f7fd fee1 	bl	800797c <HAL_GetTick>
 8009bba:	0003      	movs	r3, r0
 8009bbc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009bbe:	e008      	b.n	8009bd2 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bc0:	f7fd fedc 	bl	800797c <HAL_GetTick>
 8009bc4:	0002      	movs	r2, r0
 8009bc6:	693b      	ldr	r3, [r7, #16]
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	d901      	bls.n	8009bd2 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8009bce:	2303      	movs	r3, #3
 8009bd0:	e1fe      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009bd2:	4b1e      	ldr	r3, [pc, #120]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009bd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	4013      	ands	r3, r2
 8009bda:	d0f1      	beq.n	8009bc0 <HAL_RCC_OscConfig+0x2a4>
 8009bdc:	e018      	b.n	8009c10 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8009bde:	4b1b      	ldr	r3, [pc, #108]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009be0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009be2:	4b1a      	ldr	r3, [pc, #104]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009be4:	2101      	movs	r1, #1
 8009be6:	438a      	bics	r2, r1
 8009be8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bea:	f7fd fec7 	bl	800797c <HAL_GetTick>
 8009bee:	0003      	movs	r3, r0
 8009bf0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009bf2:	e008      	b.n	8009c06 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009bf4:	f7fd fec2 	bl	800797c <HAL_GetTick>
 8009bf8:	0002      	movs	r2, r0
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	1ad3      	subs	r3, r2, r3
 8009bfe:	2b02      	cmp	r3, #2
 8009c00:	d901      	bls.n	8009c06 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8009c02:	2303      	movs	r3, #3
 8009c04:	e1e4      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009c06:	4b11      	ldr	r3, [pc, #68]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009c08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009c0a:	2202      	movs	r2, #2
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	d1f1      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	2204      	movs	r2, #4
 8009c16:	4013      	ands	r3, r2
 8009c18:	d100      	bne.n	8009c1c <HAL_RCC_OscConfig+0x300>
 8009c1a:	e0c7      	b.n	8009dac <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009c1c:	231f      	movs	r3, #31
 8009c1e:	18fb      	adds	r3, r7, r3
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8009c24:	4b09      	ldr	r3, [pc, #36]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	2238      	movs	r2, #56	@ 0x38
 8009c2a:	4013      	ands	r3, r2
 8009c2c:	2b20      	cmp	r3, #32
 8009c2e:	d11f      	bne.n	8009c70 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8009c30:	4b06      	ldr	r3, [pc, #24]	@ (8009c4c <HAL_RCC_OscConfig+0x330>)
 8009c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009c34:	2202      	movs	r2, #2
 8009c36:	4013      	ands	r3, r2
 8009c38:	d100      	bne.n	8009c3c <HAL_RCC_OscConfig+0x320>
 8009c3a:	e0b7      	b.n	8009dac <HAL_RCC_OscConfig+0x490>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d000      	beq.n	8009c46 <HAL_RCC_OscConfig+0x32a>
 8009c44:	e0b2      	b.n	8009dac <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e1c2      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
 8009c4a:	46c0      	nop			@ (mov r8, r8)
 8009c4c:	40021000 	.word	0x40021000
 8009c50:	fffeffff 	.word	0xfffeffff
 8009c54:	fffbffff 	.word	0xfffbffff
 8009c58:	ffff80ff 	.word	0xffff80ff
 8009c5c:	ffffc7ff 	.word	0xffffc7ff
 8009c60:	00f42400 	.word	0x00f42400
 8009c64:	20000004 	.word	0x20000004
 8009c68:	20000008 	.word	0x20000008
 8009c6c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009c70:	4bb5      	ldr	r3, [pc, #724]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c74:	2380      	movs	r3, #128	@ 0x80
 8009c76:	055b      	lsls	r3, r3, #21
 8009c78:	4013      	ands	r3, r2
 8009c7a:	d101      	bne.n	8009c80 <HAL_RCC_OscConfig+0x364>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e000      	b.n	8009c82 <HAL_RCC_OscConfig+0x366>
 8009c80:	2300      	movs	r3, #0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d011      	beq.n	8009caa <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009c86:	4bb0      	ldr	r3, [pc, #704]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009c88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c8a:	4baf      	ldr	r3, [pc, #700]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009c8c:	2180      	movs	r1, #128	@ 0x80
 8009c8e:	0549      	lsls	r1, r1, #21
 8009c90:	430a      	orrs	r2, r1
 8009c92:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009c94:	4bac      	ldr	r3, [pc, #688]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009c96:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c98:	2380      	movs	r3, #128	@ 0x80
 8009c9a:	055b      	lsls	r3, r3, #21
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8009ca2:	231f      	movs	r3, #31
 8009ca4:	18fb      	adds	r3, r7, r3
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009caa:	4ba8      	ldr	r3, [pc, #672]	@ (8009f4c <HAL_RCC_OscConfig+0x630>)
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	2380      	movs	r3, #128	@ 0x80
 8009cb0:	005b      	lsls	r3, r3, #1
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	d11a      	bne.n	8009cec <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009cb6:	4ba5      	ldr	r3, [pc, #660]	@ (8009f4c <HAL_RCC_OscConfig+0x630>)
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	4ba4      	ldr	r3, [pc, #656]	@ (8009f4c <HAL_RCC_OscConfig+0x630>)
 8009cbc:	2180      	movs	r1, #128	@ 0x80
 8009cbe:	0049      	lsls	r1, r1, #1
 8009cc0:	430a      	orrs	r2, r1
 8009cc2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8009cc4:	f7fd fe5a 	bl	800797c <HAL_GetTick>
 8009cc8:	0003      	movs	r3, r0
 8009cca:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ccc:	e008      	b.n	8009ce0 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cce:	f7fd fe55 	bl	800797c <HAL_GetTick>
 8009cd2:	0002      	movs	r2, r0
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	1ad3      	subs	r3, r2, r3
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d901      	bls.n	8009ce0 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8009cdc:	2303      	movs	r3, #3
 8009cde:	e177      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ce0:	4b9a      	ldr	r3, [pc, #616]	@ (8009f4c <HAL_RCC_OscConfig+0x630>)
 8009ce2:	681a      	ldr	r2, [r3, #0]
 8009ce4:	2380      	movs	r3, #128	@ 0x80
 8009ce6:	005b      	lsls	r3, r3, #1
 8009ce8:	4013      	ands	r3, r2
 8009cea:	d0f0      	beq.n	8009cce <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d106      	bne.n	8009d02 <HAL_RCC_OscConfig+0x3e6>
 8009cf4:	4b94      	ldr	r3, [pc, #592]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009cf6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009cf8:	4b93      	ldr	r3, [pc, #588]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	430a      	orrs	r2, r1
 8009cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d00:	e01c      	b.n	8009d3c <HAL_RCC_OscConfig+0x420>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d10c      	bne.n	8009d24 <HAL_RCC_OscConfig+0x408>
 8009d0a:	4b8f      	ldr	r3, [pc, #572]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d0e:	4b8e      	ldr	r3, [pc, #568]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d10:	2104      	movs	r1, #4
 8009d12:	430a      	orrs	r2, r1
 8009d14:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d16:	4b8c      	ldr	r3, [pc, #560]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	430a      	orrs	r2, r1
 8009d20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d22:	e00b      	b.n	8009d3c <HAL_RCC_OscConfig+0x420>
 8009d24:	4b88      	ldr	r3, [pc, #544]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d28:	4b87      	ldr	r3, [pc, #540]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	438a      	bics	r2, r1
 8009d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009d30:	4b85      	ldr	r3, [pc, #532]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009d34:	4b84      	ldr	r3, [pc, #528]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d36:	2104      	movs	r1, #4
 8009d38:	438a      	bics	r2, r1
 8009d3a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	689b      	ldr	r3, [r3, #8]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d014      	beq.n	8009d6e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d44:	f7fd fe1a 	bl	800797c <HAL_GetTick>
 8009d48:	0003      	movs	r3, r0
 8009d4a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d4c:	e009      	b.n	8009d62 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d4e:	f7fd fe15 	bl	800797c <HAL_GetTick>
 8009d52:	0002      	movs	r2, r0
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	1ad3      	subs	r3, r2, r3
 8009d58:	4a7d      	ldr	r2, [pc, #500]	@ (8009f50 <HAL_RCC_OscConfig+0x634>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d901      	bls.n	8009d62 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	e136      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009d62:	4b79      	ldr	r3, [pc, #484]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d66:	2202      	movs	r2, #2
 8009d68:	4013      	ands	r3, r2
 8009d6a:	d0f0      	beq.n	8009d4e <HAL_RCC_OscConfig+0x432>
 8009d6c:	e013      	b.n	8009d96 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d6e:	f7fd fe05 	bl	800797c <HAL_GetTick>
 8009d72:	0003      	movs	r3, r0
 8009d74:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d76:	e009      	b.n	8009d8c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d78:	f7fd fe00 	bl	800797c <HAL_GetTick>
 8009d7c:	0002      	movs	r2, r0
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	1ad3      	subs	r3, r2, r3
 8009d82:	4a73      	ldr	r2, [pc, #460]	@ (8009f50 <HAL_RCC_OscConfig+0x634>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d901      	bls.n	8009d8c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e121      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009d8c:	4b6e      	ldr	r3, [pc, #440]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009d8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d90:	2202      	movs	r2, #2
 8009d92:	4013      	ands	r3, r2
 8009d94:	d1f0      	bne.n	8009d78 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8009d96:	231f      	movs	r3, #31
 8009d98:	18fb      	adds	r3, r7, r3
 8009d9a:	781b      	ldrb	r3, [r3, #0]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d105      	bne.n	8009dac <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8009da0:	4b69      	ldr	r3, [pc, #420]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009da4:	4b68      	ldr	r3, [pc, #416]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009da6:	496b      	ldr	r1, [pc, #428]	@ (8009f54 <HAL_RCC_OscConfig+0x638>)
 8009da8:	400a      	ands	r2, r1
 8009daa:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	2220      	movs	r2, #32
 8009db2:	4013      	ands	r3, r2
 8009db4:	d039      	beq.n	8009e2a <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	69db      	ldr	r3, [r3, #28]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d01b      	beq.n	8009df6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009dbe:	4b62      	ldr	r3, [pc, #392]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009dc0:	681a      	ldr	r2, [r3, #0]
 8009dc2:	4b61      	ldr	r3, [pc, #388]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009dc4:	2180      	movs	r1, #128	@ 0x80
 8009dc6:	03c9      	lsls	r1, r1, #15
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dcc:	f7fd fdd6 	bl	800797c <HAL_GetTick>
 8009dd0:	0003      	movs	r3, r0
 8009dd2:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009dd4:	e008      	b.n	8009de8 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009dd6:	f7fd fdd1 	bl	800797c <HAL_GetTick>
 8009dda:	0002      	movs	r2, r0
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	2b02      	cmp	r3, #2
 8009de2:	d901      	bls.n	8009de8 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8009de4:	2303      	movs	r3, #3
 8009de6:	e0f3      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009de8:	4b57      	ldr	r3, [pc, #348]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	2380      	movs	r3, #128	@ 0x80
 8009dee:	041b      	lsls	r3, r3, #16
 8009df0:	4013      	ands	r3, r2
 8009df2:	d0f0      	beq.n	8009dd6 <HAL_RCC_OscConfig+0x4ba>
 8009df4:	e019      	b.n	8009e2a <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009df6:	4b54      	ldr	r3, [pc, #336]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009df8:	681a      	ldr	r2, [r3, #0]
 8009dfa:	4b53      	ldr	r3, [pc, #332]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009dfc:	4956      	ldr	r1, [pc, #344]	@ (8009f58 <HAL_RCC_OscConfig+0x63c>)
 8009dfe:	400a      	ands	r2, r1
 8009e00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e02:	f7fd fdbb 	bl	800797c <HAL_GetTick>
 8009e06:	0003      	movs	r3, r0
 8009e08:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009e0a:	e008      	b.n	8009e1e <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e0c:	f7fd fdb6 	bl	800797c <HAL_GetTick>
 8009e10:	0002      	movs	r2, r0
 8009e12:	693b      	ldr	r3, [r7, #16]
 8009e14:	1ad3      	subs	r3, r2, r3
 8009e16:	2b02      	cmp	r3, #2
 8009e18:	d901      	bls.n	8009e1e <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e0d8      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8009e1e:	4b4a      	ldr	r3, [pc, #296]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	2380      	movs	r3, #128	@ 0x80
 8009e24:	041b      	lsls	r3, r3, #16
 8009e26:	4013      	ands	r3, r2
 8009e28:	d1f0      	bne.n	8009e0c <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d100      	bne.n	8009e34 <HAL_RCC_OscConfig+0x518>
 8009e32:	e0cc      	b.n	8009fce <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e34:	4b44      	ldr	r3, [pc, #272]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	2238      	movs	r2, #56	@ 0x38
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b10      	cmp	r3, #16
 8009e3e:	d100      	bne.n	8009e42 <HAL_RCC_OscConfig+0x526>
 8009e40:	e07b      	b.n	8009f3a <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	d156      	bne.n	8009ef8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e4a:	4b3f      	ldr	r3, [pc, #252]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	4b3e      	ldr	r3, [pc, #248]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009e50:	4942      	ldr	r1, [pc, #264]	@ (8009f5c <HAL_RCC_OscConfig+0x640>)
 8009e52:	400a      	ands	r2, r1
 8009e54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e56:	f7fd fd91 	bl	800797c <HAL_GetTick>
 8009e5a:	0003      	movs	r3, r0
 8009e5c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e5e:	e008      	b.n	8009e72 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e60:	f7fd fd8c 	bl	800797c <HAL_GetTick>
 8009e64:	0002      	movs	r2, r0
 8009e66:	693b      	ldr	r3, [r7, #16]
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d901      	bls.n	8009e72 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e0ae      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e72:	4b35      	ldr	r3, [pc, #212]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	2380      	movs	r3, #128	@ 0x80
 8009e78:	049b      	lsls	r3, r3, #18
 8009e7a:	4013      	ands	r3, r2
 8009e7c:	d1f0      	bne.n	8009e60 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e7e:	4b32      	ldr	r3, [pc, #200]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	4a37      	ldr	r2, [pc, #220]	@ (8009f60 <HAL_RCC_OscConfig+0x644>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	0019      	movs	r1, r3
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e90:	431a      	orrs	r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e96:	021b      	lsls	r3, r3, #8
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e9e:	431a      	orrs	r2, r3
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	4b26      	ldr	r3, [pc, #152]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009eb2:	4b25      	ldr	r3, [pc, #148]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	4b24      	ldr	r3, [pc, #144]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009eb8:	2180      	movs	r1, #128	@ 0x80
 8009eba:	0449      	lsls	r1, r1, #17
 8009ebc:	430a      	orrs	r2, r1
 8009ebe:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8009ec0:	4b21      	ldr	r3, [pc, #132]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009ec2:	68da      	ldr	r2, [r3, #12]
 8009ec4:	4b20      	ldr	r3, [pc, #128]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009ec6:	2180      	movs	r1, #128	@ 0x80
 8009ec8:	0549      	lsls	r1, r1, #21
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ece:	f7fd fd55 	bl	800797c <HAL_GetTick>
 8009ed2:	0003      	movs	r3, r0
 8009ed4:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed8:	f7fd fd50 	bl	800797c <HAL_GetTick>
 8009edc:	0002      	movs	r2, r0
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e072      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009eea:	4b17      	ldr	r3, [pc, #92]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	2380      	movs	r3, #128	@ 0x80
 8009ef0:	049b      	lsls	r3, r3, #18
 8009ef2:	4013      	ands	r3, r2
 8009ef4:	d0f0      	beq.n	8009ed8 <HAL_RCC_OscConfig+0x5bc>
 8009ef6:	e06a      	b.n	8009fce <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ef8:	4b13      	ldr	r3, [pc, #76]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009efa:	681a      	ldr	r2, [r3, #0]
 8009efc:	4b12      	ldr	r3, [pc, #72]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009efe:	4917      	ldr	r1, [pc, #92]	@ (8009f5c <HAL_RCC_OscConfig+0x640>)
 8009f00:	400a      	ands	r2, r1
 8009f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f04:	f7fd fd3a 	bl	800797c <HAL_GetTick>
 8009f08:	0003      	movs	r3, r0
 8009f0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f0c:	e008      	b.n	8009f20 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f0e:	f7fd fd35 	bl	800797c <HAL_GetTick>
 8009f12:	0002      	movs	r2, r0
 8009f14:	693b      	ldr	r3, [r7, #16]
 8009f16:	1ad3      	subs	r3, r2, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d901      	bls.n	8009f20 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e057      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f20:	4b09      	ldr	r3, [pc, #36]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	2380      	movs	r3, #128	@ 0x80
 8009f26:	049b      	lsls	r3, r3, #18
 8009f28:	4013      	ands	r3, r2
 8009f2a:	d1f0      	bne.n	8009f0e <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8009f2c:	4b06      	ldr	r3, [pc, #24]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009f2e:	68da      	ldr	r2, [r3, #12]
 8009f30:	4b05      	ldr	r3, [pc, #20]	@ (8009f48 <HAL_RCC_OscConfig+0x62c>)
 8009f32:	490c      	ldr	r1, [pc, #48]	@ (8009f64 <HAL_RCC_OscConfig+0x648>)
 8009f34:	400a      	ands	r2, r1
 8009f36:	60da      	str	r2, [r3, #12]
 8009f38:	e049      	b.n	8009fce <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6a1b      	ldr	r3, [r3, #32]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d112      	bne.n	8009f68 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e044      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
 8009f46:	46c0      	nop			@ (mov r8, r8)
 8009f48:	40021000 	.word	0x40021000
 8009f4c:	40007000 	.word	0x40007000
 8009f50:	00001388 	.word	0x00001388
 8009f54:	efffffff 	.word	0xefffffff
 8009f58:	ffbfffff 	.word	0xffbfffff
 8009f5c:	feffffff 	.word	0xfeffffff
 8009f60:	11c1808c 	.word	0x11c1808c
 8009f64:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8009f68:	4b1b      	ldr	r3, [pc, #108]	@ (8009fd8 <HAL_RCC_OscConfig+0x6bc>)
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f6e:	697b      	ldr	r3, [r7, #20]
 8009f70:	2203      	movs	r2, #3
 8009f72:	401a      	ands	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d126      	bne.n	8009fca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f7c:	697b      	ldr	r3, [r7, #20]
 8009f7e:	2270      	movs	r2, #112	@ 0x70
 8009f80:	401a      	ands	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d11f      	bne.n	8009fca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009f8a:	697a      	ldr	r2, [r7, #20]
 8009f8c:	23fe      	movs	r3, #254	@ 0xfe
 8009f8e:	01db      	lsls	r3, r3, #7
 8009f90:	401a      	ands	r2, r3
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f96:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d116      	bne.n	8009fca <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009f9c:	697a      	ldr	r2, [r7, #20]
 8009f9e:	23f8      	movs	r3, #248	@ 0xf8
 8009fa0:	039b      	lsls	r3, r3, #14
 8009fa2:	401a      	ands	r2, r3
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d10e      	bne.n	8009fca <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009fac:	697a      	ldr	r2, [r7, #20]
 8009fae:	23e0      	movs	r3, #224	@ 0xe0
 8009fb0:	051b      	lsls	r3, r3, #20
 8009fb2:	401a      	ands	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d106      	bne.n	8009fca <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	0f5b      	lsrs	r3, r3, #29
 8009fc0:	075a      	lsls	r2, r3, #29
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d001      	beq.n	8009fce <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	0018      	movs	r0, r3
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	b008      	add	sp, #32
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	40021000 	.word	0x40021000

08009fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d101      	bne.n	8009ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e0e9      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009ff0:	4b76      	ldr	r3, [pc, #472]	@ (800a1cc <HAL_RCC_ClockConfig+0x1f0>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2207      	movs	r2, #7
 8009ff6:	4013      	ands	r3, r2
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d91e      	bls.n	800a03c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ffe:	4b73      	ldr	r3, [pc, #460]	@ (800a1cc <HAL_RCC_ClockConfig+0x1f0>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2207      	movs	r2, #7
 800a004:	4393      	bics	r3, r2
 800a006:	0019      	movs	r1, r3
 800a008:	4b70      	ldr	r3, [pc, #448]	@ (800a1cc <HAL_RCC_ClockConfig+0x1f0>)
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a010:	f7fd fcb4 	bl	800797c <HAL_GetTick>
 800a014:	0003      	movs	r3, r0
 800a016:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a018:	e009      	b.n	800a02e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a01a:	f7fd fcaf 	bl	800797c <HAL_GetTick>
 800a01e:	0002      	movs	r2, r0
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	1ad3      	subs	r3, r2, r3
 800a024:	4a6a      	ldr	r2, [pc, #424]	@ (800a1d0 <HAL_RCC_ClockConfig+0x1f4>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d901      	bls.n	800a02e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e0ca      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a02e:	4b67      	ldr	r3, [pc, #412]	@ (800a1cc <HAL_RCC_ClockConfig+0x1f0>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2207      	movs	r2, #7
 800a034:	4013      	ands	r3, r2
 800a036:	683a      	ldr	r2, [r7, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d1ee      	bne.n	800a01a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2202      	movs	r2, #2
 800a042:	4013      	ands	r3, r2
 800a044:	d015      	beq.n	800a072 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2204      	movs	r2, #4
 800a04c:	4013      	ands	r3, r2
 800a04e:	d006      	beq.n	800a05e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a050:	4b60      	ldr	r3, [pc, #384]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a052:	689a      	ldr	r2, [r3, #8]
 800a054:	4b5f      	ldr	r3, [pc, #380]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a056:	21e0      	movs	r1, #224	@ 0xe0
 800a058:	01c9      	lsls	r1, r1, #7
 800a05a:	430a      	orrs	r2, r1
 800a05c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a05e:	4b5d      	ldr	r3, [pc, #372]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	4a5d      	ldr	r2, [pc, #372]	@ (800a1d8 <HAL_RCC_ClockConfig+0x1fc>)
 800a064:	4013      	ands	r3, r2
 800a066:	0019      	movs	r1, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	689a      	ldr	r2, [r3, #8]
 800a06c:	4b59      	ldr	r3, [pc, #356]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a06e:	430a      	orrs	r2, r1
 800a070:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	2201      	movs	r2, #1
 800a078:	4013      	ands	r3, r2
 800a07a:	d057      	beq.n	800a12c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	2b01      	cmp	r3, #1
 800a082:	d107      	bne.n	800a094 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a084:	4b53      	ldr	r3, [pc, #332]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	2380      	movs	r3, #128	@ 0x80
 800a08a:	029b      	lsls	r3, r3, #10
 800a08c:	4013      	ands	r3, r2
 800a08e:	d12b      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e097      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	2b02      	cmp	r3, #2
 800a09a:	d107      	bne.n	800a0ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a09c:	4b4d      	ldr	r3, [pc, #308]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a09e:	681a      	ldr	r2, [r3, #0]
 800a0a0:	2380      	movs	r3, #128	@ 0x80
 800a0a2:	049b      	lsls	r3, r3, #18
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	d11f      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e08b      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	685b      	ldr	r3, [r3, #4]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d107      	bne.n	800a0c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a0b4:	4b47      	ldr	r3, [pc, #284]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	2380      	movs	r3, #128	@ 0x80
 800a0ba:	00db      	lsls	r3, r3, #3
 800a0bc:	4013      	ands	r3, r2
 800a0be:	d113      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e07f      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	2b03      	cmp	r3, #3
 800a0ca:	d106      	bne.n	800a0da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a0cc:	4b41      	ldr	r3, [pc, #260]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a0ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	d108      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e074      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a0da:	4b3e      	ldr	r3, [pc, #248]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a0dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a0de:	2202      	movs	r2, #2
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	d101      	bne.n	800a0e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	e06d      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0e8:	4b3a      	ldr	r3, [pc, #232]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a0ea:	689b      	ldr	r3, [r3, #8]
 800a0ec:	2207      	movs	r2, #7
 800a0ee:	4393      	bics	r3, r2
 800a0f0:	0019      	movs	r1, r3
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	685a      	ldr	r2, [r3, #4]
 800a0f6:	4b37      	ldr	r3, [pc, #220]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a0f8:	430a      	orrs	r2, r1
 800a0fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0fc:	f7fd fc3e 	bl	800797c <HAL_GetTick>
 800a100:	0003      	movs	r3, r0
 800a102:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a104:	e009      	b.n	800a11a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a106:	f7fd fc39 	bl	800797c <HAL_GetTick>
 800a10a:	0002      	movs	r2, r0
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	4a2f      	ldr	r2, [pc, #188]	@ (800a1d0 <HAL_RCC_ClockConfig+0x1f4>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d901      	bls.n	800a11a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e054      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a11a:	4b2e      	ldr	r3, [pc, #184]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	2238      	movs	r2, #56	@ 0x38
 800a120:	401a      	ands	r2, r3
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	00db      	lsls	r3, r3, #3
 800a128:	429a      	cmp	r2, r3
 800a12a:	d1ec      	bne.n	800a106 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a12c:	4b27      	ldr	r3, [pc, #156]	@ (800a1cc <HAL_RCC_ClockConfig+0x1f0>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	2207      	movs	r2, #7
 800a132:	4013      	ands	r3, r2
 800a134:	683a      	ldr	r2, [r7, #0]
 800a136:	429a      	cmp	r2, r3
 800a138:	d21e      	bcs.n	800a178 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a13a:	4b24      	ldr	r3, [pc, #144]	@ (800a1cc <HAL_RCC_ClockConfig+0x1f0>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	2207      	movs	r2, #7
 800a140:	4393      	bics	r3, r2
 800a142:	0019      	movs	r1, r3
 800a144:	4b21      	ldr	r3, [pc, #132]	@ (800a1cc <HAL_RCC_ClockConfig+0x1f0>)
 800a146:	683a      	ldr	r2, [r7, #0]
 800a148:	430a      	orrs	r2, r1
 800a14a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a14c:	f7fd fc16 	bl	800797c <HAL_GetTick>
 800a150:	0003      	movs	r3, r0
 800a152:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a154:	e009      	b.n	800a16a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a156:	f7fd fc11 	bl	800797c <HAL_GetTick>
 800a15a:	0002      	movs	r2, r0
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	4a1b      	ldr	r2, [pc, #108]	@ (800a1d0 <HAL_RCC_ClockConfig+0x1f4>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d901      	bls.n	800a16a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800a166:	2303      	movs	r3, #3
 800a168:	e02c      	b.n	800a1c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800a16a:	4b18      	ldr	r3, [pc, #96]	@ (800a1cc <HAL_RCC_ClockConfig+0x1f0>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	2207      	movs	r2, #7
 800a170:	4013      	ands	r3, r2
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	429a      	cmp	r2, r3
 800a176:	d1ee      	bne.n	800a156 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2204      	movs	r2, #4
 800a17e:	4013      	ands	r3, r2
 800a180:	d009      	beq.n	800a196 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a182:	4b14      	ldr	r3, [pc, #80]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	4a15      	ldr	r2, [pc, #84]	@ (800a1dc <HAL_RCC_ClockConfig+0x200>)
 800a188:	4013      	ands	r3, r2
 800a18a:	0019      	movs	r1, r3
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	68da      	ldr	r2, [r3, #12]
 800a190:	4b10      	ldr	r3, [pc, #64]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a192:	430a      	orrs	r2, r1
 800a194:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800a196:	f000 f829 	bl	800a1ec <HAL_RCC_GetSysClockFreq>
 800a19a:	0001      	movs	r1, r0
 800a19c:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d4 <HAL_RCC_ClockConfig+0x1f8>)
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	0a1b      	lsrs	r3, r3, #8
 800a1a2:	220f      	movs	r2, #15
 800a1a4:	401a      	ands	r2, r3
 800a1a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a1e0 <HAL_RCC_ClockConfig+0x204>)
 800a1a8:	0092      	lsls	r2, r2, #2
 800a1aa:	58d3      	ldr	r3, [r2, r3]
 800a1ac:	221f      	movs	r2, #31
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	000a      	movs	r2, r1
 800a1b2:	40da      	lsrs	r2, r3
 800a1b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e4 <HAL_RCC_ClockConfig+0x208>)
 800a1b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a1b8:	4b0b      	ldr	r3, [pc, #44]	@ (800a1e8 <HAL_RCC_ClockConfig+0x20c>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	0018      	movs	r0, r3
 800a1be:	f7fc fdf7 	bl	8006db0 <HAL_InitTick>
 800a1c2:	0003      	movs	r3, r0
}
 800a1c4:	0018      	movs	r0, r3
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	b004      	add	sp, #16
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	40022000 	.word	0x40022000
 800a1d0:	00001388 	.word	0x00001388
 800a1d4:	40021000 	.word	0x40021000
 800a1d8:	fffff0ff 	.word	0xfffff0ff
 800a1dc:	ffff8fff 	.word	0xffff8fff
 800a1e0:	080167a0 	.word	0x080167a0
 800a1e4:	20000004 	.word	0x20000004
 800a1e8:	20000008 	.word	0x20000008

0800a1ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a1f2:	4b3c      	ldr	r3, [pc, #240]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	2238      	movs	r2, #56	@ 0x38
 800a1f8:	4013      	ands	r3, r2
 800a1fa:	d10f      	bne.n	800a21c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800a1fc:	4b39      	ldr	r3, [pc, #228]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	0adb      	lsrs	r3, r3, #11
 800a202:	2207      	movs	r2, #7
 800a204:	4013      	ands	r3, r2
 800a206:	2201      	movs	r2, #1
 800a208:	409a      	lsls	r2, r3
 800a20a:	0013      	movs	r3, r2
 800a20c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800a20e:	6839      	ldr	r1, [r7, #0]
 800a210:	4835      	ldr	r0, [pc, #212]	@ (800a2e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a212:	f7fc f90f 	bl	8006434 <__udivsi3>
 800a216:	0003      	movs	r3, r0
 800a218:	613b      	str	r3, [r7, #16]
 800a21a:	e05d      	b.n	800a2d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a21c:	4b31      	ldr	r3, [pc, #196]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a21e:	689b      	ldr	r3, [r3, #8]
 800a220:	2238      	movs	r2, #56	@ 0x38
 800a222:	4013      	ands	r3, r2
 800a224:	2b08      	cmp	r3, #8
 800a226:	d102      	bne.n	800a22e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a228:	4b30      	ldr	r3, [pc, #192]	@ (800a2ec <HAL_RCC_GetSysClockFreq+0x100>)
 800a22a:	613b      	str	r3, [r7, #16]
 800a22c:	e054      	b.n	800a2d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a22e:	4b2d      	ldr	r3, [pc, #180]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	2238      	movs	r2, #56	@ 0x38
 800a234:	4013      	ands	r3, r2
 800a236:	2b10      	cmp	r3, #16
 800a238:	d138      	bne.n	800a2ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800a23a:	4b2a      	ldr	r3, [pc, #168]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	2203      	movs	r2, #3
 800a240:	4013      	ands	r3, r2
 800a242:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a244:	4b27      	ldr	r3, [pc, #156]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	091b      	lsrs	r3, r3, #4
 800a24a:	2207      	movs	r2, #7
 800a24c:	4013      	ands	r3, r2
 800a24e:	3301      	adds	r3, #1
 800a250:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2b03      	cmp	r3, #3
 800a256:	d10d      	bne.n	800a274 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a258:	68b9      	ldr	r1, [r7, #8]
 800a25a:	4824      	ldr	r0, [pc, #144]	@ (800a2ec <HAL_RCC_GetSysClockFreq+0x100>)
 800a25c:	f7fc f8ea 	bl	8006434 <__udivsi3>
 800a260:	0003      	movs	r3, r0
 800a262:	0019      	movs	r1, r3
 800a264:	4b1f      	ldr	r3, [pc, #124]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	0a1b      	lsrs	r3, r3, #8
 800a26a:	227f      	movs	r2, #127	@ 0x7f
 800a26c:	4013      	ands	r3, r2
 800a26e:	434b      	muls	r3, r1
 800a270:	617b      	str	r3, [r7, #20]
        break;
 800a272:	e00d      	b.n	800a290 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800a274:	68b9      	ldr	r1, [r7, #8]
 800a276:	481c      	ldr	r0, [pc, #112]	@ (800a2e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800a278:	f7fc f8dc 	bl	8006434 <__udivsi3>
 800a27c:	0003      	movs	r3, r0
 800a27e:	0019      	movs	r1, r3
 800a280:	4b18      	ldr	r3, [pc, #96]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	0a1b      	lsrs	r3, r3, #8
 800a286:	227f      	movs	r2, #127	@ 0x7f
 800a288:	4013      	ands	r3, r2
 800a28a:	434b      	muls	r3, r1
 800a28c:	617b      	str	r3, [r7, #20]
        break;
 800a28e:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800a290:	4b14      	ldr	r3, [pc, #80]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	0f5b      	lsrs	r3, r3, #29
 800a296:	2207      	movs	r2, #7
 800a298:	4013      	ands	r3, r2
 800a29a:	3301      	adds	r3, #1
 800a29c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800a29e:	6879      	ldr	r1, [r7, #4]
 800a2a0:	6978      	ldr	r0, [r7, #20]
 800a2a2:	f7fc f8c7 	bl	8006434 <__udivsi3>
 800a2a6:	0003      	movs	r3, r0
 800a2a8:	613b      	str	r3, [r7, #16]
 800a2aa:	e015      	b.n	800a2d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800a2ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	2238      	movs	r2, #56	@ 0x38
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	2b20      	cmp	r3, #32
 800a2b6:	d103      	bne.n	800a2c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800a2b8:	2380      	movs	r3, #128	@ 0x80
 800a2ba:	021b      	lsls	r3, r3, #8
 800a2bc:	613b      	str	r3, [r7, #16]
 800a2be:	e00b      	b.n	800a2d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800a2c0:	4b08      	ldr	r3, [pc, #32]	@ (800a2e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800a2c2:	689b      	ldr	r3, [r3, #8]
 800a2c4:	2238      	movs	r2, #56	@ 0x38
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	2b18      	cmp	r3, #24
 800a2ca:	d103      	bne.n	800a2d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800a2cc:	23fa      	movs	r3, #250	@ 0xfa
 800a2ce:	01db      	lsls	r3, r3, #7
 800a2d0:	613b      	str	r3, [r7, #16]
 800a2d2:	e001      	b.n	800a2d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a2d8:	693b      	ldr	r3, [r7, #16]
}
 800a2da:	0018      	movs	r0, r3
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	b006      	add	sp, #24
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	46c0      	nop			@ (mov r8, r8)
 800a2e4:	40021000 	.word	0x40021000
 800a2e8:	00f42400 	.word	0x00f42400
 800a2ec:	007a1200 	.word	0x007a1200

0800a2f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2f4:	4b02      	ldr	r3, [pc, #8]	@ (800a300 <HAL_RCC_GetHCLKFreq+0x10>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
}
 800a2f8:	0018      	movs	r0, r3
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
 800a2fe:	46c0      	nop			@ (mov r8, r8)
 800a300:	20000004 	.word	0x20000004

0800a304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a304:	b5b0      	push	{r4, r5, r7, lr}
 800a306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a308:	f7ff fff2 	bl	800a2f0 <HAL_RCC_GetHCLKFreq>
 800a30c:	0004      	movs	r4, r0
 800a30e:	f7ff faf9 	bl	8009904 <LL_RCC_GetAPB1Prescaler>
 800a312:	0003      	movs	r3, r0
 800a314:	0b1a      	lsrs	r2, r3, #12
 800a316:	4b05      	ldr	r3, [pc, #20]	@ (800a32c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a318:	0092      	lsls	r2, r2, #2
 800a31a:	58d3      	ldr	r3, [r2, r3]
 800a31c:	221f      	movs	r2, #31
 800a31e:	4013      	ands	r3, r2
 800a320:	40dc      	lsrs	r4, r3
 800a322:	0023      	movs	r3, r4
}
 800a324:	0018      	movs	r0, r3
 800a326:	46bd      	mov	sp, r7
 800a328:	bdb0      	pop	{r4, r5, r7, pc}
 800a32a:	46c0      	nop			@ (mov r8, r8)
 800a32c:	080167e0 	.word	0x080167e0

0800a330 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a330:	b580      	push	{r7, lr}
 800a332:	b082      	sub	sp, #8
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2207      	movs	r2, #7
 800a33e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a340:	4b0e      	ldr	r3, [pc, #56]	@ (800a37c <HAL_RCC_GetClockConfig+0x4c>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	2207      	movs	r2, #7
 800a346:	401a      	ands	r2, r3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a34c:	4b0b      	ldr	r3, [pc, #44]	@ (800a37c <HAL_RCC_GetClockConfig+0x4c>)
 800a34e:	689a      	ldr	r2, [r3, #8]
 800a350:	23f0      	movs	r3, #240	@ 0xf0
 800a352:	011b      	lsls	r3, r3, #4
 800a354:	401a      	ands	r2, r3
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800a35a:	4b08      	ldr	r3, [pc, #32]	@ (800a37c <HAL_RCC_GetClockConfig+0x4c>)
 800a35c:	689a      	ldr	r2, [r3, #8]
 800a35e:	23e0      	movs	r3, #224	@ 0xe0
 800a360:	01db      	lsls	r3, r3, #7
 800a362:	401a      	ands	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a368:	4b05      	ldr	r3, [pc, #20]	@ (800a380 <HAL_RCC_GetClockConfig+0x50>)
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2207      	movs	r2, #7
 800a36e:	401a      	ands	r2, r3
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	601a      	str	r2, [r3, #0]
}
 800a374:	46c0      	nop			@ (mov r8, r8)
 800a376:	46bd      	mov	sp, r7
 800a378:	b002      	add	sp, #8
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	40021000 	.word	0x40021000
 800a380:	40022000 	.word	0x40022000

0800a384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800a38c:	2313      	movs	r3, #19
 800a38e:	18fb      	adds	r3, r7, r3
 800a390:	2200      	movs	r2, #0
 800a392:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a394:	2312      	movs	r3, #18
 800a396:	18fb      	adds	r3, r7, r3
 800a398:	2200      	movs	r2, #0
 800a39a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681a      	ldr	r2, [r3, #0]
 800a3a0:	2380      	movs	r3, #128	@ 0x80
 800a3a2:	029b      	lsls	r3, r3, #10
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	d100      	bne.n	800a3aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 800a3a8:	e0ad      	b.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3aa:	2011      	movs	r0, #17
 800a3ac:	183b      	adds	r3, r7, r0
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3b2:	4b47      	ldr	r3, [pc, #284]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3b6:	2380      	movs	r3, #128	@ 0x80
 800a3b8:	055b      	lsls	r3, r3, #21
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	d110      	bne.n	800a3e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3be:	4b44      	ldr	r3, [pc, #272]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3c2:	4b43      	ldr	r3, [pc, #268]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3c4:	2180      	movs	r1, #128	@ 0x80
 800a3c6:	0549      	lsls	r1, r1, #21
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a3cc:	4b40      	ldr	r3, [pc, #256]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a3ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a3d0:	2380      	movs	r3, #128	@ 0x80
 800a3d2:	055b      	lsls	r3, r3, #21
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	60bb      	str	r3, [r7, #8]
 800a3d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3da:	183b      	adds	r3, r7, r0
 800a3dc:	2201      	movs	r2, #1
 800a3de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3e0:	4b3c      	ldr	r3, [pc, #240]	@ (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a3e2:	681a      	ldr	r2, [r3, #0]
 800a3e4:	4b3b      	ldr	r3, [pc, #236]	@ (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a3e6:	2180      	movs	r1, #128	@ 0x80
 800a3e8:	0049      	lsls	r1, r1, #1
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3ee:	f7fd fac5 	bl	800797c <HAL_GetTick>
 800a3f2:	0003      	movs	r3, r0
 800a3f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a3f6:	e00b      	b.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3f8:	f7fd fac0 	bl	800797c <HAL_GetTick>
 800a3fc:	0002      	movs	r2, r0
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	2b02      	cmp	r3, #2
 800a404:	d904      	bls.n	800a410 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800a406:	2313      	movs	r3, #19
 800a408:	18fb      	adds	r3, r7, r3
 800a40a:	2203      	movs	r2, #3
 800a40c:	701a      	strb	r2, [r3, #0]
        break;
 800a40e:	e005      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a410:	4b30      	ldr	r3, [pc, #192]	@ (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	2380      	movs	r3, #128	@ 0x80
 800a416:	005b      	lsls	r3, r3, #1
 800a418:	4013      	ands	r3, r2
 800a41a:	d0ed      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800a41c:	2313      	movs	r3, #19
 800a41e:	18fb      	adds	r3, r7, r3
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d15e      	bne.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a426:	4b2a      	ldr	r3, [pc, #168]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a428:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a42a:	23c0      	movs	r3, #192	@ 0xc0
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	4013      	ands	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d019      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d014      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a442:	4b23      	ldr	r3, [pc, #140]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a446:	4a24      	ldr	r2, [pc, #144]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a448:	4013      	ands	r3, r2
 800a44a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a44c:	4b20      	ldr	r3, [pc, #128]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a44e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a450:	4b1f      	ldr	r3, [pc, #124]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a452:	2180      	movs	r1, #128	@ 0x80
 800a454:	0249      	lsls	r1, r1, #9
 800a456:	430a      	orrs	r2, r1
 800a458:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a45a:	4b1d      	ldr	r3, [pc, #116]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a45c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a45e:	4b1c      	ldr	r3, [pc, #112]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a460:	491e      	ldr	r1, [pc, #120]	@ (800a4dc <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800a462:	400a      	ands	r2, r1
 800a464:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a466:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2201      	movs	r2, #1
 800a470:	4013      	ands	r3, r2
 800a472:	d016      	beq.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a474:	f7fd fa82 	bl	800797c <HAL_GetTick>
 800a478:	0003      	movs	r3, r0
 800a47a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a47c:	e00c      	b.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a47e:	f7fd fa7d 	bl	800797c <HAL_GetTick>
 800a482:	0002      	movs	r2, r0
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	1ad3      	subs	r3, r2, r3
 800a488:	4a15      	ldr	r2, [pc, #84]	@ (800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d904      	bls.n	800a498 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800a48e:	2313      	movs	r3, #19
 800a490:	18fb      	adds	r3, r7, r3
 800a492:	2203      	movs	r2, #3
 800a494:	701a      	strb	r2, [r3, #0]
            break;
 800a496:	e004      	b.n	800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a498:	4b0d      	ldr	r3, [pc, #52]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a49a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a49c:	2202      	movs	r2, #2
 800a49e:	4013      	ands	r3, r2
 800a4a0:	d0ed      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800a4a2:	2313      	movs	r3, #19
 800a4a4:	18fb      	adds	r3, r7, r3
 800a4a6:	781b      	ldrb	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d10a      	bne.n	800a4c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4ac:	4b08      	ldr	r3, [pc, #32]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a4ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a4b0:	4a09      	ldr	r2, [pc, #36]	@ (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800a4b2:	4013      	ands	r3, r2
 800a4b4:	0019      	movs	r1, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4ba:	4b05      	ldr	r3, [pc, #20]	@ (800a4d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800a4bc:	430a      	orrs	r2, r1
 800a4be:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a4c0:	e016      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4c2:	2312      	movs	r3, #18
 800a4c4:	18fb      	adds	r3, r7, r3
 800a4c6:	2213      	movs	r2, #19
 800a4c8:	18ba      	adds	r2, r7, r2
 800a4ca:	7812      	ldrb	r2, [r2, #0]
 800a4cc:	701a      	strb	r2, [r3, #0]
 800a4ce:	e00f      	b.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800a4d0:	40021000 	.word	0x40021000
 800a4d4:	40007000 	.word	0x40007000
 800a4d8:	fffffcff 	.word	0xfffffcff
 800a4dc:	fffeffff 	.word	0xfffeffff
 800a4e0:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4e4:	2312      	movs	r3, #18
 800a4e6:	18fb      	adds	r3, r7, r3
 800a4e8:	2213      	movs	r2, #19
 800a4ea:	18ba      	adds	r2, r7, r2
 800a4ec:	7812      	ldrb	r2, [r2, #0]
 800a4ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a4f0:	2311      	movs	r3, #17
 800a4f2:	18fb      	adds	r3, r7, r3
 800a4f4:	781b      	ldrb	r3, [r3, #0]
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d105      	bne.n	800a506 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4fa:	4bc5      	ldr	r3, [pc, #788]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a4fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a4fe:	4bc4      	ldr	r3, [pc, #784]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a500:	49c4      	ldr	r1, [pc, #784]	@ (800a814 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800a502:	400a      	ands	r2, r1
 800a504:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2201      	movs	r2, #1
 800a50c:	4013      	ands	r3, r2
 800a50e:	d009      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a510:	4bbf      	ldr	r3, [pc, #764]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a514:	2203      	movs	r2, #3
 800a516:	4393      	bics	r3, r2
 800a518:	0019      	movs	r1, r3
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	4bbc      	ldr	r3, [pc, #752]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a520:	430a      	orrs	r2, r1
 800a522:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	2202      	movs	r2, #2
 800a52a:	4013      	ands	r3, r2
 800a52c:	d009      	beq.n	800a542 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a52e:	4bb8      	ldr	r3, [pc, #736]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a530:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a532:	220c      	movs	r2, #12
 800a534:	4393      	bics	r3, r2
 800a536:	0019      	movs	r1, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	689a      	ldr	r2, [r3, #8]
 800a53c:	4bb4      	ldr	r3, [pc, #720]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a53e:	430a      	orrs	r2, r1
 800a540:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2204      	movs	r2, #4
 800a548:	4013      	ands	r3, r2
 800a54a:	d009      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a54c:	4bb0      	ldr	r3, [pc, #704]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a54e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a550:	2230      	movs	r2, #48	@ 0x30
 800a552:	4393      	bics	r3, r2
 800a554:	0019      	movs	r1, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68da      	ldr	r2, [r3, #12]
 800a55a:	4bad      	ldr	r3, [pc, #692]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a55c:	430a      	orrs	r2, r1
 800a55e:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	2210      	movs	r2, #16
 800a566:	4013      	ands	r3, r2
 800a568:	d009      	beq.n	800a57e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a56a:	4ba9      	ldr	r3, [pc, #676]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a56c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a56e:	4aaa      	ldr	r2, [pc, #680]	@ (800a818 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800a570:	4013      	ands	r3, r2
 800a572:	0019      	movs	r1, r3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	691a      	ldr	r2, [r3, #16]
 800a578:	4ba5      	ldr	r3, [pc, #660]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a57a:	430a      	orrs	r2, r1
 800a57c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	2380      	movs	r3, #128	@ 0x80
 800a584:	015b      	lsls	r3, r3, #5
 800a586:	4013      	ands	r3, r2
 800a588:	d009      	beq.n	800a59e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800a58a:	4ba1      	ldr	r3, [pc, #644]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a58c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58e:	4aa3      	ldr	r2, [pc, #652]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a590:	4013      	ands	r3, r2
 800a592:	0019      	movs	r1, r3
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	695a      	ldr	r2, [r3, #20]
 800a598:	4b9d      	ldr	r3, [pc, #628]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a59a:	430a      	orrs	r2, r1
 800a59c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681a      	ldr	r2, [r3, #0]
 800a5a2:	2380      	movs	r3, #128	@ 0x80
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	d009      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a5aa:	4b99      	ldr	r3, [pc, #612]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ae:	4a9c      	ldr	r2, [pc, #624]	@ (800a820 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	0019      	movs	r1, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a5b8:	4b95      	ldr	r3, [pc, #596]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a5ba:	430a      	orrs	r2, r1
 800a5bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	2380      	movs	r3, #128	@ 0x80
 800a5c4:	00db      	lsls	r3, r3, #3
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	d009      	beq.n	800a5de <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a5ca:	4b91      	ldr	r3, [pc, #580]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a5cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ce:	4a95      	ldr	r2, [pc, #596]	@ (800a824 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	0019      	movs	r1, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5d8:	4b8d      	ldr	r3, [pc, #564]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a5da:	430a      	orrs	r2, r1
 800a5dc:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	2220      	movs	r2, #32
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	d009      	beq.n	800a5fc <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5e8:	4b89      	ldr	r3, [pc, #548]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a5ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ec:	4a8e      	ldr	r2, [pc, #568]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a5ee:	4013      	ands	r3, r2
 800a5f0:	0019      	movs	r1, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	699a      	ldr	r2, [r3, #24]
 800a5f6:	4b86      	ldr	r3, [pc, #536]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a5f8:	430a      	orrs	r2, r1
 800a5fa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2240      	movs	r2, #64	@ 0x40
 800a602:	4013      	ands	r3, r2
 800a604:	d009      	beq.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a606:	4b82      	ldr	r3, [pc, #520]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a60a:	4a88      	ldr	r2, [pc, #544]	@ (800a82c <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800a60c:	4013      	ands	r3, r2
 800a60e:	0019      	movs	r1, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	69da      	ldr	r2, [r3, #28]
 800a614:	4b7e      	ldr	r3, [pc, #504]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a616:	430a      	orrs	r2, r1
 800a618:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	2380      	movs	r3, #128	@ 0x80
 800a620:	02db      	lsls	r3, r3, #11
 800a622:	4013      	ands	r3, r2
 800a624:	d016      	beq.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a626:	4b7a      	ldr	r3, [pc, #488]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a62a:	4a81      	ldr	r2, [pc, #516]	@ (800a830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800a62c:	4013      	ands	r3, r2
 800a62e:	0019      	movs	r1, r3
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a634:	4b76      	ldr	r3, [pc, #472]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a636:	430a      	orrs	r2, r1
 800a638:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a63e:	23c0      	movs	r3, #192	@ 0xc0
 800a640:	051b      	lsls	r3, r3, #20
 800a642:	429a      	cmp	r2, r3
 800a644:	d106      	bne.n	800a654 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a646:	4b72      	ldr	r3, [pc, #456]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a648:	68da      	ldr	r2, [r3, #12]
 800a64a:	4b71      	ldr	r3, [pc, #452]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a64c:	2180      	movs	r1, #128	@ 0x80
 800a64e:	0449      	lsls	r1, r1, #17
 800a650:	430a      	orrs	r2, r1
 800a652:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681a      	ldr	r2, [r3, #0]
 800a658:	2380      	movs	r3, #128	@ 0x80
 800a65a:	01db      	lsls	r3, r3, #7
 800a65c:	4013      	ands	r3, r2
 800a65e:	d015      	beq.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x308>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a660:	4b6b      	ldr	r3, [pc, #428]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a664:	009b      	lsls	r3, r3, #2
 800a666:	0899      	lsrs	r1, r3, #2
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a66c:	4b68      	ldr	r3, [pc, #416]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a66e:	430a      	orrs	r2, r1
 800a670:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a676:	2380      	movs	r3, #128	@ 0x80
 800a678:	05db      	lsls	r3, r3, #23
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d106      	bne.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a67e:	4b64      	ldr	r3, [pc, #400]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	4b63      	ldr	r3, [pc, #396]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a684:	2180      	movs	r1, #128	@ 0x80
 800a686:	0249      	lsls	r1, r1, #9
 800a688:	430a      	orrs	r2, r1
 800a68a:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	2380      	movs	r3, #128	@ 0x80
 800a692:	031b      	lsls	r3, r3, #12
 800a694:	4013      	ands	r3, r2
 800a696:	d009      	beq.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a698:	4b5d      	ldr	r3, [pc, #372]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a69a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a69c:	2240      	movs	r2, #64	@ 0x40
 800a69e:	4393      	bics	r3, r2
 800a6a0:	0019      	movs	r1, r3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6a6:	4b5a      	ldr	r3, [pc, #360]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a6a8:	430a      	orrs	r2, r1
 800a6aa:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	2380      	movs	r3, #128	@ 0x80
 800a6b2:	039b      	lsls	r3, r3, #14
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	d016      	beq.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800a6b8:	4b55      	ldr	r3, [pc, #340]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a6ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6bc:	4a5d      	ldr	r2, [pc, #372]	@ (800a834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800a6be:	4013      	ands	r3, r2
 800a6c0:	0019      	movs	r1, r3
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6c6:	4b52      	ldr	r3, [pc, #328]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a6c8:	430a      	orrs	r2, r1
 800a6ca:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a6d0:	2380      	movs	r3, #128	@ 0x80
 800a6d2:	03db      	lsls	r3, r3, #15
 800a6d4:	429a      	cmp	r2, r3
 800a6d6:	d106      	bne.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a6d8:	4b4d      	ldr	r3, [pc, #308]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a6da:	68da      	ldr	r2, [r3, #12]
 800a6dc:	4b4c      	ldr	r3, [pc, #304]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a6de:	2180      	movs	r1, #128	@ 0x80
 800a6e0:	0449      	lsls	r1, r1, #17
 800a6e2:	430a      	orrs	r2, r1
 800a6e4:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681a      	ldr	r2, [r3, #0]
 800a6ea:	2380      	movs	r3, #128	@ 0x80
 800a6ec:	03db      	lsls	r3, r3, #15
 800a6ee:	4013      	ands	r3, r2
 800a6f0:	d016      	beq.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800a6f2:	4b47      	ldr	r3, [pc, #284]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a6f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6f6:	4a50      	ldr	r2, [pc, #320]	@ (800a838 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	0019      	movs	r1, r3
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a700:	4b43      	ldr	r3, [pc, #268]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a702:	430a      	orrs	r2, r1
 800a704:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a70a:	2380      	movs	r3, #128	@ 0x80
 800a70c:	045b      	lsls	r3, r3, #17
 800a70e:	429a      	cmp	r2, r3
 800a710:	d106      	bne.n	800a720 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a712:	4b3f      	ldr	r3, [pc, #252]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a714:	68da      	ldr	r2, [r3, #12]
 800a716:	4b3e      	ldr	r3, [pc, #248]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a718:	2180      	movs	r1, #128	@ 0x80
 800a71a:	0449      	lsls	r1, r1, #17
 800a71c:	430a      	orrs	r2, r1
 800a71e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	2380      	movs	r3, #128	@ 0x80
 800a726:	011b      	lsls	r3, r3, #4
 800a728:	4013      	ands	r3, r2
 800a72a:	d014      	beq.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800a72c:	4b38      	ldr	r3, [pc, #224]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a72e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a730:	2203      	movs	r2, #3
 800a732:	4393      	bics	r3, r2
 800a734:	0019      	movs	r1, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a1a      	ldr	r2, [r3, #32]
 800a73a:	4b35      	ldr	r3, [pc, #212]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a73c:	430a      	orrs	r2, r1
 800a73e:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6a1b      	ldr	r3, [r3, #32]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d106      	bne.n	800a756 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a748:	4b31      	ldr	r3, [pc, #196]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a74a:	68da      	ldr	r2, [r3, #12]
 800a74c:	4b30      	ldr	r3, [pc, #192]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a74e:	2180      	movs	r1, #128	@ 0x80
 800a750:	0249      	lsls	r1, r1, #9
 800a752:	430a      	orrs	r2, r1
 800a754:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681a      	ldr	r2, [r3, #0]
 800a75a:	2380      	movs	r3, #128	@ 0x80
 800a75c:	019b      	lsls	r3, r3, #6
 800a75e:	4013      	ands	r3, r2
 800a760:	d014      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800a762:	4b2b      	ldr	r3, [pc, #172]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a766:	220c      	movs	r2, #12
 800a768:	4393      	bics	r3, r2
 800a76a:	0019      	movs	r1, r3
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a770:	4b27      	ldr	r3, [pc, #156]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a772:	430a      	orrs	r2, r1
 800a774:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77a:	2b04      	cmp	r3, #4
 800a77c:	d106      	bne.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800a77e:	4b24      	ldr	r3, [pc, #144]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a780:	68da      	ldr	r2, [r3, #12]
 800a782:	4b23      	ldr	r3, [pc, #140]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a784:	2180      	movs	r1, #128	@ 0x80
 800a786:	0249      	lsls	r1, r1, #9
 800a788:	430a      	orrs	r2, r1
 800a78a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681a      	ldr	r2, [r3, #0]
 800a790:	2380      	movs	r3, #128	@ 0x80
 800a792:	045b      	lsls	r3, r3, #17
 800a794:	4013      	ands	r3, r2
 800a796:	d016      	beq.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a798:	4b1d      	ldr	r3, [pc, #116]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a79c:	4a22      	ldr	r2, [pc, #136]	@ (800a828 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800a79e:	4013      	ands	r3, r2
 800a7a0:	0019      	movs	r1, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7a6:	4b1a      	ldr	r3, [pc, #104]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a7a8:	430a      	orrs	r2, r1
 800a7aa:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7b0:	2380      	movs	r3, #128	@ 0x80
 800a7b2:	019b      	lsls	r3, r3, #6
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d106      	bne.n	800a7c6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a7b8:	4b15      	ldr	r3, [pc, #84]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a7ba:	68da      	ldr	r2, [r3, #12]
 800a7bc:	4b14      	ldr	r3, [pc, #80]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a7be:	2180      	movs	r1, #128	@ 0x80
 800a7c0:	0449      	lsls	r1, r1, #17
 800a7c2:	430a      	orrs	r2, r1
 800a7c4:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681a      	ldr	r2, [r3, #0]
 800a7ca:	2380      	movs	r3, #128	@ 0x80
 800a7cc:	049b      	lsls	r3, r3, #18
 800a7ce:	4013      	ands	r3, r2
 800a7d0:	d016      	beq.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a7d2:	4b0f      	ldr	r3, [pc, #60]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a7d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7d6:	4a11      	ldr	r2, [pc, #68]	@ (800a81c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	0019      	movs	r1, r3
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7ea:	2380      	movs	r3, #128	@ 0x80
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	429a      	cmp	r2, r3
 800a7f0:	d106      	bne.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800a7f2:	4b07      	ldr	r3, [pc, #28]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a7f4:	68da      	ldr	r2, [r3, #12]
 800a7f6:	4b06      	ldr	r3, [pc, #24]	@ (800a810 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800a7f8:	2180      	movs	r1, #128	@ 0x80
 800a7fa:	0449      	lsls	r1, r1, #17
 800a7fc:	430a      	orrs	r2, r1
 800a7fe:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800a800:	2312      	movs	r3, #18
 800a802:	18fb      	adds	r3, r7, r3
 800a804:	781b      	ldrb	r3, [r3, #0]
}
 800a806:	0018      	movs	r0, r3
 800a808:	46bd      	mov	sp, r7
 800a80a:	b006      	add	sp, #24
 800a80c:	bd80      	pop	{r7, pc}
 800a80e:	46c0      	nop			@ (mov r8, r8)
 800a810:	40021000 	.word	0x40021000
 800a814:	efffffff 	.word	0xefffffff
 800a818:	fffff3ff 	.word	0xfffff3ff
 800a81c:	fffffcff 	.word	0xfffffcff
 800a820:	fff3ffff 	.word	0xfff3ffff
 800a824:	ffcfffff 	.word	0xffcfffff
 800a828:	ffffcfff 	.word	0xffffcfff
 800a82c:	ffff3fff 	.word	0xffff3fff
 800a830:	f3ffffff 	.word	0xf3ffffff
 800a834:	ffbfffff 	.word	0xffbfffff
 800a838:	feffffff 	.word	0xfeffffff

0800a83c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800a83c:	b580      	push	{r7, lr}
 800a83e:	b084      	sub	sp, #16
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800a844:	4b1c      	ldr	r3, [pc, #112]	@ (800a8b8 <HAL_RCCEx_CRSConfig+0x7c>)
 800a846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a848:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b8 <HAL_RCCEx_CRSConfig+0x7c>)
 800a84a:	2180      	movs	r1, #128	@ 0x80
 800a84c:	0249      	lsls	r1, r1, #9
 800a84e:	430a      	orrs	r2, r1
 800a850:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_CRS_RELEASE_RESET();
 800a852:	4b19      	ldr	r3, [pc, #100]	@ (800a8b8 <HAL_RCCEx_CRSConfig+0x7c>)
 800a854:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a856:	4b18      	ldr	r3, [pc, #96]	@ (800a8b8 <HAL_RCCEx_CRSConfig+0x7c>)
 800a858:	4918      	ldr	r1, [pc, #96]	@ (800a8bc <HAL_RCCEx_CRSConfig+0x80>)
 800a85a:	400a      	ands	r2, r1
 800a85c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	431a      	orrs	r2, r3
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	4313      	orrs	r3, r2
 800a86e:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	68fa      	ldr	r2, [r7, #12]
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	691b      	ldr	r3, [r3, #16]
 800a87e:	041b      	lsls	r3, r3, #16
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	4313      	orrs	r3, r2
 800a884:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800a886:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c0 <HAL_RCCEx_CRSConfig+0x84>)
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800a88c:	4b0c      	ldr	r3, [pc, #48]	@ (800a8c0 <HAL_RCCEx_CRSConfig+0x84>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	4a0c      	ldr	r2, [pc, #48]	@ (800a8c4 <HAL_RCCEx_CRSConfig+0x88>)
 800a892:	4013      	ands	r3, r2
 800a894:	0019      	movs	r1, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	695b      	ldr	r3, [r3, #20]
 800a89a:	021a      	lsls	r2, r3, #8
 800a89c:	4b08      	ldr	r3, [pc, #32]	@ (800a8c0 <HAL_RCCEx_CRSConfig+0x84>)
 800a89e:	430a      	orrs	r2, r1
 800a8a0:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800a8a2:	4b07      	ldr	r3, [pc, #28]	@ (800a8c0 <HAL_RCCEx_CRSConfig+0x84>)
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	4b06      	ldr	r3, [pc, #24]	@ (800a8c0 <HAL_RCCEx_CRSConfig+0x84>)
 800a8a8:	2160      	movs	r1, #96	@ 0x60
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	601a      	str	r2, [r3, #0]
}
 800a8ae:	46c0      	nop			@ (mov r8, r8)
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	b004      	add	sp, #16
 800a8b4:	bd80      	pop	{r7, pc}
 800a8b6:	46c0      	nop			@ (mov r8, r8)
 800a8b8:	40021000 	.word	0x40021000
 800a8bc:	fffeffff 	.word	0xfffeffff
 800a8c0:	40006c00 	.word	0x40006c00
 800a8c4:	ffff80ff 	.word	0xffff80ff

0800a8c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b082      	sub	sp, #8
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d101      	bne.n	800a8da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e04a      	b.n	800a970 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	223d      	movs	r2, #61	@ 0x3d
 800a8de:	5c9b      	ldrb	r3, [r3, r2]
 800a8e0:	b2db      	uxtb	r3, r3
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d107      	bne.n	800a8f6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	223c      	movs	r2, #60	@ 0x3c
 800a8ea:	2100      	movs	r1, #0
 800a8ec:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	f000 f841 	bl	800a978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	223d      	movs	r2, #61	@ 0x3d
 800a8fa:	2102      	movs	r1, #2
 800a8fc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681a      	ldr	r2, [r3, #0]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3304      	adds	r3, #4
 800a906:	0019      	movs	r1, r3
 800a908:	0010      	movs	r0, r2
 800a90a:	f000 fbc7 	bl	800b09c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2248      	movs	r2, #72	@ 0x48
 800a912:	2101      	movs	r1, #1
 800a914:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	223e      	movs	r2, #62	@ 0x3e
 800a91a:	2101      	movs	r1, #1
 800a91c:	5499      	strb	r1, [r3, r2]
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	223f      	movs	r2, #63	@ 0x3f
 800a922:	2101      	movs	r1, #1
 800a924:	5499      	strb	r1, [r3, r2]
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2240      	movs	r2, #64	@ 0x40
 800a92a:	2101      	movs	r1, #1
 800a92c:	5499      	strb	r1, [r3, r2]
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2241      	movs	r2, #65	@ 0x41
 800a932:	2101      	movs	r1, #1
 800a934:	5499      	strb	r1, [r3, r2]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2242      	movs	r2, #66	@ 0x42
 800a93a:	2101      	movs	r1, #1
 800a93c:	5499      	strb	r1, [r3, r2]
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2243      	movs	r2, #67	@ 0x43
 800a942:	2101      	movs	r1, #1
 800a944:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2244      	movs	r2, #68	@ 0x44
 800a94a:	2101      	movs	r1, #1
 800a94c:	5499      	strb	r1, [r3, r2]
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2245      	movs	r2, #69	@ 0x45
 800a952:	2101      	movs	r1, #1
 800a954:	5499      	strb	r1, [r3, r2]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2246      	movs	r2, #70	@ 0x46
 800a95a:	2101      	movs	r1, #1
 800a95c:	5499      	strb	r1, [r3, r2]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	2247      	movs	r2, #71	@ 0x47
 800a962:	2101      	movs	r1, #1
 800a964:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	223d      	movs	r2, #61	@ 0x3d
 800a96a:	2101      	movs	r1, #1
 800a96c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a96e:	2300      	movs	r3, #0
}
 800a970:	0018      	movs	r0, r3
 800a972:	46bd      	mov	sp, r7
 800a974:	b002      	add	sp, #8
 800a976:	bd80      	pop	{r7, pc}

0800a978 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b082      	sub	sp, #8
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a980:	46c0      	nop			@ (mov r8, r8)
 800a982:	46bd      	mov	sp, r7
 800a984:	b002      	add	sp, #8
 800a986:	bd80      	pop	{r7, pc}

0800a988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b084      	sub	sp, #16
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	223d      	movs	r2, #61	@ 0x3d
 800a994:	5c9b      	ldrb	r3, [r3, r2]
 800a996:	b2db      	uxtb	r3, r3
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d001      	beq.n	800a9a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a99c:	2301      	movs	r3, #1
 800a99e:	e047      	b.n	800aa30 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	223d      	movs	r2, #61	@ 0x3d
 800a9a4:	2102      	movs	r1, #2
 800a9a6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	68da      	ldr	r2, [r3, #12]
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	2101      	movs	r1, #1
 800a9b4:	430a      	orrs	r2, r1
 800a9b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	4a1e      	ldr	r2, [pc, #120]	@ (800aa38 <HAL_TIM_Base_Start_IT+0xb0>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d014      	beq.n	800a9ec <HAL_TIM_Base_Start_IT+0x64>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	2380      	movs	r3, #128	@ 0x80
 800a9c8:	05db      	lsls	r3, r3, #23
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d00e      	beq.n	800a9ec <HAL_TIM_Base_Start_IT+0x64>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a1a      	ldr	r2, [pc, #104]	@ (800aa3c <HAL_TIM_Base_Start_IT+0xb4>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d009      	beq.n	800a9ec <HAL_TIM_Base_Start_IT+0x64>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	4a18      	ldr	r2, [pc, #96]	@ (800aa40 <HAL_TIM_Base_Start_IT+0xb8>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d004      	beq.n	800a9ec <HAL_TIM_Base_Start_IT+0x64>
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a17      	ldr	r2, [pc, #92]	@ (800aa44 <HAL_TIM_Base_Start_IT+0xbc>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d116      	bne.n	800aa1a <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	4a15      	ldr	r2, [pc, #84]	@ (800aa48 <HAL_TIM_Base_Start_IT+0xc0>)
 800a9f4:	4013      	ands	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2b06      	cmp	r3, #6
 800a9fc:	d016      	beq.n	800aa2c <HAL_TIM_Base_Start_IT+0xa4>
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	2380      	movs	r3, #128	@ 0x80
 800aa02:	025b      	lsls	r3, r3, #9
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d011      	beq.n	800aa2c <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	681a      	ldr	r2, [r3, #0]
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	2101      	movs	r1, #1
 800aa14:	430a      	orrs	r2, r1
 800aa16:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa18:	e008      	b.n	800aa2c <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	2101      	movs	r1, #1
 800aa26:	430a      	orrs	r2, r1
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	e000      	b.n	800aa2e <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa2c:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	0018      	movs	r0, r3
 800aa32:	46bd      	mov	sp, r7
 800aa34:	b004      	add	sp, #16
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	40012c00 	.word	0x40012c00
 800aa3c:	40000400 	.word	0x40000400
 800aa40:	40000800 	.word	0x40000800
 800aa44:	40014000 	.word	0x40014000
 800aa48:	00010007 	.word	0x00010007

0800aa4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d101      	bne.n	800aa5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800aa5a:	2301      	movs	r3, #1
 800aa5c:	e04a      	b.n	800aaf4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	223d      	movs	r2, #61	@ 0x3d
 800aa62:	5c9b      	ldrb	r3, [r3, r2]
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d107      	bne.n	800aa7a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	223c      	movs	r2, #60	@ 0x3c
 800aa6e:	2100      	movs	r1, #0
 800aa70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	0018      	movs	r0, r3
 800aa76:	f7fc fb9f 	bl	80071b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	223d      	movs	r2, #61	@ 0x3d
 800aa7e:	2102      	movs	r1, #2
 800aa80:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3304      	adds	r3, #4
 800aa8a:	0019      	movs	r1, r3
 800aa8c:	0010      	movs	r0, r2
 800aa8e:	f000 fb05 	bl	800b09c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2248      	movs	r2, #72	@ 0x48
 800aa96:	2101      	movs	r1, #1
 800aa98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	223e      	movs	r2, #62	@ 0x3e
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	5499      	strb	r1, [r3, r2]
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	223f      	movs	r2, #63	@ 0x3f
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	5499      	strb	r1, [r3, r2]
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2240      	movs	r2, #64	@ 0x40
 800aaae:	2101      	movs	r1, #1
 800aab0:	5499      	strb	r1, [r3, r2]
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2241      	movs	r2, #65	@ 0x41
 800aab6:	2101      	movs	r1, #1
 800aab8:	5499      	strb	r1, [r3, r2]
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2242      	movs	r2, #66	@ 0x42
 800aabe:	2101      	movs	r1, #1
 800aac0:	5499      	strb	r1, [r3, r2]
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	2243      	movs	r2, #67	@ 0x43
 800aac6:	2101      	movs	r1, #1
 800aac8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2244      	movs	r2, #68	@ 0x44
 800aace:	2101      	movs	r1, #1
 800aad0:	5499      	strb	r1, [r3, r2]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	2245      	movs	r2, #69	@ 0x45
 800aad6:	2101      	movs	r1, #1
 800aad8:	5499      	strb	r1, [r3, r2]
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2246      	movs	r2, #70	@ 0x46
 800aade:	2101      	movs	r1, #1
 800aae0:	5499      	strb	r1, [r3, r2]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2247      	movs	r2, #71	@ 0x47
 800aae6:	2101      	movs	r1, #1
 800aae8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	223d      	movs	r2, #61	@ 0x3d
 800aaee:	2101      	movs	r1, #1
 800aaf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aaf2:	2300      	movs	r3, #0
}
 800aaf4:	0018      	movs	r0, r3
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	b002      	add	sp, #8
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800aafc:	b580      	push	{r7, lr}
 800aafe:	b086      	sub	sp, #24
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e090      	b.n	800ac32 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	223d      	movs	r2, #61	@ 0x3d
 800ab14:	5c9b      	ldrb	r3, [r3, r2]
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d107      	bne.n	800ab2c <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	223c      	movs	r2, #60	@ 0x3c
 800ab20:	2100      	movs	r1, #0
 800ab22:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	0018      	movs	r0, r3
 800ab28:	f7fc fafc 	bl	8007124 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	223d      	movs	r2, #61	@ 0x3d
 800ab30:	2102      	movs	r1, #2
 800ab32:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	493f      	ldr	r1, [pc, #252]	@ (800ac3c <HAL_TIM_Encoder_Init+0x140>)
 800ab40:	400a      	ands	r2, r1
 800ab42:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681a      	ldr	r2, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	3304      	adds	r3, #4
 800ab4c:	0019      	movs	r1, r3
 800ab4e:	0010      	movs	r0, r2
 800ab50:	f000 faa4 	bl	800b09c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6a1b      	ldr	r3, [r3, #32]
 800ab6a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	4313      	orrs	r3, r2
 800ab74:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	4a31      	ldr	r2, [pc, #196]	@ (800ac40 <HAL_TIM_Encoder_Init+0x144>)
 800ab7a:	4013      	ands	r3, r2
 800ab7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	689a      	ldr	r2, [r3, #8]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	021b      	lsls	r3, r3, #8
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	4313      	orrs	r3, r2
 800ab8e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	4a2c      	ldr	r2, [pc, #176]	@ (800ac44 <HAL_TIM_Encoder_Init+0x148>)
 800ab94:	4013      	ands	r3, r2
 800ab96:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	4a2b      	ldr	r2, [pc, #172]	@ (800ac48 <HAL_TIM_Encoder_Init+0x14c>)
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	68da      	ldr	r2, [r3, #12]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	69db      	ldr	r3, [r3, #28]
 800aba8:	021b      	lsls	r3, r3, #8
 800abaa:	4313      	orrs	r3, r2
 800abac:	693a      	ldr	r2, [r7, #16]
 800abae:	4313      	orrs	r3, r2
 800abb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	011a      	lsls	r2, r3, #4
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	6a1b      	ldr	r3, [r3, #32]
 800abbc:	031b      	lsls	r3, r3, #12
 800abbe:	4313      	orrs	r3, r2
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	2222      	movs	r2, #34	@ 0x22
 800abca:	4393      	bics	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	2288      	movs	r2, #136	@ 0x88
 800abd2:	4393      	bics	r3, r2
 800abd4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	685a      	ldr	r2, [r3, #4]
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	695b      	ldr	r3, [r3, #20]
 800abde:	011b      	lsls	r3, r3, #4
 800abe0:	4313      	orrs	r3, r2
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	697a      	ldr	r2, [r7, #20]
 800abee:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	693a      	ldr	r2, [r7, #16]
 800abf6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	68fa      	ldr	r2, [r7, #12]
 800abfe:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2248      	movs	r2, #72	@ 0x48
 800ac04:	2101      	movs	r1, #1
 800ac06:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	223e      	movs	r2, #62	@ 0x3e
 800ac0c:	2101      	movs	r1, #1
 800ac0e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	223f      	movs	r2, #63	@ 0x3f
 800ac14:	2101      	movs	r1, #1
 800ac16:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2244      	movs	r2, #68	@ 0x44
 800ac1c:	2101      	movs	r1, #1
 800ac1e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2245      	movs	r2, #69	@ 0x45
 800ac24:	2101      	movs	r1, #1
 800ac26:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	223d      	movs	r2, #61	@ 0x3d
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ac30:	2300      	movs	r3, #0
}
 800ac32:	0018      	movs	r0, r3
 800ac34:	46bd      	mov	sp, r7
 800ac36:	b006      	add	sp, #24
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	46c0      	nop			@ (mov r8, r8)
 800ac3c:	fffebff8 	.word	0xfffebff8
 800ac40:	fffffcfc 	.word	0xfffffcfc
 800ac44:	fffff3f3 	.word	0xfffff3f3
 800ac48:	ffff0f0f 	.word	0xffff0f0f

0800ac4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b084      	sub	sp, #16
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	691b      	ldr	r3, [r3, #16]
 800ac62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	2202      	movs	r2, #2
 800ac68:	4013      	ands	r3, r2
 800ac6a:	d021      	beq.n	800acb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	2202      	movs	r2, #2
 800ac70:	4013      	ands	r3, r2
 800ac72:	d01d      	beq.n	800acb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	2203      	movs	r2, #3
 800ac7a:	4252      	negs	r2, r2
 800ac7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2201      	movs	r2, #1
 800ac82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	699b      	ldr	r3, [r3, #24]
 800ac8a:	2203      	movs	r2, #3
 800ac8c:	4013      	ands	r3, r2
 800ac8e:	d004      	beq.n	800ac9a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	0018      	movs	r0, r3
 800ac94:	f000 f9ea 	bl	800b06c <HAL_TIM_IC_CaptureCallback>
 800ac98:	e007      	b.n	800acaa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	0018      	movs	r0, r3
 800ac9e:	f000 f9dd 	bl	800b05c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	0018      	movs	r0, r3
 800aca6:	f000 f9e9 	bl	800b07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2200      	movs	r2, #0
 800acae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2204      	movs	r2, #4
 800acb4:	4013      	ands	r3, r2
 800acb6:	d022      	beq.n	800acfe <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	2204      	movs	r2, #4
 800acbc:	4013      	ands	r3, r2
 800acbe:	d01e      	beq.n	800acfe <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2205      	movs	r2, #5
 800acc6:	4252      	negs	r2, r2
 800acc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2202      	movs	r2, #2
 800acce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	699a      	ldr	r2, [r3, #24]
 800acd6:	23c0      	movs	r3, #192	@ 0xc0
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4013      	ands	r3, r2
 800acdc:	d004      	beq.n	800ace8 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	0018      	movs	r0, r3
 800ace2:	f000 f9c3 	bl	800b06c <HAL_TIM_IC_CaptureCallback>
 800ace6:	e007      	b.n	800acf8 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	0018      	movs	r0, r3
 800acec:	f000 f9b6 	bl	800b05c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	0018      	movs	r0, r3
 800acf4:	f000 f9c2 	bl	800b07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	2208      	movs	r2, #8
 800ad02:	4013      	ands	r3, r2
 800ad04:	d021      	beq.n	800ad4a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2208      	movs	r2, #8
 800ad0a:	4013      	ands	r3, r2
 800ad0c:	d01d      	beq.n	800ad4a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	2209      	movs	r2, #9
 800ad14:	4252      	negs	r2, r2
 800ad16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2204      	movs	r2, #4
 800ad1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	2203      	movs	r2, #3
 800ad26:	4013      	ands	r3, r2
 800ad28:	d004      	beq.n	800ad34 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	0018      	movs	r0, r3
 800ad2e:	f000 f99d 	bl	800b06c <HAL_TIM_IC_CaptureCallback>
 800ad32:	e007      	b.n	800ad44 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	0018      	movs	r0, r3
 800ad38:	f000 f990 	bl	800b05c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	0018      	movs	r0, r3
 800ad40:	f000 f99c 	bl	800b07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2200      	movs	r2, #0
 800ad48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	2210      	movs	r2, #16
 800ad4e:	4013      	ands	r3, r2
 800ad50:	d022      	beq.n	800ad98 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	2210      	movs	r2, #16
 800ad56:	4013      	ands	r3, r2
 800ad58:	d01e      	beq.n	800ad98 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2211      	movs	r2, #17
 800ad60:	4252      	negs	r2, r2
 800ad62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2208      	movs	r2, #8
 800ad68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	69da      	ldr	r2, [r3, #28]
 800ad70:	23c0      	movs	r3, #192	@ 0xc0
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	4013      	ands	r3, r2
 800ad76:	d004      	beq.n	800ad82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	0018      	movs	r0, r3
 800ad7c:	f000 f976 	bl	800b06c <HAL_TIM_IC_CaptureCallback>
 800ad80:	e007      	b.n	800ad92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	0018      	movs	r0, r3
 800ad86:	f000 f969 	bl	800b05c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f000 f975 	bl	800b07c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	d00c      	beq.n	800adba <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	2201      	movs	r2, #1
 800ada4:	4013      	ands	r3, r2
 800ada6:	d008      	beq.n	800adba <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2202      	movs	r2, #2
 800adae:	4252      	negs	r2, r2
 800adb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	0018      	movs	r0, r3
 800adb6:	f7fb ffb3 	bl	8006d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	2280      	movs	r2, #128	@ 0x80
 800adbe:	4013      	ands	r3, r2
 800adc0:	d104      	bne.n	800adcc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800adc2:	68ba      	ldr	r2, [r7, #8]
 800adc4:	2380      	movs	r3, #128	@ 0x80
 800adc6:	019b      	lsls	r3, r3, #6
 800adc8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800adca:	d00b      	beq.n	800ade4 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2280      	movs	r2, #128	@ 0x80
 800add0:	4013      	ands	r3, r2
 800add2:	d007      	beq.n	800ade4 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a1e      	ldr	r2, [pc, #120]	@ (800ae54 <HAL_TIM_IRQHandler+0x208>)
 800adda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	0018      	movs	r0, r3
 800ade0:	f000 fd36 	bl	800b850 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ade4:	68ba      	ldr	r2, [r7, #8]
 800ade6:	2380      	movs	r3, #128	@ 0x80
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	4013      	ands	r3, r2
 800adec:	d00b      	beq.n	800ae06 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2280      	movs	r2, #128	@ 0x80
 800adf2:	4013      	ands	r3, r2
 800adf4:	d007      	beq.n	800ae06 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	4a17      	ldr	r2, [pc, #92]	@ (800ae58 <HAL_TIM_IRQHandler+0x20c>)
 800adfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	0018      	movs	r0, r3
 800ae02:	f000 fd2d 	bl	800b860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2240      	movs	r2, #64	@ 0x40
 800ae0a:	4013      	ands	r3, r2
 800ae0c:	d00c      	beq.n	800ae28 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2240      	movs	r2, #64	@ 0x40
 800ae12:	4013      	ands	r3, r2
 800ae14:	d008      	beq.n	800ae28 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	2241      	movs	r2, #65	@ 0x41
 800ae1c:	4252      	negs	r2, r2
 800ae1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	0018      	movs	r0, r3
 800ae24:	f000 f932 	bl	800b08c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	4013      	ands	r3, r2
 800ae2e:	d00c      	beq.n	800ae4a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	2220      	movs	r2, #32
 800ae34:	4013      	ands	r3, r2
 800ae36:	d008      	beq.n	800ae4a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2221      	movs	r2, #33	@ 0x21
 800ae3e:	4252      	negs	r2, r2
 800ae40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	0018      	movs	r0, r3
 800ae46:	f000 fcfb 	bl	800b840 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ae4a:	46c0      	nop			@ (mov r8, r8)
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	b004      	add	sp, #16
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	46c0      	nop			@ (mov r8, r8)
 800ae54:	ffffdf7f 	.word	0xffffdf7f
 800ae58:	fffffeff 	.word	0xfffffeff

0800ae5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b086      	sub	sp, #24
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae68:	2317      	movs	r3, #23
 800ae6a:	18fb      	adds	r3, r7, r3
 800ae6c:	2200      	movs	r2, #0
 800ae6e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	223c      	movs	r2, #60	@ 0x3c
 800ae74:	5c9b      	ldrb	r3, [r3, r2]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d101      	bne.n	800ae7e <HAL_TIM_PWM_ConfigChannel+0x22>
 800ae7a:	2302      	movs	r3, #2
 800ae7c:	e0e5      	b.n	800b04a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	223c      	movs	r2, #60	@ 0x3c
 800ae82:	2101      	movs	r1, #1
 800ae84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2b14      	cmp	r3, #20
 800ae8a:	d900      	bls.n	800ae8e <HAL_TIM_PWM_ConfigChannel+0x32>
 800ae8c:	e0d1      	b.n	800b032 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	009a      	lsls	r2, r3, #2
 800ae92:	4b70      	ldr	r3, [pc, #448]	@ (800b054 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800ae94:	18d3      	adds	r3, r2, r3
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	68ba      	ldr	r2, [r7, #8]
 800aea0:	0011      	movs	r1, r2
 800aea2:	0018      	movs	r0, r3
 800aea4:	f000 f992 	bl	800b1cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	699a      	ldr	r2, [r3, #24]
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	2108      	movs	r1, #8
 800aeb4:	430a      	orrs	r2, r1
 800aeb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	699a      	ldr	r2, [r3, #24]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2104      	movs	r1, #4
 800aec4:	438a      	bics	r2, r1
 800aec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	6999      	ldr	r1, [r3, #24]
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	691a      	ldr	r2, [r3, #16]
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	430a      	orrs	r2, r1
 800aed8:	619a      	str	r2, [r3, #24]
      break;
 800aeda:	e0af      	b.n	800b03c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	68ba      	ldr	r2, [r7, #8]
 800aee2:	0011      	movs	r1, r2
 800aee4:	0018      	movs	r0, r3
 800aee6:	f000 f9fb 	bl	800b2e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	699a      	ldr	r2, [r3, #24]
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	2180      	movs	r1, #128	@ 0x80
 800aef6:	0109      	lsls	r1, r1, #4
 800aef8:	430a      	orrs	r2, r1
 800aefa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	699a      	ldr	r2, [r3, #24]
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	4954      	ldr	r1, [pc, #336]	@ (800b058 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800af08:	400a      	ands	r2, r1
 800af0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	6999      	ldr	r1, [r3, #24]
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	021a      	lsls	r2, r3, #8
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	430a      	orrs	r2, r1
 800af1e:	619a      	str	r2, [r3, #24]
      break;
 800af20:	e08c      	b.n	800b03c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	0011      	movs	r1, r2
 800af2a:	0018      	movs	r0, r3
 800af2c:	f000 fa5c 	bl	800b3e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	69da      	ldr	r2, [r3, #28]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	2108      	movs	r1, #8
 800af3c:	430a      	orrs	r2, r1
 800af3e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	69da      	ldr	r2, [r3, #28]
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	2104      	movs	r1, #4
 800af4c:	438a      	bics	r2, r1
 800af4e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	69d9      	ldr	r1, [r3, #28]
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691a      	ldr	r2, [r3, #16]
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	430a      	orrs	r2, r1
 800af60:	61da      	str	r2, [r3, #28]
      break;
 800af62:	e06b      	b.n	800b03c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	0011      	movs	r1, r2
 800af6c:	0018      	movs	r0, r3
 800af6e:	f000 fac3 	bl	800b4f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	69da      	ldr	r2, [r3, #28]
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2180      	movs	r1, #128	@ 0x80
 800af7e:	0109      	lsls	r1, r1, #4
 800af80:	430a      	orrs	r2, r1
 800af82:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	69da      	ldr	r2, [r3, #28]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4932      	ldr	r1, [pc, #200]	@ (800b058 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800af90:	400a      	ands	r2, r1
 800af92:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	69d9      	ldr	r1, [r3, #28]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	691b      	ldr	r3, [r3, #16]
 800af9e:	021a      	lsls	r2, r3, #8
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	430a      	orrs	r2, r1
 800afa6:	61da      	str	r2, [r3, #28]
      break;
 800afa8:	e048      	b.n	800b03c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	68ba      	ldr	r2, [r7, #8]
 800afb0:	0011      	movs	r1, r2
 800afb2:	0018      	movs	r0, r3
 800afb4:	f000 fb0a 	bl	800b5cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	2108      	movs	r1, #8
 800afc4:	430a      	orrs	r2, r1
 800afc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2104      	movs	r1, #4
 800afd4:	438a      	bics	r2, r1
 800afd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	691a      	ldr	r2, [r3, #16]
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	430a      	orrs	r2, r1
 800afe8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800afea:	e027      	b.n	800b03c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	68ba      	ldr	r2, [r7, #8]
 800aff2:	0011      	movs	r1, r2
 800aff4:	0018      	movs	r0, r3
 800aff6:	f000 fb49 	bl	800b68c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	2180      	movs	r1, #128	@ 0x80
 800b006:	0109      	lsls	r1, r1, #4
 800b008:	430a      	orrs	r2, r1
 800b00a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4910      	ldr	r1, [pc, #64]	@ (800b058 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800b018:	400a      	ands	r2, r1
 800b01a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	691b      	ldr	r3, [r3, #16]
 800b026:	021a      	lsls	r2, r3, #8
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	430a      	orrs	r2, r1
 800b02e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b030:	e004      	b.n	800b03c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800b032:	2317      	movs	r3, #23
 800b034:	18fb      	adds	r3, r7, r3
 800b036:	2201      	movs	r2, #1
 800b038:	701a      	strb	r2, [r3, #0]
      break;
 800b03a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	223c      	movs	r2, #60	@ 0x3c
 800b040:	2100      	movs	r1, #0
 800b042:	5499      	strb	r1, [r3, r2]

  return status;
 800b044:	2317      	movs	r3, #23
 800b046:	18fb      	adds	r3, r7, r3
 800b048:	781b      	ldrb	r3, [r3, #0]
}
 800b04a:	0018      	movs	r0, r3
 800b04c:	46bd      	mov	sp, r7
 800b04e:	b006      	add	sp, #24
 800b050:	bd80      	pop	{r7, pc}
 800b052:	46c0      	nop			@ (mov r8, r8)
 800b054:	08016808 	.word	0x08016808
 800b058:	fffffbff 	.word	0xfffffbff

0800b05c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b064:	46c0      	nop			@ (mov r8, r8)
 800b066:	46bd      	mov	sp, r7
 800b068:	b002      	add	sp, #8
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b074:	46c0      	nop			@ (mov r8, r8)
 800b076:	46bd      	mov	sp, r7
 800b078:	b002      	add	sp, #8
 800b07a:	bd80      	pop	{r7, pc}

0800b07c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b084:	46c0      	nop			@ (mov r8, r8)
 800b086:	46bd      	mov	sp, r7
 800b088:	b002      	add	sp, #8
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b082      	sub	sp, #8
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b094:	46c0      	nop			@ (mov r8, r8)
 800b096:	46bd      	mov	sp, r7
 800b098:	b002      	add	sp, #8
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	4a3f      	ldr	r2, [pc, #252]	@ (800b1ac <TIM_Base_SetConfig+0x110>)
 800b0b0:	4293      	cmp	r3, r2
 800b0b2:	d00c      	beq.n	800b0ce <TIM_Base_SetConfig+0x32>
 800b0b4:	687a      	ldr	r2, [r7, #4]
 800b0b6:	2380      	movs	r3, #128	@ 0x80
 800b0b8:	05db      	lsls	r3, r3, #23
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d007      	beq.n	800b0ce <TIM_Base_SetConfig+0x32>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	4a3b      	ldr	r2, [pc, #236]	@ (800b1b0 <TIM_Base_SetConfig+0x114>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d003      	beq.n	800b0ce <TIM_Base_SetConfig+0x32>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	4a3a      	ldr	r2, [pc, #232]	@ (800b1b4 <TIM_Base_SetConfig+0x118>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d108      	bne.n	800b0e0 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2270      	movs	r2, #112	@ 0x70
 800b0d2:	4393      	bics	r3, r2
 800b0d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	68fa      	ldr	r2, [r7, #12]
 800b0dc:	4313      	orrs	r3, r2
 800b0de:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	4a32      	ldr	r2, [pc, #200]	@ (800b1ac <TIM_Base_SetConfig+0x110>)
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d01c      	beq.n	800b122 <TIM_Base_SetConfig+0x86>
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	2380      	movs	r3, #128	@ 0x80
 800b0ec:	05db      	lsls	r3, r3, #23
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d017      	beq.n	800b122 <TIM_Base_SetConfig+0x86>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a2e      	ldr	r2, [pc, #184]	@ (800b1b0 <TIM_Base_SetConfig+0x114>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d013      	beq.n	800b122 <TIM_Base_SetConfig+0x86>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a2d      	ldr	r2, [pc, #180]	@ (800b1b4 <TIM_Base_SetConfig+0x118>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d00f      	beq.n	800b122 <TIM_Base_SetConfig+0x86>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	4a2c      	ldr	r2, [pc, #176]	@ (800b1b8 <TIM_Base_SetConfig+0x11c>)
 800b106:	4293      	cmp	r3, r2
 800b108:	d00b      	beq.n	800b122 <TIM_Base_SetConfig+0x86>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	4a2b      	ldr	r2, [pc, #172]	@ (800b1bc <TIM_Base_SetConfig+0x120>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d007      	beq.n	800b122 <TIM_Base_SetConfig+0x86>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	4a2a      	ldr	r2, [pc, #168]	@ (800b1c0 <TIM_Base_SetConfig+0x124>)
 800b116:	4293      	cmp	r3, r2
 800b118:	d003      	beq.n	800b122 <TIM_Base_SetConfig+0x86>
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	4a29      	ldr	r2, [pc, #164]	@ (800b1c4 <TIM_Base_SetConfig+0x128>)
 800b11e:	4293      	cmp	r3, r2
 800b120:	d108      	bne.n	800b134 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	4a28      	ldr	r2, [pc, #160]	@ (800b1c8 <TIM_Base_SetConfig+0x12c>)
 800b126:	4013      	ands	r3, r2
 800b128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	68db      	ldr	r3, [r3, #12]
 800b12e:	68fa      	ldr	r2, [r7, #12]
 800b130:	4313      	orrs	r3, r2
 800b132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2280      	movs	r2, #128	@ 0x80
 800b138:	4393      	bics	r3, r2
 800b13a:	001a      	movs	r2, r3
 800b13c:	683b      	ldr	r3, [r7, #0]
 800b13e:	695b      	ldr	r3, [r3, #20]
 800b140:	4313      	orrs	r3, r2
 800b142:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	689a      	ldr	r2, [r3, #8]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	681a      	ldr	r2, [r3, #0]
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4a13      	ldr	r2, [pc, #76]	@ (800b1ac <TIM_Base_SetConfig+0x110>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d00b      	beq.n	800b17a <TIM_Base_SetConfig+0xde>
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4a15      	ldr	r2, [pc, #84]	@ (800b1bc <TIM_Base_SetConfig+0x120>)
 800b166:	4293      	cmp	r3, r2
 800b168:	d007      	beq.n	800b17a <TIM_Base_SetConfig+0xde>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4a14      	ldr	r2, [pc, #80]	@ (800b1c0 <TIM_Base_SetConfig+0x124>)
 800b16e:	4293      	cmp	r3, r2
 800b170:	d003      	beq.n	800b17a <TIM_Base_SetConfig+0xde>
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a13      	ldr	r2, [pc, #76]	@ (800b1c4 <TIM_Base_SetConfig+0x128>)
 800b176:	4293      	cmp	r3, r2
 800b178:	d103      	bne.n	800b182 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	691a      	ldr	r2, [r3, #16]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2201      	movs	r2, #1
 800b186:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	2201      	movs	r2, #1
 800b18e:	4013      	ands	r3, r2
 800b190:	2b01      	cmp	r3, #1
 800b192:	d106      	bne.n	800b1a2 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	2201      	movs	r2, #1
 800b19a:	4393      	bics	r3, r2
 800b19c:	001a      	movs	r2, r3
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	611a      	str	r2, [r3, #16]
  }
}
 800b1a2:	46c0      	nop			@ (mov r8, r8)
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	b004      	add	sp, #16
 800b1a8:	bd80      	pop	{r7, pc}
 800b1aa:	46c0      	nop			@ (mov r8, r8)
 800b1ac:	40012c00 	.word	0x40012c00
 800b1b0:	40000400 	.word	0x40000400
 800b1b4:	40000800 	.word	0x40000800
 800b1b8:	40002000 	.word	0x40002000
 800b1bc:	40014000 	.word	0x40014000
 800b1c0:	40014400 	.word	0x40014400
 800b1c4:	40014800 	.word	0x40014800
 800b1c8:	fffffcff 	.word	0xfffffcff

0800b1cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b086      	sub	sp, #24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a1b      	ldr	r3, [r3, #32]
 800b1da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a1b      	ldr	r3, [r3, #32]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	4393      	bics	r3, r2
 800b1e4:	001a      	movs	r2, r3
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	699b      	ldr	r3, [r3, #24]
 800b1f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4a32      	ldr	r2, [pc, #200]	@ (800b2c4 <TIM_OC1_SetConfig+0xf8>)
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2203      	movs	r2, #3
 800b202:	4393      	bics	r3, r2
 800b204:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	4313      	orrs	r3, r2
 800b20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	2202      	movs	r2, #2
 800b214:	4393      	bics	r3, r2
 800b216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	697a      	ldr	r2, [r7, #20]
 800b21e:	4313      	orrs	r3, r2
 800b220:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	4a28      	ldr	r2, [pc, #160]	@ (800b2c8 <TIM_OC1_SetConfig+0xfc>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d00b      	beq.n	800b242 <TIM_OC1_SetConfig+0x76>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	4a27      	ldr	r2, [pc, #156]	@ (800b2cc <TIM_OC1_SetConfig+0x100>)
 800b22e:	4293      	cmp	r3, r2
 800b230:	d007      	beq.n	800b242 <TIM_OC1_SetConfig+0x76>
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	4a26      	ldr	r2, [pc, #152]	@ (800b2d0 <TIM_OC1_SetConfig+0x104>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d003      	beq.n	800b242 <TIM_OC1_SetConfig+0x76>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4a25      	ldr	r2, [pc, #148]	@ (800b2d4 <TIM_OC1_SetConfig+0x108>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d10c      	bne.n	800b25c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	2208      	movs	r2, #8
 800b246:	4393      	bics	r3, r2
 800b248:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	68db      	ldr	r3, [r3, #12]
 800b24e:	697a      	ldr	r2, [r7, #20]
 800b250:	4313      	orrs	r3, r2
 800b252:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	2204      	movs	r2, #4
 800b258:	4393      	bics	r3, r2
 800b25a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a1a      	ldr	r2, [pc, #104]	@ (800b2c8 <TIM_OC1_SetConfig+0xfc>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d00b      	beq.n	800b27c <TIM_OC1_SetConfig+0xb0>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a19      	ldr	r2, [pc, #100]	@ (800b2cc <TIM_OC1_SetConfig+0x100>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d007      	beq.n	800b27c <TIM_OC1_SetConfig+0xb0>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a18      	ldr	r2, [pc, #96]	@ (800b2d0 <TIM_OC1_SetConfig+0x104>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d003      	beq.n	800b27c <TIM_OC1_SetConfig+0xb0>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a17      	ldr	r2, [pc, #92]	@ (800b2d4 <TIM_OC1_SetConfig+0x108>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d111      	bne.n	800b2a0 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	4a16      	ldr	r2, [pc, #88]	@ (800b2d8 <TIM_OC1_SetConfig+0x10c>)
 800b280:	4013      	ands	r3, r2
 800b282:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b284:	693b      	ldr	r3, [r7, #16]
 800b286:	4a15      	ldr	r2, [pc, #84]	@ (800b2dc <TIM_OC1_SetConfig+0x110>)
 800b288:	4013      	ands	r3, r2
 800b28a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	693a      	ldr	r2, [r7, #16]
 800b292:	4313      	orrs	r3, r2
 800b294:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	693a      	ldr	r2, [r7, #16]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	68fa      	ldr	r2, [r7, #12]
 800b2aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	685a      	ldr	r2, [r3, #4]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	697a      	ldr	r2, [r7, #20]
 800b2b8:	621a      	str	r2, [r3, #32]
}
 800b2ba:	46c0      	nop			@ (mov r8, r8)
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	b006      	add	sp, #24
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	46c0      	nop			@ (mov r8, r8)
 800b2c4:	fffeff8f 	.word	0xfffeff8f
 800b2c8:	40012c00 	.word	0x40012c00
 800b2cc:	40014000 	.word	0x40014000
 800b2d0:	40014400 	.word	0x40014400
 800b2d4:	40014800 	.word	0x40014800
 800b2d8:	fffffeff 	.word	0xfffffeff
 800b2dc:	fffffdff 	.word	0xfffffdff

0800b2e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b086      	sub	sp, #24
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
 800b2e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	6a1b      	ldr	r3, [r3, #32]
 800b2ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a1b      	ldr	r3, [r3, #32]
 800b2f4:	2210      	movs	r2, #16
 800b2f6:	4393      	bics	r3, r2
 800b2f8:	001a      	movs	r2, r3
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	699b      	ldr	r3, [r3, #24]
 800b308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	4a2e      	ldr	r2, [pc, #184]	@ (800b3c8 <TIM_OC2_SetConfig+0xe8>)
 800b30e:	4013      	ands	r3, r2
 800b310:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4a2d      	ldr	r2, [pc, #180]	@ (800b3cc <TIM_OC2_SetConfig+0xec>)
 800b316:	4013      	ands	r3, r2
 800b318:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	021b      	lsls	r3, r3, #8
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2220      	movs	r2, #32
 800b32a:	4393      	bics	r3, r2
 800b32c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	689b      	ldr	r3, [r3, #8]
 800b332:	011b      	lsls	r3, r3, #4
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	4313      	orrs	r3, r2
 800b338:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a24      	ldr	r2, [pc, #144]	@ (800b3d0 <TIM_OC2_SetConfig+0xf0>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d10d      	bne.n	800b35e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	2280      	movs	r2, #128	@ 0x80
 800b346:	4393      	bics	r3, r2
 800b348:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	68db      	ldr	r3, [r3, #12]
 800b34e:	011b      	lsls	r3, r3, #4
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	4313      	orrs	r3, r2
 800b354:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b356:	697b      	ldr	r3, [r7, #20]
 800b358:	2240      	movs	r2, #64	@ 0x40
 800b35a:	4393      	bics	r3, r2
 800b35c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	4a1b      	ldr	r2, [pc, #108]	@ (800b3d0 <TIM_OC2_SetConfig+0xf0>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d00b      	beq.n	800b37e <TIM_OC2_SetConfig+0x9e>
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	4a1a      	ldr	r2, [pc, #104]	@ (800b3d4 <TIM_OC2_SetConfig+0xf4>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d007      	beq.n	800b37e <TIM_OC2_SetConfig+0x9e>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	4a19      	ldr	r2, [pc, #100]	@ (800b3d8 <TIM_OC2_SetConfig+0xf8>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d003      	beq.n	800b37e <TIM_OC2_SetConfig+0x9e>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4a18      	ldr	r2, [pc, #96]	@ (800b3dc <TIM_OC2_SetConfig+0xfc>)
 800b37a:	4293      	cmp	r3, r2
 800b37c:	d113      	bne.n	800b3a6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	4a17      	ldr	r2, [pc, #92]	@ (800b3e0 <TIM_OC2_SetConfig+0x100>)
 800b382:	4013      	ands	r3, r2
 800b384:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	4a16      	ldr	r2, [pc, #88]	@ (800b3e4 <TIM_OC2_SetConfig+0x104>)
 800b38a:	4013      	ands	r3, r2
 800b38c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	695b      	ldr	r3, [r3, #20]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	693a      	ldr	r2, [r7, #16]
 800b396:	4313      	orrs	r3, r2
 800b398:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	699b      	ldr	r3, [r3, #24]
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	693a      	ldr	r2, [r7, #16]
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	697a      	ldr	r2, [r7, #20]
 800b3be:	621a      	str	r2, [r3, #32]
}
 800b3c0:	46c0      	nop			@ (mov r8, r8)
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	b006      	add	sp, #24
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	feff8fff 	.word	0xfeff8fff
 800b3cc:	fffffcff 	.word	0xfffffcff
 800b3d0:	40012c00 	.word	0x40012c00
 800b3d4:	40014000 	.word	0x40014000
 800b3d8:	40014400 	.word	0x40014400
 800b3dc:	40014800 	.word	0x40014800
 800b3e0:	fffffbff 	.word	0xfffffbff
 800b3e4:	fffff7ff 	.word	0xfffff7ff

0800b3e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6a1b      	ldr	r3, [r3, #32]
 800b3f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6a1b      	ldr	r3, [r3, #32]
 800b3fc:	4a33      	ldr	r2, [pc, #204]	@ (800b4cc <TIM_OC3_SetConfig+0xe4>)
 800b3fe:	401a      	ands	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	685b      	ldr	r3, [r3, #4]
 800b408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4a2f      	ldr	r2, [pc, #188]	@ (800b4d0 <TIM_OC3_SetConfig+0xe8>)
 800b414:	4013      	ands	r3, r2
 800b416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2203      	movs	r2, #3
 800b41c:	4393      	bics	r3, r2
 800b41e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b420:	683b      	ldr	r3, [r7, #0]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	4313      	orrs	r3, r2
 800b428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	4a29      	ldr	r2, [pc, #164]	@ (800b4d4 <TIM_OC3_SetConfig+0xec>)
 800b42e:	4013      	ands	r3, r2
 800b430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	021b      	lsls	r3, r3, #8
 800b438:	697a      	ldr	r2, [r7, #20]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4a25      	ldr	r2, [pc, #148]	@ (800b4d8 <TIM_OC3_SetConfig+0xf0>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d10d      	bne.n	800b462 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	4a24      	ldr	r2, [pc, #144]	@ (800b4dc <TIM_OC3_SetConfig+0xf4>)
 800b44a:	4013      	ands	r3, r2
 800b44c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	021b      	lsls	r3, r3, #8
 800b454:	697a      	ldr	r2, [r7, #20]
 800b456:	4313      	orrs	r3, r2
 800b458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	4a20      	ldr	r2, [pc, #128]	@ (800b4e0 <TIM_OC3_SetConfig+0xf8>)
 800b45e:	4013      	ands	r3, r2
 800b460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4a1c      	ldr	r2, [pc, #112]	@ (800b4d8 <TIM_OC3_SetConfig+0xf0>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d00b      	beq.n	800b482 <TIM_OC3_SetConfig+0x9a>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4a1d      	ldr	r2, [pc, #116]	@ (800b4e4 <TIM_OC3_SetConfig+0xfc>)
 800b46e:	4293      	cmp	r3, r2
 800b470:	d007      	beq.n	800b482 <TIM_OC3_SetConfig+0x9a>
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	4a1c      	ldr	r2, [pc, #112]	@ (800b4e8 <TIM_OC3_SetConfig+0x100>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d003      	beq.n	800b482 <TIM_OC3_SetConfig+0x9a>
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	4a1b      	ldr	r2, [pc, #108]	@ (800b4ec <TIM_OC3_SetConfig+0x104>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d113      	bne.n	800b4aa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	4a1a      	ldr	r2, [pc, #104]	@ (800b4f0 <TIM_OC3_SetConfig+0x108>)
 800b486:	4013      	ands	r3, r2
 800b488:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	4a19      	ldr	r2, [pc, #100]	@ (800b4f4 <TIM_OC3_SetConfig+0x10c>)
 800b48e:	4013      	ands	r3, r2
 800b490:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	011b      	lsls	r3, r3, #4
 800b498:	693a      	ldr	r2, [r7, #16]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	699b      	ldr	r3, [r3, #24]
 800b4a2:	011b      	lsls	r3, r3, #4
 800b4a4:	693a      	ldr	r2, [r7, #16]
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	693a      	ldr	r2, [r7, #16]
 800b4ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	685a      	ldr	r2, [r3, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	621a      	str	r2, [r3, #32]
}
 800b4c4:	46c0      	nop			@ (mov r8, r8)
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	b006      	add	sp, #24
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	fffffeff 	.word	0xfffffeff
 800b4d0:	fffeff8f 	.word	0xfffeff8f
 800b4d4:	fffffdff 	.word	0xfffffdff
 800b4d8:	40012c00 	.word	0x40012c00
 800b4dc:	fffff7ff 	.word	0xfffff7ff
 800b4e0:	fffffbff 	.word	0xfffffbff
 800b4e4:	40014000 	.word	0x40014000
 800b4e8:	40014400 	.word	0x40014400
 800b4ec:	40014800 	.word	0x40014800
 800b4f0:	ffffefff 	.word	0xffffefff
 800b4f4:	ffffdfff 	.word	0xffffdfff

0800b4f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b086      	sub	sp, #24
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
 800b500:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a1b      	ldr	r3, [r3, #32]
 800b506:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a1b      	ldr	r3, [r3, #32]
 800b50c:	4a26      	ldr	r2, [pc, #152]	@ (800b5a8 <TIM_OC4_SetConfig+0xb0>)
 800b50e:	401a      	ands	r2, r3
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	4a22      	ldr	r2, [pc, #136]	@ (800b5ac <TIM_OC4_SetConfig+0xb4>)
 800b524:	4013      	ands	r3, r2
 800b526:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	4a21      	ldr	r2, [pc, #132]	@ (800b5b0 <TIM_OC4_SetConfig+0xb8>)
 800b52c:	4013      	ands	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	021b      	lsls	r3, r3, #8
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	4313      	orrs	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b53c:	693b      	ldr	r3, [r7, #16]
 800b53e:	4a1d      	ldr	r2, [pc, #116]	@ (800b5b4 <TIM_OC4_SetConfig+0xbc>)
 800b540:	4013      	ands	r3, r2
 800b542:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	031b      	lsls	r3, r3, #12
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	4a19      	ldr	r2, [pc, #100]	@ (800b5b8 <TIM_OC4_SetConfig+0xc0>)
 800b554:	4293      	cmp	r3, r2
 800b556:	d00b      	beq.n	800b570 <TIM_OC4_SetConfig+0x78>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	4a18      	ldr	r2, [pc, #96]	@ (800b5bc <TIM_OC4_SetConfig+0xc4>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d007      	beq.n	800b570 <TIM_OC4_SetConfig+0x78>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4a17      	ldr	r2, [pc, #92]	@ (800b5c0 <TIM_OC4_SetConfig+0xc8>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d003      	beq.n	800b570 <TIM_OC4_SetConfig+0x78>
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	4a16      	ldr	r2, [pc, #88]	@ (800b5c4 <TIM_OC4_SetConfig+0xcc>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d109      	bne.n	800b584 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	4a15      	ldr	r2, [pc, #84]	@ (800b5c8 <TIM_OC4_SetConfig+0xd0>)
 800b574:	4013      	ands	r3, r2
 800b576:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	695b      	ldr	r3, [r3, #20]
 800b57c:	019b      	lsls	r3, r3, #6
 800b57e:	697a      	ldr	r2, [r7, #20]
 800b580:	4313      	orrs	r3, r2
 800b582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	697a      	ldr	r2, [r7, #20]
 800b588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	68fa      	ldr	r2, [r7, #12]
 800b58e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	685a      	ldr	r2, [r3, #4]
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	693a      	ldr	r2, [r7, #16]
 800b59c:	621a      	str	r2, [r3, #32]
}
 800b59e:	46c0      	nop			@ (mov r8, r8)
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	b006      	add	sp, #24
 800b5a4:	bd80      	pop	{r7, pc}
 800b5a6:	46c0      	nop			@ (mov r8, r8)
 800b5a8:	ffffefff 	.word	0xffffefff
 800b5ac:	feff8fff 	.word	0xfeff8fff
 800b5b0:	fffffcff 	.word	0xfffffcff
 800b5b4:	ffffdfff 	.word	0xffffdfff
 800b5b8:	40012c00 	.word	0x40012c00
 800b5bc:	40014000 	.word	0x40014000
 800b5c0:	40014400 	.word	0x40014400
 800b5c4:	40014800 	.word	0x40014800
 800b5c8:	ffffbfff 	.word	0xffffbfff

0800b5cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6a1b      	ldr	r3, [r3, #32]
 800b5e0:	4a23      	ldr	r2, [pc, #140]	@ (800b670 <TIM_OC5_SetConfig+0xa4>)
 800b5e2:	401a      	ands	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	685b      	ldr	r3, [r3, #4]
 800b5ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b5f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b674 <TIM_OC5_SetConfig+0xa8>)
 800b5f8:	4013      	ands	r3, r2
 800b5fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4313      	orrs	r3, r2
 800b604:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	4a1b      	ldr	r2, [pc, #108]	@ (800b678 <TIM_OC5_SetConfig+0xac>)
 800b60a:	4013      	ands	r3, r2
 800b60c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b60e:	683b      	ldr	r3, [r7, #0]
 800b610:	689b      	ldr	r3, [r3, #8]
 800b612:	041b      	lsls	r3, r3, #16
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	4313      	orrs	r3, r2
 800b618:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	4a17      	ldr	r2, [pc, #92]	@ (800b67c <TIM_OC5_SetConfig+0xb0>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d00b      	beq.n	800b63a <TIM_OC5_SetConfig+0x6e>
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	4a16      	ldr	r2, [pc, #88]	@ (800b680 <TIM_OC5_SetConfig+0xb4>)
 800b626:	4293      	cmp	r3, r2
 800b628:	d007      	beq.n	800b63a <TIM_OC5_SetConfig+0x6e>
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	4a15      	ldr	r2, [pc, #84]	@ (800b684 <TIM_OC5_SetConfig+0xb8>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d003      	beq.n	800b63a <TIM_OC5_SetConfig+0x6e>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	4a14      	ldr	r2, [pc, #80]	@ (800b688 <TIM_OC5_SetConfig+0xbc>)
 800b636:	4293      	cmp	r3, r2
 800b638:	d109      	bne.n	800b64e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	4a0c      	ldr	r2, [pc, #48]	@ (800b670 <TIM_OC5_SetConfig+0xa4>)
 800b63e:	4013      	ands	r3, r2
 800b640:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	021b      	lsls	r3, r3, #8
 800b648:	697a      	ldr	r2, [r7, #20]
 800b64a:	4313      	orrs	r3, r2
 800b64c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	697a      	ldr	r2, [r7, #20]
 800b652:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	68fa      	ldr	r2, [r7, #12]
 800b658:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	685a      	ldr	r2, [r3, #4]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	693a      	ldr	r2, [r7, #16]
 800b666:	621a      	str	r2, [r3, #32]
}
 800b668:	46c0      	nop			@ (mov r8, r8)
 800b66a:	46bd      	mov	sp, r7
 800b66c:	b006      	add	sp, #24
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	fffeffff 	.word	0xfffeffff
 800b674:	fffeff8f 	.word	0xfffeff8f
 800b678:	fffdffff 	.word	0xfffdffff
 800b67c:	40012c00 	.word	0x40012c00
 800b680:	40014000 	.word	0x40014000
 800b684:	40014400 	.word	0x40014400
 800b688:	40014800 	.word	0x40014800

0800b68c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6a1b      	ldr	r3, [r3, #32]
 800b69a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	4a24      	ldr	r2, [pc, #144]	@ (800b734 <TIM_OC6_SetConfig+0xa8>)
 800b6a2:	401a      	ands	r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	685b      	ldr	r3, [r3, #4]
 800b6ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4a20      	ldr	r2, [pc, #128]	@ (800b738 <TIM_OC6_SetConfig+0xac>)
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	021b      	lsls	r3, r3, #8
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b73c <TIM_OC6_SetConfig+0xb0>)
 800b6cc:	4013      	ands	r3, r2
 800b6ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	689b      	ldr	r3, [r3, #8]
 800b6d4:	051b      	lsls	r3, r3, #20
 800b6d6:	693a      	ldr	r2, [r7, #16]
 800b6d8:	4313      	orrs	r3, r2
 800b6da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	4a18      	ldr	r2, [pc, #96]	@ (800b740 <TIM_OC6_SetConfig+0xb4>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d00b      	beq.n	800b6fc <TIM_OC6_SetConfig+0x70>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	4a17      	ldr	r2, [pc, #92]	@ (800b744 <TIM_OC6_SetConfig+0xb8>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d007      	beq.n	800b6fc <TIM_OC6_SetConfig+0x70>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	4a16      	ldr	r2, [pc, #88]	@ (800b748 <TIM_OC6_SetConfig+0xbc>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d003      	beq.n	800b6fc <TIM_OC6_SetConfig+0x70>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	4a15      	ldr	r2, [pc, #84]	@ (800b74c <TIM_OC6_SetConfig+0xc0>)
 800b6f8:	4293      	cmp	r3, r2
 800b6fa:	d109      	bne.n	800b710 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	4a14      	ldr	r2, [pc, #80]	@ (800b750 <TIM_OC6_SetConfig+0xc4>)
 800b700:	4013      	ands	r3, r2
 800b702:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	695b      	ldr	r3, [r3, #20]
 800b708:	029b      	lsls	r3, r3, #10
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	4313      	orrs	r3, r2
 800b70e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	685a      	ldr	r2, [r3, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	693a      	ldr	r2, [r7, #16]
 800b728:	621a      	str	r2, [r3, #32]
}
 800b72a:	46c0      	nop			@ (mov r8, r8)
 800b72c:	46bd      	mov	sp, r7
 800b72e:	b006      	add	sp, #24
 800b730:	bd80      	pop	{r7, pc}
 800b732:	46c0      	nop			@ (mov r8, r8)
 800b734:	ffefffff 	.word	0xffefffff
 800b738:	feff8fff 	.word	0xfeff8fff
 800b73c:	ffdfffff 	.word	0xffdfffff
 800b740:	40012c00 	.word	0x40012c00
 800b744:	40014000 	.word	0x40014000
 800b748:	40014400 	.word	0x40014400
 800b74c:	40014800 	.word	0x40014800
 800b750:	fffbffff 	.word	0xfffbffff

0800b754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	223c      	movs	r2, #60	@ 0x3c
 800b762:	5c9b      	ldrb	r3, [r3, r2]
 800b764:	2b01      	cmp	r3, #1
 800b766:	d101      	bne.n	800b76c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b768:	2302      	movs	r3, #2
 800b76a:	e05a      	b.n	800b822 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	223c      	movs	r2, #60	@ 0x3c
 800b770:	2101      	movs	r1, #1
 800b772:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	223d      	movs	r2, #61	@ 0x3d
 800b778:	2102      	movs	r1, #2
 800b77a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	685b      	ldr	r3, [r3, #4]
 800b782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a26      	ldr	r2, [pc, #152]	@ (800b82c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d108      	bne.n	800b7a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	4a25      	ldr	r2, [pc, #148]	@ (800b830 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b79a:	4013      	ands	r3, r2
 800b79c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	4313      	orrs	r3, r2
 800b7a6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2270      	movs	r2, #112	@ 0x70
 800b7ac:	4393      	bics	r3, r2
 800b7ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68fa      	ldr	r2, [r7, #12]
 800b7b6:	4313      	orrs	r3, r2
 800b7b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	4a19      	ldr	r2, [pc, #100]	@ (800b82c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d014      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	2380      	movs	r3, #128	@ 0x80
 800b7d2:	05db      	lsls	r3, r3, #23
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d00e      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	4a15      	ldr	r2, [pc, #84]	@ (800b834 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d009      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	4a14      	ldr	r2, [pc, #80]	@ (800b838 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d004      	beq.n	800b7f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	4a12      	ldr	r2, [pc, #72]	@ (800b83c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b7f2:	4293      	cmp	r3, r2
 800b7f4:	d10c      	bne.n	800b810 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	2280      	movs	r2, #128	@ 0x80
 800b7fa:	4393      	bics	r3, r2
 800b7fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b7fe:	683b      	ldr	r3, [r7, #0]
 800b800:	689b      	ldr	r3, [r3, #8]
 800b802:	68ba      	ldr	r2, [r7, #8]
 800b804:	4313      	orrs	r3, r2
 800b806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	223d      	movs	r2, #61	@ 0x3d
 800b814:	2101      	movs	r1, #1
 800b816:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	223c      	movs	r2, #60	@ 0x3c
 800b81c:	2100      	movs	r1, #0
 800b81e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b820:	2300      	movs	r3, #0
}
 800b822:	0018      	movs	r0, r3
 800b824:	46bd      	mov	sp, r7
 800b826:	b004      	add	sp, #16
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	46c0      	nop			@ (mov r8, r8)
 800b82c:	40012c00 	.word	0x40012c00
 800b830:	ff0fffff 	.word	0xff0fffff
 800b834:	40000400 	.word	0x40000400
 800b838:	40000800 	.word	0x40000800
 800b83c:	40014000 	.word	0x40014000

0800b840 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b848:	46c0      	nop			@ (mov r8, r8)
 800b84a:	46bd      	mov	sp, r7
 800b84c:	b002      	add	sp, #8
 800b84e:	bd80      	pop	{r7, pc}

0800b850 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b858:	46c0      	nop			@ (mov r8, r8)
 800b85a:	46bd      	mov	sp, r7
 800b85c:	b002      	add	sp, #8
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b868:	46c0      	nop			@ (mov r8, r8)
 800b86a:	46bd      	mov	sp, r7
 800b86c:	b002      	add	sp, #8
 800b86e:	bd80      	pop	{r7, pc}

0800b870 <LL_DMA_ConfigTransfer>:
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b086      	sub	sp, #24
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800b880:	4a0c      	ldr	r2, [pc, #48]	@ (800b8b4 <LL_DMA_ConfigTransfer+0x44>)
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	18d3      	adds	r3, r2, r3
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	001a      	movs	r2, r3
 800b88a:	697b      	ldr	r3, [r7, #20]
 800b88c:	18d3      	adds	r3, r2, r3
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	4a09      	ldr	r2, [pc, #36]	@ (800b8b8 <LL_DMA_ConfigTransfer+0x48>)
 800b892:	4013      	ands	r3, r2
 800b894:	0019      	movs	r1, r3
 800b896:	4a07      	ldr	r2, [pc, #28]	@ (800b8b4 <LL_DMA_ConfigTransfer+0x44>)
 800b898:	68bb      	ldr	r3, [r7, #8]
 800b89a:	18d3      	adds	r3, r2, r3
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	001a      	movs	r2, r3
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	18d3      	adds	r3, r2, r3
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	430a      	orrs	r2, r1
 800b8a8:	601a      	str	r2, [r3, #0]
}
 800b8aa:	46c0      	nop			@ (mov r8, r8)
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	b006      	add	sp, #24
 800b8b0:	bd80      	pop	{r7, pc}
 800b8b2:	46c0      	nop			@ (mov r8, r8)
 800b8b4:	0801685c 	.word	0x0801685c
 800b8b8:	ffff800f 	.word	0xffff800f

0800b8bc <LL_DMA_SetDataLength>:
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b086      	sub	sp, #24
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800b8cc:	4a0b      	ldr	r2, [pc, #44]	@ (800b8fc <LL_DMA_SetDataLength+0x40>)
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	18d3      	adds	r3, r2, r3
 800b8d2:	781b      	ldrb	r3, [r3, #0]
 800b8d4:	001a      	movs	r2, r3
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	18d3      	adds	r3, r2, r3
 800b8da:	685b      	ldr	r3, [r3, #4]
 800b8dc:	0c1b      	lsrs	r3, r3, #16
 800b8de:	0419      	lsls	r1, r3, #16
 800b8e0:	4a06      	ldr	r2, [pc, #24]	@ (800b8fc <LL_DMA_SetDataLength+0x40>)
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	18d3      	adds	r3, r2, r3
 800b8e6:	781b      	ldrb	r3, [r3, #0]
 800b8e8:	001a      	movs	r2, r3
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	18d3      	adds	r3, r2, r3
 800b8ee:	687a      	ldr	r2, [r7, #4]
 800b8f0:	430a      	orrs	r2, r1
 800b8f2:	605a      	str	r2, [r3, #4]
}
 800b8f4:	46c0      	nop			@ (mov r8, r8)
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	b006      	add	sp, #24
 800b8fa:	bd80      	pop	{r7, pc}
 800b8fc:	0801685c 	.word	0x0801685c

0800b900 <LL_DMA_SetMemoryAddress>:
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800b910:	4a06      	ldr	r2, [pc, #24]	@ (800b92c <LL_DMA_SetMemoryAddress+0x2c>)
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	18d3      	adds	r3, r2, r3
 800b916:	781b      	ldrb	r3, [r3, #0]
 800b918:	001a      	movs	r2, r3
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	18d3      	adds	r3, r2, r3
 800b91e:	687a      	ldr	r2, [r7, #4]
 800b920:	60da      	str	r2, [r3, #12]
}
 800b922:	46c0      	nop			@ (mov r8, r8)
 800b924:	46bd      	mov	sp, r7
 800b926:	b006      	add	sp, #24
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	46c0      	nop			@ (mov r8, r8)
 800b92c:	0801685c 	.word	0x0801685c

0800b930 <LL_DMA_SetPeriphAddress>:
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b086      	sub	sp, #24
 800b934:	af00      	add	r7, sp, #0
 800b936:	60f8      	str	r0, [r7, #12]
 800b938:	60b9      	str	r1, [r7, #8]
 800b93a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800b940:	4a06      	ldr	r2, [pc, #24]	@ (800b95c <LL_DMA_SetPeriphAddress+0x2c>)
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	18d3      	adds	r3, r2, r3
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	001a      	movs	r2, r3
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	18d3      	adds	r3, r2, r3
 800b94e:	687a      	ldr	r2, [r7, #4]
 800b950:	609a      	str	r2, [r3, #8]
}
 800b952:	46c0      	nop			@ (mov r8, r8)
 800b954:	46bd      	mov	sp, r7
 800b956:	b006      	add	sp, #24
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	46c0      	nop			@ (mov r8, r8)
 800b95c:	0801685c 	.word	0x0801685c

0800b960 <LL_DMA_SetPeriphRequest>:
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b086      	sub	sp, #24
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	0a9b      	lsrs	r3, r3, #10
 800b970:	4a0f      	ldr	r2, [pc, #60]	@ (800b9b0 <LL_DMA_SetPeriphRequest+0x50>)
 800b972:	405a      	eors	r2, r3
 800b974:	0013      	movs	r3, r2
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	1a9b      	subs	r3, r3, r2
 800b97a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800b97c:	68ba      	ldr	r2, [r7, #8]
 800b97e:	697b      	ldr	r3, [r7, #20]
 800b980:	18d3      	adds	r3, r2, r3
 800b982:	009b      	lsls	r3, r3, #2
 800b984:	4a0b      	ldr	r2, [pc, #44]	@ (800b9b4 <LL_DMA_SetPeriphRequest+0x54>)
 800b986:	4694      	mov	ip, r2
 800b988:	4463      	add	r3, ip
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	227f      	movs	r2, #127	@ 0x7f
 800b98e:	4393      	bics	r3, r2
 800b990:	0019      	movs	r1, r3
 800b992:	68ba      	ldr	r2, [r7, #8]
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	18d3      	adds	r3, r2, r3
 800b998:	009b      	lsls	r3, r3, #2
 800b99a:	4a06      	ldr	r2, [pc, #24]	@ (800b9b4 <LL_DMA_SetPeriphRequest+0x54>)
 800b99c:	4694      	mov	ip, r2
 800b99e:	4463      	add	r3, ip
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	601a      	str	r2, [r3, #0]
}
 800b9a6:	46c0      	nop			@ (mov r8, r8)
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	b006      	add	sp, #24
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	46c0      	nop			@ (mov r8, r8)
 800b9b0:	00100080 	.word	0x00100080
 800b9b4:	40020800 	.word	0x40020800

0800b9b8 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b9cc:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800b9d2:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800b9d8:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800b9de:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800b9e4:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800b9ea:	431a      	orrs	r2, r3
 800b9ec:	68b9      	ldr	r1, [r7, #8]
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	0018      	movs	r0, r3
 800b9f2:	f7ff ff3d 	bl	800b870 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685a      	ldr	r2, [r3, #4]
 800b9fa:	68b9      	ldr	r1, [r7, #8]
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	0018      	movs	r0, r3
 800ba00:	f7ff ff7e 	bl	800b900 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681a      	ldr	r2, [r3, #0]
 800ba08:	68b9      	ldr	r1, [r7, #8]
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	f7ff ff8f 	bl	800b930 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6a1a      	ldr	r2, [r3, #32]
 800ba16:	68b9      	ldr	r1, [r7, #8]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	0018      	movs	r0, r3
 800ba1c:	f7ff ff4e 	bl	800b8bc <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba24:	68b9      	ldr	r1, [r7, #8]
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	0018      	movs	r0, r3
 800ba2a:	f7ff ff99 	bl	800b960 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	0018      	movs	r0, r3
 800ba32:	46bd      	mov	sp, r7
 800ba34:	b004      	add	sp, #16
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2200      	movs	r2, #0
 800ba4a:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2200      	movs	r2, #0
 800ba74:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	2200      	movs	r2, #0
 800ba7a:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800ba82:	46c0      	nop			@ (mov r8, r8)
 800ba84:	46bd      	mov	sp, r7
 800ba86:	b002      	add	sp, #8
 800ba88:	bd80      	pop	{r7, pc}

0800ba8a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800ba8a:	b580      	push	{r7, lr}
 800ba8c:	b084      	sub	sp, #16
 800ba8e:	af00      	add	r7, sp, #0
 800ba90:	60f8      	str	r0, [r7, #12]
 800ba92:	60b9      	str	r1, [r7, #8]
 800ba94:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	6819      	ldr	r1, [r3, #0]
 800ba9a:	68bb      	ldr	r3, [r7, #8]
 800ba9c:	435b      	muls	r3, r3
 800ba9e:	001a      	movs	r2, r3
 800baa0:	0013      	movs	r3, r2
 800baa2:	005b      	lsls	r3, r3, #1
 800baa4:	189b      	adds	r3, r3, r2
 800baa6:	43db      	mvns	r3, r3
 800baa8:	400b      	ands	r3, r1
 800baaa:	001a      	movs	r2, r3
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	435b      	muls	r3, r3
 800bab0:	6879      	ldr	r1, [r7, #4]
 800bab2:	434b      	muls	r3, r1
 800bab4:	431a      	orrs	r2, r3
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	601a      	str	r2, [r3, #0]
}
 800baba:	46c0      	nop			@ (mov r8, r8)
 800babc:	46bd      	mov	sp, r7
 800babe:	b004      	add	sp, #16
 800bac0:	bd80      	pop	{r7, pc}

0800bac2 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b084      	sub	sp, #16
 800bac6:	af00      	add	r7, sp, #0
 800bac8:	60f8      	str	r0, [r7, #12]
 800baca:	60b9      	str	r1, [r7, #8]
 800bacc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68ba      	ldr	r2, [r7, #8]
 800bad4:	43d2      	mvns	r2, r2
 800bad6:	401a      	ands	r2, r3
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	6879      	ldr	r1, [r7, #4]
 800badc:	434b      	muls	r3, r1
 800bade:	431a      	orrs	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	605a      	str	r2, [r3, #4]
}
 800bae4:	46c0      	nop			@ (mov r8, r8)
 800bae6:	46bd      	mov	sp, r7
 800bae8:	b004      	add	sp, #16
 800baea:	bd80      	pop	{r7, pc}

0800baec <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	6899      	ldr	r1, [r3, #8]
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	435b      	muls	r3, r3
 800bb00:	001a      	movs	r2, r3
 800bb02:	0013      	movs	r3, r2
 800bb04:	005b      	lsls	r3, r3, #1
 800bb06:	189b      	adds	r3, r3, r2
 800bb08:	43db      	mvns	r3, r3
 800bb0a:	400b      	ands	r3, r1
 800bb0c:	001a      	movs	r2, r3
 800bb0e:	68bb      	ldr	r3, [r7, #8]
 800bb10:	435b      	muls	r3, r3
 800bb12:	6879      	ldr	r1, [r7, #4]
 800bb14:	434b      	muls	r3, r1
 800bb16:	431a      	orrs	r2, r3
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	609a      	str	r2, [r3, #8]
}
 800bb1c:	46c0      	nop			@ (mov r8, r8)
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	b004      	add	sp, #16
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	60f8      	str	r0, [r7, #12]
 800bb2c:	60b9      	str	r1, [r7, #8]
 800bb2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	68d9      	ldr	r1, [r3, #12]
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	435b      	muls	r3, r3
 800bb38:	001a      	movs	r2, r3
 800bb3a:	0013      	movs	r3, r2
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	189b      	adds	r3, r3, r2
 800bb40:	43db      	mvns	r3, r3
 800bb42:	400b      	ands	r3, r1
 800bb44:	001a      	movs	r2, r3
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	435b      	muls	r3, r3
 800bb4a:	6879      	ldr	r1, [r7, #4]
 800bb4c:	434b      	muls	r3, r1
 800bb4e:	431a      	orrs	r2, r3
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	60da      	str	r2, [r3, #12]
}
 800bb54:	46c0      	nop			@ (mov r8, r8)
 800bb56:	46bd      	mov	sp, r7
 800bb58:	b004      	add	sp, #16
 800bb5a:	bd80      	pop	{r7, pc}

0800bb5c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b084      	sub	sp, #16
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	60f8      	str	r0, [r7, #12]
 800bb64:	60b9      	str	r1, [r7, #8]
 800bb66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	6a19      	ldr	r1, [r3, #32]
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	435b      	muls	r3, r3
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	4353      	muls	r3, r2
 800bb74:	68ba      	ldr	r2, [r7, #8]
 800bb76:	435a      	muls	r2, r3
 800bb78:	0013      	movs	r3, r2
 800bb7a:	011b      	lsls	r3, r3, #4
 800bb7c:	1a9b      	subs	r3, r3, r2
 800bb7e:	43db      	mvns	r3, r3
 800bb80:	400b      	ands	r3, r1
 800bb82:	001a      	movs	r2, r3
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	435b      	muls	r3, r3
 800bb88:	68b9      	ldr	r1, [r7, #8]
 800bb8a:	434b      	muls	r3, r1
 800bb8c:	68b9      	ldr	r1, [r7, #8]
 800bb8e:	434b      	muls	r3, r1
 800bb90:	6879      	ldr	r1, [r7, #4]
 800bb92:	434b      	muls	r3, r1
 800bb94:	431a      	orrs	r2, r3
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800bb9a:	46c0      	nop			@ (mov r8, r8)
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	b004      	add	sp, #16
 800bba0:	bd80      	pop	{r7, pc}

0800bba2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800bba2:	b580      	push	{r7, lr}
 800bba4:	b084      	sub	sp, #16
 800bba6:	af00      	add	r7, sp, #0
 800bba8:	60f8      	str	r0, [r7, #12]
 800bbaa:	60b9      	str	r1, [r7, #8]
 800bbac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800bbb2:	68bb      	ldr	r3, [r7, #8]
 800bbb4:	0a1b      	lsrs	r3, r3, #8
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	0a12      	lsrs	r2, r2, #8
 800bbba:	4353      	muls	r3, r2
 800bbbc:	68ba      	ldr	r2, [r7, #8]
 800bbbe:	0a12      	lsrs	r2, r2, #8
 800bbc0:	4353      	muls	r3, r2
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	0a12      	lsrs	r2, r2, #8
 800bbc6:	435a      	muls	r2, r3
 800bbc8:	0013      	movs	r3, r2
 800bbca:	011b      	lsls	r3, r3, #4
 800bbcc:	1a9b      	subs	r3, r3, r2
 800bbce:	43db      	mvns	r3, r3
 800bbd0:	400b      	ands	r3, r1
 800bbd2:	001a      	movs	r2, r3
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	0a1b      	lsrs	r3, r3, #8
 800bbd8:	68b9      	ldr	r1, [r7, #8]
 800bbda:	0a09      	lsrs	r1, r1, #8
 800bbdc:	434b      	muls	r3, r1
 800bbde:	68b9      	ldr	r1, [r7, #8]
 800bbe0:	0a09      	lsrs	r1, r1, #8
 800bbe2:	434b      	muls	r3, r1
 800bbe4:	68b9      	ldr	r1, [r7, #8]
 800bbe6:	0a09      	lsrs	r1, r1, #8
 800bbe8:	434b      	muls	r3, r1
 800bbea:	6879      	ldr	r1, [r7, #4]
 800bbec:	434b      	muls	r3, r1
 800bbee:	431a      	orrs	r2, r3
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800bbf4:	46c0      	nop			@ (mov r8, r8)
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	b004      	add	sp, #16
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b084      	sub	sp, #16
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
 800bc04:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800bc06:	2300      	movs	r3, #0
 800bc08:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800bc0a:	e047      	b.n	800bc9c <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2101      	movs	r1, #1
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	4091      	lsls	r1, r2
 800bc16:	000a      	movs	r2, r1
 800bc18:	4013      	ands	r3, r2
 800bc1a:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d039      	beq.n	800bc96 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d003      	beq.n	800bc32 <LL_GPIO_Init+0x36>
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	685b      	ldr	r3, [r3, #4]
 800bc2e:	2b02      	cmp	r3, #2
 800bc30:	d10d      	bne.n	800bc4e <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	689a      	ldr	r2, [r3, #8]
 800bc36:	68b9      	ldr	r1, [r7, #8]
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	0018      	movs	r0, r3
 800bc3c:	f7ff ff56 	bl	800baec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	68b9      	ldr	r1, [r7, #8]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	0018      	movs	r0, r3
 800bc4a:	f7ff ff3a 	bl	800bac2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	691a      	ldr	r2, [r3, #16]
 800bc52:	68b9      	ldr	r1, [r7, #8]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	0018      	movs	r0, r3
 800bc58:	f7ff ff64 	bl	800bb24 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d111      	bne.n	800bc88 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2bff      	cmp	r3, #255	@ 0xff
 800bc68:	d807      	bhi.n	800bc7a <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	695a      	ldr	r2, [r3, #20]
 800bc6e:	68b9      	ldr	r1, [r7, #8]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	0018      	movs	r0, r3
 800bc74:	f7ff ff72 	bl	800bb5c <LL_GPIO_SetAFPin_0_7>
 800bc78:	e006      	b.n	800bc88 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	695a      	ldr	r2, [r3, #20]
 800bc7e:	68b9      	ldr	r1, [r7, #8]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	0018      	movs	r0, r3
 800bc84:	f7ff ff8d 	bl	800bba2 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	685a      	ldr	r2, [r3, #4]
 800bc8c:	68b9      	ldr	r1, [r7, #8]
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	0018      	movs	r0, r3
 800bc92:	f7ff fefa 	bl	800ba8a <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	40da      	lsrs	r2, r3
 800bca4:	1e13      	subs	r3, r2, #0
 800bca6:	d1b1      	bne.n	800bc0c <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	0018      	movs	r0, r3
 800bcac:	46bd      	mov	sp, r7
 800bcae:	b004      	add	sp, #16
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	085a      	lsrs	r2, r3, #1
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	601a      	str	r2, [r3, #0]
}
 800bcc6:	46c0      	nop			@ (mov r8, r8)
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	b002      	add	sp, #8
 800bccc:	bd80      	pop	{r7, pc}
	...

0800bcd0 <LL_APB1_GRP1_EnableClock>:
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800bcd8:	4b07      	ldr	r3, [pc, #28]	@ (800bcf8 <LL_APB1_GRP1_EnableClock+0x28>)
 800bcda:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800bcdc:	4b06      	ldr	r3, [pc, #24]	@ (800bcf8 <LL_APB1_GRP1_EnableClock+0x28>)
 800bcde:	687a      	ldr	r2, [r7, #4]
 800bce0:	430a      	orrs	r2, r1
 800bce2:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800bce4:	4b04      	ldr	r3, [pc, #16]	@ (800bcf8 <LL_APB1_GRP1_EnableClock+0x28>)
 800bce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bce8:	687a      	ldr	r2, [r7, #4]
 800bcea:	4013      	ands	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800bcee:	68fb      	ldr	r3, [r7, #12]
}
 800bcf0:	46c0      	nop			@ (mov r8, r8)
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	b004      	add	sp, #16
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	40021000 	.word	0x40021000

0800bcfc <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b082      	sub	sp, #8
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
 800bd04:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a16      	ldr	r2, [pc, #88]	@ (800bd64 <LL_UCPD_Init+0x68>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d104      	bne.n	800bd18 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800bd0e:	2380      	movs	r3, #128	@ 0x80
 800bd10:	049b      	lsls	r3, r3, #18
 800bd12:	0018      	movs	r0, r3
 800bd14:	f7ff ffdc 	bl	800bcd0 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a13      	ldr	r2, [pc, #76]	@ (800bd68 <LL_UCPD_Init+0x6c>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d104      	bne.n	800bd2a <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800bd20:	2380      	movs	r3, #128	@ 0x80
 800bd22:	04db      	lsls	r3, r3, #19
 800bd24:	0018      	movs	r0, r3
 800bd26:	f7ff ffd3 	bl	800bcd0 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	0018      	movs	r0, r3
 800bd2e:	f7ff ffc0 	bl	800bcb2 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	4a0d      	ldr	r2, [pc, #52]	@ (800bd6c <LL_UCPD_Init+0x70>)
 800bd38:	401a      	ands	r2, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	6819      	ldr	r1, [r3, #0]
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	02db      	lsls	r3, r3, #11
 800bd44:	4319      	orrs	r1, r3
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	019b      	lsls	r3, r3, #6
 800bd4c:	4319      	orrs	r1, r3
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	430b      	orrs	r3, r1
 800bd54:	431a      	orrs	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800bd5a:	2300      	movs	r3, #0
}
 800bd5c:	0018      	movs	r0, r3
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	b002      	add	sp, #8
 800bd62:	bd80      	pop	{r7, pc}
 800bd64:	4000a000 	.word	0x4000a000
 800bd68:	4000a400 	.word	0x4000a400
 800bd6c:	fff10000 	.word	0xfff10000

0800bd70 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2280      	movs	r2, #128	@ 0x80
 800bd7c:	0292      	lsls	r2, r2, #10
 800bd7e:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2207      	movs	r2, #7
 800bd84:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	2210      	movs	r2, #16
 800bd8a:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	220d      	movs	r2, #13
 800bd90:	60da      	str	r2, [r3, #12]
}
 800bd92:	46c0      	nop			@ (mov r8, r8)
 800bd94:	46bd      	mov	sp, r7
 800bd96:	b002      	add	sp, #8
 800bd98:	bd80      	pop	{r7, pc}

0800bd9a <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_DRD_TypeDef const *USBx, uint32_t num)
{
 800bd9a:	b580      	push	{r7, lr}
 800bd9c:	b082      	sub	sp, #8
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	0018      	movs	r0, r3
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	b002      	add	sp, #8
 800bdac:	bd80      	pop	{r7, pc}

0800bdae <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_DRD_TypeDef const *USBx)
{
 800bdae:	b580      	push	{r7, lr}
 800bdb0:	b082      	sub	sp, #8
 800bdb2:	af00      	add	r7, sp, #0
 800bdb4:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	0018      	movs	r0, r3
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	b002      	add	sp, #8
 800bdbe:	bd80      	pop	{r7, pc}

0800bdc0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b09e      	sub	sp, #120	@ 0x78
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
 800bdc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bdca:	2377      	movs	r3, #119	@ 0x77
 800bdcc:	18fb      	adds	r3, r7, r3
 800bdce:	2200      	movs	r2, #0
 800bdd0:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	18d3      	adds	r3, r2, r3
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4adc      	ldr	r2, [pc, #880]	@ (800c150 <USB_ActivateEndpoint+0x390>)
 800bde0:	4013      	ands	r3, r2
 800bde2:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800bde4:	683b      	ldr	r3, [r7, #0]
 800bde6:	78db      	ldrb	r3, [r3, #3]
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d00e      	beq.n	800be0a <USB_ActivateEndpoint+0x4a>
 800bdec:	dc19      	bgt.n	800be22 <USB_ActivateEndpoint+0x62>
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	d01c      	beq.n	800be2c <USB_ActivateEndpoint+0x6c>
 800bdf2:	dc16      	bgt.n	800be22 <USB_ActivateEndpoint+0x62>
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d002      	beq.n	800bdfe <USB_ActivateEndpoint+0x3e>
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d00c      	beq.n	800be16 <USB_ActivateEndpoint+0x56>
 800bdfc:	e011      	b.n	800be22 <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bdfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be00:	2280      	movs	r2, #128	@ 0x80
 800be02:	0092      	lsls	r2, r2, #2
 800be04:	4313      	orrs	r3, r2
 800be06:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800be08:	e011      	b.n	800be2e <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800be0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be0c:	22c0      	movs	r2, #192	@ 0xc0
 800be0e:	00d2      	lsls	r2, r2, #3
 800be10:	4313      	orrs	r3, r2
 800be12:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800be14:	e00b      	b.n	800be2e <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800be16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800be18:	2280      	movs	r2, #128	@ 0x80
 800be1a:	00d2      	lsls	r2, r2, #3
 800be1c:	4313      	orrs	r3, r2
 800be1e:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800be20:	e005      	b.n	800be2e <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800be22:	2377      	movs	r3, #119	@ 0x77
 800be24:	18fb      	adds	r3, r7, r3
 800be26:	2201      	movs	r2, #1
 800be28:	701a      	strb	r2, [r3, #0]
      break;
 800be2a:	e000      	b.n	800be2e <USB_ActivateEndpoint+0x6e>
      break;
 800be2c:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800be2e:	687a      	ldr	r2, [r7, #4]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	781b      	ldrb	r3, [r3, #0]
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	18d3      	adds	r3, r2, r3
 800be38:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800be3a:	49c6      	ldr	r1, [pc, #792]	@ (800c154 <USB_ActivateEndpoint+0x394>)
 800be3c:	430a      	orrs	r2, r1
 800be3e:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800be40:	687a      	ldr	r2, [r7, #4]
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	18d3      	adds	r3, r2, r3
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	4ac2      	ldr	r2, [pc, #776]	@ (800c158 <USB_ActivateEndpoint+0x398>)
 800be4e:	4013      	ands	r3, r2
 800be50:	683a      	ldr	r2, [r7, #0]
 800be52:	7812      	ldrb	r2, [r2, #0]
 800be54:	4313      	orrs	r3, r2
 800be56:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781b      	ldrb	r3, [r3, #0]
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	18d3      	adds	r3, r2, r3
 800be62:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800be64:	49bb      	ldr	r1, [pc, #748]	@ (800c154 <USB_ActivateEndpoint+0x394>)
 800be66:	430a      	orrs	r2, r1
 800be68:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	7b1b      	ldrb	r3, [r3, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d000      	beq.n	800be74 <USB_ActivateEndpoint+0xb4>
 800be72:	e155      	b.n	800c120 <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	785b      	ldrb	r3, [r3, #1]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d06e      	beq.n	800bf5a <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	00db      	lsls	r3, r3, #3
 800be82:	4ab6      	ldr	r2, [pc, #728]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800be84:	4694      	mov	ip, r2
 800be86:	4463      	add	r3, ip
 800be88:	681a      	ldr	r2, [r3, #0]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	00db      	lsls	r3, r3, #3
 800be90:	49b2      	ldr	r1, [pc, #712]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800be92:	468c      	mov	ip, r1
 800be94:	4463      	add	r3, ip
 800be96:	0c12      	lsrs	r2, r2, #16
 800be98:	0412      	lsls	r2, r2, #16
 800be9a:	601a      	str	r2, [r3, #0]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	00db      	lsls	r3, r3, #3
 800bea2:	4aae      	ldr	r2, [pc, #696]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bea4:	4694      	mov	ip, r2
 800bea6:	4463      	add	r3, ip
 800bea8:	6819      	ldr	r1, [r3, #0]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	88db      	ldrh	r3, [r3, #6]
 800beae:	089b      	lsrs	r3, r3, #2
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	009a      	lsls	r2, r3, #2
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	00db      	lsls	r3, r3, #3
 800beba:	48a8      	ldr	r0, [pc, #672]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bebc:	4684      	mov	ip, r0
 800bebe:	4463      	add	r3, ip
 800bec0:	430a      	orrs	r2, r1
 800bec2:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	18d3      	adds	r3, r2, r3
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	61bb      	str	r3, [r7, #24]
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	2240      	movs	r2, #64	@ 0x40
 800bed6:	4013      	ands	r3, r2
 800bed8:	d011      	beq.n	800befe <USB_ActivateEndpoint+0x13e>
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	009b      	lsls	r3, r3, #2
 800bee2:	18d3      	adds	r3, r2, r3
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4a9c      	ldr	r2, [pc, #624]	@ (800c158 <USB_ActivateEndpoint+0x398>)
 800bee8:	4013      	ands	r3, r2
 800beea:	617b      	str	r3, [r7, #20]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	781b      	ldrb	r3, [r3, #0]
 800bef2:	009b      	lsls	r3, r3, #2
 800bef4:	18d3      	adds	r3, r2, r3
 800bef6:	697a      	ldr	r2, [r7, #20]
 800bef8:	4999      	ldr	r1, [pc, #612]	@ (800c160 <USB_ActivateEndpoint+0x3a0>)
 800befa:	430a      	orrs	r2, r1
 800befc:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	78db      	ldrb	r3, [r3, #3]
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d016      	beq.n	800bf34 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bf06:	687a      	ldr	r2, [r7, #4]
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	781b      	ldrb	r3, [r3, #0]
 800bf0c:	009b      	lsls	r3, r3, #2
 800bf0e:	18d3      	adds	r3, r2, r3
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a94      	ldr	r2, [pc, #592]	@ (800c164 <USB_ActivateEndpoint+0x3a4>)
 800bf14:	4013      	ands	r3, r2
 800bf16:	60fb      	str	r3, [r7, #12]
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2220      	movs	r2, #32
 800bf1c:	4053      	eors	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
 800bf20:	687a      	ldr	r2, [r7, #4]
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	781b      	ldrb	r3, [r3, #0]
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	18d3      	adds	r3, r2, r3
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4989      	ldr	r1, [pc, #548]	@ (800c154 <USB_ActivateEndpoint+0x394>)
 800bf2e:	430a      	orrs	r2, r1
 800bf30:	601a      	str	r2, [r3, #0]
 800bf32:	e261      	b.n	800c3f8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	009b      	lsls	r3, r3, #2
 800bf3c:	18d3      	adds	r3, r2, r3
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	4a88      	ldr	r2, [pc, #544]	@ (800c164 <USB_ActivateEndpoint+0x3a4>)
 800bf42:	4013      	ands	r3, r2
 800bf44:	613b      	str	r3, [r7, #16]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	683b      	ldr	r3, [r7, #0]
 800bf4a:	781b      	ldrb	r3, [r3, #0]
 800bf4c:	009b      	lsls	r3, r3, #2
 800bf4e:	18d3      	adds	r3, r2, r3
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	4980      	ldr	r1, [pc, #512]	@ (800c154 <USB_ActivateEndpoint+0x394>)
 800bf54:	430a      	orrs	r2, r1
 800bf56:	601a      	str	r2, [r3, #0]
 800bf58:	e24e      	b.n	800c3f8 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	781b      	ldrb	r3, [r3, #0]
 800bf5e:	00db      	lsls	r3, r3, #3
 800bf60:	4a7e      	ldr	r2, [pc, #504]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bf62:	4694      	mov	ip, r2
 800bf64:	4463      	add	r3, ip
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	781b      	ldrb	r3, [r3, #0]
 800bf6c:	00db      	lsls	r3, r3, #3
 800bf6e:	497b      	ldr	r1, [pc, #492]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bf70:	468c      	mov	ip, r1
 800bf72:	4463      	add	r3, ip
 800bf74:	0c12      	lsrs	r2, r2, #16
 800bf76:	0412      	lsls	r2, r2, #16
 800bf78:	605a      	str	r2, [r3, #4]
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	00db      	lsls	r3, r3, #3
 800bf80:	4a76      	ldr	r2, [pc, #472]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bf82:	4694      	mov	ip, r2
 800bf84:	4463      	add	r3, ip
 800bf86:	6859      	ldr	r1, [r3, #4]
 800bf88:	683b      	ldr	r3, [r7, #0]
 800bf8a:	88db      	ldrh	r3, [r3, #6]
 800bf8c:	089b      	lsrs	r3, r3, #2
 800bf8e:	b29b      	uxth	r3, r3
 800bf90:	009a      	lsls	r2, r3, #2
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	00db      	lsls	r3, r3, #3
 800bf98:	4870      	ldr	r0, [pc, #448]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bf9a:	4684      	mov	ip, r0
 800bf9c:	4463      	add	r3, ip
 800bf9e:	430a      	orrs	r2, r1
 800bfa0:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	781b      	ldrb	r3, [r3, #0]
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	4a6c      	ldr	r2, [pc, #432]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bfaa:	4694      	mov	ip, r2
 800bfac:	4463      	add	r3, ip
 800bfae:	685a      	ldr	r2, [r3, #4]
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	00db      	lsls	r3, r3, #3
 800bfb6:	4969      	ldr	r1, [pc, #420]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bfb8:	468c      	mov	ip, r1
 800bfba:	4463      	add	r3, ip
 800bfbc:	0192      	lsls	r2, r2, #6
 800bfbe:	0992      	lsrs	r2, r2, #6
 800bfc0:	605a      	str	r2, [r3, #4]
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	2b3e      	cmp	r3, #62	@ 0x3e
 800bfc8:	d920      	bls.n	800c00c <USB_ActivateEndpoint+0x24c>
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	095b      	lsrs	r3, r3, #5
 800bfd0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	691b      	ldr	r3, [r3, #16]
 800bfd6:	221f      	movs	r2, #31
 800bfd8:	4013      	ands	r3, r2
 800bfda:	d102      	bne.n	800bfe2 <USB_ActivateEndpoint+0x222>
 800bfdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	781b      	ldrb	r3, [r3, #0]
 800bfe6:	00db      	lsls	r3, r3, #3
 800bfe8:	4a5c      	ldr	r2, [pc, #368]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bfea:	4694      	mov	ip, r2
 800bfec:	4463      	add	r3, ip
 800bfee:	685a      	ldr	r2, [r3, #4]
 800bff0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bff2:	069b      	lsls	r3, r3, #26
 800bff4:	431a      	orrs	r2, r3
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	00db      	lsls	r3, r3, #3
 800bffc:	4957      	ldr	r1, [pc, #348]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800bffe:	468c      	mov	ip, r1
 800c000:	4463      	add	r3, ip
 800c002:	2180      	movs	r1, #128	@ 0x80
 800c004:	0609      	lsls	r1, r1, #24
 800c006:	430a      	orrs	r2, r1
 800c008:	605a      	str	r2, [r3, #4]
 800c00a:	e032      	b.n	800c072 <USB_ActivateEndpoint+0x2b2>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d111      	bne.n	800c038 <USB_ActivateEndpoint+0x278>
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	781b      	ldrb	r3, [r3, #0]
 800c018:	00db      	lsls	r3, r3, #3
 800c01a:	4a50      	ldr	r2, [pc, #320]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800c01c:	4694      	mov	ip, r2
 800c01e:	4463      	add	r3, ip
 800c020:	685a      	ldr	r2, [r3, #4]
 800c022:	683b      	ldr	r3, [r7, #0]
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	494c      	ldr	r1, [pc, #304]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800c02a:	468c      	mov	ip, r1
 800c02c:	4463      	add	r3, ip
 800c02e:	2180      	movs	r1, #128	@ 0x80
 800c030:	0609      	lsls	r1, r1, #24
 800c032:	430a      	orrs	r2, r1
 800c034:	605a      	str	r2, [r3, #4]
 800c036:	e01c      	b.n	800c072 <USB_ActivateEndpoint+0x2b2>
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	691b      	ldr	r3, [r3, #16]
 800c03c:	085b      	lsrs	r3, r3, #1
 800c03e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	691b      	ldr	r3, [r3, #16]
 800c044:	2201      	movs	r2, #1
 800c046:	4013      	ands	r3, r2
 800c048:	d002      	beq.n	800c050 <USB_ActivateEndpoint+0x290>
 800c04a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c04c:	3301      	adds	r3, #1
 800c04e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c050:	683b      	ldr	r3, [r7, #0]
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	00db      	lsls	r3, r3, #3
 800c056:	4a41      	ldr	r2, [pc, #260]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800c058:	4694      	mov	ip, r2
 800c05a:	4463      	add	r3, ip
 800c05c:	6859      	ldr	r1, [r3, #4]
 800c05e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c060:	069a      	lsls	r2, r3, #26
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	781b      	ldrb	r3, [r3, #0]
 800c066:	00db      	lsls	r3, r3, #3
 800c068:	483c      	ldr	r0, [pc, #240]	@ (800c15c <USB_ActivateEndpoint+0x39c>)
 800c06a:	4684      	mov	ip, r0
 800c06c:	4463      	add	r3, ip
 800c06e:	430a      	orrs	r2, r1
 800c070:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c072:	687a      	ldr	r2, [r7, #4]
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	18d3      	adds	r3, r2, r3
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c080:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c082:	2380      	movs	r3, #128	@ 0x80
 800c084:	01db      	lsls	r3, r3, #7
 800c086:	4013      	ands	r3, r2
 800c088:	d011      	beq.n	800c0ae <USB_ActivateEndpoint+0x2ee>
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	18d3      	adds	r3, r2, r3
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a30      	ldr	r2, [pc, #192]	@ (800c158 <USB_ActivateEndpoint+0x398>)
 800c098:	4013      	ands	r3, r2
 800c09a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	18d3      	adds	r3, r2, r3
 800c0a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0a8:	492f      	ldr	r1, [pc, #188]	@ (800c168 <USB_ActivateEndpoint+0x3a8>)
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d11c      	bne.n	800c0f0 <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0b6:	687a      	ldr	r2, [r7, #4]
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	18d3      	adds	r3, r2, r3
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	4a2a      	ldr	r2, [pc, #168]	@ (800c16c <USB_ActivateEndpoint+0x3ac>)
 800c0c4:	4013      	ands	r3, r2
 800c0c6:	61fb      	str	r3, [r7, #28]
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	2280      	movs	r2, #128	@ 0x80
 800c0cc:	0152      	lsls	r2, r2, #5
 800c0ce:	4053      	eors	r3, r2
 800c0d0:	61fb      	str	r3, [r7, #28]
 800c0d2:	69fb      	ldr	r3, [r7, #28]
 800c0d4:	2280      	movs	r2, #128	@ 0x80
 800c0d6:	0192      	lsls	r2, r2, #6
 800c0d8:	4053      	eors	r3, r2
 800c0da:	61fb      	str	r3, [r7, #28]
 800c0dc:	687a      	ldr	r2, [r7, #4]
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	18d3      	adds	r3, r2, r3
 800c0e6:	69fa      	ldr	r2, [r7, #28]
 800c0e8:	491a      	ldr	r1, [pc, #104]	@ (800c154 <USB_ActivateEndpoint+0x394>)
 800c0ea:	430a      	orrs	r2, r1
 800c0ec:	601a      	str	r2, [r3, #0]
 800c0ee:	e183      	b.n	800c3f8 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	009b      	lsls	r3, r3, #2
 800c0f8:	18d3      	adds	r3, r2, r3
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4a1b      	ldr	r2, [pc, #108]	@ (800c16c <USB_ActivateEndpoint+0x3ac>)
 800c0fe:	4013      	ands	r3, r2
 800c100:	623b      	str	r3, [r7, #32]
 800c102:	6a3b      	ldr	r3, [r7, #32]
 800c104:	2280      	movs	r2, #128	@ 0x80
 800c106:	0192      	lsls	r2, r2, #6
 800c108:	4053      	eors	r3, r2
 800c10a:	623b      	str	r3, [r7, #32]
 800c10c:	687a      	ldr	r2, [r7, #4]
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	781b      	ldrb	r3, [r3, #0]
 800c112:	009b      	lsls	r3, r3, #2
 800c114:	18d3      	adds	r3, r2, r3
 800c116:	6a3a      	ldr	r2, [r7, #32]
 800c118:	490e      	ldr	r1, [pc, #56]	@ (800c154 <USB_ActivateEndpoint+0x394>)
 800c11a:	430a      	orrs	r2, r1
 800c11c:	601a      	str	r2, [r3, #0]
 800c11e:	e16b      	b.n	800c3f8 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	78db      	ldrb	r3, [r3, #3]
 800c124:	2b02      	cmp	r3, #2
 800c126:	d125      	bne.n	800c174 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	18d3      	adds	r3, r2, r3
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	4a08      	ldr	r2, [pc, #32]	@ (800c158 <USB_ActivateEndpoint+0x398>)
 800c136:	4013      	ands	r3, r2
 800c138:	663b      	str	r3, [r7, #96]	@ 0x60
 800c13a:	687a      	ldr	r2, [r7, #4]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	18d3      	adds	r3, r2, r3
 800c144:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800c146:	490a      	ldr	r1, [pc, #40]	@ (800c170 <USB_ActivateEndpoint+0x3b0>)
 800c148:	430a      	orrs	r2, r1
 800c14a:	601a      	str	r2, [r3, #0]
 800c14c:	e024      	b.n	800c198 <USB_ActivateEndpoint+0x3d8>
 800c14e:	46c0      	nop			@ (mov r8, r8)
 800c150:	07ff898f 	.word	0x07ff898f
 800c154:	00008080 	.word	0x00008080
 800c158:	07ff8f8f 	.word	0x07ff8f8f
 800c15c:	40009800 	.word	0x40009800
 800c160:	000080c0 	.word	0x000080c0
 800c164:	07ff8fbf 	.word	0x07ff8fbf
 800c168:	0000c080 	.word	0x0000c080
 800c16c:	07ffbf8f 	.word	0x07ffbf8f
 800c170:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	18d3      	adds	r3, r2, r3
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4aa1      	ldr	r2, [pc, #644]	@ (800c408 <USB_ActivateEndpoint+0x648>)
 800c182:	4013      	ands	r3, r2
 800c184:	667b      	str	r3, [r7, #100]	@ 0x64
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	781b      	ldrb	r3, [r3, #0]
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	18d3      	adds	r3, r2, r3
 800c190:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800c192:	499e      	ldr	r1, [pc, #632]	@ (800c40c <USB_ActivateEndpoint+0x64c>)
 800c194:	430a      	orrs	r2, r1
 800c196:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	781b      	ldrb	r3, [r3, #0]
 800c19c:	00db      	lsls	r3, r3, #3
 800c19e:	4a9c      	ldr	r2, [pc, #624]	@ (800c410 <USB_ActivateEndpoint+0x650>)
 800c1a0:	4694      	mov	ip, r2
 800c1a2:	4463      	add	r3, ip
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	00db      	lsls	r3, r3, #3
 800c1ac:	4998      	ldr	r1, [pc, #608]	@ (800c410 <USB_ActivateEndpoint+0x650>)
 800c1ae:	468c      	mov	ip, r1
 800c1b0:	4463      	add	r3, ip
 800c1b2:	0c12      	lsrs	r2, r2, #16
 800c1b4:	0412      	lsls	r2, r2, #16
 800c1b6:	601a      	str	r2, [r3, #0]
 800c1b8:	683b      	ldr	r3, [r7, #0]
 800c1ba:	781b      	ldrb	r3, [r3, #0]
 800c1bc:	00db      	lsls	r3, r3, #3
 800c1be:	4a94      	ldr	r2, [pc, #592]	@ (800c410 <USB_ActivateEndpoint+0x650>)
 800c1c0:	4694      	mov	ip, r2
 800c1c2:	4463      	add	r3, ip
 800c1c4:	6819      	ldr	r1, [r3, #0]
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	891b      	ldrh	r3, [r3, #8]
 800c1ca:	089b      	lsrs	r3, r3, #2
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	009a      	lsls	r2, r3, #2
 800c1d0:	683b      	ldr	r3, [r7, #0]
 800c1d2:	781b      	ldrb	r3, [r3, #0]
 800c1d4:	00db      	lsls	r3, r3, #3
 800c1d6:	488e      	ldr	r0, [pc, #568]	@ (800c410 <USB_ActivateEndpoint+0x650>)
 800c1d8:	4684      	mov	ip, r0
 800c1da:	4463      	add	r3, ip
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	601a      	str	r2, [r3, #0]
 800c1e0:	683b      	ldr	r3, [r7, #0]
 800c1e2:	781b      	ldrb	r3, [r3, #0]
 800c1e4:	00db      	lsls	r3, r3, #3
 800c1e6:	4a8a      	ldr	r2, [pc, #552]	@ (800c410 <USB_ActivateEndpoint+0x650>)
 800c1e8:	4694      	mov	ip, r2
 800c1ea:	4463      	add	r3, ip
 800c1ec:	685a      	ldr	r2, [r3, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	00db      	lsls	r3, r3, #3
 800c1f4:	4986      	ldr	r1, [pc, #536]	@ (800c410 <USB_ActivateEndpoint+0x650>)
 800c1f6:	468c      	mov	ip, r1
 800c1f8:	4463      	add	r3, ip
 800c1fa:	0c12      	lsrs	r2, r2, #16
 800c1fc:	0412      	lsls	r2, r2, #16
 800c1fe:	605a      	str	r2, [r3, #4]
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	781b      	ldrb	r3, [r3, #0]
 800c204:	00db      	lsls	r3, r3, #3
 800c206:	4a82      	ldr	r2, [pc, #520]	@ (800c410 <USB_ActivateEndpoint+0x650>)
 800c208:	4694      	mov	ip, r2
 800c20a:	4463      	add	r3, ip
 800c20c:	6859      	ldr	r1, [r3, #4]
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	895b      	ldrh	r3, [r3, #10]
 800c212:	089b      	lsrs	r3, r3, #2
 800c214:	b29b      	uxth	r3, r3
 800c216:	009a      	lsls	r2, r3, #2
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	00db      	lsls	r3, r3, #3
 800c21e:	487c      	ldr	r0, [pc, #496]	@ (800c410 <USB_ActivateEndpoint+0x650>)
 800c220:	4684      	mov	ip, r0
 800c222:	4463      	add	r3, ip
 800c224:	430a      	orrs	r2, r1
 800c226:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	785b      	ldrb	r3, [r3, #1]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d169      	bne.n	800c304 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	781b      	ldrb	r3, [r3, #0]
 800c236:	009b      	lsls	r3, r3, #2
 800c238:	18d3      	adds	r3, r2, r3
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	643b      	str	r3, [r7, #64]	@ 0x40
 800c23e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c240:	2380      	movs	r3, #128	@ 0x80
 800c242:	01db      	lsls	r3, r3, #7
 800c244:	4013      	ands	r3, r2
 800c246:	d011      	beq.n	800c26c <USB_ActivateEndpoint+0x4ac>
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	683b      	ldr	r3, [r7, #0]
 800c24c:	781b      	ldrb	r3, [r3, #0]
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	18d3      	adds	r3, r2, r3
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4a6f      	ldr	r2, [pc, #444]	@ (800c414 <USB_ActivateEndpoint+0x654>)
 800c256:	4013      	ands	r3, r2
 800c258:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c25a:	687a      	ldr	r2, [r7, #4]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	781b      	ldrb	r3, [r3, #0]
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	18d3      	adds	r3, r2, r3
 800c264:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c266:	496c      	ldr	r1, [pc, #432]	@ (800c418 <USB_ActivateEndpoint+0x658>)
 800c268:	430a      	orrs	r2, r1
 800c26a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c26c:	687a      	ldr	r2, [r7, #4]
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	781b      	ldrb	r3, [r3, #0]
 800c272:	009b      	lsls	r3, r3, #2
 800c274:	18d3      	adds	r3, r2, r3
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c27c:	2240      	movs	r2, #64	@ 0x40
 800c27e:	4013      	ands	r3, r2
 800c280:	d011      	beq.n	800c2a6 <USB_ActivateEndpoint+0x4e6>
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	781b      	ldrb	r3, [r3, #0]
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	18d3      	adds	r3, r2, r3
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	4a61      	ldr	r2, [pc, #388]	@ (800c414 <USB_ActivateEndpoint+0x654>)
 800c290:	4013      	ands	r3, r2
 800c292:	637b      	str	r3, [r7, #52]	@ 0x34
 800c294:	687a      	ldr	r2, [r7, #4]
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	781b      	ldrb	r3, [r3, #0]
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	18d3      	adds	r3, r2, r3
 800c29e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c2a0:	495e      	ldr	r1, [pc, #376]	@ (800c41c <USB_ActivateEndpoint+0x65c>)
 800c2a2:	430a      	orrs	r2, r1
 800c2a4:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c2a6:	687a      	ldr	r2, [r7, #4]
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	009b      	lsls	r3, r3, #2
 800c2ae:	18d3      	adds	r3, r2, r3
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a5b      	ldr	r2, [pc, #364]	@ (800c420 <USB_ActivateEndpoint+0x660>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ba:	2280      	movs	r2, #128	@ 0x80
 800c2bc:	0152      	lsls	r2, r2, #5
 800c2be:	4053      	eors	r3, r2
 800c2c0:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2c4:	2280      	movs	r2, #128	@ 0x80
 800c2c6:	0192      	lsls	r2, r2, #6
 800c2c8:	4053      	eors	r3, r2
 800c2ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	18d3      	adds	r3, r2, r3
 800c2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2d8:	494c      	ldr	r1, [pc, #304]	@ (800c40c <USB_ActivateEndpoint+0x64c>)
 800c2da:	430a      	orrs	r2, r1
 800c2dc:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	18d3      	adds	r3, r2, r3
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	4a4e      	ldr	r2, [pc, #312]	@ (800c424 <USB_ActivateEndpoint+0x664>)
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c2f0:	687a      	ldr	r2, [r7, #4]
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	781b      	ldrb	r3, [r3, #0]
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	18d3      	adds	r3, r2, r3
 800c2fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2fc:	4943      	ldr	r1, [pc, #268]	@ (800c40c <USB_ActivateEndpoint+0x64c>)
 800c2fe:	430a      	orrs	r2, r1
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	e079      	b.n	800c3f8 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	781b      	ldrb	r3, [r3, #0]
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	18d3      	adds	r3, r2, r3
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c312:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800c314:	2380      	movs	r3, #128	@ 0x80
 800c316:	01db      	lsls	r3, r3, #7
 800c318:	4013      	ands	r3, r2
 800c31a:	d011      	beq.n	800c340 <USB_ActivateEndpoint+0x580>
 800c31c:	687a      	ldr	r2, [r7, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	009b      	lsls	r3, r3, #2
 800c324:	18d3      	adds	r3, r2, r3
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a3a      	ldr	r2, [pc, #232]	@ (800c414 <USB_ActivateEndpoint+0x654>)
 800c32a:	4013      	ands	r3, r2
 800c32c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	18d3      	adds	r3, r2, r3
 800c338:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c33a:	4937      	ldr	r1, [pc, #220]	@ (800c418 <USB_ActivateEndpoint+0x658>)
 800c33c:	430a      	orrs	r2, r1
 800c33e:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c340:	687a      	ldr	r2, [r7, #4]
 800c342:	683b      	ldr	r3, [r7, #0]
 800c344:	781b      	ldrb	r3, [r3, #0]
 800c346:	009b      	lsls	r3, r3, #2
 800c348:	18d3      	adds	r3, r2, r3
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	657b      	str	r3, [r7, #84]	@ 0x54
 800c34e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c350:	2240      	movs	r2, #64	@ 0x40
 800c352:	4013      	ands	r3, r2
 800c354:	d011      	beq.n	800c37a <USB_ActivateEndpoint+0x5ba>
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	009b      	lsls	r3, r3, #2
 800c35e:	18d3      	adds	r3, r2, r3
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a2c      	ldr	r2, [pc, #176]	@ (800c414 <USB_ActivateEndpoint+0x654>)
 800c364:	4013      	ands	r3, r2
 800c366:	653b      	str	r3, [r7, #80]	@ 0x50
 800c368:	687a      	ldr	r2, [r7, #4]
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	18d3      	adds	r3, r2, r3
 800c372:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800c374:	4929      	ldr	r1, [pc, #164]	@ (800c41c <USB_ActivateEndpoint+0x65c>)
 800c376:	430a      	orrs	r2, r1
 800c378:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	78db      	ldrb	r3, [r3, #3]
 800c37e:	2b01      	cmp	r3, #1
 800c380:	d016      	beq.n	800c3b0 <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c382:	687a      	ldr	r2, [r7, #4]
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	781b      	ldrb	r3, [r3, #0]
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	18d3      	adds	r3, r2, r3
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	4a25      	ldr	r2, [pc, #148]	@ (800c424 <USB_ActivateEndpoint+0x664>)
 800c390:	4013      	ands	r3, r2
 800c392:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c394:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c396:	2220      	movs	r2, #32
 800c398:	4053      	eors	r3, r2
 800c39a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	18d3      	adds	r3, r2, r3
 800c3a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3a8:	4918      	ldr	r1, [pc, #96]	@ (800c40c <USB_ActivateEndpoint+0x64c>)
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	601a      	str	r2, [r3, #0]
 800c3ae:	e011      	b.n	800c3d4 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c3b0:	687a      	ldr	r2, [r7, #4]
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	781b      	ldrb	r3, [r3, #0]
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	18d3      	adds	r3, r2, r3
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	4a19      	ldr	r2, [pc, #100]	@ (800c424 <USB_ActivateEndpoint+0x664>)
 800c3be:	4013      	ands	r3, r2
 800c3c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	18d3      	adds	r3, r2, r3
 800c3cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c3ce:	490f      	ldr	r1, [pc, #60]	@ (800c40c <USB_ActivateEndpoint+0x64c>)
 800c3d0:	430a      	orrs	r2, r1
 800c3d2:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	009b      	lsls	r3, r3, #2
 800c3dc:	18d3      	adds	r3, r2, r3
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a0f      	ldr	r2, [pc, #60]	@ (800c420 <USB_ActivateEndpoint+0x660>)
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	647b      	str	r3, [r7, #68]	@ 0x44
 800c3e6:	687a      	ldr	r2, [r7, #4]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	781b      	ldrb	r3, [r3, #0]
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	18d3      	adds	r3, r2, r3
 800c3f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c3f2:	4906      	ldr	r1, [pc, #24]	@ (800c40c <USB_ActivateEndpoint+0x64c>)
 800c3f4:	430a      	orrs	r2, r1
 800c3f6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c3f8:	2377      	movs	r3, #119	@ 0x77
 800c3fa:	18fb      	adds	r3, r7, r3
 800c3fc:	781b      	ldrb	r3, [r3, #0]
}
 800c3fe:	0018      	movs	r0, r3
 800c400:	46bd      	mov	sp, r7
 800c402:	b01e      	add	sp, #120	@ 0x78
 800c404:	bd80      	pop	{r7, pc}
 800c406:	46c0      	nop			@ (mov r8, r8)
 800c408:	07ff8e8f 	.word	0x07ff8e8f
 800c40c:	00008080 	.word	0x00008080
 800c410:	40009800 	.word	0x40009800
 800c414:	07ff8f8f 	.word	0x07ff8f8f
 800c418:	0000c080 	.word	0x0000c080
 800c41c:	000080c0 	.word	0x000080c0
 800c420:	07ffbf8f 	.word	0x07ffbf8f
 800c424:	07ff8fbf 	.word	0x07ff8fbf

0800c428 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800c428:	b590      	push	{r4, r7, lr}
 800c42a:	b097      	sub	sp, #92	@ 0x5c
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	6078      	str	r0, [r7, #4]
 800c430:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	785b      	ldrb	r3, [r3, #1]
 800c436:	2b01      	cmp	r3, #1
 800c438:	d001      	beq.n	800c43e <USB_EPStartXfer+0x16>
 800c43a:	f000 fcbf 	bl	800cdbc <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c43e:	683b      	ldr	r3, [r7, #0]
 800c440:	699a      	ldr	r2, [r3, #24]
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	691b      	ldr	r3, [r3, #16]
 800c446:	429a      	cmp	r2, r3
 800c448:	d903      	bls.n	800c452 <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	691b      	ldr	r3, [r3, #16]
 800c44e:	657b      	str	r3, [r7, #84]	@ 0x54
 800c450:	e002      	b.n	800c458 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	699b      	ldr	r3, [r3, #24]
 800c456:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	7b1b      	ldrb	r3, [r3, #12]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d12b      	bne.n	800c4b8 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	6959      	ldr	r1, [r3, #20]
 800c464:	683b      	ldr	r3, [r7, #0]
 800c466:	88da      	ldrh	r2, [r3, #6]
 800c468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c46a:	b29b      	uxth	r3, r3
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f001 f853 	bl	800d518 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	00db      	lsls	r3, r3, #3
 800c478:	4ace      	ldr	r2, [pc, #824]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c47a:	4694      	mov	ip, r2
 800c47c:	4463      	add	r3, ip
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	00db      	lsls	r3, r3, #3
 800c486:	49cb      	ldr	r1, [pc, #812]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c488:	468c      	mov	ip, r1
 800c48a:	4463      	add	r3, ip
 800c48c:	0412      	lsls	r2, r2, #16
 800c48e:	0c12      	lsrs	r2, r2, #16
 800c490:	601a      	str	r2, [r3, #0]
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	00db      	lsls	r3, r3, #3
 800c498:	4ac6      	ldr	r2, [pc, #792]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c49a:	4694      	mov	ip, r2
 800c49c:	4463      	add	r3, ip
 800c49e:	6819      	ldr	r1, [r3, #0]
 800c4a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4a2:	041a      	lsls	r2, r3, #16
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	781b      	ldrb	r3, [r3, #0]
 800c4a8:	00db      	lsls	r3, r3, #3
 800c4aa:	48c2      	ldr	r0, [pc, #776]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c4ac:	4684      	mov	ip, r0
 800c4ae:	4463      	add	r3, ip
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	601a      	str	r2, [r3, #0]
 800c4b4:	f000 fc67 	bl	800cd86 <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	78db      	ldrb	r3, [r3, #3]
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	d000      	beq.n	800c4c2 <USB_EPStartXfer+0x9a>
 800c4c0:	e31a      	b.n	800caf8 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	6a1a      	ldr	r2, [r3, #32]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d800      	bhi.n	800c4d0 <USB_EPStartXfer+0xa8>
 800c4ce:	e2c7      	b.n	800ca60 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c4d0:	687a      	ldr	r2, [r7, #4]
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	781b      	ldrb	r3, [r3, #0]
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	18d3      	adds	r3, r2, r3
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4ab6      	ldr	r2, [pc, #728]	@ (800c7b8 <USB_EPStartXfer+0x390>)
 800c4de:	4013      	ands	r3, r2
 800c4e0:	613b      	str	r3, [r7, #16]
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	009b      	lsls	r3, r3, #2
 800c4ea:	18d3      	adds	r3, r2, r3
 800c4ec:	693a      	ldr	r2, [r7, #16]
 800c4ee:	49b3      	ldr	r1, [pc, #716]	@ (800c7bc <USB_EPStartXfer+0x394>)
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	6a1a      	ldr	r2, [r3, #32]
 800c4f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c4fa:	1ad2      	subs	r2, r2, r3
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	683b      	ldr	r3, [r7, #0]
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	18d3      	adds	r3, r2, r3
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	2240      	movs	r2, #64	@ 0x40
 800c50e:	4013      	ands	r3, r2
 800c510:	d100      	bne.n	800c514 <USB_EPStartXfer+0xec>
 800c512:	e155      	b.n	800c7c0 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	785b      	ldrb	r3, [r3, #1]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d162      	bne.n	800c5e2 <USB_EPStartXfer+0x1ba>
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	00db      	lsls	r3, r3, #3
 800c522:	4aa4      	ldr	r2, [pc, #656]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c524:	4694      	mov	ip, r2
 800c526:	4463      	add	r3, ip
 800c528:	685a      	ldr	r2, [r3, #4]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	00db      	lsls	r3, r3, #3
 800c530:	49a0      	ldr	r1, [pc, #640]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c532:	468c      	mov	ip, r1
 800c534:	4463      	add	r3, ip
 800c536:	0192      	lsls	r2, r2, #6
 800c538:	0992      	lsrs	r2, r2, #6
 800c53a:	605a      	str	r2, [r3, #4]
 800c53c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c53e:	2b3e      	cmp	r3, #62	@ 0x3e
 800c540:	d91e      	bls.n	800c580 <USB_EPStartXfer+0x158>
 800c542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c544:	095b      	lsrs	r3, r3, #5
 800c546:	653b      	str	r3, [r7, #80]	@ 0x50
 800c548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c54a:	221f      	movs	r2, #31
 800c54c:	4013      	ands	r3, r2
 800c54e:	d102      	bne.n	800c556 <USB_EPStartXfer+0x12e>
 800c550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c552:	3b01      	subs	r3, #1
 800c554:	653b      	str	r3, [r7, #80]	@ 0x50
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	00db      	lsls	r3, r3, #3
 800c55c:	4a95      	ldr	r2, [pc, #596]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c55e:	4694      	mov	ip, r2
 800c560:	4463      	add	r3, ip
 800c562:	685a      	ldr	r2, [r3, #4]
 800c564:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c566:	069b      	lsls	r3, r3, #26
 800c568:	431a      	orrs	r2, r3
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	781b      	ldrb	r3, [r3, #0]
 800c56e:	00db      	lsls	r3, r3, #3
 800c570:	4990      	ldr	r1, [pc, #576]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c572:	468c      	mov	ip, r1
 800c574:	4463      	add	r3, ip
 800c576:	2180      	movs	r1, #128	@ 0x80
 800c578:	0609      	lsls	r1, r1, #24
 800c57a:	430a      	orrs	r2, r1
 800c57c:	605a      	str	r2, [r3, #4]
 800c57e:	e055      	b.n	800c62c <USB_EPStartXfer+0x204>
 800c580:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c582:	2b00      	cmp	r3, #0
 800c584:	d111      	bne.n	800c5aa <USB_EPStartXfer+0x182>
 800c586:	683b      	ldr	r3, [r7, #0]
 800c588:	781b      	ldrb	r3, [r3, #0]
 800c58a:	00db      	lsls	r3, r3, #3
 800c58c:	4a89      	ldr	r2, [pc, #548]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c58e:	4694      	mov	ip, r2
 800c590:	4463      	add	r3, ip
 800c592:	685a      	ldr	r2, [r3, #4]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	00db      	lsls	r3, r3, #3
 800c59a:	4986      	ldr	r1, [pc, #536]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c59c:	468c      	mov	ip, r1
 800c59e:	4463      	add	r3, ip
 800c5a0:	2180      	movs	r1, #128	@ 0x80
 800c5a2:	0609      	lsls	r1, r1, #24
 800c5a4:	430a      	orrs	r2, r1
 800c5a6:	605a      	str	r2, [r3, #4]
 800c5a8:	e040      	b.n	800c62c <USB_EPStartXfer+0x204>
 800c5aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5ac:	085b      	lsrs	r3, r3, #1
 800c5ae:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	4013      	ands	r3, r2
 800c5b6:	d002      	beq.n	800c5be <USB_EPStartXfer+0x196>
 800c5b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	00db      	lsls	r3, r3, #3
 800c5c4:	4a7b      	ldr	r2, [pc, #492]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c5c6:	4694      	mov	ip, r2
 800c5c8:	4463      	add	r3, ip
 800c5ca:	6859      	ldr	r1, [r3, #4]
 800c5cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c5ce:	069a      	lsls	r2, r3, #26
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	00db      	lsls	r3, r3, #3
 800c5d6:	4877      	ldr	r0, [pc, #476]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c5d8:	4684      	mov	ip, r0
 800c5da:	4463      	add	r3, ip
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	605a      	str	r2, [r3, #4]
 800c5e0:	e024      	b.n	800c62c <USB_EPStartXfer+0x204>
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	785b      	ldrb	r3, [r3, #1]
 800c5e6:	2b01      	cmp	r3, #1
 800c5e8:	d120      	bne.n	800c62c <USB_EPStartXfer+0x204>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	4a70      	ldr	r2, [pc, #448]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c5f2:	4694      	mov	ip, r2
 800c5f4:	4463      	add	r3, ip
 800c5f6:	685a      	ldr	r2, [r3, #4]
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	781b      	ldrb	r3, [r3, #0]
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	496d      	ldr	r1, [pc, #436]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c600:	468c      	mov	ip, r1
 800c602:	4463      	add	r3, ip
 800c604:	0412      	lsls	r2, r2, #16
 800c606:	0c12      	lsrs	r2, r2, #16
 800c608:	605a      	str	r2, [r3, #4]
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	00db      	lsls	r3, r3, #3
 800c610:	4a68      	ldr	r2, [pc, #416]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c612:	4694      	mov	ip, r2
 800c614:	4463      	add	r3, ip
 800c616:	6859      	ldr	r1, [r3, #4]
 800c618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c61a:	041a      	lsls	r2, r3, #16
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	00db      	lsls	r3, r3, #3
 800c622:	4864      	ldr	r0, [pc, #400]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c624:	4684      	mov	ip, r0
 800c626:	4463      	add	r3, ip
 800c628:	430a      	orrs	r2, r1
 800c62a:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800c62c:	201a      	movs	r0, #26
 800c62e:	183b      	adds	r3, r7, r0
 800c630:	683a      	ldr	r2, [r7, #0]
 800c632:	8952      	ldrh	r2, [r2, #10]
 800c634:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	6959      	ldr	r1, [r3, #20]
 800c63a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c63c:	b29c      	uxth	r4, r3
 800c63e:	183b      	adds	r3, r7, r0
 800c640:	881a      	ldrh	r2, [r3, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	0023      	movs	r3, r4
 800c646:	f000 ff67 	bl	800d518 <USB_WritePMA>
            ep->xfer_buff += len;
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	695a      	ldr	r2, [r3, #20]
 800c64e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c650:	18d2      	adds	r2, r2, r3
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	6a1a      	ldr	r2, [r3, #32]
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	691b      	ldr	r3, [r3, #16]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d906      	bls.n	800c670 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	6a1a      	ldr	r2, [r3, #32]
 800c666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c668:	1ad2      	subs	r2, r2, r3
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	621a      	str	r2, [r3, #32]
 800c66e:	e005      	b.n	800c67c <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	6a1b      	ldr	r3, [r3, #32]
 800c674:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2200      	movs	r2, #0
 800c67a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	785b      	ldrb	r3, [r3, #1]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d162      	bne.n	800c74a <USB_EPStartXfer+0x322>
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	00db      	lsls	r3, r3, #3
 800c68a:	4a4a      	ldr	r2, [pc, #296]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c68c:	4694      	mov	ip, r2
 800c68e:	4463      	add	r3, ip
 800c690:	681a      	ldr	r2, [r3, #0]
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	781b      	ldrb	r3, [r3, #0]
 800c696:	00db      	lsls	r3, r3, #3
 800c698:	4946      	ldr	r1, [pc, #280]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c69a:	468c      	mov	ip, r1
 800c69c:	4463      	add	r3, ip
 800c69e:	0192      	lsls	r2, r2, #6
 800c6a0:	0992      	lsrs	r2, r2, #6
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800c6a8:	d91e      	bls.n	800c6e8 <USB_EPStartXfer+0x2c0>
 800c6aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6ac:	095b      	lsrs	r3, r3, #5
 800c6ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6b2:	221f      	movs	r2, #31
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	d102      	bne.n	800c6be <USB_EPStartXfer+0x296>
 800c6b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ba:	3b01      	subs	r3, #1
 800c6bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	4a3b      	ldr	r2, [pc, #236]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c6c6:	4694      	mov	ip, r2
 800c6c8:	4463      	add	r3, ip
 800c6ca:	681a      	ldr	r2, [r3, #0]
 800c6cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c6ce:	069b      	lsls	r3, r3, #26
 800c6d0:	431a      	orrs	r2, r3
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	781b      	ldrb	r3, [r3, #0]
 800c6d6:	00db      	lsls	r3, r3, #3
 800c6d8:	4936      	ldr	r1, [pc, #216]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c6da:	468c      	mov	ip, r1
 800c6dc:	4463      	add	r3, ip
 800c6de:	2180      	movs	r1, #128	@ 0x80
 800c6e0:	0609      	lsls	r1, r1, #24
 800c6e2:	430a      	orrs	r2, r1
 800c6e4:	601a      	str	r2, [r3, #0]
 800c6e6:	e055      	b.n	800c794 <USB_EPStartXfer+0x36c>
 800c6e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d111      	bne.n	800c712 <USB_EPStartXfer+0x2ea>
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	00db      	lsls	r3, r3, #3
 800c6f4:	4a2f      	ldr	r2, [pc, #188]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c6f6:	4694      	mov	ip, r2
 800c6f8:	4463      	add	r3, ip
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	781b      	ldrb	r3, [r3, #0]
 800c700:	00db      	lsls	r3, r3, #3
 800c702:	492c      	ldr	r1, [pc, #176]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c704:	468c      	mov	ip, r1
 800c706:	4463      	add	r3, ip
 800c708:	2180      	movs	r1, #128	@ 0x80
 800c70a:	0609      	lsls	r1, r1, #24
 800c70c:	430a      	orrs	r2, r1
 800c70e:	601a      	str	r2, [r3, #0]
 800c710:	e040      	b.n	800c794 <USB_EPStartXfer+0x36c>
 800c712:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c714:	085b      	lsrs	r3, r3, #1
 800c716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c71a:	2201      	movs	r2, #1
 800c71c:	4013      	ands	r3, r2
 800c71e:	d002      	beq.n	800c726 <USB_EPStartXfer+0x2fe>
 800c720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c722:	3301      	adds	r3, #1
 800c724:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	00db      	lsls	r3, r3, #3
 800c72c:	4a21      	ldr	r2, [pc, #132]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c72e:	4694      	mov	ip, r2
 800c730:	4463      	add	r3, ip
 800c732:	6819      	ldr	r1, [r3, #0]
 800c734:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c736:	069a      	lsls	r2, r3, #26
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	481d      	ldr	r0, [pc, #116]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c740:	4684      	mov	ip, r0
 800c742:	4463      	add	r3, ip
 800c744:	430a      	orrs	r2, r1
 800c746:	601a      	str	r2, [r3, #0]
 800c748:	e024      	b.n	800c794 <USB_EPStartXfer+0x36c>
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	785b      	ldrb	r3, [r3, #1]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d120      	bne.n	800c794 <USB_EPStartXfer+0x36c>
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	00db      	lsls	r3, r3, #3
 800c758:	4a16      	ldr	r2, [pc, #88]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c75a:	4694      	mov	ip, r2
 800c75c:	4463      	add	r3, ip
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	4913      	ldr	r1, [pc, #76]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c768:	468c      	mov	ip, r1
 800c76a:	4463      	add	r3, ip
 800c76c:	0412      	lsls	r2, r2, #16
 800c76e:	0c12      	lsrs	r2, r2, #16
 800c770:	601a      	str	r2, [r3, #0]
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	781b      	ldrb	r3, [r3, #0]
 800c776:	00db      	lsls	r3, r3, #3
 800c778:	4a0e      	ldr	r2, [pc, #56]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c77a:	4694      	mov	ip, r2
 800c77c:	4463      	add	r3, ip
 800c77e:	6819      	ldr	r1, [r3, #0]
 800c780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c782:	041a      	lsls	r2, r3, #16
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	00db      	lsls	r3, r3, #3
 800c78a:	480a      	ldr	r0, [pc, #40]	@ (800c7b4 <USB_EPStartXfer+0x38c>)
 800c78c:	4684      	mov	ip, r0
 800c78e:	4463      	add	r3, ip
 800c790:	430a      	orrs	r2, r1
 800c792:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c794:	201a      	movs	r0, #26
 800c796:	183b      	adds	r3, r7, r0
 800c798:	683a      	ldr	r2, [r7, #0]
 800c79a:	8912      	ldrh	r2, [r2, #8]
 800c79c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	6959      	ldr	r1, [r3, #20]
 800c7a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7a4:	b29c      	uxth	r4, r3
 800c7a6:	183b      	adds	r3, r7, r0
 800c7a8:	881a      	ldrh	r2, [r3, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	0023      	movs	r3, r4
 800c7ae:	f000 feb3 	bl	800d518 <USB_WritePMA>
 800c7b2:	e2e8      	b.n	800cd86 <USB_EPStartXfer+0x95e>
 800c7b4:	40009800 	.word	0x40009800
 800c7b8:	07ff8f8f 	.word	0x07ff8f8f
 800c7bc:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	785b      	ldrb	r3, [r3, #1]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d162      	bne.n	800c88e <USB_EPStartXfer+0x466>
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	781b      	ldrb	r3, [r3, #0]
 800c7cc:	00db      	lsls	r3, r3, #3
 800c7ce:	4ac7      	ldr	r2, [pc, #796]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c7d0:	4694      	mov	ip, r2
 800c7d2:	4463      	add	r3, ip
 800c7d4:	681a      	ldr	r2, [r3, #0]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	00db      	lsls	r3, r3, #3
 800c7dc:	49c3      	ldr	r1, [pc, #780]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c7de:	468c      	mov	ip, r1
 800c7e0:	4463      	add	r3, ip
 800c7e2:	0192      	lsls	r2, r2, #6
 800c7e4:	0992      	lsrs	r2, r2, #6
 800c7e6:	601a      	str	r2, [r3, #0]
 800c7e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7ea:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7ec:	d91e      	bls.n	800c82c <USB_EPStartXfer+0x404>
 800c7ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7f0:	095b      	lsrs	r3, r3, #5
 800c7f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7f6:	221f      	movs	r2, #31
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	d102      	bne.n	800c802 <USB_EPStartXfer+0x3da>
 800c7fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c7fe:	3b01      	subs	r3, #1
 800c800:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	781b      	ldrb	r3, [r3, #0]
 800c806:	00db      	lsls	r3, r3, #3
 800c808:	4ab8      	ldr	r2, [pc, #736]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c80a:	4694      	mov	ip, r2
 800c80c:	4463      	add	r3, ip
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c812:	069b      	lsls	r3, r3, #26
 800c814:	431a      	orrs	r2, r3
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	00db      	lsls	r3, r3, #3
 800c81c:	49b3      	ldr	r1, [pc, #716]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c81e:	468c      	mov	ip, r1
 800c820:	4463      	add	r3, ip
 800c822:	2180      	movs	r1, #128	@ 0x80
 800c824:	0609      	lsls	r1, r1, #24
 800c826:	430a      	orrs	r2, r1
 800c828:	601a      	str	r2, [r3, #0]
 800c82a:	e055      	b.n	800c8d8 <USB_EPStartXfer+0x4b0>
 800c82c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d111      	bne.n	800c856 <USB_EPStartXfer+0x42e>
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	781b      	ldrb	r3, [r3, #0]
 800c836:	00db      	lsls	r3, r3, #3
 800c838:	4aac      	ldr	r2, [pc, #688]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c83a:	4694      	mov	ip, r2
 800c83c:	4463      	add	r3, ip
 800c83e:	681a      	ldr	r2, [r3, #0]
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	781b      	ldrb	r3, [r3, #0]
 800c844:	00db      	lsls	r3, r3, #3
 800c846:	49a9      	ldr	r1, [pc, #676]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c848:	468c      	mov	ip, r1
 800c84a:	4463      	add	r3, ip
 800c84c:	2180      	movs	r1, #128	@ 0x80
 800c84e:	0609      	lsls	r1, r1, #24
 800c850:	430a      	orrs	r2, r1
 800c852:	601a      	str	r2, [r3, #0]
 800c854:	e040      	b.n	800c8d8 <USB_EPStartXfer+0x4b0>
 800c856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c858:	085b      	lsrs	r3, r3, #1
 800c85a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c85c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c85e:	2201      	movs	r2, #1
 800c860:	4013      	ands	r3, r2
 800c862:	d002      	beq.n	800c86a <USB_EPStartXfer+0x442>
 800c864:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c866:	3301      	adds	r3, #1
 800c868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	00db      	lsls	r3, r3, #3
 800c870:	4a9e      	ldr	r2, [pc, #632]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c872:	4694      	mov	ip, r2
 800c874:	4463      	add	r3, ip
 800c876:	6819      	ldr	r1, [r3, #0]
 800c878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c87a:	069a      	lsls	r2, r3, #26
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	00db      	lsls	r3, r3, #3
 800c882:	489a      	ldr	r0, [pc, #616]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c884:	4684      	mov	ip, r0
 800c886:	4463      	add	r3, ip
 800c888:	430a      	orrs	r2, r1
 800c88a:	601a      	str	r2, [r3, #0]
 800c88c:	e024      	b.n	800c8d8 <USB_EPStartXfer+0x4b0>
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	785b      	ldrb	r3, [r3, #1]
 800c892:	2b01      	cmp	r3, #1
 800c894:	d120      	bne.n	800c8d8 <USB_EPStartXfer+0x4b0>
 800c896:	683b      	ldr	r3, [r7, #0]
 800c898:	781b      	ldrb	r3, [r3, #0]
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	4a93      	ldr	r2, [pc, #588]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c89e:	4694      	mov	ip, r2
 800c8a0:	4463      	add	r3, ip
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	781b      	ldrb	r3, [r3, #0]
 800c8a8:	00db      	lsls	r3, r3, #3
 800c8aa:	4990      	ldr	r1, [pc, #576]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c8ac:	468c      	mov	ip, r1
 800c8ae:	4463      	add	r3, ip
 800c8b0:	0412      	lsls	r2, r2, #16
 800c8b2:	0c12      	lsrs	r2, r2, #16
 800c8b4:	601a      	str	r2, [r3, #0]
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	00db      	lsls	r3, r3, #3
 800c8bc:	4a8b      	ldr	r2, [pc, #556]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c8be:	4694      	mov	ip, r2
 800c8c0:	4463      	add	r3, ip
 800c8c2:	6819      	ldr	r1, [r3, #0]
 800c8c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8c6:	041a      	lsls	r2, r3, #16
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	4887      	ldr	r0, [pc, #540]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c8d0:	4684      	mov	ip, r0
 800c8d2:	4463      	add	r3, ip
 800c8d4:	430a      	orrs	r2, r1
 800c8d6:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c8d8:	201a      	movs	r0, #26
 800c8da:	183b      	adds	r3, r7, r0
 800c8dc:	683a      	ldr	r2, [r7, #0]
 800c8de:	8912      	ldrh	r2, [r2, #8]
 800c8e0:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	6959      	ldr	r1, [r3, #20]
 800c8e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8e8:	b29c      	uxth	r4, r3
 800c8ea:	183b      	adds	r3, r7, r0
 800c8ec:	881a      	ldrh	r2, [r3, #0]
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	0023      	movs	r3, r4
 800c8f2:	f000 fe11 	bl	800d518 <USB_WritePMA>
            ep->xfer_buff += len;
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	695a      	ldr	r2, [r3, #20]
 800c8fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8fc:	18d2      	adds	r2, r2, r3
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	6a1a      	ldr	r2, [r3, #32]
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	691b      	ldr	r3, [r3, #16]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d906      	bls.n	800c91c <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800c90e:	683b      	ldr	r3, [r7, #0]
 800c910:	6a1a      	ldr	r2, [r3, #32]
 800c912:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c914:	1ad2      	subs	r2, r2, r3
 800c916:	683b      	ldr	r3, [r7, #0]
 800c918:	621a      	str	r2, [r3, #32]
 800c91a:	e005      	b.n	800c928 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	6a1b      	ldr	r3, [r3, #32]
 800c920:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	2200      	movs	r2, #0
 800c926:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	785b      	ldrb	r3, [r3, #1]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d162      	bne.n	800c9f6 <USB_EPStartXfer+0x5ce>
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	00db      	lsls	r3, r3, #3
 800c936:	4a6d      	ldr	r2, [pc, #436]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c938:	4694      	mov	ip, r2
 800c93a:	4463      	add	r3, ip
 800c93c:	685a      	ldr	r2, [r3, #4]
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4969      	ldr	r1, [pc, #420]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c946:	468c      	mov	ip, r1
 800c948:	4463      	add	r3, ip
 800c94a:	0192      	lsls	r2, r2, #6
 800c94c:	0992      	lsrs	r2, r2, #6
 800c94e:	605a      	str	r2, [r3, #4]
 800c950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c952:	2b3e      	cmp	r3, #62	@ 0x3e
 800c954:	d91e      	bls.n	800c994 <USB_EPStartXfer+0x56c>
 800c956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c958:	095b      	lsrs	r3, r3, #5
 800c95a:	647b      	str	r3, [r7, #68]	@ 0x44
 800c95c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c95e:	221f      	movs	r2, #31
 800c960:	4013      	ands	r3, r2
 800c962:	d102      	bne.n	800c96a <USB_EPStartXfer+0x542>
 800c964:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c966:	3b01      	subs	r3, #1
 800c968:	647b      	str	r3, [r7, #68]	@ 0x44
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	00db      	lsls	r3, r3, #3
 800c970:	4a5e      	ldr	r2, [pc, #376]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c972:	4694      	mov	ip, r2
 800c974:	4463      	add	r3, ip
 800c976:	685a      	ldr	r2, [r3, #4]
 800c978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c97a:	069b      	lsls	r3, r3, #26
 800c97c:	431a      	orrs	r2, r3
 800c97e:	683b      	ldr	r3, [r7, #0]
 800c980:	781b      	ldrb	r3, [r3, #0]
 800c982:	00db      	lsls	r3, r3, #3
 800c984:	4959      	ldr	r1, [pc, #356]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c986:	468c      	mov	ip, r1
 800c988:	4463      	add	r3, ip
 800c98a:	2180      	movs	r1, #128	@ 0x80
 800c98c:	0609      	lsls	r1, r1, #24
 800c98e:	430a      	orrs	r2, r1
 800c990:	605a      	str	r2, [r3, #4]
 800c992:	e055      	b.n	800ca40 <USB_EPStartXfer+0x618>
 800c994:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c996:	2b00      	cmp	r3, #0
 800c998:	d111      	bne.n	800c9be <USB_EPStartXfer+0x596>
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	00db      	lsls	r3, r3, #3
 800c9a0:	4a52      	ldr	r2, [pc, #328]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c9a2:	4694      	mov	ip, r2
 800c9a4:	4463      	add	r3, ip
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	781b      	ldrb	r3, [r3, #0]
 800c9ac:	00db      	lsls	r3, r3, #3
 800c9ae:	494f      	ldr	r1, [pc, #316]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c9b0:	468c      	mov	ip, r1
 800c9b2:	4463      	add	r3, ip
 800c9b4:	2180      	movs	r1, #128	@ 0x80
 800c9b6:	0609      	lsls	r1, r1, #24
 800c9b8:	430a      	orrs	r2, r1
 800c9ba:	605a      	str	r2, [r3, #4]
 800c9bc:	e040      	b.n	800ca40 <USB_EPStartXfer+0x618>
 800c9be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c0:	085b      	lsrs	r3, r3, #1
 800c9c2:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	4013      	ands	r3, r2
 800c9ca:	d002      	beq.n	800c9d2 <USB_EPStartXfer+0x5aa>
 800c9cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9ce:	3301      	adds	r3, #1
 800c9d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	00db      	lsls	r3, r3, #3
 800c9d8:	4a44      	ldr	r2, [pc, #272]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c9da:	4694      	mov	ip, r2
 800c9dc:	4463      	add	r3, ip
 800c9de:	6859      	ldr	r1, [r3, #4]
 800c9e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c9e2:	069a      	lsls	r2, r3, #26
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	00db      	lsls	r3, r3, #3
 800c9ea:	4840      	ldr	r0, [pc, #256]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800c9ec:	4684      	mov	ip, r0
 800c9ee:	4463      	add	r3, ip
 800c9f0:	430a      	orrs	r2, r1
 800c9f2:	605a      	str	r2, [r3, #4]
 800c9f4:	e024      	b.n	800ca40 <USB_EPStartXfer+0x618>
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	785b      	ldrb	r3, [r3, #1]
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d120      	bne.n	800ca40 <USB_EPStartXfer+0x618>
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	00db      	lsls	r3, r3, #3
 800ca04:	4a39      	ldr	r2, [pc, #228]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800ca06:	4694      	mov	ip, r2
 800ca08:	4463      	add	r3, ip
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	00db      	lsls	r3, r3, #3
 800ca12:	4936      	ldr	r1, [pc, #216]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800ca14:	468c      	mov	ip, r1
 800ca16:	4463      	add	r3, ip
 800ca18:	0412      	lsls	r2, r2, #16
 800ca1a:	0c12      	lsrs	r2, r2, #16
 800ca1c:	605a      	str	r2, [r3, #4]
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	781b      	ldrb	r3, [r3, #0]
 800ca22:	00db      	lsls	r3, r3, #3
 800ca24:	4a31      	ldr	r2, [pc, #196]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800ca26:	4694      	mov	ip, r2
 800ca28:	4463      	add	r3, ip
 800ca2a:	6859      	ldr	r1, [r3, #4]
 800ca2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca2e:	041a      	lsls	r2, r3, #16
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	00db      	lsls	r3, r3, #3
 800ca36:	482d      	ldr	r0, [pc, #180]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800ca38:	4684      	mov	ip, r0
 800ca3a:	4463      	add	r3, ip
 800ca3c:	430a      	orrs	r2, r1
 800ca3e:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800ca40:	201a      	movs	r0, #26
 800ca42:	183b      	adds	r3, r7, r0
 800ca44:	683a      	ldr	r2, [r7, #0]
 800ca46:	8952      	ldrh	r2, [r2, #10]
 800ca48:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	6959      	ldr	r1, [r3, #20]
 800ca4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ca50:	b29c      	uxth	r4, r3
 800ca52:	183b      	adds	r3, r7, r0
 800ca54:	881a      	ldrh	r2, [r3, #0]
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	0023      	movs	r3, r4
 800ca5a:	f000 fd5d 	bl	800d518 <USB_WritePMA>
 800ca5e:	e192      	b.n	800cd86 <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	6a1b      	ldr	r3, [r3, #32]
 800ca64:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ca66:	687a      	ldr	r2, [r7, #4]
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	781b      	ldrb	r3, [r3, #0]
 800ca6c:	009b      	lsls	r3, r3, #2
 800ca6e:	18d3      	adds	r3, r2, r3
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	4a1f      	ldr	r2, [pc, #124]	@ (800caf0 <USB_EPStartXfer+0x6c8>)
 800ca74:	4013      	ands	r3, r2
 800ca76:	617b      	str	r3, [r7, #20]
 800ca78:	687a      	ldr	r2, [r7, #4]
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	781b      	ldrb	r3, [r3, #0]
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	18d3      	adds	r3, r2, r3
 800ca82:	697a      	ldr	r2, [r7, #20]
 800ca84:	491b      	ldr	r1, [pc, #108]	@ (800caf4 <USB_EPStartXfer+0x6cc>)
 800ca86:	430a      	orrs	r2, r1
 800ca88:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	00db      	lsls	r3, r3, #3
 800ca90:	4a16      	ldr	r2, [pc, #88]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800ca92:	4694      	mov	ip, r2
 800ca94:	4463      	add	r3, ip
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	00db      	lsls	r3, r3, #3
 800ca9e:	4913      	ldr	r1, [pc, #76]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800caa0:	468c      	mov	ip, r1
 800caa2:	4463      	add	r3, ip
 800caa4:	0412      	lsls	r2, r2, #16
 800caa6:	0c12      	lsrs	r2, r2, #16
 800caa8:	601a      	str	r2, [r3, #0]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	4a0e      	ldr	r2, [pc, #56]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800cab2:	4694      	mov	ip, r2
 800cab4:	4463      	add	r3, ip
 800cab6:	6819      	ldr	r1, [r3, #0]
 800cab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800caba:	041a      	lsls	r2, r3, #16
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	480a      	ldr	r0, [pc, #40]	@ (800caec <USB_EPStartXfer+0x6c4>)
 800cac4:	4684      	mov	ip, r0
 800cac6:	4463      	add	r3, ip
 800cac8:	430a      	orrs	r2, r1
 800caca:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cacc:	201a      	movs	r0, #26
 800cace:	183b      	adds	r3, r7, r0
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	8912      	ldrh	r2, [r2, #8]
 800cad4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	6959      	ldr	r1, [r3, #20]
 800cada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cadc:	b29c      	uxth	r4, r3
 800cade:	183b      	adds	r3, r7, r0
 800cae0:	881a      	ldrh	r2, [r3, #0]
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	0023      	movs	r3, r4
 800cae6:	f000 fd17 	bl	800d518 <USB_WritePMA>
 800caea:	e14c      	b.n	800cd86 <USB_EPStartXfer+0x95e>
 800caec:	40009800 	.word	0x40009800
 800caf0:	07ff8e8f 	.word	0x07ff8e8f
 800caf4:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	6a1a      	ldr	r2, [r3, #32]
 800cafc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cafe:	1ad2      	subs	r2, r2, r3
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	781b      	ldrb	r3, [r3, #0]
 800cb0a:	009b      	lsls	r3, r3, #2
 800cb0c:	18d3      	adds	r3, r2, r3
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	2240      	movs	r2, #64	@ 0x40
 800cb12:	4013      	ands	r3, r2
 800cb14:	d100      	bne.n	800cb18 <USB_EPStartXfer+0x6f0>
 800cb16:	e09b      	b.n	800cc50 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	785b      	ldrb	r3, [r3, #1]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d162      	bne.n	800cbe6 <USB_EPStartXfer+0x7be>
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	00db      	lsls	r3, r3, #3
 800cb26:	4ad6      	ldr	r2, [pc, #856]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cb28:	4694      	mov	ip, r2
 800cb2a:	4463      	add	r3, ip
 800cb2c:	685a      	ldr	r2, [r3, #4]
 800cb2e:	683b      	ldr	r3, [r7, #0]
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	00db      	lsls	r3, r3, #3
 800cb34:	49d2      	ldr	r1, [pc, #840]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cb36:	468c      	mov	ip, r1
 800cb38:	4463      	add	r3, ip
 800cb3a:	0192      	lsls	r2, r2, #6
 800cb3c:	0992      	lsrs	r2, r2, #6
 800cb3e:	605a      	str	r2, [r3, #4]
 800cb40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb42:	2b3e      	cmp	r3, #62	@ 0x3e
 800cb44:	d91e      	bls.n	800cb84 <USB_EPStartXfer+0x75c>
 800cb46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb48:	095b      	lsrs	r3, r3, #5
 800cb4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb4e:	221f      	movs	r2, #31
 800cb50:	4013      	ands	r3, r2
 800cb52:	d102      	bne.n	800cb5a <USB_EPStartXfer+0x732>
 800cb54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb56:	3b01      	subs	r3, #1
 800cb58:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	00db      	lsls	r3, r3, #3
 800cb60:	4ac7      	ldr	r2, [pc, #796]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cb62:	4694      	mov	ip, r2
 800cb64:	4463      	add	r3, ip
 800cb66:	685a      	ldr	r2, [r3, #4]
 800cb68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cb6a:	069b      	lsls	r3, r3, #26
 800cb6c:	431a      	orrs	r2, r3
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	781b      	ldrb	r3, [r3, #0]
 800cb72:	00db      	lsls	r3, r3, #3
 800cb74:	49c2      	ldr	r1, [pc, #776]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cb76:	468c      	mov	ip, r1
 800cb78:	4463      	add	r3, ip
 800cb7a:	2180      	movs	r1, #128	@ 0x80
 800cb7c:	0609      	lsls	r1, r1, #24
 800cb7e:	430a      	orrs	r2, r1
 800cb80:	605a      	str	r2, [r3, #4]
 800cb82:	e055      	b.n	800cc30 <USB_EPStartXfer+0x808>
 800cb84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d111      	bne.n	800cbae <USB_EPStartXfer+0x786>
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	781b      	ldrb	r3, [r3, #0]
 800cb8e:	00db      	lsls	r3, r3, #3
 800cb90:	4abb      	ldr	r2, [pc, #748]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cb92:	4694      	mov	ip, r2
 800cb94:	4463      	add	r3, ip
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	781b      	ldrb	r3, [r3, #0]
 800cb9c:	00db      	lsls	r3, r3, #3
 800cb9e:	49b8      	ldr	r1, [pc, #736]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cba0:	468c      	mov	ip, r1
 800cba2:	4463      	add	r3, ip
 800cba4:	2180      	movs	r1, #128	@ 0x80
 800cba6:	0609      	lsls	r1, r1, #24
 800cba8:	430a      	orrs	r2, r1
 800cbaa:	605a      	str	r2, [r3, #4]
 800cbac:	e040      	b.n	800cc30 <USB_EPStartXfer+0x808>
 800cbae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbb0:	085b      	lsrs	r3, r3, #1
 800cbb2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	4013      	ands	r3, r2
 800cbba:	d002      	beq.n	800cbc2 <USB_EPStartXfer+0x79a>
 800cbbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbbe:	3301      	adds	r3, #1
 800cbc0:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	00db      	lsls	r3, r3, #3
 800cbc8:	4aad      	ldr	r2, [pc, #692]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cbca:	4694      	mov	ip, r2
 800cbcc:	4463      	add	r3, ip
 800cbce:	6859      	ldr	r1, [r3, #4]
 800cbd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbd2:	069a      	lsls	r2, r3, #26
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	781b      	ldrb	r3, [r3, #0]
 800cbd8:	00db      	lsls	r3, r3, #3
 800cbda:	48a9      	ldr	r0, [pc, #676]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cbdc:	4684      	mov	ip, r0
 800cbde:	4463      	add	r3, ip
 800cbe0:	430a      	orrs	r2, r1
 800cbe2:	605a      	str	r2, [r3, #4]
 800cbe4:	e024      	b.n	800cc30 <USB_EPStartXfer+0x808>
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	785b      	ldrb	r3, [r3, #1]
 800cbea:	2b01      	cmp	r3, #1
 800cbec:	d120      	bne.n	800cc30 <USB_EPStartXfer+0x808>
 800cbee:	683b      	ldr	r3, [r7, #0]
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	00db      	lsls	r3, r3, #3
 800cbf4:	4aa2      	ldr	r2, [pc, #648]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cbf6:	4694      	mov	ip, r2
 800cbf8:	4463      	add	r3, ip
 800cbfa:	685a      	ldr	r2, [r3, #4]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	781b      	ldrb	r3, [r3, #0]
 800cc00:	00db      	lsls	r3, r3, #3
 800cc02:	499f      	ldr	r1, [pc, #636]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cc04:	468c      	mov	ip, r1
 800cc06:	4463      	add	r3, ip
 800cc08:	0412      	lsls	r2, r2, #16
 800cc0a:	0c12      	lsrs	r2, r2, #16
 800cc0c:	605a      	str	r2, [r3, #4]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	00db      	lsls	r3, r3, #3
 800cc14:	4a9a      	ldr	r2, [pc, #616]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cc16:	4694      	mov	ip, r2
 800cc18:	4463      	add	r3, ip
 800cc1a:	6859      	ldr	r1, [r3, #4]
 800cc1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc1e:	041a      	lsls	r2, r3, #16
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	00db      	lsls	r3, r3, #3
 800cc26:	4896      	ldr	r0, [pc, #600]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cc28:	4684      	mov	ip, r0
 800cc2a:	4463      	add	r3, ip
 800cc2c:	430a      	orrs	r2, r1
 800cc2e:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800cc30:	201a      	movs	r0, #26
 800cc32:	183b      	adds	r3, r7, r0
 800cc34:	683a      	ldr	r2, [r7, #0]
 800cc36:	8952      	ldrh	r2, [r2, #10]
 800cc38:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	6959      	ldr	r1, [r3, #20]
 800cc3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc40:	b29c      	uxth	r4, r3
 800cc42:	183b      	adds	r3, r7, r0
 800cc44:	881a      	ldrh	r2, [r3, #0]
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	0023      	movs	r3, r4
 800cc4a:	f000 fc65 	bl	800d518 <USB_WritePMA>
 800cc4e:	e09a      	b.n	800cd86 <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	785b      	ldrb	r3, [r3, #1]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d162      	bne.n	800cd1e <USB_EPStartXfer+0x8f6>
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	781b      	ldrb	r3, [r3, #0]
 800cc5c:	00db      	lsls	r3, r3, #3
 800cc5e:	4a88      	ldr	r2, [pc, #544]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cc60:	4694      	mov	ip, r2
 800cc62:	4463      	add	r3, ip
 800cc64:	681a      	ldr	r2, [r3, #0]
 800cc66:	683b      	ldr	r3, [r7, #0]
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	00db      	lsls	r3, r3, #3
 800cc6c:	4984      	ldr	r1, [pc, #528]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cc6e:	468c      	mov	ip, r1
 800cc70:	4463      	add	r3, ip
 800cc72:	0192      	lsls	r2, r2, #6
 800cc74:	0992      	lsrs	r2, r2, #6
 800cc76:	601a      	str	r2, [r3, #0]
 800cc78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc7a:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc7c:	d91e      	bls.n	800ccbc <USB_EPStartXfer+0x894>
 800cc7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc80:	095b      	lsrs	r3, r3, #5
 800cc82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc86:	221f      	movs	r2, #31
 800cc88:	4013      	ands	r3, r2
 800cc8a:	d102      	bne.n	800cc92 <USB_EPStartXfer+0x86a>
 800cc8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc8e:	3b01      	subs	r3, #1
 800cc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	00db      	lsls	r3, r3, #3
 800cc98:	4a79      	ldr	r2, [pc, #484]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cc9a:	4694      	mov	ip, r2
 800cc9c:	4463      	add	r3, ip
 800cc9e:	681a      	ldr	r2, [r3, #0]
 800cca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cca2:	069b      	lsls	r3, r3, #26
 800cca4:	431a      	orrs	r2, r3
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	00db      	lsls	r3, r3, #3
 800ccac:	4974      	ldr	r1, [pc, #464]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800ccae:	468c      	mov	ip, r1
 800ccb0:	4463      	add	r3, ip
 800ccb2:	2180      	movs	r1, #128	@ 0x80
 800ccb4:	0609      	lsls	r1, r1, #24
 800ccb6:	430a      	orrs	r2, r1
 800ccb8:	601a      	str	r2, [r3, #0]
 800ccba:	e055      	b.n	800cd68 <USB_EPStartXfer+0x940>
 800ccbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d111      	bne.n	800cce6 <USB_EPStartXfer+0x8be>
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	781b      	ldrb	r3, [r3, #0]
 800ccc6:	00db      	lsls	r3, r3, #3
 800ccc8:	4a6d      	ldr	r2, [pc, #436]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800ccca:	4694      	mov	ip, r2
 800cccc:	4463      	add	r3, ip
 800ccce:	681a      	ldr	r2, [r3, #0]
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	781b      	ldrb	r3, [r3, #0]
 800ccd4:	00db      	lsls	r3, r3, #3
 800ccd6:	496a      	ldr	r1, [pc, #424]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800ccd8:	468c      	mov	ip, r1
 800ccda:	4463      	add	r3, ip
 800ccdc:	2180      	movs	r1, #128	@ 0x80
 800ccde:	0609      	lsls	r1, r1, #24
 800cce0:	430a      	orrs	r2, r1
 800cce2:	601a      	str	r2, [r3, #0]
 800cce4:	e040      	b.n	800cd68 <USB_EPStartXfer+0x940>
 800cce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cce8:	085b      	lsrs	r3, r3, #1
 800ccea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ccee:	2201      	movs	r2, #1
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	d002      	beq.n	800ccfa <USB_EPStartXfer+0x8d2>
 800ccf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccf6:	3301      	adds	r3, #1
 800ccf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	00db      	lsls	r3, r3, #3
 800cd00:	4a5f      	ldr	r2, [pc, #380]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cd02:	4694      	mov	ip, r2
 800cd04:	4463      	add	r3, ip
 800cd06:	6819      	ldr	r1, [r3, #0]
 800cd08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd0a:	069a      	lsls	r2, r3, #26
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	00db      	lsls	r3, r3, #3
 800cd12:	485b      	ldr	r0, [pc, #364]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cd14:	4684      	mov	ip, r0
 800cd16:	4463      	add	r3, ip
 800cd18:	430a      	orrs	r2, r1
 800cd1a:	601a      	str	r2, [r3, #0]
 800cd1c:	e024      	b.n	800cd68 <USB_EPStartXfer+0x940>
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	785b      	ldrb	r3, [r3, #1]
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d120      	bne.n	800cd68 <USB_EPStartXfer+0x940>
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	781b      	ldrb	r3, [r3, #0]
 800cd2a:	00db      	lsls	r3, r3, #3
 800cd2c:	4a54      	ldr	r2, [pc, #336]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cd2e:	4694      	mov	ip, r2
 800cd30:	4463      	add	r3, ip
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	683b      	ldr	r3, [r7, #0]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	00db      	lsls	r3, r3, #3
 800cd3a:	4951      	ldr	r1, [pc, #324]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cd3c:	468c      	mov	ip, r1
 800cd3e:	4463      	add	r3, ip
 800cd40:	0412      	lsls	r2, r2, #16
 800cd42:	0c12      	lsrs	r2, r2, #16
 800cd44:	601a      	str	r2, [r3, #0]
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	781b      	ldrb	r3, [r3, #0]
 800cd4a:	00db      	lsls	r3, r3, #3
 800cd4c:	4a4c      	ldr	r2, [pc, #304]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cd4e:	4694      	mov	ip, r2
 800cd50:	4463      	add	r3, ip
 800cd52:	6819      	ldr	r1, [r3, #0]
 800cd54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd56:	041a      	lsls	r2, r3, #16
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	00db      	lsls	r3, r3, #3
 800cd5e:	4848      	ldr	r0, [pc, #288]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cd60:	4684      	mov	ip, r0
 800cd62:	4463      	add	r3, ip
 800cd64:	430a      	orrs	r2, r1
 800cd66:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cd68:	201a      	movs	r0, #26
 800cd6a:	183b      	adds	r3, r7, r0
 800cd6c:	683a      	ldr	r2, [r7, #0]
 800cd6e:	8912      	ldrh	r2, [r2, #8]
 800cd70:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	6959      	ldr	r1, [r3, #20]
 800cd76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cd78:	b29c      	uxth	r4, r3
 800cd7a:	183b      	adds	r3, r7, r0
 800cd7c:	881a      	ldrh	r2, [r3, #0]
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	0023      	movs	r3, r4
 800cd82:	f000 fbc9 	bl	800d518 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	009b      	lsls	r3, r3, #2
 800cd8e:	18d3      	adds	r3, r2, r3
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a3c      	ldr	r2, [pc, #240]	@ (800ce84 <USB_EPStartXfer+0xa5c>)
 800cd94:	4013      	ands	r3, r2
 800cd96:	60fb      	str	r3, [r7, #12]
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2210      	movs	r2, #16
 800cd9c:	4053      	eors	r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2220      	movs	r2, #32
 800cda4:	4053      	eors	r3, r2
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	687a      	ldr	r2, [r7, #4]
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	781b      	ldrb	r3, [r3, #0]
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	18d3      	adds	r3, r2, r3
 800cdb2:	68fa      	ldr	r2, [r7, #12]
 800cdb4:	4934      	ldr	r1, [pc, #208]	@ (800ce88 <USB_EPStartXfer+0xa60>)
 800cdb6:	430a      	orrs	r2, r1
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	e340      	b.n	800d43e <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800cdbc:	683b      	ldr	r3, [r7, #0]
 800cdbe:	7b1b      	ldrb	r3, [r3, #12]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d000      	beq.n	800cdc6 <USB_EPStartXfer+0x99e>
 800cdc4:	e07e      	b.n	800cec4 <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800cdc6:	683b      	ldr	r3, [r7, #0]
 800cdc8:	699a      	ldr	r2, [r3, #24]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	691b      	ldr	r3, [r3, #16]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d909      	bls.n	800cde6 <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800cdd2:	683b      	ldr	r3, [r7, #0]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	699a      	ldr	r2, [r3, #24]
 800cddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cdde:	1ad2      	subs	r2, r2, r3
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	619a      	str	r2, [r3, #24]
 800cde4:	e005      	b.n	800cdf2 <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800cde6:	683b      	ldr	r3, [r7, #0]
 800cde8:	699b      	ldr	r3, [r3, #24]
 800cdea:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	781b      	ldrb	r3, [r3, #0]
 800cdf6:	00db      	lsls	r3, r3, #3
 800cdf8:	4a21      	ldr	r2, [pc, #132]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800cdfa:	4694      	mov	ip, r2
 800cdfc:	4463      	add	r3, ip
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	00db      	lsls	r3, r3, #3
 800ce06:	491e      	ldr	r1, [pc, #120]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800ce08:	468c      	mov	ip, r1
 800ce0a:	4463      	add	r3, ip
 800ce0c:	0192      	lsls	r2, r2, #6
 800ce0e:	0992      	lsrs	r2, r2, #6
 800ce10:	605a      	str	r2, [r3, #4]
 800ce12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce14:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce16:	d91e      	bls.n	800ce56 <USB_EPStartXfer+0xa2e>
 800ce18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce1a:	095b      	lsrs	r3, r3, #5
 800ce1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce20:	221f      	movs	r2, #31
 800ce22:	4013      	ands	r3, r2
 800ce24:	d102      	bne.n	800ce2c <USB_EPStartXfer+0xa04>
 800ce26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce28:	3b01      	subs	r3, #1
 800ce2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	781b      	ldrb	r3, [r3, #0]
 800ce30:	00db      	lsls	r3, r3, #3
 800ce32:	4a13      	ldr	r2, [pc, #76]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800ce34:	4694      	mov	ip, r2
 800ce36:	4463      	add	r3, ip
 800ce38:	685a      	ldr	r2, [r3, #4]
 800ce3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce3c:	069b      	lsls	r3, r3, #26
 800ce3e:	431a      	orrs	r2, r3
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	00db      	lsls	r3, r3, #3
 800ce46:	490e      	ldr	r1, [pc, #56]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800ce48:	468c      	mov	ip, r1
 800ce4a:	4463      	add	r3, ip
 800ce4c:	2180      	movs	r1, #128	@ 0x80
 800ce4e:	0609      	lsls	r1, r1, #24
 800ce50:	430a      	orrs	r2, r1
 800ce52:	605a      	str	r2, [r3, #4]
 800ce54:	e2d7      	b.n	800d406 <USB_EPStartXfer+0xfde>
 800ce56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d117      	bne.n	800ce8c <USB_EPStartXfer+0xa64>
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	00db      	lsls	r3, r3, #3
 800ce62:	4a07      	ldr	r2, [pc, #28]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800ce64:	4694      	mov	ip, r2
 800ce66:	4463      	add	r3, ip
 800ce68:	685a      	ldr	r2, [r3, #4]
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	781b      	ldrb	r3, [r3, #0]
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	4903      	ldr	r1, [pc, #12]	@ (800ce80 <USB_EPStartXfer+0xa58>)
 800ce72:	468c      	mov	ip, r1
 800ce74:	4463      	add	r3, ip
 800ce76:	2180      	movs	r1, #128	@ 0x80
 800ce78:	0609      	lsls	r1, r1, #24
 800ce7a:	430a      	orrs	r2, r1
 800ce7c:	605a      	str	r2, [r3, #4]
 800ce7e:	e2c2      	b.n	800d406 <USB_EPStartXfer+0xfde>
 800ce80:	40009800 	.word	0x40009800
 800ce84:	07ff8fbf 	.word	0x07ff8fbf
 800ce88:	00008080 	.word	0x00008080
 800ce8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce8e:	085b      	lsrs	r3, r3, #1
 800ce90:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ce92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce94:	2201      	movs	r2, #1
 800ce96:	4013      	ands	r3, r2
 800ce98:	d002      	beq.n	800cea0 <USB_EPStartXfer+0xa78>
 800ce9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	781b      	ldrb	r3, [r3, #0]
 800cea4:	00db      	lsls	r3, r3, #3
 800cea6:	4ac4      	ldr	r2, [pc, #784]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cea8:	4694      	mov	ip, r2
 800ceaa:	4463      	add	r3, ip
 800ceac:	6859      	ldr	r1, [r3, #4]
 800ceae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb0:	069a      	lsls	r2, r3, #26
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	00db      	lsls	r3, r3, #3
 800ceb8:	48bf      	ldr	r0, [pc, #764]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800ceba:	4684      	mov	ip, r0
 800cebc:	4463      	add	r3, ip
 800cebe:	430a      	orrs	r2, r1
 800cec0:	605a      	str	r2, [r3, #4]
 800cec2:	e2a0      	b.n	800d406 <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	78db      	ldrb	r3, [r3, #3]
 800cec8:	2b02      	cmp	r3, #2
 800ceca:	d000      	beq.n	800cece <USB_EPStartXfer+0xaa6>
 800cecc:	e15f      	b.n	800d18e <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	785b      	ldrb	r3, [r3, #1]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d168      	bne.n	800cfa8 <USB_EPStartXfer+0xb80>
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	781b      	ldrb	r3, [r3, #0]
 800ceda:	00db      	lsls	r3, r3, #3
 800cedc:	4ab6      	ldr	r2, [pc, #728]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cede:	4694      	mov	ip, r2
 800cee0:	4463      	add	r3, ip
 800cee2:	681a      	ldr	r2, [r3, #0]
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	781b      	ldrb	r3, [r3, #0]
 800cee8:	00db      	lsls	r3, r3, #3
 800ceea:	49b3      	ldr	r1, [pc, #716]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800ceec:	468c      	mov	ip, r1
 800ceee:	4463      	add	r3, ip
 800cef0:	0192      	lsls	r2, r2, #6
 800cef2:	0992      	lsrs	r2, r2, #6
 800cef4:	601a      	str	r2, [r3, #0]
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	2b3e      	cmp	r3, #62	@ 0x3e
 800cefc:	d920      	bls.n	800cf40 <USB_EPStartXfer+0xb18>
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	691b      	ldr	r3, [r3, #16]
 800cf02:	095b      	lsrs	r3, r3, #5
 800cf04:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	221f      	movs	r2, #31
 800cf0c:	4013      	ands	r3, r2
 800cf0e:	d102      	bne.n	800cf16 <USB_EPStartXfer+0xaee>
 800cf10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf12:	3b01      	subs	r3, #1
 800cf14:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	00db      	lsls	r3, r3, #3
 800cf1c:	4aa6      	ldr	r2, [pc, #664]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cf1e:	4694      	mov	ip, r2
 800cf20:	4463      	add	r3, ip
 800cf22:	681a      	ldr	r2, [r3, #0]
 800cf24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf26:	069b      	lsls	r3, r3, #26
 800cf28:	431a      	orrs	r2, r3
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	00db      	lsls	r3, r3, #3
 800cf30:	49a1      	ldr	r1, [pc, #644]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cf32:	468c      	mov	ip, r1
 800cf34:	4463      	add	r3, ip
 800cf36:	2180      	movs	r1, #128	@ 0x80
 800cf38:	0609      	lsls	r1, r1, #24
 800cf3a:	430a      	orrs	r2, r1
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	e059      	b.n	800cff4 <USB_EPStartXfer+0xbcc>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	691b      	ldr	r3, [r3, #16]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d111      	bne.n	800cf6c <USB_EPStartXfer+0xb44>
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	781b      	ldrb	r3, [r3, #0]
 800cf4c:	00db      	lsls	r3, r3, #3
 800cf4e:	4a9a      	ldr	r2, [pc, #616]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cf50:	4694      	mov	ip, r2
 800cf52:	4463      	add	r3, ip
 800cf54:	681a      	ldr	r2, [r3, #0]
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	781b      	ldrb	r3, [r3, #0]
 800cf5a:	00db      	lsls	r3, r3, #3
 800cf5c:	4996      	ldr	r1, [pc, #600]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cf5e:	468c      	mov	ip, r1
 800cf60:	4463      	add	r3, ip
 800cf62:	2180      	movs	r1, #128	@ 0x80
 800cf64:	0609      	lsls	r1, r1, #24
 800cf66:	430a      	orrs	r2, r1
 800cf68:	601a      	str	r2, [r3, #0]
 800cf6a:	e043      	b.n	800cff4 <USB_EPStartXfer+0xbcc>
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	691b      	ldr	r3, [r3, #16]
 800cf70:	085b      	lsrs	r3, r3, #1
 800cf72:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	691b      	ldr	r3, [r3, #16]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	d002      	beq.n	800cf84 <USB_EPStartXfer+0xb5c>
 800cf7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf80:	3301      	adds	r3, #1
 800cf82:	637b      	str	r3, [r7, #52]	@ 0x34
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	781b      	ldrb	r3, [r3, #0]
 800cf88:	00db      	lsls	r3, r3, #3
 800cf8a:	4a8b      	ldr	r2, [pc, #556]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cf8c:	4694      	mov	ip, r2
 800cf8e:	4463      	add	r3, ip
 800cf90:	6819      	ldr	r1, [r3, #0]
 800cf92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf94:	069a      	lsls	r2, r3, #26
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	00db      	lsls	r3, r3, #3
 800cf9c:	4886      	ldr	r0, [pc, #536]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cf9e:	4684      	mov	ip, r0
 800cfa0:	4463      	add	r3, ip
 800cfa2:	430a      	orrs	r2, r1
 800cfa4:	601a      	str	r2, [r3, #0]
 800cfa6:	e025      	b.n	800cff4 <USB_EPStartXfer+0xbcc>
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	785b      	ldrb	r3, [r3, #1]
 800cfac:	2b01      	cmp	r3, #1
 800cfae:	d121      	bne.n	800cff4 <USB_EPStartXfer+0xbcc>
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	00db      	lsls	r3, r3, #3
 800cfb6:	4a80      	ldr	r2, [pc, #512]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cfb8:	4694      	mov	ip, r2
 800cfba:	4463      	add	r3, ip
 800cfbc:	681a      	ldr	r2, [r3, #0]
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	00db      	lsls	r3, r3, #3
 800cfc4:	497c      	ldr	r1, [pc, #496]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cfc6:	468c      	mov	ip, r1
 800cfc8:	4463      	add	r3, ip
 800cfca:	0412      	lsls	r2, r2, #16
 800cfcc:	0c12      	lsrs	r2, r2, #16
 800cfce:	601a      	str	r2, [r3, #0]
 800cfd0:	683b      	ldr	r3, [r7, #0]
 800cfd2:	781b      	ldrb	r3, [r3, #0]
 800cfd4:	00db      	lsls	r3, r3, #3
 800cfd6:	4a78      	ldr	r2, [pc, #480]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cfd8:	4694      	mov	ip, r2
 800cfda:	4463      	add	r3, ip
 800cfdc:	6819      	ldr	r1, [r3, #0]
 800cfde:	683b      	ldr	r3, [r7, #0]
 800cfe0:	691b      	ldr	r3, [r3, #16]
 800cfe2:	041a      	lsls	r2, r3, #16
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	00db      	lsls	r3, r3, #3
 800cfea:	4873      	ldr	r0, [pc, #460]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800cfec:	4684      	mov	ip, r0
 800cfee:	4463      	add	r3, ip
 800cff0:	430a      	orrs	r2, r1
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	785b      	ldrb	r3, [r3, #1]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d168      	bne.n	800d0ce <USB_EPStartXfer+0xca6>
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	781b      	ldrb	r3, [r3, #0]
 800d000:	00db      	lsls	r3, r3, #3
 800d002:	4a6d      	ldr	r2, [pc, #436]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d004:	4694      	mov	ip, r2
 800d006:	4463      	add	r3, ip
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	781b      	ldrb	r3, [r3, #0]
 800d00e:	00db      	lsls	r3, r3, #3
 800d010:	4969      	ldr	r1, [pc, #420]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d012:	468c      	mov	ip, r1
 800d014:	4463      	add	r3, ip
 800d016:	0192      	lsls	r2, r2, #6
 800d018:	0992      	lsrs	r2, r2, #6
 800d01a:	605a      	str	r2, [r3, #4]
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	691b      	ldr	r3, [r3, #16]
 800d020:	2b3e      	cmp	r3, #62	@ 0x3e
 800d022:	d920      	bls.n	800d066 <USB_EPStartXfer+0xc3e>
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	095b      	lsrs	r3, r3, #5
 800d02a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	691b      	ldr	r3, [r3, #16]
 800d030:	221f      	movs	r2, #31
 800d032:	4013      	ands	r3, r2
 800d034:	d102      	bne.n	800d03c <USB_EPStartXfer+0xc14>
 800d036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d038:	3b01      	subs	r3, #1
 800d03a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	781b      	ldrb	r3, [r3, #0]
 800d040:	00db      	lsls	r3, r3, #3
 800d042:	4a5d      	ldr	r2, [pc, #372]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d044:	4694      	mov	ip, r2
 800d046:	4463      	add	r3, ip
 800d048:	685a      	ldr	r2, [r3, #4]
 800d04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d04c:	069b      	lsls	r3, r3, #26
 800d04e:	431a      	orrs	r2, r3
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	00db      	lsls	r3, r3, #3
 800d056:	4958      	ldr	r1, [pc, #352]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d058:	468c      	mov	ip, r1
 800d05a:	4463      	add	r3, ip
 800d05c:	2180      	movs	r1, #128	@ 0x80
 800d05e:	0609      	lsls	r1, r1, #24
 800d060:	430a      	orrs	r2, r1
 800d062:	605a      	str	r2, [r3, #4]
 800d064:	e059      	b.n	800d11a <USB_EPStartXfer+0xcf2>
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	691b      	ldr	r3, [r3, #16]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d111      	bne.n	800d092 <USB_EPStartXfer+0xc6a>
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	781b      	ldrb	r3, [r3, #0]
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	4a50      	ldr	r2, [pc, #320]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d076:	4694      	mov	ip, r2
 800d078:	4463      	add	r3, ip
 800d07a:	685a      	ldr	r2, [r3, #4]
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	781b      	ldrb	r3, [r3, #0]
 800d080:	00db      	lsls	r3, r3, #3
 800d082:	494d      	ldr	r1, [pc, #308]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d084:	468c      	mov	ip, r1
 800d086:	4463      	add	r3, ip
 800d088:	2180      	movs	r1, #128	@ 0x80
 800d08a:	0609      	lsls	r1, r1, #24
 800d08c:	430a      	orrs	r2, r1
 800d08e:	605a      	str	r2, [r3, #4]
 800d090:	e043      	b.n	800d11a <USB_EPStartXfer+0xcf2>
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	691b      	ldr	r3, [r3, #16]
 800d096:	085b      	lsrs	r3, r3, #1
 800d098:	633b      	str	r3, [r7, #48]	@ 0x30
 800d09a:	683b      	ldr	r3, [r7, #0]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	2201      	movs	r2, #1
 800d0a0:	4013      	ands	r3, r2
 800d0a2:	d002      	beq.n	800d0aa <USB_EPStartXfer+0xc82>
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0a6:	3301      	adds	r3, #1
 800d0a8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	00db      	lsls	r3, r3, #3
 800d0b0:	4a41      	ldr	r2, [pc, #260]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d0b2:	4694      	mov	ip, r2
 800d0b4:	4463      	add	r3, ip
 800d0b6:	6859      	ldr	r1, [r3, #4]
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	069a      	lsls	r2, r3, #26
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	00db      	lsls	r3, r3, #3
 800d0c2:	483d      	ldr	r0, [pc, #244]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d0c4:	4684      	mov	ip, r0
 800d0c6:	4463      	add	r3, ip
 800d0c8:	430a      	orrs	r2, r1
 800d0ca:	605a      	str	r2, [r3, #4]
 800d0cc:	e025      	b.n	800d11a <USB_EPStartXfer+0xcf2>
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	785b      	ldrb	r3, [r3, #1]
 800d0d2:	2b01      	cmp	r3, #1
 800d0d4:	d121      	bne.n	800d11a <USB_EPStartXfer+0xcf2>
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	00db      	lsls	r3, r3, #3
 800d0dc:	4a36      	ldr	r2, [pc, #216]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d0de:	4694      	mov	ip, r2
 800d0e0:	4463      	add	r3, ip
 800d0e2:	685a      	ldr	r2, [r3, #4]
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	4933      	ldr	r1, [pc, #204]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d0ec:	468c      	mov	ip, r1
 800d0ee:	4463      	add	r3, ip
 800d0f0:	0412      	lsls	r2, r2, #16
 800d0f2:	0c12      	lsrs	r2, r2, #16
 800d0f4:	605a      	str	r2, [r3, #4]
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	781b      	ldrb	r3, [r3, #0]
 800d0fa:	00db      	lsls	r3, r3, #3
 800d0fc:	4a2e      	ldr	r2, [pc, #184]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d0fe:	4694      	mov	ip, r2
 800d100:	4463      	add	r3, ip
 800d102:	6859      	ldr	r1, [r3, #4]
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	691b      	ldr	r3, [r3, #16]
 800d108:	041a      	lsls	r2, r3, #16
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	00db      	lsls	r3, r3, #3
 800d110:	4829      	ldr	r0, [pc, #164]	@ (800d1b8 <USB_EPStartXfer+0xd90>)
 800d112:	4684      	mov	ip, r0
 800d114:	4463      	add	r3, ip
 800d116:	430a      	orrs	r2, r1
 800d118:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	69db      	ldr	r3, [r3, #28]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d100      	bne.n	800d124 <USB_EPStartXfer+0xcfc>
 800d122:	e170      	b.n	800d406 <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	781b      	ldrb	r3, [r3, #0]
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	18d3      	adds	r3, r2, r3
 800d12e:	681a      	ldr	r2, [r3, #0]
 800d130:	2126      	movs	r1, #38	@ 0x26
 800d132:	187b      	adds	r3, r7, r1
 800d134:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d136:	187b      	adds	r3, r7, r1
 800d138:	881a      	ldrh	r2, [r3, #0]
 800d13a:	2380      	movs	r3, #128	@ 0x80
 800d13c:	01db      	lsls	r3, r3, #7
 800d13e:	4013      	ands	r3, r2
 800d140:	d004      	beq.n	800d14c <USB_EPStartXfer+0xd24>
 800d142:	187b      	adds	r3, r7, r1
 800d144:	881b      	ldrh	r3, [r3, #0]
 800d146:	2240      	movs	r2, #64	@ 0x40
 800d148:	4013      	ands	r3, r2
 800d14a:	d10d      	bne.n	800d168 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d14c:	2126      	movs	r1, #38	@ 0x26
 800d14e:	187b      	adds	r3, r7, r1
 800d150:	881a      	ldrh	r2, [r3, #0]
 800d152:	2380      	movs	r3, #128	@ 0x80
 800d154:	01db      	lsls	r3, r3, #7
 800d156:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d158:	d000      	beq.n	800d15c <USB_EPStartXfer+0xd34>
 800d15a:	e154      	b.n	800d406 <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d15c:	187b      	adds	r3, r7, r1
 800d15e:	881b      	ldrh	r3, [r3, #0]
 800d160:	2240      	movs	r2, #64	@ 0x40
 800d162:	4013      	ands	r3, r2
 800d164:	d000      	beq.n	800d168 <USB_EPStartXfer+0xd40>
 800d166:	e14e      	b.n	800d406 <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	009b      	lsls	r3, r3, #2
 800d170:	18d3      	adds	r3, r2, r3
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	4a11      	ldr	r2, [pc, #68]	@ (800d1bc <USB_EPStartXfer+0xd94>)
 800d176:	4013      	ands	r3, r2
 800d178:	623b      	str	r3, [r7, #32]
 800d17a:	687a      	ldr	r2, [r7, #4]
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	18d3      	adds	r3, r2, r3
 800d184:	6a3a      	ldr	r2, [r7, #32]
 800d186:	490e      	ldr	r1, [pc, #56]	@ (800d1c0 <USB_EPStartXfer+0xd98>)
 800d188:	430a      	orrs	r2, r1
 800d18a:	601a      	str	r2, [r3, #0]
 800d18c:	e13b      	b.n	800d406 <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	78db      	ldrb	r3, [r3, #3]
 800d192:	2b01      	cmp	r3, #1
 800d194:	d000      	beq.n	800d198 <USB_EPStartXfer+0xd70>
 800d196:	e134      	b.n	800d402 <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	699a      	ldr	r2, [r3, #24]
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	429a      	cmp	r2, r3
 800d1a2:	d90f      	bls.n	800d1c4 <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	691b      	ldr	r3, [r3, #16]
 800d1a8:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	699a      	ldr	r2, [r3, #24]
 800d1ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1b0:	1ad2      	subs	r2, r2, r3
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	619a      	str	r2, [r3, #24]
 800d1b6:	e00b      	b.n	800d1d0 <USB_EPStartXfer+0xda8>
 800d1b8:	40009800 	.word	0x40009800
 800d1bc:	07ff8f8f 	.word	0x07ff8f8f
 800d1c0:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	785b      	ldrb	r3, [r3, #1]
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	d162      	bne.n	800d29e <USB_EPStartXfer+0xe76>
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	00db      	lsls	r3, r3, #3
 800d1de:	4a9a      	ldr	r2, [pc, #616]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d1e0:	4694      	mov	ip, r2
 800d1e2:	4463      	add	r3, ip
 800d1e4:	681a      	ldr	r2, [r3, #0]
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	781b      	ldrb	r3, [r3, #0]
 800d1ea:	00db      	lsls	r3, r3, #3
 800d1ec:	4996      	ldr	r1, [pc, #600]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d1ee:	468c      	mov	ip, r1
 800d1f0:	4463      	add	r3, ip
 800d1f2:	0192      	lsls	r2, r2, #6
 800d1f4:	0992      	lsrs	r2, r2, #6
 800d1f6:	601a      	str	r2, [r3, #0]
 800d1f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1fc:	d91e      	bls.n	800d23c <USB_EPStartXfer+0xe14>
 800d1fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d200:	095b      	lsrs	r3, r3, #5
 800d202:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d206:	221f      	movs	r2, #31
 800d208:	4013      	ands	r3, r2
 800d20a:	d102      	bne.n	800d212 <USB_EPStartXfer+0xdea>
 800d20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d20e:	3b01      	subs	r3, #1
 800d210:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	00db      	lsls	r3, r3, #3
 800d218:	4a8b      	ldr	r2, [pc, #556]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d21a:	4694      	mov	ip, r2
 800d21c:	4463      	add	r3, ip
 800d21e:	681a      	ldr	r2, [r3, #0]
 800d220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d222:	069b      	lsls	r3, r3, #26
 800d224:	431a      	orrs	r2, r3
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	781b      	ldrb	r3, [r3, #0]
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	4986      	ldr	r1, [pc, #536]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d22e:	468c      	mov	ip, r1
 800d230:	4463      	add	r3, ip
 800d232:	2180      	movs	r1, #128	@ 0x80
 800d234:	0609      	lsls	r1, r1, #24
 800d236:	430a      	orrs	r2, r1
 800d238:	601a      	str	r2, [r3, #0]
 800d23a:	e055      	b.n	800d2e8 <USB_EPStartXfer+0xec0>
 800d23c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d111      	bne.n	800d266 <USB_EPStartXfer+0xe3e>
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	781b      	ldrb	r3, [r3, #0]
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	4a7f      	ldr	r2, [pc, #508]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d24a:	4694      	mov	ip, r2
 800d24c:	4463      	add	r3, ip
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	781b      	ldrb	r3, [r3, #0]
 800d254:	00db      	lsls	r3, r3, #3
 800d256:	497c      	ldr	r1, [pc, #496]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d258:	468c      	mov	ip, r1
 800d25a:	4463      	add	r3, ip
 800d25c:	2180      	movs	r1, #128	@ 0x80
 800d25e:	0609      	lsls	r1, r1, #24
 800d260:	430a      	orrs	r2, r1
 800d262:	601a      	str	r2, [r3, #0]
 800d264:	e040      	b.n	800d2e8 <USB_EPStartXfer+0xec0>
 800d266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d268:	085b      	lsrs	r3, r3, #1
 800d26a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d26c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d26e:	2201      	movs	r2, #1
 800d270:	4013      	ands	r3, r2
 800d272:	d002      	beq.n	800d27a <USB_EPStartXfer+0xe52>
 800d274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d276:	3301      	adds	r3, #1
 800d278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	00db      	lsls	r3, r3, #3
 800d280:	4a71      	ldr	r2, [pc, #452]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d282:	4694      	mov	ip, r2
 800d284:	4463      	add	r3, ip
 800d286:	6819      	ldr	r1, [r3, #0]
 800d288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d28a:	069a      	lsls	r2, r3, #26
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	00db      	lsls	r3, r3, #3
 800d292:	486d      	ldr	r0, [pc, #436]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d294:	4684      	mov	ip, r0
 800d296:	4463      	add	r3, ip
 800d298:	430a      	orrs	r2, r1
 800d29a:	601a      	str	r2, [r3, #0]
 800d29c:	e024      	b.n	800d2e8 <USB_EPStartXfer+0xec0>
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	785b      	ldrb	r3, [r3, #1]
 800d2a2:	2b01      	cmp	r3, #1
 800d2a4:	d120      	bne.n	800d2e8 <USB_EPStartXfer+0xec0>
 800d2a6:	683b      	ldr	r3, [r7, #0]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	00db      	lsls	r3, r3, #3
 800d2ac:	4a66      	ldr	r2, [pc, #408]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d2ae:	4694      	mov	ip, r2
 800d2b0:	4463      	add	r3, ip
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	683b      	ldr	r3, [r7, #0]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	00db      	lsls	r3, r3, #3
 800d2ba:	4963      	ldr	r1, [pc, #396]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d2bc:	468c      	mov	ip, r1
 800d2be:	4463      	add	r3, ip
 800d2c0:	0412      	lsls	r2, r2, #16
 800d2c2:	0c12      	lsrs	r2, r2, #16
 800d2c4:	601a      	str	r2, [r3, #0]
 800d2c6:	683b      	ldr	r3, [r7, #0]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
 800d2ca:	00db      	lsls	r3, r3, #3
 800d2cc:	4a5e      	ldr	r2, [pc, #376]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d2ce:	4694      	mov	ip, r2
 800d2d0:	4463      	add	r3, ip
 800d2d2:	6819      	ldr	r1, [r3, #0]
 800d2d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2d6:	041a      	lsls	r2, r3, #16
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	00db      	lsls	r3, r3, #3
 800d2de:	485a      	ldr	r0, [pc, #360]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d2e0:	4684      	mov	ip, r0
 800d2e2:	4463      	add	r3, ip
 800d2e4:	430a      	orrs	r2, r1
 800d2e6:	601a      	str	r2, [r3, #0]
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	785b      	ldrb	r3, [r3, #1]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d162      	bne.n	800d3b6 <USB_EPStartXfer+0xf8e>
 800d2f0:	683b      	ldr	r3, [r7, #0]
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	00db      	lsls	r3, r3, #3
 800d2f6:	4a54      	ldr	r2, [pc, #336]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d2f8:	4694      	mov	ip, r2
 800d2fa:	4463      	add	r3, ip
 800d2fc:	685a      	ldr	r2, [r3, #4]
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	781b      	ldrb	r3, [r3, #0]
 800d302:	00db      	lsls	r3, r3, #3
 800d304:	4950      	ldr	r1, [pc, #320]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d306:	468c      	mov	ip, r1
 800d308:	4463      	add	r3, ip
 800d30a:	0192      	lsls	r2, r2, #6
 800d30c:	0992      	lsrs	r2, r2, #6
 800d30e:	605a      	str	r2, [r3, #4]
 800d310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d312:	2b3e      	cmp	r3, #62	@ 0x3e
 800d314:	d91e      	bls.n	800d354 <USB_EPStartXfer+0xf2c>
 800d316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d318:	095b      	lsrs	r3, r3, #5
 800d31a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d31c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d31e:	221f      	movs	r2, #31
 800d320:	4013      	ands	r3, r2
 800d322:	d102      	bne.n	800d32a <USB_EPStartXfer+0xf02>
 800d324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d326:	3b01      	subs	r3, #1
 800d328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	00db      	lsls	r3, r3, #3
 800d330:	4a45      	ldr	r2, [pc, #276]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d332:	4694      	mov	ip, r2
 800d334:	4463      	add	r3, ip
 800d336:	685a      	ldr	r2, [r3, #4]
 800d338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d33a:	069b      	lsls	r3, r3, #26
 800d33c:	431a      	orrs	r2, r3
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	781b      	ldrb	r3, [r3, #0]
 800d342:	00db      	lsls	r3, r3, #3
 800d344:	4940      	ldr	r1, [pc, #256]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d346:	468c      	mov	ip, r1
 800d348:	4463      	add	r3, ip
 800d34a:	2180      	movs	r1, #128	@ 0x80
 800d34c:	0609      	lsls	r1, r1, #24
 800d34e:	430a      	orrs	r2, r1
 800d350:	605a      	str	r2, [r3, #4]
 800d352:	e058      	b.n	800d406 <USB_EPStartXfer+0xfde>
 800d354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d356:	2b00      	cmp	r3, #0
 800d358:	d111      	bne.n	800d37e <USB_EPStartXfer+0xf56>
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	781b      	ldrb	r3, [r3, #0]
 800d35e:	00db      	lsls	r3, r3, #3
 800d360:	4a39      	ldr	r2, [pc, #228]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d362:	4694      	mov	ip, r2
 800d364:	4463      	add	r3, ip
 800d366:	685a      	ldr	r2, [r3, #4]
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	00db      	lsls	r3, r3, #3
 800d36e:	4936      	ldr	r1, [pc, #216]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d370:	468c      	mov	ip, r1
 800d372:	4463      	add	r3, ip
 800d374:	2180      	movs	r1, #128	@ 0x80
 800d376:	0609      	lsls	r1, r1, #24
 800d378:	430a      	orrs	r2, r1
 800d37a:	605a      	str	r2, [r3, #4]
 800d37c:	e043      	b.n	800d406 <USB_EPStartXfer+0xfde>
 800d37e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d380:	085b      	lsrs	r3, r3, #1
 800d382:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d384:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d386:	2201      	movs	r2, #1
 800d388:	4013      	ands	r3, r2
 800d38a:	d002      	beq.n	800d392 <USB_EPStartXfer+0xf6a>
 800d38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d38e:	3301      	adds	r3, #1
 800d390:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	00db      	lsls	r3, r3, #3
 800d398:	4a2b      	ldr	r2, [pc, #172]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d39a:	4694      	mov	ip, r2
 800d39c:	4463      	add	r3, ip
 800d39e:	6859      	ldr	r1, [r3, #4]
 800d3a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3a2:	069a      	lsls	r2, r3, #26
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	00db      	lsls	r3, r3, #3
 800d3aa:	4827      	ldr	r0, [pc, #156]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d3ac:	4684      	mov	ip, r0
 800d3ae:	4463      	add	r3, ip
 800d3b0:	430a      	orrs	r2, r1
 800d3b2:	605a      	str	r2, [r3, #4]
 800d3b4:	e027      	b.n	800d406 <USB_EPStartXfer+0xfde>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	785b      	ldrb	r3, [r3, #1]
 800d3ba:	2b01      	cmp	r3, #1
 800d3bc:	d123      	bne.n	800d406 <USB_EPStartXfer+0xfde>
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	781b      	ldrb	r3, [r3, #0]
 800d3c2:	00db      	lsls	r3, r3, #3
 800d3c4:	4a20      	ldr	r2, [pc, #128]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d3c6:	4694      	mov	ip, r2
 800d3c8:	4463      	add	r3, ip
 800d3ca:	685a      	ldr	r2, [r3, #4]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	00db      	lsls	r3, r3, #3
 800d3d2:	491d      	ldr	r1, [pc, #116]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d3d4:	468c      	mov	ip, r1
 800d3d6:	4463      	add	r3, ip
 800d3d8:	0412      	lsls	r2, r2, #16
 800d3da:	0c12      	lsrs	r2, r2, #16
 800d3dc:	605a      	str	r2, [r3, #4]
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	00db      	lsls	r3, r3, #3
 800d3e4:	4a18      	ldr	r2, [pc, #96]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d3e6:	4694      	mov	ip, r2
 800d3e8:	4463      	add	r3, ip
 800d3ea:	6859      	ldr	r1, [r3, #4]
 800d3ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d3ee:	041a      	lsls	r2, r3, #16
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	781b      	ldrb	r3, [r3, #0]
 800d3f4:	00db      	lsls	r3, r3, #3
 800d3f6:	4814      	ldr	r0, [pc, #80]	@ (800d448 <USB_EPStartXfer+0x1020>)
 800d3f8:	4684      	mov	ip, r0
 800d3fa:	4463      	add	r3, ip
 800d3fc:	430a      	orrs	r2, r1
 800d3fe:	605a      	str	r2, [r3, #4]
 800d400:	e001      	b.n	800d406 <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800d402:	2301      	movs	r3, #1
 800d404:	e01c      	b.n	800d440 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d406:	687a      	ldr	r2, [r7, #4]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	18d3      	adds	r3, r2, r3
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	4a0e      	ldr	r2, [pc, #56]	@ (800d44c <USB_EPStartXfer+0x1024>)
 800d414:	4013      	ands	r3, r2
 800d416:	61fb      	str	r3, [r7, #28]
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	2280      	movs	r2, #128	@ 0x80
 800d41c:	0152      	lsls	r2, r2, #5
 800d41e:	4053      	eors	r3, r2
 800d420:	61fb      	str	r3, [r7, #28]
 800d422:	69fb      	ldr	r3, [r7, #28]
 800d424:	2280      	movs	r2, #128	@ 0x80
 800d426:	0192      	lsls	r2, r2, #6
 800d428:	4053      	eors	r3, r2
 800d42a:	61fb      	str	r3, [r7, #28]
 800d42c:	687a      	ldr	r2, [r7, #4]
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	009b      	lsls	r3, r3, #2
 800d434:	18d3      	adds	r3, r2, r3
 800d436:	69fa      	ldr	r2, [r7, #28]
 800d438:	4905      	ldr	r1, [pc, #20]	@ (800d450 <USB_EPStartXfer+0x1028>)
 800d43a:	430a      	orrs	r2, r1
 800d43c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	0018      	movs	r0, r3
 800d442:	46bd      	mov	sp, r7
 800d444:	b017      	add	sp, #92	@ 0x5c
 800d446:	bd90      	pop	{r4, r7, pc}
 800d448:	40009800 	.word	0x40009800
 800d44c:	07ffbf8f 	.word	0x07ffbf8f
 800d450:	00008080 	.word	0x00008080

0800d454 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
 800d45c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	785b      	ldrb	r3, [r3, #1]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d016      	beq.n	800d494 <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	781b      	ldrb	r3, [r3, #0]
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	18d3      	adds	r3, r2, r3
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	4a16      	ldr	r2, [pc, #88]	@ (800d4cc <USB_EPSetStall+0x78>)
 800d474:	4013      	ands	r3, r2
 800d476:	60bb      	str	r3, [r7, #8]
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	2210      	movs	r2, #16
 800d47c:	4053      	eors	r3, r2
 800d47e:	60bb      	str	r3, [r7, #8]
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	683b      	ldr	r3, [r7, #0]
 800d484:	781b      	ldrb	r3, [r3, #0]
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	18d3      	adds	r3, r2, r3
 800d48a:	68ba      	ldr	r2, [r7, #8]
 800d48c:	4910      	ldr	r1, [pc, #64]	@ (800d4d0 <USB_EPSetStall+0x7c>)
 800d48e:	430a      	orrs	r2, r1
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	e016      	b.n	800d4c2 <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d494:	687a      	ldr	r2, [r7, #4]
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	009b      	lsls	r3, r3, #2
 800d49c:	18d3      	adds	r3, r2, r3
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a0c      	ldr	r2, [pc, #48]	@ (800d4d4 <USB_EPSetStall+0x80>)
 800d4a2:	4013      	ands	r3, r2
 800d4a4:	60fb      	str	r3, [r7, #12]
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2280      	movs	r2, #128	@ 0x80
 800d4aa:	0152      	lsls	r2, r2, #5
 800d4ac:	4053      	eors	r3, r2
 800d4ae:	60fb      	str	r3, [r7, #12]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	781b      	ldrb	r3, [r3, #0]
 800d4b6:	009b      	lsls	r3, r3, #2
 800d4b8:	18d3      	adds	r3, r2, r3
 800d4ba:	68fa      	ldr	r2, [r7, #12]
 800d4bc:	4904      	ldr	r1, [pc, #16]	@ (800d4d0 <USB_EPSetStall+0x7c>)
 800d4be:	430a      	orrs	r2, r1
 800d4c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800d4c2:	2300      	movs	r3, #0
}
 800d4c4:	0018      	movs	r0, r3
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	b004      	add	sp, #16
 800d4ca:	bd80      	pop	{r7, pc}
 800d4cc:	07ff8fbf 	.word	0x07ff8fbf
 800d4d0:	00008080 	.word	0x00008080
 800d4d4:	07ffbf8f 	.word	0x07ffbf8f

0800d4d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
 800d4e0:	000a      	movs	r2, r1
 800d4e2:	1cfb      	adds	r3, r7, #3
 800d4e4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800d4e6:	1cfb      	adds	r3, r7, #3
 800d4e8:	781b      	ldrb	r3, [r3, #0]
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d102      	bne.n	800d4f4 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2280      	movs	r2, #128	@ 0x80
 800d4f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	0018      	movs	r0, r3
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	b002      	add	sp, #8
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800d4fe:	b580      	push	{r7, lr}
 800d500:	b084      	sub	sp, #16
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d50a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800d50c:	68fb      	ldr	r3, [r7, #12]
}
 800d50e:	0018      	movs	r0, r3
 800d510:	46bd      	mov	sp, r7
 800d512:	b004      	add	sp, #16
 800d514:	bd80      	pop	{r7, pc}
	...

0800d518 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08a      	sub	sp, #40	@ 0x28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	0019      	movs	r1, r3
 800d524:	1dbb      	adds	r3, r7, #6
 800d526:	801a      	strh	r2, [r3, #0]
 800d528:	1d3b      	adds	r3, r7, #4
 800d52a:	1c0a      	adds	r2, r1, #0
 800d52c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d52e:	1d3b      	adds	r3, r7, #4
 800d530:	881b      	ldrh	r3, [r3, #0]
 800d532:	3303      	adds	r3, #3
 800d534:	089b      	lsrs	r3, r3, #2
 800d536:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d538:	2016      	movs	r0, #22
 800d53a:	183b      	adds	r3, r7, r0
 800d53c:	1d3a      	adds	r2, r7, #4
 800d53e:	8812      	ldrh	r2, [r2, #0]
 800d540:	2103      	movs	r1, #3
 800d542:	400a      	ands	r2, r1
 800d544:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800d54a:	183b      	adds	r3, r7, r0
 800d54c:	881b      	ldrh	r3, [r3, #0]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d002      	beq.n	800d558 <USB_WritePMA+0x40>
  {
    NbWords--;
 800d552:	69bb      	ldr	r3, [r7, #24]
 800d554:	3b01      	subs	r3, #1
 800d556:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d558:	1dbb      	adds	r3, r7, #6
 800d55a:	881b      	ldrh	r3, [r3, #0]
 800d55c:	4a28      	ldr	r2, [pc, #160]	@ (800d600 <USB_WritePMA+0xe8>)
 800d55e:	4694      	mov	ip, r2
 800d560:	4463      	add	r3, ip
 800d562:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800d564:	69bb      	ldr	r3, [r7, #24]
 800d566:	623b      	str	r3, [r7, #32]
 800d568:	e01f      	b.n	800d5aa <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	781a      	ldrb	r2, [r3, #0]
 800d56e:	7859      	ldrb	r1, [r3, #1]
 800d570:	0209      	lsls	r1, r1, #8
 800d572:	430a      	orrs	r2, r1
 800d574:	7899      	ldrb	r1, [r3, #2]
 800d576:	0409      	lsls	r1, r1, #16
 800d578:	430a      	orrs	r2, r1
 800d57a:	78db      	ldrb	r3, [r3, #3]
 800d57c:	061b      	lsls	r3, r3, #24
 800d57e:	4313      	orrs	r3, r2
 800d580:	001a      	movs	r2, r3
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	3304      	adds	r3, #4
 800d58a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	3301      	adds	r3, #1
 800d590:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d592:	693b      	ldr	r3, [r7, #16]
 800d594:	3301      	adds	r3, #1
 800d596:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	3301      	adds	r3, #1
 800d59c:	613b      	str	r3, [r7, #16]
    pBuf++;
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800d5a4:	6a3b      	ldr	r3, [r7, #32]
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	623b      	str	r3, [r7, #32]
 800d5aa:	6a3b      	ldr	r3, [r7, #32]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d1dc      	bne.n	800d56a <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800d5b0:	2316      	movs	r3, #22
 800d5b2:	18fb      	adds	r3, r7, r3
 800d5b4:	881b      	ldrh	r3, [r3, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d01e      	beq.n	800d5f8 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800d5be:	693b      	ldr	r3, [r7, #16]
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	001a      	movs	r2, r3
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	00db      	lsls	r3, r3, #3
 800d5c8:	409a      	lsls	r2, r3
 800d5ca:	0013      	movs	r3, r2
 800d5cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5ce:	4313      	orrs	r3, r2
 800d5d0:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800d5d2:	6a3b      	ldr	r3, [r7, #32]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	623b      	str	r3, [r7, #32]
      pBuf++;
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800d5de:	2116      	movs	r1, #22
 800d5e0:	187b      	adds	r3, r7, r1
 800d5e2:	881a      	ldrh	r2, [r3, #0]
 800d5e4:	187b      	adds	r3, r7, r1
 800d5e6:	3a01      	subs	r2, #1
 800d5e8:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800d5ea:	187b      	adds	r3, r7, r1
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d1e5      	bne.n	800d5be <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800d5f2:	69fb      	ldr	r3, [r7, #28]
 800d5f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d5f6:	601a      	str	r2, [r3, #0]
  }
}
 800d5f8:	46c0      	nop			@ (mov r8, r8)
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	b00a      	add	sp, #40	@ 0x28
 800d5fe:	bd80      	pop	{r7, pc}
 800d600:	40009800 	.word	0x40009800

0800d604 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b08b      	sub	sp, #44	@ 0x2c
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	0019      	movs	r1, r3
 800d610:	1dbb      	adds	r3, r7, #6
 800d612:	801a      	strh	r2, [r3, #0]
 800d614:	1d3b      	adds	r3, r7, #4
 800d616:	1c0a      	adds	r2, r1, #0
 800d618:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800d61a:	1d3b      	adds	r3, r7, #4
 800d61c:	881b      	ldrh	r3, [r3, #0]
 800d61e:	3303      	adds	r3, #3
 800d620:	089b      	lsrs	r3, r3, #2
 800d622:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800d624:	201a      	movs	r0, #26
 800d626:	183b      	adds	r3, r7, r0
 800d628:	1d3a      	adds	r2, r7, #4
 800d62a:	8812      	ldrh	r2, [r2, #0]
 800d62c:	2103      	movs	r1, #3
 800d62e:	400a      	ands	r2, r1
 800d630:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800d636:	1dbb      	adds	r3, r7, #6
 800d638:	881b      	ldrh	r3, [r3, #0]
 800d63a:	4a39      	ldr	r2, [pc, #228]	@ (800d720 <USB_ReadPMA+0x11c>)
 800d63c:	4694      	mov	ip, r2
 800d63e:	4463      	add	r3, ip
 800d640:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800d642:	183b      	adds	r3, r7, r0
 800d644:	881b      	ldrh	r3, [r3, #0]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d002      	beq.n	800d650 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	3b01      	subs	r3, #1
 800d64e:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800d650:	69fb      	ldr	r3, [r7, #28]
 800d652:	627b      	str	r3, [r7, #36]	@ 0x24
 800d654:	e03c      	b.n	800d6d0 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	681a      	ldr	r2, [r3, #0]
 800d65a:	697b      	ldr	r3, [r7, #20]
 800d65c:	21ff      	movs	r1, #255	@ 0xff
 800d65e:	4011      	ands	r1, r2
 800d660:	000c      	movs	r4, r1
 800d662:	7819      	ldrb	r1, [r3, #0]
 800d664:	2000      	movs	r0, #0
 800d666:	4001      	ands	r1, r0
 800d668:	1c08      	adds	r0, r1, #0
 800d66a:	1c21      	adds	r1, r4, #0
 800d66c:	4301      	orrs	r1, r0
 800d66e:	7019      	strb	r1, [r3, #0]
 800d670:	0a11      	lsrs	r1, r2, #8
 800d672:	20ff      	movs	r0, #255	@ 0xff
 800d674:	4001      	ands	r1, r0
 800d676:	000c      	movs	r4, r1
 800d678:	7859      	ldrb	r1, [r3, #1]
 800d67a:	2000      	movs	r0, #0
 800d67c:	4001      	ands	r1, r0
 800d67e:	1c08      	adds	r0, r1, #0
 800d680:	1c21      	adds	r1, r4, #0
 800d682:	4301      	orrs	r1, r0
 800d684:	7059      	strb	r1, [r3, #1]
 800d686:	0c11      	lsrs	r1, r2, #16
 800d688:	20ff      	movs	r0, #255	@ 0xff
 800d68a:	4001      	ands	r1, r0
 800d68c:	000c      	movs	r4, r1
 800d68e:	7899      	ldrb	r1, [r3, #2]
 800d690:	2000      	movs	r0, #0
 800d692:	4001      	ands	r1, r0
 800d694:	1c08      	adds	r0, r1, #0
 800d696:	1c21      	adds	r1, r4, #0
 800d698:	4301      	orrs	r1, r0
 800d69a:	7099      	strb	r1, [r3, #2]
 800d69c:	0e10      	lsrs	r0, r2, #24
 800d69e:	78da      	ldrb	r2, [r3, #3]
 800d6a0:	2100      	movs	r1, #0
 800d6a2:	400a      	ands	r2, r1
 800d6a4:	1c11      	adds	r1, r2, #0
 800d6a6:	1c02      	adds	r2, r0, #0
 800d6a8:	430a      	orrs	r2, r1
 800d6aa:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800d6ac:	6a3b      	ldr	r3, [r7, #32]
 800d6ae:	3304      	adds	r3, #4
 800d6b0:	623b      	str	r3, [r7, #32]
    pBuf++;
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	3301      	adds	r3, #1
 800d6b6:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d6be:	697b      	ldr	r3, [r7, #20]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	617b      	str	r3, [r7, #20]
    pBuf++;
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	3b01      	subs	r3, #1
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800d6d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d1bf      	bne.n	800d656 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800d6d6:	231a      	movs	r3, #26
 800d6d8:	18fb      	adds	r3, r7, r3
 800d6da:	881b      	ldrh	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d01b      	beq.n	800d718 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	00db      	lsls	r3, r3, #3
 800d6ec:	693a      	ldr	r2, [r7, #16]
 800d6ee:	40da      	lsrs	r2, r3
 800d6f0:	0013      	movs	r3, r2
 800d6f2:	b2da      	uxtb	r2, r3
 800d6f4:	697b      	ldr	r3, [r7, #20]
 800d6f6:	701a      	strb	r2, [r3, #0]
      count++;
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	3301      	adds	r3, #1
 800d702:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800d704:	211a      	movs	r1, #26
 800d706:	187b      	adds	r3, r7, r1
 800d708:	881a      	ldrh	r2, [r3, #0]
 800d70a:	187b      	adds	r3, r7, r1
 800d70c:	3a01      	subs	r2, #1
 800d70e:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800d710:	187b      	adds	r3, r7, r1
 800d712:	881b      	ldrh	r3, [r3, #0]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d1e6      	bne.n	800d6e6 <USB_ReadPMA+0xe2>
  }
}
 800d718:	46c0      	nop			@ (mov r8, r8)
 800d71a:	46bd      	mov	sp, r7
 800d71c:	b00b      	add	sp, #44	@ 0x2c
 800d71e:	bd90      	pop	{r4, r7, pc}
 800d720:	40009800 	.word	0x40009800

0800d724 <__NVIC_EnableIRQ>:
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b082      	sub	sp, #8
 800d728:	af00      	add	r7, sp, #0
 800d72a:	0002      	movs	r2, r0
 800d72c:	1dfb      	adds	r3, r7, #7
 800d72e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d730:	1dfb      	adds	r3, r7, #7
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b7f      	cmp	r3, #127	@ 0x7f
 800d736:	d809      	bhi.n	800d74c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d738:	1dfb      	adds	r3, r7, #7
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	001a      	movs	r2, r3
 800d73e:	231f      	movs	r3, #31
 800d740:	401a      	ands	r2, r3
 800d742:	4b04      	ldr	r3, [pc, #16]	@ (800d754 <__NVIC_EnableIRQ+0x30>)
 800d744:	2101      	movs	r1, #1
 800d746:	4091      	lsls	r1, r2
 800d748:	000a      	movs	r2, r1
 800d74a:	601a      	str	r2, [r3, #0]
}
 800d74c:	46c0      	nop			@ (mov r8, r8)
 800d74e:	46bd      	mov	sp, r7
 800d750:	b002      	add	sp, #8
 800d752:	bd80      	pop	{r7, pc}
 800d754:	e000e100 	.word	0xe000e100

0800d758 <__NVIC_SetPriority>:
{
 800d758:	b590      	push	{r4, r7, lr}
 800d75a:	b083      	sub	sp, #12
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	0002      	movs	r2, r0
 800d760:	6039      	str	r1, [r7, #0]
 800d762:	1dfb      	adds	r3, r7, #7
 800d764:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800d766:	1dfb      	adds	r3, r7, #7
 800d768:	781b      	ldrb	r3, [r3, #0]
 800d76a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d76c:	d828      	bhi.n	800d7c0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d76e:	4a2f      	ldr	r2, [pc, #188]	@ (800d82c <__NVIC_SetPriority+0xd4>)
 800d770:	1dfb      	adds	r3, r7, #7
 800d772:	781b      	ldrb	r3, [r3, #0]
 800d774:	b25b      	sxtb	r3, r3
 800d776:	089b      	lsrs	r3, r3, #2
 800d778:	33c0      	adds	r3, #192	@ 0xc0
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	589b      	ldr	r3, [r3, r2]
 800d77e:	1dfa      	adds	r2, r7, #7
 800d780:	7812      	ldrb	r2, [r2, #0]
 800d782:	0011      	movs	r1, r2
 800d784:	2203      	movs	r2, #3
 800d786:	400a      	ands	r2, r1
 800d788:	00d2      	lsls	r2, r2, #3
 800d78a:	21ff      	movs	r1, #255	@ 0xff
 800d78c:	4091      	lsls	r1, r2
 800d78e:	000a      	movs	r2, r1
 800d790:	43d2      	mvns	r2, r2
 800d792:	401a      	ands	r2, r3
 800d794:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	019b      	lsls	r3, r3, #6
 800d79a:	22ff      	movs	r2, #255	@ 0xff
 800d79c:	401a      	ands	r2, r3
 800d79e:	1dfb      	adds	r3, r7, #7
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	0018      	movs	r0, r3
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	4003      	ands	r3, r0
 800d7a8:	00db      	lsls	r3, r3, #3
 800d7aa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d7ac:	481f      	ldr	r0, [pc, #124]	@ (800d82c <__NVIC_SetPriority+0xd4>)
 800d7ae:	1dfb      	adds	r3, r7, #7
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	b25b      	sxtb	r3, r3
 800d7b4:	089b      	lsrs	r3, r3, #2
 800d7b6:	430a      	orrs	r2, r1
 800d7b8:	33c0      	adds	r3, #192	@ 0xc0
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	501a      	str	r2, [r3, r0]
}
 800d7be:	e031      	b.n	800d824 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d7c0:	4a1b      	ldr	r2, [pc, #108]	@ (800d830 <__NVIC_SetPriority+0xd8>)
 800d7c2:	1dfb      	adds	r3, r7, #7
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	0019      	movs	r1, r3
 800d7c8:	230f      	movs	r3, #15
 800d7ca:	400b      	ands	r3, r1
 800d7cc:	3b08      	subs	r3, #8
 800d7ce:	089b      	lsrs	r3, r3, #2
 800d7d0:	3306      	adds	r3, #6
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	18d3      	adds	r3, r2, r3
 800d7d6:	3304      	adds	r3, #4
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	1dfa      	adds	r2, r7, #7
 800d7dc:	7812      	ldrb	r2, [r2, #0]
 800d7de:	0011      	movs	r1, r2
 800d7e0:	2203      	movs	r2, #3
 800d7e2:	400a      	ands	r2, r1
 800d7e4:	00d2      	lsls	r2, r2, #3
 800d7e6:	21ff      	movs	r1, #255	@ 0xff
 800d7e8:	4091      	lsls	r1, r2
 800d7ea:	000a      	movs	r2, r1
 800d7ec:	43d2      	mvns	r2, r2
 800d7ee:	401a      	ands	r2, r3
 800d7f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	019b      	lsls	r3, r3, #6
 800d7f6:	22ff      	movs	r2, #255	@ 0xff
 800d7f8:	401a      	ands	r2, r3
 800d7fa:	1dfb      	adds	r3, r7, #7
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	0018      	movs	r0, r3
 800d800:	2303      	movs	r3, #3
 800d802:	4003      	ands	r3, r0
 800d804:	00db      	lsls	r3, r3, #3
 800d806:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800d808:	4809      	ldr	r0, [pc, #36]	@ (800d830 <__NVIC_SetPriority+0xd8>)
 800d80a:	1dfb      	adds	r3, r7, #7
 800d80c:	781b      	ldrb	r3, [r3, #0]
 800d80e:	001c      	movs	r4, r3
 800d810:	230f      	movs	r3, #15
 800d812:	4023      	ands	r3, r4
 800d814:	3b08      	subs	r3, #8
 800d816:	089b      	lsrs	r3, r3, #2
 800d818:	430a      	orrs	r2, r1
 800d81a:	3306      	adds	r3, #6
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	18c3      	adds	r3, r0, r3
 800d820:	3304      	adds	r3, #4
 800d822:	601a      	str	r2, [r3, #0]
}
 800d824:	46c0      	nop			@ (mov r8, r8)
 800d826:	46bd      	mov	sp, r7
 800d828:	b003      	add	sp, #12
 800d82a:	bd90      	pop	{r4, r7, pc}
 800d82c:	e000e100 	.word	0xe000e100
 800d830:	e000ed00 	.word	0xe000ed00

0800d834 <LL_UCPD_Enable>:
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2280      	movs	r2, #128	@ 0x80
 800d842:	0612      	lsls	r2, r2, #24
 800d844:	431a      	orrs	r2, r3
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	601a      	str	r2, [r3, #0]
}
 800d84a:	46c0      	nop			@ (mov r8, r8)
 800d84c:	46bd      	mov	sp, r7
 800d84e:	b002      	add	sp, #8
 800d850:	bd80      	pop	{r7, pc}
	...

0800d854 <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b082      	sub	sp, #8
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	4a05      	ldr	r2, [pc, #20]	@ (800d878 <LL_UCPD_SetRxOrderSet+0x24>)
 800d864:	401a      	ands	r2, r3
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	431a      	orrs	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	601a      	str	r2, [r3, #0]
}
 800d86e:	46c0      	nop			@ (mov r8, r8)
 800d870:	46bd      	mov	sp, r7
 800d872:	b002      	add	sp, #8
 800d874:	bd80      	pop	{r7, pc}
 800d876:	46c0      	nop			@ (mov r8, r8)
 800d878:	e00fffff 	.word	0xe00fffff

0800d87c <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
 800d884:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	68db      	ldr	r3, [r3, #12]
 800d88a:	4a05      	ldr	r2, [pc, #20]	@ (800d8a0 <LL_UCPD_SetccEnable+0x24>)
 800d88c:	401a      	ands	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	431a      	orrs	r2, r3
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	60da      	str	r2, [r3, #12]
}
 800d896:	46c0      	nop			@ (mov r8, r8)
 800d898:	46bd      	mov	sp, r7
 800d89a:	b002      	add	sp, #8
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	46c0      	nop			@ (mov r8, r8)
 800d8a0:	fffff3ff 	.word	0xfffff3ff

0800d8a4 <LL_UCPD_RxDisable>:
  * @rmtoll CR        PHYRXEN          LL_UCPD_RxDisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDisable(UCPD_TypeDef *UCPDx)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b082      	sub	sp, #8
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	68db      	ldr	r3, [r3, #12]
 800d8b0:	2220      	movs	r2, #32
 800d8b2:	4393      	bics	r3, r2
 800d8b4:	001a      	movs	r2, r3
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	60da      	str	r2, [r3, #12]
}
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	b002      	add	sp, #8
 800d8c0:	bd80      	pop	{r7, pc}

0800d8c2 <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800d8c2:	b580      	push	{r7, lr}
 800d8c4:	b082      	sub	sp, #8
 800d8c6:	af00      	add	r7, sp, #0
 800d8c8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	691b      	ldr	r3, [r3, #16]
 800d8ce:	2280      	movs	r2, #128	@ 0x80
 800d8d0:	0212      	lsls	r2, r2, #8
 800d8d2:	431a      	orrs	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	611a      	str	r2, [r3, #16]
}
 800d8d8:	46c0      	nop			@ (mov r8, r8)
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	b002      	add	sp, #8
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b082      	sub	sp, #8
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	2280      	movs	r2, #128	@ 0x80
 800d8ee:	01d2      	lsls	r2, r2, #7
 800d8f0:	431a      	orrs	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	611a      	str	r2, [r3, #16]
}
 800d8f6:	46c0      	nop			@ (mov r8, r8)
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	b002      	add	sp, #8
 800d8fc:	bd80      	pop	{r7, pc}
	...

0800d900 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800d900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d902:	b08b      	sub	sp, #44	@ 0x2c
 800d904:	af00      	add	r7, sp, #0
 800d906:	60b9      	str	r1, [r7, #8]
 800d908:	607a      	str	r2, [r7, #4]
 800d90a:	603b      	str	r3, [r7, #0]
 800d90c:	240f      	movs	r4, #15
 800d90e:	193b      	adds	r3, r7, r4
 800d910:	1c02      	adds	r2, r0, #0
 800d912:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800d914:	193b      	adds	r3, r7, r4
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	011a      	lsls	r2, r3, #4
 800d91a:	4b7b      	ldr	r3, [pc, #492]	@ (800db08 <CAD_Init+0x208>)
 800d91c:	18d3      	adds	r3, r2, r3
 800d91e:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800d920:	193b      	adds	r3, r7, r4
 800d922:	781a      	ldrb	r2, [r3, #0]
 800d924:	4979      	ldr	r1, [pc, #484]	@ (800db0c <CAD_Init+0x20c>)
 800d926:	0013      	movs	r3, r2
 800d928:	011b      	lsls	r3, r3, #4
 800d92a:	1a9b      	subs	r3, r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	18cb      	adds	r3, r1, r3
 800d930:	3310      	adds	r3, #16
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800d936:	193b      	adds	r3, r7, r4
 800d938:	781a      	ldrb	r2, [r3, #0]
 800d93a:	4974      	ldr	r1, [pc, #464]	@ (800db0c <CAD_Init+0x20c>)
 800d93c:	0013      	movs	r3, r2
 800d93e:	011b      	lsls	r3, r3, #4
 800d940:	1a9b      	subs	r3, r3, r2
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	18cb      	adds	r3, r1, r3
 800d946:	330c      	adds	r3, #12
 800d948:	68ba      	ldr	r2, [r7, #8]
 800d94a:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800d94c:	193b      	adds	r3, r7, r4
 800d94e:	781a      	ldrb	r2, [r3, #0]
 800d950:	496e      	ldr	r1, [pc, #440]	@ (800db0c <CAD_Init+0x20c>)
 800d952:	0013      	movs	r3, r2
 800d954:	011b      	lsls	r3, r3, #4
 800d956:	1a9b      	subs	r3, r3, r2
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	18cb      	adds	r3, r1, r3
 800d95c:	330c      	adds	r3, #12
 800d95e:	6819      	ldr	r1, [r3, #0]
 800d960:	193b      	adds	r3, r7, r4
 800d962:	781a      	ldrb	r2, [r3, #0]
 800d964:	4869      	ldr	r0, [pc, #420]	@ (800db0c <CAD_Init+0x20c>)
 800d966:	0013      	movs	r3, r2
 800d968:	011b      	lsls	r3, r3, #4
 800d96a:	1a9b      	subs	r3, r3, r2
 800d96c:	009b      	lsls	r3, r3, #2
 800d96e:	18c3      	adds	r3, r0, r3
 800d970:	3310      	adds	r3, #16
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	794a      	ldrb	r2, [r1, #5]
 800d976:	0612      	lsls	r2, r2, #24
 800d978:	0f92      	lsrs	r2, r2, #30
 800d97a:	b2d2      	uxtb	r2, r2
 800d97c:	2103      	movs	r1, #3
 800d97e:	400a      	ands	r2, r1
 800d980:	0010      	movs	r0, r2
 800d982:	789a      	ldrb	r2, [r3, #2]
 800d984:	2103      	movs	r1, #3
 800d986:	438a      	bics	r2, r1
 800d988:	1c11      	adds	r1, r2, #0
 800d98a:	1c02      	adds	r2, r0, #0
 800d98c:	430a      	orrs	r2, r1
 800d98e:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800d990:	193b      	adds	r3, r7, r4
 800d992:	781a      	ldrb	r2, [r3, #0]
 800d994:	495d      	ldr	r1, [pc, #372]	@ (800db0c <CAD_Init+0x20c>)
 800d996:	0013      	movs	r3, r2
 800d998:	011b      	lsls	r3, r3, #4
 800d99a:	1a9b      	subs	r3, r3, r2
 800d99c:	009b      	lsls	r3, r3, #2
 800d99e:	18cb      	adds	r3, r1, r3
 800d9a0:	3310      	adds	r3, #16
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	789a      	ldrb	r2, [r3, #2]
 800d9a6:	210c      	movs	r1, #12
 800d9a8:	438a      	bics	r2, r1
 800d9aa:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800d9ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9ae:	2210      	movs	r2, #16
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	0018      	movs	r0, r3
 800d9b4:	f008 fe04 	bl	80165c0 <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800d9b8:	193b      	adds	r3, r7, r4
 800d9ba:	781a      	ldrb	r2, [r3, #0]
 800d9bc:	4953      	ldr	r1, [pc, #332]	@ (800db0c <CAD_Init+0x20c>)
 800d9be:	0013      	movs	r3, r2
 800d9c0:	011b      	lsls	r3, r3, #4
 800d9c2:	1a9b      	subs	r3, r3, r2
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	18cb      	adds	r3, r1, r3
 800d9c8:	332c      	adds	r3, #44	@ 0x2c
 800d9ca:	683a      	ldr	r2, [r7, #0]
 800d9cc:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800d9ce:	0025      	movs	r5, r4
 800d9d0:	193b      	adds	r3, r7, r4
 800d9d2:	781c      	ldrb	r4, [r3, #0]
 800d9d4:	197b      	adds	r3, r7, r5
 800d9d6:	781b      	ldrb	r3, [r3, #0]
 800d9d8:	0018      	movs	r0, r3
 800d9da:	f001 f963 	bl	800eca4 <USBPD_HW_GetUSPDInstance>
 800d9de:	0001      	movs	r1, r0
 800d9e0:	4a4a      	ldr	r2, [pc, #296]	@ (800db0c <CAD_Init+0x20c>)
 800d9e2:	0023      	movs	r3, r4
 800d9e4:	011b      	lsls	r3, r3, #4
 800d9e6:	1b1b      	subs	r3, r3, r4
 800d9e8:	009b      	lsls	r3, r3, #2
 800d9ea:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 800d9ec:	2614      	movs	r6, #20
 800d9ee:	19bb      	adds	r3, r7, r6
 800d9f0:	0018      	movs	r0, r3
 800d9f2:	f7fe f9bd 	bl	800bd70 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800d9f6:	002c      	movs	r4, r5
 800d9f8:	193b      	adds	r3, r7, r4
 800d9fa:	781a      	ldrb	r2, [r3, #0]
 800d9fc:	4943      	ldr	r1, [pc, #268]	@ (800db0c <CAD_Init+0x20c>)
 800d9fe:	0013      	movs	r3, r2
 800da00:	011b      	lsls	r3, r3, #4
 800da02:	1a9b      	subs	r3, r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	585b      	ldr	r3, [r3, r1]
 800da08:	19ba      	adds	r2, r7, r6
 800da0a:	0011      	movs	r1, r2
 800da0c:	0018      	movs	r0, r3
 800da0e:	f7fe f975 	bl	800bcfc <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800da12:	193b      	adds	r3, r7, r4
 800da14:	781a      	ldrb	r2, [r3, #0]
 800da16:	493d      	ldr	r1, [pc, #244]	@ (800db0c <CAD_Init+0x20c>)
 800da18:	0013      	movs	r3, r2
 800da1a:	011b      	lsls	r3, r3, #4
 800da1c:	1a9b      	subs	r3, r3, r2
 800da1e:	009b      	lsls	r3, r3, #2
 800da20:	585b      	ldr	r3, [r3, r1]
 800da22:	22f8      	movs	r2, #248	@ 0xf8
 800da24:	0452      	lsls	r2, r2, #17
 800da26:	0011      	movs	r1, r2
 800da28:	0018      	movs	r0, r3
 800da2a:	f7ff ff13 	bl	800d854 <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800da2e:	193b      	adds	r3, r7, r4
 800da30:	781a      	ldrb	r2, [r3, #0]
 800da32:	4936      	ldr	r1, [pc, #216]	@ (800db0c <CAD_Init+0x20c>)
 800da34:	0013      	movs	r3, r2
 800da36:	011b      	lsls	r3, r3, #4
 800da38:	1a9b      	subs	r3, r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	585b      	ldr	r3, [r3, r1]
 800da3e:	22c0      	movs	r2, #192	@ 0xc0
 800da40:	0112      	lsls	r2, r2, #4
 800da42:	0011      	movs	r1, r2
 800da44:	0018      	movs	r0, r3
 800da46:	f7ff ff19 	bl	800d87c <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800da4a:	193b      	adds	r3, r7, r4
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	0018      	movs	r0, r3
 800da50:	f008 fca1 	bl	8016396 <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800da54:	193b      	adds	r3, r7, r4
 800da56:	781a      	ldrb	r2, [r3, #0]
 800da58:	492c      	ldr	r1, [pc, #176]	@ (800db0c <CAD_Init+0x20c>)
 800da5a:	0013      	movs	r3, r2
 800da5c:	011b      	lsls	r3, r3, #4
 800da5e:	1a9b      	subs	r3, r3, r2
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	585b      	ldr	r3, [r3, r1]
 800da64:	0018      	movs	r0, r3
 800da66:	f7ff fee5 	bl	800d834 <LL_UCPD_Enable>

#if defined(_SRC) || defined(_DRP)
  /* Initialize usbpd interrupt */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800da6a:	0020      	movs	r0, r4
 800da6c:	193b      	adds	r3, r7, r4
 800da6e:	781a      	ldrb	r2, [r3, #0]
 800da70:	4926      	ldr	r1, [pc, #152]	@ (800db0c <CAD_Init+0x20c>)
 800da72:	0013      	movs	r3, r2
 800da74:	011b      	lsls	r3, r3, #4
 800da76:	1a9b      	subs	r3, r3, r2
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	18cb      	adds	r3, r1, r3
 800da7c:	3310      	adds	r3, #16
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	2204      	movs	r2, #4
 800da84:	4013      	ands	r3, r2
 800da86:	b2db      	uxtb	r3, r3
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <CAD_Init+0x198>
  {
    USBPDM1_AssertRp(PortNum);
 800da8c:	183b      	adds	r3, r7, r0
 800da8e:	781b      	ldrb	r3, [r3, #0]
 800da90:	0018      	movs	r0, r3
 800da92:	f002 fa61 	bl	800ff58 <USBPDM1_AssertRp>
 800da96:	e005      	b.n	800daa4 <CAD_Init+0x1a4>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 800da98:	230f      	movs	r3, #15
 800da9a:	18fb      	adds	r3, r7, r3
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	0018      	movs	r0, r3
 800daa0:	f002 fb1c 	bl	80100dc <USBPDM1_AssertRd>
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Set the state machine according the SW configuration */
#if !defined(USBPDCORE_LIB_NO_PD)
#if defined(_DRP)
  if (Ports[PortNum].settings->CAD_RoleToggle == USBPD_TRUE)
 800daa4:	200f      	movs	r0, #15
 800daa6:	183b      	adds	r3, r7, r0
 800daa8:	781a      	ldrb	r2, [r3, #0]
 800daaa:	4918      	ldr	r1, [pc, #96]	@ (800db0c <CAD_Init+0x20c>)
 800daac:	0013      	movs	r3, r2
 800daae:	011b      	lsls	r3, r3, #4
 800dab0:	1a9b      	subs	r3, r3, r2
 800dab2:	009b      	lsls	r3, r3, #2
 800dab4:	18cb      	adds	r3, r1, r3
 800dab6:	330c      	adds	r3, #12
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	795b      	ldrb	r3, [r3, #5]
 800dabc:	2220      	movs	r2, #32
 800dabe:	4013      	ands	r3, r2
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d01b      	beq.n	800dafe <CAD_Init+0x1fe>
  {
    _handle->CAD_PtrStateMachine = CAD_StateMachine_DRP;
 800dac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dac8:	4a11      	ldr	r2, [pc, #68]	@ (800db10 <CAD_Init+0x210>)
 800daca:	60da      	str	r2, [r3, #12]
    _handle->CAD_Accessory_SRC = Ports[PortNum].settings->CAD_AccesorySupport;
 800dacc:	183b      	adds	r3, r7, r0
 800dace:	781a      	ldrb	r2, [r3, #0]
 800dad0:	490e      	ldr	r1, [pc, #56]	@ (800db0c <CAD_Init+0x20c>)
 800dad2:	0013      	movs	r3, r2
 800dad4:	011b      	lsls	r3, r3, #4
 800dad6:	1a9b      	subs	r3, r3, r2
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	18cb      	adds	r3, r1, r3
 800dadc:	330c      	adds	r3, #12
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	795b      	ldrb	r3, [r3, #5]
 800dae2:	06db      	lsls	r3, r3, #27
 800dae4:	0fdb      	lsrs	r3, r3, #31
 800dae6:	b2da      	uxtb	r2, r3
 800dae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daea:	2101      	movs	r1, #1
 800daec:	400a      	ands	r2, r1
 800daee:	0190      	lsls	r0, r2, #6
 800daf0:	785a      	ldrb	r2, [r3, #1]
 800daf2:	2140      	movs	r1, #64	@ 0x40
 800daf4:	438a      	bics	r2, r1
 800daf6:	1c11      	adds	r1, r2, #0
 800daf8:	1c02      	adds	r2, r0, #0
 800dafa:	430a      	orrs	r2, r1
 800dafc:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800dafe:	46c0      	nop			@ (mov r8, r8)
 800db00:	46bd      	mov	sp, r7
 800db02:	b00b      	add	sp, #44	@ 0x2c
 800db04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db06:	46c0      	nop			@ (mov r8, r8)
 800db08:	2000a700 	.word	0x2000a700
 800db0c:	2000a734 	.word	0x2000a734
 800db10:	0800dc09 	.word	0x0800dc09

0800db14 <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	0002      	movs	r2, r0
 800db1c:	1dfb      	adds	r3, r7, #7
 800db1e:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800db20:	1dfb      	adds	r3, r7, #7
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	0018      	movs	r0, r3
 800db26:	f002 fb89 	bl	801023c <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800db2a:	1dfb      	adds	r3, r7, #7
 800db2c:	781a      	ldrb	r2, [r3, #0]
 800db2e:	4b0b      	ldr	r3, [pc, #44]	@ (800db5c <CAD_Enter_ErrorRecovery+0x48>)
 800db30:	0112      	lsls	r2, r2, #4
 800db32:	5cd1      	ldrb	r1, [r2, r3]
 800db34:	2080      	movs	r0, #128	@ 0x80
 800db36:	4240      	negs	r0, r0
 800db38:	4301      	orrs	r1, r0
 800db3a:	54d1      	strb	r1, [r2, r3]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800db3c:	1dfb      	adds	r3, r7, #7
 800db3e:	781a      	ldrb	r2, [r3, #0]
 800db40:	4907      	ldr	r1, [pc, #28]	@ (800db60 <CAD_Enter_ErrorRecovery+0x4c>)
 800db42:	0013      	movs	r3, r2
 800db44:	011b      	lsls	r3, r3, #4
 800db46:	1a9b      	subs	r3, r3, r2
 800db48:	009b      	lsls	r3, r3, #2
 800db4a:	18cb      	adds	r3, r1, r3
 800db4c:	332c      	adds	r3, #44	@ 0x2c
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4798      	blx	r3
}
 800db52:	46c0      	nop			@ (mov r8, r8)
 800db54:	46bd      	mov	sp, r7
 800db56:	b002      	add	sp, #8
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	46c0      	nop			@ (mov r8, r8)
 800db5c:	2000a700 	.word	0x2000a700
 800db60:	2000a734 	.word	0x2000a734

0800db64 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
 800db6a:	0002      	movs	r2, r0
 800db6c:	6039      	str	r1, [r7, #0]
 800db6e:	1dfb      	adds	r3, r7, #7
 800db70:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800db72:	1dfb      	adds	r3, r7, #7
 800db74:	781a      	ldrb	r2, [r3, #0]
 800db76:	4918      	ldr	r1, [pc, #96]	@ (800dbd8 <CAD_SRC_Set_ResistorRp+0x74>)
 800db78:	0013      	movs	r3, r2
 800db7a:	011b      	lsls	r3, r3, #4
 800db7c:	1a9b      	subs	r3, r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	18cb      	adds	r3, r1, r3
 800db82:	3310      	adds	r3, #16
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	1c11      	adds	r1, r2, #0
 800db8a:	2203      	movs	r2, #3
 800db8c:	400a      	ands	r2, r1
 800db8e:	b2d2      	uxtb	r2, r2
 800db90:	2103      	movs	r1, #3
 800db92:	400a      	ands	r2, r1
 800db94:	0010      	movs	r0, r2
 800db96:	789a      	ldrb	r2, [r3, #2]
 800db98:	2103      	movs	r1, #3
 800db9a:	438a      	bics	r2, r1
 800db9c:	1c11      	adds	r1, r2, #0
 800db9e:	1c02      	adds	r2, r0, #0
 800dba0:	430a      	orrs	r2, r1
 800dba2:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800dba4:	1dfb      	adds	r3, r7, #7
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	4a0c      	ldr	r2, [pc, #48]	@ (800dbdc <CAD_SRC_Set_ResistorRp+0x78>)
 800dbaa:	011b      	lsls	r3, r3, #4
 800dbac:	18d3      	adds	r3, r2, r3
 800dbae:	785a      	ldrb	r2, [r3, #1]
 800dbb0:	2101      	movs	r1, #1
 800dbb2:	430a      	orrs	r2, r1
 800dbb4:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 800dbb6:	1dfb      	adds	r3, r7, #7
 800dbb8:	781a      	ldrb	r2, [r3, #0]
 800dbba:	4907      	ldr	r1, [pc, #28]	@ (800dbd8 <CAD_SRC_Set_ResistorRp+0x74>)
 800dbbc:	0013      	movs	r3, r2
 800dbbe:	011b      	lsls	r3, r3, #4
 800dbc0:	1a9b      	subs	r3, r3, r2
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	18cb      	adds	r3, r1, r3
 800dbc6:	332c      	adds	r3, #44	@ 0x2c
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	4798      	blx	r3
  return 0;
 800dbcc:	2300      	movs	r3, #0
}
 800dbce:	0018      	movs	r0, r3
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	b002      	add	sp, #8
 800dbd4:	bd80      	pop	{r7, pc}
 800dbd6:	46c0      	nop			@ (mov r8, r8)
 800dbd8:	2000a734 	.word	0x2000a734
 800dbdc:	2000a700 	.word	0x2000a700

0800dbe0 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	b082      	sub	sp, #8
 800dbe4:	af00      	add	r7, sp, #0
 800dbe6:	0002      	movs	r2, r0
 800dbe8:	6039      	str	r1, [r7, #0]
 800dbea:	1dfb      	adds	r3, r7, #7
 800dbec:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800dbee:	683a      	ldr	r2, [r7, #0]
 800dbf0:	1dfb      	adds	r3, r7, #7
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	0011      	movs	r1, r2
 800dbf6:	0018      	movs	r0, r3
 800dbf8:	f7ff ffb4 	bl	800db64 <CAD_SRC_Set_ResistorRp>
 800dbfc:	0003      	movs	r3, r0
}
 800dbfe:	0018      	movs	r0, r3
 800dc00:	46bd      	mov	sp, r7
 800dc02:	b002      	add	sp, #8
 800dc04:	bd80      	pop	{r7, pc}
	...

0800dc08 <CAD_StateMachine_DRP>:
#endif /* _SRC */

#if defined(_DRP)
/* function to handle DRP */
uint32_t CAD_StateMachine_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800dc08:	b590      	push	{r4, r7, lr}
 800dc0a:	b087      	sub	sp, #28
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60b9      	str	r1, [r7, #8]
 800dc10:	607a      	str	r2, [r7, #4]
 800dc12:	210f      	movs	r1, #15
 800dc14:	187b      	adds	r3, r7, r1
 800dc16:	1c02      	adds	r2, r0, #0
 800dc18:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800dc1a:	187b      	adds	r3, r7, r1
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	011a      	lsls	r2, r3, #4
 800dc20:	4b6b      	ldr	r3, [pc, #428]	@ (800ddd0 <CAD_StateMachine_DRP+0x1c8>)
 800dc22:	18d3      	adds	r3, r2, r3
 800dc24:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800dc26:	2302      	movs	r3, #2
 800dc28:	617b      	str	r3, [r7, #20]

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	785b      	ldrb	r3, [r3, #1]
 800dc2e:	069b      	lsls	r3, r3, #26
 800dc30:	0edb      	lsrs	r3, r3, #27
 800dc32:	b2db      	uxtb	r3, r3
 800dc34:	2b0b      	cmp	r3, #11
 800dc36:	d900      	bls.n	800dc3a <CAD_StateMachine_DRP+0x32>
 800dc38:	e0c4      	b.n	800ddc4 <CAD_StateMachine_DRP+0x1bc>
 800dc3a:	009a      	lsls	r2, r3, #2
 800dc3c:	4b65      	ldr	r3, [pc, #404]	@ (800ddd4 <CAD_StateMachine_DRP+0x1cc>)
 800dc3e:	18d3      	adds	r3, r2, r3
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	469f      	mov	pc, r3
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn management */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800dc44:	230f      	movs	r3, #15
 800dc46:	18fb      	adds	r3, r7, r3
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	0018      	movs	r0, r3
 800dc4c:	f008 fbc5 	bl	80163da <BSP_USBPD_PWR_VBUSDeInit>
      _timing = 0;
 800dc50:	2300      	movs	r3, #0
 800dc52:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 800dc54:	693b      	ldr	r3, [r7, #16]
 800dc56:	785a      	ldrb	r2, [r3, #1]
 800dc58:	213e      	movs	r1, #62	@ 0x3e
 800dc5a:	438a      	bics	r2, r1
 800dc5c:	1c11      	adds	r1, r2, #0
 800dc5e:	2212      	movs	r2, #18
 800dc60:	430a      	orrs	r2, r1
 800dc62:	705a      	strb	r2, [r3, #1]
      break;
 800dc64:	e0af      	b.n	800ddc6 <CAD_StateMachine_DRP+0x1be>
    }

    case USBPD_CAD_STATE_SWITCH_TO_SRC:
    case USBPD_CAD_STATE_SWITCH_TO_SNK:
    {
      LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 800dc66:	240f      	movs	r4, #15
 800dc68:	193b      	adds	r3, r7, r4
 800dc6a:	781a      	ldrb	r2, [r3, #0]
 800dc6c:	495a      	ldr	r1, [pc, #360]	@ (800ddd8 <CAD_StateMachine_DRP+0x1d0>)
 800dc6e:	0013      	movs	r3, r2
 800dc70:	011b      	lsls	r3, r3, #4
 800dc72:	1a9b      	subs	r3, r3, r2
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	585b      	ldr	r3, [r3, r1]
 800dc78:	0018      	movs	r0, r3
 800dc7a:	f7ff fe13 	bl	800d8a4 <LL_UCPD_RxDisable>
      if (USBPD_CAD_STATE_SWITCH_TO_SRC == _handle->cstate)
 800dc7e:	693b      	ldr	r3, [r7, #16]
 800dc80:	785b      	ldrb	r3, [r3, #1]
 800dc82:	223e      	movs	r2, #62	@ 0x3e
 800dc84:	4013      	ands	r3, r2
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	2b10      	cmp	r3, #16
 800dc8a:	d12d      	bne.n	800dce8 <CAD_StateMachine_DRP+0xe0>
      {
        USBPDM1_AssertRp(PortNum);
 800dc8c:	193b      	adds	r3, r7, r4
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	0018      	movs	r0, r3
 800dc92:	f002 f961 	bl	800ff58 <USBPDM1_AssertRp>
        Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SRC;
 800dc96:	0020      	movs	r0, r4
 800dc98:	183b      	adds	r3, r7, r0
 800dc9a:	781a      	ldrb	r2, [r3, #0]
 800dc9c:	494e      	ldr	r1, [pc, #312]	@ (800ddd8 <CAD_StateMachine_DRP+0x1d0>)
 800dc9e:	0013      	movs	r3, r2
 800dca0:	011b      	lsls	r3, r3, #4
 800dca2:	1a9b      	subs	r3, r3, r2
 800dca4:	009b      	lsls	r3, r3, #2
 800dca6:	18cb      	adds	r3, r1, r3
 800dca8:	3310      	adds	r3, #16
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	781a      	ldrb	r2, [r3, #0]
 800dcae:	2104      	movs	r1, #4
 800dcb0:	430a      	orrs	r2, r1
 800dcb2:	701a      	strb	r2, [r3, #0]
        Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_DFP;
 800dcb4:	183b      	adds	r3, r7, r0
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	4947      	ldr	r1, [pc, #284]	@ (800ddd8 <CAD_StateMachine_DRP+0x1d0>)
 800dcba:	0013      	movs	r3, r2
 800dcbc:	011b      	lsls	r3, r3, #4
 800dcbe:	1a9b      	subs	r3, r3, r2
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	18cb      	adds	r3, r1, r3
 800dcc4:	3310      	adds	r3, #16
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	781a      	ldrb	r2, [r3, #0]
 800dcca:	2108      	movs	r1, #8
 800dccc:	430a      	orrs	r2, r1
 800dcce:	701a      	strb	r2, [r3, #0]
        _timing = Ports[PortNum].settings->CAD_SRCToggleTime;
 800dcd0:	183b      	adds	r3, r7, r0
 800dcd2:	781a      	ldrb	r2, [r3, #0]
 800dcd4:	4940      	ldr	r1, [pc, #256]	@ (800ddd8 <CAD_StateMachine_DRP+0x1d0>)
 800dcd6:	0013      	movs	r3, r2
 800dcd8:	011b      	lsls	r3, r3, #4
 800dcda:	1a9b      	subs	r3, r3, r2
 800dcdc:	009b      	lsls	r3, r3, #2
 800dcde:	18cb      	adds	r3, r1, r3
 800dce0:	330c      	adds	r3, #12
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	79db      	ldrb	r3, [r3, #7]
 800dce6:	617b      	str	r3, [r7, #20]
      }
      if (USBPD_CAD_STATE_SWITCH_TO_SNK == _handle->cstate)
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	785b      	ldrb	r3, [r3, #1]
 800dcec:	223e      	movs	r2, #62	@ 0x3e
 800dcee:	4013      	ands	r3, r2
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	2b12      	cmp	r3, #18
 800dcf4:	d12e      	bne.n	800dd54 <CAD_StateMachine_DRP+0x14c>
      {
        USBPDM1_AssertRd(PortNum);
 800dcf6:	240f      	movs	r4, #15
 800dcf8:	193b      	adds	r3, r7, r4
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	0018      	movs	r0, r3
 800dcfe:	f002 f9ed 	bl	80100dc <USBPDM1_AssertRd>
        Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 800dd02:	0020      	movs	r0, r4
 800dd04:	183b      	adds	r3, r7, r0
 800dd06:	781a      	ldrb	r2, [r3, #0]
 800dd08:	4933      	ldr	r1, [pc, #204]	@ (800ddd8 <CAD_StateMachine_DRP+0x1d0>)
 800dd0a:	0013      	movs	r3, r2
 800dd0c:	011b      	lsls	r3, r3, #4
 800dd0e:	1a9b      	subs	r3, r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	18cb      	adds	r3, r1, r3
 800dd14:	3310      	adds	r3, #16
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	781a      	ldrb	r2, [r3, #0]
 800dd1a:	2104      	movs	r1, #4
 800dd1c:	438a      	bics	r2, r1
 800dd1e:	701a      	strb	r2, [r3, #0]
        Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_UFP;
 800dd20:	183b      	adds	r3, r7, r0
 800dd22:	781a      	ldrb	r2, [r3, #0]
 800dd24:	492c      	ldr	r1, [pc, #176]	@ (800ddd8 <CAD_StateMachine_DRP+0x1d0>)
 800dd26:	0013      	movs	r3, r2
 800dd28:	011b      	lsls	r3, r3, #4
 800dd2a:	1a9b      	subs	r3, r3, r2
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	18cb      	adds	r3, r1, r3
 800dd30:	3310      	adds	r3, #16
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	781a      	ldrb	r2, [r3, #0]
 800dd36:	2108      	movs	r1, #8
 800dd38:	438a      	bics	r2, r1
 800dd3a:	701a      	strb	r2, [r3, #0]
        _timing = Ports[PortNum].settings->CAD_SNKToggleTime;
 800dd3c:	183b      	adds	r3, r7, r0
 800dd3e:	781a      	ldrb	r2, [r3, #0]
 800dd40:	4925      	ldr	r1, [pc, #148]	@ (800ddd8 <CAD_StateMachine_DRP+0x1d0>)
 800dd42:	0013      	movs	r3, r2
 800dd44:	011b      	lsls	r3, r3, #4
 800dd46:	1a9b      	subs	r3, r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	18cb      	adds	r3, r1, r3
 800dd4c:	330c      	adds	r3, #12
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	799b      	ldrb	r3, [r3, #6]
 800dd52:	617b      	str	r3, [r7, #20]
      }
      _handle->CAD_tToggle_start = HAL_GetTick();
 800dd54:	f7f9 fe12 	bl	800797c <HAL_GetTick>
 800dd58:	0002      	movs	r2, r0
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	785a      	ldrb	r2, [r3, #1]
 800dd62:	213e      	movs	r1, #62	@ 0x3e
 800dd64:	438a      	bics	r2, r1
 800dd66:	1c11      	adds	r1, r2, #0
 800dd68:	2202      	movs	r2, #2
 800dd6a:	430a      	orrs	r2, r1
 800dd6c:	705a      	strb	r2, [r3, #1]
    }
    break;
 800dd6e:	e02a      	b.n	800ddc6 <CAD_StateMachine_DRP+0x1be>

    case USBPD_CAD_STATE_DETACHED:
      _timing = ManageStateDetached_DRP(PortNum);
 800dd70:	230f      	movs	r3, #15
 800dd72:	18fb      	adds	r3, r7, r3
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	0018      	movs	r0, r3
 800dd78:	f000 fb06 	bl	800e388 <ManageStateDetached_DRP>
 800dd7c:	0003      	movs	r3, r0
 800dd7e:	617b      	str	r3, [r7, #20]
      break;
 800dd80:	e021      	b.n	800ddc6 <CAD_StateMachine_DRP+0x1be>

    /*CAD STATE ATTACHED WAIT*/
    case USBPD_CAD_STATE_ATTACHED_WAIT:
      _timing = ManageStateAttachedWait_DRP(PortNum, pEvent, pCCXX);
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	68b9      	ldr	r1, [r7, #8]
 800dd86:	230f      	movs	r3, #15
 800dd88:	18fb      	adds	r3, r7, r3
 800dd8a:	781b      	ldrb	r3, [r3, #0]
 800dd8c:	0018      	movs	r0, r3
 800dd8e:	f000 fd93 	bl	800e8b8 <ManageStateAttachedWait_DRP>
 800dd92:	0003      	movs	r3, r0
 800dd94:	617b      	str	r3, [r7, #20]
      break;
 800dd96:	e016      	b.n	800ddc6 <CAD_StateMachine_DRP+0x1be>
    }
#endif /* _ACCESSORY_SRC */

    /* CAD ELECTRONIC CABLE ATTACHED */
    case USBPD_CAD_STATE_EMC :
      _timing = ManageStateEMC(PortNum, pEvent, pCCXX);
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	68b9      	ldr	r1, [r7, #8]
 800dd9c:	230f      	movs	r3, #15
 800dd9e:	18fb      	adds	r3, r7, r3
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	0018      	movs	r0, r3
 800dda4:	f000 fcbc 	bl	800e720 <ManageStateEMC>
 800dda8:	0003      	movs	r3, r0
 800ddaa:	617b      	str	r3, [r7, #20]
      break;
 800ddac:	e00b      	b.n	800ddc6 <CAD_StateMachine_DRP+0x1be>

    /*CAD electronic cable with Sink ATTACHED*/
    case USBPD_CAD_STATE_ATTEMC:
    case USBPD_CAD_STATE_ATTACHED:
      _timing = ManageStateAttached_DRP(PortNum, pEvent, pCCXX);
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	68b9      	ldr	r1, [r7, #8]
 800ddb2:	230f      	movs	r3, #15
 800ddb4:	18fb      	adds	r3, r7, r3
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	0018      	movs	r0, r3
 800ddba:	f000 fd2f 	bl	800e81c <ManageStateAttached_DRP>
 800ddbe:	0003      	movs	r3, r0
 800ddc0:	617b      	str	r3, [r7, #20]
      break;
 800ddc2:	e000      	b.n	800ddc6 <CAD_StateMachine_DRP+0x1be>

    default :
      break;
 800ddc4:	46c0      	nop			@ (mov r8, r8)
  }

  return _timing;
 800ddc6:	697b      	ldr	r3, [r7, #20]
}
 800ddc8:	0018      	movs	r0, r3
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	b007      	add	sp, #28
 800ddce:	bd90      	pop	{r4, r7, pc}
 800ddd0:	2000a700 	.word	0x2000a700
 800ddd4:	08016864 	.word	0x08016864
 800ddd8:	2000a734 	.word	0x2000a734

0800dddc <CAD_StateMachine>:
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800dddc:	b590      	push	{r4, r7, lr}
 800ddde:	b087      	sub	sp, #28
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	60b9      	str	r1, [r7, #8]
 800dde4:	607a      	str	r2, [r7, #4]
 800dde6:	210f      	movs	r1, #15
 800dde8:	187b      	adds	r3, r7, r1
 800ddea:	1c02      	adds	r2, r0, #0
 800ddec:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ddee:	187b      	adds	r3, r7, r1
 800ddf0:	781b      	ldrb	r3, [r3, #0]
 800ddf2:	011a      	lsls	r2, r3, #4
 800ddf4:	4b72      	ldr	r3, [pc, #456]	@ (800dfc0 <CAD_StateMachine+0x1e4>)
 800ddf6:	18d3      	adds	r3, r2, r3
 800ddf8:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ddfa:	2302      	movs	r3, #2
 800ddfc:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2200      	movs	r2, #0
 800de02:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800de04:	187b      	adds	r3, r7, r1
 800de06:	781a      	ldrb	r2, [r3, #0]
 800de08:	496e      	ldr	r1, [pc, #440]	@ (800dfc4 <CAD_StateMachine+0x1e8>)
 800de0a:	0013      	movs	r3, r2
 800de0c:	011b      	lsls	r3, r3, #4
 800de0e:	1a9b      	subs	r3, r3, r2
 800de10:	009b      	lsls	r3, r3, #2
 800de12:	18cb      	adds	r3, r1, r3
 800de14:	3310      	adds	r3, #16
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	781b      	ldrb	r3, [r3, #0]
 800de1a:	2210      	movs	r2, #16
 800de1c:	4013      	ands	r3, r2
 800de1e:	b2db      	uxtb	r3, r3
 800de20:	2b00      	cmp	r3, #0
 800de22:	d001      	beq.n	800de28 <CAD_StateMachine+0x4c>
  {
    return _timing;
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	e0c6      	b.n	800dfb6 <CAD_StateMachine+0x1da>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	781b      	ldrb	r3, [r3, #0]
 800de2c:	227f      	movs	r2, #127	@ 0x7f
 800de2e:	4393      	bics	r3, r2
 800de30:	b2db      	uxtb	r3, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00c      	beq.n	800de50 <CAD_StateMachine+0x74>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	781a      	ldrb	r2, [r3, #0]
 800de3a:	217f      	movs	r1, #127	@ 0x7f
 800de3c:	400a      	ands	r2, r1
 800de3e:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	785a      	ldrb	r2, [r3, #1]
 800de44:	213e      	movs	r1, #62	@ 0x3e
 800de46:	438a      	bics	r2, r1
 800de48:	1c11      	adds	r1, r2, #0
 800de4a:	2218      	movs	r2, #24
 800de4c:	430a      	orrs	r2, r1
 800de4e:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	785b      	ldrb	r3, [r3, #1]
 800de54:	069b      	lsls	r3, r3, #26
 800de56:	0edb      	lsrs	r3, r3, #27
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	2b0d      	cmp	r3, #13
 800de5c:	d06a      	beq.n	800df34 <CAD_StateMachine+0x158>
 800de5e:	dd00      	ble.n	800de62 <CAD_StateMachine+0x86>
 800de60:	e09b      	b.n	800df9a <CAD_StateMachine+0x1be>
 800de62:	2b00      	cmp	r3, #0
 800de64:	d002      	beq.n	800de6c <CAD_StateMachine+0x90>
 800de66:	2b0c      	cmp	r3, #12
 800de68:	d038      	beq.n	800dedc <CAD_StateMachine+0x100>
 800de6a:	e096      	b.n	800df9a <CAD_StateMachine+0x1be>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800de6c:	240f      	movs	r4, #15
 800de6e:	193b      	adds	r3, r7, r4
 800de70:	781a      	ldrb	r2, [r3, #0]
 800de72:	4954      	ldr	r1, [pc, #336]	@ (800dfc4 <CAD_StateMachine+0x1e8>)
 800de74:	0013      	movs	r3, r2
 800de76:	011b      	lsls	r3, r3, #4
 800de78:	1a9b      	subs	r3, r3, r2
 800de7a:	009b      	lsls	r3, r3, #2
 800de7c:	585b      	ldr	r3, [r3, r1]
 800de7e:	0018      	movs	r0, r3
 800de80:	f7ff fd1f 	bl	800d8c2 <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800de84:	193b      	adds	r3, r7, r4
 800de86:	781a      	ldrb	r2, [r3, #0]
 800de88:	494e      	ldr	r1, [pc, #312]	@ (800dfc4 <CAD_StateMachine+0x1e8>)
 800de8a:	0013      	movs	r3, r2
 800de8c:	011b      	lsls	r3, r3, #4
 800de8e:	1a9b      	subs	r3, r3, r2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	585b      	ldr	r3, [r3, r1]
 800de94:	0018      	movs	r0, r3
 800de96:	f7ff fd23 	bl	800d8e0 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 800de9a:	193b      	adds	r3, r7, r4
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d107      	bne.n	800deb2 <CAD_StateMachine+0xd6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 800dea2:	2102      	movs	r1, #2
 800dea4:	2008      	movs	r0, #8
 800dea6:	f7ff fc57 	bl	800d758 <__NVIC_SetPriority>
 800deaa:	2008      	movs	r0, #8
 800deac:	f7ff fc3a 	bl	800d724 <__NVIC_EnableIRQ>
 800deb0:	e006      	b.n	800dec0 <CAD_StateMachine+0xe4>
      }
#if USBPD_PORT_COUNT > 1
      else
      {
        UCPD_INSTANCE1_ENABLEIRQ;
 800deb2:	2102      	movs	r1, #2
 800deb4:	2008      	movs	r0, #8
 800deb6:	f7ff fc4f 	bl	800d758 <__NVIC_SetPriority>
 800deba:	2008      	movs	r0, #8
 800debc:	f7ff fc32 	bl	800d724 <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
 800dec0:	f7f9 fd5c 	bl	800797c <HAL_GetTick>
 800dec4:	0002      	movs	r2, r0
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	605a      	str	r2, [r3, #4]
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	785a      	ldrb	r2, [r3, #1]
 800dece:	213e      	movs	r1, #62	@ 0x3e
 800ded0:	438a      	bics	r2, r1
 800ded2:	1c11      	adds	r1, r2, #0
 800ded4:	2202      	movs	r2, #2
 800ded6:	430a      	orrs	r2, r1
 800ded8:	705a      	strb	r2, [r3, #1]
      break;
 800deda:	e06b      	b.n	800dfb4 <CAD_StateMachine+0x1d8>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800dedc:	240f      	movs	r4, #15
 800dede:	193b      	adds	r3, r7, r4
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	0018      	movs	r0, r3
 800dee4:	f002 f9aa 	bl	801023c <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800dee8:	193b      	adds	r3, r7, r4
 800deea:	781a      	ldrb	r2, [r3, #0]
 800deec:	4935      	ldr	r1, [pc, #212]	@ (800dfc4 <CAD_StateMachine+0x1e8>)
 800deee:	0013      	movs	r3, r2
 800def0:	011b      	lsls	r3, r3, #4
 800def2:	1a9b      	subs	r3, r3, r2
 800def4:	009b      	lsls	r3, r3, #2
 800def6:	18cb      	adds	r3, r1, r3
 800def8:	3334      	adds	r3, #52	@ 0x34
 800defa:	2200      	movs	r2, #0
 800defc:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	781a      	ldrb	r2, [r3, #0]
 800df08:	2103      	movs	r1, #3
 800df0a:	438a      	bics	r2, r1
 800df0c:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	2201      	movs	r2, #1
 800df12:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800df14:	f7f9 fd32 	bl	800797c <HAL_GetTick>
 800df18:	0002      	movs	r2, r0
 800df1a:	693b      	ldr	r3, [r7, #16]
 800df1c:	609a      	str	r2, [r3, #8]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800df1e:	231a      	movs	r3, #26
 800df20:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	785a      	ldrb	r2, [r3, #1]
 800df26:	213e      	movs	r1, #62	@ 0x3e
 800df28:	438a      	bics	r2, r1
 800df2a:	1c11      	adds	r1, r2, #0
 800df2c:	221a      	movs	r2, #26
 800df2e:	430a      	orrs	r2, r1
 800df30:	705a      	strb	r2, [r3, #1]
      break;
 800df32:	e03f      	b.n	800dfb4 <CAD_StateMachine+0x1d8>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800df34:	f7f9 fd22 	bl	800797c <HAL_GetTick>
 800df38:	0002      	movs	r2, r0
 800df3a:	693b      	ldr	r3, [r7, #16]
 800df3c:	689b      	ldr	r3, [r3, #8]
 800df3e:	1ad3      	subs	r3, r2, r3
 800df40:	2b1a      	cmp	r3, #26
 800df42:	d936      	bls.n	800dfb2 <CAD_StateMachine+0x1d6>
        port source  to src
        port snk     to snk
        port drp     to src   */

#if defined(_SRC) || defined(_DRP)
        if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800df44:	200f      	movs	r0, #15
 800df46:	183b      	adds	r3, r7, r0
 800df48:	781a      	ldrb	r2, [r3, #0]
 800df4a:	491e      	ldr	r1, [pc, #120]	@ (800dfc4 <CAD_StateMachine+0x1e8>)
 800df4c:	0013      	movs	r3, r2
 800df4e:	011b      	lsls	r3, r3, #4
 800df50:	1a9b      	subs	r3, r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	18cb      	adds	r3, r1, r3
 800df56:	3310      	adds	r3, #16
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2204      	movs	r2, #4
 800df5e:	4013      	ands	r3, r2
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b00      	cmp	r3, #0
 800df64:	d005      	beq.n	800df72 <CAD_StateMachine+0x196>
        {
          USBPDM1_AssertRp(PortNum);
 800df66:	183b      	adds	r3, r7, r0
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	0018      	movs	r0, r3
 800df6c:	f001 fff4 	bl	800ff58 <USBPDM1_AssertRp>
 800df70:	e005      	b.n	800df7e <CAD_StateMachine+0x1a2>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 800df72:	230f      	movs	r3, #15
 800df74:	18fb      	adds	r3, r7, r3
 800df76:	781b      	ldrb	r3, [r3, #0]
 800df78:	0018      	movs	r0, r3
 800df7a:	f002 f8af 	bl	80100dc <USBPDM1_AssertRd>
        }
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
 800df7e:	f7f9 fcfd 	bl	800797c <HAL_GetTick>
 800df82:	0002      	movs	r2, r0
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	605a      	str	r2, [r3, #4]
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	785a      	ldrb	r2, [r3, #1]
 800df8c:	213e      	movs	r1, #62	@ 0x3e
 800df8e:	438a      	bics	r2, r1
 800df90:	1c11      	adds	r1, r2, #0
 800df92:	2202      	movs	r2, #2
 800df94:	430a      	orrs	r2, r1
 800df96:	705a      	strb	r2, [r3, #1]
      }
      break;
 800df98:	e00b      	b.n	800dfb2 <CAD_StateMachine+0x1d6>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800df9a:	693b      	ldr	r3, [r7, #16]
 800df9c:	68db      	ldr	r3, [r3, #12]
 800df9e:	687c      	ldr	r4, [r7, #4]
 800dfa0:	68b9      	ldr	r1, [r7, #8]
 800dfa2:	220f      	movs	r2, #15
 800dfa4:	18ba      	adds	r2, r7, r2
 800dfa6:	7810      	ldrb	r0, [r2, #0]
 800dfa8:	0022      	movs	r2, r4
 800dfaa:	4798      	blx	r3
 800dfac:	0003      	movs	r3, r0
 800dfae:	617b      	str	r3, [r7, #20]
      break;
 800dfb0:	e000      	b.n	800dfb4 <CAD_StateMachine+0x1d8>
      break;
 800dfb2:	46c0      	nop			@ (mov r8, r8)
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800dfb4:	697b      	ldr	r3, [r7, #20]
}
 800dfb6:	0018      	movs	r0, r3
 800dfb8:	46bd      	mov	sp, r7
 800dfba:	b007      	add	sp, #28
 800dfbc:	bd90      	pop	{r4, r7, pc}
 800dfbe:	46c0      	nop			@ (mov r8, r8)
 800dfc0:	2000a700 	.word	0x2000a700
 800dfc4:	2000a734 	.word	0x2000a734

0800dfc8 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b086      	sub	sp, #24
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	0002      	movs	r2, r0
 800dfd0:	1dfb      	adds	r3, r7, #7
 800dfd2:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800dfd4:	1dfb      	adds	r3, r7, #7
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	011a      	lsls	r2, r3, #4
 800dfda:	4b45      	ldr	r3, [pc, #276]	@ (800e0f0 <CAD_Check_HW_SNK+0x128>)
 800dfdc:	18d3      	adds	r3, r2, r3
 800dfde:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 800dfe0:	1dfb      	adds	r3, r7, #7
 800dfe2:	781a      	ldrb	r2, [r3, #0]
 800dfe4:	4943      	ldr	r1, [pc, #268]	@ (800e0f4 <CAD_Check_HW_SNK+0x12c>)
 800dfe6:	0013      	movs	r3, r2
 800dfe8:	011b      	lsls	r3, r3, #4
 800dfea:	1a9b      	subs	r3, r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	585b      	ldr	r3, [r3, r1]
 800dff0:	695a      	ldr	r2, [r3, #20]
 800dff2:	23c0      	movs	r3, #192	@ 0xc0
 800dff4:	029b      	lsls	r3, r3, #10
 800dff6:	4013      	ands	r3, r2
 800dff8:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 800dffa:	1dfb      	adds	r3, r7, #7
 800dffc:	781a      	ldrb	r2, [r3, #0]
 800dffe:	493d      	ldr	r1, [pc, #244]	@ (800e0f4 <CAD_Check_HW_SNK+0x12c>)
 800e000:	0013      	movs	r3, r2
 800e002:	011b      	lsls	r3, r3, #4
 800e004:	1a9b      	subs	r3, r3, r2
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	585b      	ldr	r3, [r3, r1]
 800e00a:	695a      	ldr	r2, [r3, #20]
 800e00c:	23c0      	movs	r3, #192	@ 0xc0
 800e00e:	031b      	lsls	r3, r3, #12
 800e010:	4013      	ands	r3, r2
 800e012:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	781a      	ldrb	r2, [r3, #0]
 800e018:	2103      	movs	r1, #3
 800e01a:	438a      	bics	r2, r1
 800e01c:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 800e01e:	697b      	ldr	r3, [r7, #20]
 800e020:	781a      	ldrb	r2, [r3, #0]
 800e022:	211c      	movs	r1, #28
 800e024:	438a      	bics	r2, r1
 800e026:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d02c      	beq.n	800e088 <CAD_Check_HW_SNK+0xc0>
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d129      	bne.n	800e088 <CAD_Check_HW_SNK+0xc0>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	781a      	ldrb	r2, [r3, #0]
 800e038:	211c      	movs	r1, #28
 800e03a:	438a      	bics	r2, r1
 800e03c:	1c11      	adds	r1, r2, #0
 800e03e:	2204      	movs	r2, #4
 800e040:	430a      	orrs	r2, r1
 800e042:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 800e044:	697b      	ldr	r3, [r7, #20]
 800e046:	781a      	ldrb	r2, [r3, #0]
 800e048:	2103      	movs	r1, #3
 800e04a:	438a      	bics	r2, r1
 800e04c:	1c11      	adds	r1, r2, #0
 800e04e:	2201      	movs	r2, #1
 800e050:	430a      	orrs	r2, r1
 800e052:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	0c18      	lsrs	r0, r3, #16
 800e058:	1dfb      	adds	r3, r7, #7
 800e05a:	781a      	ldrb	r2, [r3, #0]
 800e05c:	4925      	ldr	r1, [pc, #148]	@ (800e0f4 <CAD_Check_HW_SNK+0x12c>)
 800e05e:	0013      	movs	r3, r2
 800e060:	011b      	lsls	r3, r3, #4
 800e062:	1a9b      	subs	r3, r3, r2
 800e064:	009b      	lsls	r3, r3, #2
 800e066:	18cb      	adds	r3, r1, r3
 800e068:	3310      	adds	r3, #16
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	1c01      	adds	r1, r0, #0
 800e06e:	2203      	movs	r2, #3
 800e070:	400a      	ands	r2, r1
 800e072:	b2d2      	uxtb	r2, r2
 800e074:	2103      	movs	r1, #3
 800e076:	400a      	ands	r2, r1
 800e078:	0090      	lsls	r0, r2, #2
 800e07a:	789a      	ldrb	r2, [r3, #2]
 800e07c:	210c      	movs	r1, #12
 800e07e:	438a      	bics	r2, r1
 800e080:	1c11      	adds	r1, r2, #0
 800e082:	1c02      	adds	r2, r0, #0
 800e084:	430a      	orrs	r2, r1
 800e086:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d12c      	bne.n	800e0e8 <CAD_Check_HW_SNK+0x120>
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d029      	beq.n	800e0e8 <CAD_Check_HW_SNK+0x120>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 800e094:	697b      	ldr	r3, [r7, #20]
 800e096:	781a      	ldrb	r2, [r3, #0]
 800e098:	211c      	movs	r1, #28
 800e09a:	438a      	bics	r2, r1
 800e09c:	1c11      	adds	r1, r2, #0
 800e09e:	2204      	movs	r2, #4
 800e0a0:	430a      	orrs	r2, r1
 800e0a2:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 800e0a4:	697b      	ldr	r3, [r7, #20]
 800e0a6:	781a      	ldrb	r2, [r3, #0]
 800e0a8:	2103      	movs	r1, #3
 800e0aa:	438a      	bics	r2, r1
 800e0ac:	1c11      	adds	r1, r2, #0
 800e0ae:	2202      	movs	r2, #2
 800e0b0:	430a      	orrs	r2, r1
 800e0b2:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	0c98      	lsrs	r0, r3, #18
 800e0b8:	1dfb      	adds	r3, r7, #7
 800e0ba:	781a      	ldrb	r2, [r3, #0]
 800e0bc:	490d      	ldr	r1, [pc, #52]	@ (800e0f4 <CAD_Check_HW_SNK+0x12c>)
 800e0be:	0013      	movs	r3, r2
 800e0c0:	011b      	lsls	r3, r3, #4
 800e0c2:	1a9b      	subs	r3, r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	18cb      	adds	r3, r1, r3
 800e0c8:	3310      	adds	r3, #16
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	1c01      	adds	r1, r0, #0
 800e0ce:	2203      	movs	r2, #3
 800e0d0:	400a      	ands	r2, r1
 800e0d2:	b2d2      	uxtb	r2, r2
 800e0d4:	2103      	movs	r1, #3
 800e0d6:	400a      	ands	r2, r1
 800e0d8:	0090      	lsls	r0, r2, #2
 800e0da:	789a      	ldrb	r2, [r3, #2]
 800e0dc:	210c      	movs	r1, #12
 800e0de:	438a      	bics	r2, r1
 800e0e0:	1c11      	adds	r1, r2, #0
 800e0e2:	1c02      	adds	r2, r0, #0
 800e0e4:	430a      	orrs	r2, r1
 800e0e6:	709a      	strb	r2, [r3, #2]
  }
}
 800e0e8:	46c0      	nop			@ (mov r8, r8)
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	b006      	add	sp, #24
 800e0ee:	bd80      	pop	{r7, pc}
 800e0f0:	2000a700 	.word	0x2000a700
 800e0f4:	2000a734 	.word	0x2000a734

0800e0f8 <CAD_Check_HW_SRC>:
#endif /* _DRP || _SNK */

#if defined(_DRP) || defined(_SRC)
void CAD_Check_HW_SRC(uint8_t PortNum)
{
 800e0f8:	b5b0      	push	{r4, r5, r7, lr}
 800e0fa:	b094      	sub	sp, #80	@ 0x50
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	0002      	movs	r2, r0
 800e100:	1dfb      	adds	r3, r7, #7
 800e102:	701a      	strb	r2, [r3, #0]
#if !defined(_RTOS)
  uint32_t CC1_value_temp;
  uint32_t CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e104:	1dfb      	adds	r3, r7, #7
 800e106:	781b      	ldrb	r3, [r3, #0]
 800e108:	011a      	lsls	r2, r3, #4
 800e10a:	4b45      	ldr	r3, [pc, #276]	@ (800e220 <CAD_Check_HW_SRC+0x128>)
 800e10c:	18d3      	adds	r3, r2, r3
 800e10e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  -----------------------------------------------------------------------------
  | 1: Sink   |                   |             |xx vRa|vRdUSB| vRd1.5 |vRd3.0|
  -----------------------------------------------------------------------------
  */

  CC1_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800e110:	1dfb      	adds	r3, r7, #7
 800e112:	781a      	ldrb	r2, [r3, #0]
 800e114:	4943      	ldr	r1, [pc, #268]	@ (800e224 <CAD_Check_HW_SRC+0x12c>)
 800e116:	0013      	movs	r3, r2
 800e118:	011b      	lsls	r3, r3, #4
 800e11a:	1a9b      	subs	r3, r3, r2
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	585b      	ldr	r3, [r3, r1]
 800e120:	695b      	ldr	r3, [r3, #20]
 800e122:	0c1b      	lsrs	r3, r3, #16
 800e124:	2203      	movs	r2, #3
 800e126:	4013      	ands	r3, r2
 800e128:	64bb      	str	r3, [r7, #72]	@ 0x48
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 800e12a:	1dfb      	adds	r3, r7, #7
 800e12c:	781a      	ldrb	r2, [r3, #0]
 800e12e:	493d      	ldr	r1, [pc, #244]	@ (800e224 <CAD_Check_HW_SRC+0x12c>)
 800e130:	0013      	movs	r3, r2
 800e132:	011b      	lsls	r3, r3, #4
 800e134:	1a9b      	subs	r3, r3, r2
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	585b      	ldr	r3, [r3, r1]
 800e13a:	695b      	ldr	r3, [r3, #20]
 800e13c:	0c9b      	lsrs	r3, r3, #18
 800e13e:	2203      	movs	r2, #3
 800e140:	4013      	ands	r3, r2
 800e142:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(_RTOS)
  /* Workaround linked to issue with Ellisys test TD.PC.E5
  - it seems that in NRTOS version, we detect a glitch during DRP transition SNK to SRC */
  CC1_value_temp = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800e144:	1dfb      	adds	r3, r7, #7
 800e146:	781a      	ldrb	r2, [r3, #0]
 800e148:	4936      	ldr	r1, [pc, #216]	@ (800e224 <CAD_Check_HW_SRC+0x12c>)
 800e14a:	0013      	movs	r3, r2
 800e14c:	011b      	lsls	r3, r3, #4
 800e14e:	1a9b      	subs	r3, r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	585b      	ldr	r3, [r3, r1]
 800e154:	695b      	ldr	r3, [r3, #20]
 800e156:	0c1b      	lsrs	r3, r3, #16
 800e158:	2203      	movs	r2, #3
 800e15a:	4013      	ands	r3, r2
 800e15c:	643b      	str	r3, [r7, #64]	@ 0x40
  CC2_value_temp = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 800e15e:	1dfb      	adds	r3, r7, #7
 800e160:	781a      	ldrb	r2, [r3, #0]
 800e162:	4930      	ldr	r1, [pc, #192]	@ (800e224 <CAD_Check_HW_SRC+0x12c>)
 800e164:	0013      	movs	r3, r2
 800e166:	011b      	lsls	r3, r3, #4
 800e168:	1a9b      	subs	r3, r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	585b      	ldr	r3, [r3, r1]
 800e16e:	695b      	ldr	r3, [r3, #20]
 800e170:	0c9b      	lsrs	r3, r3, #18
 800e172:	2203      	movs	r2, #3
 800e174:	4013      	ands	r3, r2
 800e176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((CC1_value_temp != CC1_value) || (CC2_value_temp != CC2_value))
 800e178:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e17a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d14b      	bne.n	800e218 <CAD_Check_HW_SRC+0x120>
 800e180:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e184:	429a      	cmp	r2, r3
 800e186:	d147      	bne.n	800e218 <CAD_Check_HW_SRC+0x120>
  {
    return;
  }
#endif /* !_RTOS */

  const CCxPin_TypeDef table_cc[] =
 800e188:	2518      	movs	r5, #24
 800e18a:	197b      	adds	r3, r7, r5
 800e18c:	4a26      	ldr	r2, [pc, #152]	@ (800e228 <CAD_Check_HW_SRC+0x130>)
 800e18e:	ca13      	ldmia	r2!, {r0, r1, r4}
 800e190:	c313      	stmia	r3!, {r0, r1, r4}
 800e192:	ca13      	ldmia	r2!, {r0, r1, r4}
 800e194:	c313      	stmia	r3!, {r0, r1, r4}
 800e196:	ca13      	ldmia	r2!, {r0, r1, r4}
 800e198:	c313      	stmia	r3!, {r0, r1, r4}
    CCNONE,  CC2,       CC2,
    CC1,     CCNONE,   CC1,
    CC1,     CC2,       CCNONE
  };

  const CAD_HW_Condition_TypeDef table_CurrentHWcondition[] =
 800e19a:	240c      	movs	r4, #12
 800e19c:	193b      	adds	r3, r7, r4
 800e19e:	4a23      	ldr	r2, [pc, #140]	@ (800e22c <CAD_Check_HW_SRC+0x134>)
 800e1a0:	ca03      	ldmia	r2!, {r0, r1}
 800e1a2:	c303      	stmia	r3!, {r0, r1}
 800e1a4:	7812      	ldrb	r2, [r2, #0]
 800e1a6:	701a      	strb	r2, [r3, #0]
    HW_AudioAdapter_Attachment,  HW_PwrCable_Sink_Attachment, HW_PwrCable_NoSink_Attachment,
    HW_PwrCable_Sink_Attachment,         HW_Debug_Attachment,                 HW_Attachment,
    HW_PwrCable_NoSink_Attachment,             HW_Attachment,                 HW_Detachment
  };

  if (CC1_value * 3 + CC2_value < 9)
 800e1a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1aa:	0013      	movs	r3, r2
 800e1ac:	005b      	lsls	r3, r3, #1
 800e1ae:	189a      	adds	r2, r3, r2
 800e1b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1b2:	18d3      	adds	r3, r2, r3
 800e1b4:	2b08      	cmp	r3, #8
 800e1b6:	d830      	bhi.n	800e21a <CAD_Check_HW_SRC+0x122>
  {
    _handle->cc  = table_cc[CC1_value * 3 + CC2_value];
 800e1b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1ba:	0013      	movs	r3, r2
 800e1bc:	005b      	lsls	r3, r3, #1
 800e1be:	189a      	adds	r2, r3, r2
 800e1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c2:	18d2      	adds	r2, r2, r3
 800e1c4:	197b      	adds	r3, r7, r5
 800e1c6:	0092      	lsls	r2, r2, #2
 800e1c8:	58d3      	ldr	r3, [r2, r3]
 800e1ca:	1c1a      	adds	r2, r3, #0
 800e1cc:	2303      	movs	r3, #3
 800e1ce:	4013      	ands	r3, r2
 800e1d0:	b2da      	uxtb	r2, r3
 800e1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1d4:	2103      	movs	r1, #3
 800e1d6:	400a      	ands	r2, r1
 800e1d8:	0010      	movs	r0, r2
 800e1da:	781a      	ldrb	r2, [r3, #0]
 800e1dc:	2103      	movs	r1, #3
 800e1de:	438a      	bics	r2, r1
 800e1e0:	1c11      	adds	r1, r2, #0
 800e1e2:	1c02      	adds	r2, r0, #0
 800e1e4:	430a      	orrs	r2, r1
 800e1e6:	701a      	strb	r2, [r3, #0]
    _handle->CurrentHWcondition     = table_CurrentHWcondition[CC1_value * 3 + CC2_value];
 800e1e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1ea:	0013      	movs	r3, r2
 800e1ec:	005b      	lsls	r3, r3, #1
 800e1ee:	189a      	adds	r2, r3, r2
 800e1f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1f2:	18d3      	adds	r3, r2, r3
 800e1f4:	193a      	adds	r2, r7, r4
 800e1f6:	5cd3      	ldrb	r3, [r2, r3]
 800e1f8:	1c1a      	adds	r2, r3, #0
 800e1fa:	2307      	movs	r3, #7
 800e1fc:	4013      	ands	r3, r2
 800e1fe:	b2da      	uxtb	r2, r3
 800e200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e202:	2107      	movs	r1, #7
 800e204:	400a      	ands	r2, r1
 800e206:	0090      	lsls	r0, r2, #2
 800e208:	781a      	ldrb	r2, [r3, #0]
 800e20a:	211c      	movs	r1, #28
 800e20c:	438a      	bics	r2, r1
 800e20e:	1c11      	adds	r1, r2, #0
 800e210:	1c02      	adds	r2, r0, #0
 800e212:	430a      	orrs	r2, r1
 800e214:	701a      	strb	r2, [r3, #0]
 800e216:	e000      	b.n	800e21a <CAD_Check_HW_SRC+0x122>
    return;
 800e218:	46c0      	nop			@ (mov r8, r8)
  }
}
 800e21a:	46bd      	mov	sp, r7
 800e21c:	b014      	add	sp, #80	@ 0x50
 800e21e:	bdb0      	pop	{r4, r5, r7, pc}
 800e220:	2000a700 	.word	0x2000a700
 800e224:	2000a734 	.word	0x2000a734
 800e228:	080166e4 	.word	0x080166e4
 800e22c:	08016708 	.word	0x08016708

0800e230 <ManageStateDetached_SNK>:
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b084      	sub	sp, #16
 800e234:	af00      	add	r7, sp, #0
 800e236:	0002      	movs	r2, r0
 800e238:	1dfb      	adds	r3, r7, #7
 800e23a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e23c:	1dfb      	adds	r3, r7, #7
 800e23e:	781b      	ldrb	r3, [r3, #0]
 800e240:	011a      	lsls	r2, r3, #4
 800e242:	4b22      	ldr	r3, [pc, #136]	@ (800e2cc <ManageStateDetached_SNK+0x9c>)
 800e244:	18d3      	adds	r3, r2, r3
 800e246:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800e248:	2302      	movs	r3, #2
 800e24a:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 800e24c:	1dfb      	adds	r3, r7, #7
 800e24e:	781b      	ldrb	r3, [r3, #0]
 800e250:	0018      	movs	r0, r3
 800e252:	f7ff feb9 	bl	800dfc8 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	221c      	movs	r2, #28
 800e25c:	4013      	ands	r3, r2
 800e25e:	b2db      	uxtb	r3, r3
 800e260:	2b00      	cmp	r3, #0
 800e262:	d103      	bne.n	800e26c <ManageStateDetached_SNK+0x3c>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800e264:	2301      	movs	r3, #1
 800e266:	425b      	negs	r3, r3
 800e268:	60fb      	str	r3, [r7, #12]
 800e26a:	e029      	b.n	800e2c0 <ManageStateDetached_SNK+0x90>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 800e26c:	f7f9 fb86 	bl	800797c <HAL_GetTick>
 800e270:	0002      	movs	r2, r0
 800e272:	68bb      	ldr	r3, [r7, #8]
 800e274:	609a      	str	r2, [r3, #8]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	785a      	ldrb	r2, [r3, #1]
 800e27a:	213e      	movs	r1, #62	@ 0x3e
 800e27c:	438a      	bics	r2, r1
 800e27e:	1c11      	adds	r1, r2, #0
 800e280:	2204      	movs	r2, #4
 800e282:	430a      	orrs	r2, r1
 800e284:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 800e286:	2001      	movs	r0, #1
 800e288:	f7f9 fb82 	bl	8007990 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 800e28c:	1dfb      	adds	r3, r7, #7
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	0018      	movs	r0, r3
 800e292:	f7ff fe99 	bl	800dfc8 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	221c      	movs	r2, #28
 800e29c:	4013      	ands	r3, r2
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d108      	bne.n	800e2b6 <ManageStateDetached_SNK+0x86>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800e2a4:	68bb      	ldr	r3, [r7, #8]
 800e2a6:	785a      	ldrb	r2, [r3, #1]
 800e2a8:	213e      	movs	r1, #62	@ 0x3e
 800e2aa:	438a      	bics	r2, r1
 800e2ac:	1c11      	adds	r1, r2, #0
 800e2ae:	2202      	movs	r2, #2
 800e2b0:	430a      	orrs	r2, r1
 800e2b2:	705a      	strb	r2, [r3, #1]
 800e2b4:	e004      	b.n	800e2c0 <ManageStateDetached_SNK+0x90>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800e2b6:	1dfb      	adds	r3, r7, #7
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	0018      	movs	r0, r3
 800e2bc:	f008 f87c 	bl	80163b8 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
}
 800e2c2:	0018      	movs	r0, r3
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	b004      	add	sp, #16
 800e2c8:	bd80      	pop	{r7, pc}
 800e2ca:	46c0      	nop			@ (mov r8, r8)
 800e2cc:	2000a700 	.word	0x2000a700

0800e2d0 <ManageStateDetached_SRC>:
#endif /* _DRP || _SNK */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateDetached_SRC(uint8_t PortNum)
{
 800e2d0:	b580      	push	{r7, lr}
 800e2d2:	b084      	sub	sp, #16
 800e2d4:	af00      	add	r7, sp, #0
 800e2d6:	0002      	movs	r2, r0
 800e2d8:	1dfb      	adds	r3, r7, #7
 800e2da:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e2dc:	1dfb      	adds	r3, r7, #7
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	011a      	lsls	r2, r3, #4
 800e2e2:	4b28      	ldr	r3, [pc, #160]	@ (800e384 <ManageStateDetached_SRC+0xb4>)
 800e2e4:	18d3      	adds	r3, r2, r3
 800e2e6:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800e2e8:	2302      	movs	r3, #2
 800e2ea:	60fb      	str	r3, [r7, #12]

  if (_handle->CAD_ResistorUpdateflag == USBPD_TRUE)
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	785b      	ldrb	r3, [r3, #1]
 800e2f0:	2201      	movs	r2, #1
 800e2f2:	4013      	ands	r3, r2
 800e2f4:	b2db      	uxtb	r3, r3
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d00c      	beq.n	800e314 <ManageStateDetached_SRC+0x44>
  {
    /* update the resistor value */
    USBPDM1_AssertRp(PortNum);
 800e2fa:	1dfb      	adds	r3, r7, #7
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	0018      	movs	r0, r3
 800e300:	f001 fe2a 	bl	800ff58 <USBPDM1_AssertRp>
    _handle->CAD_ResistorUpdateflag = USBPD_FALSE;
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	785a      	ldrb	r2, [r3, #1]
 800e308:	2101      	movs	r1, #1
 800e30a:	438a      	bics	r2, r1
 800e30c:	705a      	strb	r2, [r3, #1]

    /* let time to internal state machine update */
    HAL_Delay(1);
 800e30e:	2001      	movs	r0, #1
 800e310:	f7f9 fb3e 	bl	8007990 <HAL_Delay>
  }

  CAD_Check_HW_SRC(PortNum);
 800e314:	1dfb      	adds	r3, r7, #7
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	0018      	movs	r0, r3
 800e31a:	f7ff feed 	bl	800e0f8 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	221c      	movs	r2, #28
 800e324:	4013      	ands	r3, r2
 800e326:	b2db      	uxtb	r3, r3
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d103      	bne.n	800e334 <ManageStateDetached_SRC+0x64>
  {
#ifdef _LOW_POWER
    /* value returned for a SRC */
    _timing = CAD_DETACH_POLLING;
#else
    _timing = CAD_INFINITE_TIME;
 800e32c:	2301      	movs	r3, #1
 800e32e:	425b      	negs	r3, r3
 800e330:	60fb      	str	r3, [r7, #12]
 800e332:	e021      	b.n	800e378 <ManageStateDetached_SRC+0xa8>
#endif /* _LOW_POWER */
  }
  else
  {
    if (_handle->CurrentHWcondition == HW_PwrCable_NoSink_Attachment)
 800e334:	68bb      	ldr	r3, [r7, #8]
 800e336:	781b      	ldrb	r3, [r3, #0]
 800e338:	221c      	movs	r2, #28
 800e33a:	4013      	ands	r3, r2
 800e33c:	b2db      	uxtb	r3, r3
 800e33e:	2b08      	cmp	r3, #8
 800e340:	d108      	bne.n	800e354 <ManageStateDetached_SRC+0x84>
    {
      _handle->cstate = USBPD_CAD_STATE_EMC;
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	785a      	ldrb	r2, [r3, #1]
 800e346:	213e      	movs	r1, #62	@ 0x3e
 800e348:	438a      	bics	r2, r1
 800e34a:	1c11      	adds	r1, r2, #0
 800e34c:	2208      	movs	r2, #8
 800e34e:	430a      	orrs	r2, r1
 800e350:	705a      	strb	r2, [r3, #1]
 800e352:	e011      	b.n	800e378 <ManageStateDetached_SRC+0xa8>
    }
    else
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800e354:	f7f9 fb12 	bl	800797c <HAL_GetTick>
 800e358:	0002      	movs	r2, r0
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	609a      	str	r2, [r3, #8]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	785a      	ldrb	r2, [r3, #1]
 800e362:	213e      	movs	r1, #62	@ 0x3e
 800e364:	438a      	bics	r2, r1
 800e366:	1c11      	adds	r1, r2, #0
 800e368:	2204      	movs	r2, #4
 800e36a:	430a      	orrs	r2, r1
 800e36c:	705a      	strb	r2, [r3, #1]

      BSP_USBPD_PWR_VBUSInit(PortNum);
 800e36e:	1dfb      	adds	r3, r7, #7
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	0018      	movs	r0, r3
 800e374:	f008 f820 	bl	80163b8 <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800e378:	68fb      	ldr	r3, [r7, #12]
}
 800e37a:	0018      	movs	r0, r3
 800e37c:	46bd      	mov	sp, r7
 800e37e:	b004      	add	sp, #16
 800e380:	bd80      	pop	{r7, pc}
 800e382:	46c0      	nop			@ (mov r8, r8)
 800e384:	2000a700 	.word	0x2000a700

0800e388 <ManageStateDetached_DRP>:
#endif /* _SRC || _DRP */

#if defined(_DRP)
static uint32_t ManageStateDetached_DRP(uint8_t PortNum)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b084      	sub	sp, #16
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	0002      	movs	r2, r0
 800e390:	1dfb      	adds	r3, r7, #7
 800e392:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e394:	1dfb      	adds	r3, r7, #7
 800e396:	781b      	ldrb	r3, [r3, #0]
 800e398:	011a      	lsls	r2, r3, #4
 800e39a:	4b68      	ldr	r3, [pc, #416]	@ (800e53c <ManageStateDetached_DRP+0x1b4>)
 800e39c:	18d3      	adds	r3, r2, r3
 800e39e:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800e3a0:	2302      	movs	r3, #2
 800e3a2:	60fb      	str	r3, [r7, #12]

  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800e3a4:	1dfb      	adds	r3, r7, #7
 800e3a6:	781a      	ldrb	r2, [r3, #0]
 800e3a8:	4965      	ldr	r1, [pc, #404]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e3aa:	0013      	movs	r3, r2
 800e3ac:	011b      	lsls	r3, r3, #4
 800e3ae:	1a9b      	subs	r3, r3, r2
 800e3b0:	009b      	lsls	r3, r3, #2
 800e3b2:	18cb      	adds	r3, r1, r3
 800e3b4:	3310      	adds	r3, #16
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	2204      	movs	r2, #4
 800e3bc:	4013      	ands	r3, r2
 800e3be:	b2db      	uxtb	r3, r3
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d005      	beq.n	800e3d0 <ManageStateDetached_DRP+0x48>
  {
    ManageStateDetached_SRC(PortNum);
 800e3c4:	1dfb      	adds	r3, r7, #7
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	f7ff ff81 	bl	800e2d0 <ManageStateDetached_SRC>
 800e3ce:	e004      	b.n	800e3da <ManageStateDetached_DRP+0x52>
  }
  else
  {
    ManageStateDetached_SNK(PortNum);
 800e3d0:	1dfb      	adds	r3, r7, #7
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	0018      	movs	r0, r3
 800e3d6:	f7ff ff2b 	bl	800e230 <ManageStateDetached_SNK>
  }

  /* Manage the toggle */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	781b      	ldrb	r3, [r3, #0]
 800e3de:	221c      	movs	r2, #28
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	b2db      	uxtb	r3, r3
 800e3e4:	2b00      	cmp	r3, #0
 800e3e6:	d000      	beq.n	800e3ea <ManageStateDetached_DRP+0x62>
 800e3e8:	e0a3      	b.n	800e532 <ManageStateDetached_DRP+0x1aa>
  {
    switch (Ports[PortNum].params->PE_PowerRole)
 800e3ea:	1dfb      	adds	r3, r7, #7
 800e3ec:	781a      	ldrb	r2, [r3, #0]
 800e3ee:	4954      	ldr	r1, [pc, #336]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e3f0:	0013      	movs	r3, r2
 800e3f2:	011b      	lsls	r3, r3, #4
 800e3f4:	1a9b      	subs	r3, r3, r2
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	18cb      	adds	r3, r1, r3
 800e3fa:	3310      	adds	r3, #16
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	075b      	lsls	r3, r3, #29
 800e402:	0fdb      	lsrs	r3, r3, #31
 800e404:	b2db      	uxtb	r3, r3
 800e406:	2b00      	cmp	r3, #0
 800e408:	d048      	beq.n	800e49c <ManageStateDetached_DRP+0x114>
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d000      	beq.n	800e410 <ManageStateDetached_DRP+0x88>
 800e40e:	e08b      	b.n	800e528 <ManageStateDetached_DRP+0x1a0>
    {
      case USBPD_PORTPOWERROLE_SRC :
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SRCToggleTime)
 800e410:	f7f9 fab4 	bl	800797c <HAL_GetTick>
 800e414:	0002      	movs	r2, r0
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	685b      	ldr	r3, [r3, #4]
 800e41a:	1ad1      	subs	r1, r2, r3
 800e41c:	1dfb      	adds	r3, r7, #7
 800e41e:	781a      	ldrb	r2, [r3, #0]
 800e420:	4847      	ldr	r0, [pc, #284]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e422:	0013      	movs	r3, r2
 800e424:	011b      	lsls	r3, r3, #4
 800e426:	1a9b      	subs	r3, r3, r2
 800e428:	009b      	lsls	r3, r3, #2
 800e42a:	18c3      	adds	r3, r0, r3
 800e42c:	330c      	adds	r3, #12
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	79db      	ldrb	r3, [r3, #7]
 800e432:	4299      	cmp	r1, r3
 800e434:	d97a      	bls.n	800e52c <ManageStateDetached_DRP+0x1a4>
        {
          _handle->CAD_tToggle_start = HAL_GetTick();
 800e436:	f7f9 faa1 	bl	800797c <HAL_GetTick>
 800e43a:	0002      	movs	r2, r0
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	605a      	str	r2, [r3, #4]
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 800e440:	1dfb      	adds	r3, r7, #7
 800e442:	781a      	ldrb	r2, [r3, #0]
 800e444:	493e      	ldr	r1, [pc, #248]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e446:	0013      	movs	r3, r2
 800e448:	011b      	lsls	r3, r3, #4
 800e44a:	1a9b      	subs	r3, r3, r2
 800e44c:	009b      	lsls	r3, r3, #2
 800e44e:	18cb      	adds	r3, r1, r3
 800e450:	3310      	adds	r3, #16
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	781a      	ldrb	r2, [r3, #0]
 800e456:	2104      	movs	r1, #4
 800e458:	438a      	bics	r2, r1
 800e45a:	701a      	strb	r2, [r3, #0]
          Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_UFP;
 800e45c:	1dfb      	adds	r3, r7, #7
 800e45e:	781a      	ldrb	r2, [r3, #0]
 800e460:	4937      	ldr	r1, [pc, #220]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e462:	0013      	movs	r3, r2
 800e464:	011b      	lsls	r3, r3, #4
 800e466:	1a9b      	subs	r3, r3, r2
 800e468:	009b      	lsls	r3, r3, #2
 800e46a:	18cb      	adds	r3, r1, r3
 800e46c:	3310      	adds	r3, #16
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	781a      	ldrb	r2, [r3, #0]
 800e472:	2108      	movs	r1, #8
 800e474:	438a      	bics	r2, r1
 800e476:	701a      	strb	r2, [r3, #0]
          _timing = Ports[PortNum].settings->CAD_SNKToggleTime;
 800e478:	1dfb      	adds	r3, r7, #7
 800e47a:	781a      	ldrb	r2, [r3, #0]
 800e47c:	4930      	ldr	r1, [pc, #192]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e47e:	0013      	movs	r3, r2
 800e480:	011b      	lsls	r3, r3, #4
 800e482:	1a9b      	subs	r3, r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	18cb      	adds	r3, r1, r3
 800e488:	330c      	adds	r3, #12
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	799b      	ldrb	r3, [r3, #6]
 800e48e:	60fb      	str	r3, [r7, #12]
          USBPDM1_AssertRd(PortNum);
 800e490:	1dfb      	adds	r3, r7, #7
 800e492:	781b      	ldrb	r3, [r3, #0]
 800e494:	0018      	movs	r0, r3
 800e496:	f001 fe21 	bl	80100dc <USBPDM1_AssertRd>
        }
        break;
 800e49a:	e047      	b.n	800e52c <ManageStateDetached_DRP+0x1a4>
      case USBPD_PORTPOWERROLE_SNK :
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SNKToggleTime)
 800e49c:	f7f9 fa6e 	bl	800797c <HAL_GetTick>
 800e4a0:	0002      	movs	r2, r0
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	685b      	ldr	r3, [r3, #4]
 800e4a6:	1ad1      	subs	r1, r2, r3
 800e4a8:	1dfb      	adds	r3, r7, #7
 800e4aa:	781a      	ldrb	r2, [r3, #0]
 800e4ac:	4824      	ldr	r0, [pc, #144]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e4ae:	0013      	movs	r3, r2
 800e4b0:	011b      	lsls	r3, r3, #4
 800e4b2:	1a9b      	subs	r3, r3, r2
 800e4b4:	009b      	lsls	r3, r3, #2
 800e4b6:	18c3      	adds	r3, r0, r3
 800e4b8:	330c      	adds	r3, #12
 800e4ba:	681b      	ldr	r3, [r3, #0]
 800e4bc:	799b      	ldrb	r3, [r3, #6]
 800e4be:	4299      	cmp	r1, r3
 800e4c0:	d936      	bls.n	800e530 <ManageStateDetached_DRP+0x1a8>
        {
          _handle->CAD_tToggle_start = HAL_GetTick();
 800e4c2:	f7f9 fa5b 	bl	800797c <HAL_GetTick>
 800e4c6:	0002      	movs	r2, r0
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	605a      	str	r2, [r3, #4]
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SRC;
 800e4cc:	1dfb      	adds	r3, r7, #7
 800e4ce:	781a      	ldrb	r2, [r3, #0]
 800e4d0:	491b      	ldr	r1, [pc, #108]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e4d2:	0013      	movs	r3, r2
 800e4d4:	011b      	lsls	r3, r3, #4
 800e4d6:	1a9b      	subs	r3, r3, r2
 800e4d8:	009b      	lsls	r3, r3, #2
 800e4da:	18cb      	adds	r3, r1, r3
 800e4dc:	3310      	adds	r3, #16
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	781a      	ldrb	r2, [r3, #0]
 800e4e2:	2104      	movs	r1, #4
 800e4e4:	430a      	orrs	r2, r1
 800e4e6:	701a      	strb	r2, [r3, #0]
          Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_DFP;
 800e4e8:	1dfb      	adds	r3, r7, #7
 800e4ea:	781a      	ldrb	r2, [r3, #0]
 800e4ec:	4914      	ldr	r1, [pc, #80]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e4ee:	0013      	movs	r3, r2
 800e4f0:	011b      	lsls	r3, r3, #4
 800e4f2:	1a9b      	subs	r3, r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	18cb      	adds	r3, r1, r3
 800e4f8:	3310      	adds	r3, #16
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	781a      	ldrb	r2, [r3, #0]
 800e4fe:	2108      	movs	r1, #8
 800e500:	430a      	orrs	r2, r1
 800e502:	701a      	strb	r2, [r3, #0]
          _timing = Ports[PortNum].settings->CAD_SRCToggleTime;
 800e504:	1dfb      	adds	r3, r7, #7
 800e506:	781a      	ldrb	r2, [r3, #0]
 800e508:	490d      	ldr	r1, [pc, #52]	@ (800e540 <ManageStateDetached_DRP+0x1b8>)
 800e50a:	0013      	movs	r3, r2
 800e50c:	011b      	lsls	r3, r3, #4
 800e50e:	1a9b      	subs	r3, r3, r2
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	18cb      	adds	r3, r1, r3
 800e514:	330c      	adds	r3, #12
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	79db      	ldrb	r3, [r3, #7]
 800e51a:	60fb      	str	r3, [r7, #12]
          USBPDM1_AssertRp(PortNum);
 800e51c:	1dfb      	adds	r3, r7, #7
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	0018      	movs	r0, r3
 800e522:	f001 fd19 	bl	800ff58 <USBPDM1_AssertRp>
        }
        break;
 800e526:	e003      	b.n	800e530 <ManageStateDetached_DRP+0x1a8>
      default:
        break;
 800e528:	46c0      	nop			@ (mov r8, r8)
 800e52a:	e002      	b.n	800e532 <ManageStateDetached_DRP+0x1aa>
        break;
 800e52c:	46c0      	nop			@ (mov r8, r8)
 800e52e:	e000      	b.n	800e532 <ManageStateDetached_DRP+0x1aa>
        break;
 800e530:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return _timing;
 800e532:	68fb      	ldr	r3, [r7, #12]
}
 800e534:	0018      	movs	r0, r3
 800e536:	46bd      	mov	sp, r7
 800e538:	b004      	add	sp, #16
 800e53a:	bd80      	pop	{r7, pc}
 800e53c:	2000a700 	.word	0x2000a700
 800e540:	2000a734 	.word	0x2000a734

0800e544 <ManageStateAttachedWait_SRC>:
#endif /* _DRP */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateAttachedWait_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800e544:	b590      	push	{r4, r7, lr}
 800e546:	b089      	sub	sp, #36	@ 0x24
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60b9      	str	r1, [r7, #8]
 800e54c:	607a      	str	r2, [r7, #4]
 800e54e:	240f      	movs	r4, #15
 800e550:	193b      	adds	r3, r7, r4
 800e552:	1c02      	adds	r2, r0, #0
 800e554:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e556:	193b      	adds	r3, r7, r4
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	011a      	lsls	r2, r3, #4
 800e55c:	4b6f      	ldr	r3, [pc, #444]	@ (800e71c <ManageStateAttachedWait_SRC+0x1d8>)
 800e55e:	18d3      	adds	r3, r2, r3
 800e560:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = 2;
 800e562:	2302      	movs	r3, #2
 800e564:	61fb      	str	r3, [r7, #28]

  /* Evaluate elapsed time in Attach_Wait state */
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800e566:	f7f9 fa09 	bl	800797c <HAL_GetTick>
 800e56a:	0002      	movs	r2, r0
 800e56c:	69bb      	ldr	r3, [r7, #24]
 800e56e:	689b      	ldr	r3, [r3, #8]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SRC(PortNum);
 800e574:	193b      	adds	r3, r7, r4
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	0018      	movs	r0, r3
 800e57a:	f7ff fdbd 	bl	800e0f8 <CAD_Check_HW_SRC>

  if ((_handle->CurrentHWcondition != HW_Detachment) && (_handle->CurrentHWcondition != HW_PwrCable_NoSink_Attachment))
 800e57e:	69bb      	ldr	r3, [r7, #24]
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	221c      	movs	r2, #28
 800e584:	4013      	ands	r3, r2
 800e586:	b2db      	uxtb	r3, r3
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d100      	bne.n	800e58e <ManageStateAttachedWait_SRC+0x4a>
 800e58c:	e094      	b.n	800e6b8 <ManageStateAttachedWait_SRC+0x174>
 800e58e:	69bb      	ldr	r3, [r7, #24]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	221c      	movs	r2, #28
 800e594:	4013      	ands	r3, r2
 800e596:	b2db      	uxtb	r3, r3
 800e598:	2b08      	cmp	r3, #8
 800e59a:	d100      	bne.n	800e59e <ManageStateAttachedWait_SRC+0x5a>
 800e59c:	e08c      	b.n	800e6b8 <ManageStateAttachedWait_SRC+0x174>
  {
    if (USBPD_FALSE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_BELOWVSAFE0V))
 800e59e:	193b      	adds	r3, r7, r4
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	2100      	movs	r1, #0
 800e5a4:	0018      	movs	r0, r3
 800e5a6:	f007 fd69 	bl	801607c <USBPD_PWR_IF_GetVBUSStatus>
 800e5aa:	1e03      	subs	r3, r0, #0
 800e5ac:	d106      	bne.n	800e5bc <ManageStateAttachedWait_SRC+0x78>
    {
      /* reset the timing because VBUS threshold not yet reach */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800e5ae:	f7f9 f9e5 	bl	800797c <HAL_GetTick>
 800e5b2:	0002      	movs	r2, r0
 800e5b4:	69bb      	ldr	r3, [r7, #24]
 800e5b6:	609a      	str	r2, [r3, #8]
      return CAD_TCCDEBOUCE_THRESHOLD;
 800e5b8:	2378      	movs	r3, #120	@ 0x78
 800e5ba:	e0ab      	b.n	800e714 <ManageStateAttachedWait_SRC+0x1d0>
    }

    /* Check tCCDebounce */
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800e5bc:	697b      	ldr	r3, [r7, #20]
 800e5be:	2b78      	cmp	r3, #120	@ 0x78
 800e5c0:	d800      	bhi.n	800e5c4 <ManageStateAttachedWait_SRC+0x80>
 800e5c2:	e073      	b.n	800e6ac <ManageStateAttachedWait_SRC+0x168>
    {
      switch (_handle->CurrentHWcondition)
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	06db      	lsls	r3, r3, #27
 800e5ca:	0f5b      	lsrs	r3, r3, #29
 800e5cc:	b2db      	uxtb	r3, r3
 800e5ce:	2b03      	cmp	r3, #3
 800e5d0:	d026      	beq.n	800e620 <ManageStateAttachedWait_SRC+0xdc>
 800e5d2:	dc58      	bgt.n	800e686 <ManageStateAttachedWait_SRC+0x142>
 800e5d4:	2b01      	cmp	r3, #1
 800e5d6:	d002      	beq.n	800e5de <ManageStateAttachedWait_SRC+0x9a>
 800e5d8:	2b02      	cmp	r3, #2
 800e5da:	d03a      	beq.n	800e652 <ManageStateAttachedWait_SRC+0x10e>
 800e5dc:	e053      	b.n	800e686 <ManageStateAttachedWait_SRC+0x142>
      {
        case HW_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 800e5de:	69bb      	ldr	r3, [r7, #24]
 800e5e0:	781b      	ldrb	r3, [r3, #0]
 800e5e2:	079b      	lsls	r3, r3, #30
 800e5e4:	0f9b      	lsrs	r3, r3, #30
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	001a      	movs	r2, r3
 800e5ea:	230f      	movs	r3, #15
 800e5ec:	18fb      	adds	r3, r7, r3
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	0011      	movs	r1, r2
 800e5f2:	0018      	movs	r0, r3
 800e5f4:	f001 fec4 	bl	8010380 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800e5f8:	69bb      	ldr	r3, [r7, #24]
 800e5fa:	785a      	ldrb	r2, [r3, #1]
 800e5fc:	213e      	movs	r1, #62	@ 0x3e
 800e5fe:	438a      	bics	r2, r1
 800e600:	1c11      	adds	r1, r2, #0
 800e602:	2206      	movs	r2, #6
 800e604:	430a      	orrs	r2, r1
 800e606:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	2202      	movs	r2, #2
 800e60c:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	781b      	ldrb	r3, [r3, #0]
 800e612:	079b      	lsls	r3, r3, #30
 800e614:	0f9b      	lsrs	r3, r3, #30
 800e616:	b2db      	uxtb	r3, r3
 800e618:	001a      	movs	r2, r3
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	601a      	str	r2, [r3, #0]
          break;
 800e61e:	e03b      	b.n	800e698 <ManageStateAttachedWait_SRC+0x154>

        case HW_PwrCable_Sink_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	079b      	lsls	r3, r3, #30
 800e626:	0f9b      	lsrs	r3, r3, #30
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	001a      	movs	r2, r3
 800e62c:	230f      	movs	r3, #15
 800e62e:	18fb      	adds	r3, r7, r3
 800e630:	781b      	ldrb	r3, [r3, #0]
 800e632:	0011      	movs	r1, r2
 800e634:	0018      	movs	r0, r3
 800e636:	f001 fea3 	bl	8010380 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTEMC;
 800e63a:	69bb      	ldr	r3, [r7, #24]
 800e63c:	785a      	ldrb	r2, [r3, #1]
 800e63e:	213e      	movs	r1, #62	@ 0x3e
 800e640:	438a      	bics	r2, r1
 800e642:	1c11      	adds	r1, r2, #0
 800e644:	220a      	movs	r2, #10
 800e646:	430a      	orrs	r2, r1
 800e648:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_ATTEMC;
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2204      	movs	r2, #4
 800e64e:	701a      	strb	r2, [r3, #0]
          break;
 800e650:	e022      	b.n	800e698 <ManageStateAttachedWait_SRC+0x154>

        case HW_PwrCable_NoSink_Attachment:
          BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800e652:	230f      	movs	r3, #15
 800e654:	18fb      	adds	r3, r7, r3
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	0018      	movs	r0, r3
 800e65a:	f007 febe 	bl	80163da <BSP_USBPD_PWR_VBUSDeInit>
          _handle->cstate = USBPD_CAD_STATE_EMC;
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	785a      	ldrb	r2, [r3, #1]
 800e662:	213e      	movs	r1, #62	@ 0x3e
 800e664:	438a      	bics	r2, r1
 800e666:	1c11      	adds	r1, r2, #0
 800e668:	2208      	movs	r2, #8
 800e66a:	430a      	orrs	r2, r1
 800e66c:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_EMC;
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	2203      	movs	r2, #3
 800e672:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	781b      	ldrb	r3, [r3, #0]
 800e678:	079b      	lsls	r3, r3, #30
 800e67a:	0f9b      	lsrs	r3, r3, #30
 800e67c:	b2db      	uxtb	r3, r3
 800e67e:	001a      	movs	r2, r3
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	601a      	str	r2, [r3, #0]
          break;
 800e684:	e008      	b.n	800e698 <ManageStateAttachedWait_SRC+0x154>
#endif /* _ACCESSORY_SRC */

        case HW_Detachment:
        default:
#if !defined(_ACCESSORY_SRC)
          _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800e686:	69bb      	ldr	r3, [r7, #24]
 800e688:	785a      	ldrb	r2, [r3, #1]
 800e68a:	213e      	movs	r1, #62	@ 0x3e
 800e68c:	438a      	bics	r2, r1
 800e68e:	1c11      	adds	r1, r2, #0
 800e690:	2216      	movs	r2, #22
 800e692:	430a      	orrs	r2, r1
 800e694:	705a      	strb	r2, [r3, #1]
#endif /* _ACCESSORY_SRC */
          break;
 800e696:	46c0      	nop			@ (mov r8, r8)
      } /* end of switch */
      *pCCXX = _handle->cc;
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	781b      	ldrb	r3, [r3, #0]
 800e69c:	079b      	lsls	r3, r3, #30
 800e69e:	0f9b      	lsrs	r3, r3, #30
 800e6a0:	b2db      	uxtb	r3, r3
 800e6a2:	001a      	movs	r2, r3
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	601a      	str	r2, [r3, #0]
      _timing = 2;
 800e6a8:	2302      	movs	r3, #2
 800e6aa:	61fb      	str	r3, [r7, #28]
    }
    /* reset the flag for CAD_tDebounce */
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800e6ac:	69bb      	ldr	r3, [r7, #24]
 800e6ae:	781a      	ldrb	r2, [r3, #0]
 800e6b0:	2120      	movs	r1, #32
 800e6b2:	438a      	bics	r2, r1
 800e6b4:	701a      	strb	r2, [r3, #0]
 800e6b6:	e02c      	b.n	800e712 <ManageStateAttachedWait_SRC+0x1ce>
  }
  else /* CAD_HW_Condition[PortNum] = HW_Detachment */
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800e6b8:	69bb      	ldr	r3, [r7, #24]
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	2220      	movs	r2, #32
 800e6be:	4013      	ands	r3, r2
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d10c      	bne.n	800e6e0 <ManageStateAttachedWait_SRC+0x19c>
    {
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 800e6c6:	f7f9 f959 	bl	800797c <HAL_GetTick>
 800e6ca:	0002      	movs	r2, r0
 800e6cc:	69bb      	ldr	r3, [r7, #24]
 800e6ce:	609a      	str	r2, [r3, #8]
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 800e6d0:	69bb      	ldr	r3, [r7, #24]
 800e6d2:	781a      	ldrb	r2, [r3, #0]
 800e6d4:	2120      	movs	r1, #32
 800e6d6:	430a      	orrs	r2, r1
 800e6d8:	701a      	strb	r2, [r3, #0]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 800e6da:	2302      	movs	r3, #2
 800e6dc:	61fb      	str	r3, [r7, #28]
 800e6de:	e018      	b.n	800e712 <ManageStateAttachedWait_SRC+0x1ce>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800e6e0:	f7f9 f94c 	bl	800797c <HAL_GetTick>
 800e6e4:	0002      	movs	r2, r0
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	2b02      	cmp	r3, #2
 800e6f2:	d90e      	bls.n	800e712 <ManageStateAttachedWait_SRC+0x1ce>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	781a      	ldrb	r2, [r3, #0]
 800e6f8:	2120      	movs	r1, #32
 800e6fa:	438a      	bics	r2, r1
 800e6fc:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800e6fe:	69bb      	ldr	r3, [r7, #24]
 800e700:	785a      	ldrb	r2, [r3, #1]
 800e702:	213e      	movs	r1, #62	@ 0x3e
 800e704:	438a      	bics	r2, r1
 800e706:	1c11      	adds	r1, r2, #0
 800e708:	2216      	movs	r2, #22
 800e70a:	430a      	orrs	r2, r1
 800e70c:	705a      	strb	r2, [r3, #1]
        _timing = 0;
 800e70e:	2300      	movs	r3, #0
 800e710:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return _timing;
 800e712:	69fb      	ldr	r3, [r7, #28]
}
 800e714:	0018      	movs	r0, r3
 800e716:	46bd      	mov	sp, r7
 800e718:	b009      	add	sp, #36	@ 0x24
 800e71a:	bd90      	pop	{r4, r7, pc}
 800e71c:	2000a700 	.word	0x2000a700

0800e720 <ManageStateEMC>:
#endif /* _DRP || _SRC || (_ACCESSORY && _SNK) */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateEMC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800e720:	b590      	push	{r4, r7, lr}
 800e722:	b087      	sub	sp, #28
 800e724:	af00      	add	r7, sp, #0
 800e726:	60b9      	str	r1, [r7, #8]
 800e728:	607a      	str	r2, [r7, #4]
 800e72a:	210f      	movs	r1, #15
 800e72c:	187b      	adds	r3, r7, r1
 800e72e:	1c02      	adds	r2, r0, #0
 800e730:	701a      	strb	r2, [r3, #0]
  uint32_t _timing = CAD_INFINITE_TIME;
 800e732:	2301      	movs	r3, #1
 800e734:	425b      	negs	r3, r3
 800e736:	617b      	str	r3, [r7, #20]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e738:	187b      	adds	r3, r7, r1
 800e73a:	781b      	ldrb	r3, [r3, #0]
 800e73c:	011a      	lsls	r2, r3, #4
 800e73e:	4b35      	ldr	r3, [pc, #212]	@ (800e814 <ManageStateEMC+0xf4>)
 800e740:	18d3      	adds	r3, r2, r3
 800e742:	613b      	str	r3, [r7, #16]

  CAD_Check_HW_SRC(PortNum);
 800e744:	187b      	adds	r3, r7, r1
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	0018      	movs	r0, r3
 800e74a:	f7ff fcd5 	bl	800e0f8 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  switch (_handle->CurrentHWcondition)
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	06db      	lsls	r3, r3, #27
 800e754:	0f5b      	lsrs	r3, r3, #29
 800e756:	b2db      	uxtb	r3, r3
 800e758:	2b03      	cmp	r3, #3
 800e75a:	d010      	beq.n	800e77e <ManageStateEMC+0x5e>
 800e75c:	dc26      	bgt.n	800e7ac <ManageStateEMC+0x8c>
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <ManageStateEMC+0x48>
 800e762:	2b01      	cmp	r3, #1
 800e764:	d00b      	beq.n	800e77e <ManageStateEMC+0x5e>
 800e766:	e021      	b.n	800e7ac <ManageStateEMC+0x8c>
  {
    case HW_Detachment :
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	785a      	ldrb	r2, [r3, #1]
 800e76c:	213e      	movs	r1, #62	@ 0x3e
 800e76e:	438a      	bics	r2, r1
 800e770:	1c11      	adds	r1, r2, #0
 800e772:	2212      	movs	r2, #18
 800e774:	430a      	orrs	r2, r1
 800e776:	705a      	strb	r2, [r3, #1]
      _timing = 1;
 800e778:	2301      	movs	r3, #1
 800e77a:	617b      	str	r3, [r7, #20]
      break;
 800e77c:	e045      	b.n	800e80a <ManageStateEMC+0xea>
    case HW_PwrCable_Sink_Attachment:
    case HW_Attachment :
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	785a      	ldrb	r2, [r3, #1]
 800e782:	213e      	movs	r1, #62	@ 0x3e
 800e784:	438a      	bics	r2, r1
 800e786:	1c11      	adds	r1, r2, #0
 800e788:	2204      	movs	r2, #4
 800e78a:	430a      	orrs	r2, r1
 800e78c:	705a      	strb	r2, [r3, #1]
      _handle->CAD_tDebounce_start = HAL_GetTick() - 5u;  /* this is only to check cable presence */
 800e78e:	f7f9 f8f5 	bl	800797c <HAL_GetTick>
 800e792:	0003      	movs	r3, r0
 800e794:	1f5a      	subs	r2, r3, #5
 800e796:	693b      	ldr	r3, [r7, #16]
 800e798:	609a      	str	r2, [r3, #8]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800e79a:	230f      	movs	r3, #15
 800e79c:	18fb      	adds	r3, r7, r3
 800e79e:	781b      	ldrb	r3, [r3, #0]
 800e7a0:	0018      	movs	r0, r3
 800e7a2:	f007 fe09 	bl	80163b8 <BSP_USBPD_PWR_VBUSInit>
      _timing = 2;
 800e7a6:	2302      	movs	r3, #2
 800e7a8:	617b      	str	r3, [r7, #20]
      break;
 800e7aa:	e02e      	b.n	800e80a <ManageStateEMC+0xea>
    case HW_PwrCable_NoSink_Attachment:
    default :
      /* nothing to do still the same status */
#if defined(_DRP)
      if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
 800e7ac:	240f      	movs	r4, #15
 800e7ae:	193b      	adds	r3, r7, r4
 800e7b0:	781a      	ldrb	r2, [r3, #0]
 800e7b2:	4919      	ldr	r1, [pc, #100]	@ (800e818 <ManageStateEMC+0xf8>)
 800e7b4:	0013      	movs	r3, r2
 800e7b6:	011b      	lsls	r3, r3, #4
 800e7b8:	1a9b      	subs	r3, r3, r2
 800e7ba:	009b      	lsls	r3, r3, #2
 800e7bc:	18cb      	adds	r3, r1, r3
 800e7be:	330c      	adds	r3, #12
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	795b      	ldrb	r3, [r3, #5]
 800e7c4:	2220      	movs	r2, #32
 800e7c6:	4013      	ands	r3, r2
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d01c      	beq.n	800e808 <ManageStateEMC+0xe8>
      {
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SRCToggleTime)
 800e7ce:	f7f9 f8d5 	bl	800797c <HAL_GetTick>
 800e7d2:	0002      	movs	r2, r0
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	685b      	ldr	r3, [r3, #4]
 800e7d8:	1ad1      	subs	r1, r2, r3
 800e7da:	193b      	adds	r3, r7, r4
 800e7dc:	781a      	ldrb	r2, [r3, #0]
 800e7de:	480e      	ldr	r0, [pc, #56]	@ (800e818 <ManageStateEMC+0xf8>)
 800e7e0:	0013      	movs	r3, r2
 800e7e2:	011b      	lsls	r3, r3, #4
 800e7e4:	1a9b      	subs	r3, r3, r2
 800e7e6:	009b      	lsls	r3, r3, #2
 800e7e8:	18c3      	adds	r3, r0, r3
 800e7ea:	330c      	adds	r3, #12
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	79db      	ldrb	r3, [r3, #7]
 800e7f0:	4299      	cmp	r1, r3
 800e7f2:	d907      	bls.n	800e804 <ManageStateEMC+0xe4>
        {
          _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 800e7f4:	693b      	ldr	r3, [r7, #16]
 800e7f6:	785a      	ldrb	r2, [r3, #1]
 800e7f8:	213e      	movs	r1, #62	@ 0x3e
 800e7fa:	438a      	bics	r2, r1
 800e7fc:	1c11      	adds	r1, r2, #0
 800e7fe:	2212      	movs	r2, #18
 800e800:	430a      	orrs	r2, r1
 800e802:	705a      	strb	r2, [r3, #1]
        }
        _timing = 0;
 800e804:	2300      	movs	r3, #0
 800e806:	617b      	str	r3, [r7, #20]
      }
#else
      _timing = 2;
#endif /* _DRP */
      break;
 800e808:	46c0      	nop			@ (mov r8, r8)
  }
  return _timing;
 800e80a:	697b      	ldr	r3, [r7, #20]
}
 800e80c:	0018      	movs	r0, r3
 800e80e:	46bd      	mov	sp, r7
 800e810:	b007      	add	sp, #28
 800e812:	bd90      	pop	{r4, r7, pc}
 800e814:	2000a700 	.word	0x2000a700
 800e818:	2000a734 	.word	0x2000a734

0800e81c <ManageStateAttached_DRP>:
#endif /* _DRP || _SRC */

#if defined(_DRP)
static uint32_t ManageStateAttached_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b086      	sub	sp, #24
 800e820:	af00      	add	r7, sp, #0
 800e822:	60b9      	str	r1, [r7, #8]
 800e824:	607a      	str	r2, [r7, #4]
 800e826:	210f      	movs	r1, #15
 800e828:	187b      	adds	r3, r7, r1
 800e82a:	1c02      	adds	r2, r0, #0
 800e82c:	701a      	strb	r2, [r3, #0]
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800e82e:	0008      	movs	r0, r1
 800e830:	187b      	adds	r3, r7, r1
 800e832:	781a      	ldrb	r2, [r3, #0]
 800e834:	491e      	ldr	r1, [pc, #120]	@ (800e8b0 <ManageStateAttached_DRP+0x94>)
 800e836:	0013      	movs	r3, r2
 800e838:	011b      	lsls	r3, r3, #4
 800e83a:	1a9b      	subs	r3, r3, r2
 800e83c:	009b      	lsls	r3, r3, #2
 800e83e:	18cb      	adds	r3, r1, r3
 800e840:	3310      	adds	r3, #16
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	2204      	movs	r2, #4
 800e848:	4013      	ands	r3, r2
 800e84a:	b2db      	uxtb	r3, r3
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	d008      	beq.n	800e862 <ManageStateAttached_DRP+0x46>
  {
    return ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	68b9      	ldr	r1, [r7, #8]
 800e854:	183b      	adds	r3, r7, r0
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	0018      	movs	r0, r3
 800e85a:	f000 f85f 	bl	800e91c <ManageStateAttached_SRC>
 800e85e:	0003      	movs	r3, r0
 800e860:	e021      	b.n	800e8a6 <ManageStateAttached_DRP+0x8a>
  }
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e862:	200f      	movs	r0, #15
 800e864:	183b      	adds	r3, r7, r0
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	011a      	lsls	r2, r3, #4
 800e86a:	4b12      	ldr	r3, [pc, #72]	@ (800e8b4 <ManageStateAttached_DRP+0x98>)
 800e86c:	18d3      	adds	r3, r2, r3
 800e86e:	613b      	str	r3, [r7, #16]
  uint32_t _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	68b9      	ldr	r1, [r7, #8]
 800e874:	183b      	adds	r3, r7, r0
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	0018      	movs	r0, r3
 800e87a:	f000 f98d 	bl	800eb98 <ManageStateAttached_SNK>
 800e87e:	0003      	movs	r3, r0
 800e880:	617b      	str	r3, [r7, #20]

  /* Toggle management */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	221c      	movs	r2, #28
 800e888:	4013      	ands	r3, r2
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d109      	bne.n	800e8a4 <ManageStateAttached_DRP+0x88>
  {
    _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SRC;
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	785a      	ldrb	r2, [r3, #1]
 800e894:	213e      	movs	r1, #62	@ 0x3e
 800e896:	438a      	bics	r2, r1
 800e898:	1c11      	adds	r1, r2, #0
 800e89a:	2210      	movs	r2, #16
 800e89c:	430a      	orrs	r2, r1
 800e89e:	705a      	strb	r2, [r3, #1]
    _timing = 0;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	617b      	str	r3, [r7, #20]
  }
  return _timing;
 800e8a4:	697b      	ldr	r3, [r7, #20]
}
 800e8a6:	0018      	movs	r0, r3
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	b006      	add	sp, #24
 800e8ac:	bd80      	pop	{r7, pc}
 800e8ae:	46c0      	nop			@ (mov r8, r8)
 800e8b0:	2000a734 	.word	0x2000a734
 800e8b4:	2000a700 	.word	0x2000a700

0800e8b8 <ManageStateAttachedWait_DRP>:
#endif /* _DRP */

#if defined(_DRP) || (defined(_ACCESSORY) && defined(_SNK))
static uint32_t ManageStateAttachedWait_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b084      	sub	sp, #16
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	60b9      	str	r1, [r7, #8]
 800e8c0:	607a      	str	r2, [r7, #4]
 800e8c2:	210f      	movs	r1, #15
 800e8c4:	187b      	adds	r3, r7, r1
 800e8c6:	1c02      	adds	r2, r0, #0
 800e8c8:	701a      	strb	r2, [r3, #0]
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800e8ca:	0008      	movs	r0, r1
 800e8cc:	187b      	adds	r3, r7, r1
 800e8ce:	781a      	ldrb	r2, [r3, #0]
 800e8d0:	4911      	ldr	r1, [pc, #68]	@ (800e918 <ManageStateAttachedWait_DRP+0x60>)
 800e8d2:	0013      	movs	r3, r2
 800e8d4:	011b      	lsls	r3, r3, #4
 800e8d6:	1a9b      	subs	r3, r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	18cb      	adds	r3, r1, r3
 800e8dc:	3310      	adds	r3, #16
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	781b      	ldrb	r3, [r3, #0]
 800e8e2:	2204      	movs	r2, #4
 800e8e4:	4013      	ands	r3, r2
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d008      	beq.n	800e8fe <ManageStateAttachedWait_DRP+0x46>
  {
    return ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	68b9      	ldr	r1, [r7, #8]
 800e8f0:	183b      	adds	r3, r7, r0
 800e8f2:	781b      	ldrb	r3, [r3, #0]
 800e8f4:	0018      	movs	r0, r3
 800e8f6:	f7ff fe25 	bl	800e544 <ManageStateAttachedWait_SRC>
 800e8fa:	0003      	movs	r3, r0
 800e8fc:	e008      	b.n	800e910 <ManageStateAttachedWait_DRP+0x58>
  }
  return ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	68b9      	ldr	r1, [r7, #8]
 800e902:	230f      	movs	r3, #15
 800e904:	18fb      	adds	r3, r7, r3
 800e906:	781b      	ldrb	r3, [r3, #0]
 800e908:	0018      	movs	r0, r3
 800e90a:	f000 f8b9 	bl	800ea80 <ManageStateAttachedWait_SNK>
 800e90e:	0003      	movs	r3, r0
}
 800e910:	0018      	movs	r0, r3
 800e912:	46bd      	mov	sp, r7
 800e914:	b004      	add	sp, #16
 800e916:	bd80      	pop	{r7, pc}
 800e918:	2000a734 	.word	0x2000a734

0800e91c <ManageStateAttached_SRC>:
#endif /* _DRP || (_ACCESSORY && _SNK) */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateAttached_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800e91c:	b590      	push	{r4, r7, lr}
 800e91e:	b08b      	sub	sp, #44	@ 0x2c
 800e920:	af00      	add	r7, sp, #0
 800e922:	60b9      	str	r1, [r7, #8]
 800e924:	607a      	str	r2, [r7, #4]
 800e926:	210f      	movs	r1, #15
 800e928:	187b      	adds	r3, r7, r1
 800e92a:	1c02      	adds	r2, r0, #0
 800e92c:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800e92e:	0008      	movs	r0, r1
 800e930:	183b      	adds	r3, r7, r0
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	011a      	lsls	r2, r3, #4
 800e936:	4b50      	ldr	r3, [pc, #320]	@ (800ea78 <ManageStateAttached_SRC+0x15c>)
 800e938:	18d3      	adds	r3, r2, r3
 800e93a:	623b      	str	r3, [r7, #32]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800e93c:	2302      	movs	r3, #2
 800e93e:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 800e940:	183b      	adds	r3, r7, r0
 800e942:	781a      	ldrb	r2, [r3, #0]
 800e944:	494d      	ldr	r1, [pc, #308]	@ (800ea7c <ManageStateAttached_SRC+0x160>)
 800e946:	0013      	movs	r3, r2
 800e948:	011b      	lsls	r3, r3, #4
 800e94a:	1a9b      	subs	r3, r3, r2
 800e94c:	009b      	lsls	r3, r3, #2
 800e94e:	18cb      	adds	r3, r1, r3
 800e950:	3334      	adds	r3, #52	@ 0x34
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2b01      	cmp	r3, #1
 800e956:	d10c      	bne.n	800e972 <ManageStateAttached_SRC+0x56>
 800e958:	183b      	adds	r3, r7, r0
 800e95a:	781a      	ldrb	r2, [r3, #0]
 800e95c:	4947      	ldr	r1, [pc, #284]	@ (800ea7c <ManageStateAttached_SRC+0x160>)
 800e95e:	0013      	movs	r3, r2
 800e960:	011b      	lsls	r3, r3, #4
 800e962:	1a9b      	subs	r3, r3, r2
 800e964:	009b      	lsls	r3, r3, #2
 800e966:	585b      	ldr	r3, [r3, r1]
 800e968:	695a      	ldr	r2, [r3, #20]
 800e96a:	23c0      	movs	r3, #192	@ 0xc0
 800e96c:	029b      	lsls	r3, r3, #10
 800e96e:	4013      	ands	r3, r2
 800e970:	e00c      	b.n	800e98c <ManageStateAttached_SRC+0x70>
                  (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800e972:	230f      	movs	r3, #15
 800e974:	18fb      	adds	r3, r7, r3
 800e976:	781a      	ldrb	r2, [r3, #0]
 800e978:	4940      	ldr	r1, [pc, #256]	@ (800ea7c <ManageStateAttached_SRC+0x160>)
 800e97a:	0013      	movs	r3, r2
 800e97c:	011b      	lsls	r3, r3, #4
 800e97e:	1a9b      	subs	r3, r3, r2
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	585b      	ldr	r3, [r3, r1]
 800e984:	695a      	ldr	r2, [r3, #20]
  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 800e986:	23c0      	movs	r3, #192	@ 0xc0
 800e988:	031b      	lsls	r3, r3, #12
 800e98a:	4013      	ands	r3, r2
 800e98c:	61fb      	str	r3, [r7, #28]
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SRC_CC1_VRD : LL_UCPD_SRC_CC2_VRD;
 800e98e:	230f      	movs	r3, #15
 800e990:	18fb      	adds	r3, r7, r3
 800e992:	781a      	ldrb	r2, [r3, #0]
 800e994:	4939      	ldr	r1, [pc, #228]	@ (800ea7c <ManageStateAttached_SRC+0x160>)
 800e996:	0013      	movs	r3, r2
 800e998:	011b      	lsls	r3, r3, #4
 800e99a:	1a9b      	subs	r3, r3, r2
 800e99c:	009b      	lsls	r3, r3, #2
 800e99e:	18cb      	adds	r3, r1, r3
 800e9a0:	3334      	adds	r3, #52	@ 0x34
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	2b01      	cmp	r3, #1
 800e9a6:	d102      	bne.n	800e9ae <ManageStateAttached_SRC+0x92>
 800e9a8:	2380      	movs	r3, #128	@ 0x80
 800e9aa:	025b      	lsls	r3, r3, #9
 800e9ac:	e001      	b.n	800e9b2 <ManageStateAttached_SRC+0x96>
 800e9ae:	2380      	movs	r3, #128	@ 0x80
 800e9b0:	02db      	lsls	r3, r3, #11
 800e9b2:	61bb      	str	r3, [r7, #24]

  /* Check if CC lines is opened or switch to debug accessory */
  if (comp != ccx)
 800e9b4:	69ba      	ldr	r2, [r7, #24]
 800e9b6:	69fb      	ldr	r3, [r7, #28]
 800e9b8:	429a      	cmp	r2, r3
 800e9ba:	d04f      	beq.n	800ea5c <ManageStateAttached_SRC+0x140>
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800e9bc:	6a3b      	ldr	r3, [r7, #32]
 800e9be:	781b      	ldrb	r3, [r3, #0]
 800e9c0:	2220      	movs	r2, #32
 800e9c2:	4013      	ands	r3, r2
 800e9c4:	b2db      	uxtb	r3, r3
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d10c      	bne.n	800e9e4 <ManageStateAttached_SRC+0xc8>
    {
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 800e9ca:	6a3b      	ldr	r3, [r7, #32]
 800e9cc:	781a      	ldrb	r2, [r3, #0]
 800e9ce:	2120      	movs	r1, #32
 800e9d0:	430a      	orrs	r2, r1
 800e9d2:	701a      	strb	r2, [r3, #0]
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 800e9d4:	f7f8 ffd2 	bl	800797c <HAL_GetTick>
 800e9d8:	0002      	movs	r2, r0
 800e9da:	6a3b      	ldr	r3, [r7, #32]
 800e9dc:	609a      	str	r2, [r3, #8]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 800e9de:	2302      	movs	r3, #2
 800e9e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e9e2:	e043      	b.n	800ea6c <ManageStateAttached_SRC+0x150>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800e9e4:	f7f8 ffca 	bl	800797c <HAL_GetTick>
 800e9e8:	0002      	movs	r2, r0
 800e9ea:	6a3b      	ldr	r3, [r7, #32]
 800e9ec:	689b      	ldr	r3, [r3, #8]
 800e9ee:	1ad3      	subs	r3, r2, r3
 800e9f0:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	2b02      	cmp	r3, #2
 800e9f6:	d939      	bls.n	800ea6c <ManageStateAttached_SRC+0x150>
      {
        HW_SignalDetachment(PortNum);
 800e9f8:	240f      	movs	r4, #15
 800e9fa:	193b      	adds	r3, r7, r4
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	0018      	movs	r0, r3
 800ea00:	f001 fe20 	bl	8010644 <HW_SignalDetachment>
#ifdef _DRP
        if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
 800ea04:	0020      	movs	r0, r4
 800ea06:	183b      	adds	r3, r7, r0
 800ea08:	781a      	ldrb	r2, [r3, #0]
 800ea0a:	491c      	ldr	r1, [pc, #112]	@ (800ea7c <ManageStateAttached_SRC+0x160>)
 800ea0c:	0013      	movs	r3, r2
 800ea0e:	011b      	lsls	r3, r3, #4
 800ea10:	1a9b      	subs	r3, r3, r2
 800ea12:	009b      	lsls	r3, r3, #2
 800ea14:	18cb      	adds	r3, r1, r3
 800ea16:	330c      	adds	r3, #12
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	795b      	ldrb	r3, [r3, #5]
 800ea1c:	2220      	movs	r2, #32
 800ea1e:	4013      	ands	r3, r2
 800ea20:	b2db      	uxtb	r3, r3
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d004      	beq.n	800ea30 <ManageStateAttached_SRC+0x114>
        {
          USBPDM1_AssertRd(PortNum);
 800ea26:	183b      	adds	r3, r7, r0
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	0018      	movs	r0, r3
 800ea2c:	f001 fb56 	bl	80100dc <USBPDM1_AssertRd>
        }
#endif /* _DRP */
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800ea30:	6a3b      	ldr	r3, [r7, #32]
 800ea32:	781a      	ldrb	r2, [r3, #0]
 800ea34:	2120      	movs	r1, #32
 800ea36:	438a      	bics	r2, r1
 800ea38:	701a      	strb	r2, [r3, #0]
        /* move inside state DETACH to avoid wrong VCONN level*/
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800ea3a:	6a3b      	ldr	r3, [r7, #32]
 800ea3c:	785a      	ldrb	r2, [r3, #1]
 800ea3e:	213e      	movs	r1, #62	@ 0x3e
 800ea40:	438a      	bics	r2, r1
 800ea42:	1c11      	adds	r1, r2, #0
 800ea44:	2216      	movs	r2, #22
 800ea46:	430a      	orrs	r2, r1
 800ea48:	705a      	strb	r2, [r3, #1]
        *pEvent                     = USBPD_CAD_EVENT_DETACHED;
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	701a      	strb	r2, [r3, #0]
        *pCCXX                      = CCNONE;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	601a      	str	r2, [r3, #0]
        _timing                     = 0;
 800ea56:	2300      	movs	r3, #0
 800ea58:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea5a:	e007      	b.n	800ea6c <ManageStateAttached_SRC+0x150>
    }
  }
  else
  {
    /* Reset tPDDebounce flag*/
    _handle->CAD_tDebounce_flag   = USBPD_FALSE;
 800ea5c:	6a3b      	ldr	r3, [r7, #32]
 800ea5e:	781a      	ldrb	r2, [r3, #0]
 800ea60:	2120      	movs	r1, #32
 800ea62:	438a      	bics	r2, r1
 800ea64:	701a      	strb	r2, [r3, #0]
    _timing = CAD_INFINITE_TIME;
 800ea66:	2301      	movs	r3, #1
 800ea68:	425b      	negs	r3, r3
 800ea6a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return _timing;
 800ea6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ea6e:	0018      	movs	r0, r3
 800ea70:	46bd      	mov	sp, r7
 800ea72:	b00b      	add	sp, #44	@ 0x2c
 800ea74:	bd90      	pop	{r4, r7, pc}
 800ea76:	46c0      	nop			@ (mov r8, r8)
 800ea78:	2000a700 	.word	0x2000a700
 800ea7c:	2000a734 	.word	0x2000a734

0800ea80 <ManageStateAttachedWait_SNK>:
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800ea80:	b590      	push	{r4, r7, lr}
 800ea82:	b089      	sub	sp, #36	@ 0x24
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60b9      	str	r1, [r7, #8]
 800ea88:	607a      	str	r2, [r7, #4]
 800ea8a:	240f      	movs	r4, #15
 800ea8c:	193b      	adds	r3, r7, r4
 800ea8e:	1c02      	adds	r2, r0, #0
 800ea90:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ea92:	193b      	adds	r3, r7, r4
 800ea94:	781b      	ldrb	r3, [r3, #0]
 800ea96:	011a      	lsls	r2, r3, #4
 800ea98:	4b3e      	ldr	r3, [pc, #248]	@ (800eb94 <ManageStateAttachedWait_SNK+0x114>)
 800ea9a:	18d3      	adds	r3, r2, r3
 800ea9c:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ea9e:	2302      	movs	r3, #2
 800eaa0:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800eaa2:	f7f8 ff6b 	bl	800797c <HAL_GetTick>
 800eaa6:	0002      	movs	r2, r0
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	689b      	ldr	r3, [r3, #8]
 800eaac:	1ad3      	subs	r3, r2, r3
 800eaae:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 800eab0:	193b      	adds	r3, r7, r4
 800eab2:	781b      	ldrb	r3, [r3, #0]
 800eab4:	0018      	movs	r0, r3
 800eab6:	f7ff fa87 	bl	800dfc8 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 800eaba:	69bb      	ldr	r3, [r7, #24]
 800eabc:	781b      	ldrb	r3, [r3, #0]
 800eabe:	221c      	movs	r2, #28
 800eac0:	4013      	ands	r3, r2
 800eac2:	b2db      	uxtb	r3, r3
 800eac4:	2b04      	cmp	r3, #4
 800eac6:	d130      	bne.n	800eb2a <ManageStateAttachedWait_SNK+0xaa>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 800eac8:	697b      	ldr	r3, [r7, #20]
 800eaca:	2b78      	cmp	r3, #120	@ 0x78
 800eacc:	d927      	bls.n	800eb1e <ManageStateAttachedWait_SNK+0x9e>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 800eace:	193b      	adds	r3, r7, r4
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	2101      	movs	r1, #1
 800ead4:	0018      	movs	r0, r3
 800ead6:	f007 fad1 	bl	801607c <USBPD_PWR_IF_GetVBUSStatus>
 800eada:	0003      	movs	r3, r0
 800eadc:	2b01      	cmp	r3, #1
 800eade:	d11e      	bne.n	800eb1e <ManageStateAttachedWait_SNK+0x9e>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	079b      	lsls	r3, r3, #30
 800eae6:	0f9b      	lsrs	r3, r3, #30
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	001a      	movs	r2, r3
 800eaec:	193b      	adds	r3, r7, r4
 800eaee:	781b      	ldrb	r3, [r3, #0]
 800eaf0:	0011      	movs	r1, r2
 800eaf2:	0018      	movs	r0, r3
 800eaf4:	f001 fc44 	bl	8010380 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	785a      	ldrb	r2, [r3, #1]
 800eafc:	213e      	movs	r1, #62	@ 0x3e
 800eafe:	438a      	bics	r2, r1
 800eb00:	1c11      	adds	r1, r2, #0
 800eb02:	2206      	movs	r2, #6
 800eb04:	430a      	orrs	r2, r1
 800eb06:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 800eb0e:	69bb      	ldr	r3, [r7, #24]
 800eb10:	781b      	ldrb	r3, [r3, #0]
 800eb12:	079b      	lsls	r3, r3, #30
 800eb14:	0f9b      	lsrs	r3, r3, #30
 800eb16:	b2db      	uxtb	r3, r3
 800eb18:	001a      	movs	r2, r3
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	781a      	ldrb	r2, [r3, #0]
 800eb22:	2120      	movs	r1, #32
 800eb24:	438a      	bics	r2, r1
 800eb26:	701a      	strb	r2, [r3, #0]
 800eb28:	e02e      	b.n	800eb88 <ManageStateAttachedWait_SNK+0x108>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	2220      	movs	r2, #32
 800eb30:	4013      	ands	r3, r2
 800eb32:	b2db      	uxtb	r3, r3
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d10c      	bne.n	800eb52 <ManageStateAttachedWait_SNK+0xd2>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800eb38:	f7f8 ff20 	bl	800797c <HAL_GetTick>
 800eb3c:	0002      	movs	r2, r0
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	609a      	str	r2, [r3, #8]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	781a      	ldrb	r2, [r3, #0]
 800eb46:	2120      	movs	r1, #32
 800eb48:	430a      	orrs	r2, r1
 800eb4a:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 800eb4c:	230c      	movs	r3, #12
 800eb4e:	61fb      	str	r3, [r7, #28]
 800eb50:	e01a      	b.n	800eb88 <ManageStateAttachedWait_SNK+0x108>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 800eb52:	f7f8 ff13 	bl	800797c <HAL_GetTick>
 800eb56:	0002      	movs	r2, r0
 800eb58:	69bb      	ldr	r3, [r7, #24]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	2b0c      	cmp	r3, #12
 800eb60:	d912      	bls.n	800eb88 <ManageStateAttachedWait_SNK+0x108>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	781a      	ldrb	r2, [r3, #0]
 800eb66:	2120      	movs	r1, #32
 800eb68:	438a      	bics	r2, r1
 800eb6a:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800eb6c:	69bb      	ldr	r3, [r7, #24]
 800eb6e:	785a      	ldrb	r2, [r3, #1]
 800eb70:	213e      	movs	r1, #62	@ 0x3e
 800eb72:	438a      	bics	r2, r1
 800eb74:	1c11      	adds	r1, r2, #0
 800eb76:	2202      	movs	r2, #2
 800eb78:	430a      	orrs	r2, r1
 800eb7a:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800eb7c:	230f      	movs	r3, #15
 800eb7e:	18fb      	adds	r3, r7, r3
 800eb80:	781b      	ldrb	r3, [r3, #0]
 800eb82:	0018      	movs	r0, r3
 800eb84:	f007 fc29 	bl	80163da <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 800eb88:	69fb      	ldr	r3, [r7, #28]
}
 800eb8a:	0018      	movs	r0, r3
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	b009      	add	sp, #36	@ 0x24
 800eb90:	bd90      	pop	{r4, r7, pc}
 800eb92:	46c0      	nop			@ (mov r8, r8)
 800eb94:	2000a700 	.word	0x2000a700

0800eb98 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800eb98:	b590      	push	{r4, r7, lr}
 800eb9a:	b089      	sub	sp, #36	@ 0x24
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	60b9      	str	r1, [r7, #8]
 800eba0:	607a      	str	r2, [r7, #4]
 800eba2:	210f      	movs	r1, #15
 800eba4:	187b      	adds	r3, r7, r1
 800eba6:	1c02      	adds	r2, r0, #0
 800eba8:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ebaa:	0008      	movs	r0, r1
 800ebac:	183b      	adds	r3, r7, r0
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	011a      	lsls	r2, r3, #4
 800ebb2:	4b2f      	ldr	r3, [pc, #188]	@ (800ec70 <ManageStateAttached_SNK+0xd8>)
 800ebb4:	18d3      	adds	r3, r2, r3
 800ebb6:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ebb8:	2302      	movs	r3, #2
 800ebba:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800ebc0:	183b      	adds	r3, r7, r0
 800ebc2:	781a      	ldrb	r2, [r3, #0]
 800ebc4:	492b      	ldr	r1, [pc, #172]	@ (800ec74 <ManageStateAttached_SNK+0xdc>)
 800ebc6:	0013      	movs	r3, r2
 800ebc8:	011b      	lsls	r3, r3, #4
 800ebca:	1a9b      	subs	r3, r3, r2
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	18cb      	adds	r3, r1, r3
 800ebd0:	3334      	adds	r3, #52	@ 0x34
 800ebd2:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d10c      	bne.n	800ebf2 <ManageStateAttached_SNK+0x5a>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800ebd8:	183b      	adds	r3, r7, r0
 800ebda:	781a      	ldrb	r2, [r3, #0]
 800ebdc:	4925      	ldr	r1, [pc, #148]	@ (800ec74 <ManageStateAttached_SNK+0xdc>)
 800ebde:	0013      	movs	r3, r2
 800ebe0:	011b      	lsls	r3, r3, #4
 800ebe2:	1a9b      	subs	r3, r3, r2
 800ebe4:	009b      	lsls	r3, r3, #2
 800ebe6:	585b      	ldr	r3, [r3, r1]
 800ebe8:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800ebea:	23c0      	movs	r3, #192	@ 0xc0
 800ebec:	029b      	lsls	r3, r3, #10
 800ebee:	4013      	ands	r3, r2
 800ebf0:	e00c      	b.n	800ec0c <ManageStateAttached_SNK+0x74>
 800ebf2:	230f      	movs	r3, #15
 800ebf4:	18fb      	adds	r3, r7, r3
 800ebf6:	781a      	ldrb	r2, [r3, #0]
 800ebf8:	491e      	ldr	r1, [pc, #120]	@ (800ec74 <ManageStateAttached_SNK+0xdc>)
 800ebfa:	0013      	movs	r3, r2
 800ebfc:	011b      	lsls	r3, r3, #4
 800ebfe:	1a9b      	subs	r3, r3, r2
 800ec00:	009b      	lsls	r3, r3, #2
 800ec02:	585b      	ldr	r3, [r3, r1]
 800ec04:	695a      	ldr	r2, [r3, #20]
 800ec06:	23c0      	movs	r3, #192	@ 0xc0
 800ec08:	031b      	lsls	r3, r3, #12
 800ec0a:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 800ec0c:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 800ec0e:	240f      	movs	r4, #15
 800ec10:	193b      	adds	r3, r7, r4
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	2102      	movs	r1, #2
 800ec16:	0018      	movs	r0, r3
 800ec18:	f007 fa30 	bl	801607c <USBPD_PWR_IF_GetVBUSStatus>
 800ec1c:	0003      	movs	r3, r0
 800ec1e:	2b01      	cmp	r3, #1
 800ec20:	d11e      	bne.n	800ec60 <ManageStateAttached_SNK+0xc8>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 800ec22:	697a      	ldr	r2, [r7, #20]
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d11a      	bne.n	800ec60 <ManageStateAttached_SNK+0xc8>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 800ec2a:	193b      	adds	r3, r7, r4
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	0018      	movs	r0, r3
 800ec30:	f001 fd08 	bl	8010644 <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 800ec34:	69bb      	ldr	r3, [r7, #24]
 800ec36:	781a      	ldrb	r2, [r3, #0]
 800ec38:	211c      	movs	r1, #28
 800ec3a:	438a      	bics	r2, r1
 800ec3c:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 800ec3e:	69bb      	ldr	r3, [r7, #24]
 800ec40:	785a      	ldrb	r2, [r3, #1]
 800ec42:	213e      	movs	r1, #62	@ 0x3e
 800ec44:	438a      	bics	r2, r1
 800ec46:	1c11      	adds	r1, r2, #0
 800ec48:	2202      	movs	r2, #2
 800ec4a:	430a      	orrs	r2, r1
 800ec4c:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 800ec4e:	68bb      	ldr	r3, [r7, #8]
 800ec50:	2201      	movs	r2, #1
 800ec52:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	2200      	movs	r2, #0
 800ec58:	601a      	str	r2, [r3, #0]
    _timing = 0;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	61fb      	str	r3, [r7, #28]
 800ec5e:	e001      	b.n	800ec64 <ManageStateAttached_SNK+0xcc>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 800ec60:	230a      	movs	r3, #10
 800ec62:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 800ec64:	69fb      	ldr	r3, [r7, #28]
}
 800ec66:	0018      	movs	r0, r3
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	b009      	add	sp, #36	@ 0x24
 800ec6c:	bd90      	pop	{r4, r7, pc}
 800ec6e:	46c0      	nop			@ (mov r8, r8)
 800ec70:	2000a700 	.word	0x2000a700
 800ec74:	2000a734 	.word	0x2000a734

0800ec78 <LL_AHB1_GRP1_EnableClock>:
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b084      	sub	sp, #16
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800ec80:	4b07      	ldr	r3, [pc, #28]	@ (800eca0 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ec82:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800ec84:	4b06      	ldr	r3, [pc, #24]	@ (800eca0 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ec86:	687a      	ldr	r2, [r7, #4]
 800ec88:	430a      	orrs	r2, r1
 800ec8a:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800ec8c:	4b04      	ldr	r3, [pc, #16]	@ (800eca0 <LL_AHB1_GRP1_EnableClock+0x28>)
 800ec8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	4013      	ands	r3, r2
 800ec94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ec96:	68fb      	ldr	r3, [r7, #12]
}
 800ec98:	46c0      	nop			@ (mov r8, r8)
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	b004      	add	sp, #16
 800ec9e:	bd80      	pop	{r7, pc}
 800eca0:	40021000 	.word	0x40021000

0800eca4 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	0002      	movs	r2, r0
 800ecac:	1dfb      	adds	r3, r7, #7
 800ecae:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
 800ecb0:	1dfb      	adds	r3, r7, #7
 800ecb2:	781b      	ldrb	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d101      	bne.n	800ecbc <USBPD_HW_GetUSPDInstance+0x18>
 800ecb8:	4b03      	ldr	r3, [pc, #12]	@ (800ecc8 <USBPD_HW_GetUSPDInstance+0x24>)
 800ecba:	e000      	b.n	800ecbe <USBPD_HW_GetUSPDInstance+0x1a>
 800ecbc:	4b03      	ldr	r3, [pc, #12]	@ (800eccc <USBPD_HW_GetUSPDInstance+0x28>)
#else
  return UCPD_INSTANCE0;
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 800ecbe:	0018      	movs	r0, r3
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	b002      	add	sp, #8
 800ecc4:	bd80      	pop	{r7, pc}
 800ecc6:	46c0      	nop			@ (mov r8, r8)
 800ecc8:	4000a000 	.word	0x4000a000
 800eccc:	4000a400 	.word	0x4000a400

0800ecd0 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800ecd0:	b590      	push	{r4, r7, lr}
 800ecd2:	b08f      	sub	sp, #60	@ 0x3c
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	0002      	movs	r2, r0
 800ecd8:	1dfb      	adds	r3, r7, #7
 800ecda:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800ecdc:	240c      	movs	r4, #12
 800ecde:	193b      	adds	r3, r7, r4
 800ece0:	0018      	movs	r0, r3
 800ece2:	f7fc fea9 	bl	800ba38 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800ece6:	0021      	movs	r1, r4
 800ece8:	187b      	adds	r3, r7, r1
 800ecea:	2200      	movs	r2, #0
 800ecec:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800ecee:	187b      	adds	r3, r7, r1
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800ecf4:	187b      	adds	r3, r7, r1
 800ecf6:	2200      	movs	r2, #0
 800ecf8:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800ecfa:	187b      	adds	r3, r7, r1
 800ecfc:	2280      	movs	r2, #128	@ 0x80
 800ecfe:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800ed00:	187b      	adds	r3, r7, r1
 800ed02:	2200      	movs	r2, #0
 800ed04:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800ed06:	187b      	adds	r3, r7, r1
 800ed08:	2200      	movs	r2, #0
 800ed0a:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800ed0c:	187b      	adds	r3, r7, r1
 800ed0e:	2200      	movs	r2, #0
 800ed10:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800ed12:	187b      	adds	r3, r7, r1
 800ed14:	2200      	movs	r2, #0
 800ed16:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800ed18:	187b      	adds	r3, r7, r1
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800ed1e:	187b      	adds	r3, r7, r1
 800ed20:	2280      	movs	r2, #128	@ 0x80
 800ed22:	0192      	lsls	r2, r2, #6
 800ed24:	629a      	str	r2, [r3, #40]	@ 0x28

  switch (PortNum)
 800ed26:	1dfb      	adds	r3, r7, #7
 800ed28:	781b      	ldrb	r3, [r3, #0]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d002      	beq.n	800ed34 <USBPD_HW_Init_DMARxInstance+0x64>
 800ed2e:	2b01      	cmp	r3, #1
 800ed30:	d00e      	beq.n	800ed50 <USBPD_HW_Init_DMARxInstance+0x80>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800ed32:	e01b      	b.n	800ed6c <USBPD_HW_Init_DMARxInstance+0x9c>
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800ed34:	2001      	movs	r0, #1
 800ed36:	f7ff ff9f 	bl	800ec78 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800ed3a:	210c      	movs	r1, #12
 800ed3c:	187b      	adds	r3, r7, r1
 800ed3e:	223a      	movs	r2, #58	@ 0x3a
 800ed40:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800ed42:	187b      	adds	r3, r7, r1
 800ed44:	480f      	ldr	r0, [pc, #60]	@ (800ed84 <USBPD_HW_Init_DMARxInstance+0xb4>)
 800ed46:	001a      	movs	r2, r3
 800ed48:	2100      	movs	r1, #0
 800ed4a:	f7fc fe35 	bl	800b9b8 <LL_DMA_Init>
      break;
 800ed4e:	e00d      	b.n	800ed6c <USBPD_HW_Init_DMARxInstance+0x9c>
      UCPDDMA_INSTANCE1_CLOCKENABLE_RX;
 800ed50:	2001      	movs	r0, #1
 800ed52:	f7ff ff91 	bl	800ec78 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE1_REQUEST_RX;
 800ed56:	210c      	movs	r1, #12
 800ed58:	187b      	adds	r3, r7, r1
 800ed5a:	223c      	movs	r2, #60	@ 0x3c
 800ed5c:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
 800ed5e:	187b      	adds	r3, r7, r1
 800ed60:	4808      	ldr	r0, [pc, #32]	@ (800ed84 <USBPD_HW_Init_DMARxInstance+0xb4>)
 800ed62:	001a      	movs	r2, r3
 800ed64:	2102      	movs	r1, #2
 800ed66:	f7fc fe27 	bl	800b9b8 <LL_DMA_Init>
      break;
 800ed6a:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
 800ed6c:	1dfb      	adds	r3, r7, #7
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d101      	bne.n	800ed78 <USBPD_HW_Init_DMARxInstance+0xa8>
 800ed74:	4b04      	ldr	r3, [pc, #16]	@ (800ed88 <USBPD_HW_Init_DMARxInstance+0xb8>)
 800ed76:	e000      	b.n	800ed7a <USBPD_HW_Init_DMARxInstance+0xaa>
 800ed78:	4b04      	ldr	r3, [pc, #16]	@ (800ed8c <USBPD_HW_Init_DMARxInstance+0xbc>)
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
#endif /* UCPD_INSTANCE1 */
}
 800ed7a:	0018      	movs	r0, r3
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	b00f      	add	sp, #60	@ 0x3c
 800ed80:	bd90      	pop	{r4, r7, pc}
 800ed82:	46c0      	nop			@ (mov r8, r8)
 800ed84:	40020000 	.word	0x40020000
 800ed88:	40020008 	.word	0x40020008
 800ed8c:	40020030 	.word	0x40020030

0800ed90 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	0002      	movs	r2, r0
 800ed98:	1dfb      	adds	r3, r7, #7
 800ed9a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800ed9c:	46c0      	nop			@ (mov r8, r8)
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	b002      	add	sp, #8
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800eda4:	b590      	push	{r4, r7, lr}
 800eda6:	b08f      	sub	sp, #60	@ 0x3c
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	0002      	movs	r2, r0
 800edac:	1dfb      	adds	r3, r7, #7
 800edae:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800edb0:	240c      	movs	r4, #12
 800edb2:	193b      	adds	r3, r7, r4
 800edb4:	0018      	movs	r0, r3
 800edb6:	f7fc fe3f 	bl	800ba38 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800edba:	0021      	movs	r1, r4
 800edbc:	187b      	adds	r3, r7, r1
 800edbe:	2210      	movs	r2, #16
 800edc0:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800edc2:	187b      	adds	r3, r7, r1
 800edc4:	2200      	movs	r2, #0
 800edc6:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800edc8:	187b      	adds	r3, r7, r1
 800edca:	2200      	movs	r2, #0
 800edcc:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800edce:	187b      	adds	r3, r7, r1
 800edd0:	2280      	movs	r2, #128	@ 0x80
 800edd2:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800edd4:	187b      	adds	r3, r7, r1
 800edd6:	2200      	movs	r2, #0
 800edd8:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800edda:	187b      	adds	r3, r7, r1
 800eddc:	2200      	movs	r2, #0
 800edde:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 800ede0:	187b      	adds	r3, r7, r1
 800ede2:	2200      	movs	r2, #0
 800ede4:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800ede6:	187b      	adds	r3, r7, r1
 800ede8:	2200      	movs	r2, #0
 800edea:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800edec:	187b      	adds	r3, r7, r1
 800edee:	2200      	movs	r2, #0
 800edf0:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 800edf2:	1dfb      	adds	r3, r7, #7
 800edf4:	781b      	ldrb	r3, [r3, #0]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d002      	beq.n	800ee00 <USBPD_HW_Init_DMATxInstance+0x5c>
 800edfa:	2b01      	cmp	r3, #1
 800edfc:	d012      	beq.n	800ee24 <USBPD_HW_Init_DMATxInstance+0x80>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800edfe:	e023      	b.n	800ee48 <USBPD_HW_Init_DMATxInstance+0xa4>
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800ee00:	2001      	movs	r0, #1
 800ee02:	f7ff ff39 	bl	800ec78 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800ee06:	210c      	movs	r1, #12
 800ee08:	187b      	adds	r3, r7, r1
 800ee0a:	223b      	movs	r2, #59	@ 0x3b
 800ee0c:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800ee0e:	187b      	adds	r3, r7, r1
 800ee10:	2280      	movs	r2, #128	@ 0x80
 800ee12:	0152      	lsls	r2, r2, #5
 800ee14:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800ee16:	187b      	adds	r3, r7, r1
 800ee18:	4811      	ldr	r0, [pc, #68]	@ (800ee60 <USBPD_HW_Init_DMATxInstance+0xbc>)
 800ee1a:	001a      	movs	r2, r3
 800ee1c:	2101      	movs	r1, #1
 800ee1e:	f7fc fdcb 	bl	800b9b8 <LL_DMA_Init>
      break;
 800ee22:	e011      	b.n	800ee48 <USBPD_HW_Init_DMATxInstance+0xa4>
      UCPDDMA_INSTANCE1_CLOCKENABLE_TX;
 800ee24:	2001      	movs	r0, #1
 800ee26:	f7ff ff27 	bl	800ec78 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE1_REQUEST_TX;
 800ee2a:	210c      	movs	r1, #12
 800ee2c:	187b      	adds	r3, r7, r1
 800ee2e:	223d      	movs	r2, #61	@ 0x3d
 800ee30:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800ee32:	187b      	adds	r3, r7, r1
 800ee34:	2280      	movs	r2, #128	@ 0x80
 800ee36:	0152      	lsls	r2, r2, #5
 800ee38:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
 800ee3a:	187b      	adds	r3, r7, r1
 800ee3c:	4808      	ldr	r0, [pc, #32]	@ (800ee60 <USBPD_HW_Init_DMATxInstance+0xbc>)
 800ee3e:	001a      	movs	r2, r3
 800ee40:	2103      	movs	r1, #3
 800ee42:	f7fc fdb9 	bl	800b9b8 <LL_DMA_Init>
      break;
 800ee46:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
 800ee48:	1dfb      	adds	r3, r7, #7
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d101      	bne.n	800ee54 <USBPD_HW_Init_DMATxInstance+0xb0>
 800ee50:	4b04      	ldr	r3, [pc, #16]	@ (800ee64 <USBPD_HW_Init_DMATxInstance+0xc0>)
 800ee52:	e000      	b.n	800ee56 <USBPD_HW_Init_DMATxInstance+0xb2>
 800ee54:	4b04      	ldr	r3, [pc, #16]	@ (800ee68 <USBPD_HW_Init_DMATxInstance+0xc4>)
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
#endif /* UCPD_INSTANCE1 */
}
 800ee56:	0018      	movs	r0, r3
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	b00f      	add	sp, #60	@ 0x3c
 800ee5c:	bd90      	pop	{r4, r7, pc}
 800ee5e:	46c0      	nop			@ (mov r8, r8)
 800ee60:	40020000 	.word	0x40020000
 800ee64:	4002001c 	.word	0x4002001c
 800ee68:	40020044 	.word	0x40020044

0800ee6c <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b082      	sub	sp, #8
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	0002      	movs	r2, r0
 800ee74:	1dfb      	adds	r3, r7, #7
 800ee76:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 800ee78:	46c0      	nop			@ (mov r8, r8)
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	b002      	add	sp, #8
 800ee7e:	bd80      	pop	{r7, pc}

0800ee80 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b082      	sub	sp, #8
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	0002      	movs	r2, r0
 800ee88:	1dfb      	adds	r3, r7, #7
 800ee8a:	701a      	strb	r2, [r3, #0]
 800ee8c:	1dbb      	adds	r3, r7, #6
 800ee8e:	1c0a      	adds	r2, r1, #0
 800ee90:	701a      	strb	r2, [r3, #0]
  switch (PortNum)
 800ee92:	1dfb      	adds	r3, r7, #7
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <USBPD_HW_SetFRSSignalling+0x20>
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d002      	beq.n	800eea4 <USBPD_HW_SetFRSSignalling+0x24>
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 800ee9e:	e002      	b.n	800eea6 <USBPD_HW_SetFRSSignalling+0x26>
      break;
 800eea0:	46c0      	nop			@ (mov r8, r8)
 800eea2:	e000      	b.n	800eea6 <USBPD_HW_SetFRSSignalling+0x26>
      break;
 800eea4:	46c0      	nop			@ (mov r8, r8)
  }
}
 800eea6:	46c0      	nop			@ (mov r8, r8)
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	b002      	add	sp, #8
 800eeac:	bd80      	pop	{r7, pc}

0800eeae <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800eeae:	b580      	push	{r7, lr}
 800eeb0:	b082      	sub	sp, #8
 800eeb2:	af00      	add	r7, sp, #0
 800eeb4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	699b      	ldr	r3, [r3, #24]
 800eeba:	2280      	movs	r2, #128	@ 0x80
 800eebc:	0212      	lsls	r2, r2, #8
 800eebe:	431a      	orrs	r2, r3
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	619a      	str	r2, [r3, #24]
}
 800eec4:	46c0      	nop			@ (mov r8, r8)
 800eec6:	46bd      	mov	sp, r7
 800eec8:	b002      	add	sp, #8
 800eeca:	bd80      	pop	{r7, pc}

0800eecc <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	699b      	ldr	r3, [r3, #24]
 800eed8:	2280      	movs	r2, #128	@ 0x80
 800eeda:	01d2      	lsls	r2, r2, #7
 800eedc:	431a      	orrs	r2, r3
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	619a      	str	r2, [r3, #24]
}
 800eee2:	46c0      	nop			@ (mov r8, r8)
 800eee4:	46bd      	mov	sp, r7
 800eee6:	b002      	add	sp, #8
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b082      	sub	sp, #8
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	699b      	ldr	r3, [r3, #24]
 800eef6:	2280      	movs	r2, #128	@ 0x80
 800eef8:	0152      	lsls	r2, r2, #5
 800eefa:	431a      	orrs	r2, r3
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	619a      	str	r2, [r3, #24]
}
 800ef00:	46c0      	nop			@ (mov r8, r8)
 800ef02:	46bd      	mov	sp, r7
 800ef04:	b002      	add	sp, #8
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	699b      	ldr	r3, [r3, #24]
 800ef14:	2280      	movs	r2, #128	@ 0x80
 800ef16:	0112      	lsls	r2, r2, #4
 800ef18:	431a      	orrs	r2, r3
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	619a      	str	r2, [r3, #24]
}
 800ef1e:	46c0      	nop			@ (mov r8, r8)
 800ef20:	46bd      	mov	sp, r7
 800ef22:	b002      	add	sp, #8
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b082      	sub	sp, #8
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	699b      	ldr	r3, [r3, #24]
 800ef32:	2280      	movs	r2, #128	@ 0x80
 800ef34:	00d2      	lsls	r2, r2, #3
 800ef36:	431a      	orrs	r2, r3
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	619a      	str	r2, [r3, #24]
}
 800ef3c:	46c0      	nop			@ (mov r8, r8)
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	b002      	add	sp, #8
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b082      	sub	sp, #8
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	699b      	ldr	r3, [r3, #24]
 800ef50:	2280      	movs	r2, #128	@ 0x80
 800ef52:	0092      	lsls	r2, r2, #2
 800ef54:	431a      	orrs	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	619a      	str	r2, [r3, #24]
}
 800ef5a:	46c0      	nop			@ (mov r8, r8)
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	b002      	add	sp, #8
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	699b      	ldr	r3, [r3, #24]
 800ef6e:	2240      	movs	r2, #64	@ 0x40
 800ef70:	431a      	orrs	r2, r3
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	619a      	str	r2, [r3, #24]
}
 800ef76:	46c0      	nop			@ (mov r8, r8)
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	b002      	add	sp, #8
 800ef7c:	bd80      	pop	{r7, pc}

0800ef7e <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800ef7e:	b580      	push	{r7, lr}
 800ef80:	b082      	sub	sp, #8
 800ef82:	af00      	add	r7, sp, #0
 800ef84:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	699b      	ldr	r3, [r3, #24]
 800ef8a:	2220      	movs	r2, #32
 800ef8c:	431a      	orrs	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	619a      	str	r2, [r3, #24]
}
 800ef92:	46c0      	nop			@ (mov r8, r8)
 800ef94:	46bd      	mov	sp, r7
 800ef96:	b002      	add	sp, #8
 800ef98:	bd80      	pop	{r7, pc}

0800ef9a <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800ef9a:	b580      	push	{r7, lr}
 800ef9c:	b082      	sub	sp, #8
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	699b      	ldr	r3, [r3, #24]
 800efa6:	2210      	movs	r2, #16
 800efa8:	431a      	orrs	r2, r3
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	619a      	str	r2, [r3, #24]
}
 800efae:	46c0      	nop			@ (mov r8, r8)
 800efb0:	46bd      	mov	sp, r7
 800efb2:	b002      	add	sp, #8
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b082      	sub	sp, #8
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	699b      	ldr	r3, [r3, #24]
 800efc2:	2208      	movs	r2, #8
 800efc4:	431a      	orrs	r2, r3
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	619a      	str	r2, [r3, #24]
}
 800efca:	46c0      	nop			@ (mov r8, r8)
 800efcc:	46bd      	mov	sp, r7
 800efce:	b002      	add	sp, #8
 800efd0:	bd80      	pop	{r7, pc}

0800efd2 <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800efd2:	b580      	push	{r7, lr}
 800efd4:	b082      	sub	sp, #8
 800efd6:	af00      	add	r7, sp, #0
 800efd8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	699b      	ldr	r3, [r3, #24]
 800efde:	2204      	movs	r2, #4
 800efe0:	431a      	orrs	r2, r3
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	619a      	str	r2, [r3, #24]
}
 800efe6:	46c0      	nop			@ (mov r8, r8)
 800efe8:	46bd      	mov	sp, r7
 800efea:	b002      	add	sp, #8
 800efec:	bd80      	pop	{r7, pc}

0800efee <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800efee:	b580      	push	{r7, lr}
 800eff0:	b082      	sub	sp, #8
 800eff2:	af00      	add	r7, sp, #0
 800eff4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	699b      	ldr	r3, [r3, #24]
 800effa:	2202      	movs	r2, #2
 800effc:	431a      	orrs	r2, r3
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	619a      	str	r2, [r3, #24]
}
 800f002:	46c0      	nop			@ (mov r8, r8)
 800f004:	46bd      	mov	sp, r7
 800f006:	b002      	add	sp, #8
 800f008:	bd80      	pop	{r7, pc}

0800f00a <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800f00e:	2000      	movs	r0, #0
 800f010:	f000 f80c 	bl	800f02c <PORTx_IRQHandler>
}
 800f014:	46c0      	nop			@ (mov r8, r8)
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <USBPD_PORT1_IRQHandler>:

void USBPD_PORT1_IRQHandler(void)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_1);
 800f01e:	2001      	movs	r0, #1
 800f020:	f000 f804 	bl	800f02c <PORTx_IRQHandler>
}
 800f024:	46c0      	nop			@ (mov r8, r8)
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}
	...

0800f02c <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b084      	sub	sp, #16
 800f030:	af00      	add	r7, sp, #0
 800f032:	0002      	movs	r2, r0
 800f034:	1dfb      	adds	r3, r7, #7
 800f036:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800f038:	1dfb      	adds	r3, r7, #7
 800f03a:	781a      	ldrb	r2, [r3, #0]
 800f03c:	49a6      	ldr	r1, [pc, #664]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f03e:	0013      	movs	r3, r2
 800f040:	011b      	lsls	r3, r3, #4
 800f042:	1a9b      	subs	r3, r3, r2
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	585b      	ldr	r3, [r3, r1]
 800f048:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	695b      	ldr	r3, [r3, #20]
 800f04e:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	691b      	ldr	r3, [r3, #16]
 800f054:	68ba      	ldr	r2, [r7, #8]
 800f056:	4013      	ands	r3, r2
 800f058:	d100      	bne.n	800f05c <PORTx_IRQHandler+0x30>
 800f05a:	e1fc      	b.n	800f456 <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	2202      	movs	r2, #2
 800f060:	4013      	ands	r3, r2
 800f062:	d03c      	beq.n	800f0de <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	0018      	movs	r0, r3
 800f068:	f7ff ffc1 	bl	800efee <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f06c:	1dfb      	adds	r3, r7, #7
 800f06e:	781a      	ldrb	r2, [r3, #0]
 800f070:	4999      	ldr	r1, [pc, #612]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f072:	0013      	movs	r3, r2
 800f074:	011b      	lsls	r3, r3, #4
 800f076:	1a9b      	subs	r3, r3, r2
 800f078:	009b      	lsls	r3, r3, #2
 800f07a:	18cb      	adds	r3, r1, r3
 800f07c:	3304      	adds	r3, #4
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	6819      	ldr	r1, [r3, #0]
 800f082:	1dfb      	adds	r3, r7, #7
 800f084:	781a      	ldrb	r2, [r3, #0]
 800f086:	4894      	ldr	r0, [pc, #592]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f088:	0013      	movs	r3, r2
 800f08a:	011b      	lsls	r3, r3, #4
 800f08c:	1a9b      	subs	r3, r3, r2
 800f08e:	009b      	lsls	r3, r3, #2
 800f090:	18c3      	adds	r3, r0, r3
 800f092:	3304      	adds	r3, #4
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	2201      	movs	r2, #1
 800f098:	4391      	bics	r1, r2
 800f09a:	000a      	movs	r2, r1
 800f09c:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800f09e:	46c0      	nop			@ (mov r8, r8)
 800f0a0:	1dfb      	adds	r3, r7, #7
 800f0a2:	781a      	ldrb	r2, [r3, #0]
 800f0a4:	498c      	ldr	r1, [pc, #560]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f0a6:	0013      	movs	r3, r2
 800f0a8:	011b      	lsls	r3, r3, #4
 800f0aa:	1a9b      	subs	r3, r3, r2
 800f0ac:	009b      	lsls	r3, r3, #2
 800f0ae:	18cb      	adds	r3, r1, r3
 800f0b0:	3304      	adds	r3, #4
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	4013      	ands	r3, r2
 800f0ba:	2b01      	cmp	r3, #1
 800f0bc:	d0f0      	beq.n	800f0a0 <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800f0be:	1dfb      	adds	r3, r7, #7
 800f0c0:	781a      	ldrb	r2, [r3, #0]
 800f0c2:	4985      	ldr	r1, [pc, #532]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f0c4:	0013      	movs	r3, r2
 800f0c6:	011b      	lsls	r3, r3, #4
 800f0c8:	1a9b      	subs	r3, r3, r2
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	18cb      	adds	r3, r1, r3
 800f0ce:	3314      	adds	r3, #20
 800f0d0:	681b      	ldr	r3, [r3, #0]
 800f0d2:	1dfa      	adds	r2, r7, #7
 800f0d4:	7812      	ldrb	r2, [r2, #0]
 800f0d6:	2101      	movs	r1, #1
 800f0d8:	0010      	movs	r0, r2
 800f0da:	4798      	blx	r3
      return;
 800f0dc:	e1bb      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	2204      	movs	r2, #4
 800f0e2:	4013      	ands	r3, r2
 800f0e4:	d03c      	beq.n	800f160 <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	0018      	movs	r0, r3
 800f0ea:	f7ff ff72 	bl	800efd2 <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f0ee:	1dfb      	adds	r3, r7, #7
 800f0f0:	781a      	ldrb	r2, [r3, #0]
 800f0f2:	4979      	ldr	r1, [pc, #484]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f0f4:	0013      	movs	r3, r2
 800f0f6:	011b      	lsls	r3, r3, #4
 800f0f8:	1a9b      	subs	r3, r3, r2
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	18cb      	adds	r3, r1, r3
 800f0fe:	3304      	adds	r3, #4
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	6819      	ldr	r1, [r3, #0]
 800f104:	1dfb      	adds	r3, r7, #7
 800f106:	781a      	ldrb	r2, [r3, #0]
 800f108:	4873      	ldr	r0, [pc, #460]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f10a:	0013      	movs	r3, r2
 800f10c:	011b      	lsls	r3, r3, #4
 800f10e:	1a9b      	subs	r3, r3, r2
 800f110:	009b      	lsls	r3, r3, #2
 800f112:	18c3      	adds	r3, r0, r3
 800f114:	3304      	adds	r3, #4
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2201      	movs	r2, #1
 800f11a:	4391      	bics	r1, r2
 800f11c:	000a      	movs	r2, r1
 800f11e:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800f120:	46c0      	nop			@ (mov r8, r8)
 800f122:	1dfb      	adds	r3, r7, #7
 800f124:	781a      	ldrb	r2, [r3, #0]
 800f126:	496c      	ldr	r1, [pc, #432]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f128:	0013      	movs	r3, r2
 800f12a:	011b      	lsls	r3, r3, #4
 800f12c:	1a9b      	subs	r3, r3, r2
 800f12e:	009b      	lsls	r3, r3, #2
 800f130:	18cb      	adds	r3, r1, r3
 800f132:	3304      	adds	r3, #4
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2201      	movs	r2, #1
 800f13a:	4013      	ands	r3, r2
 800f13c:	2b01      	cmp	r3, #1
 800f13e:	d0f0      	beq.n	800f122 <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800f140:	1dfb      	adds	r3, r7, #7
 800f142:	781a      	ldrb	r2, [r3, #0]
 800f144:	4964      	ldr	r1, [pc, #400]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f146:	0013      	movs	r3, r2
 800f148:	011b      	lsls	r3, r3, #4
 800f14a:	1a9b      	subs	r3, r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	18cb      	adds	r3, r1, r3
 800f150:	3314      	adds	r3, #20
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	1dfa      	adds	r2, r7, #7
 800f156:	7812      	ldrb	r2, [r2, #0]
 800f158:	2100      	movs	r1, #0
 800f15a:	0010      	movs	r0, r2
 800f15c:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 800f15e:	e17a      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	2208      	movs	r2, #8
 800f164:	4013      	ands	r3, r2
 800f166:	d03c      	beq.n	800f1e2 <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	0018      	movs	r0, r3
 800f16c:	f7ff ff23 	bl	800efb6 <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f170:	1dfb      	adds	r3, r7, #7
 800f172:	781a      	ldrb	r2, [r3, #0]
 800f174:	4958      	ldr	r1, [pc, #352]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f176:	0013      	movs	r3, r2
 800f178:	011b      	lsls	r3, r3, #4
 800f17a:	1a9b      	subs	r3, r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	18cb      	adds	r3, r1, r3
 800f180:	3304      	adds	r3, #4
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	6819      	ldr	r1, [r3, #0]
 800f186:	1dfb      	adds	r3, r7, #7
 800f188:	781a      	ldrb	r2, [r3, #0]
 800f18a:	4853      	ldr	r0, [pc, #332]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f18c:	0013      	movs	r3, r2
 800f18e:	011b      	lsls	r3, r3, #4
 800f190:	1a9b      	subs	r3, r3, r2
 800f192:	009b      	lsls	r3, r3, #2
 800f194:	18c3      	adds	r3, r0, r3
 800f196:	3304      	adds	r3, #4
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2201      	movs	r2, #1
 800f19c:	4391      	bics	r1, r2
 800f19e:	000a      	movs	r2, r1
 800f1a0:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 800f1a2:	46c0      	nop			@ (mov r8, r8)
 800f1a4:	1dfb      	adds	r3, r7, #7
 800f1a6:	781a      	ldrb	r2, [r3, #0]
 800f1a8:	494b      	ldr	r1, [pc, #300]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f1aa:	0013      	movs	r3, r2
 800f1ac:	011b      	lsls	r3, r3, #4
 800f1ae:	1a9b      	subs	r3, r3, r2
 800f1b0:	009b      	lsls	r3, r3, #2
 800f1b2:	18cb      	adds	r3, r1, r3
 800f1b4:	3304      	adds	r3, #4
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	2201      	movs	r2, #1
 800f1bc:	4013      	ands	r3, r2
 800f1be:	2b01      	cmp	r3, #1
 800f1c0:	d0f0      	beq.n	800f1a4 <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800f1c2:	1dfb      	adds	r3, r7, #7
 800f1c4:	781a      	ldrb	r2, [r3, #0]
 800f1c6:	4944      	ldr	r1, [pc, #272]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f1c8:	0013      	movs	r3, r2
 800f1ca:	011b      	lsls	r3, r3, #4
 800f1cc:	1a9b      	subs	r3, r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	18cb      	adds	r3, r1, r3
 800f1d2:	3314      	adds	r3, #20
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	1dfa      	adds	r2, r7, #7
 800f1d8:	7812      	ldrb	r2, [r2, #0]
 800f1da:	2102      	movs	r1, #2
 800f1dc:	0010      	movs	r0, r2
 800f1de:	4798      	blx	r3
      return;
 800f1e0:	e139      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	2210      	movs	r2, #16
 800f1e6:	4013      	ands	r3, r2
 800f1e8:	d004      	beq.n	800f1f4 <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	0018      	movs	r0, r3
 800f1ee:	f7ff fed4 	bl	800ef9a <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800f1f2:	e130      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	2220      	movs	r2, #32
 800f1f8:	4013      	ands	r3, r2
 800f1fa:	d013      	beq.n	800f224 <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	0018      	movs	r0, r3
 800f200:	f7ff febd 	bl	800ef7e <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800f204:	1dfb      	adds	r3, r7, #7
 800f206:	781a      	ldrb	r2, [r3, #0]
 800f208:	4933      	ldr	r1, [pc, #204]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f20a:	0013      	movs	r3, r2
 800f20c:	011b      	lsls	r3, r3, #4
 800f20e:	1a9b      	subs	r3, r3, r2
 800f210:	009b      	lsls	r3, r3, #2
 800f212:	18cb      	adds	r3, r1, r3
 800f214:	3324      	adds	r3, #36	@ 0x24
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	1dfa      	adds	r2, r7, #7
 800f21a:	7812      	ldrb	r2, [r2, #0]
 800f21c:	2105      	movs	r1, #5
 800f21e:	0010      	movs	r0, r2
 800f220:	4798      	blx	r3
      return;
 800f222:	e118      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	2240      	movs	r2, #64	@ 0x40
 800f228:	4013      	ands	r3, r2
 800f22a:	d004      	beq.n	800f236 <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	0018      	movs	r0, r3
 800f230:	f7ff fe97 	bl	800ef62 <LL_UCPD_ClearFlag_TxUND>
      return;
 800f234:	e10f      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800f236:	68ba      	ldr	r2, [r7, #8]
 800f238:	2380      	movs	r3, #128	@ 0x80
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	4013      	ands	r3, r2
 800f23e:	d023      	beq.n	800f288 <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f244:	2b05      	cmp	r3, #5
 800f246:	d10e      	bne.n	800f266 <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800f248:	1dfb      	adds	r3, r7, #7
 800f24a:	781a      	ldrb	r2, [r3, #0]
 800f24c:	4922      	ldr	r1, [pc, #136]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f24e:	0013      	movs	r3, r2
 800f250:	011b      	lsls	r3, r3, #4
 800f252:	1a9b      	subs	r3, r3, r2
 800f254:	009b      	lsls	r3, r3, #2
 800f256:	18cb      	adds	r3, r1, r3
 800f258:	331c      	adds	r3, #28
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	1dfa      	adds	r2, r7, #7
 800f25e:	7812      	ldrb	r2, [r2, #0]
 800f260:	2106      	movs	r1, #6
 800f262:	0010      	movs	r0, r2
 800f264:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800f266:	68fb      	ldr	r3, [r7, #12]
 800f268:	0018      	movs	r0, r3
 800f26a:	f7ff fe6b 	bl	800ef44 <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 800f26e:	1dfb      	adds	r3, r7, #7
 800f270:	781a      	ldrb	r2, [r3, #0]
 800f272:	4919      	ldr	r1, [pc, #100]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f274:	2038      	movs	r0, #56	@ 0x38
 800f276:	0013      	movs	r3, r2
 800f278:	011b      	lsls	r3, r3, #4
 800f27a:	1a9b      	subs	r3, r3, r2
 800f27c:	009b      	lsls	r3, r3, #2
 800f27e:	18cb      	adds	r3, r1, r3
 800f280:	181b      	adds	r3, r3, r0
 800f282:	2201      	movs	r2, #1
 800f284:	701a      	strb	r2, [r3, #0]
      return;
 800f286:	e0e6      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800f288:	68ba      	ldr	r2, [r7, #8]
 800f28a:	2380      	movs	r3, #128	@ 0x80
 800f28c:	00db      	lsls	r3, r3, #3
 800f28e:	4013      	ands	r3, r2
 800f290:	d013      	beq.n	800f2ba <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800f292:	1dfb      	adds	r3, r7, #7
 800f294:	781a      	ldrb	r2, [r3, #0]
 800f296:	4910      	ldr	r1, [pc, #64]	@ (800f2d8 <PORTx_IRQHandler+0x2ac>)
 800f298:	0013      	movs	r3, r2
 800f29a:	011b      	lsls	r3, r3, #4
 800f29c:	1a9b      	subs	r3, r3, r2
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	18cb      	adds	r3, r1, r3
 800f2a2:	331c      	adds	r3, #28
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	1dfa      	adds	r2, r7, #7
 800f2a8:	7812      	ldrb	r2, [r2, #0]
 800f2aa:	2105      	movs	r1, #5
 800f2ac:	0010      	movs	r0, r2
 800f2ae:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	0018      	movs	r0, r3
 800f2b4:	f7ff fe37 	bl	800ef26 <LL_UCPD_ClearFlag_RxHRST>
      return;
 800f2b8:	e0cd      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800f2ba:	68ba      	ldr	r2, [r7, #8]
 800f2bc:	2380      	movs	r3, #128	@ 0x80
 800f2be:	011b      	lsls	r3, r3, #4
 800f2c0:	4013      	ands	r3, r2
 800f2c2:	d00d      	beq.n	800f2e0 <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 800f2c4:	1dfb      	adds	r3, r7, #7
 800f2c6:	781b      	ldrb	r3, [r3, #0]
 800f2c8:	4a04      	ldr	r2, [pc, #16]	@ (800f2dc <PORTx_IRQHandler+0x2b0>)
 800f2ca:	2101      	movs	r1, #1
 800f2cc:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	0018      	movs	r0, r3
 800f2d2:	f7ff fe19 	bl	800ef08 <LL_UCPD_ClearFlag_RxOvr>
      return;
 800f2d6:	e0be      	b.n	800f456 <PORTx_IRQHandler+0x42a>
 800f2d8:	2000a734 	.word	0x2000a734
 800f2dc:	2000a720 	.word	0x2000a720
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800f2e0:	68ba      	ldr	r2, [r7, #8]
 800f2e2:	2380      	movs	r3, #128	@ 0x80
 800f2e4:	015b      	lsls	r3, r3, #5
 800f2e6:	4013      	ands	r3, r2
 800f2e8:	d100      	bne.n	800f2ec <PORTx_IRQHandler+0x2c0>
 800f2ea:	e096      	b.n	800f41a <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 800f2ec:	1dfb      	adds	r3, r7, #7
 800f2ee:	781a      	ldrb	r2, [r3, #0]
 800f2f0:	495a      	ldr	r1, [pc, #360]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f2f2:	2038      	movs	r0, #56	@ 0x38
 800f2f4:	0013      	movs	r3, r2
 800f2f6:	011b      	lsls	r3, r3, #4
 800f2f8:	1a9b      	subs	r3, r3, r2
 800f2fa:	009b      	lsls	r3, r3, #2
 800f2fc:	18cb      	adds	r3, r1, r3
 800f2fe:	181b      	adds	r3, r3, r0
 800f300:	2200      	movs	r2, #0
 800f302:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	0018      	movs	r0, r3
 800f308:	f7ff fdef 	bl	800eeea <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800f30c:	1dfb      	adds	r3, r7, #7
 800f30e:	781a      	ldrb	r2, [r3, #0]
 800f310:	4952      	ldr	r1, [pc, #328]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f312:	0013      	movs	r3, r2
 800f314:	011b      	lsls	r3, r3, #4
 800f316:	1a9b      	subs	r3, r3, r2
 800f318:	009b      	lsls	r3, r3, #2
 800f31a:	18cb      	adds	r3, r1, r3
 800f31c:	3308      	adds	r3, #8
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	6819      	ldr	r1, [r3, #0]
 800f322:	1dfb      	adds	r3, r7, #7
 800f324:	781a      	ldrb	r2, [r3, #0]
 800f326:	484d      	ldr	r0, [pc, #308]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f328:	0013      	movs	r3, r2
 800f32a:	011b      	lsls	r3, r3, #4
 800f32c:	1a9b      	subs	r3, r3, r2
 800f32e:	009b      	lsls	r3, r3, #2
 800f330:	18c3      	adds	r3, r0, r3
 800f332:	3308      	adds	r3, #8
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	2201      	movs	r2, #1
 800f338:	4391      	bics	r1, r2
 800f33a:	000a      	movs	r2, r1
 800f33c:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800f33e:	46c0      	nop			@ (mov r8, r8)
 800f340:	1dfb      	adds	r3, r7, #7
 800f342:	781a      	ldrb	r2, [r3, #0]
 800f344:	4945      	ldr	r1, [pc, #276]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f346:	0013      	movs	r3, r2
 800f348:	011b      	lsls	r3, r3, #4
 800f34a:	1a9b      	subs	r3, r3, r2
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	18cb      	adds	r3, r1, r3
 800f350:	3308      	adds	r3, #8
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	2201      	movs	r2, #1
 800f358:	4013      	ands	r3, r2
 800f35a:	2b01      	cmp	r3, #1
 800f35c:	d0f0      	beq.n	800f340 <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800f35e:	1dfb      	adds	r3, r7, #7
 800f360:	781a      	ldrb	r2, [r3, #0]
 800f362:	493e      	ldr	r1, [pc, #248]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f364:	0013      	movs	r3, r2
 800f366:	011b      	lsls	r3, r3, #4
 800f368:	1a9b      	subs	r3, r3, r2
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	18cb      	adds	r3, r1, r3
 800f36e:	3330      	adds	r3, #48	@ 0x30
 800f370:	6818      	ldr	r0, [r3, #0]
 800f372:	1dfb      	adds	r3, r7, #7
 800f374:	781a      	ldrb	r2, [r3, #0]
 800f376:	4939      	ldr	r1, [pc, #228]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f378:	0013      	movs	r3, r2
 800f37a:	011b      	lsls	r3, r3, #4
 800f37c:	1a9b      	subs	r3, r3, r2
 800f37e:	009b      	lsls	r3, r3, #2
 800f380:	18cb      	adds	r3, r1, r3
 800f382:	3308      	adds	r3, #8
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	0002      	movs	r2, r0
 800f388:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800f38a:	1dfb      	adds	r3, r7, #7
 800f38c:	781a      	ldrb	r2, [r3, #0]
 800f38e:	4933      	ldr	r1, [pc, #204]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f390:	0013      	movs	r3, r2
 800f392:	011b      	lsls	r3, r3, #4
 800f394:	1a9b      	subs	r3, r3, r2
 800f396:	009b      	lsls	r3, r3, #2
 800f398:	18cb      	adds	r3, r1, r3
 800f39a:	3308      	adds	r3, #8
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	2284      	movs	r2, #132	@ 0x84
 800f3a0:	0052      	lsls	r2, r2, #1
 800f3a2:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800f3a4:	1dfb      	adds	r3, r7, #7
 800f3a6:	781a      	ldrb	r2, [r3, #0]
 800f3a8:	492c      	ldr	r1, [pc, #176]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f3aa:	0013      	movs	r3, r2
 800f3ac:	011b      	lsls	r3, r3, #4
 800f3ae:	1a9b      	subs	r3, r3, r2
 800f3b0:	009b      	lsls	r3, r3, #2
 800f3b2:	18cb      	adds	r3, r1, r3
 800f3b4:	3308      	adds	r3, #8
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	6819      	ldr	r1, [r3, #0]
 800f3ba:	1dfb      	adds	r3, r7, #7
 800f3bc:	781a      	ldrb	r2, [r3, #0]
 800f3be:	4827      	ldr	r0, [pc, #156]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f3c0:	0013      	movs	r3, r2
 800f3c2:	011b      	lsls	r3, r3, #4
 800f3c4:	1a9b      	subs	r3, r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	18c3      	adds	r3, r0, r3
 800f3ca:	3308      	adds	r3, #8
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	2201      	movs	r2, #1
 800f3d0:	430a      	orrs	r2, r1
 800f3d2:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 800f3d4:	68ba      	ldr	r2, [r7, #8]
 800f3d6:	2380      	movs	r3, #128	@ 0x80
 800f3d8:	019b      	lsls	r3, r3, #6
 800f3da:	4013      	ands	r3, r2
 800f3dc:	d117      	bne.n	800f40e <PORTx_IRQHandler+0x3e2>
 800f3de:	1dfb      	adds	r3, r7, #7
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	4a1f      	ldr	r2, [pc, #124]	@ (800f460 <PORTx_IRQHandler+0x434>)
 800f3e4:	5cd3      	ldrb	r3, [r2, r3]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d111      	bne.n	800f40e <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800f3ea:	1dfb      	adds	r3, r7, #7
 800f3ec:	781a      	ldrb	r2, [r3, #0]
 800f3ee:	491b      	ldr	r1, [pc, #108]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f3f0:	0013      	movs	r3, r2
 800f3f2:	011b      	lsls	r3, r3, #4
 800f3f4:	1a9b      	subs	r3, r3, r2
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	18cb      	adds	r3, r1, r3
 800f3fa:	3320      	adds	r3, #32
 800f3fc:	681a      	ldr	r2, [r3, #0]
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f402:	2107      	movs	r1, #7
 800f404:	4019      	ands	r1, r3
 800f406:	1dfb      	adds	r3, r7, #7
 800f408:	781b      	ldrb	r3, [r3, #0]
 800f40a:	0018      	movs	r0, r3
 800f40c:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 800f40e:	1dfb      	adds	r3, r7, #7
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	4a13      	ldr	r2, [pc, #76]	@ (800f460 <PORTx_IRQHandler+0x434>)
 800f414:	2100      	movs	r1, #0
 800f416:	54d1      	strb	r1, [r2, r3]
      return;
 800f418:	e01d      	b.n	800f456 <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800f41a:	68ba      	ldr	r2, [r7, #8]
 800f41c:	2380      	movs	r3, #128	@ 0x80
 800f41e:	01db      	lsls	r3, r3, #7
 800f420:	4013      	ands	r3, r2
 800f422:	d104      	bne.n	800f42e <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800f424:	68ba      	ldr	r2, [r7, #8]
 800f426:	2380      	movs	r3, #128	@ 0x80
 800f428:	021b      	lsls	r3, r3, #8
 800f42a:	4013      	ands	r3, r2
 800f42c:	d013      	beq.n	800f456 <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800f42e:	68fb      	ldr	r3, [r7, #12]
 800f430:	0018      	movs	r0, r3
 800f432:	f7ff fd4b 	bl	800eecc <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	0018      	movs	r0, r3
 800f43a:	f7ff fd38 	bl	800eeae <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800f43e:	1dfb      	adds	r3, r7, #7
 800f440:	781a      	ldrb	r2, [r3, #0]
 800f442:	4906      	ldr	r1, [pc, #24]	@ (800f45c <PORTx_IRQHandler+0x430>)
 800f444:	0013      	movs	r3, r2
 800f446:	011b      	lsls	r3, r3, #4
 800f448:	1a9b      	subs	r3, r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	18cb      	adds	r3, r1, r3
 800f44e:	332c      	adds	r3, #44	@ 0x2c
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800f454:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 800f456:	46bd      	mov	sp, r7
 800f458:	b004      	add	sp, #16
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	2000a734 	.word	0x2000a734
 800f460:	2000a720 	.word	0x2000a720

0800f464 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800f464:	b590      	push	{r4, r7, lr}
 800f466:	b085      	sub	sp, #20
 800f468:	af00      	add	r7, sp, #0
 800f46a:	60b9      	str	r1, [r7, #8]
 800f46c:	607a      	str	r2, [r7, #4]
 800f46e:	603b      	str	r3, [r7, #0]
 800f470:	240f      	movs	r4, #15
 800f472:	193b      	adds	r3, r7, r4
 800f474:	1c02      	adds	r2, r0, #0
 800f476:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800f478:	193b      	adds	r3, r7, r4
 800f47a:	781a      	ldrb	r2, [r3, #0]
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	6919      	ldr	r1, [r3, #16]
 800f480:	4830      	ldr	r0, [pc, #192]	@ (800f544 <USBPD_PHY_Init+0xe0>)
 800f482:	0013      	movs	r3, r2
 800f484:	011b      	lsls	r3, r3, #4
 800f486:	1a9b      	subs	r3, r3, r2
 800f488:	009b      	lsls	r3, r3, #2
 800f48a:	18c3      	adds	r3, r0, r3
 800f48c:	3314      	adds	r3, #20
 800f48e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800f490:	193b      	adds	r3, r7, r4
 800f492:	781a      	ldrb	r2, [r3, #0]
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	68d9      	ldr	r1, [r3, #12]
 800f498:	482a      	ldr	r0, [pc, #168]	@ (800f544 <USBPD_PHY_Init+0xe0>)
 800f49a:	0013      	movs	r3, r2
 800f49c:	011b      	lsls	r3, r3, #4
 800f49e:	1a9b      	subs	r3, r3, r2
 800f4a0:	009b      	lsls	r3, r3, #2
 800f4a2:	18c3      	adds	r3, r0, r3
 800f4a4:	3318      	adds	r3, #24
 800f4a6:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800f4a8:	193b      	adds	r3, r7, r4
 800f4aa:	781a      	ldrb	r2, [r3, #0]
 800f4ac:	68bb      	ldr	r3, [r7, #8]
 800f4ae:	6859      	ldr	r1, [r3, #4]
 800f4b0:	4824      	ldr	r0, [pc, #144]	@ (800f544 <USBPD_PHY_Init+0xe0>)
 800f4b2:	0013      	movs	r3, r2
 800f4b4:	011b      	lsls	r3, r3, #4
 800f4b6:	1a9b      	subs	r3, r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	18c3      	adds	r3, r0, r3
 800f4bc:	331c      	adds	r3, #28
 800f4be:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800f4c0:	193b      	adds	r3, r7, r4
 800f4c2:	781a      	ldrb	r2, [r3, #0]
 800f4c4:	491f      	ldr	r1, [pc, #124]	@ (800f544 <USBPD_PHY_Init+0xe0>)
 800f4c6:	0013      	movs	r3, r2
 800f4c8:	011b      	lsls	r3, r3, #4
 800f4ca:	1a9b      	subs	r3, r3, r2
 800f4cc:	009b      	lsls	r3, r3, #2
 800f4ce:	18cb      	adds	r3, r1, r3
 800f4d0:	3320      	adds	r3, #32
 800f4d2:	4a1d      	ldr	r2, [pc, #116]	@ (800f548 <USBPD_PHY_Init+0xe4>)
 800f4d4:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800f4d6:	193b      	adds	r3, r7, r4
 800f4d8:	781a      	ldrb	r2, [r3, #0]
 800f4da:	68bb      	ldr	r3, [r7, #8]
 800f4dc:	6899      	ldr	r1, [r3, #8]
 800f4de:	4819      	ldr	r0, [pc, #100]	@ (800f544 <USBPD_PHY_Init+0xe0>)
 800f4e0:	0013      	movs	r3, r2
 800f4e2:	011b      	lsls	r3, r3, #4
 800f4e4:	1a9b      	subs	r3, r3, r2
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	18c3      	adds	r3, r0, r3
 800f4ea:	3324      	adds	r3, #36	@ 0x24
 800f4ec:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800f4ee:	193b      	adds	r3, r7, r4
 800f4f0:	781a      	ldrb	r2, [r3, #0]
 800f4f2:	68bb      	ldr	r3, [r7, #8]
 800f4f4:	6959      	ldr	r1, [r3, #20]
 800f4f6:	4813      	ldr	r0, [pc, #76]	@ (800f544 <USBPD_PHY_Init+0xe0>)
 800f4f8:	0013      	movs	r3, r2
 800f4fa:	011b      	lsls	r3, r3, #4
 800f4fc:	1a9b      	subs	r3, r3, r2
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	18c3      	adds	r3, r0, r3
 800f502:	3328      	adds	r3, #40	@ 0x28
 800f504:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800f506:	193b      	adds	r3, r7, r4
 800f508:	781a      	ldrb	r2, [r3, #0]
 800f50a:	490e      	ldr	r1, [pc, #56]	@ (800f544 <USBPD_PHY_Init+0xe0>)
 800f50c:	0013      	movs	r3, r2
 800f50e:	011b      	lsls	r3, r3, #4
 800f510:	1a9b      	subs	r3, r3, r2
 800f512:	009b      	lsls	r3, r3, #2
 800f514:	18cb      	adds	r3, r1, r3
 800f516:	3330      	adds	r3, #48	@ 0x30
 800f518:	687a      	ldr	r2, [r7, #4]
 800f51a:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800f51c:	193b      	adds	r3, r7, r4
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	4a0a      	ldr	r2, [pc, #40]	@ (800f54c <USBPD_PHY_Init+0xe8>)
 800f522:	00db      	lsls	r3, r3, #3
 800f524:	18d3      	adds	r3, r2, r3
 800f526:	3304      	adds	r3, #4
 800f528:	6a3a      	ldr	r2, [r7, #32]
 800f52a:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800f52c:	193b      	adds	r3, r7, r4
 800f52e:	781a      	ldrb	r2, [r3, #0]
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	6819      	ldr	r1, [r3, #0]
 800f534:	4b05      	ldr	r3, [pc, #20]	@ (800f54c <USBPD_PHY_Init+0xe8>)
 800f536:	00d2      	lsls	r2, r2, #3
 800f538:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 800f53a:	2300      	movs	r3, #0
}
 800f53c:	0018      	movs	r0, r3
 800f53e:	46bd      	mov	sp, r7
 800f540:	b005      	add	sp, #20
 800f542:	bd90      	pop	{r4, r7, pc}
 800f544:	2000a734 	.word	0x2000a734
 800f548:	0800f735 	.word	0x0800f735
 800f54c:	2000a724 	.word	0x2000a724

0800f550 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	0002      	movs	r2, r0
 800f558:	1dfb      	adds	r3, r7, #7
 800f55a:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 800f55c:	4b02      	ldr	r3, [pc, #8]	@ (800f568 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 800f55e:	0018      	movs	r0, r3
 800f560:	46bd      	mov	sp, r7
 800f562:	b002      	add	sp, #8
 800f564:	bd80      	pop	{r7, pc}
 800f566:	46c0      	nop			@ (mov r8, r8)
 800f568:	00000389 	.word	0x00000389

0800f56c <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b082      	sub	sp, #8
 800f570:	af00      	add	r7, sp, #0
 800f572:	0002      	movs	r2, r0
 800f574:	1dfb      	adds	r3, r7, #7
 800f576:	701a      	strb	r2, [r3, #0]
  return 30u;
 800f578:	231e      	movs	r3, #30
}
 800f57a:	0018      	movs	r0, r3
 800f57c:	46bd      	mov	sp, r7
 800f57e:	b002      	add	sp, #8
 800f580:	bd80      	pop	{r7, pc}

0800f582 <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800f582:	b580      	push	{r7, lr}
 800f584:	b082      	sub	sp, #8
 800f586:	af00      	add	r7, sp, #0
 800f588:	0002      	movs	r2, r0
 800f58a:	1dfb      	adds	r3, r7, #7
 800f58c:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 800f58e:	46c0      	nop			@ (mov r8, r8)
 800f590:	46bd      	mov	sp, r7
 800f592:	b002      	add	sp, #8
 800f594:	bd80      	pop	{r7, pc}

0800f596 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800f596:	b580      	push	{r7, lr}
 800f598:	b082      	sub	sp, #8
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	0002      	movs	r2, r0
 800f59e:	1dfb      	adds	r3, r7, #7
 800f5a0:	701a      	strb	r2, [r3, #0]
 800f5a2:	1dbb      	adds	r3, r7, #6
 800f5a4:	1c0a      	adds	r2, r1, #0
 800f5a6:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800f5a8:	1dbb      	adds	r3, r7, #6
 800f5aa:	7819      	ldrb	r1, [r3, #0]
 800f5ac:	1dfb      	adds	r3, r7, #7
 800f5ae:	7818      	ldrb	r0, [r3, #0]
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	f000 f805 	bl	800f5c2 <USBPD_PHY_SendMessage>
 800f5b8:	0003      	movs	r3, r0
}
 800f5ba:	0018      	movs	r0, r3
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	b002      	add	sp, #8
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800f5c2:	b590      	push	{r4, r7, lr}
 800f5c4:	b083      	sub	sp, #12
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	0004      	movs	r4, r0
 800f5ca:	0008      	movs	r0, r1
 800f5cc:	603a      	str	r2, [r7, #0]
 800f5ce:	0019      	movs	r1, r3
 800f5d0:	1dfb      	adds	r3, r7, #7
 800f5d2:	1c22      	adds	r2, r4, #0
 800f5d4:	701a      	strb	r2, [r3, #0]
 800f5d6:	1dbb      	adds	r3, r7, #6
 800f5d8:	1c02      	adds	r2, r0, #0
 800f5da:	701a      	strb	r2, [r3, #0]
 800f5dc:	1d3b      	adds	r3, r7, #4
 800f5de:	1c0a      	adds	r2, r1, #0
 800f5e0:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800f5e2:	1d3b      	adds	r3, r7, #4
 800f5e4:	881c      	ldrh	r4, [r3, #0]
 800f5e6:	683a      	ldr	r2, [r7, #0]
 800f5e8:	1dbb      	adds	r3, r7, #6
 800f5ea:	7819      	ldrb	r1, [r3, #0]
 800f5ec:	1dfb      	adds	r3, r7, #7
 800f5ee:	7818      	ldrb	r0, [r3, #0]
 800f5f0:	0023      	movs	r3, r4
 800f5f2:	f000 fb2f 	bl	800fc54 <USBPD_HW_IF_SendBuffer>
 800f5f6:	0003      	movs	r3, r0
}
 800f5f8:	0018      	movs	r0, r3
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	b003      	add	sp, #12
 800f5fe:	bd90      	pop	{r4, r7, pc}

0800f600 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b082      	sub	sp, #8
 800f604:	af00      	add	r7, sp, #0
 800f606:	0002      	movs	r2, r0
 800f608:	1dfb      	adds	r3, r7, #7
 800f60a:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800f60c:	1dfb      	adds	r3, r7, #7
 800f60e:	781b      	ldrb	r3, [r3, #0]
 800f610:	0018      	movs	r0, r3
 800f612:	f000 fc7d 	bl	800ff10 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800f616:	2300      	movs	r3, #0
}
 800f618:	0018      	movs	r0, r3
 800f61a:	46bd      	mov	sp, r7
 800f61c:	b002      	add	sp, #8
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	0002      	movs	r2, r0
 800f628:	1dfb      	adds	r3, r7, #7
 800f62a:	701a      	strb	r2, [r3, #0]
 800f62c:	1dbb      	adds	r3, r7, #6
 800f62e:	1c0a      	adds	r2, r1, #0
 800f630:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800f632:	1dbb      	adds	r3, r7, #6
 800f634:	781b      	ldrb	r3, [r3, #0]
 800f636:	2b07      	cmp	r3, #7
 800f638:	d104      	bne.n	800f644 <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800f63a:	1dfb      	adds	r3, r7, #7
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	0018      	movs	r0, r3
 800f640:	f000 fad0 	bl	800fbe4 <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	0018      	movs	r0, r3
 800f648:	46bd      	mov	sp, r7
 800f64a:	b002      	add	sp, #8
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b082      	sub	sp, #8
 800f652:	af00      	add	r7, sp, #0
 800f654:	0002      	movs	r2, r0
 800f656:	1dfb      	adds	r3, r7, #7
 800f658:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 800f65a:	1dfb      	adds	r3, r7, #7
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	0018      	movs	r0, r3
 800f660:	f001 f87e 	bl	8010760 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 800f664:	46c0      	nop			@ (mov r8, r8)
 800f666:	46bd      	mov	sp, r7
 800f668:	b002      	add	sp, #8
 800f66a:	bd80      	pop	{r7, pc}

0800f66c <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	0002      	movs	r2, r0
 800f674:	1dfb      	adds	r3, r7, #7
 800f676:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 800f678:	1dfb      	adds	r3, r7, #7
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	0018      	movs	r0, r3
 800f67e:	f001 f889 	bl	8010794 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 800f682:	46c0      	nop			@ (mov r8, r8)
 800f684:	46bd      	mov	sp, r7
 800f686:	b002      	add	sp, #8
 800f688:	bd80      	pop	{r7, pc}
	...

0800f68c <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	0002      	movs	r2, r0
 800f694:	6039      	str	r1, [r7, #0]
 800f696:	1dfb      	adds	r3, r7, #7
 800f698:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 800f69a:	1dfb      	adds	r3, r7, #7
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	4a05      	ldr	r2, [pc, #20]	@ (800f6b4 <USBPD_PHY_SOPSupported+0x28>)
 800f6a0:	00db      	lsls	r3, r3, #3
 800f6a2:	18d3      	adds	r3, r2, r3
 800f6a4:	3304      	adds	r3, #4
 800f6a6:	683a      	ldr	r2, [r7, #0]
 800f6a8:	601a      	str	r2, [r3, #0]
}
 800f6aa:	46c0      	nop			@ (mov r8, r8)
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	b002      	add	sp, #8
 800f6b0:	bd80      	pop	{r7, pc}
 800f6b2:	46c0      	nop			@ (mov r8, r8)
 800f6b4:	2000a724 	.word	0x2000a724

0800f6b8 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800f6b8:	b580      	push	{r7, lr}
 800f6ba:	b082      	sub	sp, #8
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	0002      	movs	r2, r0
 800f6c0:	1dfb      	adds	r3, r7, #7
 800f6c2:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800f6c4:	1dfb      	adds	r3, r7, #7
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	0018      	movs	r0, r3
 800f6ca:	f001 f87d 	bl	80107c8 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800f6ce:	0003      	movs	r3, r0
}
 800f6d0:	0018      	movs	r0, r3
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	b002      	add	sp, #8
 800f6d6:	bd80      	pop	{r7, pc}

0800f6d8 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	b082      	sub	sp, #8
 800f6dc:	af00      	add	r7, sp, #0
 800f6de:	0002      	movs	r2, r0
 800f6e0:	1dfb      	adds	r3, r7, #7
 800f6e2:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 800f6e4:	1dfb      	adds	r3, r7, #7
 800f6e6:	781b      	ldrb	r3, [r3, #0]
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	f001 f8b1 	bl	8010850 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 800f6ee:	46c0      	nop			@ (mov r8, r8)
 800f6f0:	46bd      	mov	sp, r7
 800f6f2:	b002      	add	sp, #8
 800f6f4:	bd80      	pop	{r7, pc}

0800f6f6 <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b082      	sub	sp, #8
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	0002      	movs	r2, r0
 800f6fe:	1dfb      	adds	r3, r7, #7
 800f700:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 800f702:	1dfb      	adds	r3, r7, #7
 800f704:	781b      	ldrb	r3, [r3, #0]
 800f706:	0018      	movs	r0, r3
 800f708:	f000 fe0a 	bl	8010320 <USBPD_HW_IF_EnableRX>
}
 800f70c:	46c0      	nop			@ (mov r8, r8)
 800f70e:	46bd      	mov	sp, r7
 800f710:	b002      	add	sp, #8
 800f712:	bd80      	pop	{r7, pc}

0800f714 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800f714:	b580      	push	{r7, lr}
 800f716:	b082      	sub	sp, #8
 800f718:	af00      	add	r7, sp, #0
 800f71a:	0002      	movs	r2, r0
 800f71c:	1dfb      	adds	r3, r7, #7
 800f71e:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 800f720:	1dfb      	adds	r3, r7, #7
 800f722:	781b      	ldrb	r3, [r3, #0]
 800f724:	0018      	movs	r0, r3
 800f726:	f000 fe13 	bl	8010350 <USBPD_HW_IF_DisableRX>
}
 800f72a:	46c0      	nop			@ (mov r8, r8)
 800f72c:	46bd      	mov	sp, r7
 800f72e:	b002      	add	sp, #8
 800f730:	bd80      	pop	{r7, pc}
	...

0800f734 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800f734:	b590      	push	{r4, r7, lr}
 800f736:	b085      	sub	sp, #20
 800f738:	af00      	add	r7, sp, #0
 800f73a:	0002      	movs	r2, r0
 800f73c:	6039      	str	r1, [r7, #0]
 800f73e:	1dfb      	adds	r3, r7, #7
 800f740:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 800f742:	2008      	movs	r0, #8
 800f744:	183b      	adds	r3, r7, r0
 800f746:	4a2e      	ldr	r2, [pc, #184]	@ (800f800 <PHY_Rx_Completed+0xcc>)
 800f748:	6811      	ldr	r1, [r2, #0]
 800f74a:	6019      	str	r1, [r3, #0]
 800f74c:	8892      	ldrh	r2, [r2, #4]
 800f74e:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800f750:	240f      	movs	r4, #15
 800f752:	193b      	adds	r3, r7, r4
 800f754:	1839      	adds	r1, r7, r0
 800f756:	683a      	ldr	r2, [r7, #0]
 800f758:	188a      	adds	r2, r1, r2
 800f75a:	7812      	ldrb	r2, [r2, #0]
 800f75c:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800f75e:	193b      	adds	r3, r7, r4
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	2b04      	cmp	r3, #4
 800f764:	dc02      	bgt.n	800f76c <PHY_Rx_Completed+0x38>
 800f766:	2b00      	cmp	r3, #0
 800f768:	da1d      	bge.n	800f7a6 <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 800f76a:	e040      	b.n	800f7ee <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 800f76c:	2b06      	cmp	r3, #6
 800f76e:	d13e      	bne.n	800f7ee <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800f770:	1dfb      	adds	r3, r7, #7
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	4a23      	ldr	r2, [pc, #140]	@ (800f804 <PHY_Rx_Completed+0xd0>)
 800f776:	00db      	lsls	r3, r3, #3
 800f778:	18d3      	adds	r3, r2, r3
 800f77a:	3304      	adds	r3, #4
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	221e      	movs	r2, #30
 800f780:	4013      	ands	r3, r2
 800f782:	2b1e      	cmp	r3, #30
 800f784:	d135      	bne.n	800f7f2 <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800f786:	1dfb      	adds	r3, r7, #7
 800f788:	781a      	ldrb	r2, [r3, #0]
 800f78a:	491f      	ldr	r1, [pc, #124]	@ (800f808 <PHY_Rx_Completed+0xd4>)
 800f78c:	0013      	movs	r3, r2
 800f78e:	011b      	lsls	r3, r3, #4
 800f790:	1a9b      	subs	r3, r3, r2
 800f792:	009b      	lsls	r3, r3, #2
 800f794:	18cb      	adds	r3, r1, r3
 800f796:	331c      	adds	r3, #28
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	1dfa      	adds	r2, r7, #7
 800f79c:	7812      	ldrb	r2, [r2, #0]
 800f79e:	2106      	movs	r1, #6
 800f7a0:	0010      	movs	r0, r2
 800f7a2:	4798      	blx	r3
      break;
 800f7a4:	e025      	b.n	800f7f2 <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800f7a6:	240f      	movs	r4, #15
 800f7a8:	193b      	adds	r3, r7, r4
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2201      	movs	r2, #1
 800f7ae:	409a      	lsls	r2, r3
 800f7b0:	0013      	movs	r3, r2
 800f7b2:	b2db      	uxtb	r3, r3
 800f7b4:	0018      	movs	r0, r3
 800f7b6:	1dfb      	adds	r3, r7, #7
 800f7b8:	781b      	ldrb	r3, [r3, #0]
 800f7ba:	4a12      	ldr	r2, [pc, #72]	@ (800f804 <PHY_Rx_Completed+0xd0>)
 800f7bc:	00db      	lsls	r3, r3, #3
 800f7be:	18d3      	adds	r3, r2, r3
 800f7c0:	3304      	adds	r3, #4
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	193a      	adds	r2, r7, r4
 800f7c6:	7812      	ldrb	r2, [r2, #0]
 800f7c8:	2101      	movs	r1, #1
 800f7ca:	4091      	lsls	r1, r2
 800f7cc:	000a      	movs	r2, r1
 800f7ce:	b2d2      	uxtb	r2, r2
 800f7d0:	4013      	ands	r3, r2
 800f7d2:	4298      	cmp	r0, r3
 800f7d4:	d10f      	bne.n	800f7f6 <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800f7d6:	1dfb      	adds	r3, r7, #7
 800f7d8:	781a      	ldrb	r2, [r3, #0]
 800f7da:	4b0a      	ldr	r3, [pc, #40]	@ (800f804 <PHY_Rx_Completed+0xd0>)
 800f7dc:	00d2      	lsls	r2, r2, #3
 800f7de:	58d3      	ldr	r3, [r2, r3]
 800f7e0:	193a      	adds	r2, r7, r4
 800f7e2:	7811      	ldrb	r1, [r2, #0]
 800f7e4:	1dfa      	adds	r2, r7, #7
 800f7e6:	7812      	ldrb	r2, [r2, #0]
 800f7e8:	0010      	movs	r0, r2
 800f7ea:	4798      	blx	r3
      break;
 800f7ec:	e003      	b.n	800f7f6 <PHY_Rx_Completed+0xc2>
      break;
 800f7ee:	46c0      	nop			@ (mov r8, r8)
 800f7f0:	e002      	b.n	800f7f8 <PHY_Rx_Completed+0xc4>
      break;
 800f7f2:	46c0      	nop			@ (mov r8, r8)
 800f7f4:	e000      	b.n	800f7f8 <PHY_Rx_Completed+0xc4>
      break;
 800f7f6:	46c0      	nop			@ (mov r8, r8)
  }
}
 800f7f8:	46c0      	nop			@ (mov r8, r8)
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	b005      	add	sp, #20
 800f7fe:	bd90      	pop	{r4, r7, pc}
 800f800:	08016714 	.word	0x08016714
 800f804:	2000a724 	.word	0x2000a724
 800f808:	2000a734 	.word	0x2000a734

0800f80c <LL_AHB1_GRP1_EnableClock>:
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800f814:	4b07      	ldr	r3, [pc, #28]	@ (800f834 <LL_AHB1_GRP1_EnableClock+0x28>)
 800f816:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800f818:	4b06      	ldr	r3, [pc, #24]	@ (800f834 <LL_AHB1_GRP1_EnableClock+0x28>)
 800f81a:	687a      	ldr	r2, [r7, #4]
 800f81c:	430a      	orrs	r2, r1
 800f81e:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800f820:	4b04      	ldr	r3, [pc, #16]	@ (800f834 <LL_AHB1_GRP1_EnableClock+0x28>)
 800f822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	4013      	ands	r3, r2
 800f828:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f82a:	68fb      	ldr	r3, [r7, #12]
}
 800f82c:	46c0      	nop			@ (mov r8, r8)
 800f82e:	46bd      	mov	sp, r7
 800f830:	b004      	add	sp, #16
 800f832:	bd80      	pop	{r7, pc}
 800f834:	40021000 	.word	0x40021000

0800f838 <LL_APB1_GRP1_EnableClock>:
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800f840:	4b07      	ldr	r3, [pc, #28]	@ (800f860 <LL_APB1_GRP1_EnableClock+0x28>)
 800f842:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800f844:	4b06      	ldr	r3, [pc, #24]	@ (800f860 <LL_APB1_GRP1_EnableClock+0x28>)
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	430a      	orrs	r2, r1
 800f84a:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800f84c:	4b04      	ldr	r3, [pc, #16]	@ (800f860 <LL_APB1_GRP1_EnableClock+0x28>)
 800f84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f850:	687a      	ldr	r2, [r7, #4]
 800f852:	4013      	ands	r3, r2
 800f854:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f856:	68fb      	ldr	r3, [r7, #12]
}
 800f858:	46c0      	nop			@ (mov r8, r8)
 800f85a:	46bd      	mov	sp, r7
 800f85c:	b004      	add	sp, #16
 800f85e:	bd80      	pop	{r7, pc}
 800f860:	40021000 	.word	0x40021000

0800f864 <LL_APB2_GRP1_EnableClock>:
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b084      	sub	sp, #16
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 800f86c:	4b07      	ldr	r3, [pc, #28]	@ (800f88c <LL_APB2_GRP1_EnableClock+0x28>)
 800f86e:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800f870:	4b06      	ldr	r3, [pc, #24]	@ (800f88c <LL_APB2_GRP1_EnableClock+0x28>)
 800f872:	687a      	ldr	r2, [r7, #4]
 800f874:	430a      	orrs	r2, r1
 800f876:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 800f878:	4b04      	ldr	r3, [pc, #16]	@ (800f88c <LL_APB2_GRP1_EnableClock+0x28>)
 800f87a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f87c:	687a      	ldr	r2, [r7, #4]
 800f87e:	4013      	ands	r3, r2
 800f880:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f882:	68fb      	ldr	r3, [r7, #12]
}
 800f884:	46c0      	nop			@ (mov r8, r8)
 800f886:	46bd      	mov	sp, r7
 800f888:	b004      	add	sp, #16
 800f88a:	bd80      	pop	{r7, pc}
 800f88c:	40021000 	.word	0x40021000

0800f890 <LL_UCPD_Enable>:
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	2280      	movs	r2, #128	@ 0x80
 800f89e:	0612      	lsls	r2, r2, #24
 800f8a0:	431a      	orrs	r2, r3
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	601a      	str	r2, [r3, #0]
}
 800f8a6:	46c0      	nop			@ (mov r8, r8)
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	b002      	add	sp, #8
 800f8ac:	bd80      	pop	{r7, pc}

0800f8ae <LL_UCPD_Disable>:
{
 800f8ae:	b580      	push	{r7, lr}
 800f8b0:	b082      	sub	sp, #8
 800f8b2:	af00      	add	r7, sp, #0
 800f8b4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	005b      	lsls	r3, r3, #1
 800f8bc:	085a      	lsrs	r2, r3, #1
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	601a      	str	r2, [r3, #0]
}
 800f8c2:	46c0      	nop			@ (mov r8, r8)
 800f8c4:	46bd      	mov	sp, r7
 800f8c6:	b002      	add	sp, #8
 800f8c8:	bd80      	pop	{r7, pc}
	...

0800f8cc <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	68db      	ldr	r3, [r3, #12]
 800f8d8:	4a03      	ldr	r2, [pc, #12]	@ (800f8e8 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 800f8da:	401a      	ands	r2, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	60da      	str	r2, [r3, #12]
}
 800f8e0:	46c0      	nop			@ (mov r8, r8)
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	b002      	add	sp, #8
 800f8e6:	bd80      	pop	{r7, pc}
 800f8e8:	ffdfffff 	.word	0xffdfffff

0800f8ec <LL_UCPD_TypeCDetectionCC2Disable>:
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b082      	sub	sp, #8
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	2280      	movs	r2, #128	@ 0x80
 800f8fa:	0392      	lsls	r2, r2, #14
 800f8fc:	431a      	orrs	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	60da      	str	r2, [r3, #12]
}
 800f902:	46c0      	nop			@ (mov r8, r8)
 800f904:	46bd      	mov	sp, r7
 800f906:	b002      	add	sp, #8
 800f908:	bd80      	pop	{r7, pc}
	...

0800f90c <LL_UCPD_TypeCDetectionCC1Enable>:
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	4a03      	ldr	r2, [pc, #12]	@ (800f928 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 800f91a:	401a      	ands	r2, r3
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	60da      	str	r2, [r3, #12]
}
 800f920:	46c0      	nop			@ (mov r8, r8)
 800f922:	46bd      	mov	sp, r7
 800f924:	b002      	add	sp, #8
 800f926:	bd80      	pop	{r7, pc}
 800f928:	ffefffff 	.word	0xffefffff

0800f92c <LL_UCPD_TypeCDetectionCC1Disable>:
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68db      	ldr	r3, [r3, #12]
 800f938:	2280      	movs	r2, #128	@ 0x80
 800f93a:	0352      	lsls	r2, r2, #13
 800f93c:	431a      	orrs	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	60da      	str	r2, [r3, #12]
}
 800f942:	46c0      	nop			@ (mov r8, r8)
 800f944:	46bd      	mov	sp, r7
 800f946:	b002      	add	sp, #8
 800f948:	bd80      	pop	{r7, pc}

0800f94a <LL_UCPD_SignalFRSTX>:
{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b082      	sub	sp, #8
 800f94e:	af00      	add	r7, sp, #0
 800f950:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	68db      	ldr	r3, [r3, #12]
 800f956:	2280      	movs	r2, #128	@ 0x80
 800f958:	0292      	lsls	r2, r2, #10
 800f95a:	431a      	orrs	r2, r3
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	60da      	str	r2, [r3, #12]
}
 800f960:	46c0      	nop			@ (mov r8, r8)
 800f962:	46bd      	mov	sp, r7
 800f964:	b002      	add	sp, #8
 800f966:	bd80      	pop	{r7, pc}

0800f968 <LL_UCPD_FRSDetectionEnable>:
{
 800f968:	b580      	push	{r7, lr}
 800f96a:	b082      	sub	sp, #8
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	68db      	ldr	r3, [r3, #12]
 800f974:	2280      	movs	r2, #128	@ 0x80
 800f976:	0252      	lsls	r2, r2, #9
 800f978:	431a      	orrs	r2, r3
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	60da      	str	r2, [r3, #12]
}
 800f97e:	46c0      	nop			@ (mov r8, r8)
 800f980:	46bd      	mov	sp, r7
 800f982:	b002      	add	sp, #8
 800f984:	bd80      	pop	{r7, pc}
	...

0800f988 <LL_UCPD_FRSDetectionDisable>:
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	68db      	ldr	r3, [r3, #12]
 800f994:	4a03      	ldr	r2, [pc, #12]	@ (800f9a4 <LL_UCPD_FRSDetectionDisable+0x1c>)
 800f996:	401a      	ands	r2, r3
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	60da      	str	r2, [r3, #12]
}
 800f99c:	46c0      	nop			@ (mov r8, r8)
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	b002      	add	sp, #8
 800f9a2:	bd80      	pop	{r7, pc}
 800f9a4:	fffeffff 	.word	0xfffeffff

0800f9a8 <LL_UCPD_SetccEnable>:
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b082      	sub	sp, #8
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	68db      	ldr	r3, [r3, #12]
 800f9b6:	4a05      	ldr	r2, [pc, #20]	@ (800f9cc <LL_UCPD_SetccEnable+0x24>)
 800f9b8:	401a      	ands	r2, r3
 800f9ba:	683b      	ldr	r3, [r7, #0]
 800f9bc:	431a      	orrs	r2, r3
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	60da      	str	r2, [r3, #12]
}
 800f9c2:	46c0      	nop			@ (mov r8, r8)
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	b002      	add	sp, #8
 800f9c8:	bd80      	pop	{r7, pc}
 800f9ca:	46c0      	nop			@ (mov r8, r8)
 800f9cc:	fffff3ff 	.word	0xfffff3ff

0800f9d0 <LL_UCPD_SetSNKRole>:
{
 800f9d0:	b580      	push	{r7, lr}
 800f9d2:	b082      	sub	sp, #8
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	68db      	ldr	r3, [r3, #12]
 800f9dc:	2280      	movs	r2, #128	@ 0x80
 800f9de:	0092      	lsls	r2, r2, #2
 800f9e0:	431a      	orrs	r2, r3
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	60da      	str	r2, [r3, #12]
}
 800f9e6:	46c0      	nop			@ (mov r8, r8)
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	b002      	add	sp, #8
 800f9ec:	bd80      	pop	{r7, pc}
	...

0800f9f0 <LL_UCPD_SetSRCRole>:
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	4a03      	ldr	r2, [pc, #12]	@ (800fa0c <LL_UCPD_SetSRCRole+0x1c>)
 800f9fe:	401a      	ands	r2, r3
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	60da      	str	r2, [r3, #12]
}
 800fa04:	46c0      	nop			@ (mov r8, r8)
 800fa06:	46bd      	mov	sp, r7
 800fa08:	b002      	add	sp, #8
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	fffffdff 	.word	0xfffffdff

0800fa10 <LL_UCPD_SetRpResistor>:
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	4a05      	ldr	r2, [pc, #20]	@ (800fa34 <LL_UCPD_SetRpResistor+0x24>)
 800fa20:	401a      	ands	r2, r3
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	431a      	orrs	r2, r3
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	60da      	str	r2, [r3, #12]
}
 800fa2a:	46c0      	nop			@ (mov r8, r8)
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	b002      	add	sp, #8
 800fa30:	bd80      	pop	{r7, pc}
 800fa32:	46c0      	nop			@ (mov r8, r8)
 800fa34:	fffffe7f 	.word	0xfffffe7f

0800fa38 <LL_UCPD_SetCCPin>:
{
 800fa38:	b580      	push	{r7, lr}
 800fa3a:	b082      	sub	sp, #8
 800fa3c:	af00      	add	r7, sp, #0
 800fa3e:	6078      	str	r0, [r7, #4]
 800fa40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	68db      	ldr	r3, [r3, #12]
 800fa46:	2240      	movs	r2, #64	@ 0x40
 800fa48:	4393      	bics	r3, r2
 800fa4a:	001a      	movs	r2, r3
 800fa4c:	683b      	ldr	r3, [r7, #0]
 800fa4e:	431a      	orrs	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	60da      	str	r2, [r3, #12]
}
 800fa54:	46c0      	nop			@ (mov r8, r8)
 800fa56:	46bd      	mov	sp, r7
 800fa58:	b002      	add	sp, #8
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <LL_UCPD_RxEnable>:
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	68db      	ldr	r3, [r3, #12]
 800fa68:	2220      	movs	r2, #32
 800fa6a:	431a      	orrs	r2, r3
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	60da      	str	r2, [r3, #12]
}
 800fa70:	46c0      	nop			@ (mov r8, r8)
 800fa72:	46bd      	mov	sp, r7
 800fa74:	b002      	add	sp, #8
 800fa76:	bd80      	pop	{r7, pc}

0800fa78 <LL_UCPD_RxDisable>:
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	2220      	movs	r2, #32
 800fa86:	4393      	bics	r3, r2
 800fa88:	001a      	movs	r2, r3
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	60da      	str	r2, [r3, #12]
}
 800fa8e:	46c0      	nop			@ (mov r8, r8)
 800fa90:	46bd      	mov	sp, r7
 800fa92:	b002      	add	sp, #8
 800fa94:	bd80      	pop	{r7, pc}

0800fa96 <LL_UCPD_SetRxMode>:
{
 800fa96:	b580      	push	{r7, lr}
 800fa98:	b082      	sub	sp, #8
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
 800fa9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	68db      	ldr	r3, [r3, #12]
 800faa4:	2210      	movs	r2, #16
 800faa6:	4393      	bics	r3, r2
 800faa8:	001a      	movs	r2, r3
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	431a      	orrs	r2, r3
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	60da      	str	r2, [r3, #12]
}
 800fab2:	46c0      	nop			@ (mov r8, r8)
 800fab4:	46bd      	mov	sp, r7
 800fab6:	b002      	add	sp, #8
 800fab8:	bd80      	pop	{r7, pc}

0800faba <LL_UCPD_SendHardReset>:
{
 800faba:	b580      	push	{r7, lr}
 800fabc:	b082      	sub	sp, #8
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68db      	ldr	r3, [r3, #12]
 800fac6:	2208      	movs	r2, #8
 800fac8:	431a      	orrs	r2, r3
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	60da      	str	r2, [r3, #12]
}
 800face:	46c0      	nop			@ (mov r8, r8)
 800fad0:	46bd      	mov	sp, r7
 800fad2:	b002      	add	sp, #8
 800fad4:	bd80      	pop	{r7, pc}

0800fad6 <LL_UCPD_SendMessage>:
{
 800fad6:	b580      	push	{r7, lr}
 800fad8:	b082      	sub	sp, #8
 800fada:	af00      	add	r7, sp, #0
 800fadc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	68db      	ldr	r3, [r3, #12]
 800fae2:	2204      	movs	r2, #4
 800fae4:	431a      	orrs	r2, r3
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	60da      	str	r2, [r3, #12]
}
 800faea:	46c0      	nop			@ (mov r8, r8)
 800faec:	46bd      	mov	sp, r7
 800faee:	b002      	add	sp, #8
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <LL_UCPD_SetTxMode>:
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b082      	sub	sp, #8
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	68db      	ldr	r3, [r3, #12]
 800fb00:	2203      	movs	r2, #3
 800fb02:	4393      	bics	r3, r2
 800fb04:	001a      	movs	r2, r3
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	431a      	orrs	r2, r3
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	60da      	str	r2, [r3, #12]
}
 800fb0e:	46c0      	nop			@ (mov r8, r8)
 800fb10:	46bd      	mov	sp, r7
 800fb12:	b002      	add	sp, #8
 800fb14:	bd80      	pop	{r7, pc}

0800fb16 <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800fb16:	b580      	push	{r7, lr}
 800fb18:	b082      	sub	sp, #8
 800fb1a:	af00      	add	r7, sp, #0
 800fb1c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	2280      	movs	r2, #128	@ 0x80
 800fb24:	05d2      	lsls	r2, r2, #23
 800fb26:	431a      	orrs	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	601a      	str	r2, [r3, #0]
}
 800fb2c:	46c0      	nop			@ (mov r8, r8)
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	b002      	add	sp, #8
 800fb32:	bd80      	pop	{r7, pc}

0800fb34 <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b082      	sub	sp, #8
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4a03      	ldr	r2, [pc, #12]	@ (800fb50 <LL_UCPD_RxDMADisable+0x1c>)
 800fb42:	401a      	ands	r2, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	601a      	str	r2, [r3, #0]
}
 800fb48:	46c0      	nop			@ (mov r8, r8)
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	b002      	add	sp, #8
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	bfffffff 	.word	0xbfffffff

0800fb54 <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	2280      	movs	r2, #128	@ 0x80
 800fb62:	0592      	lsls	r2, r2, #22
 800fb64:	431a      	orrs	r2, r3
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	601a      	str	r2, [r3, #0]
}
 800fb6a:	46c0      	nop			@ (mov r8, r8)
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	b002      	add	sp, #8
 800fb70:	bd80      	pop	{r7, pc}
	...

0800fb74 <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 800fb74:	b580      	push	{r7, lr}
 800fb76:	b082      	sub	sp, #8
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a03      	ldr	r2, [pc, #12]	@ (800fb90 <LL_UCPD_TxDMADisable+0x1c>)
 800fb82:	401a      	ands	r2, r3
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	601a      	str	r2, [r3, #0]
}
 800fb88:	46c0      	nop			@ (mov r8, r8)
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	b002      	add	sp, #8
 800fb8e:	bd80      	pop	{r7, pc}
 800fb90:	dfffffff 	.word	0xdfffffff

0800fb94 <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b082      	sub	sp, #8
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	683a      	ldr	r2, [r7, #0]
 800fba2:	61da      	str	r2, [r3, #28]
}
 800fba4:	46c0      	nop			@ (mov r8, r8)
 800fba6:	46bd      	mov	sp, r7
 800fba8:	b002      	add	sp, #8
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	683a      	ldr	r2, [r7, #0]
 800fbba:	621a      	str	r2, [r3, #32]
}
 800fbbc:	46c0      	nop			@ (mov r8, r8)
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	b002      	add	sp, #8
 800fbc2:	bd80      	pop	{r7, pc}

0800fbc4 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 800fbc4:	b580      	push	{r7, lr}
 800fbc6:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800fbc8:	2380      	movs	r3, #128	@ 0x80
 800fbca:	055b      	lsls	r3, r3, #21
 800fbcc:	0018      	movs	r0, r3
 800fbce:	f7ff fe33 	bl	800f838 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 800fbd2:	2380      	movs	r3, #128	@ 0x80
 800fbd4:	015b      	lsls	r3, r3, #5
 800fbd6:	0018      	movs	r0, r3
 800fbd8:	f7ff fe18 	bl	800f80c <LL_AHB1_GRP1_EnableClock>
}
 800fbdc:	46c0      	nop			@ (mov r8, r8)
 800fbde:	46bd      	mov	sp, r7
 800fbe0:	bd80      	pop	{r7, pc}
	...

0800fbe4 <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b084      	sub	sp, #16
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	0002      	movs	r2, r0
 800fbec:	1dfb      	adds	r3, r7, #7
 800fbee:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 800fbf0:	1dfb      	adds	r3, r7, #7
 800fbf2:	781a      	ldrb	r2, [r3, #0]
 800fbf4:	4916      	ldr	r1, [pc, #88]	@ (800fc50 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800fbf6:	0013      	movs	r3, r2
 800fbf8:	011b      	lsls	r3, r3, #4
 800fbfa:	1a9b      	subs	r3, r3, r2
 800fbfc:	009b      	lsls	r3, r3, #2
 800fbfe:	585b      	ldr	r3, [r3, r1]
 800fc00:	68db      	ldr	r3, [r3, #12]
 800fc02:	2207      	movs	r2, #7
 800fc04:	4393      	bics	r3, r2
 800fc06:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 800fc08:	1dfb      	adds	r3, r7, #7
 800fc0a:	781a      	ldrb	r2, [r3, #0]
 800fc0c:	4910      	ldr	r1, [pc, #64]	@ (800fc50 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800fc0e:	0013      	movs	r3, r2
 800fc10:	011b      	lsls	r3, r3, #4
 800fc12:	1a9b      	subs	r3, r3, r2
 800fc14:	009b      	lsls	r3, r3, #2
 800fc16:	585b      	ldr	r3, [r3, r1]
 800fc18:	0018      	movs	r0, r3
 800fc1a:	f7ff fe48 	bl	800f8ae <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800fc1e:	1dfb      	adds	r3, r7, #7
 800fc20:	781a      	ldrb	r2, [r3, #0]
 800fc22:	490b      	ldr	r1, [pc, #44]	@ (800fc50 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800fc24:	0013      	movs	r3, r2
 800fc26:	011b      	lsls	r3, r3, #4
 800fc28:	1a9b      	subs	r3, r3, r2
 800fc2a:	009b      	lsls	r3, r3, #2
 800fc2c:	585b      	ldr	r3, [r3, r1]
 800fc2e:	0018      	movs	r0, r3
 800fc30:	f7ff fe2e 	bl	800f890 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 800fc34:	1dfb      	adds	r3, r7, #7
 800fc36:	781a      	ldrb	r2, [r3, #0]
 800fc38:	4905      	ldr	r1, [pc, #20]	@ (800fc50 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 800fc3a:	0013      	movs	r3, r2
 800fc3c:	011b      	lsls	r3, r3, #4
 800fc3e:	1a9b      	subs	r3, r3, r2
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	585b      	ldr	r3, [r3, r1]
 800fc44:	68fa      	ldr	r2, [r7, #12]
 800fc46:	60da      	str	r2, [r3, #12]
}
 800fc48:	46c0      	nop			@ (mov r8, r8)
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	b004      	add	sp, #16
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	2000a734 	.word	0x2000a734

0800fc54 <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 800fc54:	b590      	push	{r4, r7, lr}
 800fc56:	b08b      	sub	sp, #44	@ 0x2c
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60ba      	str	r2, [r7, #8]
 800fc5c:	607b      	str	r3, [r7, #4]
 800fc5e:	240f      	movs	r4, #15
 800fc60:	193b      	adds	r3, r7, r4
 800fc62:	1c02      	adds	r2, r0, #0
 800fc64:	701a      	strb	r2, [r3, #0]
 800fc66:	200e      	movs	r0, #14
 800fc68:	183b      	adds	r3, r7, r0
 800fc6a:	1c0a      	adds	r2, r1, #0
 800fc6c:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 800fc6e:	2327      	movs	r3, #39	@ 0x27
 800fc70:	18fb      	adds	r3, r7, r3
 800fc72:	2200      	movs	r2, #0
 800fc74:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 800fc76:	183b      	adds	r3, r7, r0
 800fc78:	781b      	ldrb	r3, [r3, #0]
 800fc7a:	2b05      	cmp	r3, #5
 800fc7c:	d10b      	bne.n	800fc96 <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 800fc7e:	193b      	adds	r3, r7, r4
 800fc80:	781a      	ldrb	r2, [r3, #0]
 800fc82:	499e      	ldr	r1, [pc, #632]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fc84:	0013      	movs	r3, r2
 800fc86:	011b      	lsls	r3, r3, #4
 800fc88:	1a9b      	subs	r3, r3, r2
 800fc8a:	009b      	lsls	r3, r3, #2
 800fc8c:	585b      	ldr	r3, [r3, r1]
 800fc8e:	0018      	movs	r0, r3
 800fc90:	f7ff ff13 	bl	800faba <LL_UCPD_SendHardReset>
 800fc94:	e12a      	b.n	800feec <USBPD_HW_IF_SendBuffer+0x298>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc96:	f3ef 8310 	mrs	r3, PRIMASK
 800fc9a:	61fb      	str	r3, [r7, #28]
  return(result);
 800fc9c:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 800fc9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800fca0:	b672      	cpsid	i
}
 800fca2:	46c0      	nop			@ (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 800fca4:	240f      	movs	r4, #15
 800fca6:	193b      	adds	r3, r7, r4
 800fca8:	781a      	ldrb	r2, [r3, #0]
 800fcaa:	4994      	ldr	r1, [pc, #592]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fcac:	2038      	movs	r0, #56	@ 0x38
 800fcae:	0013      	movs	r3, r2
 800fcb0:	011b      	lsls	r3, r3, #4
 800fcb2:	1a9b      	subs	r3, r3, r2
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	18cb      	adds	r3, r1, r3
 800fcb8:	181b      	adds	r3, r3, r0
 800fcba:	781b      	ldrb	r3, [r3, #0]
 800fcbc:	b2db      	uxtb	r3, r3
 800fcbe:	2b01      	cmp	r3, #1
 800fcc0:	d00e      	beq.n	800fce0 <USBPD_HW_IF_SendBuffer+0x8c>
 800fcc2:	193b      	adds	r3, r7, r4
 800fcc4:	781a      	ldrb	r2, [r3, #0]
 800fcc6:	498d      	ldr	r1, [pc, #564]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fcc8:	0013      	movs	r3, r2
 800fcca:	011b      	lsls	r3, r3, #4
 800fccc:	1a9b      	subs	r3, r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	18cb      	adds	r3, r1, r3
 800fcd2:	3304      	adds	r3, #4
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	4013      	ands	r3, r2
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d10a      	bne.n	800fcf6 <USBPD_HW_IF_SendBuffer+0xa2>
 800fce0:	6a3b      	ldr	r3, [r7, #32]
 800fce2:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fce4:	69bb      	ldr	r3, [r7, #24]
 800fce6:	f383 8810 	msr	PRIMASK, r3
}
 800fcea:	46c0      	nop			@ (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 800fcec:	2327      	movs	r3, #39	@ 0x27
 800fcee:	18fb      	adds	r3, r7, r3
 800fcf0:	2202      	movs	r2, #2
 800fcf2:	701a      	strb	r2, [r3, #0]
 800fcf4:	e0fa      	b.n	800feec <USBPD_HW_IF_SendBuffer+0x298>
 800fcf6:	6a3b      	ldr	r3, [r7, #32]
 800fcf8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcfa:	697b      	ldr	r3, [r7, #20]
 800fcfc:	f383 8810 	msr	PRIMASK, r3
}
 800fd00:	46c0      	nop			@ (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 800fd02:	230e      	movs	r3, #14
 800fd04:	18fb      	adds	r3, r7, r3
 800fd06:	781b      	ldrb	r3, [r3, #0]
 800fd08:	2b07      	cmp	r3, #7
 800fd0a:	d871      	bhi.n	800fdf0 <USBPD_HW_IF_SendBuffer+0x19c>
 800fd0c:	009a      	lsls	r2, r3, #2
 800fd0e:	4b7c      	ldr	r3, [pc, #496]	@ (800ff00 <USBPD_HW_IF_SendBuffer+0x2ac>)
 800fd10:	18d3      	adds	r3, r2, r3
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 800fd16:	240f      	movs	r4, #15
 800fd18:	193b      	adds	r3, r7, r4
 800fd1a:	781a      	ldrb	r2, [r3, #0]
 800fd1c:	4977      	ldr	r1, [pc, #476]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fd1e:	0013      	movs	r3, r2
 800fd20:	011b      	lsls	r3, r3, #4
 800fd22:	1a9b      	subs	r3, r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	585b      	ldr	r3, [r3, r1]
 800fd28:	4a76      	ldr	r2, [pc, #472]	@ (800ff04 <USBPD_HW_IF_SendBuffer+0x2b0>)
 800fd2a:	0011      	movs	r1, r2
 800fd2c:	0018      	movs	r0, r3
 800fd2e:	f7ff ff31 	bl	800fb94 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800fd32:	193b      	adds	r3, r7, r4
 800fd34:	781a      	ldrb	r2, [r3, #0]
 800fd36:	4971      	ldr	r1, [pc, #452]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fd38:	0013      	movs	r3, r2
 800fd3a:	011b      	lsls	r3, r3, #4
 800fd3c:	1a9b      	subs	r3, r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	585b      	ldr	r3, [r3, r1]
 800fd42:	2100      	movs	r1, #0
 800fd44:	0018      	movs	r0, r3
 800fd46:	f7ff fed4 	bl	800faf2 <LL_UCPD_SetTxMode>
          break;
 800fd4a:	e056      	b.n	800fdfa <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 800fd4c:	240f      	movs	r4, #15
 800fd4e:	193b      	adds	r3, r7, r4
 800fd50:	781a      	ldrb	r2, [r3, #0]
 800fd52:	496a      	ldr	r1, [pc, #424]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fd54:	0013      	movs	r3, r2
 800fd56:	011b      	lsls	r3, r3, #4
 800fd58:	1a9b      	subs	r3, r3, r2
 800fd5a:	009b      	lsls	r3, r3, #2
 800fd5c:	585b      	ldr	r3, [r3, r1]
 800fd5e:	4a6a      	ldr	r2, [pc, #424]	@ (800ff08 <USBPD_HW_IF_SendBuffer+0x2b4>)
 800fd60:	0011      	movs	r1, r2
 800fd62:	0018      	movs	r0, r3
 800fd64:	f7ff ff16 	bl	800fb94 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800fd68:	193b      	adds	r3, r7, r4
 800fd6a:	781a      	ldrb	r2, [r3, #0]
 800fd6c:	4963      	ldr	r1, [pc, #396]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fd6e:	0013      	movs	r3, r2
 800fd70:	011b      	lsls	r3, r3, #4
 800fd72:	1a9b      	subs	r3, r3, r2
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	585b      	ldr	r3, [r3, r1]
 800fd78:	2100      	movs	r1, #0
 800fd7a:	0018      	movs	r0, r3
 800fd7c:	f7ff feb9 	bl	800faf2 <LL_UCPD_SetTxMode>
          break;
 800fd80:	e03b      	b.n	800fdfa <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 800fd82:	240f      	movs	r4, #15
 800fd84:	193b      	adds	r3, r7, r4
 800fd86:	781a      	ldrb	r2, [r3, #0]
 800fd88:	495c      	ldr	r1, [pc, #368]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fd8a:	0013      	movs	r3, r2
 800fd8c:	011b      	lsls	r3, r3, #4
 800fd8e:	1a9b      	subs	r3, r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	585b      	ldr	r3, [r3, r1]
 800fd94:	4a5d      	ldr	r2, [pc, #372]	@ (800ff0c <USBPD_HW_IF_SendBuffer+0x2b8>)
 800fd96:	0011      	movs	r1, r2
 800fd98:	0018      	movs	r0, r3
 800fd9a:	f7ff fefb 	bl	800fb94 <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 800fd9e:	193b      	adds	r3, r7, r4
 800fda0:	781a      	ldrb	r2, [r3, #0]
 800fda2:	4956      	ldr	r1, [pc, #344]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fda4:	0013      	movs	r3, r2
 800fda6:	011b      	lsls	r3, r3, #4
 800fda8:	1a9b      	subs	r3, r3, r2
 800fdaa:	009b      	lsls	r3, r3, #2
 800fdac:	585b      	ldr	r3, [r3, r1]
 800fdae:	2100      	movs	r1, #0
 800fdb0:	0018      	movs	r0, r3
 800fdb2:	f7ff fe9e 	bl	800faf2 <LL_UCPD_SetTxMode>
          break;
 800fdb6:	e020      	b.n	800fdfa <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 800fdb8:	230f      	movs	r3, #15
 800fdba:	18fb      	adds	r3, r7, r3
 800fdbc:	781a      	ldrb	r2, [r3, #0]
 800fdbe:	494f      	ldr	r1, [pc, #316]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fdc0:	0013      	movs	r3, r2
 800fdc2:	011b      	lsls	r3, r3, #4
 800fdc4:	1a9b      	subs	r3, r3, r2
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	585b      	ldr	r3, [r3, r1]
 800fdca:	2101      	movs	r1, #1
 800fdcc:	0018      	movs	r0, r3
 800fdce:	f7ff fe90 	bl	800faf2 <LL_UCPD_SetTxMode>
          break;
 800fdd2:	e012      	b.n	800fdfa <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800fdd4:	230f      	movs	r3, #15
 800fdd6:	18fb      	adds	r3, r7, r3
 800fdd8:	781a      	ldrb	r2, [r3, #0]
 800fdda:	4948      	ldr	r1, [pc, #288]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fddc:	0013      	movs	r3, r2
 800fdde:	011b      	lsls	r3, r3, #4
 800fde0:	1a9b      	subs	r3, r3, r2
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	585b      	ldr	r3, [r3, r1]
 800fde6:	2102      	movs	r1, #2
 800fde8:	0018      	movs	r0, r3
 800fdea:	f7ff fe82 	bl	800faf2 <LL_UCPD_SetTxMode>
          break;
 800fdee:	e004      	b.n	800fdfa <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 800fdf0:	2327      	movs	r3, #39	@ 0x27
 800fdf2:	18fb      	adds	r3, r7, r3
 800fdf4:	2202      	movs	r2, #2
 800fdf6:	701a      	strb	r2, [r3, #0]
          break;
 800fdf8:	46c0      	nop			@ (mov r8, r8)
      }

      if (USBPD_OK == _status)
 800fdfa:	2327      	movs	r3, #39	@ 0x27
 800fdfc:	18fb      	adds	r3, r7, r3
 800fdfe:	781b      	ldrb	r3, [r3, #0]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d173      	bne.n	800feec <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800fe04:	200f      	movs	r0, #15
 800fe06:	183b      	adds	r3, r7, r0
 800fe08:	781a      	ldrb	r2, [r3, #0]
 800fe0a:	493c      	ldr	r1, [pc, #240]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fe0c:	0013      	movs	r3, r2
 800fe0e:	011b      	lsls	r3, r3, #4
 800fe10:	1a9b      	subs	r3, r3, r2
 800fe12:	009b      	lsls	r3, r3, #2
 800fe14:	18cb      	adds	r3, r1, r3
 800fe16:	3304      	adds	r3, #4
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	6819      	ldr	r1, [r3, #0]
 800fe1c:	183b      	adds	r3, r7, r0
 800fe1e:	781a      	ldrb	r2, [r3, #0]
 800fe20:	4836      	ldr	r0, [pc, #216]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fe22:	0013      	movs	r3, r2
 800fe24:	011b      	lsls	r3, r3, #4
 800fe26:	1a9b      	subs	r3, r3, r2
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	18c3      	adds	r3, r0, r3
 800fe2c:	3304      	adds	r3, #4
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	2201      	movs	r2, #1
 800fe32:	4391      	bics	r1, r2
 800fe34:	000a      	movs	r2, r1
 800fe36:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 800fe38:	46c0      	nop			@ (mov r8, r8)
 800fe3a:	200f      	movs	r0, #15
 800fe3c:	183b      	adds	r3, r7, r0
 800fe3e:	781a      	ldrb	r2, [r3, #0]
 800fe40:	492e      	ldr	r1, [pc, #184]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fe42:	0013      	movs	r3, r2
 800fe44:	011b      	lsls	r3, r3, #4
 800fe46:	1a9b      	subs	r3, r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	18cb      	adds	r3, r1, r3
 800fe4c:	3304      	adds	r3, #4
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	2201      	movs	r2, #1
 800fe54:	4013      	ands	r3, r2
 800fe56:	2b01      	cmp	r3, #1
 800fe58:	d0ef      	beq.n	800fe3a <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 800fe5a:	0004      	movs	r4, r0
 800fe5c:	193b      	adds	r3, r7, r4
 800fe5e:	781a      	ldrb	r2, [r3, #0]
 800fe60:	4926      	ldr	r1, [pc, #152]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fe62:	0013      	movs	r3, r2
 800fe64:	011b      	lsls	r3, r3, #4
 800fe66:	1a9b      	subs	r3, r3, r2
 800fe68:	009b      	lsls	r3, r3, #2
 800fe6a:	18cb      	adds	r3, r1, r3
 800fe6c:	3304      	adds	r3, #4
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	68ba      	ldr	r2, [r7, #8]
 800fe72:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 800fe74:	193b      	adds	r3, r7, r4
 800fe76:	781a      	ldrb	r2, [r3, #0]
 800fe78:	4920      	ldr	r1, [pc, #128]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fe7a:	0013      	movs	r3, r2
 800fe7c:	011b      	lsls	r3, r3, #4
 800fe7e:	1a9b      	subs	r3, r3, r2
 800fe80:	009b      	lsls	r3, r3, #2
 800fe82:	18cb      	adds	r3, r1, r3
 800fe84:	3304      	adds	r3, #4
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800fe8c:	193b      	adds	r3, r7, r4
 800fe8e:	781a      	ldrb	r2, [r3, #0]
 800fe90:	491a      	ldr	r1, [pc, #104]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fe92:	0013      	movs	r3, r2
 800fe94:	011b      	lsls	r3, r3, #4
 800fe96:	1a9b      	subs	r3, r3, r2
 800fe98:	009b      	lsls	r3, r3, #2
 800fe9a:	18cb      	adds	r3, r1, r3
 800fe9c:	3304      	adds	r3, #4
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	6819      	ldr	r1, [r3, #0]
 800fea2:	193b      	adds	r3, r7, r4
 800fea4:	781a      	ldrb	r2, [r3, #0]
 800fea6:	4815      	ldr	r0, [pc, #84]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fea8:	0013      	movs	r3, r2
 800feaa:	011b      	lsls	r3, r3, #4
 800feac:	1a9b      	subs	r3, r3, r2
 800feae:	009b      	lsls	r3, r3, #2
 800feb0:	18c3      	adds	r3, r0, r3
 800feb2:	3304      	adds	r3, #4
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	2201      	movs	r2, #1
 800feb8:	430a      	orrs	r2, r1
 800feba:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 800febc:	193b      	adds	r3, r7, r4
 800febe:	781a      	ldrb	r2, [r3, #0]
 800fec0:	490e      	ldr	r1, [pc, #56]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fec2:	0013      	movs	r3, r2
 800fec4:	011b      	lsls	r3, r3, #4
 800fec6:	1a9b      	subs	r3, r3, r2
 800fec8:	009b      	lsls	r3, r3, #2
 800feca:	585b      	ldr	r3, [r3, r1]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	0011      	movs	r1, r2
 800fed0:	0018      	movs	r0, r3
 800fed2:	f7ff fe6b 	bl	800fbac <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800fed6:	193b      	adds	r3, r7, r4
 800fed8:	781a      	ldrb	r2, [r3, #0]
 800feda:	4908      	ldr	r1, [pc, #32]	@ (800fefc <USBPD_HW_IF_SendBuffer+0x2a8>)
 800fedc:	0013      	movs	r3, r2
 800fede:	011b      	lsls	r3, r3, #4
 800fee0:	1a9b      	subs	r3, r3, r2
 800fee2:	009b      	lsls	r3, r3, #2
 800fee4:	585b      	ldr	r3, [r3, r1]
 800fee6:	0018      	movs	r0, r3
 800fee8:	f7ff fdf5 	bl	800fad6 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 800feec:	2327      	movs	r3, #39	@ 0x27
 800feee:	18fb      	adds	r3, r7, r3
 800fef0:	781b      	ldrb	r3, [r3, #0]
}
 800fef2:	0018      	movs	r0, r3
 800fef4:	46bd      	mov	sp, r7
 800fef6:	b00b      	add	sp, #44	@ 0x2c
 800fef8:	bd90      	pop	{r4, r7, pc}
 800fefa:	46c0      	nop			@ (mov r8, r8)
 800fefc:	2000a734 	.word	0x2000a734
 800ff00:	08016894 	.word	0x08016894
 800ff04:	0008e318 	.word	0x0008e318
 800ff08:	00031b18 	.word	0x00031b18
 800ff0c:	000360d8 	.word	0x000360d8

0800ff10 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b082      	sub	sp, #8
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	0002      	movs	r2, r0
 800ff18:	1dfb      	adds	r3, r7, #7
 800ff1a:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 800ff1c:	1dfb      	adds	r3, r7, #7
 800ff1e:	781a      	ldrb	r2, [r3, #0]
 800ff20:	490c      	ldr	r1, [pc, #48]	@ (800ff54 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800ff22:	0013      	movs	r3, r2
 800ff24:	011b      	lsls	r3, r3, #4
 800ff26:	1a9b      	subs	r3, r3, r2
 800ff28:	009b      	lsls	r3, r3, #2
 800ff2a:	585b      	ldr	r3, [r3, r1]
 800ff2c:	2102      	movs	r1, #2
 800ff2e:	0018      	movs	r0, r3
 800ff30:	f7ff fddf 	bl	800faf2 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 800ff34:	1dfb      	adds	r3, r7, #7
 800ff36:	781a      	ldrb	r2, [r3, #0]
 800ff38:	4906      	ldr	r1, [pc, #24]	@ (800ff54 <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 800ff3a:	0013      	movs	r3, r2
 800ff3c:	011b      	lsls	r3, r3, #4
 800ff3e:	1a9b      	subs	r3, r3, r2
 800ff40:	009b      	lsls	r3, r3, #2
 800ff42:	585b      	ldr	r3, [r3, r1]
 800ff44:	0018      	movs	r0, r3
 800ff46:	f7ff fdc6 	bl	800fad6 <LL_UCPD_SendMessage>
}
 800ff4a:	46c0      	nop			@ (mov r8, r8)
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	b002      	add	sp, #8
 800ff50:	bd80      	pop	{r7, pc}
 800ff52:	46c0      	nop			@ (mov r8, r8)
 800ff54:	2000a734 	.word	0x2000a734

0800ff58 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b082      	sub	sp, #8
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	0002      	movs	r2, r0
 800ff60:	1dfb      	adds	r3, r7, #7
 800ff62:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800ff64:	2001      	movs	r0, #1
 800ff66:	f7ff fc7d 	bl	800f864 <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 800ff6a:	1dfb      	adds	r3, r7, #7
 800ff6c:	781a      	ldrb	r2, [r3, #0]
 800ff6e:	4953      	ldr	r1, [pc, #332]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 800ff70:	0013      	movs	r3, r2
 800ff72:	011b      	lsls	r3, r3, #4
 800ff74:	1a9b      	subs	r3, r3, r2
 800ff76:	009b      	lsls	r3, r3, #2
 800ff78:	18cb      	adds	r3, r1, r3
 800ff7a:	3310      	adds	r3, #16
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	789b      	ldrb	r3, [r3, #2]
 800ff80:	079b      	lsls	r3, r3, #30
 800ff82:	0f9b      	lsrs	r3, r3, #30
 800ff84:	b2db      	uxtb	r3, r3
 800ff86:	2b02      	cmp	r3, #2
 800ff88:	d021      	beq.n	800ffce <USBPDM1_AssertRp+0x76>
 800ff8a:	dc2f      	bgt.n	800ffec <USBPDM1_AssertRp+0x94>
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d002      	beq.n	800ff96 <USBPDM1_AssertRp+0x3e>
 800ff90:	2b01      	cmp	r3, #1
 800ff92:	d00d      	beq.n	800ffb0 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 800ff94:	e02a      	b.n	800ffec <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 800ff96:	1dfb      	adds	r3, r7, #7
 800ff98:	781a      	ldrb	r2, [r3, #0]
 800ff9a:	4948      	ldr	r1, [pc, #288]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 800ff9c:	0013      	movs	r3, r2
 800ff9e:	011b      	lsls	r3, r3, #4
 800ffa0:	1a9b      	subs	r3, r3, r2
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	585b      	ldr	r3, [r3, r1]
 800ffa6:	2180      	movs	r1, #128	@ 0x80
 800ffa8:	0018      	movs	r0, r3
 800ffaa:	f7ff fd31 	bl	800fa10 <LL_UCPD_SetRpResistor>
      break;
 800ffae:	e01e      	b.n	800ffee <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 800ffb0:	1dfb      	adds	r3, r7, #7
 800ffb2:	781a      	ldrb	r2, [r3, #0]
 800ffb4:	4941      	ldr	r1, [pc, #260]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 800ffb6:	0013      	movs	r3, r2
 800ffb8:	011b      	lsls	r3, r3, #4
 800ffba:	1a9b      	subs	r3, r3, r2
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	585b      	ldr	r3, [r3, r1]
 800ffc0:	2280      	movs	r2, #128	@ 0x80
 800ffc2:	0052      	lsls	r2, r2, #1
 800ffc4:	0011      	movs	r1, r2
 800ffc6:	0018      	movs	r0, r3
 800ffc8:	f7ff fd22 	bl	800fa10 <LL_UCPD_SetRpResistor>
      break;
 800ffcc:	e00f      	b.n	800ffee <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 800ffce:	1dfb      	adds	r3, r7, #7
 800ffd0:	781a      	ldrb	r2, [r3, #0]
 800ffd2:	493a      	ldr	r1, [pc, #232]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 800ffd4:	0013      	movs	r3, r2
 800ffd6:	011b      	lsls	r3, r3, #4
 800ffd8:	1a9b      	subs	r3, r3, r2
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	585b      	ldr	r3, [r3, r1]
 800ffde:	22c0      	movs	r2, #192	@ 0xc0
 800ffe0:	0052      	lsls	r2, r2, #1
 800ffe2:	0011      	movs	r1, r2
 800ffe4:	0018      	movs	r0, r3
 800ffe6:	f7ff fd13 	bl	800fa10 <LL_UCPD_SetRpResistor>
      break;
 800ffea:	e000      	b.n	800ffee <USBPDM1_AssertRp+0x96>
      break;
 800ffec:	46c0      	nop			@ (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 800ffee:	1dfb      	adds	r3, r7, #7
 800fff0:	781a      	ldrb	r2, [r3, #0]
 800fff2:	4932      	ldr	r1, [pc, #200]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 800fff4:	0013      	movs	r3, r2
 800fff6:	011b      	lsls	r3, r3, #4
 800fff8:	1a9b      	subs	r3, r3, r2
 800fffa:	009b      	lsls	r3, r3, #2
 800fffc:	585b      	ldr	r3, [r3, r1]
 800fffe:	2100      	movs	r1, #0
 8010000:	0018      	movs	r0, r3
 8010002:	f7ff fcd1 	bl	800f9a8 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 8010006:	1dfb      	adds	r3, r7, #7
 8010008:	781a      	ldrb	r2, [r3, #0]
 801000a:	492c      	ldr	r1, [pc, #176]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 801000c:	0013      	movs	r3, r2
 801000e:	011b      	lsls	r3, r3, #4
 8010010:	1a9b      	subs	r3, r3, r2
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	585b      	ldr	r3, [r3, r1]
 8010016:	0018      	movs	r0, r3
 8010018:	f7ff fcea 	bl	800f9f0 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 801001c:	1dfb      	adds	r3, r7, #7
 801001e:	781a      	ldrb	r2, [r3, #0]
 8010020:	4926      	ldr	r1, [pc, #152]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 8010022:	0013      	movs	r3, r2
 8010024:	011b      	lsls	r3, r3, #4
 8010026:	1a9b      	subs	r3, r3, r2
 8010028:	009b      	lsls	r3, r3, #2
 801002a:	18cb      	adds	r3, r1, r3
 801002c:	3334      	adds	r3, #52	@ 0x34
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d10e      	bne.n	8010052 <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010034:	1dfb      	adds	r3, r7, #7
 8010036:	781a      	ldrb	r2, [r3, #0]
 8010038:	4920      	ldr	r1, [pc, #128]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 801003a:	0013      	movs	r3, r2
 801003c:	011b      	lsls	r3, r3, #4
 801003e:	1a9b      	subs	r3, r3, r2
 8010040:	009b      	lsls	r3, r3, #2
 8010042:	585b      	ldr	r3, [r3, r1]
 8010044:	22c0      	movs	r2, #192	@ 0xc0
 8010046:	0112      	lsls	r2, r2, #4
 8010048:	0011      	movs	r1, r2
 801004a:	0018      	movs	r0, r3
 801004c:	f7ff fcac 	bl	800f9a8 <LL_UCPD_SetccEnable>
 8010050:	e01b      	b.n	801008a <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8010052:	1dfb      	adds	r3, r7, #7
 8010054:	781a      	ldrb	r2, [r3, #0]
 8010056:	4919      	ldr	r1, [pc, #100]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 8010058:	0013      	movs	r3, r2
 801005a:	011b      	lsls	r3, r3, #4
 801005c:	1a9b      	subs	r3, r3, r2
 801005e:	009b      	lsls	r3, r3, #2
 8010060:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8010062:	1dfb      	adds	r3, r7, #7
 8010064:	781a      	ldrb	r2, [r3, #0]
 8010066:	4915      	ldr	r1, [pc, #84]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 8010068:	0013      	movs	r3, r2
 801006a:	011b      	lsls	r3, r3, #4
 801006c:	1a9b      	subs	r3, r3, r2
 801006e:	009b      	lsls	r3, r3, #2
 8010070:	18cb      	adds	r3, r1, r3
 8010072:	3334      	adds	r3, #52	@ 0x34
 8010074:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8010076:	2b01      	cmp	r3, #1
 8010078:	d102      	bne.n	8010080 <USBPDM1_AssertRp+0x128>
 801007a:	2380      	movs	r3, #128	@ 0x80
 801007c:	00db      	lsls	r3, r3, #3
 801007e:	e001      	b.n	8010084 <USBPDM1_AssertRp+0x12c>
 8010080:	2380      	movs	r3, #128	@ 0x80
 8010082:	011b      	lsls	r3, r3, #4
 8010084:	0019      	movs	r1, r3
 8010086:	f7ff fc8f 	bl	800f9a8 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 801008a:	4b0d      	ldr	r3, [pc, #52]	@ (80100c0 <USBPDM1_AssertRp+0x168>)
 801008c:	6819      	ldr	r1, [r3, #0]
 801008e:	1dfb      	adds	r3, r7, #7
 8010090:	781a      	ldrb	r2, [r3, #0]
 8010092:	480a      	ldr	r0, [pc, #40]	@ (80100bc <USBPDM1_AssertRp+0x164>)
 8010094:	0013      	movs	r3, r2
 8010096:	011b      	lsls	r3, r3, #4
 8010098:	1a9b      	subs	r3, r3, r2
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	581b      	ldr	r3, [r3, r0]
 801009e:	4a09      	ldr	r2, [pc, #36]	@ (80100c4 <USBPDM1_AssertRp+0x16c>)
 80100a0:	4293      	cmp	r3, r2
 80100a2:	d102      	bne.n	80100aa <USBPDM1_AssertRp+0x152>
 80100a4:	2380      	movs	r3, #128	@ 0x80
 80100a6:	009b      	lsls	r3, r3, #2
 80100a8:	e001      	b.n	80100ae <USBPDM1_AssertRp+0x156>
 80100aa:	2380      	movs	r3, #128	@ 0x80
 80100ac:	00db      	lsls	r3, r3, #3
 80100ae:	4a04      	ldr	r2, [pc, #16]	@ (80100c0 <USBPDM1_AssertRp+0x168>)
 80100b0:	430b      	orrs	r3, r1
 80100b2:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 80100b4:	46c0      	nop			@ (mov r8, r8)
 80100b6:	46bd      	mov	sp, r7
 80100b8:	b002      	add	sp, #8
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	2000a734 	.word	0x2000a734
 80100c0:	40010000 	.word	0x40010000
 80100c4:	4000a000 	.word	0x4000a000

080100c8 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	0002      	movs	r2, r0
 80100d0:	1dfb      	adds	r3, r7, #7
 80100d2:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 80100d4:	46c0      	nop			@ (mov r8, r8)
 80100d6:	46bd      	mov	sp, r7
 80100d8:	b002      	add	sp, #8
 80100da:	bd80      	pop	{r7, pc}

080100dc <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 80100dc:	b580      	push	{r7, lr}
 80100de:	b082      	sub	sp, #8
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	0002      	movs	r2, r0
 80100e4:	1dfb      	adds	r3, r7, #7
 80100e6:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 80100e8:	1dfb      	adds	r3, r7, #7
 80100ea:	781a      	ldrb	r2, [r3, #0]
 80100ec:	494b      	ldr	r1, [pc, #300]	@ (801021c <USBPDM1_AssertRd+0x140>)
 80100ee:	0013      	movs	r3, r2
 80100f0:	011b      	lsls	r3, r3, #4
 80100f2:	1a9b      	subs	r3, r3, r2
 80100f4:	009b      	lsls	r3, r3, #2
 80100f6:	585b      	ldr	r3, [r3, r1]
 80100f8:	0018      	movs	r0, r3
 80100fa:	f7ff fbf7 	bl	800f8ec <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 80100fe:	1dfb      	adds	r3, r7, #7
 8010100:	781a      	ldrb	r2, [r3, #0]
 8010102:	4946      	ldr	r1, [pc, #280]	@ (801021c <USBPDM1_AssertRd+0x140>)
 8010104:	0013      	movs	r3, r2
 8010106:	011b      	lsls	r3, r3, #4
 8010108:	1a9b      	subs	r3, r3, r2
 801010a:	009b      	lsls	r3, r3, #2
 801010c:	585b      	ldr	r3, [r3, r1]
 801010e:	0018      	movs	r0, r3
 8010110:	f7ff fc0c 	bl	800f92c <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8010114:	2001      	movs	r0, #1
 8010116:	f7ff fba5 	bl	800f864 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 801011a:	1dfb      	adds	r3, r7, #7
 801011c:	781a      	ldrb	r2, [r3, #0]
 801011e:	493f      	ldr	r1, [pc, #252]	@ (801021c <USBPDM1_AssertRd+0x140>)
 8010120:	0013      	movs	r3, r2
 8010122:	011b      	lsls	r3, r3, #4
 8010124:	1a9b      	subs	r3, r3, r2
 8010126:	009b      	lsls	r3, r3, #2
 8010128:	585b      	ldr	r3, [r3, r1]
 801012a:	2100      	movs	r1, #0
 801012c:	0018      	movs	r0, r3
 801012e:	f7ff fc3b 	bl	800f9a8 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 8010132:	1dfb      	adds	r3, r7, #7
 8010134:	781a      	ldrb	r2, [r3, #0]
 8010136:	4939      	ldr	r1, [pc, #228]	@ (801021c <USBPDM1_AssertRd+0x140>)
 8010138:	0013      	movs	r3, r2
 801013a:	011b      	lsls	r3, r3, #4
 801013c:	1a9b      	subs	r3, r3, r2
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	585b      	ldr	r3, [r3, r1]
 8010142:	0018      	movs	r0, r3
 8010144:	f7ff fc44 	bl	800f9d0 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8010148:	1dfb      	adds	r3, r7, #7
 801014a:	781a      	ldrb	r2, [r3, #0]
 801014c:	4933      	ldr	r1, [pc, #204]	@ (801021c <USBPDM1_AssertRd+0x140>)
 801014e:	0013      	movs	r3, r2
 8010150:	011b      	lsls	r3, r3, #4
 8010152:	1a9b      	subs	r3, r3, r2
 8010154:	009b      	lsls	r3, r3, #2
 8010156:	18cb      	adds	r3, r1, r3
 8010158:	3334      	adds	r3, #52	@ 0x34
 801015a:	681b      	ldr	r3, [r3, #0]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d10e      	bne.n	801017e <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010160:	1dfb      	adds	r3, r7, #7
 8010162:	781a      	ldrb	r2, [r3, #0]
 8010164:	492d      	ldr	r1, [pc, #180]	@ (801021c <USBPDM1_AssertRd+0x140>)
 8010166:	0013      	movs	r3, r2
 8010168:	011b      	lsls	r3, r3, #4
 801016a:	1a9b      	subs	r3, r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	585b      	ldr	r3, [r3, r1]
 8010170:	22c0      	movs	r2, #192	@ 0xc0
 8010172:	0112      	lsls	r2, r2, #4
 8010174:	0011      	movs	r1, r2
 8010176:	0018      	movs	r0, r3
 8010178:	f7ff fc16 	bl	800f9a8 <LL_UCPD_SetccEnable>
 801017c:	e01b      	b.n	80101b6 <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801017e:	1dfb      	adds	r3, r7, #7
 8010180:	781a      	ldrb	r2, [r3, #0]
 8010182:	4926      	ldr	r1, [pc, #152]	@ (801021c <USBPDM1_AssertRd+0x140>)
 8010184:	0013      	movs	r3, r2
 8010186:	011b      	lsls	r3, r3, #4
 8010188:	1a9b      	subs	r3, r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 801018e:	1dfb      	adds	r3, r7, #7
 8010190:	781a      	ldrb	r2, [r3, #0]
 8010192:	4922      	ldr	r1, [pc, #136]	@ (801021c <USBPDM1_AssertRd+0x140>)
 8010194:	0013      	movs	r3, r2
 8010196:	011b      	lsls	r3, r3, #4
 8010198:	1a9b      	subs	r3, r3, r2
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	18cb      	adds	r3, r1, r3
 801019e:	3334      	adds	r3, #52	@ 0x34
 80101a0:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80101a2:	2b01      	cmp	r3, #1
 80101a4:	d102      	bne.n	80101ac <USBPDM1_AssertRd+0xd0>
 80101a6:	2380      	movs	r3, #128	@ 0x80
 80101a8:	00db      	lsls	r3, r3, #3
 80101aa:	e001      	b.n	80101b0 <USBPDM1_AssertRd+0xd4>
 80101ac:	2380      	movs	r3, #128	@ 0x80
 80101ae:	011b      	lsls	r3, r3, #4
 80101b0:	0019      	movs	r1, r3
 80101b2:	f7ff fbf9 	bl	800f9a8 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 80101b6:	4b1a      	ldr	r3, [pc, #104]	@ (8010220 <USBPDM1_AssertRd+0x144>)
 80101b8:	6819      	ldr	r1, [r3, #0]
 80101ba:	1dfb      	adds	r3, r7, #7
 80101bc:	781a      	ldrb	r2, [r3, #0]
 80101be:	4817      	ldr	r0, [pc, #92]	@ (801021c <USBPDM1_AssertRd+0x140>)
 80101c0:	0013      	movs	r3, r2
 80101c2:	011b      	lsls	r3, r3, #4
 80101c4:	1a9b      	subs	r3, r3, r2
 80101c6:	009b      	lsls	r3, r3, #2
 80101c8:	581b      	ldr	r3, [r3, r0]
 80101ca:	4a16      	ldr	r2, [pc, #88]	@ (8010224 <USBPDM1_AssertRd+0x148>)
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d102      	bne.n	80101d6 <USBPDM1_AssertRd+0xfa>
 80101d0:	2380      	movs	r3, #128	@ 0x80
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	e001      	b.n	80101da <USBPDM1_AssertRd+0xfe>
 80101d6:	2380      	movs	r3, #128	@ 0x80
 80101d8:	00db      	lsls	r3, r3, #3
 80101da:	4a11      	ldr	r2, [pc, #68]	@ (8010220 <USBPDM1_AssertRd+0x144>)
 80101dc:	430b      	orrs	r3, r1
 80101de:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 80101e0:	2001      	movs	r0, #1
 80101e2:	f7f7 fbd5 	bl	8007990 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 80101e6:	1dfb      	adds	r3, r7, #7
 80101e8:	781a      	ldrb	r2, [r3, #0]
 80101ea:	490c      	ldr	r1, [pc, #48]	@ (801021c <USBPDM1_AssertRd+0x140>)
 80101ec:	0013      	movs	r3, r2
 80101ee:	011b      	lsls	r3, r3, #4
 80101f0:	1a9b      	subs	r3, r3, r2
 80101f2:	009b      	lsls	r3, r3, #2
 80101f4:	585b      	ldr	r3, [r3, r1]
 80101f6:	0018      	movs	r0, r3
 80101f8:	f7ff fb68 	bl	800f8cc <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 80101fc:	1dfb      	adds	r3, r7, #7
 80101fe:	781a      	ldrb	r2, [r3, #0]
 8010200:	4906      	ldr	r1, [pc, #24]	@ (801021c <USBPDM1_AssertRd+0x140>)
 8010202:	0013      	movs	r3, r2
 8010204:	011b      	lsls	r3, r3, #4
 8010206:	1a9b      	subs	r3, r3, r2
 8010208:	009b      	lsls	r3, r3, #2
 801020a:	585b      	ldr	r3, [r3, r1]
 801020c:	0018      	movs	r0, r3
 801020e:	f7ff fb7d 	bl	800f90c <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 8010212:	46c0      	nop			@ (mov r8, r8)
 8010214:	46bd      	mov	sp, r7
 8010216:	b002      	add	sp, #8
 8010218:	bd80      	pop	{r7, pc}
 801021a:	46c0      	nop			@ (mov r8, r8)
 801021c:	2000a734 	.word	0x2000a734
 8010220:	40010000 	.word	0x40010000
 8010224:	4000a000 	.word	0x4000a000

08010228 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b082      	sub	sp, #8
 801022c:	af00      	add	r7, sp, #0
 801022e:	0002      	movs	r2, r0
 8010230:	1dfb      	adds	r3, r7, #7
 8010232:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 8010234:	46c0      	nop			@ (mov r8, r8)
 8010236:	46bd      	mov	sp, r7
 8010238:	b002      	add	sp, #8
 801023a:	bd80      	pop	{r7, pc}

0801023c <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 801023c:	b580      	push	{r7, lr}
 801023e:	b082      	sub	sp, #8
 8010240:	af00      	add	r7, sp, #0
 8010242:	0002      	movs	r2, r0
 8010244:	1dfb      	adds	r3, r7, #7
 8010246:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8010248:	2001      	movs	r0, #1
 801024a:	f7ff fb0b 	bl	800f864 <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801024e:	1dfb      	adds	r3, r7, #7
 8010250:	781a      	ldrb	r2, [r3, #0]
 8010252:	4930      	ldr	r1, [pc, #192]	@ (8010314 <USBPDM1_EnterErrorRecovery+0xd8>)
 8010254:	0013      	movs	r3, r2
 8010256:	011b      	lsls	r3, r3, #4
 8010258:	1a9b      	subs	r3, r3, r2
 801025a:	009b      	lsls	r3, r3, #2
 801025c:	585b      	ldr	r3, [r3, r1]
 801025e:	0018      	movs	r0, r3
 8010260:	f7ff fbc6 	bl	800f9f0 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 8010264:	1dfb      	adds	r3, r7, #7
 8010266:	781a      	ldrb	r2, [r3, #0]
 8010268:	492a      	ldr	r1, [pc, #168]	@ (8010314 <USBPDM1_EnterErrorRecovery+0xd8>)
 801026a:	0013      	movs	r3, r2
 801026c:	011b      	lsls	r3, r3, #4
 801026e:	1a9b      	subs	r3, r3, r2
 8010270:	009b      	lsls	r3, r3, #2
 8010272:	585b      	ldr	r3, [r3, r1]
 8010274:	2100      	movs	r1, #0
 8010276:	0018      	movs	r0, r3
 8010278:	f7ff fbca 	bl	800fa10 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 801027c:	1dfb      	adds	r3, r7, #7
 801027e:	781a      	ldrb	r2, [r3, #0]
 8010280:	4924      	ldr	r1, [pc, #144]	@ (8010314 <USBPDM1_EnterErrorRecovery+0xd8>)
 8010282:	0013      	movs	r3, r2
 8010284:	011b      	lsls	r3, r3, #4
 8010286:	1a9b      	subs	r3, r3, r2
 8010288:	009b      	lsls	r3, r3, #2
 801028a:	585b      	ldr	r3, [r3, r1]
 801028c:	2100      	movs	r1, #0
 801028e:	0018      	movs	r0, r3
 8010290:	f7ff fb8a 	bl	800f9a8 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8010294:	4b20      	ldr	r3, [pc, #128]	@ (8010318 <USBPDM1_EnterErrorRecovery+0xdc>)
 8010296:	6819      	ldr	r1, [r3, #0]
 8010298:	1dfb      	adds	r3, r7, #7
 801029a:	781a      	ldrb	r2, [r3, #0]
 801029c:	481d      	ldr	r0, [pc, #116]	@ (8010314 <USBPDM1_EnterErrorRecovery+0xd8>)
 801029e:	0013      	movs	r3, r2
 80102a0:	011b      	lsls	r3, r3, #4
 80102a2:	1a9b      	subs	r3, r3, r2
 80102a4:	009b      	lsls	r3, r3, #2
 80102a6:	581b      	ldr	r3, [r3, r0]
 80102a8:	4a1c      	ldr	r2, [pc, #112]	@ (801031c <USBPDM1_EnterErrorRecovery+0xe0>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d102      	bne.n	80102b4 <USBPDM1_EnterErrorRecovery+0x78>
 80102ae:	2380      	movs	r3, #128	@ 0x80
 80102b0:	009b      	lsls	r3, r3, #2
 80102b2:	e001      	b.n	80102b8 <USBPDM1_EnterErrorRecovery+0x7c>
 80102b4:	2380      	movs	r3, #128	@ 0x80
 80102b6:	00db      	lsls	r3, r3, #3
 80102b8:	4a17      	ldr	r2, [pc, #92]	@ (8010318 <USBPDM1_EnterErrorRecovery+0xdc>)
 80102ba:	430b      	orrs	r3, r1
 80102bc:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80102be:	1dfb      	adds	r3, r7, #7
 80102c0:	781a      	ldrb	r2, [r3, #0]
 80102c2:	4914      	ldr	r1, [pc, #80]	@ (8010314 <USBPDM1_EnterErrorRecovery+0xd8>)
 80102c4:	0013      	movs	r3, r2
 80102c6:	011b      	lsls	r3, r3, #4
 80102c8:	1a9b      	subs	r3, r3, r2
 80102ca:	009b      	lsls	r3, r3, #2
 80102cc:	585b      	ldr	r3, [r3, r1]
 80102ce:	0018      	movs	r0, r3
 80102d0:	f7ff fbd2 	bl	800fa78 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 80102d4:	1dfb      	adds	r3, r7, #7
 80102d6:	781a      	ldrb	r2, [r3, #0]
 80102d8:	490e      	ldr	r1, [pc, #56]	@ (8010314 <USBPDM1_EnterErrorRecovery+0xd8>)
 80102da:	0013      	movs	r3, r2
 80102dc:	011b      	lsls	r3, r3, #4
 80102de:	1a9b      	subs	r3, r3, r2
 80102e0:	009b      	lsls	r3, r3, #2
 80102e2:	18cb      	adds	r3, r1, r3
 80102e4:	330c      	adds	r3, #12
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	7a1b      	ldrb	r3, [r3, #8]
 80102ea:	2202      	movs	r2, #2
 80102ec:	4013      	ands	r3, r2
 80102ee:	b2db      	uxtb	r3, r3
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d00a      	beq.n	801030a <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 80102f4:	1dfb      	adds	r3, r7, #7
 80102f6:	781a      	ldrb	r2, [r3, #0]
 80102f8:	4906      	ldr	r1, [pc, #24]	@ (8010314 <USBPDM1_EnterErrorRecovery+0xd8>)
 80102fa:	0013      	movs	r3, r2
 80102fc:	011b      	lsls	r3, r3, #4
 80102fe:	1a9b      	subs	r3, r3, r2
 8010300:	009b      	lsls	r3, r3, #2
 8010302:	585b      	ldr	r3, [r3, r1]
 8010304:	0018      	movs	r0, r3
 8010306:	f7ff fb3f 	bl	800f988 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 801030a:	46c0      	nop			@ (mov r8, r8)
 801030c:	46bd      	mov	sp, r7
 801030e:	b002      	add	sp, #8
 8010310:	bd80      	pop	{r7, pc}
 8010312:	46c0      	nop			@ (mov r8, r8)
 8010314:	2000a734 	.word	0x2000a734
 8010318:	40010000 	.word	0x40010000
 801031c:	4000a000 	.word	0x4000a000

08010320 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b082      	sub	sp, #8
 8010324:	af00      	add	r7, sp, #0
 8010326:	0002      	movs	r2, r0
 8010328:	1dfb      	adds	r3, r7, #7
 801032a:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 801032c:	1dfb      	adds	r3, r7, #7
 801032e:	781a      	ldrb	r2, [r3, #0]
 8010330:	4906      	ldr	r1, [pc, #24]	@ (801034c <USBPD_HW_IF_EnableRX+0x2c>)
 8010332:	0013      	movs	r3, r2
 8010334:	011b      	lsls	r3, r3, #4
 8010336:	1a9b      	subs	r3, r3, r2
 8010338:	009b      	lsls	r3, r3, #2
 801033a:	585b      	ldr	r3, [r3, r1]
 801033c:	0018      	movs	r0, r3
 801033e:	f7ff fb8d 	bl	800fa5c <LL_UCPD_RxEnable>
}
 8010342:	46c0      	nop			@ (mov r8, r8)
 8010344:	46bd      	mov	sp, r7
 8010346:	b002      	add	sp, #8
 8010348:	bd80      	pop	{r7, pc}
 801034a:	46c0      	nop			@ (mov r8, r8)
 801034c:	2000a734 	.word	0x2000a734

08010350 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	0002      	movs	r2, r0
 8010358:	1dfb      	adds	r3, r7, #7
 801035a:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 801035c:	1dfb      	adds	r3, r7, #7
 801035e:	781a      	ldrb	r2, [r3, #0]
 8010360:	4906      	ldr	r1, [pc, #24]	@ (801037c <USBPD_HW_IF_DisableRX+0x2c>)
 8010362:	0013      	movs	r3, r2
 8010364:	011b      	lsls	r3, r3, #4
 8010366:	1a9b      	subs	r3, r3, r2
 8010368:	009b      	lsls	r3, r3, #2
 801036a:	585b      	ldr	r3, [r3, r1]
 801036c:	0018      	movs	r0, r3
 801036e:	f7ff fb83 	bl	800fa78 <LL_UCPD_RxDisable>
}
 8010372:	46c0      	nop			@ (mov r8, r8)
 8010374:	46bd      	mov	sp, r7
 8010376:	b002      	add	sp, #8
 8010378:	bd80      	pop	{r7, pc}
 801037a:	46c0      	nop			@ (mov r8, r8)
 801037c:	2000a734 	.word	0x2000a734

08010380 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 8010380:	b590      	push	{r4, r7, lr}
 8010382:	b085      	sub	sp, #20
 8010384:	af00      	add	r7, sp, #0
 8010386:	0002      	movs	r2, r0
 8010388:	6039      	str	r1, [r7, #0]
 801038a:	1dfb      	adds	r3, r7, #7
 801038c:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 801038e:	f000 fc51 	bl	8010c34 <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 8010392:	1dfb      	adds	r3, r7, #7
 8010394:	781c      	ldrb	r4, [r3, #0]
 8010396:	1dfb      	adds	r3, r7, #7
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	0018      	movs	r0, r3
 801039c:	f7fe fd02 	bl	800eda4 <USBPD_HW_Init_DMATxInstance>
 80103a0:	0001      	movs	r1, r0
 80103a2:	4aa6      	ldr	r2, [pc, #664]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80103a4:	0023      	movs	r3, r4
 80103a6:	011b      	lsls	r3, r3, #4
 80103a8:	1b1b      	subs	r3, r3, r4
 80103aa:	009b      	lsls	r3, r3, #2
 80103ac:	18d3      	adds	r3, r2, r3
 80103ae:	3304      	adds	r3, #4
 80103b0:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 80103b2:	1dfb      	adds	r3, r7, #7
 80103b4:	781c      	ldrb	r4, [r3, #0]
 80103b6:	1dfb      	adds	r3, r7, #7
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	0018      	movs	r0, r3
 80103bc:	f7fe fc88 	bl	800ecd0 <USBPD_HW_Init_DMARxInstance>
 80103c0:	0001      	movs	r1, r0
 80103c2:	4a9e      	ldr	r2, [pc, #632]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80103c4:	0023      	movs	r3, r4
 80103c6:	011b      	lsls	r3, r3, #4
 80103c8:	1b1b      	subs	r3, r3, r4
 80103ca:	009b      	lsls	r3, r3, #2
 80103cc:	18d3      	adds	r3, r2, r3
 80103ce:	3308      	adds	r3, #8
 80103d0:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 80103d2:	1dfb      	adds	r3, r7, #7
 80103d4:	781a      	ldrb	r2, [r3, #0]
 80103d6:	4999      	ldr	r1, [pc, #612]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80103d8:	0013      	movs	r3, r2
 80103da:	011b      	lsls	r3, r3, #4
 80103dc:	1a9b      	subs	r3, r3, r2
 80103de:	009b      	lsls	r3, r3, #2
 80103e0:	585b      	ldr	r3, [r3, r1]
 80103e2:	3330      	adds	r3, #48	@ 0x30
 80103e4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 80103e6:	1dfb      	adds	r3, r7, #7
 80103e8:	781a      	ldrb	r2, [r3, #0]
 80103ea:	4994      	ldr	r1, [pc, #592]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80103ec:	0013      	movs	r3, r2
 80103ee:	011b      	lsls	r3, r3, #4
 80103f0:	1a9b      	subs	r3, r3, r2
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	18cb      	adds	r3, r1, r3
 80103f6:	3308      	adds	r3, #8
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	68fa      	ldr	r2, [r7, #12]
 80103fc:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80103fe:	1dfb      	adds	r3, r7, #7
 8010400:	781a      	ldrb	r2, [r3, #0]
 8010402:	498e      	ldr	r1, [pc, #568]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010404:	0013      	movs	r3, r2
 8010406:	011b      	lsls	r3, r3, #4
 8010408:	1a9b      	subs	r3, r3, r2
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	18cb      	adds	r3, r1, r3
 801040e:	3330      	adds	r3, #48	@ 0x30
 8010410:	6818      	ldr	r0, [r3, #0]
 8010412:	1dfb      	adds	r3, r7, #7
 8010414:	781a      	ldrb	r2, [r3, #0]
 8010416:	4989      	ldr	r1, [pc, #548]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010418:	0013      	movs	r3, r2
 801041a:	011b      	lsls	r3, r3, #4
 801041c:	1a9b      	subs	r3, r3, r2
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	18cb      	adds	r3, r1, r3
 8010422:	3308      	adds	r3, #8
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	0002      	movs	r2, r0
 8010428:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 801042a:	1dfb      	adds	r3, r7, #7
 801042c:	781a      	ldrb	r2, [r3, #0]
 801042e:	4983      	ldr	r1, [pc, #524]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010430:	0013      	movs	r3, r2
 8010432:	011b      	lsls	r3, r3, #4
 8010434:	1a9b      	subs	r3, r3, r2
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	18cb      	adds	r3, r1, r3
 801043a:	3308      	adds	r3, #8
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	2284      	movs	r2, #132	@ 0x84
 8010440:	0052      	lsls	r2, r2, #1
 8010442:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8010444:	1dfb      	adds	r3, r7, #7
 8010446:	781a      	ldrb	r2, [r3, #0]
 8010448:	497c      	ldr	r1, [pc, #496]	@ (801063c <HW_SignalAttachement+0x2bc>)
 801044a:	0013      	movs	r3, r2
 801044c:	011b      	lsls	r3, r3, #4
 801044e:	1a9b      	subs	r3, r3, r2
 8010450:	009b      	lsls	r3, r3, #2
 8010452:	18cb      	adds	r3, r1, r3
 8010454:	3308      	adds	r3, #8
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	6819      	ldr	r1, [r3, #0]
 801045a:	1dfb      	adds	r3, r7, #7
 801045c:	781a      	ldrb	r2, [r3, #0]
 801045e:	4877      	ldr	r0, [pc, #476]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010460:	0013      	movs	r3, r2
 8010462:	011b      	lsls	r3, r3, #4
 8010464:	1a9b      	subs	r3, r3, r2
 8010466:	009b      	lsls	r3, r3, #2
 8010468:	18c3      	adds	r3, r0, r3
 801046a:	3308      	adds	r3, #8
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	2201      	movs	r2, #1
 8010470:	430a      	orrs	r2, r1
 8010472:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8010474:	1dfb      	adds	r3, r7, #7
 8010476:	781a      	ldrb	r2, [r3, #0]
 8010478:	4970      	ldr	r1, [pc, #448]	@ (801063c <HW_SignalAttachement+0x2bc>)
 801047a:	0013      	movs	r3, r2
 801047c:	011b      	lsls	r3, r3, #4
 801047e:	1a9b      	subs	r3, r3, r2
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	585b      	ldr	r3, [r3, r1]
 8010484:	3324      	adds	r3, #36	@ 0x24
 8010486:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8010488:	1dfb      	adds	r3, r7, #7
 801048a:	781a      	ldrb	r2, [r3, #0]
 801048c:	496b      	ldr	r1, [pc, #428]	@ (801063c <HW_SignalAttachement+0x2bc>)
 801048e:	0013      	movs	r3, r2
 8010490:	011b      	lsls	r3, r3, #4
 8010492:	1a9b      	subs	r3, r3, r2
 8010494:	009b      	lsls	r3, r3, #2
 8010496:	18cb      	adds	r3, r1, r3
 8010498:	3304      	adds	r3, #4
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 80104a0:	1dfb      	adds	r3, r7, #7
 80104a2:	781a      	ldrb	r2, [r3, #0]
 80104a4:	4965      	ldr	r1, [pc, #404]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80104a6:	0013      	movs	r3, r2
 80104a8:	011b      	lsls	r3, r3, #4
 80104aa:	1a9b      	subs	r3, r3, r2
 80104ac:	009b      	lsls	r3, r3, #2
 80104ae:	585b      	ldr	r3, [r3, r1]
 80104b0:	6919      	ldr	r1, [r3, #16]
 80104b2:	1dfb      	adds	r3, r7, #7
 80104b4:	781a      	ldrb	r2, [r3, #0]
 80104b6:	4861      	ldr	r0, [pc, #388]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80104b8:	0013      	movs	r3, r2
 80104ba:	011b      	lsls	r3, r3, #4
 80104bc:	1a9b      	subs	r3, r3, r2
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	581b      	ldr	r3, [r3, r0]
 80104c2:	4a5f      	ldr	r2, [pc, #380]	@ (8010640 <HW_SignalAttachement+0x2c0>)
 80104c4:	430a      	orrs	r2, r1
 80104c6:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 80104c8:	1dfb      	adds	r3, r7, #7
 80104ca:	781a      	ldrb	r2, [r3, #0]
 80104cc:	495b      	ldr	r1, [pc, #364]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80104ce:	0013      	movs	r3, r2
 80104d0:	011b      	lsls	r3, r3, #4
 80104d2:	1a9b      	subs	r3, r3, r2
 80104d4:	009b      	lsls	r3, r3, #2
 80104d6:	18cb      	adds	r3, r1, r3
 80104d8:	3334      	adds	r3, #52	@ 0x34
 80104da:	683a      	ldr	r2, [r7, #0]
 80104dc:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 80104de:	1dfb      	adds	r3, r7, #7
 80104e0:	781a      	ldrb	r2, [r3, #0]
 80104e2:	4956      	ldr	r1, [pc, #344]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80104e4:	0013      	movs	r3, r2
 80104e6:	011b      	lsls	r3, r3, #4
 80104e8:	1a9b      	subs	r3, r3, r2
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	5858      	ldr	r0, [r3, r1]
 80104ee:	1dfb      	adds	r3, r7, #7
 80104f0:	781a      	ldrb	r2, [r3, #0]
 80104f2:	4952      	ldr	r1, [pc, #328]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80104f4:	0013      	movs	r3, r2
 80104f6:	011b      	lsls	r3, r3, #4
 80104f8:	1a9b      	subs	r3, r3, r2
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	18cb      	adds	r3, r1, r3
 80104fe:	3334      	adds	r3, #52	@ 0x34
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	2b01      	cmp	r3, #1
 8010504:	d101      	bne.n	801050a <HW_SignalAttachement+0x18a>
 8010506:	2300      	movs	r3, #0
 8010508:	e000      	b.n	801050c <HW_SignalAttachement+0x18c>
 801050a:	2340      	movs	r3, #64	@ 0x40
 801050c:	0019      	movs	r1, r3
 801050e:	f7ff fa93 	bl	800fa38 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8010512:	1dfb      	adds	r3, r7, #7
 8010514:	781a      	ldrb	r2, [r3, #0]
 8010516:	4949      	ldr	r1, [pc, #292]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010518:	0013      	movs	r3, r2
 801051a:	011b      	lsls	r3, r3, #4
 801051c:	1a9b      	subs	r3, r3, r2
 801051e:	009b      	lsls	r3, r3, #2
 8010520:	18cb      	adds	r3, r1, r3
 8010522:	330c      	adds	r3, #12
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	7a1b      	ldrb	r3, [r3, #8]
 8010528:	2202      	movs	r2, #2
 801052a:	4013      	ands	r3, r2
 801052c:	b2db      	uxtb	r3, r3
 801052e:	2b00      	cmp	r3, #0
 8010530:	d034      	beq.n	801059c <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8010532:	1dfb      	adds	r3, r7, #7
 8010534:	781a      	ldrb	r2, [r3, #0]
 8010536:	4941      	ldr	r1, [pc, #260]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010538:	0013      	movs	r3, r2
 801053a:	011b      	lsls	r3, r3, #4
 801053c:	1a9b      	subs	r3, r3, r2
 801053e:	009b      	lsls	r3, r3, #2
 8010540:	18cb      	adds	r3, r1, r3
 8010542:	3334      	adds	r3, #52	@ 0x34
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	2b01      	cmp	r3, #1
 8010548:	d101      	bne.n	801054e <HW_SignalAttachement+0x1ce>
 801054a:	2301      	movs	r3, #1
 801054c:	e000      	b.n	8010550 <HW_SignalAttachement+0x1d0>
 801054e:	2302      	movs	r3, #2
 8010550:	1dfa      	adds	r2, r7, #7
 8010552:	7812      	ldrb	r2, [r2, #0]
 8010554:	0019      	movs	r1, r3
 8010556:	0010      	movs	r0, r2
 8010558:	f7fe fc92 	bl	800ee80 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 801055c:	1dfb      	adds	r3, r7, #7
 801055e:	781a      	ldrb	r2, [r3, #0]
 8010560:	4936      	ldr	r1, [pc, #216]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010562:	0013      	movs	r3, r2
 8010564:	011b      	lsls	r3, r3, #4
 8010566:	1a9b      	subs	r3, r3, r2
 8010568:	009b      	lsls	r3, r3, #2
 801056a:	585b      	ldr	r3, [r3, r1]
 801056c:	0018      	movs	r0, r3
 801056e:	f7ff f9fb 	bl	800f968 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8010572:	1dfb      	adds	r3, r7, #7
 8010574:	781a      	ldrb	r2, [r3, #0]
 8010576:	4931      	ldr	r1, [pc, #196]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010578:	0013      	movs	r3, r2
 801057a:	011b      	lsls	r3, r3, #4
 801057c:	1a9b      	subs	r3, r3, r2
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	585b      	ldr	r3, [r3, r1]
 8010582:	6919      	ldr	r1, [r3, #16]
 8010584:	1dfb      	adds	r3, r7, #7
 8010586:	781a      	ldrb	r2, [r3, #0]
 8010588:	482c      	ldr	r0, [pc, #176]	@ (801063c <HW_SignalAttachement+0x2bc>)
 801058a:	0013      	movs	r3, r2
 801058c:	011b      	lsls	r3, r3, #4
 801058e:	1a9b      	subs	r3, r3, r2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	581b      	ldr	r3, [r3, r0]
 8010594:	2280      	movs	r2, #128	@ 0x80
 8010596:	0352      	lsls	r2, r2, #13
 8010598:	430a      	orrs	r2, r1
 801059a:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 801059c:	1dfb      	adds	r3, r7, #7
 801059e:	781a      	ldrb	r2, [r3, #0]
 80105a0:	4926      	ldr	r1, [pc, #152]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80105a2:	0013      	movs	r3, r2
 80105a4:	011b      	lsls	r3, r3, #4
 80105a6:	1a9b      	subs	r3, r3, r2
 80105a8:	009b      	lsls	r3, r3, #2
 80105aa:	18cb      	adds	r3, r1, r3
 80105ac:	3334      	adds	r3, #52	@ 0x34
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d10e      	bne.n	80105d2 <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 80105b4:	1dfb      	adds	r3, r7, #7
 80105b6:	781a      	ldrb	r2, [r3, #0]
 80105b8:	4920      	ldr	r1, [pc, #128]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80105ba:	0013      	movs	r3, r2
 80105bc:	011b      	lsls	r3, r3, #4
 80105be:	1a9b      	subs	r3, r3, r2
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	585b      	ldr	r3, [r3, r1]
 80105c4:	2280      	movs	r2, #128	@ 0x80
 80105c6:	00d2      	lsls	r2, r2, #3
 80105c8:	0011      	movs	r1, r2
 80105ca:	0018      	movs	r0, r3
 80105cc:	f7ff f9ec 	bl	800f9a8 <LL_UCPD_SetccEnable>
 80105d0:	e00d      	b.n	80105ee <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 80105d2:	1dfb      	adds	r3, r7, #7
 80105d4:	781a      	ldrb	r2, [r3, #0]
 80105d6:	4919      	ldr	r1, [pc, #100]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80105d8:	0013      	movs	r3, r2
 80105da:	011b      	lsls	r3, r3, #4
 80105dc:	1a9b      	subs	r3, r3, r2
 80105de:	009b      	lsls	r3, r3, #2
 80105e0:	585b      	ldr	r3, [r3, r1]
 80105e2:	2280      	movs	r2, #128	@ 0x80
 80105e4:	0112      	lsls	r2, r2, #4
 80105e6:	0011      	movs	r1, r2
 80105e8:	0018      	movs	r0, r3
 80105ea:	f7ff f9dd 	bl	800f9a8 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 80105ee:	1dfb      	adds	r3, r7, #7
 80105f0:	781a      	ldrb	r2, [r3, #0]
 80105f2:	4912      	ldr	r1, [pc, #72]	@ (801063c <HW_SignalAttachement+0x2bc>)
 80105f4:	0013      	movs	r3, r2
 80105f6:	011b      	lsls	r3, r3, #4
 80105f8:	1a9b      	subs	r3, r3, r2
 80105fa:	009b      	lsls	r3, r3, #2
 80105fc:	585b      	ldr	r3, [r3, r1]
 80105fe:	2100      	movs	r1, #0
 8010600:	0018      	movs	r0, r3
 8010602:	f7ff fa48 	bl	800fa96 <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8010606:	1dfb      	adds	r3, r7, #7
 8010608:	781a      	ldrb	r2, [r3, #0]
 801060a:	490c      	ldr	r1, [pc, #48]	@ (801063c <HW_SignalAttachement+0x2bc>)
 801060c:	0013      	movs	r3, r2
 801060e:	011b      	lsls	r3, r3, #4
 8010610:	1a9b      	subs	r3, r3, r2
 8010612:	009b      	lsls	r3, r3, #2
 8010614:	585b      	ldr	r3, [r3, r1]
 8010616:	0018      	movs	r0, r3
 8010618:	f7ff fa7d 	bl	800fb16 <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 801061c:	1dfb      	adds	r3, r7, #7
 801061e:	781a      	ldrb	r2, [r3, #0]
 8010620:	4906      	ldr	r1, [pc, #24]	@ (801063c <HW_SignalAttachement+0x2bc>)
 8010622:	0013      	movs	r3, r2
 8010624:	011b      	lsls	r3, r3, #4
 8010626:	1a9b      	subs	r3, r3, r2
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	585b      	ldr	r3, [r3, r1]
 801062c:	0018      	movs	r0, r3
 801062e:	f7ff fa91 	bl	800fb54 <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8010632:	46c0      	nop			@ (mov r8, r8)
 8010634:	46bd      	mov	sp, r7
 8010636:	b005      	add	sp, #20
 8010638:	bd90      	pop	{r4, r7, pc}
 801063a:	46c0      	nop			@ (mov r8, r8)
 801063c:	2000a734 	.word	0x2000a734
 8010640:	00001e7e 	.word	0x00001e7e

08010644 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b082      	sub	sp, #8
 8010648:	af00      	add	r7, sp, #0
 801064a:	0002      	movs	r2, r0
 801064c:	1dfb      	adds	r3, r7, #7
 801064e:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8010650:	1dfb      	adds	r3, r7, #7
 8010652:	781a      	ldrb	r2, [r3, #0]
 8010654:	4941      	ldr	r1, [pc, #260]	@ (801075c <HW_SignalDetachment+0x118>)
 8010656:	0013      	movs	r3, r2
 8010658:	011b      	lsls	r3, r3, #4
 801065a:	1a9b      	subs	r3, r3, r2
 801065c:	009b      	lsls	r3, r3, #2
 801065e:	585b      	ldr	r3, [r3, r1]
 8010660:	0018      	movs	r0, r3
 8010662:	f7ff fa67 	bl	800fb34 <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 8010666:	1dfb      	adds	r3, r7, #7
 8010668:	781a      	ldrb	r2, [r3, #0]
 801066a:	493c      	ldr	r1, [pc, #240]	@ (801075c <HW_SignalDetachment+0x118>)
 801066c:	0013      	movs	r3, r2
 801066e:	011b      	lsls	r3, r3, #4
 8010670:	1a9b      	subs	r3, r3, r2
 8010672:	009b      	lsls	r3, r3, #2
 8010674:	585b      	ldr	r3, [r3, r1]
 8010676:	0018      	movs	r0, r3
 8010678:	f7ff fa7c 	bl	800fb74 <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 801067c:	1dfb      	adds	r3, r7, #7
 801067e:	781a      	ldrb	r2, [r3, #0]
 8010680:	4936      	ldr	r1, [pc, #216]	@ (801075c <HW_SignalDetachment+0x118>)
 8010682:	0013      	movs	r3, r2
 8010684:	011b      	lsls	r3, r3, #4
 8010686:	1a9b      	subs	r3, r3, r2
 8010688:	009b      	lsls	r3, r3, #2
 801068a:	585b      	ldr	r3, [r3, r1]
 801068c:	0018      	movs	r0, r3
 801068e:	f7ff f9f3 	bl	800fa78 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8010692:	1dfb      	adds	r3, r7, #7
 8010694:	781a      	ldrb	r2, [r3, #0]
 8010696:	4931      	ldr	r1, [pc, #196]	@ (801075c <HW_SignalDetachment+0x118>)
 8010698:	0013      	movs	r3, r2
 801069a:	011b      	lsls	r3, r3, #4
 801069c:	1a9b      	subs	r3, r3, r2
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	585b      	ldr	r3, [r3, r1]
 80106a2:	22c0      	movs	r2, #192	@ 0xc0
 80106a4:	0212      	lsls	r2, r2, #8
 80106a6:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 80106a8:	1dfb      	adds	r3, r7, #7
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	0018      	movs	r0, r3
 80106ae:	f7fe fbdd 	bl	800ee6c <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 80106b2:	1dfb      	adds	r3, r7, #7
 80106b4:	781b      	ldrb	r3, [r3, #0]
 80106b6:	0018      	movs	r0, r3
 80106b8:	f7fe fb6a 	bl	800ed90 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80106bc:	1dfb      	adds	r3, r7, #7
 80106be:	781a      	ldrb	r2, [r3, #0]
 80106c0:	4926      	ldr	r1, [pc, #152]	@ (801075c <HW_SignalDetachment+0x118>)
 80106c2:	0013      	movs	r3, r2
 80106c4:	011b      	lsls	r3, r3, #4
 80106c6:	1a9b      	subs	r3, r3, r2
 80106c8:	009b      	lsls	r3, r3, #2
 80106ca:	585b      	ldr	r3, [r3, r1]
 80106cc:	22c0      	movs	r2, #192	@ 0xc0
 80106ce:	0112      	lsls	r2, r2, #4
 80106d0:	0011      	movs	r1, r2
 80106d2:	0018      	movs	r0, r3
 80106d4:	f7ff f968 	bl	800f9a8 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 80106d8:	1dfb      	adds	r3, r7, #7
 80106da:	781a      	ldrb	r2, [r3, #0]
 80106dc:	491f      	ldr	r1, [pc, #124]	@ (801075c <HW_SignalDetachment+0x118>)
 80106de:	0013      	movs	r3, r2
 80106e0:	011b      	lsls	r3, r3, #4
 80106e2:	1a9b      	subs	r3, r3, r2
 80106e4:	009b      	lsls	r3, r3, #2
 80106e6:	18cb      	adds	r3, r1, r3
 80106e8:	3310      	adds	r3, #16
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	781b      	ldrb	r3, [r3, #0]
 80106ee:	2204      	movs	r2, #4
 80106f0:	4013      	ands	r3, r2
 80106f2:	b2db      	uxtb	r3, r3
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d104      	bne.n	8010702 <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80106f8:	1dfb      	adds	r3, r7, #7
 80106fa:	781b      	ldrb	r3, [r3, #0]
 80106fc:	0018      	movs	r0, r3
 80106fe:	f005 fe6c 	bl	80163da <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8010702:	1dfb      	adds	r3, r7, #7
 8010704:	781a      	ldrb	r2, [r3, #0]
 8010706:	4915      	ldr	r1, [pc, #84]	@ (801075c <HW_SignalDetachment+0x118>)
 8010708:	0013      	movs	r3, r2
 801070a:	011b      	lsls	r3, r3, #4
 801070c:	1a9b      	subs	r3, r3, r2
 801070e:	009b      	lsls	r3, r3, #2
 8010710:	18cb      	adds	r3, r1, r3
 8010712:	330c      	adds	r3, #12
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	7a1b      	ldrb	r3, [r3, #8]
 8010718:	2202      	movs	r2, #2
 801071a:	4013      	ands	r3, r2
 801071c:	b2db      	uxtb	r3, r3
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00a      	beq.n	8010738 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8010722:	1dfb      	adds	r3, r7, #7
 8010724:	781a      	ldrb	r2, [r3, #0]
 8010726:	490d      	ldr	r1, [pc, #52]	@ (801075c <HW_SignalDetachment+0x118>)
 8010728:	0013      	movs	r3, r2
 801072a:	011b      	lsls	r3, r3, #4
 801072c:	1a9b      	subs	r3, r3, r2
 801072e:	009b      	lsls	r3, r3, #2
 8010730:	585b      	ldr	r3, [r3, r1]
 8010732:	0018      	movs	r0, r3
 8010734:	f7ff f928 	bl	800f988 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8010738:	1dfb      	adds	r3, r7, #7
 801073a:	781a      	ldrb	r2, [r3, #0]
 801073c:	4907      	ldr	r1, [pc, #28]	@ (801075c <HW_SignalDetachment+0x118>)
 801073e:	0013      	movs	r3, r2
 8010740:	011b      	lsls	r3, r3, #4
 8010742:	1a9b      	subs	r3, r3, r2
 8010744:	009b      	lsls	r3, r3, #2
 8010746:	18cb      	adds	r3, r1, r3
 8010748:	3334      	adds	r3, #52	@ 0x34
 801074a:	2200      	movs	r2, #0
 801074c:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 801074e:	f000 fb11 	bl	8010d74 <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8010752:	46c0      	nop			@ (mov r8, r8)
 8010754:	46bd      	mov	sp, r7
 8010756:	b002      	add	sp, #8
 8010758:	bd80      	pop	{r7, pc}
 801075a:	46c0      	nop			@ (mov r8, r8)
 801075c:	2000a734 	.word	0x2000a734

08010760 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b082      	sub	sp, #8
 8010764:	af00      	add	r7, sp, #0
 8010766:	0002      	movs	r2, r0
 8010768:	1dfb      	adds	r3, r7, #7
 801076a:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 801076c:	1dfb      	adds	r3, r7, #7
 801076e:	781a      	ldrb	r2, [r3, #0]
 8010770:	4907      	ldr	r1, [pc, #28]	@ (8010790 <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 8010772:	0013      	movs	r3, r2
 8010774:	011b      	lsls	r3, r3, #4
 8010776:	1a9b      	subs	r3, r3, r2
 8010778:	009b      	lsls	r3, r3, #2
 801077a:	585b      	ldr	r3, [r3, r1]
 801077c:	2280      	movs	r2, #128	@ 0x80
 801077e:	0052      	lsls	r2, r2, #1
 8010780:	0011      	movs	r1, r2
 8010782:	0018      	movs	r0, r3
 8010784:	f7ff f944 	bl	800fa10 <LL_UCPD_SetRpResistor>
}
 8010788:	46c0      	nop			@ (mov r8, r8)
 801078a:	46bd      	mov	sp, r7
 801078c:	b002      	add	sp, #8
 801078e:	bd80      	pop	{r7, pc}
 8010790:	2000a734 	.word	0x2000a734

08010794 <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	0002      	movs	r2, r0
 801079c:	1dfb      	adds	r3, r7, #7
 801079e:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80107a0:	1dfb      	adds	r3, r7, #7
 80107a2:	781a      	ldrb	r2, [r3, #0]
 80107a4:	4907      	ldr	r1, [pc, #28]	@ (80107c4 <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 80107a6:	0013      	movs	r3, r2
 80107a8:	011b      	lsls	r3, r3, #4
 80107aa:	1a9b      	subs	r3, r3, r2
 80107ac:	009b      	lsls	r3, r3, #2
 80107ae:	585b      	ldr	r3, [r3, r1]
 80107b0:	22c0      	movs	r2, #192	@ 0xc0
 80107b2:	0052      	lsls	r2, r2, #1
 80107b4:	0011      	movs	r1, r2
 80107b6:	0018      	movs	r0, r3
 80107b8:	f7ff f92a 	bl	800fa10 <LL_UCPD_SetRpResistor>
}
 80107bc:	46c0      	nop			@ (mov r8, r8)
 80107be:	46bd      	mov	sp, r7
 80107c0:	b002      	add	sp, #8
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	2000a734 	.word	0x2000a734

080107c8 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	0002      	movs	r2, r0
 80107d0:	1dfb      	adds	r3, r7, #7
 80107d2:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 80107d4:	1dfb      	adds	r3, r7, #7
 80107d6:	781a      	ldrb	r2, [r3, #0]
 80107d8:	491c      	ldr	r1, [pc, #112]	@ (801084c <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 80107da:	0013      	movs	r3, r2
 80107dc:	011b      	lsls	r3, r3, #4
 80107de:	1a9b      	subs	r3, r3, r2
 80107e0:	009b      	lsls	r3, r3, #2
 80107e2:	18cb      	adds	r3, r1, r3
 80107e4:	3334      	adds	r3, #52	@ 0x34
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d002      	beq.n	80107f2 <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 80107ec:	2b02      	cmp	r3, #2
 80107ee:	d012      	beq.n	8010816 <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 80107f0:	e026      	b.n	8010840 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 80107f2:	1dfb      	adds	r3, r7, #7
 80107f4:	781a      	ldrb	r2, [r3, #0]
 80107f6:	4915      	ldr	r1, [pc, #84]	@ (801084c <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 80107f8:	0013      	movs	r3, r2
 80107fa:	011b      	lsls	r3, r3, #4
 80107fc:	1a9b      	subs	r3, r3, r2
 80107fe:	009b      	lsls	r3, r3, #2
 8010800:	585b      	ldr	r3, [r3, r1]
 8010802:	695a      	ldr	r2, [r3, #20]
 8010804:	23c0      	movs	r3, #192	@ 0xc0
 8010806:	029b      	lsls	r3, r3, #10
 8010808:	401a      	ands	r2, r3
 801080a:	23c0      	movs	r3, #192	@ 0xc0
 801080c:	029b      	lsls	r3, r3, #10
 801080e:	429a      	cmp	r2, r3
 8010810:	d113      	bne.n	801083a <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 8010812:	2301      	movs	r3, #1
 8010814:	e015      	b.n	8010842 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8010816:	1dfb      	adds	r3, r7, #7
 8010818:	781a      	ldrb	r2, [r3, #0]
 801081a:	490c      	ldr	r1, [pc, #48]	@ (801084c <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 801081c:	0013      	movs	r3, r2
 801081e:	011b      	lsls	r3, r3, #4
 8010820:	1a9b      	subs	r3, r3, r2
 8010822:	009b      	lsls	r3, r3, #2
 8010824:	585b      	ldr	r3, [r3, r1]
 8010826:	695a      	ldr	r2, [r3, #20]
 8010828:	23c0      	movs	r3, #192	@ 0xc0
 801082a:	031b      	lsls	r3, r3, #12
 801082c:	401a      	ands	r2, r3
 801082e:	23c0      	movs	r3, #192	@ 0xc0
 8010830:	031b      	lsls	r3, r3, #12
 8010832:	429a      	cmp	r2, r3
 8010834:	d103      	bne.n	801083e <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 8010836:	2301      	movs	r3, #1
 8010838:	e003      	b.n	8010842 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 801083a:	46c0      	nop			@ (mov r8, r8)
 801083c:	e000      	b.n	8010840 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 801083e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBPD_FALSE;
 8010840:	2300      	movs	r3, #0
}
 8010842:	0018      	movs	r0, r3
 8010844:	46bd      	mov	sp, r7
 8010846:	b002      	add	sp, #8
 8010848:	bd80      	pop	{r7, pc}
 801084a:	46c0      	nop			@ (mov r8, r8)
 801084c:	2000a734 	.word	0x2000a734

08010850 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b082      	sub	sp, #8
 8010854:	af00      	add	r7, sp, #0
 8010856:	0002      	movs	r2, r0
 8010858:	1dfb      	adds	r3, r7, #7
 801085a:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 801085c:	1dfb      	adds	r3, r7, #7
 801085e:	781a      	ldrb	r2, [r3, #0]
 8010860:	4906      	ldr	r1, [pc, #24]	@ (801087c <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 8010862:	0013      	movs	r3, r2
 8010864:	011b      	lsls	r3, r3, #4
 8010866:	1a9b      	subs	r3, r3, r2
 8010868:	009b      	lsls	r3, r3, #2
 801086a:	585b      	ldr	r3, [r3, r1]
 801086c:	0018      	movs	r0, r3
 801086e:	f7ff f86c 	bl	800f94a <LL_UCPD_SignalFRSTX>
}
 8010872:	46c0      	nop			@ (mov r8, r8)
 8010874:	46bd      	mov	sp, r7
 8010876:	b002      	add	sp, #8
 8010878:	bd80      	pop	{r7, pc}
 801087a:	46c0      	nop			@ (mov r8, r8)
 801087c:	2000a734 	.word	0x2000a734

08010880 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	0002      	movs	r2, r0
 8010888:	1dfb      	adds	r3, r7, #7
 801088a:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801088c:	1dfb      	adds	r3, r7, #7
 801088e:	781b      	ldrb	r3, [r3, #0]
 8010890:	220c      	movs	r2, #12
 8010892:	18ba      	adds	r2, r7, r2
 8010894:	0011      	movs	r1, r2
 8010896:	0018      	movs	r0, r3
 8010898:	f005 fdb1 	bl	80163fe <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	b29b      	uxth	r3, r3
}
 80108a0:	0018      	movs	r0, r3
 80108a2:	46bd      	mov	sp, r7
 80108a4:	b004      	add	sp, #16
 80108a6:	bd80      	pop	{r7, pc}

080108a8 <LL_APB2_GRP1_EnableClock>:
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80108b0:	4b07      	ldr	r3, [pc, #28]	@ (80108d0 <LL_APB2_GRP1_EnableClock+0x28>)
 80108b2:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80108b4:	4b06      	ldr	r3, [pc, #24]	@ (80108d0 <LL_APB2_GRP1_EnableClock+0x28>)
 80108b6:	687a      	ldr	r2, [r7, #4]
 80108b8:	430a      	orrs	r2, r1
 80108ba:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80108bc:	4b04      	ldr	r3, [pc, #16]	@ (80108d0 <LL_APB2_GRP1_EnableClock+0x28>)
 80108be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80108c0:	687a      	ldr	r2, [r7, #4]
 80108c2:	4013      	ands	r3, r2
 80108c4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80108c6:	68fb      	ldr	r3, [r7, #12]
}
 80108c8:	46c0      	nop			@ (mov r8, r8)
 80108ca:	46bd      	mov	sp, r7
 80108cc:	b004      	add	sp, #16
 80108ce:	bd80      	pop	{r7, pc}
 80108d0:	40021000 	.word	0x40021000

080108d4 <LL_APB2_GRP1_DisableClock>:
{
 80108d4:	b580      	push	{r7, lr}
 80108d6:	b082      	sub	sp, #8
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 80108dc:	4b05      	ldr	r3, [pc, #20]	@ (80108f4 <LL_APB2_GRP1_DisableClock+0x20>)
 80108de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	43d9      	mvns	r1, r3
 80108e4:	4b03      	ldr	r3, [pc, #12]	@ (80108f4 <LL_APB2_GRP1_DisableClock+0x20>)
 80108e6:	400a      	ands	r2, r1
 80108e8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80108ea:	46c0      	nop			@ (mov r8, r8)
 80108ec:	46bd      	mov	sp, r7
 80108ee:	b002      	add	sp, #8
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	46c0      	nop			@ (mov r8, r8)
 80108f4:	40021000 	.word	0x40021000

080108f8 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	2201      	movs	r2, #1
 8010906:	431a      	orrs	r2, r3
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	601a      	str	r2, [r3, #0]
}
 801090c:	46c0      	nop			@ (mov r8, r8)
 801090e:	46bd      	mov	sp, r7
 8010910:	b002      	add	sp, #8
 8010912:	bd80      	pop	{r7, pc}

08010914 <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8010914:	b580      	push	{r7, lr}
 8010916:	b082      	sub	sp, #8
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	2270      	movs	r2, #112	@ 0x70
 8010924:	4393      	bics	r3, r2
 8010926:	001a      	movs	r2, r3
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	431a      	orrs	r2, r3
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	601a      	str	r2, [r3, #0]
}
 8010930:	46c0      	nop			@ (mov r8, r8)
 8010932:	46bd      	mov	sp, r7
 8010934:	b002      	add	sp, #8
 8010936:	bd80      	pop	{r7, pc}

08010938 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	683a      	ldr	r2, [r7, #0]
 8010946:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010948:	46c0      	nop			@ (mov r8, r8)
 801094a:	46bd      	mov	sp, r7
 801094c:	b002      	add	sp, #8
 801094e:	bd80      	pop	{r7, pc}

08010950 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	b082      	sub	sp, #8
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 801095c:	0018      	movs	r0, r3
 801095e:	46bd      	mov	sp, r7
 8010960:	b002      	add	sp, #8
 8010962:	bd80      	pop	{r7, pc}

08010964 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	683a      	ldr	r2, [r7, #0]
 8010972:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8010974:	46c0      	nop			@ (mov r8, r8)
 8010976:	46bd      	mov	sp, r7
 8010978:	b002      	add	sp, #8
 801097a:	bd80      	pop	{r7, pc}

0801097c <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b086      	sub	sp, #24
 8010980:	af00      	add	r7, sp, #0
 8010982:	60f8      	str	r0, [r7, #12]
 8010984:	60b9      	str	r1, [r7, #8]
 8010986:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	2b01      	cmp	r3, #1
 801098c:	d02c      	beq.n	80109e8 <LL_TIM_OC_SetMode+0x6c>
 801098e:	68bb      	ldr	r3, [r7, #8]
 8010990:	2b04      	cmp	r3, #4
 8010992:	d027      	beq.n	80109e4 <LL_TIM_OC_SetMode+0x68>
 8010994:	68bb      	ldr	r3, [r7, #8]
 8010996:	2b10      	cmp	r3, #16
 8010998:	d022      	beq.n	80109e0 <LL_TIM_OC_SetMode+0x64>
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	2b40      	cmp	r3, #64	@ 0x40
 801099e:	d01d      	beq.n	80109dc <LL_TIM_OC_SetMode+0x60>
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	2380      	movs	r3, #128	@ 0x80
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d016      	beq.n	80109d8 <LL_TIM_OC_SetMode+0x5c>
 80109aa:	68ba      	ldr	r2, [r7, #8]
 80109ac:	2380      	movs	r3, #128	@ 0x80
 80109ae:	00db      	lsls	r3, r3, #3
 80109b0:	429a      	cmp	r2, r3
 80109b2:	d00f      	beq.n	80109d4 <LL_TIM_OC_SetMode+0x58>
 80109b4:	68ba      	ldr	r2, [r7, #8]
 80109b6:	2380      	movs	r3, #128	@ 0x80
 80109b8:	015b      	lsls	r3, r3, #5
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d008      	beq.n	80109d0 <LL_TIM_OC_SetMode+0x54>
 80109be:	68ba      	ldr	r2, [r7, #8]
 80109c0:	2380      	movs	r3, #128	@ 0x80
 80109c2:	025b      	lsls	r3, r3, #9
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d101      	bne.n	80109cc <LL_TIM_OC_SetMode+0x50>
 80109c8:	2307      	movs	r3, #7
 80109ca:	e00e      	b.n	80109ea <LL_TIM_OC_SetMode+0x6e>
 80109cc:	2308      	movs	r3, #8
 80109ce:	e00c      	b.n	80109ea <LL_TIM_OC_SetMode+0x6e>
 80109d0:	2306      	movs	r3, #6
 80109d2:	e00a      	b.n	80109ea <LL_TIM_OC_SetMode+0x6e>
 80109d4:	2305      	movs	r3, #5
 80109d6:	e008      	b.n	80109ea <LL_TIM_OC_SetMode+0x6e>
 80109d8:	2304      	movs	r3, #4
 80109da:	e006      	b.n	80109ea <LL_TIM_OC_SetMode+0x6e>
 80109dc:	2303      	movs	r3, #3
 80109de:	e004      	b.n	80109ea <LL_TIM_OC_SetMode+0x6e>
 80109e0:	2302      	movs	r3, #2
 80109e2:	e002      	b.n	80109ea <LL_TIM_OC_SetMode+0x6e>
 80109e4:	2301      	movs	r3, #1
 80109e6:	e000      	b.n	80109ea <LL_TIM_OC_SetMode+0x6e>
 80109e8:	2300      	movs	r3, #0
 80109ea:	2017      	movs	r0, #23
 80109ec:	183a      	adds	r2, r7, r0
 80109ee:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	3318      	adds	r3, #24
 80109f4:	0019      	movs	r1, r3
 80109f6:	183b      	adds	r3, r7, r0
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	4a0e      	ldr	r2, [pc, #56]	@ (8010a34 <LL_TIM_OC_SetMode+0xb8>)
 80109fc:	5cd3      	ldrb	r3, [r2, r3]
 80109fe:	18cb      	adds	r3, r1, r3
 8010a00:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	681b      	ldr	r3, [r3, #0]
 8010a06:	183a      	adds	r2, r7, r0
 8010a08:	7812      	ldrb	r2, [r2, #0]
 8010a0a:	490b      	ldr	r1, [pc, #44]	@ (8010a38 <LL_TIM_OC_SetMode+0xbc>)
 8010a0c:	5c8a      	ldrb	r2, [r1, r2]
 8010a0e:	0011      	movs	r1, r2
 8010a10:	4a0a      	ldr	r2, [pc, #40]	@ (8010a3c <LL_TIM_OC_SetMode+0xc0>)
 8010a12:	408a      	lsls	r2, r1
 8010a14:	43d2      	mvns	r2, r2
 8010a16:	401a      	ands	r2, r3
 8010a18:	183b      	adds	r3, r7, r0
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	4906      	ldr	r1, [pc, #24]	@ (8010a38 <LL_TIM_OC_SetMode+0xbc>)
 8010a1e:	5ccb      	ldrb	r3, [r1, r3]
 8010a20:	0019      	movs	r1, r3
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	408b      	lsls	r3, r1
 8010a26:	431a      	orrs	r2, r3
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	601a      	str	r2, [r3, #0]
}
 8010a2c:	46c0      	nop			@ (mov r8, r8)
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	b006      	add	sp, #24
 8010a32:	bd80      	pop	{r7, pc}
 8010a34:	080168b4 	.word	0x080168b4
 8010a38:	080168c0 	.word	0x080168c0
 8010a3c:	00010073 	.word	0x00010073

08010a40 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	60f8      	str	r0, [r7, #12]
 8010a48:	60b9      	str	r1, [r7, #8]
 8010a4a:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d02c      	beq.n	8010aac <LL_TIM_OC_SetPolarity+0x6c>
 8010a52:	68bb      	ldr	r3, [r7, #8]
 8010a54:	2b04      	cmp	r3, #4
 8010a56:	d027      	beq.n	8010aa8 <LL_TIM_OC_SetPolarity+0x68>
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	2b10      	cmp	r3, #16
 8010a5c:	d022      	beq.n	8010aa4 <LL_TIM_OC_SetPolarity+0x64>
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	2b40      	cmp	r3, #64	@ 0x40
 8010a62:	d01d      	beq.n	8010aa0 <LL_TIM_OC_SetPolarity+0x60>
 8010a64:	68ba      	ldr	r2, [r7, #8]
 8010a66:	2380      	movs	r3, #128	@ 0x80
 8010a68:	005b      	lsls	r3, r3, #1
 8010a6a:	429a      	cmp	r2, r3
 8010a6c:	d016      	beq.n	8010a9c <LL_TIM_OC_SetPolarity+0x5c>
 8010a6e:	68ba      	ldr	r2, [r7, #8]
 8010a70:	2380      	movs	r3, #128	@ 0x80
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d00f      	beq.n	8010a98 <LL_TIM_OC_SetPolarity+0x58>
 8010a78:	68ba      	ldr	r2, [r7, #8]
 8010a7a:	2380      	movs	r3, #128	@ 0x80
 8010a7c:	015b      	lsls	r3, r3, #5
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d008      	beq.n	8010a94 <LL_TIM_OC_SetPolarity+0x54>
 8010a82:	68ba      	ldr	r2, [r7, #8]
 8010a84:	2380      	movs	r3, #128	@ 0x80
 8010a86:	025b      	lsls	r3, r3, #9
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	d101      	bne.n	8010a90 <LL_TIM_OC_SetPolarity+0x50>
 8010a8c:	2307      	movs	r3, #7
 8010a8e:	e00e      	b.n	8010aae <LL_TIM_OC_SetPolarity+0x6e>
 8010a90:	2308      	movs	r3, #8
 8010a92:	e00c      	b.n	8010aae <LL_TIM_OC_SetPolarity+0x6e>
 8010a94:	2306      	movs	r3, #6
 8010a96:	e00a      	b.n	8010aae <LL_TIM_OC_SetPolarity+0x6e>
 8010a98:	2305      	movs	r3, #5
 8010a9a:	e008      	b.n	8010aae <LL_TIM_OC_SetPolarity+0x6e>
 8010a9c:	2304      	movs	r3, #4
 8010a9e:	e006      	b.n	8010aae <LL_TIM_OC_SetPolarity+0x6e>
 8010aa0:	2303      	movs	r3, #3
 8010aa2:	e004      	b.n	8010aae <LL_TIM_OC_SetPolarity+0x6e>
 8010aa4:	2302      	movs	r3, #2
 8010aa6:	e002      	b.n	8010aae <LL_TIM_OC_SetPolarity+0x6e>
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	e000      	b.n	8010aae <LL_TIM_OC_SetPolarity+0x6e>
 8010aac:	2300      	movs	r3, #0
 8010aae:	2017      	movs	r0, #23
 8010ab0:	183a      	adds	r2, r7, r0
 8010ab2:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	6a1b      	ldr	r3, [r3, #32]
 8010ab8:	183a      	adds	r2, r7, r0
 8010aba:	7812      	ldrb	r2, [r2, #0]
 8010abc:	490a      	ldr	r1, [pc, #40]	@ (8010ae8 <LL_TIM_OC_SetPolarity+0xa8>)
 8010abe:	5c8a      	ldrb	r2, [r1, r2]
 8010ac0:	0011      	movs	r1, r2
 8010ac2:	2202      	movs	r2, #2
 8010ac4:	408a      	lsls	r2, r1
 8010ac6:	43d2      	mvns	r2, r2
 8010ac8:	401a      	ands	r2, r3
 8010aca:	183b      	adds	r3, r7, r0
 8010acc:	781b      	ldrb	r3, [r3, #0]
 8010ace:	4906      	ldr	r1, [pc, #24]	@ (8010ae8 <LL_TIM_OC_SetPolarity+0xa8>)
 8010ad0:	5ccb      	ldrb	r3, [r1, r3]
 8010ad2:	0019      	movs	r1, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	408b      	lsls	r3, r1
 8010ad8:	431a      	orrs	r2, r3
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	621a      	str	r2, [r3, #32]
}
 8010ade:	46c0      	nop			@ (mov r8, r8)
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	b006      	add	sp, #24
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	46c0      	nop			@ (mov r8, r8)
 8010ae8:	080168cc 	.word	0x080168cc

08010aec <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b082      	sub	sp, #8
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
 8010af4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	683a      	ldr	r2, [r7, #0]
 8010afa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8010afc:	46c0      	nop			@ (mov r8, r8)
 8010afe:	46bd      	mov	sp, r7
 8010b00:	b002      	add	sp, #8
 8010b02:	bd80      	pop	{r7, pc}

08010b04 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	683a      	ldr	r2, [r7, #0]
 8010b12:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8010b14:	46c0      	nop			@ (mov r8, r8)
 8010b16:	46bd      	mov	sp, r7
 8010b18:	b002      	add	sp, #8
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
 8010b24:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8010b26:	687b      	ldr	r3, [r7, #4]
 8010b28:	683a      	ldr	r2, [r7, #0]
 8010b2a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8010b2c:	46c0      	nop			@ (mov r8, r8)
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	b002      	add	sp, #8
 8010b32:	bd80      	pop	{r7, pc}

08010b34 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	6078      	str	r0, [r7, #4]
 8010b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	683a      	ldr	r2, [r7, #0]
 8010b42:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8010b44:	46c0      	nop			@ (mov r8, r8)
 8010b46:	46bd      	mov	sp, r7
 8010b48:	b002      	add	sp, #8
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b082      	sub	sp, #8
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2203      	movs	r2, #3
 8010b58:	4252      	negs	r2, r2
 8010b5a:	611a      	str	r2, [r3, #16]
}
 8010b5c:	46c0      	nop			@ (mov r8, r8)
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	b002      	add	sp, #8
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	691b      	ldr	r3, [r3, #16]
 8010b70:	2202      	movs	r2, #2
 8010b72:	4013      	ands	r3, r2
 8010b74:	2b02      	cmp	r3, #2
 8010b76:	d101      	bne.n	8010b7c <LL_TIM_IsActiveFlag_CC1+0x18>
 8010b78:	2301      	movs	r3, #1
 8010b7a:	e000      	b.n	8010b7e <LL_TIM_IsActiveFlag_CC1+0x1a>
 8010b7c:	2300      	movs	r3, #0
}
 8010b7e:	0018      	movs	r0, r3
 8010b80:	46bd      	mov	sp, r7
 8010b82:	b002      	add	sp, #8
 8010b84:	bd80      	pop	{r7, pc}

08010b86 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b082      	sub	sp, #8
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	2205      	movs	r2, #5
 8010b92:	4252      	negs	r2, r2
 8010b94:	611a      	str	r2, [r3, #16]
}
 8010b96:	46c0      	nop			@ (mov r8, r8)
 8010b98:	46bd      	mov	sp, r7
 8010b9a:	b002      	add	sp, #8
 8010b9c:	bd80      	pop	{r7, pc}

08010b9e <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8010b9e:	b580      	push	{r7, lr}
 8010ba0:	b082      	sub	sp, #8
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	691b      	ldr	r3, [r3, #16]
 8010baa:	2204      	movs	r2, #4
 8010bac:	4013      	ands	r3, r2
 8010bae:	2b04      	cmp	r3, #4
 8010bb0:	d101      	bne.n	8010bb6 <LL_TIM_IsActiveFlag_CC2+0x18>
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e000      	b.n	8010bb8 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8010bb6:	2300      	movs	r3, #0
}
 8010bb8:	0018      	movs	r0, r3
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	b002      	add	sp, #8
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8010bc0:	b580      	push	{r7, lr}
 8010bc2:	b082      	sub	sp, #8
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	2209      	movs	r2, #9
 8010bcc:	4252      	negs	r2, r2
 8010bce:	611a      	str	r2, [r3, #16]
}
 8010bd0:	46c0      	nop			@ (mov r8, r8)
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	b002      	add	sp, #8
 8010bd6:	bd80      	pop	{r7, pc}

08010bd8 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8010bd8:	b580      	push	{r7, lr}
 8010bda:	b082      	sub	sp, #8
 8010bdc:	af00      	add	r7, sp, #0
 8010bde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	691b      	ldr	r3, [r3, #16]
 8010be4:	2208      	movs	r2, #8
 8010be6:	4013      	ands	r3, r2
 8010be8:	2b08      	cmp	r3, #8
 8010bea:	d101      	bne.n	8010bf0 <LL_TIM_IsActiveFlag_CC3+0x18>
 8010bec:	2301      	movs	r3, #1
 8010bee:	e000      	b.n	8010bf2 <LL_TIM_IsActiveFlag_CC3+0x1a>
 8010bf0:	2300      	movs	r3, #0
}
 8010bf2:	0018      	movs	r0, r3
 8010bf4:	46bd      	mov	sp, r7
 8010bf6:	b002      	add	sp, #8
 8010bf8:	bd80      	pop	{r7, pc}

08010bfa <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8010bfa:	b580      	push	{r7, lr}
 8010bfc:	b082      	sub	sp, #8
 8010bfe:	af00      	add	r7, sp, #0
 8010c00:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	2211      	movs	r2, #17
 8010c06:	4252      	negs	r2, r2
 8010c08:	611a      	str	r2, [r3, #16]
}
 8010c0a:	46c0      	nop			@ (mov r8, r8)
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	b002      	add	sp, #8
 8010c10:	bd80      	pop	{r7, pc}

08010c12 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8010c12:	b580      	push	{r7, lr}
 8010c14:	b082      	sub	sp, #8
 8010c16:	af00      	add	r7, sp, #0
 8010c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	691b      	ldr	r3, [r3, #16]
 8010c1e:	2210      	movs	r2, #16
 8010c20:	4013      	ands	r3, r2
 8010c22:	2b10      	cmp	r3, #16
 8010c24:	d101      	bne.n	8010c2a <LL_TIM_IsActiveFlag_CC4+0x18>
 8010c26:	2301      	movs	r3, #1
 8010c28:	e000      	b.n	8010c2c <LL_TIM_IsActiveFlag_CC4+0x1a>
 8010c2a:	2300      	movs	r3, #0
}
 8010c2c:	0018      	movs	r0, r3
 8010c2e:	46bd      	mov	sp, r7
 8010c30:	b002      	add	sp, #8
 8010c32:	bd80      	pop	{r7, pc}

08010c34 <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8010c34:	b5b0      	push	{r4, r5, r7, lr}
 8010c36:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8010c38:	4b48      	ldr	r3, [pc, #288]	@ (8010d5c <USBPD_TIM_Init+0x128>)
 8010c3a:	781b      	ldrb	r3, [r3, #0]
 8010c3c:	b25b      	sxtb	r3, r3
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d000      	beq.n	8010c44 <USBPD_TIM_Init+0x10>
 8010c42:	e07e      	b.n	8010d42 <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 8010c44:	2380      	movs	r3, #128	@ 0x80
 8010c46:	011b      	lsls	r3, r3, #4
 8010c48:	0018      	movs	r0, r3
 8010c4a:	f7ff fe2d 	bl	80108a8 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8010c4e:	4b44      	ldr	r3, [pc, #272]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010c50:	2100      	movs	r1, #0
 8010c52:	0018      	movs	r0, r3
 8010c54:	f7ff fe5e 	bl	8010914 <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8010c58:	4b42      	ldr	r3, [pc, #264]	@ (8010d64 <USBPD_TIM_Init+0x130>)
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	4a42      	ldr	r2, [pc, #264]	@ (8010d68 <USBPD_TIM_Init+0x134>)
 8010c5e:	4293      	cmp	r3, r2
 8010c60:	d90b      	bls.n	8010c7a <USBPD_TIM_Init+0x46>
 8010c62:	4b40      	ldr	r3, [pc, #256]	@ (8010d64 <USBPD_TIM_Init+0x130>)
 8010c64:	681b      	ldr	r3, [r3, #0]
 8010c66:	4a41      	ldr	r2, [pc, #260]	@ (8010d6c <USBPD_TIM_Init+0x138>)
 8010c68:	4694      	mov	ip, r2
 8010c6a:	4463      	add	r3, ip
 8010c6c:	4940      	ldr	r1, [pc, #256]	@ (8010d70 <USBPD_TIM_Init+0x13c>)
 8010c6e:	0018      	movs	r0, r3
 8010c70:	f7f5 fbe0 	bl	8006434 <__udivsi3>
 8010c74:	0003      	movs	r3, r0
 8010c76:	3b01      	subs	r3, #1
 8010c78:	e000      	b.n	8010c7c <USBPD_TIM_Init+0x48>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	4a38      	ldr	r2, [pc, #224]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010c7e:	0019      	movs	r1, r3
 8010c80:	0010      	movs	r0, r2
 8010c82:	f7ff fe59 	bl	8010938 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8010c86:	4b37      	ldr	r3, [pc, #220]	@ (8010d64 <USBPD_TIM_Init+0x130>)
 8010c88:	681c      	ldr	r4, [r3, #0]
 8010c8a:	4b35      	ldr	r3, [pc, #212]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010c8c:	0018      	movs	r0, r3
 8010c8e:	f7ff fe5f 	bl	8010950 <LL_TIM_GetPrescaler>
 8010c92:	0003      	movs	r3, r0
 8010c94:	3301      	adds	r3, #1
 8010c96:	0019      	movs	r1, r3
 8010c98:	0020      	movs	r0, r4
 8010c9a:	f7f5 fbcb 	bl	8006434 <__udivsi3>
 8010c9e:	0003      	movs	r3, r0
 8010ca0:	2b63      	cmp	r3, #99	@ 0x63
 8010ca2:	d910      	bls.n	8010cc6 <USBPD_TIM_Init+0x92>
 8010ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8010d64 <USBPD_TIM_Init+0x130>)
 8010ca6:	681c      	ldr	r4, [r3, #0]
 8010ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010caa:	0018      	movs	r0, r3
 8010cac:	f7ff fe50 	bl	8010950 <LL_TIM_GetPrescaler>
 8010cb0:	0003      	movs	r3, r0
 8010cb2:	3301      	adds	r3, #1
 8010cb4:	2264      	movs	r2, #100	@ 0x64
 8010cb6:	4353      	muls	r3, r2
 8010cb8:	0019      	movs	r1, r3
 8010cba:	0020      	movs	r0, r4
 8010cbc:	f7f5 fbba 	bl	8006434 <__udivsi3>
 8010cc0:	0003      	movs	r3, r0
 8010cc2:	3b01      	subs	r3, #1
 8010cc4:	e000      	b.n	8010cc8 <USBPD_TIM_Init+0x94>
 8010cc6:	2300      	movs	r3, #0
 8010cc8:	4a25      	ldr	r2, [pc, #148]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010cca:	0019      	movs	r1, r3
 8010ccc:	0010      	movs	r0, r2
 8010cce:	f7ff fe49 	bl	8010964 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8010cd2:	4b23      	ldr	r3, [pc, #140]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010cd4:	2230      	movs	r2, #48	@ 0x30
 8010cd6:	2101      	movs	r1, #1
 8010cd8:	0018      	movs	r0, r3
 8010cda:	f7ff fe4f 	bl	801097c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8010cde:	4b20      	ldr	r3, [pc, #128]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010ce0:	2230      	movs	r2, #48	@ 0x30
 8010ce2:	2110      	movs	r1, #16
 8010ce4:	0018      	movs	r0, r3
 8010ce6:	f7ff fe49 	bl	801097c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8010cea:	2380      	movs	r3, #128	@ 0x80
 8010cec:	005b      	lsls	r3, r3, #1
 8010cee:	481c      	ldr	r0, [pc, #112]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010cf0:	2230      	movs	r2, #48	@ 0x30
 8010cf2:	0019      	movs	r1, r3
 8010cf4:	f7ff fe42 	bl	801097c <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8010cf8:	2380      	movs	r3, #128	@ 0x80
 8010cfa:	015b      	lsls	r3, r3, #5
 8010cfc:	4818      	ldr	r0, [pc, #96]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010cfe:	2230      	movs	r2, #48	@ 0x30
 8010d00:	0019      	movs	r1, r3
 8010d02:	f7ff fe3b 	bl	801097c <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8010d06:	4b16      	ldr	r3, [pc, #88]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010d08:	2200      	movs	r2, #0
 8010d0a:	2101      	movs	r1, #1
 8010d0c:	0018      	movs	r0, r3
 8010d0e:	f7ff fe97 	bl	8010a40 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8010d12:	4b13      	ldr	r3, [pc, #76]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010d14:	2200      	movs	r2, #0
 8010d16:	2110      	movs	r1, #16
 8010d18:	0018      	movs	r0, r3
 8010d1a:	f7ff fe91 	bl	8010a40 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8010d1e:	2380      	movs	r3, #128	@ 0x80
 8010d20:	005b      	lsls	r3, r3, #1
 8010d22:	480f      	ldr	r0, [pc, #60]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010d24:	2200      	movs	r2, #0
 8010d26:	0019      	movs	r1, r3
 8010d28:	f7ff fe8a 	bl	8010a40 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8010d2c:	2380      	movs	r3, #128	@ 0x80
 8010d2e:	015b      	lsls	r3, r3, #5
 8010d30:	480b      	ldr	r0, [pc, #44]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010d32:	2200      	movs	r2, #0
 8010d34:	0019      	movs	r1, r3
 8010d36:	f7ff fe83 	bl	8010a40 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8010d3a:	4b09      	ldr	r3, [pc, #36]	@ (8010d60 <USBPD_TIM_Init+0x12c>)
 8010d3c:	0018      	movs	r0, r3
 8010d3e:	f7ff fddb 	bl	80108f8 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8010d42:	4b06      	ldr	r3, [pc, #24]	@ (8010d5c <USBPD_TIM_Init+0x128>)
 8010d44:	781b      	ldrb	r3, [r3, #0]
 8010d46:	b25b      	sxtb	r3, r3
 8010d48:	b2db      	uxtb	r3, r3
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	b2db      	uxtb	r3, r3
 8010d4e:	b25a      	sxtb	r2, r3
 8010d50:	4b02      	ldr	r3, [pc, #8]	@ (8010d5c <USBPD_TIM_Init+0x128>)
 8010d52:	701a      	strb	r2, [r3, #0]
}
 8010d54:	46c0      	nop			@ (mov r8, r8)
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bdb0      	pop	{r4, r5, r7, pc}
 8010d5a:	46c0      	nop			@ (mov r8, r8)
 8010d5c:	2000a7ac 	.word	0x2000a7ac
 8010d60:	40012c00 	.word	0x40012c00
 8010d64:	20000004 	.word	0x20000004
 8010d68:	000f423f 	.word	0x000f423f
 8010d6c:	0007a120 	.word	0x0007a120
 8010d70:	000f4240 	.word	0x000f4240

08010d74 <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8010d78:	4b0a      	ldr	r3, [pc, #40]	@ (8010da4 <USBPD_TIM_DeInit+0x30>)
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	b25b      	sxtb	r3, r3
 8010d7e:	b2db      	uxtb	r3, r3
 8010d80:	3b01      	subs	r3, #1
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	b25a      	sxtb	r2, r3
 8010d86:	4b07      	ldr	r3, [pc, #28]	@ (8010da4 <USBPD_TIM_DeInit+0x30>)
 8010d88:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8010d8a:	4b06      	ldr	r3, [pc, #24]	@ (8010da4 <USBPD_TIM_DeInit+0x30>)
 8010d8c:	781b      	ldrb	r3, [r3, #0]
 8010d8e:	b25b      	sxtb	r3, r3
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d104      	bne.n	8010d9e <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 8010d94:	2380      	movs	r3, #128	@ 0x80
 8010d96:	011b      	lsls	r3, r3, #4
 8010d98:	0018      	movs	r0, r3
 8010d9a:	f7ff fd9b 	bl	80108d4 <LL_APB2_GRP1_DisableClock>
  }
}
 8010d9e:	46c0      	nop			@ (mov r8, r8)
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	2000a7ac 	.word	0x2000a7ac

08010da8 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b082      	sub	sp, #8
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	0002      	movs	r2, r0
 8010db0:	6039      	str	r1, [r7, #0]
 8010db2:	1dfb      	adds	r3, r7, #7
 8010db4:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8010db6:	1dfb      	adds	r3, r7, #7
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	2b03      	cmp	r3, #3
 8010dbc:	d044      	beq.n	8010e48 <USBPD_TIM_Start+0xa0>
 8010dbe:	dc57      	bgt.n	8010e70 <USBPD_TIM_Start+0xc8>
 8010dc0:	2b02      	cmp	r3, #2
 8010dc2:	d02d      	beq.n	8010e20 <USBPD_TIM_Start+0x78>
 8010dc4:	dc54      	bgt.n	8010e70 <USBPD_TIM_Start+0xc8>
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d002      	beq.n	8010dd0 <USBPD_TIM_Start+0x28>
 8010dca:	2b01      	cmp	r3, #1
 8010dcc:	d014      	beq.n	8010df8 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 8010dce:	e04f      	b.n	8010e70 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 8010dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010dd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	18d3      	adds	r3, r2, r3
 8010dd8:	4929      	ldr	r1, [pc, #164]	@ (8010e80 <USBPD_TIM_Start+0xd8>)
 8010dda:	0018      	movs	r0, r3
 8010ddc:	f7f5 fbb0 	bl	8006540 <__aeabi_uidivmod>
 8010de0:	000b      	movs	r3, r1
 8010de2:	001a      	movs	r2, r3
 8010de4:	4b25      	ldr	r3, [pc, #148]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010de6:	0011      	movs	r1, r2
 8010de8:	0018      	movs	r0, r3
 8010dea:	f7ff fe7f 	bl	8010aec <LL_TIM_OC_SetCompareCH1>
 8010dee:	4b23      	ldr	r3, [pc, #140]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010df0:	0018      	movs	r0, r3
 8010df2:	f7ff feab 	bl	8010b4c <LL_TIM_ClearFlag_CC1>
      break;
 8010df6:	e03c      	b.n	8010e72 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 8010df8:	4b20      	ldr	r3, [pc, #128]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	18d3      	adds	r3, r2, r3
 8010e00:	491f      	ldr	r1, [pc, #124]	@ (8010e80 <USBPD_TIM_Start+0xd8>)
 8010e02:	0018      	movs	r0, r3
 8010e04:	f7f5 fb9c 	bl	8006540 <__aeabi_uidivmod>
 8010e08:	000b      	movs	r3, r1
 8010e0a:	001a      	movs	r2, r3
 8010e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010e0e:	0011      	movs	r1, r2
 8010e10:	0018      	movs	r0, r3
 8010e12:	f7ff fe77 	bl	8010b04 <LL_TIM_OC_SetCompareCH2>
 8010e16:	4b19      	ldr	r3, [pc, #100]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010e18:	0018      	movs	r0, r3
 8010e1a:	f7ff feb4 	bl	8010b86 <LL_TIM_ClearFlag_CC2>
      break;
 8010e1e:	e028      	b.n	8010e72 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 8010e20:	4b16      	ldr	r3, [pc, #88]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010e22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e24:	683b      	ldr	r3, [r7, #0]
 8010e26:	18d3      	adds	r3, r2, r3
 8010e28:	4915      	ldr	r1, [pc, #84]	@ (8010e80 <USBPD_TIM_Start+0xd8>)
 8010e2a:	0018      	movs	r0, r3
 8010e2c:	f7f5 fb88 	bl	8006540 <__aeabi_uidivmod>
 8010e30:	000b      	movs	r3, r1
 8010e32:	001a      	movs	r2, r3
 8010e34:	4b11      	ldr	r3, [pc, #68]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010e36:	0011      	movs	r1, r2
 8010e38:	0018      	movs	r0, r3
 8010e3a:	f7ff fe6f 	bl	8010b1c <LL_TIM_OC_SetCompareCH3>
 8010e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010e40:	0018      	movs	r0, r3
 8010e42:	f7ff febd 	bl	8010bc0 <LL_TIM_ClearFlag_CC3>
      break;
 8010e46:	e014      	b.n	8010e72 <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 8010e48:	4b0c      	ldr	r3, [pc, #48]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010e4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	18d3      	adds	r3, r2, r3
 8010e50:	490b      	ldr	r1, [pc, #44]	@ (8010e80 <USBPD_TIM_Start+0xd8>)
 8010e52:	0018      	movs	r0, r3
 8010e54:	f7f5 fb74 	bl	8006540 <__aeabi_uidivmod>
 8010e58:	000b      	movs	r3, r1
 8010e5a:	001a      	movs	r2, r3
 8010e5c:	4b07      	ldr	r3, [pc, #28]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010e5e:	0011      	movs	r1, r2
 8010e60:	0018      	movs	r0, r3
 8010e62:	f7ff fe67 	bl	8010b34 <LL_TIM_OC_SetCompareCH4>
 8010e66:	4b05      	ldr	r3, [pc, #20]	@ (8010e7c <USBPD_TIM_Start+0xd4>)
 8010e68:	0018      	movs	r0, r3
 8010e6a:	f7ff fec6 	bl	8010bfa <LL_TIM_ClearFlag_CC4>
      break;
 8010e6e:	e000      	b.n	8010e72 <USBPD_TIM_Start+0xca>
      break;
 8010e70:	46c0      	nop			@ (mov r8, r8)
  }
}
 8010e72:	46c0      	nop			@ (mov r8, r8)
 8010e74:	46bd      	mov	sp, r7
 8010e76:	b002      	add	sp, #8
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	46c0      	nop			@ (mov r8, r8)
 8010e7c:	40012c00 	.word	0x40012c00
 8010e80:	00002710 	.word	0x00002710

08010e84 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	0002      	movs	r2, r0
 8010e8c:	1dfb      	adds	r3, r7, #7
 8010e8e:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 8010e90:	2301      	movs	r3, #1
 8010e92:	60fb      	str	r3, [r7, #12]
  switch (Id)
 8010e94:	1dfb      	adds	r3, r7, #7
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	2b03      	cmp	r3, #3
 8010e9a:	d01d      	beq.n	8010ed8 <USBPD_TIM_IsExpired+0x54>
 8010e9c:	dc23      	bgt.n	8010ee6 <USBPD_TIM_IsExpired+0x62>
 8010e9e:	2b02      	cmp	r3, #2
 8010ea0:	d013      	beq.n	8010eca <USBPD_TIM_IsExpired+0x46>
 8010ea2:	dc20      	bgt.n	8010ee6 <USBPD_TIM_IsExpired+0x62>
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d002      	beq.n	8010eae <USBPD_TIM_IsExpired+0x2a>
 8010ea8:	2b01      	cmp	r3, #1
 8010eaa:	d007      	beq.n	8010ebc <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 8010eac:	e01b      	b.n	8010ee6 <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8010eae:	4b11      	ldr	r3, [pc, #68]	@ (8010ef4 <USBPD_TIM_IsExpired+0x70>)
 8010eb0:	0018      	movs	r0, r3
 8010eb2:	f7ff fe57 	bl	8010b64 <LL_TIM_IsActiveFlag_CC1>
 8010eb6:	0003      	movs	r3, r0
 8010eb8:	60fb      	str	r3, [r7, #12]
      break;
 8010eba:	e015      	b.n	8010ee8 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8010ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8010ef4 <USBPD_TIM_IsExpired+0x70>)
 8010ebe:	0018      	movs	r0, r3
 8010ec0:	f7ff fe6d 	bl	8010b9e <LL_TIM_IsActiveFlag_CC2>
 8010ec4:	0003      	movs	r3, r0
 8010ec6:	60fb      	str	r3, [r7, #12]
      break;
 8010ec8:	e00e      	b.n	8010ee8 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8010eca:	4b0a      	ldr	r3, [pc, #40]	@ (8010ef4 <USBPD_TIM_IsExpired+0x70>)
 8010ecc:	0018      	movs	r0, r3
 8010ece:	f7ff fe83 	bl	8010bd8 <LL_TIM_IsActiveFlag_CC3>
 8010ed2:	0003      	movs	r3, r0
 8010ed4:	60fb      	str	r3, [r7, #12]
      break;
 8010ed6:	e007      	b.n	8010ee8 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8010ed8:	4b06      	ldr	r3, [pc, #24]	@ (8010ef4 <USBPD_TIM_IsExpired+0x70>)
 8010eda:	0018      	movs	r0, r3
 8010edc:	f7ff fe99 	bl	8010c12 <LL_TIM_IsActiveFlag_CC4>
 8010ee0:	0003      	movs	r3, r0
 8010ee2:	60fb      	str	r3, [r7, #12]
      break;
 8010ee4:	e000      	b.n	8010ee8 <USBPD_TIM_IsExpired+0x64>
      break;
 8010ee6:	46c0      	nop			@ (mov r8, r8)
  }
  return _expired;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
}
 8010eea:	0018      	movs	r0, r3
 8010eec:	46bd      	mov	sp, r7
 8010eee:	b004      	add	sp, #16
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	46c0      	nop			@ (mov r8, r8)
 8010ef4:	40012c00 	.word	0x40012c00

08010ef8 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b094      	sub	sp, #80	@ 0x50
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	607a      	str	r2, [r7, #4]
 8010f04:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	3303      	adds	r3, #3
 8010f0a:	2203      	movs	r2, #3
 8010f0c:	4393      	bics	r3, r2
 8010f0e:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010f10:	f3ef 8310 	mrs	r3, PRIMASK
 8010f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010f16:	b672      	cpsid	i
    return(primask_value);
 8010f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 8010f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010f1c:	4b56      	ldr	r3, [pc, #344]	@ (8011078 <_tx_byte_allocate+0x180>)
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	643b      	str	r3, [r7, #64]	@ 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 8010f22:	2300      	movs	r3, #0
 8010f24:	647b      	str	r3, [r7, #68]	@ 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f2a:	621a      	str	r2, [r3, #32]
 8010f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f2e:	627b      	str	r3, [r7, #36]	@ 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f32:	f383 8810 	msr	PRIMASK, r3
}
 8010f36:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 8010f38:	687a      	ldr	r2, [r7, #4]
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	0011      	movs	r1, r2
 8010f3e:	0018      	movs	r0, r3
 8010f40:	f000 f9c0 	bl	80112c4 <_tx_byte_pool_search>
 8010f44:	0003      	movs	r3, r0
 8010f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010f48:	f3ef 8310 	mrs	r3, PRIMASK
 8010f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010f4e:	b672      	cpsid	i
    return(primask_value);
 8010f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 8010f52:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 8010f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d002      	beq.n	8010f60 <_tx_byte_allocate+0x68>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 8010f5a:	2301      	movs	r3, #1
 8010f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f5e:	e006      	b.n	8010f6e <_tx_byte_allocate+0x76>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	6a1b      	ldr	r3, [r3, #32]
 8010f64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d101      	bne.n	8010f6e <_tx_byte_allocate+0x76>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 8010f6a:	2301      	movs	r3, #1
 8010f6c:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }

    } while (finished == TX_FALSE);
 8010f6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d0d8      	beq.n	8010f26 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8010f78:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 8010f7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d008      	beq.n	8010f92 <_tx_byte_allocate+0x9a>
 8010f80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010f82:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f84:	6a3b      	ldr	r3, [r7, #32]
 8010f86:	f383 8810 	msr	PRIMASK, r3
}
 8010f8a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010f90:	e06d      	b.n	801106e <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 8010f92:	683b      	ldr	r3, [r7, #0]
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d062      	beq.n	801105e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 8010f98:	4b38      	ldr	r3, [pc, #224]	@ (801107c <_tx_byte_allocate+0x184>)
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d007      	beq.n	8010fb0 <_tx_byte_allocate+0xb8>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 8010fa0:	2310      	movs	r3, #16
 8010fa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fa6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	f383 8810 	msr	PRIMASK, r3
}
 8010fae:	e05e      	b.n	801106e <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 8010fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010fb2:	4a33      	ldr	r2, [pc, #204]	@ (8011080 <_tx_byte_allocate+0x188>)
 8010fb4:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 8010fb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010fb8:	68fa      	ldr	r2, [r7, #12]
 8010fba:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 8010fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010fbe:	68ba      	ldr	r2, [r7, #8]
 8010fc0:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 8010fc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010fc4:	687a      	ldr	r2, [r7, #4]
 8010fc6:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010fc8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010fca:	22ac      	movs	r2, #172	@ 0xac
 8010fcc:	589b      	ldr	r3, [r3, r2]
 8010fce:	1c5a      	adds	r2, r3, #1
 8010fd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010fd2:	21ac      	movs	r1, #172	@ 0xac
 8010fd4:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fda:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010fe0:	1c5a      	adds	r2, r3, #1
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 8010fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d109      	bne.n	8011000 <_tx_byte_allocate+0x108>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ff0:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010ff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ff6:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010ff8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ffc:	675a      	str	r2, [r3, #116]	@ 0x74
 8010ffe:	e011      	b.n	8011024 <_tx_byte_allocate+0x12c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011004:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011006:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011008:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801100a:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801100c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801100e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011010:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011014:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011016:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801101a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801101c:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801101e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011020:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011022:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 8011024:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011026:	2209      	movs	r2, #9
 8011028:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801102a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801102c:	2201      	movs	r2, #1
 801102e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011032:	683a      	ldr	r2, [r7, #0]
 8011034:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011036:	4b11      	ldr	r3, [pc, #68]	@ (801107c <_tx_byte_allocate+0x184>)
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	1c5a      	adds	r2, r3, #1
 801103c:	4b0f      	ldr	r3, [pc, #60]	@ (801107c <_tx_byte_allocate+0x184>)
 801103e:	601a      	str	r2, [r3, #0]
 8011040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011042:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011044:	69bb      	ldr	r3, [r7, #24]
 8011046:	f383 8810 	msr	PRIMASK, r3
}
 801104a:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 801104c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801104e:	0018      	movs	r0, r3
 8011050:	f001 fb6e 	bl	8012730 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 8011054:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011056:	2284      	movs	r2, #132	@ 0x84
 8011058:	589b      	ldr	r3, [r3, r2]
 801105a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801105c:	e007      	b.n	801106e <_tx_byte_allocate+0x176>
 801105e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011060:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	f383 8810 	msr	PRIMASK, r3
}
 8011068:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 801106a:	2310      	movs	r3, #16
 801106c:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 801106e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8011070:	0018      	movs	r0, r3
 8011072:	46bd      	mov	sp, r7
 8011074:	b014      	add	sp, #80	@ 0x50
 8011076:	bd80      	pop	{r7, pc}
 8011078:	2000a7e8 	.word	0x2000a7e8
 801107c:	2000a880 	.word	0x2000a880
 8011080:	08011085 	.word	0x08011085

08011084 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b08c      	sub	sp, #48	@ 0x30
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801108e:	f3ef 8310 	mrs	r3, PRIMASK
 8011092:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011094:	b672      	cpsid	i
    return(primask_value);
 8011096:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 8011098:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801109e:	4b32      	ldr	r3, [pc, #200]	@ (8011168 <_tx_byte_pool_cleanup+0xe4>)
 80110a0:	429a      	cmp	r2, r3
 80110a2:	d157      	bne.n	8011154 <_tx_byte_pool_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	22ac      	movs	r2, #172	@ 0xac
 80110a8:	589b      	ldr	r3, [r3, r2]
 80110aa:	683a      	ldr	r2, [r7, #0]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d151      	bne.n	8011154 <_tx_byte_pool_cleanup+0xd0>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80110b4:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 80110b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d04b      	beq.n	8011154 <_tx_byte_pool_cleanup+0xd0>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 80110bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	4a2a      	ldr	r2, [pc, #168]	@ (801116c <_tx_byte_pool_cleanup+0xe8>)
 80110c2:	4293      	cmp	r3, r2
 80110c4:	d146      	bne.n	8011154 <_tx_byte_pool_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 80110c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d042      	beq.n	8011154 <_tx_byte_pool_cleanup+0xd0>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	2200      	movs	r2, #0
 80110d2:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 80110d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110d8:	1e5a      	subs	r2, r3, #1
 80110da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110dc:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 80110de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80110e2:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 80110e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d103      	bne.n	80110f2 <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 80110ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110ec:	2200      	movs	r2, #0
 80110ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80110f0:	e013      	b.n	801111a <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80110f6:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110fc:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 80110fe:	6a3b      	ldr	r3, [r7, #32]
 8011100:	69fa      	ldr	r2, [r7, #28]
 8011102:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	6a3a      	ldr	r2, [r7, #32]
 8011108:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 801110a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801110c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801110e:	687a      	ldr	r2, [r7, #4]
 8011110:	429a      	cmp	r2, r3
 8011112:	d102      	bne.n	801111a <_tx_byte_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 8011114:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011116:	6a3a      	ldr	r2, [r7, #32]
 8011118:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801111e:	2b09      	cmp	r3, #9
 8011120:	d118      	bne.n	8011154 <_tx_byte_pool_cleanup+0xd0>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	2284      	movs	r2, #132	@ 0x84
 8011126:	2110      	movs	r1, #16
 8011128:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 801112a:	4b11      	ldr	r3, [pc, #68]	@ (8011170 <_tx_byte_pool_cleanup+0xec>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	1c5a      	adds	r2, r3, #1
 8011130:	4b0f      	ldr	r3, [pc, #60]	@ (8011170 <_tx_byte_pool_cleanup+0xec>)
 8011132:	601a      	str	r2, [r3, #0]
 8011134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011136:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011138:	693b      	ldr	r3, [r7, #16]
 801113a:	f383 8810 	msr	PRIMASK, r3
}
 801113e:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	0018      	movs	r0, r3
 8011144:	f001 f9f4 	bl	8012530 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011148:	f3ef 8310 	mrs	r3, PRIMASK
 801114c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801114e:	b672      	cpsid	i
    return(primask_value);
 8011150:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8011152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011156:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f383 8810 	msr	PRIMASK, r3
}
 801115e:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8011160:	46c0      	nop			@ (mov r8, r8)
 8011162:	46bd      	mov	sp, r7
 8011164:	b00c      	add	sp, #48	@ 0x30
 8011166:	bd80      	pop	{r7, pc}
 8011168:	08011085 	.word	0x08011085
 801116c:	42595445 	.word	0x42595445
 8011170:	2000a880 	.word	0x2000a880

08011174 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b092      	sub	sp, #72	@ 0x48
 8011178:	af00      	add	r7, sp, #0
 801117a:	60f8      	str	r0, [r7, #12]
 801117c:	60b9      	str	r1, [r7, #8]
 801117e:	607a      	str	r2, [r7, #4]
 8011180:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	647b      	str	r3, [r7, #68]	@ 0x44
 8011186:	233f      	movs	r3, #63	@ 0x3f
 8011188:	18fb      	adds	r3, r7, r3
 801118a:	2200      	movs	r2, #0
 801118c:	701a      	strb	r2, [r3, #0]
 801118e:	2334      	movs	r3, #52	@ 0x34
 8011190:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011192:	2300      	movs	r3, #0
 8011194:	643b      	str	r3, [r7, #64]	@ 0x40
 8011196:	e009      	b.n	80111ac <_tx_byte_pool_create+0x38>
 8011198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801119a:	1c5a      	adds	r2, r3, #1
 801119c:	647a      	str	r2, [r7, #68]	@ 0x44
 801119e:	223f      	movs	r2, #63	@ 0x3f
 80111a0:	18ba      	adds	r2, r7, r2
 80111a2:	7812      	ldrb	r2, [r2, #0]
 80111a4:	701a      	strb	r2, [r3, #0]
 80111a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80111a8:	3301      	adds	r3, #1
 80111aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80111ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80111ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d3f1      	bcc.n	8011198 <_tx_byte_pool_create+0x24>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80111b4:	683b      	ldr	r3, [r7, #0]
 80111b6:	2203      	movs	r2, #3
 80111b8:	4393      	bics	r3, r2
 80111ba:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	68ba      	ldr	r2, [r7, #8]
 80111c0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	687a      	ldr	r2, [r7, #4]
 80111c6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	683a      	ldr	r2, [r7, #0]
 80111cc:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	687a      	ldr	r2, [r7, #4]
 80111d2:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	687a      	ldr	r2, [r7, #4]
 80111d8:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 80111da:	683b      	ldr	r3, [r7, #0]
 80111dc:	3b08      	subs	r3, #8
 80111de:	001a      	movs	r2, r3
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2202      	movs	r2, #2
 80111e8:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80111ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80111f0:	683b      	ldr	r3, [r7, #0]
 80111f2:	18d3      	adds	r3, r2, r3
 80111f4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80111f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111f8:	3b04      	subs	r3, #4
 80111fa:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011200:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011202:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8011204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011208:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 801120a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801120c:	3b04      	subs	r3, #4
 801120e:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 8011210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011212:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011216:	687a      	ldr	r2, [r7, #4]
 8011218:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 801121e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011220:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 8011222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011226:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 801122c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801122e:	3304      	adds	r3, #4
 8011230:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 8011232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011234:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8011236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011238:	4a1e      	ldr	r2, [pc, #120]	@ (80112b4 <_tx_byte_pool_create+0x140>)
 801123a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	2200      	movs	r2, #0
 8011240:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011242:	f3ef 8310 	mrs	r3, PRIMASK
 8011246:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011248:	b672      	cpsid	i
    return(primask_value);
 801124a:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 801124c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 801124e:	68fb      	ldr	r3, [r7, #12]
 8011250:	4a19      	ldr	r2, [pc, #100]	@ (80112b8 <_tx_byte_pool_create+0x144>)
 8011252:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8011254:	4b19      	ldr	r3, [pc, #100]	@ (80112bc <_tx_byte_pool_create+0x148>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d109      	bne.n	8011270 <_tx_byte_pool_create+0xfc>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 801125c:	4b18      	ldr	r3, [pc, #96]	@ (80112c0 <_tx_byte_pool_create+0x14c>)
 801125e:	68fa      	ldr	r2, [r7, #12]
 8011260:	601a      	str	r2, [r3, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	68fa      	ldr	r2, [r7, #12]
 8011266:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	68fa      	ldr	r2, [r7, #12]
 801126c:	631a      	str	r2, [r3, #48]	@ 0x30
 801126e:	e011      	b.n	8011294 <_tx_byte_pool_create+0x120>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8011270:	4b13      	ldr	r3, [pc, #76]	@ (80112c0 <_tx_byte_pool_create+0x14c>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801127a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 801127c:	6a3b      	ldr	r3, [r7, #32]
 801127e:	68fa      	ldr	r2, [r7, #12]
 8011280:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	68fa      	ldr	r2, [r7, #12]
 8011286:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	69fa      	ldr	r2, [r7, #28]
 801128c:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	6a3a      	ldr	r2, [r7, #32]
 8011292:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8011294:	4b09      	ldr	r3, [pc, #36]	@ (80112bc <_tx_byte_pool_create+0x148>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	1c5a      	adds	r2, r3, #1
 801129a:	4b08      	ldr	r3, [pc, #32]	@ (80112bc <_tx_byte_pool_create+0x148>)
 801129c:	601a      	str	r2, [r3, #0]
 801129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80112a2:	697b      	ldr	r3, [r7, #20]
 80112a4:	f383 8810 	msr	PRIMASK, r3
}
 80112a8:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80112aa:	2300      	movs	r3, #0
}
 80112ac:	0018      	movs	r0, r3
 80112ae:	46bd      	mov	sp, r7
 80112b0:	b012      	add	sp, #72	@ 0x48
 80112b2:	bd80      	pop	{r7, pc}
 80112b4:	ffffeeee 	.word	0xffffeeee
 80112b8:	42595445 	.word	0x42595445
 80112bc:	2000a7dc 	.word	0x2000a7dc
 80112c0:	2000a7d8 	.word	0x2000a7d8

080112c4 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b094      	sub	sp, #80	@ 0x50
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
 80112cc:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 80112ce:	2300      	movs	r3, #0
 80112d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80112d2:	f3ef 8310 	mrs	r3, PRIMASK
 80112d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80112d8:	b672      	cpsid	i
    return(primask_value);
 80112da:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 80112dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	689a      	ldr	r2, [r3, #8]
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	3b02      	subs	r3, #2
 80112e8:	00db      	lsls	r3, r3, #3
 80112ea:	18d3      	adds	r3, r2, r3
 80112ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (memory_size >= total_theoretical_available)
 80112ee:	683a      	ldr	r2, [r7, #0]
 80112f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d308      	bcc.n	8011308 <_tx_byte_pool_search+0x44>
 80112f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80112fa:	69bb      	ldr	r3, [r7, #24]
 80112fc:	f383 8810 	msr	PRIMASK, r3
}
 8011300:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 8011302:	2300      	movs	r3, #0
 8011304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011306:	e0db      	b.n	80114c0 <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8011308:	4b70      	ldr	r3, [pc, #448]	@ (80114cc <_tx_byte_pool_search+0x208>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011312:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	695b      	ldr	r3, [r3, #20]
 8011318:	64bb      	str	r3, [r7, #72]	@ 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	68db      	ldr	r3, [r3, #12]
 801131e:	3301      	adds	r3, #1
 8011320:	643b      	str	r3, [r7, #64]	@ 0x40
        available_bytes =  ((ULONG) 0);
 8011322:	2300      	movs	r3, #0
 8011324:	647b      	str	r3, [r7, #68]	@ 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8011326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011328:	3304      	adds	r3, #4
 801132a:	633b      	str	r3, [r7, #48]	@ 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 801132c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801132e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8011330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	4a66      	ldr	r2, [pc, #408]	@ (80114d0 <_tx_byte_pool_search+0x20c>)
 8011336:	4293      	cmp	r3, r2
 8011338:	d143      	bne.n	80113c2 <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 801133a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801133c:	2b00      	cmp	r3, #0
 801133e:	d104      	bne.n	801134a <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011344:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 8011346:	2301      	movs	r3, #1
 8011348:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 801134a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801134c:	62bb      	str	r3, [r7, #40]	@ 0x28
                next_ptr =             *this_block_link_ptr;
 801134e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 8011354:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011356:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011358:	1ad3      	subs	r3, r2, r3
 801135a:	647b      	str	r3, [r7, #68]	@ 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 801135c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801135e:	3b08      	subs	r3, #8
 8011360:	647b      	str	r3, [r7, #68]	@ 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 8011362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	429a      	cmp	r2, r3
 8011368:	d255      	bcs.n	8011416 <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 801136a:	2300      	movs	r3, #0
 801136c:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 801136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011370:	3304      	adds	r3, #4
 8011372:	633b      	str	r3, [r7, #48]	@ 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011376:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 8011378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4a54      	ldr	r2, [pc, #336]	@ (80114d0 <_tx_byte_pool_search+0x20c>)
 801137e:	4293      	cmp	r3, r2
 8011380:	d113      	bne.n	80113aa <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8011382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011384:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 8011386:	6a3b      	ldr	r3, [r7, #32]
 8011388:	681a      	ldr	r2, [r3, #0]
 801138a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801138c:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	1e5a      	subs	r2, r3, #1
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	695b      	ldr	r3, [r3, #20]
 801139c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801139e:	429a      	cmp	r2, r3
 80113a0:	d114      	bne.n	80113cc <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80113a6:	615a      	str	r2, [r3, #20]
 80113a8:	e010      	b.n	80113cc <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 80113aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80113ac:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 80113ae:	6a3b      	ldr	r3, [r7, #32]
 80113b0:	681b      	ldr	r3, [r3, #0]
 80113b2:	64bb      	str	r3, [r7, #72]	@ 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 80113b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d008      	beq.n	80113cc <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 80113ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113bc:	3b01      	subs	r3, #1
 80113be:	643b      	str	r3, [r7, #64]	@ 0x40
 80113c0:	e004      	b.n	80113cc <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 80113c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113c4:	62bb      	str	r3, [r7, #40]	@ 0x28
                current_ptr =  *this_block_link_ptr;
 80113c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 80113cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d002      	beq.n	80113d8 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 80113d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80113d4:	3b01      	subs	r3, #1
 80113d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80113d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113da:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	f383 8810 	msr	PRIMASK, r3
}
 80113e2:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80113e4:	f3ef 8310 	mrs	r3, PRIMASK
 80113e8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80113ea:	b672      	cpsid	i
    return(primask_value);
 80113ec:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 80113ee:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	6a1b      	ldr	r3, [r3, #32]
 80113f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80113f6:	429a      	cmp	r2, r3
 80113f8:	d009      	beq.n	801140e <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	695b      	ldr	r3, [r3, #20]
 80113fe:	64bb      	str	r3, [r7, #72]	@ 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	68db      	ldr	r3, [r3, #12]
 8011404:	3301      	adds	r3, #1
 8011406:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801140c:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 801140e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011410:	2b00      	cmp	r3, #0
 8011412:	d188      	bne.n	8011326 <_tx_byte_pool_search+0x62>
 8011414:	e000      	b.n	8011418 <_tx_byte_pool_search+0x154>
                    break;
 8011416:	46c0      	nop			@ (mov r8, r8)

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 8011418:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801141a:	2b00      	cmp	r3, #0
 801141c:	d048      	beq.n	80114b0 <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 801141e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	1ad3      	subs	r3, r2, r3
 8011424:	2b13      	cmp	r3, #19
 8011426:	d91e      	bls.n	8011466 <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	3308      	adds	r3, #8
 801142c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801142e:	18d3      	adds	r3, r2, r3
 8011430:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 8011432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011434:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011436:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011438:	62bb      	str	r3, [r7, #40]	@ 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 801143a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801143c:	681a      	ldr	r2, [r3, #0]
 801143e:	6a3b      	ldr	r3, [r7, #32]
 8011440:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 8011442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011444:	3304      	adds	r3, #4
 8011446:	633b      	str	r3, [r7, #48]	@ 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 8011448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 801144c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801144e:	4a20      	ldr	r2, [pc, #128]	@ (80114d0 <_tx_byte_pool_search+0x20c>)
 8011450:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	68db      	ldr	r3, [r3, #12]
 8011456:	1c5a      	adds	r2, r3, #1
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 801145c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801145e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011460:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	647b      	str	r3, [r7, #68]	@ 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 8011466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011468:	3304      	adds	r3, #4
 801146a:	633b      	str	r3, [r7, #48]	@ 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 801146c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801146e:	62bb      	str	r3, [r7, #40]	@ 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8011470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011472:	687a      	ldr	r2, [r7, #4]
 8011474:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	689a      	ldr	r2, [r3, #8]
 801147a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	3b08      	subs	r3, #8
 8011480:	001a      	movs	r2, r3
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	695b      	ldr	r3, [r3, #20]
 801148a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801148c:	429a      	cmp	r2, r3
 801148e:	d105      	bne.n	801149c <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 8011490:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011492:	62bb      	str	r3, [r7, #40]	@ 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 8011494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	615a      	str	r2, [r3, #20]
 801149c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801149e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	f383 8810 	msr	PRIMASK, r3
}
 80114a6:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 80114a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80114aa:	3308      	adds	r3, #8
 80114ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80114ae:	e007      	b.n	80114c0 <_tx_byte_pool_search+0x1fc>
 80114b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114b2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	f383 8810 	msr	PRIMASK, r3
}
 80114ba:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 80114bc:	2300      	movs	r3, #0
 80114be:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 80114c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80114c2:	0018      	movs	r0, r3
 80114c4:	46bd      	mov	sp, r7
 80114c6:	b014      	add	sp, #80	@ 0x50
 80114c8:	bd80      	pop	{r7, pc}
 80114ca:	46c0      	nop			@ (mov r8, r8)
 80114cc:	2000a7e8 	.word	0x2000a7e8
 80114d0:	ffffeeee 	.word	0xffffeeee

080114d4 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80114d8:	f000 fe00 	bl	80120dc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80114dc:	f001 fb5a 	bl	8012b94 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80114e0:	4b13      	ldr	r3, [pc, #76]	@ (8011530 <_tx_initialize_high_level+0x5c>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	601a      	str	r2, [r3, #0]
 80114e6:	4b13      	ldr	r3, [pc, #76]	@ (8011534 <_tx_initialize_high_level+0x60>)
 80114e8:	2200      	movs	r2, #0
 80114ea:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80114ec:	4b12      	ldr	r3, [pc, #72]	@ (8011538 <_tx_initialize_high_level+0x64>)
 80114ee:	2200      	movs	r2, #0
 80114f0:	601a      	str	r2, [r3, #0]
 80114f2:	4b12      	ldr	r3, [pc, #72]	@ (801153c <_tx_initialize_high_level+0x68>)
 80114f4:	2200      	movs	r2, #0
 80114f6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80114f8:	4b11      	ldr	r3, [pc, #68]	@ (8011540 <_tx_initialize_high_level+0x6c>)
 80114fa:	2200      	movs	r2, #0
 80114fc:	601a      	str	r2, [r3, #0]
 80114fe:	4b11      	ldr	r3, [pc, #68]	@ (8011544 <_tx_initialize_high_level+0x70>)
 8011500:	2200      	movs	r2, #0
 8011502:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8011504:	4b10      	ldr	r3, [pc, #64]	@ (8011548 <_tx_initialize_high_level+0x74>)
 8011506:	2200      	movs	r2, #0
 8011508:	601a      	str	r2, [r3, #0]
 801150a:	4b10      	ldr	r3, [pc, #64]	@ (801154c <_tx_initialize_high_level+0x78>)
 801150c:	2200      	movs	r2, #0
 801150e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8011510:	4b0f      	ldr	r3, [pc, #60]	@ (8011550 <_tx_initialize_high_level+0x7c>)
 8011512:	2200      	movs	r2, #0
 8011514:	601a      	str	r2, [r3, #0]
 8011516:	4b0f      	ldr	r3, [pc, #60]	@ (8011554 <_tx_initialize_high_level+0x80>)
 8011518:	2200      	movs	r2, #0
 801151a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 801151c:	4b0e      	ldr	r3, [pc, #56]	@ (8011558 <_tx_initialize_high_level+0x84>)
 801151e:	2200      	movs	r2, #0
 8011520:	601a      	str	r2, [r3, #0]
 8011522:	4b0e      	ldr	r3, [pc, #56]	@ (801155c <_tx_initialize_high_level+0x88>)
 8011524:	2200      	movs	r2, #0
 8011526:	601a      	str	r2, [r3, #0]
#endif
}
 8011528:	46c0      	nop			@ (mov r8, r8)
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	46c0      	nop			@ (mov r8, r8)
 8011530:	2000a7b0 	.word	0x2000a7b0
 8011534:	2000a7b4 	.word	0x2000a7b4
 8011538:	2000a7b8 	.word	0x2000a7b8
 801153c:	2000a7bc 	.word	0x2000a7bc
 8011540:	2000a7c0 	.word	0x2000a7c0
 8011544:	2000a7c4 	.word	0x2000a7c4
 8011548:	2000a7d0 	.word	0x2000a7d0
 801154c:	2000a7d4 	.word	0x2000a7d4
 8011550:	2000a7d8 	.word	0x2000a7d8
 8011554:	2000a7dc 	.word	0x2000a7dc
 8011558:	2000a7c8 	.word	0x2000a7c8
 801155c:	2000a7cc 	.word	0x2000a7cc

08011560 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8011564:	4b10      	ldr	r3, [pc, #64]	@ (80115a8 <_tx_initialize_kernel_enter+0x48>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	4a10      	ldr	r2, [pc, #64]	@ (80115ac <_tx_initialize_kernel_enter+0x4c>)
 801156a:	4293      	cmp	r3, r2
 801156c:	d00b      	beq.n	8011586 <_tx_initialize_kernel_enter+0x26>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801156e:	4b0e      	ldr	r3, [pc, #56]	@ (80115a8 <_tx_initialize_kernel_enter+0x48>)
 8011570:	4a0f      	ldr	r2, [pc, #60]	@ (80115b0 <_tx_initialize_kernel_enter+0x50>)
 8011572:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8011574:	f7ee fdcc 	bl	8000110 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8011578:	f7ff ffac 	bl	80114d4 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 801157c:	4b0d      	ldr	r3, [pc, #52]	@ (80115b4 <_tx_initialize_kernel_enter+0x54>)
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	1c5a      	adds	r2, r3, #1
 8011582:	4b0c      	ldr	r3, [pc, #48]	@ (80115b4 <_tx_initialize_kernel_enter+0x54>)
 8011584:	601a      	str	r2, [r3, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8011586:	4b08      	ldr	r3, [pc, #32]	@ (80115a8 <_tx_initialize_kernel_enter+0x48>)
 8011588:	4a09      	ldr	r2, [pc, #36]	@ (80115b0 <_tx_initialize_kernel_enter+0x50>)
 801158a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 801158c:	4b0a      	ldr	r3, [pc, #40]	@ (80115b8 <_tx_initialize_kernel_enter+0x58>)
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	0018      	movs	r0, r3
 8011592:	f7f4 ffdb 	bl	800654c <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8011596:	4b04      	ldr	r3, [pc, #16]	@ (80115a8 <_tx_initialize_kernel_enter+0x48>)
 8011598:	2200      	movs	r2, #0
 801159a:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 801159c:	f7ee fe00 	bl	80001a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80115a0:	46c0      	nop			@ (mov r8, r8)
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
 80115a6:	46c0      	nop			@ (mov r8, r8)
 80115a8:	20000010 	.word	0x20000010
 80115ac:	f0f0f0f1 	.word	0xf0f0f0f1
 80115b0:	f0f0f0f0 	.word	0xf0f0f0f0
 80115b4:	2000a880 	.word	0x2000a880
 80115b8:	2000a7e0 	.word	0x2000a7e0

080115bc <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b08c      	sub	sp, #48	@ 0x30
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
 80115c4:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80115c6:	f3ef 8310 	mrs	r3, PRIMASK
 80115ca:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80115cc:	b672      	cpsid	i
    return(primask_value);
 80115ce:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 80115d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80115d6:	4b37      	ldr	r3, [pc, #220]	@ (80116b4 <_tx_queue_cleanup+0xf8>)
 80115d8:	429a      	cmp	r2, r3
 80115da:	d160      	bne.n	801169e <_tx_queue_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	22ac      	movs	r2, #172	@ 0xac
 80115e0:	589b      	ldr	r3, [r3, r2]
 80115e2:	683a      	ldr	r2, [r7, #0]
 80115e4:	429a      	cmp	r2, r3
 80115e6:	d15a      	bne.n	801169e <_tx_queue_cleanup+0xe2>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115ec:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 80115ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d054      	beq.n	801169e <_tx_queue_cleanup+0xe2>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 80115f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	4a2f      	ldr	r2, [pc, #188]	@ (80116b8 <_tx_queue_cleanup+0xfc>)
 80115fa:	4293      	cmp	r3, r2
 80115fc:	d14f      	bne.n	801169e <_tx_queue_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 80115fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011602:	2b00      	cmp	r3, #0
 8011604:	d04b      	beq.n	801169e <_tx_queue_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2200      	movs	r2, #0
 801160a:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 801160c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801160e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011610:	1e5a      	subs	r2, r3, #1
 8011612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011614:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8011616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801161a:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 801161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801161e:	2b00      	cmp	r3, #0
 8011620:	d103      	bne.n	801162a <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8011622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011624:	2200      	movs	r2, #0
 8011626:	629a      	str	r2, [r3, #40]	@ 0x28
 8011628:	e013      	b.n	8011652 <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801162e:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011634:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011636:	6a3b      	ldr	r3, [r7, #32]
 8011638:	69fa      	ldr	r2, [r7, #28]
 801163a:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 801163c:	69fb      	ldr	r3, [r7, #28]
 801163e:	6a3a      	ldr	r2, [r7, #32]
 8011640:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8011642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011646:	687a      	ldr	r2, [r7, #4]
 8011648:	429a      	cmp	r2, r3
 801164a:	d102      	bne.n	8011652 <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 801164c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801164e:	6a3a      	ldr	r2, [r7, #32]
 8011650:	629a      	str	r2, [r3, #40]	@ 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011656:	2b05      	cmp	r3, #5
 8011658:	d121      	bne.n	801169e <_tx_queue_cleanup+0xe2>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 801165a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801165c:	691b      	ldr	r3, [r3, #16]
 801165e:	2b00      	cmp	r3, #0
 8011660:	d004      	beq.n	801166c <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	2284      	movs	r2, #132	@ 0x84
 8011666:	210b      	movs	r1, #11
 8011668:	5099      	str	r1, [r3, r2]
 801166a:	e003      	b.n	8011674 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	2284      	movs	r2, #132	@ 0x84
 8011670:	210a      	movs	r1, #10
 8011672:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8011674:	4b11      	ldr	r3, [pc, #68]	@ (80116bc <_tx_queue_cleanup+0x100>)
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	1c5a      	adds	r2, r3, #1
 801167a:	4b10      	ldr	r3, [pc, #64]	@ (80116bc <_tx_queue_cleanup+0x100>)
 801167c:	601a      	str	r2, [r3, #0]
 801167e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011680:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011682:	693b      	ldr	r3, [r7, #16]
 8011684:	f383 8810 	msr	PRIMASK, r3
}
 8011688:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	0018      	movs	r0, r3
 801168e:	f000 ff4f 	bl	8012530 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011692:	f3ef 8310 	mrs	r3, PRIMASK
 8011696:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011698:	b672      	cpsid	i
    return(primask_value);
 801169a:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801169e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116a0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	f383 8810 	msr	PRIMASK, r3
}
 80116a8:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80116aa:	46c0      	nop			@ (mov r8, r8)
 80116ac:	46bd      	mov	sp, r7
 80116ae:	b00c      	add	sp, #48	@ 0x30
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	46c0      	nop			@ (mov r8, r8)
 80116b4:	080115bd 	.word	0x080115bd
 80116b8:	51554555 	.word	0x51554555
 80116bc:	2000a880 	.word	0x2000a880

080116c0 <_tx_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b090      	sub	sp, #64	@ 0x40
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	60f8      	str	r0, [r7, #12]
 80116c8:	60b9      	str	r1, [r7, #8]
 80116ca:	607a      	str	r2, [r7, #4]
 80116cc:	603b      	str	r3, [r7, #0]
TX_QUEUE        *next_queue;
TX_QUEUE        *previous_queue;


    /* Initialize queue control block to all zeros.  */
    TX_MEMSET(queue_ptr, 0, (sizeof(TX_QUEUE)));
 80116ce:	68fb      	ldr	r3, [r7, #12]
 80116d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80116d2:	2337      	movs	r3, #55	@ 0x37
 80116d4:	18fb      	adds	r3, r7, r3
 80116d6:	2200      	movs	r2, #0
 80116d8:	701a      	strb	r2, [r3, #0]
 80116da:	2338      	movs	r3, #56	@ 0x38
 80116dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80116de:	2300      	movs	r3, #0
 80116e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80116e2:	e009      	b.n	80116f8 <_tx_queue_create+0x38>
 80116e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116e6:	1c5a      	adds	r2, r3, #1
 80116e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80116ea:	2237      	movs	r2, #55	@ 0x37
 80116ec:	18ba      	adds	r2, r7, r2
 80116ee:	7812      	ldrb	r2, [r2, #0]
 80116f0:	701a      	strb	r2, [r3, #0]
 80116f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116f4:	3301      	adds	r3, #1
 80116f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80116f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80116fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d3f1      	bcc.n	80116e4 <_tx_queue_create+0x24>

    /* Setup the basic queue fields.  */
    queue_ptr -> tx_queue_name =             name_ptr;
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	68ba      	ldr	r2, [r7, #8]
 8011704:	605a      	str	r2, [r3, #4]

    /* Save the message size in the control block.  */
    queue_ptr -> tx_queue_message_size =  message_size;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	687a      	ldr	r2, [r7, #4]
 801170a:	609a      	str	r2, [r3, #8]

    /* Determine how many messages will fit in the queue area and the number
       of ULONGs used.  */
    capacity =    (UINT) (queue_size / ((ULONG) (((ULONG) message_size) * (sizeof(ULONG)))));
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	009b      	lsls	r3, r3, #2
 8011710:	0019      	movs	r1, r3
 8011712:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8011714:	f7f4 fe8e 	bl	8006434 <__udivsi3>
 8011718:	0003      	movs	r3, r0
 801171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    used_words =  capacity * message_size;
 801171c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	4353      	muls	r3, r2
 8011722:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Save the starting address and calculate the ending address of
       the queue.  Note that the ending address is really one past the
       end!  */
    queue_ptr -> tx_queue_start =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	683a      	ldr	r2, [r7, #0]
 8011728:	619a      	str	r2, [r3, #24]
    queue_ptr -> tx_queue_end =    TX_ULONG_POINTER_ADD(queue_ptr -> tx_queue_start, used_words);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	699a      	ldr	r2, [r3, #24]
 801172e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	18d2      	adds	r2, r2, r3
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	61da      	str	r2, [r3, #28]

    /* Set the read and write pointers to the beginning of the queue
       area.  */
    queue_ptr -> tx_queue_read =   TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	683a      	ldr	r2, [r7, #0]
 801173c:	621a      	str	r2, [r3, #32]
    queue_ptr -> tx_queue_write =  TX_VOID_TO_ULONG_POINTER_CONVERT(queue_start);
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	683a      	ldr	r2, [r7, #0]
 8011742:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Setup the number of enqueued messages and the number of message
       slots available in the queue.  */
    queue_ptr -> tx_queue_available_storage =  (UINT) capacity;
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011748:	615a      	str	r2, [r3, #20]
    queue_ptr -> tx_queue_capacity =           (UINT) capacity;
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801174e:	60da      	str	r2, [r3, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011750:	f3ef 8310 	mrs	r3, PRIMASK
 8011754:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011756:	b672      	cpsid	i
    return(primask_value);
 8011758:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to put the queue on the created list.  */
    TX_DISABLE
 801175a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the queue ID to make it valid.  */
    queue_ptr -> tx_queue_id =  TX_QUEUE_ID;
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	4a19      	ldr	r2, [pc, #100]	@ (80117c4 <_tx_queue_create+0x104>)
 8011760:	601a      	str	r2, [r3, #0]

    /* Place the queue on the list of created queues.  First,
       check for an empty list.  */
    if (_tx_queue_created_count == TX_EMPTY)
 8011762:	4b19      	ldr	r3, [pc, #100]	@ (80117c8 <_tx_queue_create+0x108>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d109      	bne.n	801177e <_tx_queue_create+0xbe>
    {

        /* The created queue list is empty.  Add queue to empty list.  */
        _tx_queue_created_ptr =                   queue_ptr;
 801176a:	4b18      	ldr	r3, [pc, #96]	@ (80117cc <_tx_queue_create+0x10c>)
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	601a      	str	r2, [r3, #0]
        queue_ptr -> tx_queue_created_next =      queue_ptr;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	68fa      	ldr	r2, [r7, #12]
 8011774:	631a      	str	r2, [r3, #48]	@ 0x30
        queue_ptr -> tx_queue_created_previous =  queue_ptr;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	68fa      	ldr	r2, [r7, #12]
 801177a:	635a      	str	r2, [r3, #52]	@ 0x34
 801177c:	e011      	b.n	80117a2 <_tx_queue_create+0xe2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_queue =      _tx_queue_created_ptr;
 801177e:	4b13      	ldr	r3, [pc, #76]	@ (80117cc <_tx_queue_create+0x10c>)
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	623b      	str	r3, [r7, #32]
        previous_queue =  next_queue -> tx_queue_created_previous;
 8011784:	6a3b      	ldr	r3, [r7, #32]
 8011786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011788:	61fb      	str	r3, [r7, #28]

        /* Place the new queue in the list.  */
        next_queue -> tx_queue_created_previous =  queue_ptr;
 801178a:	6a3b      	ldr	r3, [r7, #32]
 801178c:	68fa      	ldr	r2, [r7, #12]
 801178e:	635a      	str	r2, [r3, #52]	@ 0x34
        previous_queue -> tx_queue_created_next =  queue_ptr;
 8011790:	69fb      	ldr	r3, [r7, #28]
 8011792:	68fa      	ldr	r2, [r7, #12]
 8011794:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Setup this queues's created links.  */
        queue_ptr -> tx_queue_created_previous =  previous_queue;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	69fa      	ldr	r2, [r7, #28]
 801179a:	635a      	str	r2, [r3, #52]	@ 0x34
        queue_ptr -> tx_queue_created_next =      next_queue;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	6a3a      	ldr	r2, [r7, #32]
 80117a0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Increment the created queue count.  */
    _tx_queue_created_count++;
 80117a2:	4b09      	ldr	r3, [pc, #36]	@ (80117c8 <_tx_queue_create+0x108>)
 80117a4:	681b      	ldr	r3, [r3, #0]
 80117a6:	1c5a      	adds	r2, r3, #1
 80117a8:	4b07      	ldr	r3, [pc, #28]	@ (80117c8 <_tx_queue_create+0x108>)
 80117aa:	601a      	str	r2, [r3, #0]
 80117ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ae:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80117b0:	697b      	ldr	r3, [r7, #20]
 80117b2:	f383 8810 	msr	PRIMASK, r3
}
 80117b6:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	0018      	movs	r0, r3
 80117bc:	46bd      	mov	sp, r7
 80117be:	b010      	add	sp, #64	@ 0x40
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	46c0      	nop			@ (mov r8, r8)
 80117c4:	51554555 	.word	0x51554555
 80117c8:	2000a7bc 	.word	0x2000a7bc
 80117cc:	2000a7b8 	.word	0x2000a7b8

080117d0 <_tx_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b094      	sub	sp, #80	@ 0x50
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	60f8      	str	r0, [r7, #12]
 80117d8:	60b9      	str	r1, [r7, #8]
 80117da:	607a      	str	r2, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80117dc:	2300      	movs	r3, #0
 80117de:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80117e0:	f3ef 8310 	mrs	r3, PRIMASK
 80117e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80117e6:	b672      	cpsid	i
    return(primask_value);
 80117e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Disable interrupts to receive message from queue.  */
    TX_DISABLE
 80117ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_RECEIVE_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 80117ec:	68fb      	ldr	r3, [r7, #12]
 80117ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80117f0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is anything in the queue.  */
    if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	691b      	ldr	r3, [r3, #16]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d100      	bne.n	80117fc <_tx_queue_receive+0x2c>
 80117fa:	e137      	b.n	8011a6c <_tx_queue_receive+0x29c>
    {

        /* Determine if there are any suspensions.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 80117fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d13c      	bne.n	801187c <_tx_queue_receive+0xac>
        {

            /* There is a message waiting in the queue and there are no suspensi.  */

            /* Setup source and destination pointers.  */
            source =       queue_ptr -> tx_queue_read;
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6a1b      	ldr	r3, [r3, #32]
 8011806:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8011808:	68bb      	ldr	r3, [r7, #8]
 801180a:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 801180c:	68fb      	ldr	r3, [r7, #12]
 801180e:	689b      	ldr	r3, [r3, #8]
 8011810:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011812:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011814:	1d13      	adds	r3, r2, #4
 8011816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011818:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801181a:	1d19      	adds	r1, r3, #4
 801181c:	64b9      	str	r1, [r7, #72]	@ 0x48
 801181e:	6812      	ldr	r2, [r2, #0]
 8011820:	601a      	str	r2, [r3, #0]
 8011822:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011824:	2b01      	cmp	r3, #1
 8011826:	d90e      	bls.n	8011846 <_tx_queue_receive+0x76>
 8011828:	e007      	b.n	801183a <_tx_queue_receive+0x6a>
 801182a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801182c:	1d13      	adds	r3, r2, #4
 801182e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011832:	1d19      	adds	r1, r3, #4
 8011834:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011836:	6812      	ldr	r2, [r2, #0]
 8011838:	601a      	str	r2, [r3, #0]
 801183a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801183c:	3b01      	subs	r3, #1
 801183e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011842:	2b00      	cmp	r3, #0
 8011844:	d1f1      	bne.n	801182a <_tx_queue_receive+0x5a>

            /* Determine if we are at the end.  */
            if (source == queue_ptr -> tx_queue_end)
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	69db      	ldr	r3, [r3, #28]
 801184a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801184c:	429a      	cmp	r2, r3
 801184e:	d102      	bne.n	8011856 <_tx_queue_receive+0x86>
            {

                /* Yes, wrap around to the beginning.  */
                source =  queue_ptr -> tx_queue_start;
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	699b      	ldr	r3, [r3, #24]
 8011854:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            /* Setup the queue read pointer.   */
            queue_ptr -> tx_queue_read =  source;
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801185a:	621a      	str	r2, [r3, #32]

            /* Increase the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage++;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	695b      	ldr	r3, [r3, #20]
 8011860:	1c5a      	adds	r2, r3, #1
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	615a      	str	r2, [r3, #20]

            /* Decrease the enqueued count.  */
            queue_ptr -> tx_queue_enqueued--;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	691b      	ldr	r3, [r3, #16]
 801186a:	1e5a      	subs	r2, r3, #1
 801186c:	68fb      	ldr	r3, [r7, #12]
 801186e:	611a      	str	r2, [r3, #16]
 8011870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011872:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011876:	f383 8810 	msr	PRIMASK, r3
}
 801187a:	e166      	b.n	8011b4a <_tx_queue_receive+0x37a>
        {

            /* At this point we know the queue is full.  */

            /* Pickup thread suspension list head pointer.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011880:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Now determine if there is a queue front suspension active.   */

            /* Is the front suspension flag set?  */
            if (thread_ptr -> tx_thread_suspend_option == TX_TRUE)
 8011882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011884:	2280      	movs	r2, #128	@ 0x80
 8011886:	589b      	ldr	r3, [r3, r2]
 8011888:	2b01      	cmp	r3, #1
 801188a:	d154      	bne.n	8011936 <_tx_queue_receive+0x166>
                /* Yes, a queue front suspension is present.  */

                /* Return the message associated with this suspension.  */

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801188c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801188e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011890:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	689b      	ldr	r3, [r3, #8]
 801189a:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 801189c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801189e:	1d13      	adds	r3, r2, #4
 80118a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80118a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118a4:	1d19      	adds	r1, r3, #4
 80118a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80118a8:	6812      	ldr	r2, [r2, #0]
 80118aa:	601a      	str	r2, [r3, #0]
 80118ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118ae:	2b01      	cmp	r3, #1
 80118b0:	d90e      	bls.n	80118d0 <_tx_queue_receive+0x100>
 80118b2:	e007      	b.n	80118c4 <_tx_queue_receive+0xf4>
 80118b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80118b6:	1d13      	adds	r3, r2, #4
 80118b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80118ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80118bc:	1d19      	adds	r1, r3, #4
 80118be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80118c0:	6812      	ldr	r2, [r2, #0]
 80118c2:	601a      	str	r2, [r3, #0]
 80118c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118c6:	3b01      	subs	r3, #1
 80118c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80118ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d1f1      	bne.n	80118b4 <_tx_queue_receive+0xe4>

                /* Message is now in the caller's destination. See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 80118d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d2:	3b01      	subs	r3, #1
 80118d4:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 80118d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d103      	bne.n	80118e4 <_tx_queue_receive+0x114>
                {

                    /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2200      	movs	r2, #0
 80118e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80118e2:	e00e      	b.n	8011902 <_tx_queue_receive+0x132>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 80118e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80118e8:	633b      	str	r3, [r7, #48]	@ 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118ee:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 80118f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80118f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80118f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    next_thread -> tx_thread_suspended_previous =  previous_thread;
 80118f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80118fa:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =  next_thread;
 80118fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80118fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011900:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011906:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801190a:	2200      	movs	r2, #0
 801190c:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 801190e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011910:	2284      	movs	r2, #132	@ 0x84
 8011912:	2100      	movs	r1, #0
 8011914:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011916:	4b8f      	ldr	r3, [pc, #572]	@ (8011b54 <_tx_queue_receive+0x384>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	1c5a      	adds	r2, r3, #1
 801191c:	4b8d      	ldr	r3, [pc, #564]	@ (8011b54 <_tx_queue_receive+0x384>)
 801191e:	601a      	str	r2, [r3, #0]
 8011920:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011922:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011924:	6a3b      	ldr	r3, [r7, #32]
 8011926:	f383 8810 	msr	PRIMASK, r3
}
 801192a:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 801192c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801192e:	0018      	movs	r0, r3
 8011930:	f000 fdfe 	bl	8012530 <_tx_thread_system_resume>
 8011934:	e109      	b.n	8011b4a <_tx_queue_receive+0x37a>
                /* At this point, we know that the queue is full and there
                   are one or more threads suspended trying to send another
                   message to this queue.  */

                /* Setup source and destination pointers.  */
                source =       queue_ptr -> tx_queue_read;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	6a1b      	ldr	r3, [r3, #32]
 801193a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(destination_ptr);
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	689b      	ldr	r3, [r3, #8]
 8011944:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011946:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011948:	1d13      	adds	r3, r2, #4
 801194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801194c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801194e:	1d19      	adds	r1, r3, #4
 8011950:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011952:	6812      	ldr	r2, [r2, #0]
 8011954:	601a      	str	r2, [r3, #0]
 8011956:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011958:	2b01      	cmp	r3, #1
 801195a:	d90e      	bls.n	801197a <_tx_queue_receive+0x1aa>
 801195c:	e007      	b.n	801196e <_tx_queue_receive+0x19e>
 801195e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011960:	1d13      	adds	r3, r2, #4
 8011962:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011964:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011966:	1d19      	adds	r1, r3, #4
 8011968:	64b9      	str	r1, [r7, #72]	@ 0x48
 801196a:	6812      	ldr	r2, [r2, #0]
 801196c:	601a      	str	r2, [r3, #0]
 801196e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011970:	3b01      	subs	r3, #1
 8011972:	647b      	str	r3, [r7, #68]	@ 0x44
 8011974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011976:	2b00      	cmp	r3, #0
 8011978:	d1f1      	bne.n	801195e <_tx_queue_receive+0x18e>

                /* Determine if we are at the end.  */
                if (source == queue_ptr -> tx_queue_end)
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	69db      	ldr	r3, [r3, #28]
 801197e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011980:	429a      	cmp	r2, r3
 8011982:	d102      	bne.n	801198a <_tx_queue_receive+0x1ba>
                {

                    /* Yes, wrap around to the beginning.  */
                    source =  queue_ptr -> tx_queue_start;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	699b      	ldr	r3, [r3, #24]
 8011988:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                /* Setup the queue read pointer.   */
                queue_ptr -> tx_queue_read =  source;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801198e:	621a      	str	r2, [r3, #32]

                /* Disable preemption.  */
                _tx_thread_preempt_disable++;
 8011990:	4b70      	ldr	r3, [pc, #448]	@ (8011b54 <_tx_queue_receive+0x384>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	1c5a      	adds	r2, r3, #1
 8011996:	4b6f      	ldr	r3, [pc, #444]	@ (8011b54 <_tx_queue_receive+0x384>)
 8011998:	601a      	str	r2, [r3, #0]
                /* Disable interrupts again.  */
                TX_DISABLE
#endif

                /* Decrement the preemption disable variable.  */
                _tx_thread_preempt_disable--;
 801199a:	4b6e      	ldr	r3, [pc, #440]	@ (8011b54 <_tx_queue_receive+0x384>)
 801199c:	681b      	ldr	r3, [r3, #0]
 801199e:	1e5a      	subs	r2, r3, #1
 80119a0:	4b6c      	ldr	r3, [pc, #432]	@ (8011b54 <_tx_queue_receive+0x384>)
 80119a2:	601a      	str	r2, [r3, #0]

                /* Setup source and destination pointers.  */
                source =       TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 80119a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80119a6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80119a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                destination =  queue_ptr -> tx_queue_write;
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80119ae:	64bb      	str	r3, [r7, #72]	@ 0x48
                size =         queue_ptr -> tx_queue_message_size;
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	689b      	ldr	r3, [r3, #8]
 80119b4:	647b      	str	r3, [r7, #68]	@ 0x44

                /* Copy message. Note that the source and destination pointers are
                   incremented by the macro.  */
                TX_QUEUE_MESSAGE_COPY(source, destination, size)
 80119b6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119b8:	1d13      	adds	r3, r2, #4
 80119ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119be:	1d19      	adds	r1, r3, #4
 80119c0:	64b9      	str	r1, [r7, #72]	@ 0x48
 80119c2:	6812      	ldr	r2, [r2, #0]
 80119c4:	601a      	str	r2, [r3, #0]
 80119c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119c8:	2b01      	cmp	r3, #1
 80119ca:	d90e      	bls.n	80119ea <_tx_queue_receive+0x21a>
 80119cc:	e007      	b.n	80119de <_tx_queue_receive+0x20e>
 80119ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119d0:	1d13      	adds	r3, r2, #4
 80119d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80119d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80119d6:	1d19      	adds	r1, r3, #4
 80119d8:	64b9      	str	r1, [r7, #72]	@ 0x48
 80119da:	6812      	ldr	r2, [r2, #0]
 80119dc:	601a      	str	r2, [r3, #0]
 80119de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119e0:	3b01      	subs	r3, #1
 80119e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80119e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d1f1      	bne.n	80119ce <_tx_queue_receive+0x1fe>

                /* Determine if we are at the end.  */
                if (destination == queue_ptr -> tx_queue_end)
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	69db      	ldr	r3, [r3, #28]
 80119ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119f0:	429a      	cmp	r2, r3
 80119f2:	d102      	bne.n	80119fa <_tx_queue_receive+0x22a>
                {

                    /* Yes, wrap around to the beginning.  */
                    destination =  queue_ptr -> tx_queue_start;
 80119f4:	68fb      	ldr	r3, [r7, #12]
 80119f6:	699b      	ldr	r3, [r3, #24]
 80119f8:	64bb      	str	r3, [r7, #72]	@ 0x48
                }

                /* Adjust the write pointer.  */
                queue_ptr -> tx_queue_write =  destination;
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80119fe:	625a      	str	r2, [r3, #36]	@ 0x24

                /* Pickup thread pointer.  */
                thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011a00:	68fb      	ldr	r3, [r7, #12]
 8011a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011a04:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Message is now in the queue.  See if this is the only suspended thread
                   on the list.  */
                suspended_count--;
 8011a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a08:	3b01      	subs	r3, #1
 8011a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
                if (suspended_count == TX_NO_SUSPENSIONS)
 8011a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d103      	bne.n	8011a1a <_tx_queue_receive+0x24a>
                {

                  /* Yes, the only suspended thread.  */

                    /* Update the head pointer.  */
                    queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	2200      	movs	r2, #0
 8011a16:	629a      	str	r2, [r3, #40]	@ 0x28
 8011a18:	e00e      	b.n	8011a38 <_tx_queue_receive+0x268>
                {

                    /* At least one more thread is on the same expiration list.  */

                    /* Update the list head pointer.  */
                    next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8011a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011a1e:	633b      	str	r3, [r7, #48]	@ 0x30
                    queue_ptr -> tx_queue_suspension_list =  next_thread;
 8011a20:	68fb      	ldr	r3, [r7, #12]
 8011a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a24:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Update the links of the adjacent threads.  */
                    previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a30:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   next_thread;
 8011a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011a36:	671a      	str	r2, [r3, #112]	@ 0x70
                }

                /* Decrement the suspension count.  */
                queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Prepare for resumption of the first thread.  */

                /* Clear cleanup routine to avoid timeout.  */
                thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011a3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a40:	2200      	movs	r2, #0
 8011a42:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Put return status into the thread control block.  */
                thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a46:	2284      	movs	r2, #132	@ 0x84
 8011a48:	2100      	movs	r1, #0
 8011a4a:	5099      	str	r1, [r3, r2]
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 8011a4c:	4b41      	ldr	r3, [pc, #260]	@ (8011b54 <_tx_queue_receive+0x384>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	1c5a      	adds	r2, r3, #1
 8011a52:	4b40      	ldr	r3, [pc, #256]	@ (8011b54 <_tx_queue_receive+0x384>)
 8011a54:	601a      	str	r2, [r3, #0]
 8011a56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a58:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	f383 8810 	msr	PRIMASK, r3
}
 8011a60:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Resume thread.  */
                _tx_thread_system_resume(thread_ptr);
 8011a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a64:	0018      	movs	r0, r3
 8011a66:	f000 fd63 	bl	8012530 <_tx_thread_system_resume>
 8011a6a:	e06e      	b.n	8011b4a <_tx_queue_receive+0x37a>
            }
        }
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d063      	beq.n	8011b3a <_tx_queue_receive+0x36a>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011a72:	4b38      	ldr	r3, [pc, #224]	@ (8011b54 <_tx_queue_receive+0x384>)
 8011a74:	681b      	ldr	r3, [r3, #0]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d008      	beq.n	8011a8c <_tx_queue_receive+0x2bc>
 8011a7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a7c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	f383 8810 	msr	PRIMASK, r3
}
 8011a84:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_EMPTY;
 8011a86:	230a      	movs	r3, #10
 8011a88:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a8a:	e05e      	b.n	8011b4a <_tx_queue_receive+0x37a>
            /* Increment the number of empty suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_empty_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011a8c:	4b32      	ldr	r3, [pc, #200]	@ (8011b58 <_tx_queue_receive+0x388>)
 8011a8e:	681b      	ldr	r3, [r3, #0]
 8011a90:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8011a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a94:	4a31      	ldr	r2, [pc, #196]	@ (8011b5c <_tx_queue_receive+0x38c>)
 8011a96:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8011a98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a9a:	68fa      	ldr	r2, [r7, #12]
 8011a9c:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) destination_ptr;
 8011a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aa0:	68ba      	ldr	r2, [r7, #8]
 8011aa2:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8011aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aa6:	2280      	movs	r2, #128	@ 0x80
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8011aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011aae:	22ac      	movs	r2, #172	@ 0xac
 8011ab0:	589b      	ldr	r3, [r3, r2]
 8011ab2:	1c5a      	adds	r2, r3, #1
 8011ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ab6:	21ac      	movs	r1, #172	@ 0xac
 8011ab8:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d109      	bne.n	8011ad4 <_tx_queue_receive+0x304>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ac4:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ac8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011aca:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ace:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011ad0:	675a      	str	r2, [r3, #116]	@ 0x74
 8011ad2:	e011      	b.n	8011af8 <_tx_queue_receive+0x328>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011ad8:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011ade:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011aea:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011af0:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011af4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011af6:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8011af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011afa:	1c5a      	adds	r2, r3, #1
 8011afc:	68fb      	ldr	r3, [r7, #12]
 8011afe:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8011b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b02:	2205      	movs	r2, #5
 8011b04:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011b06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b08:	2201      	movs	r2, #1
 8011b0a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011b0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b0e:	687a      	ldr	r2, [r7, #4]
 8011b10:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011b12:	4b10      	ldr	r3, [pc, #64]	@ (8011b54 <_tx_queue_receive+0x384>)
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	1c5a      	adds	r2, r3, #1
 8011b18:	4b0e      	ldr	r3, [pc, #56]	@ (8011b54 <_tx_queue_receive+0x384>)
 8011b1a:	601a      	str	r2, [r3, #0]
 8011b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b1e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011b20:	697b      	ldr	r3, [r7, #20]
 8011b22:	f383 8810 	msr	PRIMASK, r3
}
 8011b26:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b2a:	0018      	movs	r0, r3
 8011b2c:	f000 fe00 	bl	8012730 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011b32:	2284      	movs	r2, #132	@ 0x84
 8011b34:	589b      	ldr	r3, [r3, r2]
 8011b36:	643b      	str	r3, [r7, #64]	@ 0x40
 8011b38:	e007      	b.n	8011b4a <_tx_queue_receive+0x37a>
 8011b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011b3c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	f383 8810 	msr	PRIMASK, r3
}
 8011b44:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_QUEUE_EMPTY;
 8011b46:	230a      	movs	r3, #10
 8011b48:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 8011b4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8011b4c:	0018      	movs	r0, r3
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	b014      	add	sp, #80	@ 0x50
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	2000a880 	.word	0x2000a880
 8011b58:	2000a7e8 	.word	0x2000a7e8
 8011b5c:	080115bd 	.word	0x080115bd

08011b60 <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b094      	sub	sp, #80	@ 0x50
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	60f8      	str	r0, [r7, #12]
 8011b68:	60b9      	str	r1, [r7, #8]
 8011b6a:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011b70:	f3ef 8310 	mrs	r3, PRIMASK
 8011b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011b76:	b672      	cpsid	i
    return(primask_value);
 8011b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8011b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b80:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	695b      	ldr	r3, [r3, #20]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d100      	bne.n	8011b8c <_tx_queue_send+0x2c>
 8011b8a:	e09b      	b.n	8011cc4 <_tx_queue_send+0x164>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8011b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d13c      	bne.n	8011c0c <_tx_queue_send+0xac>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8011b92:	68fb      	ldr	r3, [r7, #12]
 8011b94:	695b      	ldr	r3, [r3, #20]
 8011b96:	1e5a      	subs	r2, r3, #1
 8011b98:	68fb      	ldr	r3, [r7, #12]
 8011b9a:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
 8011b9e:	691b      	ldr	r3, [r3, #16]
 8011ba0:	1c5a      	adds	r2, r3, #1
 8011ba2:	68fb      	ldr	r3, [r7, #12]
 8011ba4:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bae:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	689b      	ldr	r3, [r3, #8]
 8011bb4:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011bb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011bb8:	1d13      	adds	r3, r2, #4
 8011bba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bbe:	1d19      	adds	r1, r3, #4
 8011bc0:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011bc2:	6812      	ldr	r2, [r2, #0]
 8011bc4:	601a      	str	r2, [r3, #0]
 8011bc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d90e      	bls.n	8011bea <_tx_queue_send+0x8a>
 8011bcc:	e007      	b.n	8011bde <_tx_queue_send+0x7e>
 8011bce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011bd0:	1d13      	adds	r3, r2, #4
 8011bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011bd6:	1d19      	adds	r1, r3, #4
 8011bd8:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011bda:	6812      	ldr	r2, [r2, #0]
 8011bdc:	601a      	str	r2, [r3, #0]
 8011bde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011be0:	3b01      	subs	r3, #1
 8011be2:	647b      	str	r3, [r7, #68]	@ 0x44
 8011be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d1f1      	bne.n	8011bce <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	69db      	ldr	r3, [r3, #28]
 8011bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d102      	bne.n	8011bfa <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	699b      	ldr	r3, [r3, #24]
 8011bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011bfe:	625a      	str	r2, [r3, #36]	@ 0x24
 8011c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011c02:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c06:	f383 8810 	msr	PRIMASK, r3
}
 8011c0a:	e0ca      	b.n	8011da2 <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c10:	637b      	str	r3, [r7, #52]	@ 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8011c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c14:	3b01      	subs	r3, #1
 8011c16:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d103      	bne.n	8011c26 <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	2200      	movs	r2, #0
 8011c22:	629a      	str	r2, [r3, #40]	@ 0x28
 8011c24:	e012      	b.n	8011c4c <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8011c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8011c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c32:	633b      	str	r3, [r7, #48]	@ 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c38:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c44:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8011c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011c4a:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8011c50:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011c52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c54:	2200      	movs	r2, #0
 8011c56:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8011c58:	68bb      	ldr	r3, [r7, #8]
 8011c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8011c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011c60:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	689b      	ldr	r3, [r3, #8]
 8011c66:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8011c68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011c6a:	1d13      	adds	r3, r2, #4
 8011c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c70:	1d19      	adds	r1, r3, #4
 8011c72:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011c74:	6812      	ldr	r2, [r2, #0]
 8011c76:	601a      	str	r2, [r3, #0]
 8011c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c7a:	2b01      	cmp	r3, #1
 8011c7c:	d90e      	bls.n	8011c9c <_tx_queue_send+0x13c>
 8011c7e:	e007      	b.n	8011c90 <_tx_queue_send+0x130>
 8011c80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011c82:	1d13      	adds	r3, r2, #4
 8011c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c88:	1d19      	adds	r1, r3, #4
 8011c8a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8011c8c:	6812      	ldr	r2, [r2, #0]
 8011c8e:	601a      	str	r2, [r3, #0]
 8011c90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c92:	3b01      	subs	r3, #1
 8011c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8011c96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d1f1      	bne.n	8011c80 <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c9e:	2284      	movs	r2, #132	@ 0x84
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	5099      	str	r1, [r3, r2]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011ca4:	4b41      	ldr	r3, [pc, #260]	@ (8011dac <_tx_queue_send+0x24c>)
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	1c5a      	adds	r2, r3, #1
 8011caa:	4b40      	ldr	r3, [pc, #256]	@ (8011dac <_tx_queue_send+0x24c>)
 8011cac:	601a      	str	r2, [r3, #0]
 8011cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cb0:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cb2:	6a3b      	ldr	r3, [r7, #32]
 8011cb4:	f383 8810 	msr	PRIMASK, r3
}
 8011cb8:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8011cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cbc:	0018      	movs	r0, r3
 8011cbe:	f000 fc37 	bl	8012530 <_tx_thread_system_resume>
 8011cc2:	e06e      	b.n	8011da2 <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d063      	beq.n	8011d92 <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011cca:	4b38      	ldr	r3, [pc, #224]	@ (8011dac <_tx_queue_send+0x24c>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d008      	beq.n	8011ce4 <_tx_queue_send+0x184>
 8011cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cd4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	f383 8810 	msr	PRIMASK, r3
}
 8011cdc:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 8011cde:	230b      	movs	r3, #11
 8011ce0:	643b      	str	r3, [r7, #64]	@ 0x40
 8011ce2:	e05e      	b.n	8011da2 <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011ce4:	4b32      	ldr	r3, [pc, #200]	@ (8011db0 <_tx_queue_send+0x250>)
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8011cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cec:	4a31      	ldr	r2, [pc, #196]	@ (8011db4 <_tx_queue_send+0x254>)
 8011cee:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 8011cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cf2:	68fa      	ldr	r2, [r7, #12]
 8011cf4:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8011cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cf8:	68ba      	ldr	r2, [r7, #8]
 8011cfa:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8011cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cfe:	2280      	movs	r2, #128	@ 0x80
 8011d00:	2100      	movs	r1, #0
 8011d02:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8011d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d06:	22ac      	movs	r2, #172	@ 0xac
 8011d08:	589b      	ldr	r3, [r3, r2]
 8011d0a:	1c5a      	adds	r2, r3, #1
 8011d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d0e:	21ac      	movs	r1, #172	@ 0xac
 8011d10:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 8011d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d109      	bne.n	8011d2c <_tx_queue_send+0x1cc>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d1c:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8011d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d22:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d28:	675a      	str	r2, [r3, #116]	@ 0x74
 8011d2a:	e011      	b.n	8011d50 <_tx_queue_send+0x1f0>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d30:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 8011d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d36:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8011d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011d42:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011d44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d48:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d4c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011d4e:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 8011d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d52:	1c5a      	adds	r2, r3, #1
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 8011d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d5a:	2205      	movs	r2, #5
 8011d5c:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d60:	2201      	movs	r2, #1
 8011d62:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8011d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d66:	687a      	ldr	r2, [r7, #4]
 8011d68:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011d6a:	4b10      	ldr	r3, [pc, #64]	@ (8011dac <_tx_queue_send+0x24c>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	1c5a      	adds	r2, r3, #1
 8011d70:	4b0e      	ldr	r3, [pc, #56]	@ (8011dac <_tx_queue_send+0x24c>)
 8011d72:	601a      	str	r2, [r3, #0]
 8011d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d76:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d78:	69bb      	ldr	r3, [r7, #24]
 8011d7a:	f383 8810 	msr	PRIMASK, r3
}
 8011d7e:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d82:	0018      	movs	r0, r3
 8011d84:	f000 fcd4 	bl	8012730 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011d88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d8a:	2284      	movs	r2, #132	@ 0x84
 8011d8c:	589b      	ldr	r3, [r3, r2]
 8011d8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011d90:	e007      	b.n	8011da2 <_tx_queue_send+0x242>
 8011d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d94:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d96:	697b      	ldr	r3, [r7, #20]
 8011d98:	f383 8810 	msr	PRIMASK, r3
}
 8011d9c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 8011d9e:	230b      	movs	r3, #11
 8011da0:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 8011da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8011da4:	0018      	movs	r0, r3
 8011da6:	46bd      	mov	sp, r7
 8011da8:	b014      	add	sp, #80	@ 0x50
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	2000a880 	.word	0x2000a880
 8011db0:	2000a7e8 	.word	0x2000a7e8
 8011db4:	080115bd 	.word	0x080115bd

08011db8 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b08a      	sub	sp, #40	@ 0x28
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8011dc4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011dc6:	b672      	cpsid	i
    return(primask_value);
 8011dc8:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 8011dca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	691b      	ldr	r3, [r3, #16]
 8011dd0:	623b      	str	r3, [r7, #32]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8011dd2:	6a3b      	ldr	r3, [r7, #32]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d10a      	bne.n	8011dee <_tx_semaphore_put+0x36>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	689b      	ldr	r3, [r3, #8]
 8011ddc:	1c5a      	adds	r2, r3, #1
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	609a      	str	r2, [r3, #8]
 8011de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011de4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011de6:	68fb      	ldr	r3, [r7, #12]
 8011de8:	f383 8810 	msr	PRIMASK, r3
}
 8011dec:	e034      	b.n	8011e58 <_tx_semaphore_put+0xa0>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	68db      	ldr	r3, [r3, #12]
 8011df2:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8011df4:	6a3b      	ldr	r3, [r7, #32]
 8011df6:	3b01      	subs	r3, #1
 8011df8:	623b      	str	r3, [r7, #32]
        if (suspended_count == TX_NO_SUSPENSIONS)
 8011dfa:	6a3b      	ldr	r3, [r7, #32]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d103      	bne.n	8011e08 <_tx_semaphore_put+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	2200      	movs	r2, #0
 8011e04:	60da      	str	r2, [r3, #12]
 8011e06:	e00e      	b.n	8011e26 <_tx_semaphore_put+0x6e>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011e0c:	61bb      	str	r3, [r7, #24]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	69ba      	ldr	r2, [r7, #24]
 8011e12:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011e14:	69fb      	ldr	r3, [r7, #28]
 8011e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011e18:	617b      	str	r3, [r7, #20]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8011e1a:	69bb      	ldr	r3, [r7, #24]
 8011e1c:	697a      	ldr	r2, [r7, #20]
 8011e1e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011e20:	697b      	ldr	r3, [r7, #20]
 8011e22:	69ba      	ldr	r2, [r7, #24]
 8011e24:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	6a3a      	ldr	r2, [r7, #32]
 8011e2a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8011e2c:	69fb      	ldr	r3, [r7, #28]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011e32:	69fb      	ldr	r3, [r7, #28]
 8011e34:	2284      	movs	r2, #132	@ 0x84
 8011e36:	2100      	movs	r1, #0
 8011e38:	5099      	str	r1, [r3, r2]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8011e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8011e64 <_tx_semaphore_put+0xac>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	1c5a      	adds	r2, r3, #1
 8011e40:	4b08      	ldr	r3, [pc, #32]	@ (8011e64 <_tx_semaphore_put+0xac>)
 8011e42:	601a      	str	r2, [r3, #0]
 8011e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011e48:	68bb      	ldr	r3, [r7, #8]
 8011e4a:	f383 8810 	msr	PRIMASK, r3
}
 8011e4e:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011e50:	69fb      	ldr	r3, [r7, #28]
 8011e52:	0018      	movs	r0, r3
 8011e54:	f000 fb6c 	bl	8012530 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8011e58:	2300      	movs	r3, #0
}
 8011e5a:	0018      	movs	r0, r3
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	b00a      	add	sp, #40	@ 0x28
 8011e60:	bd80      	pop	{r7, pc}
 8011e62:	46c0      	nop			@ (mov r8, r8)
 8011e64:	2000a880 	.word	0x2000a880

08011e68 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b098      	sub	sp, #96	@ 0x60
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	607a      	str	r2, [r7, #4]
 8011e74:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 8011e76:	2300      	movs	r3, #0
 8011e78:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8011e7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011e7c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011e7e:	2347      	movs	r3, #71	@ 0x47
 8011e80:	18fb      	adds	r3, r7, r3
 8011e82:	22ef      	movs	r2, #239	@ 0xef
 8011e84:	701a      	strb	r2, [r3, #0]
 8011e86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011e88:	643b      	str	r3, [r7, #64]	@ 0x40
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	653b      	str	r3, [r7, #80]	@ 0x50
 8011e8e:	e009      	b.n	8011ea4 <_tx_thread_create+0x3c>
 8011e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011e92:	1c5a      	adds	r2, r3, #1
 8011e94:	657a      	str	r2, [r7, #84]	@ 0x54
 8011e96:	2247      	movs	r2, #71	@ 0x47
 8011e98:	18ba      	adds	r2, r7, r2
 8011e9a:	7812      	ldrb	r2, [r2, #0]
 8011e9c:	701a      	strb	r2, [r3, #0]
 8011e9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ea0:	3301      	adds	r3, #1
 8011ea2:	653b      	str	r3, [r7, #80]	@ 0x50
 8011ea4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011ea6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ea8:	429a      	cmp	r2, r3
 8011eaa:	d3f1      	bcc.n	8011e90 <_tx_thread_create+0x28>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 8011eac:	68fb      	ldr	r3, [r7, #12]
 8011eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011eb0:	233f      	movs	r3, #63	@ 0x3f
 8011eb2:	18fb      	adds	r3, r7, r3
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	701a      	strb	r2, [r3, #0]
 8011eb8:	23b0      	movs	r3, #176	@ 0xb0
 8011eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ec0:	e009      	b.n	8011ed6 <_tx_thread_create+0x6e>
 8011ec2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ec4:	1c5a      	adds	r2, r3, #1
 8011ec6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8011ec8:	223f      	movs	r2, #63	@ 0x3f
 8011eca:	18ba      	adds	r2, r7, r2
 8011ecc:	7812      	ldrb	r2, [r2, #0]
 8011ece:	701a      	strb	r2, [r3, #0]
 8011ed0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011ed6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011eda:	429a      	cmp	r2, r3
 8011edc:	d3f1      	bcc.n	8011ec2 <_tx_thread_create+0x5a>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8011ede:	68fb      	ldr	r3, [r7, #12]
 8011ee0:	68ba      	ldr	r2, [r7, #8]
 8011ee2:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	687a      	ldr	r2, [r7, #4]
 8011ee8:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	683a      	ldr	r2, [r7, #0]
 8011eee:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011ef4:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8011ef6:	68fb      	ldr	r3, [r7, #12]
 8011ef8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011efa:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f00:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8011f02:	68fb      	ldr	r3, [r7, #12]
 8011f04:	2194      	movs	r1, #148	@ 0x94
 8011f06:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f08:	505a      	str	r2, [r3, r1]
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011f0e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011f10:	68fb      	ldr	r3, [r7, #12]
 8011f12:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011f14:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	229c      	movs	r2, #156	@ 0x9c
 8011f1a:	2120      	movs	r1, #32
 8011f1c:	5099      	str	r1, [r3, r2]

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8011f1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011f20:	637b      	str	r3, [r7, #52]	@ 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8011f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011f24:	3b01      	subs	r3, #1
 8011f26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f28:	18d3      	adds	r3, r2, r3
 8011f2a:	637b      	str	r3, [r7, #52]	@ 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8011f2c:	68fb      	ldr	r3, [r7, #12]
 8011f2e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011f30:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8011f32:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011f36:	429a      	cmp	r2, r3
 8011f38:	d007      	beq.n	8011f4a <_tx_thread_create+0xe2>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	2298      	movs	r2, #152	@ 0x98
 8011f44:	2100      	movs	r1, #0
 8011f46:	5099      	str	r1, [r3, r2]
 8011f48:	e006      	b.n	8011f58 <_tx_thread_create+0xf0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8011f50:	68fb      	ldr	r3, [r7, #12]
 8011f52:	2198      	movs	r1, #152	@ 0x98
 8011f54:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011f56:	505a      	str	r2, [r3, r1]
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011f58:	68fb      	ldr	r3, [r7, #12]
 8011f5a:	2203      	movs	r2, #3
 8011f5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	4a48      	ldr	r2, [pc, #288]	@ (8012084 <_tx_thread_create+0x21c>)
 8011f62:	655a      	str	r2, [r3, #84]	@ 0x54
 8011f64:	68fa      	ldr	r2, [r7, #12]
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8011f6a:	4a47      	ldr	r2, [pc, #284]	@ (8012088 <_tx_thread_create+0x220>)
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	0011      	movs	r1, r2
 8011f70:	0018      	movs	r0, r3
 8011f72:	f7ee f975 	bl	8000260 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011f76:	f3ef 8310 	mrs	r3, PRIMASK
 8011f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011f7c:	b672      	cpsid	i
    return(primask_value);
 8011f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8011f80:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	4a41      	ldr	r2, [pc, #260]	@ (801208c <_tx_thread_create+0x224>)
 8011f86:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8011f88:	4b41      	ldr	r3, [pc, #260]	@ (8012090 <_tx_thread_create+0x228>)
 8011f8a:	681b      	ldr	r3, [r3, #0]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d10b      	bne.n	8011fa8 <_tx_thread_create+0x140>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8011f90:	4b40      	ldr	r3, [pc, #256]	@ (8012094 <_tx_thread_create+0x22c>)
 8011f92:	68fa      	ldr	r2, [r7, #12]
 8011f94:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2188      	movs	r1, #136	@ 0x88
 8011f9a:	68fa      	ldr	r2, [r7, #12]
 8011f9c:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	218c      	movs	r1, #140	@ 0x8c
 8011fa2:	68fa      	ldr	r2, [r7, #12]
 8011fa4:	505a      	str	r2, [r3, r1]
 8011fa6:	e016      	b.n	8011fd6 <_tx_thread_create+0x16e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8011fa8:	4b3a      	ldr	r3, [pc, #232]	@ (8012094 <_tx_thread_create+0x22c>)
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 8011fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fb0:	228c      	movs	r2, #140	@ 0x8c
 8011fb2:	589b      	ldr	r3, [r3, r2]
 8011fb4:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 8011fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fb8:	218c      	movs	r1, #140	@ 0x8c
 8011fba:	68fa      	ldr	r2, [r7, #12]
 8011fbc:	505a      	str	r2, [r3, r1]
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8011fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011fc0:	2188      	movs	r1, #136	@ 0x88
 8011fc2:	68fa      	ldr	r2, [r7, #12]
 8011fc4:	505a      	str	r2, [r3, r1]

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	218c      	movs	r1, #140	@ 0x8c
 8011fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fcc:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_next =      next_thread;
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2188      	movs	r1, #136	@ 0x88
 8011fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011fd4:	505a      	str	r2, [r3, r1]
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8011fd6:	4b2e      	ldr	r3, [pc, #184]	@ (8012090 <_tx_thread_create+0x228>)
 8011fd8:	681b      	ldr	r3, [r3, #0]
 8011fda:	1c5a      	adds	r2, r3, #1
 8011fdc:	4b2c      	ldr	r3, [pc, #176]	@ (8012090 <_tx_thread_create+0x228>)
 8011fde:	601a      	str	r2, [r3, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011fe0:	4b2d      	ldr	r3, [pc, #180]	@ (8012098 <_tx_thread_create+0x230>)
 8011fe2:	681b      	ldr	r3, [r3, #0]
 8011fe4:	1c5a      	adds	r2, r3, #1
 8011fe6:	4b2c      	ldr	r3, [pc, #176]	@ (8012098 <_tx_thread_create+0x230>)
 8011fe8:	601a      	str	r2, [r3, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8011fea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011fec:	2b01      	cmp	r3, #1
 8011fee:	d12a      	bne.n	8012046 <_tx_thread_create+0x1de>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011ff0:	f3ef 8305 	mrs	r3, IPSR
 8011ff4:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8011ff6:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011ff8:	4b28      	ldr	r3, [pc, #160]	@ (801209c <_tx_thread_create+0x234>)
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	4313      	orrs	r3, r2
 8011ffe:	4a28      	ldr	r2, [pc, #160]	@ (80120a0 <_tx_thread_create+0x238>)
 8012000:	4293      	cmp	r3, r2
 8012002:	d90d      	bls.n	8012020 <_tx_thread_create+0x1b8>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8012004:	4b27      	ldr	r3, [pc, #156]	@ (80120a4 <_tx_thread_create+0x23c>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801200a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801200c:	2b00      	cmp	r3, #0
 801200e:	d009      	beq.n	8012024 <_tx_thread_create+0x1bc>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8012010:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012014:	65bb      	str	r3, [r7, #88]	@ 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8012016:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801201a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801201c:	63da      	str	r2, [r3, #60]	@ 0x3c
 801201e:	e001      	b.n	8012024 <_tx_thread_create+0x1bc>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8012020:	2300      	movs	r3, #0
 8012022:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8012024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012026:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012028:	69fb      	ldr	r3, [r7, #28]
 801202a:	f383 8810 	msr	PRIMASK, r3
}
 801202e:	46c0      	nop			@ (mov r8, r8)

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	0018      	movs	r0, r3
 8012034:	f000 fa7c 	bl	8012530 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8012038:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801203a:	2b00      	cmp	r3, #0
 801203c:	d01c      	beq.n	8012078 <_tx_thread_create+0x210>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801203e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012040:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012042:	63da      	str	r2, [r3, #60]	@ 0x3c
 8012044:	e018      	b.n	8012078 <_tx_thread_create+0x210>
 8012046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012048:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	f383 8810 	msr	PRIMASK, r3
}
 8012050:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012052:	f3ef 8310 	mrs	r3, PRIMASK
 8012056:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012058:	b672      	cpsid	i
    return(primask_value);
 801205a:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801205c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801205e:	4b0e      	ldr	r3, [pc, #56]	@ (8012098 <_tx_thread_create+0x230>)
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	1e5a      	subs	r2, r3, #1
 8012064:	4b0c      	ldr	r3, [pc, #48]	@ (8012098 <_tx_thread_create+0x230>)
 8012066:	601a      	str	r2, [r3, #0]
 8012068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801206a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801206c:	69bb      	ldr	r3, [r7, #24]
 801206e:	f383 8810 	msr	PRIMASK, r3
}
 8012072:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012074:	f000 fa24 	bl	80124c0 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8012078:	2300      	movs	r3, #0
}
 801207a:	0018      	movs	r0, r3
 801207c:	46bd      	mov	sp, r7
 801207e:	b018      	add	sp, #96	@ 0x60
 8012080:	bd80      	pop	{r7, pc}
 8012082:	46c0      	nop			@ (mov r8, r8)
 8012084:	08012add 	.word	0x08012add
 8012088:	0801226d 	.word	0x0801226d
 801208c:	54485244 	.word	0x54485244
 8012090:	2000a7f4 	.word	0x2000a7f4
 8012094:	2000a7f0 	.word	0x2000a7f0
 8012098:	2000a880 	.word	0x2000a880
 801209c:	20000010 	.word	0x20000010
 80120a0:	f0f0f0ef 	.word	0xf0f0f0ef
 80120a4:	2000a7ec 	.word	0x2000a7ec

080120a8 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b084      	sub	sp, #16
 80120ac:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80120ae:	f3ef 8310 	mrs	r3, PRIMASK
 80120b2:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80120b4:	b672      	cpsid	i
    return(primask_value);
 80120b6:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80120b8:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80120ba:	4b07      	ldr	r3, [pc, #28]	@ (80120d8 <_tx_thread_identify+0x30>)
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	60bb      	str	r3, [r7, #8]
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	f383 8810 	msr	PRIMASK, r3
}
 80120ca:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80120cc:	68bb      	ldr	r3, [r7, #8]
}
 80120ce:	0018      	movs	r0, r3
 80120d0:	46bd      	mov	sp, r7
 80120d2:	b004      	add	sp, #16
 80120d4:	bd80      	pop	{r7, pc}
 80120d6:	46c0      	nop			@ (mov r8, r8)
 80120d8:	2000a7e8 	.word	0x2000a7e8

080120dc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b088      	sub	sp, #32
 80120e0:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80120e2:	4b28      	ldr	r3, [pc, #160]	@ (8012184 <_tx_thread_initialize+0xa8>)
 80120e4:	2200      	movs	r2, #0
 80120e6:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80120e8:	4b27      	ldr	r3, [pc, #156]	@ (8012188 <_tx_thread_initialize+0xac>)
 80120ea:	2200      	movs	r2, #0
 80120ec:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80120ee:	4b27      	ldr	r3, [pc, #156]	@ (801218c <_tx_thread_initialize+0xb0>)
 80120f0:	61fb      	str	r3, [r7, #28]
 80120f2:	230f      	movs	r3, #15
 80120f4:	18fb      	adds	r3, r7, r3
 80120f6:	2200      	movs	r2, #0
 80120f8:	701a      	strb	r2, [r3, #0]
 80120fa:	2304      	movs	r3, #4
 80120fc:	60bb      	str	r3, [r7, #8]
 80120fe:	2300      	movs	r3, #0
 8012100:	61bb      	str	r3, [r7, #24]
 8012102:	e009      	b.n	8012118 <_tx_thread_initialize+0x3c>
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	1c5a      	adds	r2, r3, #1
 8012108:	61fa      	str	r2, [r7, #28]
 801210a:	220f      	movs	r2, #15
 801210c:	18ba      	adds	r2, r7, r2
 801210e:	7812      	ldrb	r2, [r2, #0]
 8012110:	701a      	strb	r2, [r3, #0]
 8012112:	69bb      	ldr	r3, [r7, #24]
 8012114:	3301      	adds	r3, #1
 8012116:	61bb      	str	r3, [r7, #24]
 8012118:	69ba      	ldr	r2, [r7, #24]
 801211a:	68bb      	ldr	r3, [r7, #8]
 801211c:	429a      	cmp	r2, r3
 801211e:	d3f1      	bcc.n	8012104 <_tx_thread_initialize+0x28>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012120:	4b1b      	ldr	r3, [pc, #108]	@ (8012190 <_tx_thread_initialize+0xb4>)
 8012122:	2220      	movs	r2, #32
 8012124:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8012126:	4b1b      	ldr	r3, [pc, #108]	@ (8012194 <_tx_thread_initialize+0xb8>)
 8012128:	617b      	str	r3, [r7, #20]
 801212a:	1dfb      	adds	r3, r7, #7
 801212c:	2200      	movs	r2, #0
 801212e:	701a      	strb	r2, [r3, #0]
 8012130:	2380      	movs	r3, #128	@ 0x80
 8012132:	603b      	str	r3, [r7, #0]
 8012134:	2300      	movs	r3, #0
 8012136:	613b      	str	r3, [r7, #16]
 8012138:	e008      	b.n	801214c <_tx_thread_initialize+0x70>
 801213a:	697b      	ldr	r3, [r7, #20]
 801213c:	1c5a      	adds	r2, r3, #1
 801213e:	617a      	str	r2, [r7, #20]
 8012140:	1dfa      	adds	r2, r7, #7
 8012142:	7812      	ldrb	r2, [r2, #0]
 8012144:	701a      	strb	r2, [r3, #0]
 8012146:	693b      	ldr	r3, [r7, #16]
 8012148:	3301      	adds	r3, #1
 801214a:	613b      	str	r3, [r7, #16]
 801214c:	693a      	ldr	r2, [r7, #16]
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	429a      	cmp	r2, r3
 8012152:	d3f2      	bcc.n	801213a <_tx_thread_initialize+0x5e>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8012154:	4b10      	ldr	r3, [pc, #64]	@ (8012198 <_tx_thread_initialize+0xbc>)
 8012156:	2200      	movs	r2, #0
 8012158:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 801215a:	4b10      	ldr	r3, [pc, #64]	@ (801219c <_tx_thread_initialize+0xc0>)
 801215c:	2200      	movs	r2, #0
 801215e:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 8012160:	4b0f      	ldr	r3, [pc, #60]	@ (80121a0 <_tx_thread_initialize+0xc4>)
 8012162:	2200      	movs	r2, #0
 8012164:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8012166:	4b0f      	ldr	r3, [pc, #60]	@ (80121a4 <_tx_thread_initialize+0xc8>)
 8012168:	2200      	movs	r2, #0
 801216a:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 801216c:	4b0e      	ldr	r3, [pc, #56]	@ (80121a8 <_tx_thread_initialize+0xcc>)
 801216e:	681b      	ldr	r3, [r3, #0]
 8012170:	2285      	movs	r2, #133	@ 0x85
 8012172:	0452      	lsls	r2, r2, #17
 8012174:	431a      	orrs	r2, r3
    _tx_build_options =  _tx_build_options 
 8012176:	4b0c      	ldr	r3, [pc, #48]	@ (80121a8 <_tx_thread_initialize+0xcc>)
 8012178:	601a      	str	r2, [r3, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 801217a:	46c0      	nop			@ (mov r8, r8)
 801217c:	46bd      	mov	sp, r7
 801217e:	b008      	add	sp, #32
 8012180:	bd80      	pop	{r7, pc}
 8012182:	46c0      	nop			@ (mov r8, r8)
 8012184:	2000a7e8 	.word	0x2000a7e8
 8012188:	2000a7ec 	.word	0x2000a7ec
 801218c:	2000a7f8 	.word	0x2000a7f8
 8012190:	2000a7fc 	.word	0x2000a7fc
 8012194:	2000a800 	.word	0x2000a800
 8012198:	2000a7f0 	.word	0x2000a7f0
 801219c:	2000a7f4 	.word	0x2000a7f4
 80121a0:	2000a880 	.word	0x2000a880
 80121a4:	2000a884 	.word	0x2000a884
 80121a8:	2000a888 	.word	0x2000a888

080121ac <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b08a      	sub	sp, #40	@ 0x28
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 80121b4:	2300      	movs	r3, #0
 80121b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80121b8:	f3ef 8310 	mrs	r3, PRIMASK
 80121bc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80121be:	b672      	cpsid	i
    return(primask_value);
 80121c0:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80121c2:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121c8:	2b03      	cmp	r3, #3
 80121ca:	d130      	bne.n	801222e <_tx_thread_resume+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80121cc:	f3ef 8305 	mrs	r3, IPSR
 80121d0:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80121d2:	693a      	ldr	r2, [r7, #16]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80121d4:	4b21      	ldr	r3, [pc, #132]	@ (801225c <_tx_thread_resume+0xb0>)
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	4313      	orrs	r3, r2
 80121da:	4a21      	ldr	r2, [pc, #132]	@ (8012260 <_tx_thread_resume+0xb4>)
 80121dc:	4293      	cmp	r3, r2
 80121de:	d90d      	bls.n	80121fc <_tx_thread_resume+0x50>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80121e0:	4b20      	ldr	r3, [pc, #128]	@ (8012264 <_tx_thread_resume+0xb8>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80121e6:	6a3b      	ldr	r3, [r7, #32]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d009      	beq.n	8012200 <_tx_thread_resume+0x54>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80121ec:	6a3b      	ldr	r3, [r7, #32]
 80121ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80121f0:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80121f2:	6a3b      	ldr	r3, [r7, #32]
 80121f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121f6:	6a3b      	ldr	r3, [r7, #32]
 80121f8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80121fa:	e001      	b.n	8012200 <_tx_thread_resume+0x54>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80121fc:	2300      	movs	r3, #0
 80121fe:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8012200:	4b19      	ldr	r3, [pc, #100]	@ (8012268 <_tx_thread_resume+0xbc>)
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	1c5a      	adds	r2, r3, #1
 8012206:	4b18      	ldr	r3, [pc, #96]	@ (8012268 <_tx_thread_resume+0xbc>)
 8012208:	601a      	str	r2, [r3, #0]
 801220a:	69bb      	ldr	r3, [r7, #24]
 801220c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	f383 8810 	msr	PRIMASK, r3
}
 8012214:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	0018      	movs	r0, r3
 801221a:	f000 f989 	bl	8012530 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 801221e:	6a3b      	ldr	r3, [r7, #32]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d002      	beq.n	801222a <_tx_thread_resume+0x7e>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8012224:	6a3b      	ldr	r3, [r7, #32]
 8012226:	69fa      	ldr	r2, [r7, #28]
 8012228:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 801222a:	2300      	movs	r3, #0
 801222c:	e012      	b.n	8012254 <_tx_thread_resume+0xa8>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012232:	2b01      	cmp	r3, #1
 8012234:	d105      	bne.n	8012242 <_tx_thread_resume+0x96>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2200      	movs	r2, #0
 801223a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 801223c:	2319      	movs	r3, #25
 801223e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012240:	e001      	b.n	8012246 <_tx_thread_resume+0x9a>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8012242:	2312      	movs	r3, #18
 8012244:	627b      	str	r3, [r7, #36]	@ 0x24
 8012246:	69bb      	ldr	r3, [r7, #24]
 8012248:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	f383 8810 	msr	PRIMASK, r3
}
 8012250:	46c0      	nop			@ (mov r8, r8)
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8012252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012254:	0018      	movs	r0, r3
 8012256:	46bd      	mov	sp, r7
 8012258:	b00a      	add	sp, #40	@ 0x28
 801225a:	bd80      	pop	{r7, pc}
 801225c:	20000010 	.word	0x20000010
 8012260:	f0f0f0ef 	.word	0xf0f0f0ef
 8012264:	2000a7ec 	.word	0x2000a7ec
 8012268:	2000a880 	.word	0x2000a880

0801226c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b084      	sub	sp, #16
 8012270:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012272:	4b1a      	ldr	r3, [pc, #104]	@ (80122dc <_tx_thread_shell_entry+0x70>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012280:	0018      	movs	r0, r3
 8012282:	4790      	blx	r2

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8012284:	4b16      	ldr	r3, [pc, #88]	@ (80122e0 <_tx_thread_shell_entry+0x74>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d004      	beq.n	8012296 <_tx_thread_shell_entry+0x2a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 801228c:	4b14      	ldr	r3, [pc, #80]	@ (80122e0 <_tx_thread_shell_entry+0x74>)
 801228e:	681b      	ldr	r3, [r3, #0]
 8012290:	68fa      	ldr	r2, [r7, #12]
 8012292:	0010      	movs	r0, r2
 8012294:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012296:	f3ef 8310 	mrs	r3, PRIMASK
 801229a:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801229c:	b672      	cpsid	i
    return(primask_value);
 801229e:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80122a0:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	2201      	movs	r2, #1
 80122a6:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	2201      	movs	r2, #1
 80122ac:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2200      	movs	r2, #0
 80122b2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80122b4:	4b0b      	ldr	r3, [pc, #44]	@ (80122e4 <_tx_thread_shell_entry+0x78>)
 80122b6:	681b      	ldr	r3, [r3, #0]
 80122b8:	1c5a      	adds	r2, r3, #1
 80122ba:	4b0a      	ldr	r3, [pc, #40]	@ (80122e4 <_tx_thread_shell_entry+0x78>)
 80122bc:	601a      	str	r2, [r3, #0]
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f383 8810 	msr	PRIMASK, r3
}
 80122c8:	46c0      	nop			@ (mov r8, r8)
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	0018      	movs	r0, r3
 80122ce:	f000 fa2f 	bl	8012730 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80122d2:	46c0      	nop			@ (mov r8, r8)
 80122d4:	46bd      	mov	sp, r7
 80122d6:	b004      	add	sp, #16
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	46c0      	nop			@ (mov r8, r8)
 80122dc:	2000a7e8 	.word	0x2000a7e8
 80122e0:	2000a884 	.word	0x2000a884
 80122e4:	2000a880 	.word	0x2000a880

080122e8 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80122e8:	b580      	push	{r7, lr}
 80122ea:	b08e      	sub	sp, #56	@ 0x38
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80122f0:	f3ef 8310 	mrs	r3, PRIMASK
 80122f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 80122f6:	b672      	cpsid	i
    return(primask_value);
 80122f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80122fa:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80122fc:	4b35      	ldr	r3, [pc, #212]	@ (80123d4 <_tx_thread_sleep+0xec>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8012302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012304:	2b00      	cmp	r3, #0
 8012306:	d108      	bne.n	801231a <_tx_thread_sleep+0x32>
 8012308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801230a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801230c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801230e:	f383 8810 	msr	PRIMASK, r3
}
 8012312:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012314:	2313      	movs	r3, #19
 8012316:	637b      	str	r3, [r7, #52]	@ 0x34
 8012318:	e056      	b.n	80123c8 <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801231a:	f3ef 8305 	mrs	r3, IPSR
 801231e:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8012320:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012322:	4b2d      	ldr	r3, [pc, #180]	@ (80123d8 <_tx_thread_sleep+0xf0>)
 8012324:	681b      	ldr	r3, [r3, #0]
 8012326:	4313      	orrs	r3, r2
 8012328:	d008      	beq.n	801233c <_tx_thread_sleep+0x54>
 801232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801232c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801232e:	69fb      	ldr	r3, [r7, #28]
 8012330:	f383 8810 	msr	PRIMASK, r3
}
 8012334:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012336:	2313      	movs	r3, #19
 8012338:	637b      	str	r3, [r7, #52]	@ 0x34
 801233a:	e045      	b.n	80123c8 <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 801233c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801233e:	4b27      	ldr	r3, [pc, #156]	@ (80123dc <_tx_thread_sleep+0xf4>)
 8012340:	429a      	cmp	r2, r3
 8012342:	d108      	bne.n	8012356 <_tx_thread_sleep+0x6e>
 8012344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012346:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012348:	69bb      	ldr	r3, [r7, #24]
 801234a:	f383 8810 	msr	PRIMASK, r3
}
 801234e:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8012350:	2313      	movs	r3, #19
 8012352:	637b      	str	r3, [r7, #52]	@ 0x34
 8012354:	e038      	b.n	80123c8 <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d108      	bne.n	801236e <_tx_thread_sleep+0x86>
 801235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801235e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012360:	697b      	ldr	r3, [r7, #20]
 8012362:	f383 8810 	msr	PRIMASK, r3
}
 8012366:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8012368:	2300      	movs	r3, #0
 801236a:	637b      	str	r3, [r7, #52]	@ 0x34
 801236c:	e02c      	b.n	80123c8 <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 801236e:	4b1c      	ldr	r3, [pc, #112]	@ (80123e0 <_tx_thread_sleep+0xf8>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d008      	beq.n	8012388 <_tx_thread_sleep+0xa0>
 8012376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012378:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	f383 8810 	msr	PRIMASK, r3
}
 8012380:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8012382:	2313      	movs	r3, #19
 8012384:	637b      	str	r3, [r7, #52]	@ 0x34
 8012386:	e01f      	b.n	80123c8 <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8012388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801238a:	2204      	movs	r2, #4
 801238c:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012390:	2201      	movs	r2, #1
 8012392:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8012394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012396:	2284      	movs	r2, #132	@ 0x84
 8012398:	2100      	movs	r1, #0
 801239a:	5099      	str	r1, [r3, r2]

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 801239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80123a2:	4b0f      	ldr	r3, [pc, #60]	@ (80123e0 <_tx_thread_sleep+0xf8>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	1c5a      	adds	r2, r3, #1
 80123a8:	4b0d      	ldr	r3, [pc, #52]	@ (80123e0 <_tx_thread_sleep+0xf8>)
 80123aa:	601a      	str	r2, [r3, #0]
 80123ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	f383 8810 	msr	PRIMASK, r3
}
 80123b6:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80123b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ba:	0018      	movs	r0, r3
 80123bc:	f000 f9b8 	bl	8012730 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80123c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123c2:	2284      	movs	r2, #132	@ 0x84
 80123c4:	589b      	ldr	r3, [r3, r2]
 80123c6:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80123c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80123ca:	0018      	movs	r0, r3
 80123cc:	46bd      	mov	sp, r7
 80123ce:	b00e      	add	sp, #56	@ 0x38
 80123d0:	bd80      	pop	{r7, pc}
 80123d2:	46c0      	nop			@ (mov r8, r8)
 80123d4:	2000a7e8 	.word	0x2000a7e8
 80123d8:	20000010 	.word	0x20000010
 80123dc:	2000a930 	.word	0x2000a930
 80123e0:	2000a880 	.word	0x2000a880

080123e4 <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b08a      	sub	sp, #40	@ 0x28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80123ec:	f3ef 8310 	mrs	r3, PRIMASK
 80123f0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80123f2:	b672      	cpsid	i
    return(primask_value);
 80123f4:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80123f6:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80123f8:	4b2e      	ldr	r3, [pc, #184]	@ (80124b4 <_tx_thread_suspend+0xd0>)
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012402:	2b00      	cmp	r3, #0
 8012404:	d130      	bne.n	8012468 <_tx_thread_suspend+0x84>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8012406:	2300      	movs	r3, #0
 8012408:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801240a:	f3ef 8305 	mrs	r3, IPSR
 801240e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012410:	697a      	ldr	r2, [r7, #20]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8012412:	4b29      	ldr	r3, [pc, #164]	@ (80124b8 <_tx_thread_suspend+0xd4>)
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	4313      	orrs	r3, r2
 8012418:	d109      	bne.n	801242e <_tx_thread_suspend+0x4a>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 801241a:	69fa      	ldr	r2, [r7, #28]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	429a      	cmp	r2, r3
 8012420:	d105      	bne.n	801242e <_tx_thread_suspend+0x4a>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8012422:	4b26      	ldr	r3, [pc, #152]	@ (80124bc <_tx_thread_suspend+0xd8>)
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d001      	beq.n	801242e <_tx_thread_suspend+0x4a>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 801242a:	2314      	movs	r3, #20
 801242c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 801242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012430:	2b00      	cmp	r3, #0
 8012432:	d133      	bne.n	801249c <_tx_thread_suspend+0xb8>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2203      	movs	r2, #3
 8012438:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	2201      	movs	r2, #1
 801243e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	2200      	movs	r2, #0
 8012444:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8012446:	4b1d      	ldr	r3, [pc, #116]	@ (80124bc <_tx_thread_suspend+0xd8>)
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	1c5a      	adds	r2, r3, #1
 801244c:	4b1b      	ldr	r3, [pc, #108]	@ (80124bc <_tx_thread_suspend+0xd8>)
 801244e:	601a      	str	r2, [r3, #0]
 8012450:	6a3b      	ldr	r3, [r7, #32]
 8012452:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012454:	693b      	ldr	r3, [r7, #16]
 8012456:	f383 8810 	msr	PRIMASK, r3
}
 801245a:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	0018      	movs	r0, r3
 8012460:	f000 f966 	bl	8012730 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8012464:	2300      	movs	r3, #0
 8012466:	e020      	b.n	80124aa <_tx_thread_suspend+0xc6>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801246c:	2b02      	cmp	r3, #2
 801246e:	d102      	bne.n	8012476 <_tx_thread_suspend+0x92>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8012470:	2314      	movs	r3, #20
 8012472:	627b      	str	r3, [r7, #36]	@ 0x24
 8012474:	e012      	b.n	801249c <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801247a:	2b01      	cmp	r3, #1
 801247c:	d102      	bne.n	8012484 <_tx_thread_suspend+0xa0>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 801247e:	2314      	movs	r3, #20
 8012480:	627b      	str	r3, [r7, #36]	@ 0x24
 8012482:	e00b      	b.n	801249c <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012488:	2b03      	cmp	r3, #3
 801248a:	d102      	bne.n	8012492 <_tx_thread_suspend+0xae>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 801248c:	2300      	movs	r3, #0
 801248e:	627b      	str	r3, [r7, #36]	@ 0x24
 8012490:	e004      	b.n	801249c <_tx_thread_suspend+0xb8>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2201      	movs	r2, #1
 8012496:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8012498:	2300      	movs	r3, #0
 801249a:	627b      	str	r3, [r7, #36]	@ 0x24
 801249c:	6a3b      	ldr	r3, [r7, #32]
 801249e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	f383 8810 	msr	PRIMASK, r3
}
 80124a6:	46c0      	nop			@ (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 80124a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 80124aa:	0018      	movs	r0, r3
 80124ac:	46bd      	mov	sp, r7
 80124ae:	b00a      	add	sp, #40	@ 0x28
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	46c0      	nop			@ (mov r8, r8)
 80124b4:	2000a7e8 	.word	0x2000a7e8
 80124b8:	20000010 	.word	0x20000010
 80124bc:	2000a880 	.word	0x2000a880

080124c0 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b088      	sub	sp, #32
 80124c4:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80124c6:	4b16      	ldr	r3, [pc, #88]	@ (8012520 <_tx_thread_system_preempt_check+0x60>)
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d121      	bne.n	8012516 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80124d2:	4b14      	ldr	r3, [pc, #80]	@ (8012524 <_tx_thread_system_preempt_check+0x64>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80124d8:	4b13      	ldr	r3, [pc, #76]	@ (8012528 <_tx_thread_system_preempt_check+0x68>)
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80124de:	69ba      	ldr	r2, [r7, #24]
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d017      	beq.n	8012516 <_tx_thread_system_preempt_check+0x56>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80124e6:	4b11      	ldr	r3, [pc, #68]	@ (801252c <_tx_thread_system_preempt_check+0x6c>)
 80124e8:	2280      	movs	r2, #128	@ 0x80
 80124ea:	0552      	lsls	r2, r2, #21
 80124ec:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80124ee:	f3ef 8305 	mrs	r3, IPSR
 80124f2:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80124f4:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d10c      	bne.n	8012514 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80124fa:	f3ef 8310 	mrs	r3, PRIMASK
 80124fe:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 8012500:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 8012502:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012504:	b662      	cpsie	i
}
 8012506:	46c0      	nop			@ (mov r8, r8)
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f383 8810 	msr	PRIMASK, r3
}
 8012512:	46c0      	nop			@ (mov r8, r8)
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 8012514:	46c0      	nop			@ (mov r8, r8)

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8012516:	46c0      	nop			@ (mov r8, r8)
 8012518:	46bd      	mov	sp, r7
 801251a:	b008      	add	sp, #32
 801251c:	bd80      	pop	{r7, pc}
 801251e:	46c0      	nop			@ (mov r8, r8)
 8012520:	2000a880 	.word	0x2000a880
 8012524:	2000a7e8 	.word	0x2000a7e8
 8012528:	2000a7ec 	.word	0x2000a7ec
 801252c:	e000ed04 	.word	0xe000ed04

08012530 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b096      	sub	sp, #88	@ 0x58
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012538:	f3ef 8310 	mrs	r3, PRIMASK
 801253c:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 801253e:	b672      	cpsid	i
    return(primask_value);
 8012540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8012542:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012548:	2b00      	cmp	r3, #0
 801254a:	d005      	beq.n	8012558 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	334c      	adds	r3, #76	@ 0x4c
 8012550:	0018      	movs	r0, r3
 8012552:	f000 fc1f 	bl	8012d94 <_tx_timer_system_deactivate>
 8012556:	e002      	b.n	801255e <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	2200      	movs	r2, #0
 801255c:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 801255e:	4b6d      	ldr	r3, [pc, #436]	@ (8012714 <_tx_thread_system_resume+0x1e4>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	1e5a      	subs	r2, r3, #1
 8012564:	4b6b      	ldr	r3, [pc, #428]	@ (8012714 <_tx_thread_system_resume+0x1e4>)
 8012566:	601a      	str	r2, [r3, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801256c:	2b00      	cmp	r3, #0
 801256e:	d000      	beq.n	8012572 <_tx_thread_system_resume+0x42>
 8012570:	e084      	b.n	801267c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012576:	2b00      	cmp	r3, #0
 8012578:	d100      	bne.n	801257c <_tx_thread_system_resume+0x4c>
 801257a:	e098      	b.n	80126ae <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012580:	2b00      	cmp	r3, #0
 8012582:	d000      	beq.n	8012586 <_tx_thread_system_resume+0x56>
 8012584:	e073      	b.n	801266e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2200      	movs	r2, #0
 801258a:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012590:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8012592:	4b61      	ldr	r3, [pc, #388]	@ (8012718 <_tx_thread_system_resume+0x1e8>)
 8012594:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012596:	0092      	lsls	r2, r2, #2
 8012598:	58d3      	ldr	r3, [r2, r3]
 801259a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 801259c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d155      	bne.n	801264e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 80125a2:	4b5d      	ldr	r3, [pc, #372]	@ (8012718 <_tx_thread_system_resume+0x1e8>)
 80125a4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80125a6:	0092      	lsls	r2, r2, #2
 80125a8:	6879      	ldr	r1, [r7, #4]
 80125aa:	50d1      	str	r1, [r2, r3]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	687a      	ldr	r2, [r7, #4]
 80125b0:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 80125b8:	2201      	movs	r2, #1
 80125ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125bc:	409a      	lsls	r2, r3
 80125be:	0013      	movs	r3, r2
 80125c0:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 80125c2:	4b56      	ldr	r3, [pc, #344]	@ (801271c <_tx_thread_system_resume+0x1ec>)
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125c8:	431a      	orrs	r2, r3
 80125ca:	4b54      	ldr	r3, [pc, #336]	@ (801271c <_tx_thread_system_resume+0x1ec>)
 80125cc:	601a      	str	r2, [r3, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 80125ce:	4b54      	ldr	r3, [pc, #336]	@ (8012720 <_tx_thread_system_resume+0x1f0>)
 80125d0:	681b      	ldr	r3, [r3, #0]
 80125d2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80125d4:	429a      	cmp	r2, r3
 80125d6:	d26a      	bcs.n	80126ae <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 80125d8:	4b51      	ldr	r3, [pc, #324]	@ (8012720 <_tx_thread_system_resume+0x1f0>)
 80125da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80125dc:	601a      	str	r2, [r3, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 80125de:	4b51      	ldr	r3, [pc, #324]	@ (8012724 <_tx_thread_system_resume+0x1f4>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 80125e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d103      	bne.n	80125f2 <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80125ea:	4b4e      	ldr	r3, [pc, #312]	@ (8012724 <_tx_thread_system_resume+0x1f4>)
 80125ec:	687a      	ldr	r2, [r7, #4]
 80125ee:	601a      	str	r2, [r3, #0]
 80125f0:	e05d      	b.n	80126ae <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 80125f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80125f6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d258      	bcs.n	80126ae <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 80125fc:	4b49      	ldr	r3, [pc, #292]	@ (8012724 <_tx_thread_system_resume+0x1f4>)
 80125fe:	687a      	ldr	r2, [r7, #4]
 8012600:	601a      	str	r2, [r3, #0]
 8012602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012604:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012608:	f383 8810 	msr	PRIMASK, r3
}
 801260c:	46c0      	nop			@ (mov r8, r8)
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801260e:	4b41      	ldr	r3, [pc, #260]	@ (8012714 <_tx_thread_system_resume+0x1e4>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8012614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012616:	2b00      	cmp	r3, #0
 8012618:	d000      	beq.n	801261c <_tx_thread_system_resume+0xec>
 801261a:	e074      	b.n	8012706 <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801261c:	4b42      	ldr	r3, [pc, #264]	@ (8012728 <_tx_thread_system_resume+0x1f8>)
 801261e:	2280      	movs	r2, #128	@ 0x80
 8012620:	0552      	lsls	r2, r2, #21
 8012622:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012624:	f3ef 8305 	mrs	r3, IPSR
 8012628:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 801262a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 801262c:	2b00      	cmp	r3, #0
 801262e:	d10c      	bne.n	801264a <_tx_thread_system_resume+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012630:	f3ef 8310 	mrs	r3, PRIMASK
 8012634:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(primask_value);
 8012636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_primask_value();
 8012638:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801263a:	b662      	cpsie	i
}
 801263c:	46c0      	nop			@ (mov r8, r8)
 801263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012640:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012642:	6a3b      	ldr	r3, [r7, #32]
 8012644:	f383 8810 	msr	PRIMASK, r3
}
 8012648:	46c0      	nop			@ (mov r8, r8)
}
 801264a:	46c0      	nop			@ (mov r8, r8)
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 801264c:	e05b      	b.n	8012706 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 801264e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012652:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8012654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012656:	687a      	ldr	r2, [r7, #4]
 8012658:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 801265a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801265c:	687a      	ldr	r2, [r7, #4]
 801265e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012664:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801266a:	621a      	str	r2, [r3, #32]
 801266c:	e01f      	b.n	80126ae <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2203      	movs	r2, #3
 8012678:	631a      	str	r2, [r3, #48]	@ 0x30
 801267a:	e018      	b.n	80126ae <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012680:	2b01      	cmp	r3, #1
 8012682:	d014      	beq.n	80126ae <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012688:	2b02      	cmp	r3, #2
 801268a:	d010      	beq.n	80126ae <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012690:	2b00      	cmp	r3, #0
 8012692:	d106      	bne.n	80126a2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	2200      	movs	r2, #0
 8012698:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	2200      	movs	r2, #0
 801269e:	631a      	str	r2, [r3, #48]	@ 0x30
 80126a0:	e005      	b.n	80126ae <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2200      	movs	r2, #0
 80126a6:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	2203      	movs	r2, #3
 80126ac:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80126ae:	4b1f      	ldr	r3, [pc, #124]	@ (801272c <_tx_thread_system_resume+0x1fc>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80126b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80126b6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80126b8:	69fb      	ldr	r3, [r7, #28]
 80126ba:	f383 8810 	msr	PRIMASK, r3
}
 80126be:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80126c0:	4b18      	ldr	r3, [pc, #96]	@ (8012724 <_tx_thread_system_resume+0x1f4>)
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d020      	beq.n	801270c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80126ca:	4b12      	ldr	r3, [pc, #72]	@ (8012714 <_tx_thread_system_resume+0x1e4>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 80126d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	d11a      	bne.n	801270c <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80126d6:	4b14      	ldr	r3, [pc, #80]	@ (8012728 <_tx_thread_system_resume+0x1f8>)
 80126d8:	2280      	movs	r2, #128	@ 0x80
 80126da:	0552      	lsls	r2, r2, #21
 80126dc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80126de:	f3ef 8305 	mrs	r3, IPSR
 80126e2:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80126e4:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d10f      	bne.n	801270a <_tx_thread_system_resume+0x1da>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80126ea:	f3ef 8310 	mrs	r3, PRIMASK
 80126ee:	617b      	str	r3, [r7, #20]
    return(primask_value);
 80126f0:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 80126f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80126f4:	b662      	cpsie	i
}
 80126f6:	46c0      	nop			@ (mov r8, r8)
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	f383 8810 	msr	PRIMASK, r3
}
 8012702:	46c0      	nop			@ (mov r8, r8)
}
 8012704:	e001      	b.n	801270a <_tx_thread_system_resume+0x1da>
                                return;
 8012706:	46c0      	nop			@ (mov r8, r8)
 8012708:	e000      	b.n	801270c <_tx_thread_system_resume+0x1dc>
 801270a:	46c0      	nop			@ (mov r8, r8)

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 801270c:	46bd      	mov	sp, r7
 801270e:	b016      	add	sp, #88	@ 0x58
 8012710:	bd80      	pop	{r7, pc}
 8012712:	46c0      	nop			@ (mov r8, r8)
 8012714:	2000a880 	.word	0x2000a880
 8012718:	2000a800 	.word	0x2000a800
 801271c:	2000a7f8 	.word	0x2000a7f8
 8012720:	2000a7fc 	.word	0x2000a7fc
 8012724:	2000a7ec 	.word	0x2000a7ec
 8012728:	e000ed04 	.word	0xe000ed04
 801272c:	2000a7e8 	.word	0x2000a7e8

08012730 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b09c      	sub	sp, #112	@ 0x70
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012738:	4bb9      	ldr	r3, [pc, #740]	@ (8012a20 <_tx_thread_system_suspend+0x2f0>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	667b      	str	r3, [r7, #100]	@ 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801273e:	f3ef 8310 	mrs	r3, PRIMASK
 8012742:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012744:	b672      	cpsid	i
    return(primask_value);
 8012746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8012748:	663b      	str	r3, [r7, #96]	@ 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 801274a:	687a      	ldr	r2, [r7, #4]
 801274c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801274e:	429a      	cmp	r2, r3
 8012750:	d111      	bne.n	8012776 <_tx_thread_system_suspend+0x46>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012756:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8012758:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801275a:	2b00      	cmp	r3, #0
 801275c:	d007      	beq.n	801276e <_tx_thread_system_suspend+0x3e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 801275e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8012760:	3301      	adds	r3, #1
 8012762:	d004      	beq.n	801276e <_tx_thread_system_suspend+0x3e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	334c      	adds	r3, #76	@ 0x4c
 8012768:	0018      	movs	r0, r3
 801276a:	f000 fab5 	bl	8012cd8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	69da      	ldr	r2, [r3, #28]
 8012772:	4bac      	ldr	r3, [pc, #688]	@ (8012a24 <_tx_thread_system_suspend+0x2f4>)
 8012774:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8012776:	4bac      	ldr	r3, [pc, #688]	@ (8012a28 <_tx_thread_system_suspend+0x2f8>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	1e5a      	subs	r2, r3, #1
 801277c:	4baa      	ldr	r3, [pc, #680]	@ (8012a28 <_tx_thread_system_suspend+0x2f8>)
 801277e:	601a      	str	r2, [r3, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012784:	2b01      	cmp	r3, #1
 8012786:	d000      	beq.n	801278a <_tx_thread_system_suspend+0x5a>
 8012788:	e118      	b.n	80129bc <_tx_thread_system_suspend+0x28c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2200      	movs	r2, #0
 801278e:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012794:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	6a1b      	ldr	r3, [r3, #32]
 801279a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 801279c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d016      	beq.n	80127d2 <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127a8:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 80127aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80127ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80127ae:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 80127b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80127b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80127b4:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 80127b6:	4b9d      	ldr	r3, [pc, #628]	@ (8012a2c <_tx_thread_system_suspend+0x2fc>)
 80127b8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127ba:	0092      	lsls	r2, r2, #2
 80127bc:	58d3      	ldr	r3, [r2, r3]
 80127be:	687a      	ldr	r2, [r7, #4]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d000      	beq.n	80127c6 <_tx_thread_system_suspend+0x96>
 80127c4:	e0c9      	b.n	801295a <_tx_thread_system_suspend+0x22a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 80127c6:	4b99      	ldr	r3, [pc, #612]	@ (8012a2c <_tx_thread_system_suspend+0x2fc>)
 80127c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127ca:	0092      	lsls	r2, r2, #2
 80127cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80127ce:	50d1      	str	r1, [r2, r3]
 80127d0:	e0c3      	b.n	801295a <_tx_thread_system_suspend+0x22a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 80127d2:	4b96      	ldr	r3, [pc, #600]	@ (8012a2c <_tx_thread_system_suspend+0x2fc>)
 80127d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80127d6:	0092      	lsls	r2, r2, #2
 80127d8:	2100      	movs	r1, #0
 80127da:	50d1      	str	r1, [r2, r3]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 80127dc:	2201      	movs	r2, #1
 80127de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80127e0:	409a      	lsls	r2, r3
 80127e2:	0013      	movs	r3, r2
 80127e4:	66bb      	str	r3, [r7, #104]	@ 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 80127e6:	4b92      	ldr	r3, [pc, #584]	@ (8012a30 <_tx_thread_system_suspend+0x300>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80127ec:	43d2      	mvns	r2, r2
 80127ee:	401a      	ands	r2, r3
 80127f0:	4b8f      	ldr	r3, [pc, #572]	@ (8012a30 <_tx_thread_system_suspend+0x300>)
 80127f2:	601a      	str	r2, [r3, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 80127f4:	2300      	movs	r3, #0
 80127f6:	653b      	str	r3, [r7, #80]	@ 0x50
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 80127f8:	4b8d      	ldr	r3, [pc, #564]	@ (8012a30 <_tx_thread_system_suspend+0x300>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 80127fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012800:	2b00      	cmp	r3, #0
 8012802:	d12b      	bne.n	801285c <_tx_thread_system_suspend+0x12c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8012804:	4b8b      	ldr	r3, [pc, #556]	@ (8012a34 <_tx_thread_system_suspend+0x304>)
 8012806:	2220      	movs	r2, #32
 8012808:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 801280a:	4b8b      	ldr	r3, [pc, #556]	@ (8012a38 <_tx_thread_system_suspend+0x308>)
 801280c:	2200      	movs	r2, #0
 801280e:	601a      	str	r2, [r3, #0]
 8012810:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012812:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012814:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012816:	f383 8810 	msr	PRIMASK, r3
}
 801281a:	46c0      	nop			@ (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801281c:	4b82      	ldr	r3, [pc, #520]	@ (8012a28 <_tx_thread_system_suspend+0x2f8>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (combined_flags == ((ULONG) 0))
 8012822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012824:	2b00      	cmp	r3, #0
 8012826:	d000      	beq.n	801282a <_tx_thread_system_suspend+0xfa>
 8012828:	e0f2      	b.n	8012a10 <_tx_thread_system_suspend+0x2e0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801282a:	4b84      	ldr	r3, [pc, #528]	@ (8012a3c <_tx_thread_system_suspend+0x30c>)
 801282c:	2280      	movs	r2, #128	@ 0x80
 801282e:	0552      	lsls	r2, r2, #21
 8012830:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012832:	f3ef 8305 	mrs	r3, IPSR
 8012836:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(ipsr_value);
 8012838:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    if (__get_ipsr_value() == 0)
 801283a:	2b00      	cmp	r3, #0
 801283c:	d10c      	bne.n	8012858 <_tx_thread_system_suspend+0x128>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801283e:	f3ef 8310 	mrs	r3, PRIMASK
 8012842:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(primask_value);
 8012844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        interrupt_save = __get_primask_value();
 8012846:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012848:	b662      	cpsie	i
}
 801284a:	46c0      	nop			@ (mov r8, r8)
 801284c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801284e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012852:	f383 8810 	msr	PRIMASK, r3
}
 8012856:	46c0      	nop			@ (mov r8, r8)
}
 8012858:	46c0      	nop			@ (mov r8, r8)
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 801285a:	e0d9      	b.n	8012a10 <_tx_thread_system_suspend+0x2e0>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 801285c:	2300      	movs	r3, #0
 801285e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012862:	425a      	negs	r2, r3
 8012864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012866:	4013      	ands	r3, r2
 8012868:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801286a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801286c:	2b0f      	cmp	r3, #15
 801286e:	d80e      	bhi.n	801288e <_tx_thread_system_suspend+0x15e>
 8012870:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012872:	2b03      	cmp	r3, #3
 8012874:	d905      	bls.n	8012882 <_tx_thread_system_suspend+0x152>
 8012876:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012878:	089b      	lsrs	r3, r3, #2
 801287a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801287c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801287e:	3302      	adds	r3, #2
 8012880:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012882:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012884:	085b      	lsrs	r3, r3, #1
 8012886:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012888:	18d3      	adds	r3, r2, r3
 801288a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801288c:	e060      	b.n	8012950 <_tx_thread_system_suspend+0x220>
 801288e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012890:	2bff      	cmp	r3, #255	@ 0xff
 8012892:	d814      	bhi.n	80128be <_tx_thread_system_suspend+0x18e>
 8012894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012896:	091b      	lsrs	r3, r3, #4
 8012898:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801289a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801289c:	3304      	adds	r3, #4
 801289e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128a2:	2b03      	cmp	r3, #3
 80128a4:	d905      	bls.n	80128b2 <_tx_thread_system_suspend+0x182>
 80128a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128a8:	089b      	lsrs	r3, r3, #2
 80128aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80128ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128ae:	3302      	adds	r3, #2
 80128b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128b4:	085b      	lsrs	r3, r3, #1
 80128b6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80128b8:	18d3      	adds	r3, r2, r3
 80128ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128bc:	e048      	b.n	8012950 <_tx_thread_system_suspend+0x220>
 80128be:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80128c0:	2380      	movs	r3, #128	@ 0x80
 80128c2:	025b      	lsls	r3, r3, #9
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d21d      	bcs.n	8012904 <_tx_thread_system_suspend+0x1d4>
 80128c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128ca:	0a1b      	lsrs	r3, r3, #8
 80128cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80128ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128d0:	3308      	adds	r3, #8
 80128d2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128d6:	2b0f      	cmp	r3, #15
 80128d8:	d905      	bls.n	80128e6 <_tx_thread_system_suspend+0x1b6>
 80128da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128dc:	091b      	lsrs	r3, r3, #4
 80128de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80128e0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128e2:	3304      	adds	r3, #4
 80128e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128e8:	2b03      	cmp	r3, #3
 80128ea:	d905      	bls.n	80128f8 <_tx_thread_system_suspend+0x1c8>
 80128ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128ee:	089b      	lsrs	r3, r3, #2
 80128f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80128f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80128f4:	3302      	adds	r3, #2
 80128f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80128f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80128fa:	085b      	lsrs	r3, r3, #1
 80128fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80128fe:	18d3      	adds	r3, r2, r3
 8012900:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012902:	e025      	b.n	8012950 <_tx_thread_system_suspend+0x220>
 8012904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012906:	0c1b      	lsrs	r3, r3, #16
 8012908:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801290a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801290c:	3310      	adds	r3, #16
 801290e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012910:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012912:	2bff      	cmp	r3, #255	@ 0xff
 8012914:	d905      	bls.n	8012922 <_tx_thread_system_suspend+0x1f2>
 8012916:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012918:	0a1b      	lsrs	r3, r3, #8
 801291a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801291c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801291e:	3308      	adds	r3, #8
 8012920:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012922:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012924:	2b0f      	cmp	r3, #15
 8012926:	d905      	bls.n	8012934 <_tx_thread_system_suspend+0x204>
 8012928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801292a:	091b      	lsrs	r3, r3, #4
 801292c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801292e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012930:	3304      	adds	r3, #4
 8012932:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012934:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012936:	2b03      	cmp	r3, #3
 8012938:	d905      	bls.n	8012946 <_tx_thread_system_suspend+0x216>
 801293a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801293c:	089b      	lsrs	r3, r3, #2
 801293e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012942:	3302      	adds	r3, #2
 8012944:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012946:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012948:	085b      	lsrs	r3, r3, #1
 801294a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801294c:	18d3      	adds	r3, r2, r3
 801294e:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8012950:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8012952:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012954:	18d2      	adds	r2, r2, r3
 8012956:	4b37      	ldr	r3, [pc, #220]	@ (8012a34 <_tx_thread_system_suspend+0x304>)
 8012958:	601a      	str	r2, [r3, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 801295a:	4b37      	ldr	r3, [pc, #220]	@ (8012a38 <_tx_thread_system_suspend+0x308>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	429a      	cmp	r2, r3
 8012962:	d12b      	bne.n	80129bc <_tx_thread_system_suspend+0x28c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012964:	4b33      	ldr	r3, [pc, #204]	@ (8012a34 <_tx_thread_system_suspend+0x304>)
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	4b30      	ldr	r3, [pc, #192]	@ (8012a2c <_tx_thread_system_suspend+0x2fc>)
 801296a:	0092      	lsls	r2, r2, #2
 801296c:	58d2      	ldr	r2, [r2, r3]
 801296e:	4b32      	ldr	r3, [pc, #200]	@ (8012a38 <_tx_thread_system_suspend+0x308>)
 8012970:	601a      	str	r2, [r3, #0]
 8012972:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012974:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012978:	f383 8810 	msr	PRIMASK, r3
}
 801297c:	46c0      	nop			@ (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801297e:	4b2a      	ldr	r3, [pc, #168]	@ (8012a28 <_tx_thread_system_suspend+0x2f8>)
 8012980:	681b      	ldr	r3, [r3, #0]
 8012982:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (combined_flags == ((ULONG) 0))
 8012984:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012986:	2b00      	cmp	r3, #0
 8012988:	d144      	bne.n	8012a14 <_tx_thread_system_suspend+0x2e4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801298a:	4b2c      	ldr	r3, [pc, #176]	@ (8012a3c <_tx_thread_system_suspend+0x30c>)
 801298c:	2280      	movs	r2, #128	@ 0x80
 801298e:	0552      	lsls	r2, r2, #21
 8012990:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012992:	f3ef 8305 	mrs	r3, IPSR
 8012996:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8012998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 801299a:	2b00      	cmp	r3, #0
 801299c:	d10c      	bne.n	80129b8 <_tx_thread_system_suspend+0x288>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801299e:	f3ef 8310 	mrs	r3, PRIMASK
 80129a2:	627b      	str	r3, [r7, #36]	@ 0x24
    return(primask_value);
 80129a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_primask_value();
 80129a6:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80129a8:	b662      	cpsie	i
}
 80129aa:	46c0      	nop			@ (mov r8, r8)
 80129ac:	6a3b      	ldr	r3, [r7, #32]
 80129ae:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	f383 8810 	msr	PRIMASK, r3
}
 80129b6:	46c0      	nop			@ (mov r8, r8)
}
 80129b8:	46c0      	nop			@ (mov r8, r8)
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 80129ba:	e02b      	b.n	8012a14 <_tx_thread_system_suspend+0x2e4>
 80129bc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80129be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	f383 8810 	msr	PRIMASK, r3
}
 80129c6:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 80129c8:	4b1b      	ldr	r3, [pc, #108]	@ (8012a38 <_tx_thread_system_suspend+0x308>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d022      	beq.n	8012a18 <_tx_thread_system_suspend+0x2e8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80129d2:	4b15      	ldr	r3, [pc, #84]	@ (8012a28 <_tx_thread_system_suspend+0x2f8>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (combined_flags == ((ULONG) 0))
 80129d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d11c      	bne.n	8012a18 <_tx_thread_system_suspend+0x2e8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80129de:	4b17      	ldr	r3, [pc, #92]	@ (8012a3c <_tx_thread_system_suspend+0x30c>)
 80129e0:	2280      	movs	r2, #128	@ 0x80
 80129e2:	0552      	lsls	r2, r2, #21
 80129e4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80129e6:	f3ef 8305 	mrs	r3, IPSR
 80129ea:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80129ec:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d10c      	bne.n	8012a0c <_tx_thread_system_suspend+0x2dc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80129f2:	f3ef 8310 	mrs	r3, PRIMASK
 80129f6:	613b      	str	r3, [r7, #16]
    return(primask_value);
 80129f8:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 80129fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80129fc:	b662      	cpsie	i
}
 80129fe:	46c0      	nop			@ (mov r8, r8)
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	f383 8810 	msr	PRIMASK, r3
}
 8012a0a:	46c0      	nop			@ (mov r8, r8)
}
 8012a0c:	46c0      	nop			@ (mov r8, r8)
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8012a0e:	e003      	b.n	8012a18 <_tx_thread_system_suspend+0x2e8>
                return;
 8012a10:	46c0      	nop			@ (mov r8, r8)
 8012a12:	e002      	b.n	8012a1a <_tx_thread_system_suspend+0x2ea>
            return;
 8012a14:	46c0      	nop			@ (mov r8, r8)
 8012a16:	e000      	b.n	8012a1a <_tx_thread_system_suspend+0x2ea>
    return;
 8012a18:	46c0      	nop			@ (mov r8, r8)
}
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	b01c      	add	sp, #112	@ 0x70
 8012a1e:	bd80      	pop	{r7, pc}
 8012a20:	2000a7e8 	.word	0x2000a7e8
 8012a24:	2000adec 	.word	0x2000adec
 8012a28:	2000a880 	.word	0x2000a880
 8012a2c:	2000a800 	.word	0x2000a800
 8012a30:	2000a7f8 	.word	0x2000a7f8
 8012a34:	2000a7fc 	.word	0x2000a7fc
 8012a38:	2000a7ec 	.word	0x2000a7ec
 8012a3c:	e000ed04 	.word	0xe000ed04

08012a40 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8012a46:	4b1f      	ldr	r3, [pc, #124]	@ (8012ac4 <_tx_thread_time_slice+0x84>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8012a50:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012a52:	b672      	cpsid	i
    return(primask_value);
 8012a54:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8012a56:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012a58:	4b1b      	ldr	r3, [pc, #108]	@ (8012ac8 <_tx_thread_time_slice+0x88>)
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d024      	beq.n	8012aae <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d120      	bne.n	8012aae <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	69da      	ldr	r2, [r3, #28]
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	699a      	ldr	r2, [r3, #24]
 8012a78:	4b14      	ldr	r3, [pc, #80]	@ (8012acc <_tx_thread_time_slice+0x8c>)
 8012a7a:	601a      	str	r2, [r3, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	6a1b      	ldr	r3, [r3, #32]
 8012a80:	68fa      	ldr	r2, [r7, #12]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d013      	beq.n	8012aae <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d10d      	bne.n	8012aae <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	6a19      	ldr	r1, [r3, #32]
 8012a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8012ad0 <_tx_thread_time_slice+0x90>)
 8012a9c:	0092      	lsls	r2, r2, #2
 8012a9e:	50d1      	str	r1, [r2, r3]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8012ad4 <_tx_thread_time_slice+0x94>)
 8012aa2:	681a      	ldr	r2, [r3, #0]
 8012aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8012ad0 <_tx_thread_time_slice+0x90>)
 8012aa6:	0092      	lsls	r2, r2, #2
 8012aa8:	58d2      	ldr	r2, [r2, r3]
 8012aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8012ad8 <_tx_thread_time_slice+0x98>)
 8012aac:	601a      	str	r2, [r3, #0]
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012ab2:	683b      	ldr	r3, [r7, #0]
 8012ab4:	f383 8810 	msr	PRIMASK, r3
}
 8012ab8:	46c0      	nop			@ (mov r8, r8)

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8012aba:	46c0      	nop			@ (mov r8, r8)
 8012abc:	46bd      	mov	sp, r7
 8012abe:	b004      	add	sp, #16
 8012ac0:	bd80      	pop	{r7, pc}
 8012ac2:	46c0      	nop			@ (mov r8, r8)
 8012ac4:	2000a7e8 	.word	0x2000a7e8
 8012ac8:	2000a890 	.word	0x2000a890
 8012acc:	2000adec 	.word	0x2000adec
 8012ad0:	2000a800 	.word	0x2000a800
 8012ad4:	2000a7fc 	.word	0x2000a7fc
 8012ad8:	2000a7ec 	.word	0x2000a7ec

08012adc <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b08a      	sub	sp, #40	@ 0x28
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012ae8:	f3ef 8310 	mrs	r3, PRIMASK
 8012aec:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012aee:	b672      	cpsid	i
    return(primask_value);
 8012af0:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 8012af2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8012af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012af8:	2b04      	cmp	r3, #4
 8012afa:	d10f      	bne.n	8012b1c <_tx_thread_timeout+0x40>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8012afc:	4b14      	ldr	r3, [pc, #80]	@ (8012b50 <_tx_thread_timeout+0x74>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	1c5a      	adds	r2, r3, #1
 8012b02:	4b13      	ldr	r3, [pc, #76]	@ (8012b50 <_tx_thread_timeout+0x74>)
 8012b04:	601a      	str	r2, [r3, #0]
 8012b06:	6a3b      	ldr	r3, [r7, #32]
 8012b08:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	f383 8810 	msr	PRIMASK, r3
}
 8012b10:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8012b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b14:	0018      	movs	r0, r3
 8012b16:	f7ff fd0b 	bl	8012530 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8012b1a:	e014      	b.n	8012b46 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8012b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012b20:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8012b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b24:	22ac      	movs	r2, #172	@ 0xac
 8012b26:	589b      	ldr	r3, [r3, r2]
 8012b28:	61bb      	str	r3, [r7, #24]
 8012b2a:	6a3b      	ldr	r3, [r7, #32]
 8012b2c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012b2e:	68fb      	ldr	r3, [r7, #12]
 8012b30:	f383 8810 	msr	PRIMASK, r3
}
 8012b34:	46c0      	nop			@ (mov r8, r8)
        if (suspend_cleanup != TX_NULL)
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d004      	beq.n	8012b46 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8012b3c:	69b9      	ldr	r1, [r7, #24]
 8012b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012b40:	69fb      	ldr	r3, [r7, #28]
 8012b42:	0010      	movs	r0, r2
 8012b44:	4798      	blx	r3
}
 8012b46:	46c0      	nop			@ (mov r8, r8)
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	b00a      	add	sp, #40	@ 0x28
 8012b4c:	bd80      	pop	{r7, pc}
 8012b4e:	46c0      	nop			@ (mov r8, r8)
 8012b50:	2000a880 	.word	0x2000a880

08012b54 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8012b5e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012b60:	b672      	cpsid	i
    return(primask_value);
 8012b62:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8012b64:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8012b66:	4b09      	ldr	r3, [pc, #36]	@ (8012b8c <_tx_timer_expiration_process+0x38>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	1c5a      	adds	r2, r3, #1
 8012b6c:	4b07      	ldr	r3, [pc, #28]	@ (8012b8c <_tx_timer_expiration_process+0x38>)
 8012b6e:	601a      	str	r2, [r3, #0]
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012b74:	68bb      	ldr	r3, [r7, #8]
 8012b76:	f383 8810 	msr	PRIMASK, r3
}
 8012b7a:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8012b7c:	4b04      	ldr	r3, [pc, #16]	@ (8012b90 <_tx_timer_expiration_process+0x3c>)
 8012b7e:	0018      	movs	r0, r3
 8012b80:	f7ff fcd6 	bl	8012530 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012b84:	46c0      	nop			@ (mov r8, r8)
 8012b86:	46bd      	mov	sp, r7
 8012b88:	b004      	add	sp, #16
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	2000a880 	.word	0x2000a880
 8012b90:	2000a930 	.word	0x2000a930

08012b94 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8012b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012b96:	46ce      	mov	lr, r9
 8012b98:	4647      	mov	r7, r8
 8012b9a:	b580      	push	{r7, lr}
 8012b9c:	b08d      	sub	sp, #52	@ 0x34
 8012b9e:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8012ba0:	4b39      	ldr	r3, [pc, #228]	@ (8012c88 <_tx_timer_initialize+0xf4>)
 8012ba2:	2200      	movs	r2, #0
 8012ba4:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8012ba6:	4b39      	ldr	r3, [pc, #228]	@ (8012c8c <_tx_timer_initialize+0xf8>)
 8012ba8:	2200      	movs	r2, #0
 8012baa:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012bac:	4b38      	ldr	r3, [pc, #224]	@ (8012c90 <_tx_timer_initialize+0xfc>)
 8012bae:	2200      	movs	r2, #0
 8012bb0:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8012bb2:	4b38      	ldr	r3, [pc, #224]	@ (8012c94 <_tx_timer_initialize+0x100>)
 8012bb4:	2200      	movs	r2, #0
 8012bb6:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8012bb8:	4b37      	ldr	r3, [pc, #220]	@ (8012c98 <_tx_timer_initialize+0x104>)
 8012bba:	2200      	movs	r2, #0
 8012bbc:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8012bbe:	4b37      	ldr	r3, [pc, #220]	@ (8012c9c <_tx_timer_initialize+0x108>)
 8012bc0:	617b      	str	r3, [r7, #20]
 8012bc2:	230f      	movs	r3, #15
 8012bc4:	18fb      	adds	r3, r7, r3
 8012bc6:	2200      	movs	r2, #0
 8012bc8:	701a      	strb	r2, [r3, #0]
 8012bca:	2380      	movs	r3, #128	@ 0x80
 8012bcc:	60bb      	str	r3, [r7, #8]
 8012bce:	2300      	movs	r3, #0
 8012bd0:	613b      	str	r3, [r7, #16]
 8012bd2:	e009      	b.n	8012be8 <_tx_timer_initialize+0x54>
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	1c5a      	adds	r2, r3, #1
 8012bd8:	617a      	str	r2, [r7, #20]
 8012bda:	220f      	movs	r2, #15
 8012bdc:	18ba      	adds	r2, r7, r2
 8012bde:	7812      	ldrb	r2, [r2, #0]
 8012be0:	701a      	strb	r2, [r3, #0]
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	3301      	adds	r3, #1
 8012be6:	613b      	str	r3, [r7, #16]
 8012be8:	693a      	ldr	r2, [r7, #16]
 8012bea:	68bb      	ldr	r3, [r7, #8]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d3f1      	bcc.n	8012bd4 <_tx_timer_initialize+0x40>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8012bf0:	4b2b      	ldr	r3, [pc, #172]	@ (8012ca0 <_tx_timer_initialize+0x10c>)
 8012bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8012c9c <_tx_timer_initialize+0x108>)
 8012bf4:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8012bf6:	4b2b      	ldr	r3, [pc, #172]	@ (8012ca4 <_tx_timer_initialize+0x110>)
 8012bf8:	4a28      	ldr	r2, [pc, #160]	@ (8012c9c <_tx_timer_initialize+0x108>)
 8012bfa:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8012bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8012ca8 <_tx_timer_initialize+0x114>)
 8012bfe:	4a2b      	ldr	r2, [pc, #172]	@ (8012cac <_tx_timer_initialize+0x118>)
 8012c00:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8012c02:	4b29      	ldr	r3, [pc, #164]	@ (8012ca8 <_tx_timer_initialize+0x114>)
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	1d1a      	adds	r2, r3, #4
 8012c08:	4b27      	ldr	r3, [pc, #156]	@ (8012ca8 <_tx_timer_initialize+0x114>)
 8012c0a:	601a      	str	r2, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8012c0c:	4b28      	ldr	r3, [pc, #160]	@ (8012cb0 <_tx_timer_initialize+0x11c>)
 8012c0e:	4a29      	ldr	r2, [pc, #164]	@ (8012cb4 <_tx_timer_initialize+0x120>)
 8012c10:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8012c12:	4b29      	ldr	r3, [pc, #164]	@ (8012cb8 <_tx_timer_initialize+0x124>)
 8012c14:	2280      	movs	r2, #128	@ 0x80
 8012c16:	00d2      	lsls	r2, r2, #3
 8012c18:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8012c1a:	4b28      	ldr	r3, [pc, #160]	@ (8012cbc <_tx_timer_initialize+0x128>)
 8012c1c:	2200      	movs	r2, #0
 8012c1e:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8012c20:	4b23      	ldr	r3, [pc, #140]	@ (8012cb0 <_tx_timer_initialize+0x11c>)
 8012c22:	681a      	ldr	r2, [r3, #0]
 8012c24:	4b24      	ldr	r3, [pc, #144]	@ (8012cb8 <_tx_timer_initialize+0x124>)
 8012c26:	6819      	ldr	r1, [r3, #0]
 8012c28:	4b24      	ldr	r3, [pc, #144]	@ (8012cbc <_tx_timer_initialize+0x128>)
 8012c2a:	6818      	ldr	r0, [r3, #0]
 8012c2c:	4b23      	ldr	r3, [pc, #140]	@ (8012cbc <_tx_timer_initialize+0x128>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	4699      	mov	r9, r3
 8012c32:	4c23      	ldr	r4, [pc, #140]	@ (8012cc0 <_tx_timer_initialize+0x12c>)
 8012c34:	46a0      	mov	r8, r4
 8012c36:	4e23      	ldr	r6, [pc, #140]	@ (8012cc4 <_tx_timer_initialize+0x130>)
 8012c38:	4d23      	ldr	r5, [pc, #140]	@ (8012cc8 <_tx_timer_initialize+0x134>)
 8012c3a:	4c24      	ldr	r4, [pc, #144]	@ (8012ccc <_tx_timer_initialize+0x138>)
 8012c3c:	2300      	movs	r3, #0
 8012c3e:	469c      	mov	ip, r3
 8012c40:	4663      	mov	r3, ip
 8012c42:	9305      	str	r3, [sp, #20]
 8012c44:	2300      	movs	r3, #0
 8012c46:	469c      	mov	ip, r3
 8012c48:	4663      	mov	r3, ip
 8012c4a:	9304      	str	r3, [sp, #16]
 8012c4c:	464b      	mov	r3, r9
 8012c4e:	9303      	str	r3, [sp, #12]
 8012c50:	9002      	str	r0, [sp, #8]
 8012c52:	9101      	str	r1, [sp, #4]
 8012c54:	9200      	str	r2, [sp, #0]
 8012c56:	4643      	mov	r3, r8
 8012c58:	0032      	movs	r2, r6
 8012c5a:	0029      	movs	r1, r5
 8012c5c:	0020      	movs	r0, r4
 8012c5e:	f7ff f903 	bl	8011e68 <_tx_thread_create>
 8012c62:	0003      	movs	r3, r0
 8012c64:	607b      	str	r3, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d1d9      	bne.n	8012c20 <_tx_timer_initialize+0x8c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8012c6c:	4b18      	ldr	r3, [pc, #96]	@ (8012cd0 <_tx_timer_initialize+0x13c>)
 8012c6e:	2200      	movs	r2, #0
 8012c70:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8012c72:	4b18      	ldr	r3, [pc, #96]	@ (8012cd4 <_tx_timer_initialize+0x140>)
 8012c74:	2200      	movs	r2, #0
 8012c76:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8012c78:	46c0      	nop			@ (mov r8, r8)
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	b007      	add	sp, #28
 8012c7e:	bcc0      	pop	{r6, r7}
 8012c80:	46b9      	mov	r9, r7
 8012c82:	46b0      	mov	r8, r6
 8012c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012c86:	46c0      	nop			@ (mov r8, r8)
 8012c88:	2000a88c 	.word	0x2000a88c
 8012c8c:	2000adec 	.word	0x2000adec
 8012c90:	2000a890 	.word	0x2000a890
 8012c94:	2000a920 	.word	0x2000a920
 8012c98:	2000a92c 	.word	0x2000a92c
 8012c9c:	2000a894 	.word	0x2000a894
 8012ca0:	2000a914 	.word	0x2000a914
 8012ca4:	2000a91c 	.word	0x2000a91c
 8012ca8:	2000a918 	.word	0x2000a918
 8012cac:	2000a910 	.word	0x2000a910
 8012cb0:	2000a9e0 	.word	0x2000a9e0
 8012cb4:	2000a9ec 	.word	0x2000a9ec
 8012cb8:	2000a9e4 	.word	0x2000a9e4
 8012cbc:	2000a9e8 	.word	0x2000a9e8
 8012cc0:	4154494d 	.word	0x4154494d
 8012cc4:	08012e01 	.word	0x08012e01
 8012cc8:	0801671c 	.word	0x0801671c
 8012ccc:	2000a930 	.word	0x2000a930
 8012cd0:	2000a924 	.word	0x2000a924
 8012cd4:	2000a928 	.word	0x2000a928

08012cd8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b088      	sub	sp, #32
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d049      	beq.n	8012d80 <_tx_timer_system_activate+0xa8>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8012cec:	697b      	ldr	r3, [r7, #20]
 8012cee:	3301      	adds	r3, #1
 8012cf0:	d046      	beq.n	8012d80 <_tx_timer_system_activate+0xa8>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	699b      	ldr	r3, [r3, #24]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d142      	bne.n	8012d80 <_tx_timer_system_activate+0xa8>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8012cfa:	697b      	ldr	r3, [r7, #20]
 8012cfc:	2b20      	cmp	r3, #32
 8012cfe:	d902      	bls.n	8012d06 <_tx_timer_system_activate+0x2e>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8012d00:	231f      	movs	r3, #31
 8012d02:	61bb      	str	r3, [r7, #24]
 8012d04:	e002      	b.n	8012d0c <_tx_timer_system_activate+0x34>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8012d06:	697b      	ldr	r3, [r7, #20]
 8012d08:	3b01      	subs	r3, #1
 8012d0a:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8012d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8012d88 <_tx_timer_system_activate+0xb0>)
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	69bb      	ldr	r3, [r7, #24]
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	18d3      	adds	r3, r2, r3
 8012d16:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8012d18:	4b1c      	ldr	r3, [pc, #112]	@ (8012d8c <_tx_timer_system_activate+0xb4>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	69fa      	ldr	r2, [r7, #28]
 8012d1e:	429a      	cmp	r2, r3
 8012d20:	d30b      	bcc.n	8012d3a <_tx_timer_system_activate+0x62>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8012d22:	4b1a      	ldr	r3, [pc, #104]	@ (8012d8c <_tx_timer_system_activate+0xb4>)
 8012d24:	681b      	ldr	r3, [r3, #0]
 8012d26:	69fa      	ldr	r2, [r7, #28]
 8012d28:	1ad3      	subs	r3, r2, r3
 8012d2a:	109b      	asrs	r3, r3, #2
 8012d2c:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8012d2e:	4b18      	ldr	r3, [pc, #96]	@ (8012d90 <_tx_timer_system_activate+0xb8>)
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	693b      	ldr	r3, [r7, #16]
 8012d34:	009b      	lsls	r3, r3, #2
 8012d36:	18d3      	adds	r3, r2, r3
 8012d38:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8012d3a:	69fb      	ldr	r3, [r7, #28]
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d109      	bne.n	8012d56 <_tx_timer_system_activate+0x7e>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	687a      	ldr	r2, [r7, #4]
 8012d46:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	601a      	str	r2, [r3, #0]
 8012d54:	e011      	b.n	8012d7a <_tx_timer_system_activate+0xa2>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	695b      	ldr	r3, [r3, #20]
 8012d60:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8012d62:	68bb      	ldr	r3, [r7, #8]
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	68fa      	ldr	r2, [r7, #12]
 8012d72:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8012d74:	687b      	ldr	r3, [r7, #4]
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	69fa      	ldr	r2, [r7, #28]
 8012d7e:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8012d80:	46c0      	nop			@ (mov r8, r8)
 8012d82:	46bd      	mov	sp, r7
 8012d84:	b008      	add	sp, #32
 8012d86:	bd80      	pop	{r7, pc}
 8012d88:	2000a91c 	.word	0x2000a91c
 8012d8c:	2000a918 	.word	0x2000a918
 8012d90:	2000a914 	.word	0x2000a914

08012d94 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b086      	sub	sp, #24
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	699b      	ldr	r3, [r3, #24]
 8012da0:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d026      	beq.n	8012df6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	691b      	ldr	r3, [r3, #16]
 8012dac:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8012dae:	687a      	ldr	r2, [r7, #4]
 8012db0:	693b      	ldr	r3, [r7, #16]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d108      	bne.n	8012dc8 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012db6:	697b      	ldr	r3, [r7, #20]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	687a      	ldr	r2, [r7, #4]
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d117      	bne.n	8012df0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	601a      	str	r2, [r3, #0]
 8012dc6:	e013      	b.n	8012df0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	695b      	ldr	r3, [r3, #20]
 8012dcc:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012dce:	693b      	ldr	r3, [r7, #16]
 8012dd0:	68fa      	ldr	r2, [r7, #12]
 8012dd2:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	693a      	ldr	r2, [r7, #16]
 8012dd8:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012dda:	697b      	ldr	r3, [r7, #20]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	687a      	ldr	r2, [r7, #4]
 8012de0:	429a      	cmp	r2, r3
 8012de2:	d105      	bne.n	8012df0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012de4:	693b      	ldr	r3, [r7, #16]
 8012de6:	697a      	ldr	r2, [r7, #20]
 8012de8:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8012dea:	697b      	ldr	r3, [r7, #20]
 8012dec:	693a      	ldr	r2, [r7, #16]
 8012dee:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2200      	movs	r2, #0
 8012df4:	619a      	str	r2, [r3, #24]
    }
}
 8012df6:	46c0      	nop			@ (mov r8, r8)
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	b006      	add	sp, #24
 8012dfc:	bd80      	pop	{r7, pc}
	...

08012e00 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b094      	sub	sp, #80	@ 0x50
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8012e08:	2300      	movs	r3, #0
 8012e0a:	647b      	str	r3, [r7, #68]	@ 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	4a70      	ldr	r2, [pc, #448]	@ (8012fd0 <_tx_timer_thread_entry+0x1d0>)
 8012e10:	4293      	cmp	r3, r2
 8012e12:	d000      	beq.n	8012e16 <_tx_timer_thread_entry+0x16>
 8012e14:	e0d8      	b.n	8012fc8 <_tx_timer_thread_entry+0x1c8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012e16:	f3ef 8310 	mrs	r3, PRIMASK
 8012e1a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012e1c:	b672      	cpsid	i
    return(primask_value);
 8012e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8012e20:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8012e22:	4b6c      	ldr	r3, [pc, #432]	@ (8012fd4 <_tx_timer_thread_entry+0x1d4>)
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d003      	beq.n	8012e38 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	220c      	movs	r2, #12
 8012e34:	18ba      	adds	r2, r7, r2
 8012e36:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8012e38:	4b66      	ldr	r3, [pc, #408]	@ (8012fd4 <_tx_timer_thread_entry+0x1d4>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8012e40:	4b64      	ldr	r3, [pc, #400]	@ (8012fd4 <_tx_timer_thread_entry+0x1d4>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	1d1a      	adds	r2, r3, #4
 8012e46:	4b63      	ldr	r3, [pc, #396]	@ (8012fd4 <_tx_timer_thread_entry+0x1d4>)
 8012e48:	601a      	str	r2, [r3, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8012e4a:	4b62      	ldr	r3, [pc, #392]	@ (8012fd4 <_tx_timer_thread_entry+0x1d4>)
 8012e4c:	681a      	ldr	r2, [r3, #0]
 8012e4e:	4b62      	ldr	r3, [pc, #392]	@ (8012fd8 <_tx_timer_thread_entry+0x1d8>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	429a      	cmp	r2, r3
 8012e54:	d103      	bne.n	8012e5e <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8012e56:	4b61      	ldr	r3, [pc, #388]	@ (8012fdc <_tx_timer_thread_entry+0x1dc>)
 8012e58:	681a      	ldr	r2, [r3, #0]
 8012e5a:	4b5e      	ldr	r3, [pc, #376]	@ (8012fd4 <_tx_timer_thread_entry+0x1d4>)
 8012e5c:	601a      	str	r2, [r3, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 8012e5e:	4b60      	ldr	r3, [pc, #384]	@ (8012fe0 <_tx_timer_thread_entry+0x1e0>)
 8012e60:	2200      	movs	r2, #0
 8012e62:	601a      	str	r2, [r3, #0]
 8012e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e66:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e6a:	f383 8810 	msr	PRIMASK, r3
}
 8012e6e:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012e70:	f3ef 8310 	mrs	r3, PRIMASK
 8012e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012e76:	b672      	cpsid	i
    return(primask_value);
 8012e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 8012e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8012e7c:	e07d      	b.n	8012f7a <_tx_timer_thread_entry+0x17a>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	691b      	ldr	r3, [r3, #16]
 8012e86:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8012e88:	2300      	movs	r3, #0
 8012e8a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 8012e8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d102      	bne.n	8012e9a <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8012e94:	2300      	movs	r3, #0
 8012e96:	60fb      	str	r3, [r7, #12]
 8012e98:	e00e      	b.n	8012eb8 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 8012e9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012e9c:	695b      	ldr	r3, [r3, #20]
 8012e9e:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012ea4:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ea8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012eaa:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 8012eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eae:	220c      	movs	r2, #12
 8012eb0:	18ba      	adds	r2, r7, r2
 8012eb2:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012eb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012eb6:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012eb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	2b20      	cmp	r3, #32
 8012ebe:	d911      	bls.n	8012ee4 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012ec0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ec2:	681b      	ldr	r3, [r3, #0]
 8012ec4:	3b20      	subs	r3, #32
 8012ec6:	001a      	movs	r2, r3
                    current_timer -> tx_timer_internal_remaining_ticks =
 8012ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eca:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 8012ecc:	2300      	movs	r3, #0
 8012ece:	64bb      	str	r3, [r7, #72]	@ 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ed2:	2208      	movs	r2, #8
 8012ed4:	18ba      	adds	r2, r7, r2
 8012ed6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8012ed8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eda:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012edc:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 8012ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ee0:	60bb      	str	r3, [r7, #8]
 8012ee2:	e01a      	b.n	8012f1a <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8012ee4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ee6:	689b      	ldr	r3, [r3, #8]
 8012ee8:	64bb      	str	r3, [r7, #72]	@ 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 8012eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012eec:	68db      	ldr	r3, [r3, #12]
 8012eee:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8012ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ef2:	685a      	ldr	r2, [r3, #4]
 8012ef4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012ef6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 8012ef8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	2b00      	cmp	r3, #0
 8012efe:	d009      	beq.n	8012f14 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f02:	2208      	movs	r2, #8
 8012f04:	18ba      	adds	r2, r7, r2
 8012f06:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 8012f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012f0c:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8012f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f10:	60bb      	str	r3, [r7, #8]
 8012f12:	e002      	b.n	8012f1a <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8012f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f16:	2200      	movs	r2, #0
 8012f18:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 8012f1a:	4b32      	ldr	r3, [pc, #200]	@ (8012fe4 <_tx_timer_thread_entry+0x1e4>)
 8012f1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012f1e:	601a      	str	r2, [r3, #0]
 8012f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f22:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f26:	f383 8810 	msr	PRIMASK, r3
}
 8012f2a:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8012f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d003      	beq.n	8012f3a <_tx_timer_thread_entry+0x13a>
                {

                    (timeout_function) (timeout_param);
 8012f32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012f34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012f36:	0010      	movs	r0, r2
 8012f38:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012f3a:	f3ef 8310 	mrs	r3, PRIMASK
 8012f3e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012f40:	b672      	cpsid	i
    return(primask_value);
 8012f42:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012f44:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8012f46:	4b27      	ldr	r3, [pc, #156]	@ (8012fe4 <_tx_timer_thread_entry+0x1e4>)
 8012f48:	2200      	movs	r2, #0
 8012f4a:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d106      	bne.n	8012f62 <_tx_timer_thread_entry+0x162>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8012f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f56:	2200      	movs	r2, #0
 8012f58:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8012f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f5c:	0018      	movs	r0, r3
 8012f5e:	f7ff febb 	bl	8012cd8 <_tx_timer_system_activate>
 8012f62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f64:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012f66:	69bb      	ldr	r3, [r7, #24]
 8012f68:	f383 8810 	msr	PRIMASK, r3
}
 8012f6c:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8012f72:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012f74:	b672      	cpsid	i
    return(primask_value);
 8012f76:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012f78:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (expired_timers != TX_NULL)
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	2b00      	cmp	r3, #0
 8012f7e:	d000      	beq.n	8012f82 <_tx_timer_thread_entry+0x182>
 8012f80:	e77d      	b.n	8012e7e <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8012f82:	4b17      	ldr	r3, [pc, #92]	@ (8012fe0 <_tx_timer_thread_entry+0x1e0>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d117      	bne.n	8012fba <_tx_timer_thread_entry+0x1ba>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8012f8a:	4b17      	ldr	r3, [pc, #92]	@ (8012fe8 <_tx_timer_thread_entry+0x1e8>)
 8012f8c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012f8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f90:	2203      	movs	r2, #3
 8012f92:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012f94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f96:	2201      	movs	r2, #1
 8012f98:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8012f9a:	4b14      	ldr	r3, [pc, #80]	@ (8012fec <_tx_timer_thread_entry+0x1ec>)
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	1c5a      	adds	r2, r3, #1
 8012fa0:	4b12      	ldr	r3, [pc, #72]	@ (8012fec <_tx_timer_thread_entry+0x1ec>)
 8012fa2:	601a      	str	r2, [r3, #0]
 8012fa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fa6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	f383 8810 	msr	PRIMASK, r3
}
 8012fae:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012fb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012fb2:	0018      	movs	r0, r3
 8012fb4:	f7ff fbbc 	bl	8012730 <_tx_thread_system_suspend>
 8012fb8:	e72d      	b.n	8012e16 <_tx_timer_thread_entry+0x16>
 8012fba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012fbc:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	f383 8810 	msr	PRIMASK, r3
}
 8012fc4:	46c0      	nop			@ (mov r8, r8)
            TX_DISABLE
 8012fc6:	e726      	b.n	8012e16 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8012fc8:	46c0      	nop			@ (mov r8, r8)
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	b014      	add	sp, #80	@ 0x50
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	4154494d 	.word	0x4154494d
 8012fd4:	2000a91c 	.word	0x2000a91c
 8012fd8:	2000a918 	.word	0x2000a918
 8012fdc:	2000a914 	.word	0x2000a914
 8012fe0:	2000a920 	.word	0x2000a920
 8012fe4:	2000a92c 	.word	0x2000a92c
 8012fe8:	2000a930 	.word	0x2000a930
 8012fec:	2000a880 	.word	0x2000a880

08012ff0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b08a      	sub	sp, #40	@ 0x28
 8012ff4:	af00      	add	r7, sp, #0
 8012ff6:	60f8      	str	r0, [r7, #12]
 8012ff8:	60b9      	str	r1, [r7, #8]
 8012ffa:	607a      	str	r2, [r7, #4]
 8012ffc:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012ffe:	2300      	movs	r3, #0
 8013000:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d102      	bne.n	801300e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013008:	2302      	movs	r3, #2
 801300a:	627b      	str	r3, [r7, #36]	@ 0x24
 801300c:	e028      	b.n	8013060 <_txe_byte_allocate+0x70>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	681b      	ldr	r3, [r3, #0]
 8013012:	4a2d      	ldr	r2, [pc, #180]	@ (80130c8 <_txe_byte_allocate+0xd8>)
 8013014:	4293      	cmp	r3, r2
 8013016:	d002      	beq.n	801301e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013018:	2302      	movs	r3, #2
 801301a:	627b      	str	r3, [r7, #36]	@ 0x24
 801301c:	e020      	b.n	8013060 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	2b00      	cmp	r3, #0
 8013022:	d102      	bne.n	801302a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8013024:	2303      	movs	r3, #3
 8013026:	627b      	str	r3, [r7, #36]	@ 0x24
 8013028:	e01a      	b.n	8013060 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d102      	bne.n	8013036 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8013030:	2305      	movs	r3, #5
 8013032:	627b      	str	r3, [r7, #36]	@ 0x24
 8013034:	e014      	b.n	8013060 <_txe_byte_allocate+0x70>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	69db      	ldr	r3, [r3, #28]
 801303a:	687a      	ldr	r2, [r7, #4]
 801303c:	429a      	cmp	r2, r3
 801303e:	d902      	bls.n	8013046 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8013040:	2305      	movs	r3, #5
 8013042:	627b      	str	r3, [r7, #36]	@ 0x24
 8013044:	e00c      	b.n	8013060 <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d009      	beq.n	8013060 <_txe_byte_allocate+0x70>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801304c:	f3ef 8305 	mrs	r3, IPSR
 8013050:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8013052:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013054:	4b1d      	ldr	r3, [pc, #116]	@ (80130cc <_txe_byte_allocate+0xdc>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	4313      	orrs	r3, r2
 801305a:	d001      	beq.n	8013060 <_txe_byte_allocate+0x70>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801305c:	2304      	movs	r3, #4
 801305e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8013060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013062:	2b00      	cmp	r3, #0
 8013064:	d108      	bne.n	8013078 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8013066:	4b1a      	ldr	r3, [pc, #104]	@ (80130d0 <_txe_byte_allocate+0xe0>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 801306c:	6a3a      	ldr	r2, [r7, #32]
 801306e:	4b19      	ldr	r3, [pc, #100]	@ (80130d4 <_txe_byte_allocate+0xe4>)
 8013070:	429a      	cmp	r2, r3
 8013072:	d101      	bne.n	8013078 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8013074:	2313      	movs	r3, #19
 8013076:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8013078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801307a:	2b00      	cmp	r3, #0
 801307c:	d113      	bne.n	80130a6 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801307e:	f3ef 8305 	mrs	r3, IPSR
 8013082:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013084:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013086:	4b11      	ldr	r3, [pc, #68]	@ (80130cc <_txe_byte_allocate+0xdc>)
 8013088:	681b      	ldr	r3, [r3, #0]
 801308a:	4313      	orrs	r3, r2
 801308c:	d00b      	beq.n	80130a6 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801308e:	f3ef 8305 	mrs	r3, IPSR
 8013092:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013094:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013096:	4b0d      	ldr	r3, [pc, #52]	@ (80130cc <_txe_byte_allocate+0xdc>)
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	4313      	orrs	r3, r2
 801309c:	4a0e      	ldr	r2, [pc, #56]	@ (80130d8 <_txe_byte_allocate+0xe8>)
 801309e:	4293      	cmp	r3, r2
 80130a0:	d801      	bhi.n	80130a6 <_txe_byte_allocate+0xb6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80130a2:	2313      	movs	r3, #19
 80130a4:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80130a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d107      	bne.n	80130bc <_txe_byte_allocate+0xcc>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 80130ac:	683b      	ldr	r3, [r7, #0]
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	68b9      	ldr	r1, [r7, #8]
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	f7fd ff20 	bl	8010ef8 <_tx_byte_allocate>
 80130b8:	0003      	movs	r3, r0
 80130ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 80130bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80130be:	0018      	movs	r0, r3
 80130c0:	46bd      	mov	sp, r7
 80130c2:	b00a      	add	sp, #40	@ 0x28
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	46c0      	nop			@ (mov r8, r8)
 80130c8:	42595445 	.word	0x42595445
 80130cc:	20000010 	.word	0x20000010
 80130d0:	2000a7e8 	.word	0x2000a7e8
 80130d4:	2000a930 	.word	0x2000a930
 80130d8:	f0f0f0ef 	.word	0xf0f0f0ef

080130dc <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b090      	sub	sp, #64	@ 0x40
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
 80130e8:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80130ea:	2300      	movs	r3, #0
 80130ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d102      	bne.n	80130fa <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80130f4:	2302      	movs	r3, #2
 80130f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80130f8:	e070      	b.n	80131dc <_txe_byte_pool_create+0x100>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80130fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130fc:	2b34      	cmp	r3, #52	@ 0x34
 80130fe:	d002      	beq.n	8013106 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8013100:	2302      	movs	r3, #2
 8013102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013104:	e06a      	b.n	80131dc <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013106:	f3ef 8310 	mrs	r3, PRIMASK
 801310a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 801310c:	b672      	cpsid	i
    return(primask_value);
 801310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013110:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013112:	4b3a      	ldr	r3, [pc, #232]	@ (80131fc <_txe_byte_pool_create+0x120>)
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	1c5a      	adds	r2, r3, #1
 8013118:	4b38      	ldr	r3, [pc, #224]	@ (80131fc <_txe_byte_pool_create+0x120>)
 801311a:	601a      	str	r2, [r3, #0]
 801311c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801311e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013122:	f383 8810 	msr	PRIMASK, r3
}
 8013126:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8013128:	4b35      	ldr	r3, [pc, #212]	@ (8013200 <_txe_byte_pool_create+0x124>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 801312e:	2300      	movs	r3, #0
 8013130:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013132:	e009      	b.n	8013148 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8013134:	68fa      	ldr	r2, [r7, #12]
 8013136:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013138:	429a      	cmp	r2, r3
 801313a:	d00b      	beq.n	8013154 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 801313c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013140:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8013142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013144:	3301      	adds	r3, #1
 8013146:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013148:	4b2e      	ldr	r3, [pc, #184]	@ (8013204 <_txe_byte_pool_create+0x128>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801314e:	429a      	cmp	r2, r3
 8013150:	d3f0      	bcc.n	8013134 <_txe_byte_pool_create+0x58>
 8013152:	e000      	b.n	8013156 <_txe_byte_pool_create+0x7a>
                break;
 8013154:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013156:	f3ef 8310 	mrs	r3, PRIMASK
 801315a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801315c:	b672      	cpsid	i
    return(primask_value);
 801315e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013160:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013162:	4b26      	ldr	r3, [pc, #152]	@ (80131fc <_txe_byte_pool_create+0x120>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	1e5a      	subs	r2, r3, #1
 8013168:	4b24      	ldr	r3, [pc, #144]	@ (80131fc <_txe_byte_pool_create+0x120>)
 801316a:	601a      	str	r2, [r3, #0]
 801316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801316e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013170:	6a3b      	ldr	r3, [r7, #32]
 8013172:	f383 8810 	msr	PRIMASK, r3
}
 8013176:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013178:	f7ff f9a2 	bl	80124c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 801317c:	68fa      	ldr	r2, [r7, #12]
 801317e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013180:	429a      	cmp	r2, r3
 8013182:	d102      	bne.n	801318a <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8013184:	2302      	movs	r3, #2
 8013186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013188:	e028      	b.n	80131dc <_txe_byte_pool_create+0x100>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d102      	bne.n	8013196 <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8013190:	2303      	movs	r3, #3
 8013192:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013194:	e022      	b.n	80131dc <_txe_byte_pool_create+0x100>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8013196:	683b      	ldr	r3, [r7, #0]
 8013198:	2b63      	cmp	r3, #99	@ 0x63
 801319a:	d802      	bhi.n	80131a2 <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 801319c:	2305      	movs	r3, #5
 801319e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80131a0:	e01c      	b.n	80131dc <_txe_byte_pool_create+0x100>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80131a2:	4b19      	ldr	r3, [pc, #100]	@ (8013208 <_txe_byte_pool_create+0x12c>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80131a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80131aa:	4b18      	ldr	r3, [pc, #96]	@ (801320c <_txe_byte_pool_create+0x130>)
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d101      	bne.n	80131b4 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80131b0:	2313      	movs	r3, #19
 80131b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80131b4:	f3ef 8305 	mrs	r3, IPSR
 80131b8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80131ba:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80131bc:	4b14      	ldr	r3, [pc, #80]	@ (8013210 <_txe_byte_pool_create+0x134>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	4313      	orrs	r3, r2
 80131c2:	d00b      	beq.n	80131dc <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80131c4:	f3ef 8305 	mrs	r3, IPSR
 80131c8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80131ca:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80131cc:	4b10      	ldr	r3, [pc, #64]	@ (8013210 <_txe_byte_pool_create+0x134>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4313      	orrs	r3, r2
 80131d2:	4a10      	ldr	r2, [pc, #64]	@ (8013214 <_txe_byte_pool_create+0x138>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d801      	bhi.n	80131dc <_txe_byte_pool_create+0x100>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80131d8:	2313      	movs	r3, #19
 80131da:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80131dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d107      	bne.n	80131f2 <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	687a      	ldr	r2, [r7, #4]
 80131e6:	68b9      	ldr	r1, [r7, #8]
 80131e8:	68f8      	ldr	r0, [r7, #12]
 80131ea:	f7fd ffc3 	bl	8011174 <_tx_byte_pool_create>
 80131ee:	0003      	movs	r3, r0
 80131f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 80131f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80131f4:	0018      	movs	r0, r3
 80131f6:	46bd      	mov	sp, r7
 80131f8:	b010      	add	sp, #64	@ 0x40
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	2000a880 	.word	0x2000a880
 8013200:	2000a7d8 	.word	0x2000a7d8
 8013204:	2000a7dc 	.word	0x2000a7dc
 8013208:	2000a7e8 	.word	0x2000a7e8
 801320c:	2000a930 	.word	0x2000a930
 8013210:	20000010 	.word	0x20000010
 8013214:	f0f0f0ef 	.word	0xf0f0f0ef

08013218 <_txe_queue_create>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_create(TX_QUEUE *queue_ptr, CHAR *name_ptr, UINT message_size,
                        VOID *queue_start, ULONG queue_size, UINT queue_control_block_size)
{
 8013218:	b590      	push	{r4, r7, lr}
 801321a:	b093      	sub	sp, #76	@ 0x4c
 801321c:	af02      	add	r7, sp, #8
 801321e:	60f8      	str	r0, [r7, #12]
 8013220:	60b9      	str	r1, [r7, #8]
 8013222:	607a      	str	r2, [r7, #4]
 8013224:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013226:	2300      	movs	r3, #0
 8013228:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	2b00      	cmp	r3, #0
 801322e:	d102      	bne.n	8013236 <_txe_queue_create+0x1e>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013230:	2309      	movs	r3, #9
 8013232:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013234:	e07e      	b.n	8013334 <_txe_queue_create+0x11c>
    }

    /* Now check for a valid control block size.  */
    else if (queue_control_block_size != (sizeof(TX_QUEUE)))
 8013236:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8013238:	2b38      	cmp	r3, #56	@ 0x38
 801323a:	d002      	beq.n	8013242 <_txe_queue_create+0x2a>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801323c:	2309      	movs	r3, #9
 801323e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013240:	e078      	b.n	8013334 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013242:	f3ef 8310 	mrs	r3, PRIMASK
 8013246:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013248:	b672      	cpsid	i
    return(primask_value);
 801324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801324c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801324e:	4b43      	ldr	r3, [pc, #268]	@ (801335c <_txe_queue_create+0x144>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	1c5a      	adds	r2, r3, #1
 8013254:	4b41      	ldr	r3, [pc, #260]	@ (801335c <_txe_queue_create+0x144>)
 8013256:	601a      	str	r2, [r3, #0]
 8013258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801325a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801325c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801325e:	f383 8810 	msr	PRIMASK, r3
}
 8013262:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_queue =   _tx_queue_created_ptr;
 8013264:	4b3e      	ldr	r3, [pc, #248]	@ (8013360 <_txe_queue_create+0x148>)
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 801326a:	2300      	movs	r3, #0
 801326c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801326e:	e009      	b.n	8013284 <_txe_queue_create+0x6c>
        {

            /* Determine if this queue matches the queue in the list.  */
            if (queue_ptr == next_queue)
 8013270:	68fa      	ldr	r2, [r7, #12]
 8013272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013274:	429a      	cmp	r2, r3
 8013276:	d00b      	beq.n	8013290 <_txe_queue_create+0x78>
            }
            else
            {

                /* Move to the next queue.  */
                next_queue =  next_queue -> tx_queue_created_next;
 8013278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801327a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801327c:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_queue_created_count; i++)
 801327e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013280:	3301      	adds	r3, #1
 8013282:	63bb      	str	r3, [r7, #56]	@ 0x38
 8013284:	4b37      	ldr	r3, [pc, #220]	@ (8013364 <_txe_queue_create+0x14c>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801328a:	429a      	cmp	r2, r3
 801328c:	d3f0      	bcc.n	8013270 <_txe_queue_create+0x58>
 801328e:	e000      	b.n	8013292 <_txe_queue_create+0x7a>
                break;
 8013290:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013292:	f3ef 8310 	mrs	r3, PRIMASK
 8013296:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013298:	b672      	cpsid	i
    return(primask_value);
 801329a:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 801329c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 801329e:	4b2f      	ldr	r3, [pc, #188]	@ (801335c <_txe_queue_create+0x144>)
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	1e5a      	subs	r2, r3, #1
 80132a4:	4b2d      	ldr	r3, [pc, #180]	@ (801335c <_txe_queue_create+0x144>)
 80132a6:	601a      	str	r2, [r3, #0]
 80132a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132aa:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80132ac:	6a3b      	ldr	r3, [r7, #32]
 80132ae:	f383 8810 	msr	PRIMASK, r3
}
 80132b2:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80132b4:	f7ff f904 	bl	80124c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate queue.  */
        if (queue_ptr == next_queue)
 80132b8:	68fa      	ldr	r2, [r7, #12]
 80132ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132bc:	429a      	cmp	r2, r3
 80132be:	d102      	bne.n	80132c6 <_txe_queue_create+0xae>
        {

            /* Queue is already created, return appropriate error code.  */
            status =  TX_QUEUE_ERROR;
 80132c0:	2309      	movs	r3, #9
 80132c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132c4:	e036      	b.n	8013334 <_txe_queue_create+0x11c>
        }

        /* Check the starting address of the queue.  */
        else if (queue_start == TX_NULL)
 80132c6:	683b      	ldr	r3, [r7, #0]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d102      	bne.n	80132d2 <_txe_queue_create+0xba>
        {

            /* Invalid starting address of queue.  */
            status =  TX_PTR_ERROR;
 80132cc:	2303      	movs	r3, #3
 80132ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132d0:	e030      	b.n	8013334 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - less than 1.  */
        else if (message_size < TX_1_ULONG)
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d102      	bne.n	80132de <_txe_queue_create+0xc6>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80132d8:	2305      	movs	r3, #5
 80132da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132dc:	e02a      	b.n	8013334 <_txe_queue_create+0x11c>
        }

        /* Check for an invalid message size - greater than 16.  */
        else if (message_size > TX_16_ULONG)
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	2b10      	cmp	r3, #16
 80132e2:	d902      	bls.n	80132ea <_txe_queue_create+0xd2>
        {

            /* Invalid message size specified.  */
            status =  TX_SIZE_ERROR;
 80132e4:	2305      	movs	r3, #5
 80132e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132e8:	e024      	b.n	8013334 <_txe_queue_create+0x11c>
        }

        /* Check on the queue size.  */
        else if ((queue_size/(sizeof(ULONG))) < message_size)
 80132ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80132ec:	089b      	lsrs	r3, r3, #2
 80132ee:	687a      	ldr	r2, [r7, #4]
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d902      	bls.n	80132fa <_txe_queue_create+0xe2>
        {

            /* Invalid queue size specified.  */
            status =  TX_SIZE_ERROR;
 80132f4:	2305      	movs	r3, #5
 80132f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132f8:	e01c      	b.n	8013334 <_txe_queue_create+0x11c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80132fa:	4b1b      	ldr	r3, [pc, #108]	@ (8013368 <_txe_queue_create+0x150>)
 80132fc:	681b      	ldr	r3, [r3, #0]
 80132fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013300:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013302:	4b1a      	ldr	r3, [pc, #104]	@ (801336c <_txe_queue_create+0x154>)
 8013304:	429a      	cmp	r2, r3
 8013306:	d101      	bne.n	801330c <_txe_queue_create+0xf4>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013308:	2313      	movs	r3, #19
 801330a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801330c:	f3ef 8305 	mrs	r3, IPSR
 8013310:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013312:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013314:	4b16      	ldr	r3, [pc, #88]	@ (8013370 <_txe_queue_create+0x158>)
 8013316:	681b      	ldr	r3, [r3, #0]
 8013318:	4313      	orrs	r3, r2
 801331a:	d00b      	beq.n	8013334 <_txe_queue_create+0x11c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801331c:	f3ef 8305 	mrs	r3, IPSR
 8013320:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013322:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013324:	4b12      	ldr	r3, [pc, #72]	@ (8013370 <_txe_queue_create+0x158>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	4313      	orrs	r3, r2
 801332a:	4a12      	ldr	r2, [pc, #72]	@ (8013374 <_txe_queue_create+0x15c>)
 801332c:	4293      	cmp	r3, r2
 801332e:	d801      	bhi.n	8013334 <_txe_queue_create+0x11c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013330:	2313      	movs	r3, #19
 8013332:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013336:	2b00      	cmp	r3, #0
 8013338:	d10a      	bne.n	8013350 <_txe_queue_create+0x138>
    {

        /* Call actual queue create function.  */
        status =  _tx_queue_create(queue_ptr, name_ptr, message_size, queue_start, queue_size);
 801333a:	683c      	ldr	r4, [r7, #0]
 801333c:	687a      	ldr	r2, [r7, #4]
 801333e:	68b9      	ldr	r1, [r7, #8]
 8013340:	68f8      	ldr	r0, [r7, #12]
 8013342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013344:	9300      	str	r3, [sp, #0]
 8013346:	0023      	movs	r3, r4
 8013348:	f7fe f9ba 	bl	80116c0 <_tx_queue_create>
 801334c:	0003      	movs	r3, r0
 801334e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013352:	0018      	movs	r0, r3
 8013354:	46bd      	mov	sp, r7
 8013356:	b011      	add	sp, #68	@ 0x44
 8013358:	bd90      	pop	{r4, r7, pc}
 801335a:	46c0      	nop			@ (mov r8, r8)
 801335c:	2000a880 	.word	0x2000a880
 8013360:	2000a7b8 	.word	0x2000a7b8
 8013364:	2000a7bc 	.word	0x2000a7bc
 8013368:	2000a7e8 	.word	0x2000a7e8
 801336c:	2000a930 	.word	0x2000a930
 8013370:	20000010 	.word	0x20000010
 8013374:	f0f0f0ef 	.word	0xf0f0f0ef

08013378 <_txe_queue_receive>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_receive(TX_QUEUE *queue_ptr, VOID *destination_ptr, ULONG wait_option)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b088      	sub	sp, #32
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013384:	2300      	movs	r3, #0
 8013386:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d102      	bne.n	8013394 <_txe_queue_receive+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801338e:	2309      	movs	r3, #9
 8013390:	61fb      	str	r3, [r7, #28]
 8013392:	e024      	b.n	80133de <_txe_queue_receive+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	4a19      	ldr	r2, [pc, #100]	@ (8013400 <_txe_queue_receive+0x88>)
 801339a:	4293      	cmp	r3, r2
 801339c:	d002      	beq.n	80133a4 <_txe_queue_receive+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801339e:	2309      	movs	r3, #9
 80133a0:	61fb      	str	r3, [r7, #28]
 80133a2:	e01c      	b.n	80133de <_txe_queue_receive+0x66>
    }

    /* Check for an invalid destination for message.  */
    else if (destination_ptr == TX_NULL)
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d102      	bne.n	80133b0 <_txe_queue_receive+0x38>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 80133aa:	2303      	movs	r3, #3
 80133ac:	61fb      	str	r3, [r7, #28]
 80133ae:	e016      	b.n	80133de <_txe_queue_receive+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d013      	beq.n	80133de <_txe_queue_receive+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80133b6:	f3ef 8305 	mrs	r3, IPSR
 80133ba:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80133bc:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80133be:	4b11      	ldr	r3, [pc, #68]	@ (8013404 <_txe_queue_receive+0x8c>)
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	4313      	orrs	r3, r2
 80133c4:	d002      	beq.n	80133cc <_txe_queue_receive+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80133c6:	2304      	movs	r3, #4
 80133c8:	61fb      	str	r3, [r7, #28]
 80133ca:	e008      	b.n	80133de <_txe_queue_receive+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80133cc:	4b0e      	ldr	r3, [pc, #56]	@ (8013408 <_txe_queue_receive+0x90>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 80133d2:	69ba      	ldr	r2, [r7, #24]
 80133d4:	4b0d      	ldr	r3, [pc, #52]	@ (801340c <_txe_queue_receive+0x94>)
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d101      	bne.n	80133de <_txe_queue_receive+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 80133da:	2304      	movs	r3, #4
 80133dc:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80133de:	69fb      	ldr	r3, [r7, #28]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d107      	bne.n	80133f4 <_txe_queue_receive+0x7c>
    {

        /* Call actual queue receive function.  */
        status =  _tx_queue_receive(queue_ptr, destination_ptr, wait_option);
 80133e4:	687a      	ldr	r2, [r7, #4]
 80133e6:	68b9      	ldr	r1, [r7, #8]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	0018      	movs	r0, r3
 80133ec:	f7fe f9f0 	bl	80117d0 <_tx_queue_receive>
 80133f0:	0003      	movs	r3, r0
 80133f2:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 80133f4:	69fb      	ldr	r3, [r7, #28]
}
 80133f6:	0018      	movs	r0, r3
 80133f8:	46bd      	mov	sp, r7
 80133fa:	b008      	add	sp, #32
 80133fc:	bd80      	pop	{r7, pc}
 80133fe:	46c0      	nop			@ (mov r8, r8)
 8013400:	51554555 	.word	0x51554555
 8013404:	20000010 	.word	0x20000010
 8013408:	2000a7e8 	.word	0x2000a7e8
 801340c:	2000a930 	.word	0x2000a930

08013410 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b088      	sub	sp, #32
 8013414:	af00      	add	r7, sp, #0
 8013416:	60f8      	str	r0, [r7, #12]
 8013418:	60b9      	str	r1, [r7, #8]
 801341a:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801341c:	2300      	movs	r3, #0
 801341e:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d102      	bne.n	801342c <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013426:	2309      	movs	r3, #9
 8013428:	61fb      	str	r3, [r7, #28]
 801342a:	e024      	b.n	8013476 <_txe_queue_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	681b      	ldr	r3, [r3, #0]
 8013430:	4a19      	ldr	r2, [pc, #100]	@ (8013498 <_txe_queue_send+0x88>)
 8013432:	4293      	cmp	r3, r2
 8013434:	d002      	beq.n	801343c <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 8013436:	2309      	movs	r3, #9
 8013438:	61fb      	str	r3, [r7, #28]
 801343a:	e01c      	b.n	8013476 <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 801343c:	68bb      	ldr	r3, [r7, #8]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d102      	bne.n	8013448 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8013442:	2303      	movs	r3, #3
 8013444:	61fb      	str	r3, [r7, #28]
 8013446:	e016      	b.n	8013476 <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d013      	beq.n	8013476 <_txe_queue_send+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801344e:	f3ef 8305 	mrs	r3, IPSR
 8013452:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013454:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013456:	4b11      	ldr	r3, [pc, #68]	@ (801349c <_txe_queue_send+0x8c>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4313      	orrs	r3, r2
 801345c:	d002      	beq.n	8013464 <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 801345e:	2304      	movs	r3, #4
 8013460:	61fb      	str	r3, [r7, #28]
 8013462:	e008      	b.n	8013476 <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8013464:	4b0e      	ldr	r3, [pc, #56]	@ (80134a0 <_txe_queue_send+0x90>)
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 801346a:	69ba      	ldr	r2, [r7, #24]
 801346c:	4b0d      	ldr	r3, [pc, #52]	@ (80134a4 <_txe_queue_send+0x94>)
 801346e:	429a      	cmp	r2, r3
 8013470:	d101      	bne.n	8013476 <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013472:	2304      	movs	r3, #4
 8013474:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013476:	69fb      	ldr	r3, [r7, #28]
 8013478:	2b00      	cmp	r3, #0
 801347a:	d107      	bne.n	801348c <_txe_queue_send+0x7c>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 801347c:	687a      	ldr	r2, [r7, #4]
 801347e:	68b9      	ldr	r1, [r7, #8]
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	0018      	movs	r0, r3
 8013484:	f7fe fb6c 	bl	8011b60 <_tx_queue_send>
 8013488:	0003      	movs	r3, r0
 801348a:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 801348c:	69fb      	ldr	r3, [r7, #28]
}
 801348e:	0018      	movs	r0, r3
 8013490:	46bd      	mov	sp, r7
 8013492:	b008      	add	sp, #32
 8013494:	bd80      	pop	{r7, pc}
 8013496:	46c0      	nop			@ (mov r8, r8)
 8013498:	51554555 	.word	0x51554555
 801349c:	20000010 	.word	0x20000010
 80134a0:	2000a7e8 	.word	0x2000a7e8
 80134a4:	2000a930 	.word	0x2000a930

080134a8 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80134a8:	b580      	push	{r7, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d102      	bne.n	80134bc <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80134b6:	230c      	movs	r3, #12
 80134b8:	60fb      	str	r3, [r7, #12]
 80134ba:	e00d      	b.n	80134d8 <_txe_semaphore_put+0x30>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	681b      	ldr	r3, [r3, #0]
 80134c0:	4a08      	ldr	r2, [pc, #32]	@ (80134e4 <_txe_semaphore_put+0x3c>)
 80134c2:	4293      	cmp	r3, r2
 80134c4:	d002      	beq.n	80134cc <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80134c6:	230c      	movs	r3, #12
 80134c8:	60fb      	str	r3, [r7, #12]
 80134ca:	e005      	b.n	80134d8 <_txe_semaphore_put+0x30>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	0018      	movs	r0, r3
 80134d0:	f7fe fc72 	bl	8011db8 <_tx_semaphore_put>
 80134d4:	0003      	movs	r3, r0
 80134d6:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80134d8:	68fb      	ldr	r3, [r7, #12]
}
 80134da:	0018      	movs	r0, r3
 80134dc:	46bd      	mov	sp, r7
 80134de:	b004      	add	sp, #16
 80134e0:	bd80      	pop	{r7, pc}
 80134e2:	46c0      	nop			@ (mov r8, r8)
 80134e4:	53454d41 	.word	0x53454d41

080134e8 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80134e8:	b590      	push	{r4, r7, lr}
 80134ea:	b099      	sub	sp, #100	@ 0x64
 80134ec:	af06      	add	r7, sp, #24
 80134ee:	60f8      	str	r0, [r7, #12]
 80134f0:	60b9      	str	r1, [r7, #8]
 80134f2:	607a      	str	r2, [r7, #4]
 80134f4:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80134f6:	2300      	movs	r3, #0
 80134f8:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80134fa:	68fb      	ldr	r3, [r7, #12]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d102      	bne.n	8013506 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013500:	230e      	movs	r3, #14
 8013502:	647b      	str	r3, [r7, #68]	@ 0x44
 8013504:	e0b6      	b.n	8013674 <_txe_thread_create+0x18c>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8013506:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013508:	2bb0      	cmp	r3, #176	@ 0xb0
 801350a:	d002      	beq.n	8013512 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801350c:	230e      	movs	r3, #14
 801350e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013510:	e0b0      	b.n	8013674 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8013512:	f3ef 8310 	mrs	r3, PRIMASK
 8013516:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013518:	b672      	cpsid	i
    return(primask_value);
 801351a:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 801351c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 801351e:	4b64      	ldr	r3, [pc, #400]	@ (80136b0 <_txe_thread_create+0x1c8>)
 8013520:	681b      	ldr	r3, [r3, #0]
 8013522:	1c5a      	adds	r2, r3, #1
 8013524:	4b62      	ldr	r3, [pc, #392]	@ (80136b0 <_txe_thread_create+0x1c8>)
 8013526:	601a      	str	r2, [r3, #0]
 8013528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801352a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801352e:	f383 8810 	msr	PRIMASK, r3
}
 8013532:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8013534:	2300      	movs	r3, #0
 8013536:	643b      	str	r3, [r7, #64]	@ 0x40
        next_thread =  _tx_thread_created_ptr;
 8013538:	4b5e      	ldr	r3, [pc, #376]	@ (80136b4 <_txe_thread_create+0x1cc>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801353e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013540:	633b      	str	r3, [r7, #48]	@ 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8013542:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013544:	3b01      	subs	r3, #1
 8013546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013548:	18d3      	adds	r3, r2, r3
 801354a:	633b      	str	r3, [r7, #48]	@ 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 801354c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801354e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013550:	2300      	movs	r3, #0
 8013552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013554:	e02b      	b.n	80135ae <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8013556:	68fa      	ldr	r2, [r7, #12]
 8013558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801355a:	429a      	cmp	r2, r3
 801355c:	d101      	bne.n	8013562 <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 801355e:	2301      	movs	r3, #1
 8013560:	643b      	str	r3, [r7, #64]	@ 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8013562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013564:	2b01      	cmp	r3, #1
 8013566:	d028      	beq.n	80135ba <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8013568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801356e:	429a      	cmp	r2, r3
 8013570:	d308      	bcc.n	8013584 <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8013572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013574:	691b      	ldr	r3, [r3, #16]
 8013576:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013578:	429a      	cmp	r2, r3
 801357a:	d203      	bcs.n	8013584 <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 801357c:	2300      	movs	r3, #0
 801357e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013580:	2301      	movs	r3, #1
 8013582:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 8013584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013586:	68db      	ldr	r3, [r3, #12]
 8013588:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801358a:	429a      	cmp	r2, r3
 801358c:	d308      	bcc.n	80135a0 <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 801358e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013590:	691b      	ldr	r3, [r3, #16]
 8013592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013594:	429a      	cmp	r2, r3
 8013596:	d203      	bcs.n	80135a0 <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013598:	2300      	movs	r3, #0
 801359a:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 801359c:	2301      	movs	r3, #1
 801359e:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80135a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135a2:	2288      	movs	r2, #136	@ 0x88
 80135a4:	589b      	ldr	r3, [r3, r2]
 80135a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80135a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135aa:	3301      	adds	r3, #1
 80135ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135ae:	4b42      	ldr	r3, [pc, #264]	@ (80136b8 <_txe_thread_create+0x1d0>)
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80135b4:	429a      	cmp	r2, r3
 80135b6:	d3ce      	bcc.n	8013556 <_txe_thread_create+0x6e>
 80135b8:	e000      	b.n	80135bc <_txe_thread_create+0xd4>
                break;
 80135ba:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80135bc:	f3ef 8310 	mrs	r3, PRIMASK
 80135c0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80135c2:	b672      	cpsid	i
    return(primask_value);
 80135c4:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80135c6:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80135c8:	4b39      	ldr	r3, [pc, #228]	@ (80136b0 <_txe_thread_create+0x1c8>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	1e5a      	subs	r2, r3, #1
 80135ce:	4b38      	ldr	r3, [pc, #224]	@ (80136b0 <_txe_thread_create+0x1c8>)
 80135d0:	601a      	str	r2, [r3, #0]
 80135d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	f383 8810 	msr	PRIMASK, r3
}
 80135dc:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80135de:	f7fe ff6f 	bl	80124c0 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80135e2:	68fa      	ldr	r2, [r7, #12]
 80135e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135e6:	429a      	cmp	r2, r3
 80135e8:	d102      	bne.n	80135f0 <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80135ea:	230e      	movs	r3, #14
 80135ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80135ee:	e041      	b.n	8013674 <_txe_thread_create+0x18c>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80135f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d102      	bne.n	80135fc <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80135f6:	2303      	movs	r3, #3
 80135f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80135fa:	e03b      	b.n	8013674 <_txe_thread_create+0x18c>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d102      	bne.n	8013608 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8013602:	2303      	movs	r3, #3
 8013604:	647b      	str	r3, [r7, #68]	@ 0x44
 8013606:	e035      	b.n	8013674 <_txe_thread_create+0x18c>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8013608:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801360a:	2bc7      	cmp	r3, #199	@ 0xc7
 801360c:	d802      	bhi.n	8013614 <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 801360e:	2305      	movs	r3, #5
 8013610:	647b      	str	r3, [r7, #68]	@ 0x44
 8013612:	e02f      	b.n	8013674 <_txe_thread_create+0x18c>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8013614:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013616:	2b1f      	cmp	r3, #31
 8013618:	d902      	bls.n	8013620 <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 801361a:	230f      	movs	r3, #15
 801361c:	647b      	str	r3, [r7, #68]	@ 0x44
 801361e:	e029      	b.n	8013674 <_txe_thread_create+0x18c>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8013620:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8013622:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013624:	429a      	cmp	r2, r3
 8013626:	d902      	bls.n	801362e <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8013628:	2318      	movs	r3, #24
 801362a:	647b      	str	r3, [r7, #68]	@ 0x44
 801362c:	e022      	b.n	8013674 <_txe_thread_create+0x18c>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 801362e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013630:	2b01      	cmp	r3, #1
 8013632:	d902      	bls.n	801363a <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8013634:	2310      	movs	r3, #16
 8013636:	647b      	str	r3, [r7, #68]	@ 0x44
 8013638:	e01c      	b.n	8013674 <_txe_thread_create+0x18c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 801363a:	4b20      	ldr	r3, [pc, #128]	@ (80136bc <_txe_thread_create+0x1d4>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8013640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013642:	4b1f      	ldr	r3, [pc, #124]	@ (80136c0 <_txe_thread_create+0x1d8>)
 8013644:	429a      	cmp	r2, r3
 8013646:	d101      	bne.n	801364c <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013648:	2313      	movs	r3, #19
 801364a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801364c:	f3ef 8305 	mrs	r3, IPSR
 8013650:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013652:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013654:	4b1b      	ldr	r3, [pc, #108]	@ (80136c4 <_txe_thread_create+0x1dc>)
 8013656:	681b      	ldr	r3, [r3, #0]
 8013658:	4313      	orrs	r3, r2
 801365a:	d00b      	beq.n	8013674 <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801365c:	f3ef 8305 	mrs	r3, IPSR
 8013660:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013662:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013664:	4b17      	ldr	r3, [pc, #92]	@ (80136c4 <_txe_thread_create+0x1dc>)
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	4313      	orrs	r3, r2
 801366a:	4a17      	ldr	r2, [pc, #92]	@ (80136c8 <_txe_thread_create+0x1e0>)
 801366c:	4293      	cmp	r3, r2
 801366e:	d801      	bhi.n	8013674 <_txe_thread_create+0x18c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013670:	2313      	movs	r3, #19
 8013672:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013674:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013676:	2b00      	cmp	r3, #0
 8013678:	d114      	bne.n	80136a4 <_txe_thread_create+0x1bc>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 801367a:	683c      	ldr	r4, [r7, #0]
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	68b9      	ldr	r1, [r7, #8]
 8013680:	68f8      	ldr	r0, [r7, #12]
 8013682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013684:	9305      	str	r3, [sp, #20]
 8013686:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013688:	9304      	str	r3, [sp, #16]
 801368a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801368c:	9303      	str	r3, [sp, #12]
 801368e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013690:	9302      	str	r3, [sp, #8]
 8013692:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013694:	9301      	str	r3, [sp, #4]
 8013696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	0023      	movs	r3, r4
 801369c:	f7fe fbe4 	bl	8011e68 <_tx_thread_create>
 80136a0:	0003      	movs	r3, r0
 80136a2:	647b      	str	r3, [r7, #68]	@ 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80136a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80136a6:	0018      	movs	r0, r3
 80136a8:	46bd      	mov	sp, r7
 80136aa:	b013      	add	sp, #76	@ 0x4c
 80136ac:	bd90      	pop	{r4, r7, pc}
 80136ae:	46c0      	nop			@ (mov r8, r8)
 80136b0:	2000a880 	.word	0x2000a880
 80136b4:	2000a7f0 	.word	0x2000a7f0
 80136b8:	2000a7f4 	.word	0x2000a7f4
 80136bc:	2000a7e8 	.word	0x2000a7e8
 80136c0:	2000a930 	.word	0x2000a930
 80136c4:	20000010 	.word	0x20000010
 80136c8:	f0f0f0ef 	.word	0xf0f0f0ef

080136cc <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80136cc:	b580      	push	{r7, lr}
 80136ce:	b084      	sub	sp, #16
 80136d0:	af00      	add	r7, sp, #0
 80136d2:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d102      	bne.n	80136e0 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80136da:	230e      	movs	r3, #14
 80136dc:	60fb      	str	r3, [r7, #12]
 80136de:	e00d      	b.n	80136fc <_txe_thread_resume+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	4a08      	ldr	r2, [pc, #32]	@ (8013708 <_txe_thread_resume+0x3c>)
 80136e6:	4293      	cmp	r3, r2
 80136e8:	d002      	beq.n	80136f0 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80136ea:	230e      	movs	r3, #14
 80136ec:	60fb      	str	r3, [r7, #12]
 80136ee:	e005      	b.n	80136fc <_txe_thread_resume+0x30>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 80136f0:	687b      	ldr	r3, [r7, #4]
 80136f2:	0018      	movs	r0, r3
 80136f4:	f7fe fd5a 	bl	80121ac <_tx_thread_resume>
 80136f8:	0003      	movs	r3, r0
 80136fa:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80136fc:	68fb      	ldr	r3, [r7, #12]
}
 80136fe:	0018      	movs	r0, r3
 8013700:	46bd      	mov	sp, r7
 8013702:	b004      	add	sp, #16
 8013704:	bd80      	pop	{r7, pc}
 8013706:	46c0      	nop			@ (mov r8, r8)
 8013708:	54485244 	.word	0x54485244

0801370c <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b084      	sub	sp, #16
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	2b00      	cmp	r3, #0
 8013718:	d102      	bne.n	8013720 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801371a:	230e      	movs	r3, #14
 801371c:	60fb      	str	r3, [r7, #12]
 801371e:	e00d      	b.n	801373c <_txe_thread_suspend+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	4a08      	ldr	r2, [pc, #32]	@ (8013748 <_txe_thread_suspend+0x3c>)
 8013726:	4293      	cmp	r3, r2
 8013728:	d002      	beq.n	8013730 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 801372a:	230e      	movs	r3, #14
 801372c:	60fb      	str	r3, [r7, #12]
 801372e:	e005      	b.n	801373c <_txe_thread_suspend+0x30>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	0018      	movs	r0, r3
 8013734:	f7fe fe56 	bl	80123e4 <_tx_thread_suspend>
 8013738:	0003      	movs	r3, r0
 801373a:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801373c:	68fb      	ldr	r3, [r7, #12]
}
 801373e:	0018      	movs	r0, r3
 8013740:	46bd      	mov	sp, r7
 8013742:	b004      	add	sp, #16
 8013744:	bd80      	pop	{r7, pc}
 8013746:	46c0      	nop			@ (mov r8, r8)
 8013748:	54485244 	.word	0x54485244

0801374c <_ux_device_stack_alternate_setting_get>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 801374c:	b580      	push	{r7, lr}
 801374e:	b088      	sub	sp, #32
 8013750:	af00      	add	r7, sp, #0
 8013752:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013754:	4b1c      	ldr	r3, [pc, #112]	@ (80137c8 <_ux_device_stack_alternate_setting_get+0x7c>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	3320      	adds	r3, #32
 801375a:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801375c:	69bb      	ldr	r3, [r7, #24]
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	2b03      	cmp	r3, #3
 8013762:	d12b      	bne.n	80137bc <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 8013764:	69bb      	ldr	r3, [r7, #24]
 8013766:	22f0      	movs	r2, #240	@ 0xf0
 8013768:	589b      	ldr	r3, [r3, r2]
 801376a:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 801376c:	e023      	b.n	80137b6 <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801376e:	69fb      	ldr	r3, [r7, #28]
 8013770:	695b      	ldr	r3, [r3, #20]
 8013772:	687a      	ldr	r2, [r7, #4]
 8013774:	429a      	cmp	r2, r3
 8013776:	d11b      	bne.n	80137b0 <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 8013778:	69bb      	ldr	r3, [r7, #24]
 801377a:	333c      	adds	r3, #60	@ 0x3c
 801377c:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	3330      	adds	r3, #48	@ 0x30
 8013782:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 801378c:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 801378e:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 8013790:	693b      	ldr	r3, [r7, #16]
 8013792:	2201      	movs	r2, #1
 8013794:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	2203      	movs	r2, #3
 801379a:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	2201      	movs	r2, #1
 80137a0:	2101      	movs	r1, #1
 80137a2:	0018      	movs	r0, r3
 80137a4:	f001 fc70 	bl	8015088 <_ux_device_stack_transfer_request>
 80137a8:	0003      	movs	r3, r0
 80137aa:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	e006      	b.n	80137be <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137b4:	61fb      	str	r3, [r7, #28]
        while (interface != UX_NULL)
 80137b6:	69fb      	ldr	r3, [r7, #28]
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d1d8      	bne.n	801376e <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 80137bc:	23ff      	movs	r3, #255	@ 0xff
}
 80137be:	0018      	movs	r0, r3
 80137c0:	46bd      	mov	sp, r7
 80137c2:	b008      	add	sp, #32
 80137c4:	bd80      	pop	{r7, pc}
 80137c6:	46c0      	nop			@ (mov r8, r8)
 80137c8:	2000adf0 	.word	0x2000adf0

080137cc <_ux_device_stack_alternate_setting_set>:
/*                                            calculated payload size,    */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 80137cc:	b590      	push	{r4, r7, lr}
 80137ce:	b0af      	sub	sp, #188	@ 0xbc
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80137d6:	4bdd      	ldr	r3, [pc, #884]	@ (8013b4c <_ux_device_stack_alternate_setting_set+0x380>)
 80137d8:	681b      	ldr	r3, [r3, #0]
 80137da:	3320      	adds	r3, #32
 80137dc:	2298      	movs	r2, #152	@ 0x98
 80137de:	18b9      	adds	r1, r7, r2
 80137e0:	600b      	str	r3, [r1, #0]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 80137e2:	18bb      	adds	r3, r7, r2
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	2b03      	cmp	r3, #3
 80137ea:	d001      	beq.n	80137f0 <_ux_device_stack_alternate_setting_set+0x24>
        return(UX_FUNCTION_NOT_SUPPORTED);
 80137ec:	2354      	movs	r3, #84	@ 0x54
 80137ee:	e26e      	b.n	8013cce <_ux_device_stack_alternate_setting_set+0x502>

    /* Find the current interface.  */
    interface =  device -> ux_slave_device_first_interface;
 80137f0:	2398      	movs	r3, #152	@ 0x98
 80137f2:	18fb      	adds	r3, r7, r3
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	22f0      	movs	r2, #240	@ 0xf0
 80137f8:	589b      	ldr	r3, [r3, r2]
 80137fa:	22b4      	movs	r2, #180	@ 0xb4
 80137fc:	18ba      	adds	r2, r7, r2
 80137fe:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface != UX_NULL)
 8013800:	e00b      	b.n	801381a <_ux_device_stack_alternate_setting_set+0x4e>
    {

        if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 8013802:	21b4      	movs	r1, #180	@ 0xb4
 8013804:	187b      	adds	r3, r7, r1
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	695b      	ldr	r3, [r3, #20]
 801380a:	687a      	ldr	r2, [r7, #4]
 801380c:	429a      	cmp	r2, r3
 801380e:	d00a      	beq.n	8013826 <_ux_device_stack_alternate_setting_set+0x5a>
            break;
        else
            interface =  interface -> ux_slave_interface_next_interface;
 8013810:	187b      	adds	r3, r7, r1
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013816:	187a      	adds	r2, r7, r1
 8013818:	6013      	str	r3, [r2, #0]
    while (interface != UX_NULL)
 801381a:	23b4      	movs	r3, #180	@ 0xb4
 801381c:	18fb      	adds	r3, r7, r3
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	2b00      	cmp	r3, #0
 8013822:	d1ee      	bne.n	8013802 <_ux_device_stack_alternate_setting_set+0x36>
 8013824:	e000      	b.n	8013828 <_ux_device_stack_alternate_setting_set+0x5c>
            break;
 8013826:	46c0      	nop			@ (mov r8, r8)
        interface = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface == UX_NULL)
 8013828:	23b4      	movs	r3, #180	@ 0xb4
 801382a:	18fb      	adds	r3, r7, r3
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <_ux_device_stack_alternate_setting_set+0x74>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 8013832:	2252      	movs	r2, #82	@ 0x52
 8013834:	2107      	movs	r1, #7
 8013836:	2002      	movs	r0, #2
 8013838:	f001 fcac 	bl	8015194 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 801383c:	2352      	movs	r3, #82	@ 0x52
 801383e:	e246      	b.n	8013cce <_ux_device_stack_alternate_setting_set+0x502>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 8013840:	23b4      	movs	r3, #180	@ 0xb4
 8013842:	18fb      	adds	r3, r7, r3
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	699b      	ldr	r3, [r3, #24]
 8013848:	683a      	ldr	r2, [r7, #0]
 801384a:	429a      	cmp	r2, r3
 801384c:	d101      	bne.n	8013852 <_ux_device_stack_alternate_setting_set+0x86>
        return(UX_SUCCESS);       
 801384e:	2300      	movs	r3, #0
 8013850:	e23d      	b.n	8013cce <_ux_device_stack_alternate_setting_set+0x502>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8013852:	4bbe      	ldr	r3, [pc, #760]	@ (8013b4c <_ux_device_stack_alternate_setting_set+0x380>)
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	2294      	movs	r2, #148	@ 0x94
 8013858:	18ba      	adds	r2, r7, r2
 801385a:	6013      	str	r3, [r2, #0]

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801385c:	4bbb      	ldr	r3, [pc, #748]	@ (8013b4c <_ux_device_stack_alternate_setting_set+0x380>)
 801385e:	681a      	ldr	r2, [r3, #0]
 8013860:	2394      	movs	r3, #148	@ 0x94
 8013862:	005b      	lsls	r3, r3, #1
 8013864:	58d3      	ldr	r3, [r2, r3]
 8013866:	22b0      	movs	r2, #176	@ 0xb0
 8013868:	18ba      	adds	r2, r7, r2
 801386a:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801386c:	4bb7      	ldr	r3, [pc, #732]	@ (8013b4c <_ux_device_stack_alternate_setting_set+0x380>)
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	2396      	movs	r3, #150	@ 0x96
 8013872:	005b      	lsls	r3, r3, #1
 8013874:	58d3      	ldr	r3, [r2, r3]
 8013876:	22ac      	movs	r2, #172	@ 0xac
 8013878:	18ba      	adds	r2, r7, r2
 801387a:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 801387c:	e220      	b.n	8013cc0 <_ux_device_stack_alternate_setting_set+0x4f4>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801387e:	20b0      	movs	r0, #176	@ 0xb0
 8013880:	183b      	adds	r3, r7, r0
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	2290      	movs	r2, #144	@ 0x90
 8013888:	18ba      	adds	r2, r7, r2
 801388a:	6013      	str	r3, [r2, #0]

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 801388c:	218f      	movs	r1, #143	@ 0x8f
 801388e:	187b      	adds	r3, r7, r1
 8013890:	183a      	adds	r2, r7, r0
 8013892:	6812      	ldr	r2, [r2, #0]
 8013894:	7852      	ldrb	r2, [r2, #1]
 8013896:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8013898:	187b      	adds	r3, r7, r1
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	2b02      	cmp	r3, #2
 801389e:	d000      	beq.n	80138a2 <_ux_device_stack_alternate_setting_set+0xd6>
 80138a0:	e1fd      	b.n	8013c9e <_ux_device_stack_alternate_setting_set+0x4d2>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 80138a2:	2458      	movs	r4, #88	@ 0x58
 80138a4:	193b      	adds	r3, r7, r4
 80138a6:	49aa      	ldr	r1, [pc, #680]	@ (8013b50 <_ux_device_stack_alternate_setting_set+0x384>)
 80138a8:	183a      	adds	r2, r7, r0
 80138aa:	6810      	ldr	r0, [r2, #0]
 80138ac:	2208      	movs	r2, #8
 80138ae:	f001 fcac 	bl	801520a <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 80138b2:	0020      	movs	r0, r4
 80138b4:	183b      	adds	r3, r7, r0
 80138b6:	691a      	ldr	r2, [r3, #16]
 80138b8:	2398      	movs	r3, #152	@ 0x98
 80138ba:	18fb      	adds	r3, r7, r3
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	21cc      	movs	r1, #204	@ 0xcc
 80138c0:	585b      	ldr	r3, [r3, r1]
 80138c2:	429a      	cmp	r2, r3
 80138c4:	d000      	beq.n	80138c8 <_ux_device_stack_alternate_setting_set+0xfc>
 80138c6:	e1ea      	b.n	8013c9e <_ux_device_stack_alternate_setting_set+0x4d2>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 80138c8:	183b      	adds	r3, r7, r0
 80138ca:	689b      	ldr	r3, [r3, #8]
 80138cc:	22ac      	movs	r2, #172	@ 0xac
 80138ce:	18ba      	adds	r2, r7, r2
 80138d0:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 80138d2:	e1dd      	b.n	8013c90 <_ux_device_stack_alternate_setting_set+0x4c4>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 80138d4:	20b0      	movs	r0, #176	@ 0xb0
 80138d6:	183b      	adds	r3, r7, r0
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	2290      	movs	r2, #144	@ 0x90
 80138de:	18ba      	adds	r2, r7, r2
 80138e0:	6013      	str	r3, [r2, #0]

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 80138e2:	218f      	movs	r1, #143	@ 0x8f
 80138e4:	187b      	adds	r3, r7, r1
 80138e6:	183a      	adds	r2, r7, r0
 80138e8:	6812      	ldr	r2, [r2, #0]
 80138ea:	7852      	ldrb	r2, [r2, #1]
 80138ec:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 80138ee:	187b      	adds	r3, r7, r1
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	2b04      	cmp	r3, #4
 80138f4:	d000      	beq.n	80138f8 <_ux_device_stack_alternate_setting_set+0x12c>
 80138f6:	e1ba      	b.n	8013c6e <_ux_device_stack_alternate_setting_set+0x4a2>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 80138f8:	2434      	movs	r4, #52	@ 0x34
 80138fa:	193b      	adds	r3, r7, r4
 80138fc:	4995      	ldr	r1, [pc, #596]	@ (8013b54 <_ux_device_stack_alternate_setting_set+0x388>)
 80138fe:	183a      	adds	r2, r7, r0
 8013900:	6810      	ldr	r0, [r2, #0]
 8013902:	2209      	movs	r2, #9
 8013904:	f001 fc81 	bl	801520a <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8013908:	193b      	adds	r3, r7, r4
 801390a:	689b      	ldr	r3, [r3, #8]
 801390c:	687a      	ldr	r2, [r7, #4]
 801390e:	429a      	cmp	r2, r3
 8013910:	d000      	beq.n	8013914 <_ux_device_stack_alternate_setting_set+0x148>
 8013912:	e1ac      	b.n	8013c6e <_ux_device_stack_alternate_setting_set+0x4a2>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 8013914:	193b      	adds	r3, r7, r4
 8013916:	68db      	ldr	r3, [r3, #12]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 8013918:	683a      	ldr	r2, [r7, #0]
 801391a:	429a      	cmp	r2, r3
 801391c:	d000      	beq.n	8013920 <_ux_device_stack_alternate_setting_set+0x154>
 801391e:	e1a6      	b.n	8013c6e <_ux_device_stack_alternate_setting_set+0x4a2>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface -> ux_slave_interface_first_endpoint;
 8013920:	23b4      	movs	r3, #180	@ 0xb4
 8013922:	18fb      	adds	r3, r7, r3
 8013924:	681b      	ldr	r3, [r3, #0]
 8013926:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013928:	22a8      	movs	r2, #168	@ 0xa8
 801392a:	18ba      	adds	r2, r7, r2
 801392c:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 801392e:	e02c      	b.n	801398a <_ux_device_stack_alternate_setting_set+0x1be>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 8013930:	24a8      	movs	r4, #168	@ 0xa8
 8013932:	193b      	adds	r3, r7, r4
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	2126      	movs	r1, #38	@ 0x26
 8013938:	0018      	movs	r0, r3
 801393a:	f001 fb91 	bl	8015060 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 801393e:	2194      	movs	r1, #148	@ 0x94
 8013940:	187b      	adds	r3, r7, r1
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	699b      	ldr	r3, [r3, #24]
 8013946:	193a      	adds	r2, r7, r4
 8013948:	6812      	ldr	r2, [r2, #0]
 801394a:	1879      	adds	r1, r7, r1
 801394c:	6808      	ldr	r0, [r1, #0]
 801394e:	210f      	movs	r1, #15
 8013950:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8013952:	193b      	adds	r3, r7, r4
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013958:	67bb      	str	r3, [r7, #120]	@ 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801395a:	0021      	movs	r1, r4
 801395c:	187b      	adds	r3, r7, r1
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	2200      	movs	r2, #0
 8013962:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 8013964:	187b      	adds	r3, r7, r1
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	2200      	movs	r2, #0
 801396a:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801396c:	187b      	adds	r3, r7, r1
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2200      	movs	r2, #0
 8013972:	625a      	str	r2, [r3, #36]	@ 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8013974:	187b      	adds	r3, r7, r1
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	2200      	movs	r2, #0
 801397a:	629a      	str	r2, [r3, #40]	@ 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 801397c:	187b      	adds	r3, r7, r1
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	2200      	movs	r2, #0
 8013982:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 8013984:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013986:	187a      	adds	r2, r7, r1
 8013988:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 801398a:	23a8      	movs	r3, #168	@ 0xa8
 801398c:	18fb      	adds	r3, r7, r3
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d1cd      	bne.n	8013930 <_ux_device_stack_alternate_setting_set+0x164>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface -> ux_slave_interface_first_endpoint = UX_NULL;
 8013994:	23b4      	movs	r3, #180	@ 0xb4
 8013996:	18fb      	adds	r3, r7, r3
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	2200      	movs	r2, #0
 801399c:	635a      	str	r2, [r3, #52]	@ 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 801399e:	21b0      	movs	r1, #176	@ 0xb0
 80139a0:	187b      	adds	r3, r7, r1
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	781b      	ldrb	r3, [r3, #0]
 80139a6:	001a      	movs	r2, r3
 80139a8:	20ac      	movs	r0, #172	@ 0xac
 80139aa:	183b      	adds	r3, r7, r0
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	1a9b      	subs	r3, r3, r2
 80139b0:	183a      	adds	r2, r7, r0
 80139b2:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 80139b4:	187b      	adds	r3, r7, r1
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	781b      	ldrb	r3, [r3, #0]
 80139ba:	001a      	movs	r2, r3
 80139bc:	187b      	adds	r3, r7, r1
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	189b      	adds	r3, r3, r2
 80139c2:	187a      	adds	r2, r7, r1
 80139c4:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 80139c6:	e10a      	b.n	8013bde <_ux_device_stack_alternate_setting_set+0x412>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 80139c8:	22b0      	movs	r2, #176	@ 0xb0
 80139ca:	18bb      	adds	r3, r7, r2
 80139cc:	681b      	ldr	r3, [r3, #0]
 80139ce:	781b      	ldrb	r3, [r3, #0]
 80139d0:	2190      	movs	r1, #144	@ 0x90
 80139d2:	1879      	adds	r1, r7, r1
 80139d4:	600b      	str	r3, [r1, #0]
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 80139d6:	218f      	movs	r1, #143	@ 0x8f
 80139d8:	187b      	adds	r3, r7, r1
 80139da:	18ba      	adds	r2, r7, r2
 80139dc:	6812      	ldr	r2, [r2, #0]
 80139de:	7852      	ldrb	r2, [r2, #1]
 80139e0:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 80139e2:	187b      	adds	r3, r7, r1
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	2b05      	cmp	r3, #5
 80139e8:	d008      	beq.n	80139fc <_ux_device_stack_alternate_setting_set+0x230>
 80139ea:	dd00      	ble.n	80139ee <_ux_device_stack_alternate_setting_set+0x222>
 80139ec:	e0e5      	b.n	8013bba <_ux_device_stack_alternate_setting_set+0x3ee>
 80139ee:	2b02      	cmp	r3, #2
 80139f0:	d100      	bne.n	80139f4 <_ux_device_stack_alternate_setting_set+0x228>
 80139f2:	e0db      	b.n	8013bac <_ux_device_stack_alternate_setting_set+0x3e0>
 80139f4:	2b04      	cmp	r3, #4
 80139f6:	d100      	bne.n	80139fa <_ux_device_stack_alternate_setting_set+0x22e>
 80139f8:	e0d8      	b.n	8013bac <_ux_device_stack_alternate_setting_set+0x3e0>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 80139fa:	e0de      	b.n	8013bba <_ux_device_stack_alternate_setting_set+0x3ee>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 80139fc:	2198      	movs	r1, #152	@ 0x98
 80139fe:	187b      	adds	r3, r7, r1
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	22fc      	movs	r2, #252	@ 0xfc
 8013a04:	589b      	ldr	r3, [r3, r2]
 8013a06:	22a8      	movs	r2, #168	@ 0xa8
 8013a08:	18ba      	adds	r2, r7, r2
 8013a0a:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8013a0c:	187b      	adds	r3, r7, r1
 8013a0e:	681a      	ldr	r2, [r3, #0]
 8013a10:	2380      	movs	r3, #128	@ 0x80
 8013a12:	005b      	lsls	r3, r3, #1
 8013a14:	58d3      	ldr	r3, [r2, r3]
 8013a16:	22a0      	movs	r2, #160	@ 0xa0
 8013a18:	18ba      	adds	r2, r7, r2
 8013a1a:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 8013a1c:	e016      	b.n	8013a4c <_ux_device_stack_alternate_setting_set+0x280>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8013a1e:	22a8      	movs	r2, #168	@ 0xa8
 8013a20:	18bb      	adds	r3, r7, r2
 8013a22:	681b      	ldr	r3, [r3, #0]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d104      	bne.n	8013a34 <_ux_device_stack_alternate_setting_set+0x268>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 8013a2a:	18bb      	adds	r3, r7, r2
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	2201      	movs	r2, #1
 8013a30:	601a      	str	r2, [r3, #0]
                                            break;
 8013a32:	e010      	b.n	8013a56 <_ux_device_stack_alternate_setting_set+0x28a>
                                        endpoint++;
 8013a34:	22a8      	movs	r2, #168	@ 0xa8
 8013a36:	18bb      	adds	r3, r7, r2
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	3390      	adds	r3, #144	@ 0x90
 8013a3c:	18ba      	adds	r2, r7, r2
 8013a3e:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 8013a40:	22a0      	movs	r2, #160	@ 0xa0
 8013a42:	18bb      	adds	r3, r7, r2
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	3b01      	subs	r3, #1
 8013a48:	18ba      	adds	r2, r7, r2
 8013a4a:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 8013a4c:	23a0      	movs	r3, #160	@ 0xa0
 8013a4e:	18fb      	adds	r3, r7, r3
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d1e3      	bne.n	8013a1e <_ux_device_stack_alternate_setting_set+0x252>
                                    if (endpoints_pool_number == 0)
 8013a56:	23a0      	movs	r3, #160	@ 0xa0
 8013a58:	18fb      	adds	r3, r7, r3
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d101      	bne.n	8013a64 <_ux_device_stack_alternate_setting_set+0x298>
                                        return(UX_MEMORY_INSUFFICIENT);
 8013a60:	2312      	movs	r3, #18
 8013a62:	e134      	b.n	8013cce <_ux_device_stack_alternate_setting_set+0x502>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8013a64:	24a8      	movs	r4, #168	@ 0xa8
 8013a66:	193b      	adds	r3, r7, r4
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 8013a6c:	493a      	ldr	r1, [pc, #232]	@ (8013b58 <_ux_device_stack_alternate_setting_set+0x38c>)
 8013a6e:	22b0      	movs	r2, #176	@ 0xb0
 8013a70:	18ba      	adds	r2, r7, r2
 8013a72:	6810      	ldr	r0, [r2, #0]
 8013a74:	2206      	movs	r2, #6
 8013a76:	f001 fbc8 	bl	801520a <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8013a7a:	0021      	movs	r1, r4
 8013a7c:	187b      	adds	r3, r7, r1
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	3330      	adds	r3, #48	@ 0x30
 8013a82:	2280      	movs	r2, #128	@ 0x80
 8013a84:	18ba      	adds	r2, r7, r2
 8013a86:	6013      	str	r3, [r2, #0]
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8013a88:	187b      	adds	r3, r7, r1
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 8013a8e:	055b      	lsls	r3, r3, #21
 8013a90:	0d5b      	lsrs	r3, r3, #21
 8013a92:	209c      	movs	r0, #156	@ 0x9c
 8013a94:	183a      	adds	r2, r7, r0
 8013a96:	6013      	str	r3, [r2, #0]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8013a98:	4b2c      	ldr	r3, [pc, #176]	@ (8013b4c <_ux_device_stack_alternate_setting_set+0x380>)
 8013a9a:	681a      	ldr	r2, [r3, #0]
 8013a9c:	23d0      	movs	r3, #208	@ 0xd0
 8013a9e:	005b      	lsls	r3, r3, #1
 8013aa0:	58d3      	ldr	r3, [r2, r3]
 8013aa2:	2b02      	cmp	r3, #2
 8013aa4:	d11b      	bne.n	8013ade <_ux_device_stack_alternate_setting_set+0x312>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8013aa6:	187b      	adds	r3, r7, r1
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	699b      	ldr	r3, [r3, #24]
 8013aac:	2201      	movs	r2, #1
 8013aae:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8013ab0:	d015      	beq.n	8013ade <_ux_device_stack_alternate_setting_set+0x312>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8013ab2:	187b      	adds	r3, r7, r1
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	69da      	ldr	r2, [r3, #28]
 8013ab8:	23c0      	movs	r3, #192	@ 0xc0
 8013aba:	015b      	lsls	r3, r3, #5
 8013abc:	4013      	ands	r3, r2
 8013abe:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        if (n_trans)
 8013ac0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00b      	beq.n	8013ade <_ux_device_stack_alternate_setting_set+0x312>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8013ac6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ac8:	0adb      	lsrs	r3, r3, #11
 8013aca:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                            n_trans ++;
 8013acc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013ace:	3301      	adds	r3, #1
 8013ad0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                            max_transfer_length *= n_trans;
 8013ad2:	183b      	adds	r3, r7, r0
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013ad8:	4353      	muls	r3, r2
 8013ada:	183a      	adds	r2, r7, r0
 8013adc:	6013      	str	r3, [r2, #0]
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8013ade:	2180      	movs	r1, #128	@ 0x80
 8013ae0:	187b      	adds	r3, r7, r1
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	229c      	movs	r2, #156	@ 0x9c
 8013ae6:	18ba      	adds	r2, r7, r2
 8013ae8:	6812      	ldr	r2, [r2, #0]
 8013aea:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8013aec:	187b      	adds	r3, r7, r1
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	24a8      	movs	r4, #168	@ 0xa8
 8013af2:	193a      	adds	r2, r7, r4
 8013af4:	6812      	ldr	r2, [r2, #0]
 8013af6:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8013af8:	187b      	adds	r3, r7, r1
 8013afa:	681b      	ldr	r3, [r3, #0]
 8013afc:	2201      	movs	r2, #1
 8013afe:	4252      	negs	r2, r2
 8013b00:	64da      	str	r2, [r3, #76]	@ 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface;
 8013b02:	193b      	adds	r3, r7, r4
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	22b4      	movs	r2, #180	@ 0xb4
 8013b08:	18ba      	adds	r2, r7, r2
 8013b0a:	6812      	ldr	r2, [r2, #0]
 8013b0c:	629a      	str	r2, [r3, #40]	@ 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 8013b0e:	193b      	adds	r3, r7, r4
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	2298      	movs	r2, #152	@ 0x98
 8013b14:	18ba      	adds	r2, r7, r2
 8013b16:	6812      	ldr	r2, [r2, #0]
 8013b18:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8013b1a:	2194      	movs	r1, #148	@ 0x94
 8013b1c:	187b      	adds	r3, r7, r1
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	699b      	ldr	r3, [r3, #24]
 8013b22:	193a      	adds	r2, r7, r4
 8013b24:	6812      	ldr	r2, [r2, #0]
 8013b26:	1879      	adds	r1, r7, r1
 8013b28:	6808      	ldr	r0, [r1, #0]
 8013b2a:	210e      	movs	r1, #14
 8013b2c:	4798      	blx	r3
 8013b2e:	0003      	movs	r3, r0
 8013b30:	2184      	movs	r1, #132	@ 0x84
 8013b32:	187a      	adds	r2, r7, r1
 8013b34:	6013      	str	r3, [r2, #0]
                                    if (status != UX_SUCCESS)
 8013b36:	187b      	adds	r3, r7, r1
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d00e      	beq.n	8013b5c <_ux_device_stack_alternate_setting_set+0x390>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8013b3e:	193b      	adds	r3, r7, r4
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	2200      	movs	r2, #0
 8013b44:	601a      	str	r2, [r3, #0]
                                        return(status);
 8013b46:	187b      	adds	r3, r7, r1
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	e0c0      	b.n	8013cce <_ux_device_stack_alternate_setting_set+0x502>
 8013b4c:	2000adf0 	.word	0x2000adf0
 8013b50:	2000002c 	.word	0x2000002c
 8013b54:	20000034 	.word	0x20000034
 8013b58:	20000014 	.word	0x20000014
                                    if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 8013b5c:	22b4      	movs	r2, #180	@ 0xb4
 8013b5e:	18bb      	adds	r3, r7, r2
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d106      	bne.n	8013b76 <_ux_device_stack_alternate_setting_set+0x3aa>
                                        interface -> ux_slave_interface_first_endpoint =  endpoint;
 8013b68:	18bb      	adds	r3, r7, r2
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	22a8      	movs	r2, #168	@ 0xa8
 8013b6e:	18ba      	adds	r2, r7, r2
 8013b70:	6812      	ldr	r2, [r2, #0]
 8013b72:	635a      	str	r2, [r3, #52]	@ 0x34
                                    break;
 8013b74:	e022      	b.n	8013bbc <_ux_device_stack_alternate_setting_set+0x3f0>
                                        endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 8013b76:	23b4      	movs	r3, #180	@ 0xb4
 8013b78:	18fb      	adds	r3, r7, r3
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013b7e:	22a4      	movs	r2, #164	@ 0xa4
 8013b80:	18ba      	adds	r2, r7, r2
 8013b82:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8013b84:	e005      	b.n	8013b92 <_ux_device_stack_alternate_setting_set+0x3c6>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 8013b86:	22a4      	movs	r2, #164	@ 0xa4
 8013b88:	18bb      	adds	r3, r7, r2
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b8e:	18ba      	adds	r2, r7, r2
 8013b90:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8013b92:	22a4      	movs	r2, #164	@ 0xa4
 8013b94:	18bb      	adds	r3, r7, r2
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d1f3      	bne.n	8013b86 <_ux_device_stack_alternate_setting_set+0x3ba>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8013b9e:	18bb      	adds	r3, r7, r2
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	22a8      	movs	r2, #168	@ 0xa8
 8013ba4:	18ba      	adds	r2, r7, r2
 8013ba6:	6812      	ldr	r2, [r2, #0]
 8013ba8:	625a      	str	r2, [r3, #36]	@ 0x24
                                    break;
 8013baa:	e007      	b.n	8013bbc <_ux_device_stack_alternate_setting_set+0x3f0>
                                    device_framework_length =  descriptor_length;
 8013bac:	2390      	movs	r3, #144	@ 0x90
 8013bae:	18fb      	adds	r3, r7, r3
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	22ac      	movs	r2, #172	@ 0xac
 8013bb4:	18ba      	adds	r2, r7, r2
 8013bb6:	6013      	str	r3, [r2, #0]
                                    break;
 8013bb8:	e000      	b.n	8013bbc <_ux_device_stack_alternate_setting_set+0x3f0>
                                    break;
 8013bba:	46c0      	nop			@ (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 8013bbc:	21ac      	movs	r1, #172	@ 0xac
 8013bbe:	187b      	adds	r3, r7, r1
 8013bc0:	681a      	ldr	r2, [r3, #0]
 8013bc2:	2090      	movs	r0, #144	@ 0x90
 8013bc4:	183b      	adds	r3, r7, r0
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	1ad3      	subs	r3, r2, r3
 8013bca:	187a      	adds	r2, r7, r1
 8013bcc:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 8013bce:	21b0      	movs	r1, #176	@ 0xb0
 8013bd0:	187b      	adds	r3, r7, r1
 8013bd2:	681a      	ldr	r2, [r3, #0]
 8013bd4:	183b      	adds	r3, r7, r0
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	18d3      	adds	r3, r2, r3
 8013bda:	187a      	adds	r2, r7, r1
 8013bdc:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 8013bde:	23ac      	movs	r3, #172	@ 0xac
 8013be0:	18fb      	adds	r3, r7, r3
 8013be2:	681b      	ldr	r3, [r3, #0]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d000      	beq.n	8013bea <_ux_device_stack_alternate_setting_set+0x41e>
 8013be8:	e6ee      	b.n	80139c8 <_ux_device_stack_alternate_setting_set+0x1fc>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 8013bea:	24b4      	movs	r4, #180	@ 0xb4
 8013bec:	193b      	adds	r3, r7, r4
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	330c      	adds	r3, #12
 8013bf2:	2234      	movs	r2, #52	@ 0x34
 8013bf4:	18b9      	adds	r1, r7, r2
 8013bf6:	2224      	movs	r2, #36	@ 0x24
 8013bf8:	0018      	movs	r0, r3
 8013bfa:	f001 fb64 	bl	80152c6 <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 8013bfe:	4b36      	ldr	r3, [pc, #216]	@ (8013cd8 <_ux_device_stack_alternate_setting_set+0x50c>)
 8013c00:	681a      	ldr	r2, [r3, #0]
 8013c02:	193b      	adds	r3, r7, r4
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	695b      	ldr	r3, [r3, #20]
 8013c08:	3358      	adds	r3, #88	@ 0x58
 8013c0a:	009b      	lsls	r3, r3, #2
 8013c0c:	589b      	ldr	r3, [r3, r2]
 8013c0e:	2288      	movs	r2, #136	@ 0x88
 8013c10:	18b9      	adds	r1, r7, r2
 8013c12:	600b      	str	r3, [r1, #0]

                            /* Check if class driver is available. */
                            if (class == UX_NULL || class -> ux_slave_class_status == UX_UNUSED)
 8013c14:	18bb      	adds	r3, r7, r2
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d004      	beq.n	8013c26 <_ux_device_stack_alternate_setting_set+0x45a>
 8013c1c:	18bb      	adds	r3, r7, r2
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d101      	bne.n	8013c2a <_ux_device_stack_alternate_setting_set+0x45e>
                            {

                                return (UX_NO_CLASS_MATCH);
 8013c26:	2357      	movs	r3, #87	@ 0x57
 8013c28:	e051      	b.n	8013cce <_ux_device_stack_alternate_setting_set+0x502>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 8013c2a:	2008      	movs	r0, #8
 8013c2c:	183b      	adds	r3, r7, r0
 8013c2e:	2206      	movs	r2, #6
 8013c30:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface;
 8013c32:	183b      	adds	r3, r7, r0
 8013c34:	21b4      	movs	r1, #180	@ 0xb4
 8013c36:	187a      	adds	r2, r7, r1
 8013c38:	6812      	ldr	r2, [r2, #0]
 8013c3a:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class;
 8013c3c:	183b      	adds	r3, r7, r0
 8013c3e:	2488      	movs	r4, #136	@ 0x88
 8013c40:	193a      	adds	r2, r7, r4
 8013c42:	6812      	ldr	r2, [r2, #0]
 8013c44:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class -> ux_slave_class_interface = interface;
 8013c46:	193b      	adds	r3, r7, r4
 8013c48:	681a      	ldr	r2, [r3, #0]
 8013c4a:	2388      	movs	r3, #136	@ 0x88
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	1879      	adds	r1, r7, r1
 8013c50:	6809      	ldr	r1, [r1, #0]
 8013c52:	50d1      	str	r1, [r2, r3]
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class -> ux_slave_class_entry_function(&class_command);
 8013c54:	193b      	adds	r3, r7, r4
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013c5a:	183a      	adds	r2, r7, r0
 8013c5c:	0010      	movs	r0, r2
 8013c5e:	4798      	blx	r3
 8013c60:	0003      	movs	r3, r0
 8013c62:	2284      	movs	r2, #132	@ 0x84
 8013c64:	18b9      	adds	r1, r7, r2
 8013c66:	600b      	str	r3, [r1, #0]

                            /* We are done here.  */
                            return(status); 
 8013c68:	18bb      	adds	r3, r7, r2
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	e02f      	b.n	8013cce <_ux_device_stack_alternate_setting_set+0x502>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 8013c6e:	21ac      	movs	r1, #172	@ 0xac
 8013c70:	187b      	adds	r3, r7, r1
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	2090      	movs	r0, #144	@ 0x90
 8013c76:	183b      	adds	r3, r7, r0
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	1ad3      	subs	r3, r2, r3
 8013c7c:	187a      	adds	r2, r7, r1
 8013c7e:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 8013c80:	21b0      	movs	r1, #176	@ 0xb0
 8013c82:	187b      	adds	r3, r7, r1
 8013c84:	681a      	ldr	r2, [r3, #0]
 8013c86:	183b      	adds	r3, r7, r0
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	18d3      	adds	r3, r2, r3
 8013c8c:	187a      	adds	r2, r7, r1
 8013c8e:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 8013c90:	23ac      	movs	r3, #172	@ 0xac
 8013c92:	18fb      	adds	r3, r7, r3
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d000      	beq.n	8013c9c <_ux_device_stack_alternate_setting_set+0x4d0>
 8013c9a:	e61b      	b.n	80138d4 <_ux_device_stack_alternate_setting_set+0x108>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 8013c9c:	e016      	b.n	8013ccc <_ux_device_stack_alternate_setting_set+0x500>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8013c9e:	21ac      	movs	r1, #172	@ 0xac
 8013ca0:	187b      	adds	r3, r7, r1
 8013ca2:	681a      	ldr	r2, [r3, #0]
 8013ca4:	2090      	movs	r0, #144	@ 0x90
 8013ca6:	183b      	adds	r3, r7, r0
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	1ad3      	subs	r3, r2, r3
 8013cac:	187a      	adds	r2, r7, r1
 8013cae:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8013cb0:	21b0      	movs	r1, #176	@ 0xb0
 8013cb2:	187b      	adds	r3, r7, r1
 8013cb4:	681a      	ldr	r2, [r3, #0]
 8013cb6:	183b      	adds	r3, r7, r0
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	18d3      	adds	r3, r2, r3
 8013cbc:	187a      	adds	r2, r7, r1
 8013cbe:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 8013cc0:	23ac      	movs	r3, #172	@ 0xac
 8013cc2:	18fb      	adds	r3, r7, r3
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d000      	beq.n	8013ccc <_ux_device_stack_alternate_setting_set+0x500>
 8013cca:	e5d8      	b.n	801387e <_ux_device_stack_alternate_setting_set+0xb2>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 8013ccc:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 8013cce:	0018      	movs	r0, r3
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	b02f      	add	sp, #188	@ 0xbc
 8013cd4:	bd90      	pop	{r4, r7, pc}
 8013cd6:	46c0      	nop			@ (mov r8, r8)
 8013cd8:	2000adf0 	.word	0x2000adf0

08013cdc <_ux_device_stack_clear_feature>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b08a      	sub	sp, #40	@ 0x28
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	60f8      	str	r0, [r7, #12]
 8013ce4:	60b9      	str	r1, [r7, #8]
 8013ce6:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8013d98 <_ux_device_stack_clear_feature+0xbc>)
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013cee:	4b2a      	ldr	r3, [pc, #168]	@ (8013d98 <_ux_device_stack_clear_feature+0xbc>)
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	3320      	adds	r3, #32
 8013cf4:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8013cf6:	69bb      	ldr	r3, [r7, #24]
 8013cf8:	333c      	adds	r3, #60	@ 0x3c
 8013cfa:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	2203      	movs	r2, #3
 8013d00:	4013      	ands	r3, r2
 8013d02:	d002      	beq.n	8013d0a <_ux_device_stack_clear_feature+0x2e>
 8013d04:	2b02      	cmp	r3, #2
 8013d06:	d013      	beq.n	8013d30 <_ux_device_stack_clear_feature+0x54>
 8013d08:	e037      	b.n	8013d7a <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	2b01      	cmp	r3, #1
 8013d0e:	d13c      	bne.n	8013d8a <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8013d10:	4b21      	ldr	r3, [pc, #132]	@ (8013d98 <_ux_device_stack_clear_feature+0xbc>)
 8013d12:	681a      	ldr	r2, [r3, #0]
 8013d14:	23d4      	movs	r3, #212	@ 0xd4
 8013d16:	005b      	lsls	r3, r3, #1
 8013d18:	58d3      	ldr	r3, [r2, r3]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d006      	beq.n	8013d2c <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 8013d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8013d98 <_ux_device_stack_clear_feature+0xbc>)
 8013d20:	681a      	ldr	r2, [r3, #0]
 8013d22:	23d6      	movs	r3, #214	@ 0xd6
 8013d24:	005b      	lsls	r3, r3, #1
 8013d26:	2100      	movs	r1, #0
 8013d28:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 8013d2a:	e02e      	b.n	8013d8a <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 8013d2c:	2354      	movs	r3, #84	@ 0x54
 8013d2e:	e02e      	b.n	8013d8e <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 8013d30:	69bb      	ldr	r3, [r7, #24]
 8013d32:	22f0      	movs	r2, #240	@ 0xf0
 8013d34:	589b      	ldr	r3, [r3, r2]
 8013d36:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 8013d38:	e01c      	b.n	8013d74 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 8013d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013d3e:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8013d40:	e012      	b.n	8013d68 <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8013d42:	6a3b      	ldr	r3, [r7, #32]
 8013d44:	695b      	ldr	r3, [r3, #20]
 8013d46:	687a      	ldr	r2, [r7, #4]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d10a      	bne.n	8013d62 <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 8013d4c:	69fb      	ldr	r3, [r7, #28]
 8013d4e:	699b      	ldr	r3, [r3, #24]
 8013d50:	6a3a      	ldr	r2, [r7, #32]
 8013d52:	69f8      	ldr	r0, [r7, #28]
 8013d54:	2110      	movs	r1, #16
 8013d56:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8013d58:	6a3b      	ldr	r3, [r7, #32]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8013d5e:	2300      	movs	r3, #0
 8013d60:	e015      	b.n	8013d8e <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8013d62:	6a3b      	ldr	r3, [r7, #32]
 8013d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d66:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8013d68:	6a3b      	ldr	r3, [r7, #32]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d1e9      	bne.n	8013d42 <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8013d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d72:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface != UX_NULL)
 8013d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d1df      	bne.n	8013d3a <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	699b      	ldr	r3, [r3, #24]
 8013d7e:	697a      	ldr	r2, [r7, #20]
 8013d80:	69f8      	ldr	r0, [r7, #28]
 8013d82:	2114      	movs	r1, #20
 8013d84:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8013d86:	2300      	movs	r3, #0
 8013d88:	e001      	b.n	8013d8e <_ux_device_stack_clear_feature+0xb2>
        break;
 8013d8a:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 8013d8c:	2300      	movs	r3, #0
}
 8013d8e:	0018      	movs	r0, r3
 8013d90:	46bd      	mov	sp, r7
 8013d92:	b00a      	add	sp, #40	@ 0x28
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	46c0      	nop			@ (mov r8, r8)
 8013d98:	2000adf0 	.word	0x2000adf0

08013d9c <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 8013d9c:	b580      	push	{r7, lr}
 8013d9e:	b084      	sub	sp, #16
 8013da0:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013da2:	4b10      	ldr	r3, [pc, #64]	@ (8013de4 <_ux_device_stack_configuration_get+0x48>)
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	3320      	adds	r3, #32
 8013da8:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	333c      	adds	r3, #60	@ 0x3c
 8013dae:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	3330      	adds	r3, #48	@ 0x30
 8013db4:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	22cc      	movs	r2, #204	@ 0xcc
 8013dba:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 8013dc0:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 8013dc2:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2203      	movs	r2, #3
 8013dc8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2201      	movs	r2, #1
 8013dce:	2101      	movs	r1, #1
 8013dd0:	0018      	movs	r0, r3
 8013dd2:	f001 f959 	bl	8015088 <_ux_device_stack_transfer_request>
 8013dd6:	0003      	movs	r3, r0
 8013dd8:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 8013dda:	683b      	ldr	r3, [r7, #0]
}
 8013ddc:	0018      	movs	r0, r3
 8013dde:	46bd      	mov	sp, r7
 8013de0:	b004      	add	sp, #16
 8013de2:	bd80      	pop	{r7, pc}
 8013de4:	2000adf0 	.word	0x2000adf0

08013de8 <_ux_device_stack_configuration_set>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 8013de8:	b590      	push	{r4, r7, lr}
 8013dea:	b0ad      	sub	sp, #180	@ 0xb4
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 8013df0:	2358      	movs	r3, #88	@ 0x58
 8013df2:	18fb      	adds	r3, r7, r3
 8013df4:	0018      	movs	r0, r3
 8013df6:	2320      	movs	r3, #32
 8013df8:	001a      	movs	r2, r3
 8013dfa:	2100      	movs	r1, #0
 8013dfc:	f002 fbe0 	bl	80165c0 <memset>
UX_SLAVE_INTERFACE              *interface; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 8013e00:	2300      	movs	r3, #0
 8013e02:	229c      	movs	r2, #156	@ 0x9c
 8013e04:	18ba      	adds	r2, r7, r2
 8013e06:	6013      	str	r3, [r2, #0]
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 8013e08:	2300      	movs	r3, #0
 8013e0a:	2294      	movs	r2, #148	@ 0x94
 8013e0c:	18ba      	adds	r2, r7, r2
 8013e0e:	6013      	str	r3, [r2, #0]
ULONG                           iad_number_interfaces =  0;
 8013e10:	2300      	movs	r3, #0
 8013e12:	2290      	movs	r2, #144	@ 0x90
 8013e14:	18ba      	adds	r2, r7, r2
 8013e16:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8013e18:	4bd4      	ldr	r3, [pc, #848]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	2288      	movs	r2, #136	@ 0x88
 8013e1e:	18ba      	adds	r2, r7, r2
 8013e20:	6013      	str	r3, [r2, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8013e22:	4bd2      	ldr	r3, [pc, #840]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	3320      	adds	r3, #32
 8013e28:	2284      	movs	r2, #132	@ 0x84
 8013e2a:	18b9      	adds	r1, r7, r2
 8013e2c:	600b      	str	r3, [r1, #0]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 8013e2e:	2300      	movs	r3, #0
 8013e30:	2198      	movs	r1, #152	@ 0x98
 8013e32:	1879      	adds	r1, r7, r1
 8013e34:	600b      	str	r3, [r1, #0]

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 8013e36:	18bb      	adds	r3, r7, r2
 8013e38:	681b      	ldr	r3, [r3, #0]
 8013e3a:	22cc      	movs	r2, #204	@ 0xcc
 8013e3c:	589b      	ldr	r3, [r3, r2]
 8013e3e:	687a      	ldr	r2, [r7, #4]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d101      	bne.n	8013e48 <_ux_device_stack_configuration_set+0x60>
        return(UX_SUCCESS);
 8013e44:	2300      	movs	r3, #0
 8013e46:	e202      	b.n	801424e <_ux_device_stack_configuration_set+0x466>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 8013e48:	4bc8      	ldr	r3, [pc, #800]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8013e4a:	681a      	ldr	r2, [r3, #0]
 8013e4c:	2394      	movs	r3, #148	@ 0x94
 8013e4e:	005b      	lsls	r3, r3, #1
 8013e50:	58d3      	ldr	r3, [r2, r3]
 8013e52:	22ac      	movs	r2, #172	@ 0xac
 8013e54:	18ba      	adds	r2, r7, r2
 8013e56:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8013e58:	4bc4      	ldr	r3, [pc, #784]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8013e5a:	681a      	ldr	r2, [r3, #0]
 8013e5c:	2396      	movs	r3, #150	@ 0x96
 8013e5e:	005b      	lsls	r3, r3, #1
 8013e60:	58d3      	ldr	r3, [r2, r3]
 8013e62:	22a8      	movs	r2, #168	@ 0xa8
 8013e64:	18ba      	adds	r2, r7, r2
 8013e66:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 8013e68:	e02e      	b.n	8013ec8 <_ux_device_stack_configuration_set+0xe0>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8013e6a:	20ac      	movs	r0, #172	@ 0xac
 8013e6c:	183b      	adds	r3, r7, r0
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	781b      	ldrb	r3, [r3, #0]
 8013e72:	2280      	movs	r2, #128	@ 0x80
 8013e74:	18ba      	adds	r2, r7, r2
 8013e76:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8013e78:	217f      	movs	r1, #127	@ 0x7f
 8013e7a:	187b      	adds	r3, r7, r1
 8013e7c:	183a      	adds	r2, r7, r0
 8013e7e:	6812      	ldr	r2, [r2, #0]
 8013e80:	7852      	ldrb	r2, [r2, #1]
 8013e82:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 8013e84:	187b      	adds	r3, r7, r1
 8013e86:	781b      	ldrb	r3, [r3, #0]
 8013e88:	2b02      	cmp	r3, #2
 8013e8a:	d10c      	bne.n	8013ea6 <_ux_device_stack_configuration_set+0xbe>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 8013e8c:	2458      	movs	r4, #88	@ 0x58
 8013e8e:	193b      	adds	r3, r7, r4
 8013e90:	49b7      	ldr	r1, [pc, #732]	@ (8014170 <_ux_device_stack_configuration_set+0x388>)
 8013e92:	183a      	adds	r2, r7, r0
 8013e94:	6810      	ldr	r0, [r2, #0]
 8013e96:	2208      	movs	r2, #8
 8013e98:	f001 f9b7 	bl	801520a <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 8013e9c:	193b      	adds	r3, r7, r4
 8013e9e:	691b      	ldr	r3, [r3, #16]
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d016      	beq.n	8013ed4 <_ux_device_stack_configuration_set+0xec>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 8013ea6:	21a8      	movs	r1, #168	@ 0xa8
 8013ea8:	187b      	adds	r3, r7, r1
 8013eaa:	681a      	ldr	r2, [r3, #0]
 8013eac:	2080      	movs	r0, #128	@ 0x80
 8013eae:	183b      	adds	r3, r7, r0
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	1ad3      	subs	r3, r2, r3
 8013eb4:	187a      	adds	r2, r7, r1
 8013eb6:	6013      	str	r3, [r2, #0]
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 8013eb8:	21ac      	movs	r1, #172	@ 0xac
 8013eba:	187b      	adds	r3, r7, r1
 8013ebc:	681a      	ldr	r2, [r3, #0]
 8013ebe:	183b      	adds	r3, r7, r0
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	18d3      	adds	r3, r2, r3
 8013ec4:	187a      	adds	r2, r7, r1
 8013ec6:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 8013ec8:	23a8      	movs	r3, #168	@ 0xa8
 8013eca:	18fb      	adds	r3, r7, r3
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d1cb      	bne.n	8013e6a <_ux_device_stack_configuration_set+0x82>
 8013ed2:	e000      	b.n	8013ed6 <_ux_device_stack_configuration_set+0xee>
                break;
 8013ed4:	46c0      	nop			@ (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 8013ed6:	23a8      	movs	r3, #168	@ 0xa8
 8013ed8:	18fb      	adds	r3, r7, r3
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d104      	bne.n	8013eea <_ux_device_stack_configuration_set+0x102>
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d001      	beq.n	8013eea <_ux_device_stack_configuration_set+0x102>
        return(UX_ERROR);
 8013ee6:	23ff      	movs	r3, #255	@ 0xff
 8013ee8:	e1b1      	b.n	801424e <_ux_device_stack_configuration_set+0x466>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 8013eea:	2184      	movs	r1, #132	@ 0x84
 8013eec:	187b      	adds	r3, r7, r1
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	22cc      	movs	r2, #204	@ 0xcc
 8013ef2:	589b      	ldr	r3, [r3, r2]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d038      	beq.n	8013f6a <_ux_device_stack_configuration_set+0x182>
    {

        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 8013ef8:	187b      	adds	r3, r7, r1
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	22f0      	movs	r2, #240	@ 0xf0
 8013efe:	589b      	ldr	r3, [r3, r2]
 8013f00:	22a4      	movs	r2, #164	@ 0xa4
 8013f02:	18ba      	adds	r2, r7, r2
 8013f04:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface != UX_NULL)
 8013f06:	e02b      	b.n	8013f60 <_ux_device_stack_configuration_set+0x178>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 8013f08:	2108      	movs	r1, #8
 8013f0a:	187b      	adds	r3, r7, r1
 8013f0c:	2203      	movs	r2, #3
 8013f0e:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 8013f10:	187b      	adds	r3, r7, r1
 8013f12:	20a4      	movs	r0, #164	@ 0xa4
 8013f14:	183a      	adds	r2, r7, r0
 8013f16:	6812      	ldr	r2, [r2, #0]
 8013f18:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface -> ux_slave_interface_class;
 8013f1a:	183b      	adds	r3, r7, r0
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	685b      	ldr	r3, [r3, #4]
 8013f20:	22a0      	movs	r2, #160	@ 0xa0
 8013f22:	18b8      	adds	r0, r7, r2
 8013f24:	6003      	str	r3, [r0, #0]

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 8013f26:	187b      	adds	r3, r7, r1
 8013f28:	0010      	movs	r0, r2
 8013f2a:	18ba      	adds	r2, r7, r2
 8013f2c:	6812      	ldr	r2, [r2, #0]
 8013f2e:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 8013f30:	0002      	movs	r2, r0
 8013f32:	18bb      	adds	r3, r7, r2
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d005      	beq.n	8013f46 <_ux_device_stack_configuration_set+0x15e>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 8013f3a:	18bb      	adds	r3, r7, r2
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f40:	187a      	adds	r2, r7, r1
 8013f42:	0010      	movs	r0, r2
 8013f44:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 8013f46:	24a4      	movs	r4, #164	@ 0xa4
 8013f48:	193b      	adds	r3, r7, r4
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f4e:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 8013f50:	193b      	adds	r3, r7, r4
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	0018      	movs	r0, r3
 8013f56:	f000 fe31 	bl	8014bbc <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 8013f5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013f5c:	193a      	adds	r2, r7, r4
 8013f5e:	6013      	str	r3, [r2, #0]
        while (interface != UX_NULL)
 8013f60:	23a4      	movs	r3, #164	@ 0xa4
 8013f62:	18fb      	adds	r3, r7, r3
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d1ce      	bne.n	8013f08 <_ux_device_stack_configuration_set+0x120>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 8013f6a:	2084      	movs	r0, #132	@ 0x84
 8013f6c:	183b      	adds	r3, r7, r0
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	22cc      	movs	r2, #204	@ 0xcc
 8013f72:	2100      	movs	r1, #0
 8013f74:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8013f76:	183b      	adds	r3, r7, r0
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 8013f7e:	2288      	movs	r2, #136	@ 0x88
 8013f80:	18bb      	adds	r3, r7, r2
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	699b      	ldr	r3, [r3, #24]
 8013f86:	18ba      	adds	r2, r7, r2
 8013f88:	6810      	ldr	r0, [r2, #0]
 8013f8a:	2201      	movs	r2, #1
 8013f8c:	2113      	movs	r1, #19
 8013f8e:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d101      	bne.n	8013f9a <_ux_device_stack_configuration_set+0x1b2>
        return(UX_SUCCESS);
 8013f96:	2300      	movs	r3, #0
 8013f98:	e159      	b.n	801424e <_ux_device_stack_configuration_set+0x466>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 8013f9a:	2084      	movs	r0, #132	@ 0x84
 8013f9c:	183b      	adds	r3, r7, r0
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	21cc      	movs	r1, #204	@ 0xcc
 8013fa2:	687a      	ldr	r2, [r7, #4]
 8013fa4:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 8013fa6:	183b      	adds	r3, r7, r0
 8013fa8:	681b      	ldr	r3, [r3, #0]
 8013faa:	33d0      	adds	r3, #208	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
 8013fac:	4970      	ldr	r1, [pc, #448]	@ (8014170 <_ux_device_stack_configuration_set+0x388>)
 8013fae:	22ac      	movs	r2, #172	@ 0xac
 8013fb0:	18ba      	adds	r2, r7, r2
 8013fb2:	6810      	ldr	r0, [r2, #0]
 8013fb4:	2208      	movs	r2, #8
 8013fb6:	f001 f928 	bl	801520a <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 8013fba:	2358      	movs	r3, #88	@ 0x58
 8013fbc:	18fb      	adds	r3, r7, r3
 8013fbe:	699b      	ldr	r3, [r3, #24]
 8013fc0:	2240      	movs	r2, #64	@ 0x40
 8013fc2:	4013      	ands	r3, r2
 8013fc4:	d001      	beq.n	8013fca <_ux_device_stack_configuration_set+0x1e2>
 8013fc6:	2202      	movs	r2, #2
 8013fc8:	e000      	b.n	8013fcc <_ux_device_stack_configuration_set+0x1e4>
 8013fca:	2201      	movs	r2, #1
 8013fcc:	4b67      	ldr	r3, [pc, #412]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8013fce:	6819      	ldr	r1, [r3, #0]
 8013fd0:	23d2      	movs	r3, #210	@ 0xd2
 8013fd2:	005b      	lsls	r3, r3, #1
 8013fd4:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 8013fd6:	2058      	movs	r0, #88	@ 0x58
 8013fd8:	183b      	adds	r3, r7, r0
 8013fda:	699b      	ldr	r3, [r3, #24]
 8013fdc:	0959      	lsrs	r1, r3, #5
 8013fde:	4b63      	ldr	r3, [pc, #396]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8013fe0:	681a      	ldr	r2, [r3, #0]
 8013fe2:	2301      	movs	r3, #1
 8013fe4:	4019      	ands	r1, r3
 8013fe6:	23d4      	movs	r3, #212	@ 0xd4
 8013fe8:	005b      	lsls	r3, r3, #1
 8013fea:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 8013fec:	183b      	adds	r3, r7, r0
 8013fee:	689b      	ldr	r3, [r3, #8]
 8013ff0:	22a8      	movs	r2, #168	@ 0xa8
 8013ff2:	18ba      	adds	r2, r7, r2
 8013ff4:	6013      	str	r3, [r2, #0]

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 8013ff6:	e115      	b.n	8014224 <_ux_device_stack_configuration_set+0x43c>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8013ff8:	21ac      	movs	r1, #172	@ 0xac
 8013ffa:	187b      	adds	r3, r7, r1
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	2280      	movs	r2, #128	@ 0x80
 8014002:	18ba      	adds	r2, r7, r2
 8014004:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8014006:	207f      	movs	r0, #127	@ 0x7f
 8014008:	183b      	adds	r3, r7, r0
 801400a:	187a      	adds	r2, r7, r1
 801400c:	6812      	ldr	r2, [r2, #0]
 801400e:	7852      	ldrb	r2, [r2, #1]
 8014010:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 8014012:	183b      	adds	r3, r7, r0
 8014014:	781b      	ldrb	r3, [r3, #0]
 8014016:	2b0b      	cmp	r3, #11
 8014018:	d111      	bne.n	801403e <_ux_device_stack_configuration_set+0x256>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 801401a:	2301      	movs	r3, #1
 801401c:	2298      	movs	r2, #152	@ 0x98
 801401e:	18ba      	adds	r2, r7, r2
 8014020:	6013      	str	r3, [r2, #0]

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 8014022:	187b      	adds	r3, r7, r1
 8014024:	681b      	ldr	r3, [r3, #0]
 8014026:	3302      	adds	r3, #2
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	2294      	movs	r2, #148	@ 0x94
 801402c:	18ba      	adds	r2, r7, r2
 801402e:	6013      	str	r3, [r2, #0]

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 8014030:	187b      	adds	r3, r7, r1
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	3303      	adds	r3, #3
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	2290      	movs	r2, #144	@ 0x90
 801403a:	18ba      	adds	r2, r7, r2
 801403c:	6013      	str	r3, [r2, #0]
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 801403e:	237f      	movs	r3, #127	@ 0x7f
 8014040:	18fb      	adds	r3, r7, r3
 8014042:	781b      	ldrb	r3, [r3, #0]
 8014044:	2b04      	cmp	r3, #4
 8014046:	d000      	beq.n	801404a <_ux_device_stack_configuration_set+0x262>
 8014048:	e0db      	b.n	8014202 <_ux_device_stack_configuration_set+0x41a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 801404a:	2434      	movs	r4, #52	@ 0x34
 801404c:	193b      	adds	r3, r7, r4
 801404e:	4949      	ldr	r1, [pc, #292]	@ (8014174 <_ux_device_stack_configuration_set+0x38c>)
 8014050:	22ac      	movs	r2, #172	@ 0xac
 8014052:	18ba      	adds	r2, r7, r2
 8014054:	6810      	ldr	r0, [r2, #0]
 8014056:	2209      	movs	r2, #9
 8014058:	f001 f8d7 	bl	801520a <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 801405c:	0022      	movs	r2, r4
 801405e:	18bb      	adds	r3, r7, r2
 8014060:	68db      	ldr	r3, [r3, #12]
 8014062:	2b00      	cmp	r3, #0
 8014064:	d000      	beq.n	8014068 <_ux_device_stack_configuration_set+0x280>
 8014066:	e0cc      	b.n	8014202 <_ux_device_stack_configuration_set+0x41a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 8014068:	2398      	movs	r3, #152	@ 0x98
 801406a:	18fb      	adds	r3, r7, r3
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b01      	cmp	r3, #1
 8014070:	d16f      	bne.n	8014152 <_ux_device_stack_configuration_set+0x36a>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 8014072:	18bb      	adds	r3, r7, r2
 8014074:	689b      	ldr	r3, [r3, #8]
 8014076:	2294      	movs	r2, #148	@ 0x94
 8014078:	18ba      	adds	r2, r7, r2
 801407a:	6812      	ldr	r2, [r2, #0]
 801407c:	429a      	cmp	r2, r3
 801407e:	d14e      	bne.n	801411e <_ux_device_stack_configuration_set+0x336>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8014080:	4b3a      	ldr	r3, [pc, #232]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8014082:	681a      	ldr	r2, [r3, #0]
 8014084:	23ae      	movs	r3, #174	@ 0xae
 8014086:	005b      	lsls	r3, r3, #1
 8014088:	58d3      	ldr	r3, [r2, r3]
 801408a:	22a0      	movs	r2, #160	@ 0xa0
 801408c:	18ba      	adds	r2, r7, r2
 801408e:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Parse all the class drivers.  */
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8014090:	2300      	movs	r3, #0
 8014092:	228c      	movs	r2, #140	@ 0x8c
 8014094:	18ba      	adds	r2, r7, r2
 8014096:	6013      	str	r3, [r2, #0]
 8014098:	e036      	b.n	8014108 <_ux_device_stack_configuration_set+0x320>
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 801409a:	21a0      	movs	r1, #160	@ 0xa0
 801409c:	187b      	adds	r3, r7, r1
 801409e:	681b      	ldr	r3, [r3, #0]
 80140a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80140a2:	2b01      	cmp	r3, #1
 80140a4:	d123      	bne.n	80140ee <_ux_device_stack_configuration_set+0x306>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80140a6:	2434      	movs	r4, #52	@ 0x34
 80140a8:	193b      	adds	r3, r7, r4
 80140aa:	689a      	ldr	r2, [r3, #8]
 80140ac:	0008      	movs	r0, r1
 80140ae:	187b      	adds	r3, r7, r1
 80140b0:	6819      	ldr	r1, [r3, #0]
 80140b2:	2384      	movs	r3, #132	@ 0x84
 80140b4:	005b      	lsls	r3, r3, #1
 80140b6:	58cb      	ldr	r3, [r1, r3]
 80140b8:	429a      	cmp	r2, r3
 80140ba:	d118      	bne.n	80140ee <_ux_device_stack_configuration_set+0x306>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 80140bc:	0001      	movs	r1, r0
 80140be:	187b      	adds	r3, r7, r1
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	2386      	movs	r3, #134	@ 0x86
 80140c4:	005b      	lsls	r3, r3, #1
 80140c6:	58d3      	ldr	r3, [r2, r3]
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80140c8:	687a      	ldr	r2, [r7, #4]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d10f      	bne.n	80140ee <_ux_device_stack_configuration_set+0x306>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 80140ce:	4b27      	ldr	r3, [pc, #156]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	193b      	adds	r3, r7, r4
 80140d4:	689b      	ldr	r3, [r3, #8]
 80140d6:	3358      	adds	r3, #88	@ 0x58
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	0008      	movs	r0, r1
 80140dc:	1879      	adds	r1, r7, r1
 80140de:	6809      	ldr	r1, [r1, #0]
 80140e0:	5099      	str	r1, [r3, r2]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 80140e2:	183b      	adds	r3, r7, r0
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	229c      	movs	r2, #156	@ 0x9c
 80140e8:	18ba      	adds	r2, r7, r2
 80140ea:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                    /* We are done here.  */
                                    break;
 80140ec:	e022      	b.n	8014134 <_ux_device_stack_configuration_set+0x34c>
                                }
                            }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                            /* Move to the next registered class.  */
                            class_inst ++;
 80140ee:	22a0      	movs	r2, #160	@ 0xa0
 80140f0:	18bb      	adds	r3, r7, r2
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	3315      	adds	r3, #21
 80140f6:	33ff      	adds	r3, #255	@ 0xff
 80140f8:	18ba      	adds	r2, r7, r2
 80140fa:	6013      	str	r3, [r2, #0]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 80140fc:	228c      	movs	r2, #140	@ 0x8c
 80140fe:	18bb      	adds	r3, r7, r2
 8014100:	681b      	ldr	r3, [r3, #0]
 8014102:	3301      	adds	r3, #1
 8014104:	18ba      	adds	r2, r7, r2
 8014106:	6013      	str	r3, [r2, #0]
 8014108:	4b18      	ldr	r3, [pc, #96]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 801410a:	681a      	ldr	r2, [r3, #0]
 801410c:	23ac      	movs	r3, #172	@ 0xac
 801410e:	005b      	lsls	r3, r3, #1
 8014110:	58d3      	ldr	r3, [r2, r3]
 8014112:	228c      	movs	r2, #140	@ 0x8c
 8014114:	18ba      	adds	r2, r7, r2
 8014116:	6812      	ldr	r2, [r2, #0]
 8014118:	429a      	cmp	r2, r3
 801411a:	d3be      	bcc.n	801409a <_ux_device_stack_configuration_set+0x2b2>
 801411c:	e00a      	b.n	8014134 <_ux_device_stack_configuration_set+0x34c>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 801411e:	4b13      	ldr	r3, [pc, #76]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8014120:	681a      	ldr	r2, [r3, #0]
 8014122:	2334      	movs	r3, #52	@ 0x34
 8014124:	18fb      	adds	r3, r7, r3
 8014126:	689b      	ldr	r3, [r3, #8]
 8014128:	3358      	adds	r3, #88	@ 0x58
 801412a:	009b      	lsls	r3, r3, #2
 801412c:	219c      	movs	r1, #156	@ 0x9c
 801412e:	1879      	adds	r1, r7, r1
 8014130:	6809      	ldr	r1, [r1, #0]
 8014132:	5099      	str	r1, [r3, r2]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 8014134:	2290      	movs	r2, #144	@ 0x90
 8014136:	18bb      	adds	r3, r7, r2
 8014138:	681b      	ldr	r3, [r3, #0]
 801413a:	3b01      	subs	r3, #1
 801413c:	18b9      	adds	r1, r7, r2
 801413e:	600b      	str	r3, [r1, #0]

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 8014140:	18bb      	adds	r3, r7, r2
 8014142:	681b      	ldr	r3, [r3, #0]
 8014144:	2b00      	cmp	r3, #0
 8014146:	d152      	bne.n	80141ee <_ux_device_stack_configuration_set+0x406>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 8014148:	2300      	movs	r3, #0
 801414a:	2298      	movs	r2, #152	@ 0x98
 801414c:	18ba      	adds	r2, r7, r2
 801414e:	6013      	str	r3, [r2, #0]
 8014150:	e04d      	b.n	80141ee <_ux_device_stack_configuration_set+0x406>
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 8014152:	4b06      	ldr	r3, [pc, #24]	@ (801416c <_ux_device_stack_configuration_set+0x384>)
 8014154:	681a      	ldr	r2, [r3, #0]
 8014156:	23ae      	movs	r3, #174	@ 0xae
 8014158:	005b      	lsls	r3, r3, #1
 801415a:	58d3      	ldr	r3, [r2, r3]
 801415c:	22a0      	movs	r2, #160	@ 0xa0
 801415e:	18ba      	adds	r2, r7, r2
 8014160:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                    /* Parse all the class drivers.  */
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 8014162:	2300      	movs	r3, #0
 8014164:	228c      	movs	r2, #140	@ 0x8c
 8014166:	18ba      	adds	r2, r7, r2
 8014168:	6013      	str	r3, [r2, #0]
 801416a:	e036      	b.n	80141da <_ux_device_stack_configuration_set+0x3f2>
 801416c:	2000adf0 	.word	0x2000adf0
 8014170:	2000002c 	.word	0x2000002c
 8014174:	20000034 	.word	0x20000034
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 8014178:	21a0      	movs	r1, #160	@ 0xa0
 801417a:	187b      	adds	r3, r7, r1
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014180:	2b01      	cmp	r3, #1
 8014182:	d11d      	bne.n	80141c0 <_ux_device_stack_configuration_set+0x3d8>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 8014184:	2434      	movs	r4, #52	@ 0x34
 8014186:	193b      	adds	r3, r7, r4
 8014188:	689a      	ldr	r2, [r3, #8]
 801418a:	0008      	movs	r0, r1
 801418c:	187b      	adds	r3, r7, r1
 801418e:	6819      	ldr	r1, [r3, #0]
 8014190:	2384      	movs	r3, #132	@ 0x84
 8014192:	005b      	lsls	r3, r3, #1
 8014194:	58cb      	ldr	r3, [r1, r3]
 8014196:	429a      	cmp	r2, r3
 8014198:	d112      	bne.n	80141c0 <_ux_device_stack_configuration_set+0x3d8>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 801419a:	0001      	movs	r1, r0
 801419c:	187b      	adds	r3, r7, r1
 801419e:	681a      	ldr	r2, [r3, #0]
 80141a0:	2386      	movs	r3, #134	@ 0x86
 80141a2:	005b      	lsls	r3, r3, #1
 80141a4:	58d3      	ldr	r3, [r2, r3]
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 80141a6:	687a      	ldr	r2, [r7, #4]
 80141a8:	429a      	cmp	r2, r3
 80141aa:	d109      	bne.n	80141c0 <_ux_device_stack_configuration_set+0x3d8>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 80141ac:	4b2a      	ldr	r3, [pc, #168]	@ (8014258 <_ux_device_stack_configuration_set+0x470>)
 80141ae:	681a      	ldr	r2, [r3, #0]
 80141b0:	193b      	adds	r3, r7, r4
 80141b2:	689b      	ldr	r3, [r3, #8]
 80141b4:	3358      	adds	r3, #88	@ 0x58
 80141b6:	009b      	lsls	r3, r3, #2
 80141b8:	1879      	adds	r1, r7, r1
 80141ba:	6809      	ldr	r1, [r1, #0]
 80141bc:	5099      	str	r1, [r3, r2]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                /* We are done here.  */
                                break;
 80141be:	e016      	b.n	80141ee <_ux_device_stack_configuration_set+0x406>
                            }
                        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Move to the next registered class.  */
                        class_inst ++;
 80141c0:	22a0      	movs	r2, #160	@ 0xa0
 80141c2:	18bb      	adds	r3, r7, r2
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	3315      	adds	r3, #21
 80141c8:	33ff      	adds	r3, #255	@ 0xff
 80141ca:	18ba      	adds	r2, r7, r2
 80141cc:	6013      	str	r3, [r2, #0]
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 80141ce:	228c      	movs	r2, #140	@ 0x8c
 80141d0:	18bb      	adds	r3, r7, r2
 80141d2:	681b      	ldr	r3, [r3, #0]
 80141d4:	3301      	adds	r3, #1
 80141d6:	18ba      	adds	r2, r7, r2
 80141d8:	6013      	str	r3, [r2, #0]
 80141da:	4b1f      	ldr	r3, [pc, #124]	@ (8014258 <_ux_device_stack_configuration_set+0x470>)
 80141dc:	681a      	ldr	r2, [r3, #0]
 80141de:	23ac      	movs	r3, #172	@ 0xac
 80141e0:	005b      	lsls	r3, r3, #1
 80141e2:	58d3      	ldr	r3, [r2, r3]
 80141e4:	228c      	movs	r2, #140	@ 0x8c
 80141e6:	18ba      	adds	r2, r7, r2
 80141e8:	6812      	ldr	r2, [r2, #0]
 80141ea:	429a      	cmp	r2, r3
 80141ec:	d3c4      	bcc.n	8014178 <_ux_device_stack_configuration_set+0x390>
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 80141ee:	23a8      	movs	r3, #168	@ 0xa8
 80141f0:	18fb      	adds	r3, r7, r3
 80141f2:	6819      	ldr	r1, [r3, #0]
 80141f4:	23ac      	movs	r3, #172	@ 0xac
 80141f6:	18fb      	adds	r3, r7, r3
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	2200      	movs	r2, #0
 80141fc:	0018      	movs	r0, r3
 80141fe:	f000 fd25 	bl	8014c4c <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8014202:	21a8      	movs	r1, #168	@ 0xa8
 8014204:	187b      	adds	r3, r7, r1
 8014206:	681a      	ldr	r2, [r3, #0]
 8014208:	2080      	movs	r0, #128	@ 0x80
 801420a:	183b      	adds	r3, r7, r0
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	1ad3      	subs	r3, r2, r3
 8014210:	187a      	adds	r2, r7, r1
 8014212:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8014214:	21ac      	movs	r1, #172	@ 0xac
 8014216:	187b      	adds	r3, r7, r1
 8014218:	681a      	ldr	r2, [r3, #0]
 801421a:	183b      	adds	r3, r7, r0
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	18d3      	adds	r3, r2, r3
 8014220:	187a      	adds	r2, r7, r1
 8014222:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 8014224:	23a8      	movs	r3, #168	@ 0xa8
 8014226:	18fb      	adds	r3, r7, r3
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d000      	beq.n	8014230 <_ux_device_stack_configuration_set+0x448>
 801422e:	e6e3      	b.n	8013ff8 <_ux_device_stack_configuration_set+0x210>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 8014230:	2384      	movs	r3, #132	@ 0x84
 8014232:	18fb      	adds	r3, r7, r3
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	2203      	movs	r2, #3
 8014238:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 801423a:	2288      	movs	r2, #136	@ 0x88
 801423c:	18bb      	adds	r3, r7, r2
 801423e:	681b      	ldr	r3, [r3, #0]
 8014240:	699b      	ldr	r3, [r3, #24]
 8014242:	18ba      	adds	r2, r7, r2
 8014244:	6810      	ldr	r0, [r2, #0]
 8014246:	2203      	movs	r2, #3
 8014248:	2113      	movs	r1, #19
 801424a:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 801424c:	2300      	movs	r3, #0
}
 801424e:	0018      	movs	r0, r3
 8014250:	46bd      	mov	sp, r7
 8014252:	b02d      	add	sp, #180	@ 0xb4
 8014254:	bd90      	pop	{r4, r7, pc}
 8014256:	46c0      	nop			@ (mov r8, r8)
 8014258:	2000adf0 	.word	0x2000adf0

0801425c <_ux_device_stack_control_request_process>:
/*                                            added printer support,      */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 801425c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801425e:	b09d      	sub	sp, #116	@ 0x74
 8014260:	af02      	add	r7, sp, #8
 8014262:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 8014264:	23ff      	movs	r3, #255	@ 0xff
 8014266:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014268:	4ba1      	ldr	r3, [pc, #644]	@ (80144f0 <_ux_device_stack_control_request_process+0x294>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801426e:	4ba0      	ldr	r3, [pc, #640]	@ (80144f0 <_ux_device_stack_control_request_process+0x294>)
 8014270:	681b      	ldr	r3, [r3, #0]
 8014272:	3320      	adds	r3, #32
 8014274:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801427a:	2b00      	cmp	r3, #0
 801427c:	d000      	beq.n	8014280 <_ux_device_stack_control_request_process+0x24>
 801427e:	e132      	b.n	80144e6 <_ux_device_stack_control_request_process+0x28a>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	2254      	movs	r2, #84	@ 0x54
 8014284:	5c9b      	ldrb	r3, [r3, r2]
 8014286:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	2255      	movs	r2, #85	@ 0x55
 801428c:	5c9b      	ldrb	r3, [r3, r2]
 801428e:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	3354      	adds	r3, #84	@ 0x54
 8014294:	3302      	adds	r3, #2
 8014296:	0018      	movs	r0, r3
 8014298:	f001 f840 	bl	801531c <_ux_utility_short_get>
 801429c:	0003      	movs	r3, r0
 801429e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	3354      	adds	r3, #84	@ 0x54
 80142a4:	3304      	adds	r3, #4
 80142a6:	0018      	movs	r0, r3
 80142a8:	f001 f838 	bl	801531c <_ux_utility_short_get>
 80142ac:	0003      	movs	r3, r0
 80142ae:	64bb      	str	r3, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	3354      	adds	r3, #84	@ 0x54
 80142b4:	3306      	adds	r3, #6
 80142b6:	0018      	movs	r0, r3
 80142b8:	f001 f830 	bl	801531c <_ux_utility_short_get>
 80142bc:	0003      	movs	r3, r0
 80142be:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 80142c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142c2:	2b06      	cmp	r3, #6
 80142c4:	d002      	beq.n	80142cc <_ux_device_stack_control_request_process+0x70>
 80142c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80142c8:	2b07      	cmp	r3, #7
 80142ca:	d10c      	bne.n	80142e6 <_ux_device_stack_control_request_process+0x8a>
 80142cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142ce:	0a1b      	lsrs	r3, r3, #8
 80142d0:	2260      	movs	r2, #96	@ 0x60
 80142d2:	4013      	ands	r3, r2
 80142d4:	d007      	beq.n	80142e6 <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 80142d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80142d8:	2260      	movs	r2, #96	@ 0x60
 80142da:	4393      	bics	r3, r2
 80142dc:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 80142de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80142e0:	2220      	movs	r2, #32
 80142e2:	4313      	orrs	r3, r2
 80142e4:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 80142e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80142e8:	2260      	movs	r2, #96	@ 0x60
 80142ea:	4013      	ands	r3, r2
 80142ec:	2b40      	cmp	r3, #64	@ 0x40
 80142ee:	d139      	bne.n	8014364 <_ux_device_stack_control_request_process+0x108>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 80142f0:	4b7f      	ldr	r3, [pc, #508]	@ (80144f0 <_ux_device_stack_control_request_process+0x294>)
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	23e4      	movs	r3, #228	@ 0xe4
 80142f6:	005b      	lsls	r3, r3, #1
 80142f8:	58d3      	ldr	r3, [r2, r3]
 80142fa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d131      	bne.n	8014364 <_ux_device_stack_control_request_process+0x108>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8014300:	2380      	movs	r3, #128	@ 0x80
 8014302:	005b      	lsls	r3, r3, #1
 8014304:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 8014306:	4b7a      	ldr	r3, [pc, #488]	@ (80144f0 <_ux_device_stack_control_request_process+0x294>)
 8014308:	681a      	ldr	r2, [r3, #0]
 801430a:	23e6      	movs	r3, #230	@ 0xe6
 801430c:	005b      	lsls	r3, r3, #1
 801430e:	58d4      	ldr	r4, [r2, r3]
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
 8014316:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 8014318:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801431a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801431c:	220c      	movs	r2, #12
 801431e:	18ba      	adds	r2, r7, r2
 8014320:	9201      	str	r2, [sp, #4]
 8014322:	9300      	str	r3, [sp, #0]
 8014324:	0033      	movs	r3, r6
 8014326:	002a      	movs	r2, r5
 8014328:	47a0      	blx	r4
 801432a:	0003      	movs	r3, r0
 801432c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 801432e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014330:	2b00      	cmp	r3, #0
 8014332:	d110      	bne.n	8014356 <_ux_device_stack_control_request_process+0xfa>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 8014334:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014336:	333c      	adds	r3, #60	@ 0x3c
 8014338:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801433a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801433c:	3330      	adds	r3, #48	@ 0x30
 801433e:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2203      	movs	r2, #3
 8014344:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 8014346:	68f9      	ldr	r1, [r7, #12]
 8014348:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	0018      	movs	r0, r3
 801434e:	f000 fe9b 	bl	8015088 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 8014352:	2300      	movs	r3, #0
 8014354:	e0c8      	b.n	80144e8 <_ux_device_stack_control_request_process+0x28c>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 8014356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8014358:	333c      	adds	r3, #60	@ 0x3c
 801435a:	0018      	movs	r0, r3
 801435c:	f000 fb76 	bl	8014a4c <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 8014360:	2300      	movs	r3, #0
 8014362:	e0c1      	b.n	80144e8 <_ux_device_stack_control_request_process+0x28c>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8014364:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014366:	2260      	movs	r2, #96	@ 0x60
 8014368:	4013      	ands	r3, r2
 801436a:	2b20      	cmp	r3, #32
 801436c:	d004      	beq.n	8014378 <_ux_device_stack_control_request_process+0x11c>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 801436e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014370:	2260      	movs	r2, #96	@ 0x60
 8014372:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 8014374:	2b40      	cmp	r3, #64	@ 0x40
 8014376:	d150      	bne.n	801441a <_ux_device_stack_control_request_process+0x1be>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 8014378:	2310      	movs	r3, #16
 801437a:	18fb      	adds	r3, r7, r3
 801437c:	2204      	movs	r2, #4
 801437e:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 8014380:	2300      	movs	r3, #0
 8014382:	663b      	str	r3, [r7, #96]	@ 0x60
 8014384:	e03a      	b.n	80143fc <_ux_device_stack_control_request_process+0x1a0>
            {

                /* Get the class for the interface.  */
                class =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 8014386:	4b5a      	ldr	r3, [pc, #360]	@ (80144f0 <_ux_device_stack_control_request_process+0x294>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801438c:	3258      	adds	r2, #88	@ 0x58
 801438e:	0092      	lsls	r2, r2, #2
 8014390:	58d3      	ldr	r3, [r2, r3]
 8014392:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class == UX_NULL)
 8014394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014396:	2b00      	cmp	r3, #0
 8014398:	d02a      	beq.n	80143f0 <_ux_device_stack_control_request_process+0x194>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 801439a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801439c:	2203      	movs	r2, #3
 801439e:	4013      	ands	r3, r2
 80143a0:	2b01      	cmp	r3, #1
 80143a2:	d116      	bne.n	80143d2 <_ux_device_stack_control_request_process+0x176>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 80143a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80143a6:	22ff      	movs	r2, #255	@ 0xff
 80143a8:	4013      	ands	r3, r2
 80143aa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80143ac:	429a      	cmp	r2, r3
 80143ae:	d121      	bne.n	80143f4 <_ux_device_stack_control_request_process+0x198>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 80143b0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80143b2:	2388      	movs	r3, #136	@ 0x88
 80143b4:	005b      	lsls	r3, r3, #1
 80143b6:	58d3      	ldr	r3, [r2, r3]
 80143b8:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 80143ba:	2b07      	cmp	r3, #7
 80143bc:	d109      	bne.n	80143d2 <_ux_device_stack_control_request_process+0x176>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 80143be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d106      	bne.n	80143d2 <_ux_device_stack_control_request_process+0x176>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2259      	movs	r2, #89	@ 0x59
 80143c8:	5c9b      	ldrb	r3, [r3, r2]
 80143ca:	001a      	movs	r2, r3
                         (request == 0x00) &&
 80143cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80143ce:	4293      	cmp	r3, r2
 80143d0:	d110      	bne.n	80143f4 <_ux_device_stack_control_request_process+0x198>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class;
 80143d2:	2110      	movs	r1, #16
 80143d4:	187b      	adds	r3, r7, r1
 80143d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80143d8:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class -> ux_slave_class_entry_function(&class_command);
 80143da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80143de:	187a      	adds	r2, r7, r1
 80143e0:	0010      	movs	r0, r2
 80143e2:	4798      	blx	r3
 80143e4:	0003      	movs	r3, r0
 80143e6:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 80143e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d00a      	beq.n	8014404 <_ux_device_stack_control_request_process+0x1a8>
 80143ee:	e002      	b.n	80143f6 <_ux_device_stack_control_request_process+0x19a>
                    continue;
 80143f0:	46c0      	nop			@ (mov r8, r8)
 80143f2:	e000      	b.n	80143f6 <_ux_device_stack_control_request_process+0x19a>
                        continue;
 80143f4:	46c0      	nop			@ (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 80143f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80143f8:	3301      	adds	r3, #1
 80143fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80143fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80143fe:	2b0f      	cmp	r3, #15
 8014400:	d9c1      	bls.n	8014386 <_ux_device_stack_control_request_process+0x12a>
 8014402:	e000      	b.n	8014406 <_ux_device_stack_control_request_process+0x1aa>

                    /* We are done, break the loop!  */
                    break;
 8014404:	46c0      	nop			@ (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 8014406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014408:	2b00      	cmp	r3, #0
 801440a:	d004      	beq.n	8014416 <_ux_device_stack_control_request_process+0x1ba>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801440c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801440e:	333c      	adds	r3, #60	@ 0x3c
 8014410:	0018      	movs	r0, r3
 8014412:	f000 fb1b 	bl	8014a4c <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 8014416:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014418:	e066      	b.n	80144e8 <_ux_device_stack_control_request_process+0x28c>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 801441a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801441c:	2b0c      	cmp	r3, #12
 801441e:	d857      	bhi.n	80144d0 <_ux_device_stack_control_request_process+0x274>
 8014420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014422:	009a      	lsls	r2, r3, #2
 8014424:	4b33      	ldr	r3, [pc, #204]	@ (80144f4 <_ux_device_stack_control_request_process+0x298>)
 8014426:	18d3      	adds	r3, r2, r3
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 801442c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801442e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8014430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014432:	0018      	movs	r0, r3
 8014434:	f000 fb40 	bl	8014ab8 <_ux_device_stack_get_status>
 8014438:	0003      	movs	r3, r0
 801443a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801443c:	e04b      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 801443e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014440:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8014442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014444:	0018      	movs	r0, r3
 8014446:	f7ff fc49 	bl	8013cdc <_ux_device_stack_clear_feature>
 801444a:	0003      	movs	r3, r0
 801444c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801444e:	e042      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 8014450:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014452:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8014454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014456:	0018      	movs	r0, r3
 8014458:	f000 fd6e 	bl	8014f38 <_ux_device_stack_set_feature>
 801445c:	0003      	movs	r3, r0
 801445e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8014460:	e039      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 8014462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014466:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 8014468:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801446a:	699b      	ldr	r3, [r3, #24]
 801446c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801446e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8014470:	2111      	movs	r1, #17
 8014472:	4798      	blx	r3
 8014474:	0003      	movs	r3, r0
 8014476:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8014478:	e02d      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 801447a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801447c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801447e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014480:	0018      	movs	r0, r3
 8014482:	f000 f839 	bl	80144f8 <_ux_device_stack_descriptor_send>
 8014486:	0003      	movs	r3, r0
 8014488:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801448a:	e024      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 801448c:	2354      	movs	r3, #84	@ 0x54
 801448e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8014490:	e021      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 8014492:	f7ff fc83 	bl	8013d9c <_ux_device_stack_configuration_get>
 8014496:	0003      	movs	r3, r0
 8014498:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801449a:	e01c      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 801449c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801449e:	0018      	movs	r0, r3
 80144a0:	f7ff fca2 	bl	8013de8 <_ux_device_stack_configuration_set>
 80144a4:	0003      	movs	r3, r0
 80144a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80144a8:	e015      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 80144aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80144ac:	0018      	movs	r0, r3
 80144ae:	f7ff f94d 	bl	801374c <_ux_device_stack_alternate_setting_get>
 80144b2:	0003      	movs	r3, r0
 80144b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80144b6:	e00e      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 80144b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80144ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80144bc:	0011      	movs	r1, r2
 80144be:	0018      	movs	r0, r3
 80144c0:	f7ff f984 	bl	80137cc <_ux_device_stack_alternate_setting_set>
 80144c4:	0003      	movs	r3, r0
 80144c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80144c8:	e005      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 80144ca:	2300      	movs	r3, #0
 80144cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80144ce:	e002      	b.n	80144d6 <_ux_device_stack_control_request_process+0x27a>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 80144d0:	2354      	movs	r3, #84	@ 0x54
 80144d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80144d4:	46c0      	nop			@ (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 80144d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d004      	beq.n	80144e6 <_ux_device_stack_control_request_process+0x28a>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 80144dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144de:	333c      	adds	r3, #60	@ 0x3c
 80144e0:	0018      	movs	r0, r3
 80144e2:	f000 fab3 	bl	8014a4c <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 80144e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80144e8:	0018      	movs	r0, r3
 80144ea:	46bd      	mov	sp, r7
 80144ec:	b01b      	add	sp, #108	@ 0x6c
 80144ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80144f0:	2000adf0 	.word	0x2000adf0
 80144f4:	080168d8 	.word	0x080168d8

080144f8 <_ux_device_stack_descriptor_send>:
/*                                            added BOS support,          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 80144f8:	b590      	push	{r4, r7, lr}
 80144fa:	b0a3      	sub	sp, #140	@ 0x8c
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	60f8      	str	r0, [r7, #12]
 8014500:	60b9      	str	r1, [r7, #8]
 8014502:	607a      	str	r2, [r7, #4]
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length;
UINT                            status =  UX_ERROR;
 8014504:	23ff      	movs	r3, #255	@ 0xff
 8014506:	673b      	str	r3, [r7, #112]	@ 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014508:	4bde      	ldr	r3, [pc, #888]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801450e:	4bdd      	ldr	r3, [pc, #884]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	3320      	adds	r3, #32
 8014514:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8014516:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8014518:	333c      	adds	r3, #60	@ 0x3c
 801451a:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801451c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801451e:	3330      	adds	r3, #48	@ 0x30
 8014520:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8014522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014524:	2203      	movs	r2, #3
 8014526:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	22ff      	movs	r2, #255	@ 0xff
 801452c:	4013      	ands	r3, r2
 801452e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 8014530:	2300      	movs	r3, #0
 8014532:	2284      	movs	r2, #132	@ 0x84
 8014534:	18ba      	adds	r2, r7, r2
 8014536:	6013      	str	r3, [r2, #0]

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	0a1b      	lsrs	r3, r3, #8
 801453c:	b2db      	uxtb	r3, r3
 801453e:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8014544:	68fb      	ldr	r3, [r7, #12]
 8014546:	2b0f      	cmp	r3, #15
 8014548:	d900      	bls.n	801454c <_ux_device_stack_descriptor_send+0x54>
 801454a:	e20c      	b.n	8014966 <_ux_device_stack_descriptor_send+0x46e>
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	009a      	lsls	r2, r3, #2
 8014550:	4bcd      	ldr	r3, [pc, #820]	@ (8014888 <_ux_device_stack_descriptor_send+0x390>)
 8014552:	18d3      	adds	r3, r2, r3
 8014554:	681b      	ldr	r3, [r3, #0]
 8014556:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	2b12      	cmp	r3, #18
 801455c:	d901      	bls.n	8014562 <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 801455e:	2312      	movs	r3, #18
 8014560:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2b06      	cmp	r3, #6
 8014566:	d104      	bne.n	8014572 <_ux_device_stack_descriptor_send+0x7a>
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	2b0a      	cmp	r3, #10
 801456c:	d901      	bls.n	8014572 <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 801456e:	230a      	movs	r3, #10
 8014570:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 8014572:	68fb      	ldr	r3, [r7, #12]
 8014574:	2b09      	cmp	r3, #9
 8014576:	d104      	bne.n	8014582 <_ux_device_stack_descriptor_send+0x8a>
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	2b05      	cmp	r3, #5
 801457c:	d901      	bls.n	8014582 <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 801457e:	2305      	movs	r3, #5
 8014580:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8014582:	4bc0      	ldr	r3, [pc, #768]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 8014584:	681a      	ldr	r2, [r3, #0]
 8014586:	2394      	movs	r3, #148	@ 0x94
 8014588:	005b      	lsls	r3, r3, #1
 801458a:	58d3      	ldr	r3, [r2, r3]
 801458c:	2180      	movs	r1, #128	@ 0x80
 801458e:	187a      	adds	r2, r7, r1
 8014590:	6013      	str	r3, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 8014592:	4bbc      	ldr	r3, [pc, #752]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 8014594:	681a      	ldr	r2, [r3, #0]
 8014596:	2396      	movs	r3, #150	@ 0x96
 8014598:	005b      	lsls	r3, r3, #1
 801459a:	58d3      	ldr	r3, [r2, r3]
 801459c:	67bb      	str	r3, [r7, #120]	@ 0x78
        device_framework_end = device_framework + device_framework_length;
 801459e:	187b      	adds	r3, r7, r1
 80145a0:	681a      	ldr	r2, [r3, #0]
 80145a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80145a4:	18d3      	adds	r3, r2, r3
 80145a6:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 80145a8:	e029      	b.n	80145fe <_ux_device_stack_descriptor_send+0x106>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 80145aa:	2180      	movs	r1, #128	@ 0x80
 80145ac:	187b      	adds	r3, r7, r1
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	781b      	ldrb	r3, [r3, #0]
 80145b2:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 80145b4:	187b      	adds	r3, r7, r1
 80145b6:	681b      	ldr	r3, [r3, #0]
 80145b8:	3301      	adds	r3, #1
 80145ba:	781b      	ldrb	r3, [r3, #0]
 80145bc:	001a      	movs	r2, r3
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	4293      	cmp	r3, r2
 80145c2:	d111      	bne.n	80145e8 <_ux_device_stack_descriptor_send+0xf0>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 80145c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145c6:	68db      	ldr	r3, [r3, #12]
 80145c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80145ca:	1879      	adds	r1, r7, r1
 80145cc:	6809      	ldr	r1, [r1, #0]
 80145ce:	0018      	movs	r0, r3
 80145d0:	f000 fe79 	bl	80152c6 <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 80145d4:	687a      	ldr	r2, [r7, #4]
 80145d6:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80145d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80145da:	0018      	movs	r0, r3
 80145dc:	f000 fd54 	bl	8015088 <_ux_device_stack_transfer_request>
 80145e0:	0003      	movs	r3, r0
 80145e2:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 80145e4:	46c0      	nop			@ (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 80145e6:	e1c9      	b.n	801497c <_ux_device_stack_descriptor_send+0x484>
            device_framework_length -=  descriptor_length;
 80145e8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80145ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145ec:	1ad3      	subs	r3, r2, r3
 80145ee:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework +=  descriptor_length;
 80145f0:	2180      	movs	r1, #128	@ 0x80
 80145f2:	187b      	adds	r3, r7, r1
 80145f4:	681a      	ldr	r2, [r3, #0]
 80145f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145f8:	18d3      	adds	r3, r2, r3
 80145fa:	187a      	adds	r2, r7, r1
 80145fc:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 80145fe:	2380      	movs	r3, #128	@ 0x80
 8014600:	18fb      	adds	r3, r7, r3
 8014602:	681a      	ldr	r2, [r3, #0]
 8014604:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014606:	429a      	cmp	r2, r3
 8014608:	d3cf      	bcc.n	80145aa <_ux_device_stack_descriptor_send+0xb2>
        break;
 801460a:	e1b7      	b.n	801497c <_ux_device_stack_descriptor_send+0x484>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2b07      	cmp	r3, #7
 8014610:	d113      	bne.n	801463a <_ux_device_stack_descriptor_send+0x142>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8014612:	4b9c      	ldr	r3, [pc, #624]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 8014614:	681a      	ldr	r2, [r3, #0]
 8014616:	2398      	movs	r3, #152	@ 0x98
 8014618:	005b      	lsls	r3, r3, #1
 801461a:	58d3      	ldr	r3, [r2, r3]
 801461c:	2180      	movs	r1, #128	@ 0x80
 801461e:	187a      	adds	r2, r7, r1
 8014620:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 8014622:	4b98      	ldr	r3, [pc, #608]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 8014624:	681a      	ldr	r2, [r3, #0]
 8014626:	239a      	movs	r3, #154	@ 0x9a
 8014628:	005b      	lsls	r3, r3, #1
 801462a:	58d3      	ldr	r3, [r2, r3]
 801462c:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework_end = device_framework + device_framework_length;
 801462e:	187b      	adds	r3, r7, r1
 8014630:	681a      	ldr	r2, [r3, #0]
 8014632:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014634:	18d3      	adds	r3, r2, r3
 8014636:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014638:	e05b      	b.n	80146f2 <_ux_device_stack_descriptor_send+0x1fa>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801463a:	4b92      	ldr	r3, [pc, #584]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	2394      	movs	r3, #148	@ 0x94
 8014640:	005b      	lsls	r3, r3, #1
 8014642:	58d3      	ldr	r3, [r2, r3]
 8014644:	2180      	movs	r1, #128	@ 0x80
 8014646:	187a      	adds	r2, r7, r1
 8014648:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801464a:	4b8e      	ldr	r3, [pc, #568]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 801464c:	681a      	ldr	r2, [r3, #0]
 801464e:	2396      	movs	r3, #150	@ 0x96
 8014650:	005b      	lsls	r3, r3, #1
 8014652:	58d3      	ldr	r3, [r2, r3]
 8014654:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework_end = device_framework + device_framework_length;
 8014656:	187b      	adds	r3, r7, r1
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801465c:	18d3      	adds	r3, r2, r3
 801465e:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 8014660:	e047      	b.n	80146f2 <_ux_device_stack_descriptor_send+0x1fa>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 8014662:	2280      	movs	r2, #128	@ 0x80
 8014664:	18bb      	adds	r3, r7, r2
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	781b      	ldrb	r3, [r3, #0]
 801466a:	647b      	str	r3, [r7, #68]	@ 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	2b0f      	cmp	r3, #15
 8014670:	d113      	bne.n	801469a <_ux_device_stack_descriptor_send+0x1a2>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 8014672:	18bb      	adds	r3, r7, r2
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	3301      	adds	r3, #1
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	2b0f      	cmp	r3, #15
 801467c:	d12e      	bne.n	80146dc <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 801467e:	2414      	movs	r4, #20
 8014680:	193b      	adds	r3, r7, r4
 8014682:	4982      	ldr	r1, [pc, #520]	@ (801488c <_ux_device_stack_descriptor_send+0x394>)
 8014684:	18ba      	adds	r2, r7, r2
 8014686:	6810      	ldr	r0, [r2, #0]
 8014688:	2204      	movs	r2, #4
 801468a:	f000 fdbe 	bl	801520a <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 801468e:	193b      	adds	r3, r7, r4
 8014690:	689b      	ldr	r3, [r3, #8]
 8014692:	677b      	str	r3, [r7, #116]	@ 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 8014694:	2300      	movs	r3, #0
 8014696:	673b      	str	r3, [r7, #112]	@ 0x70
                    break;
 8014698:	e031      	b.n	80146fe <_ux_device_stack_descriptor_send+0x206>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801469a:	2080      	movs	r0, #128	@ 0x80
 801469c:	183b      	adds	r3, r7, r0
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	3301      	adds	r3, #1
 80146a2:	781b      	ldrb	r3, [r3, #0]
 80146a4:	2b02      	cmp	r3, #2
 80146a6:	d119      	bne.n	80146dc <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 80146a8:	2384      	movs	r3, #132	@ 0x84
 80146aa:	18fb      	adds	r3, r7, r3
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d10d      	bne.n	80146d0 <_ux_device_stack_descriptor_send+0x1d8>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 80146b4:	2424      	movs	r4, #36	@ 0x24
 80146b6:	193b      	adds	r3, r7, r4
 80146b8:	4975      	ldr	r1, [pc, #468]	@ (8014890 <_ux_device_stack_descriptor_send+0x398>)
 80146ba:	183a      	adds	r2, r7, r0
 80146bc:	6810      	ldr	r0, [r2, #0]
 80146be:	2208      	movs	r2, #8
 80146c0:	f000 fda3 	bl	801520a <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 80146c4:	193b      	adds	r3, r7, r4
 80146c6:	689b      	ldr	r3, [r3, #8]
 80146c8:	677b      	str	r3, [r7, #116]	@ 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 80146ca:	2300      	movs	r3, #0
 80146cc:	673b      	str	r3, [r7, #112]	@ 0x70
                        break;
 80146ce:	e016      	b.n	80146fe <_ux_device_stack_descriptor_send+0x206>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 80146d0:	2284      	movs	r2, #132	@ 0x84
 80146d2:	18bb      	adds	r3, r7, r2
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	3301      	adds	r3, #1
 80146d8:	18ba      	adds	r2, r7, r2
 80146da:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 80146dc:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80146de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146e0:	1ad3      	subs	r3, r2, r3
 80146e2:	67bb      	str	r3, [r7, #120]	@ 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 80146e4:	2180      	movs	r1, #128	@ 0x80
 80146e6:	187b      	adds	r3, r7, r1
 80146e8:	681a      	ldr	r2, [r3, #0]
 80146ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80146ec:	18d3      	adds	r3, r2, r3
 80146ee:	187a      	adds	r2, r7, r1
 80146f0:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 80146f2:	2380      	movs	r3, #128	@ 0x80
 80146f4:	18fb      	adds	r3, r7, r3
 80146f6:	681a      	ldr	r2, [r3, #0]
 80146f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80146fa:	429a      	cmp	r2, r3
 80146fc:	d3b1      	bcc.n	8014662 <_ux_device_stack_descriptor_send+0x16a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 80146fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014700:	2b00      	cmp	r3, #0
 8014702:	d000      	beq.n	8014706 <_ux_device_stack_descriptor_send+0x20e>
 8014704:	e137      	b.n	8014976 <_ux_device_stack_descriptor_send+0x47e>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 8014706:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	429a      	cmp	r2, r3
 801470c:	d202      	bcs.n	8014714 <_ux_device_stack_descriptor_send+0x21c>
                length =  target_descriptor_length;
 801470e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014710:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014712:	e001      	b.n	8014718 <_ux_device_stack_descriptor_send+0x220>
            else
                length =  host_length;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8014718:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801471a:	2380      	movs	r3, #128	@ 0x80
 801471c:	005b      	lsls	r3, r3, #1
 801471e:	429a      	cmp	r2, r3
 8014720:	d90d      	bls.n	801473e <_ux_device_stack_descriptor_send+0x246>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8014722:	2212      	movs	r2, #18
 8014724:	2109      	movs	r1, #9
 8014726:	2002      	movs	r0, #2
 8014728:	f000 fd34 	bl	8015194 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801472c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801472e:	699b      	ldr	r3, [r3, #24]
 8014730:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014732:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8014734:	2114      	movs	r1, #20
 8014736:	4798      	blx	r3
 8014738:	0003      	movs	r3, r0
 801473a:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 801473c:	e11e      	b.n	801497c <_ux_device_stack_descriptor_send+0x484>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801473e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014740:	68db      	ldr	r3, [r3, #12]
 8014742:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014744:	2180      	movs	r1, #128	@ 0x80
 8014746:	1879      	adds	r1, r7, r1
 8014748:	6809      	ldr	r1, [r1, #0]
 801474a:	0018      	movs	r0, r3
 801474c:	f000 fdbb 	bl	80152c6 <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 8014750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014752:	68db      	ldr	r3, [r3, #12]
 8014754:	3301      	adds	r3, #1
 8014756:	68fa      	ldr	r2, [r7, #12]
 8014758:	b2d2      	uxtb	r2, r2
 801475a:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801475c:	687a      	ldr	r2, [r7, #4]
 801475e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8014760:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014762:	0018      	movs	r0, r3
 8014764:	f000 fc90 	bl	8015088 <_ux_device_stack_transfer_request>
 8014768:	0003      	movs	r3, r0
 801476a:	673b      	str	r3, [r7, #112]	@ 0x70
        }
        break;
 801476c:	e103      	b.n	8014976 <_ux_device_stack_descriptor_send+0x47e>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 801476e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014770:	2b00      	cmp	r3, #0
 8014772:	d153      	bne.n	801481c <_ux_device_stack_descriptor_send+0x324>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8014774:	4b43      	ldr	r3, [pc, #268]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 8014776:	681a      	ldr	r2, [r3, #0]
 8014778:	23a6      	movs	r3, #166	@ 0xa6
 801477a:	005b      	lsls	r3, r3, #1
 801477c:	58d3      	ldr	r3, [r2, r3]
 801477e:	1c9a      	adds	r2, r3, #2
 8014780:	2380      	movs	r3, #128	@ 0x80
 8014782:	005b      	lsls	r3, r3, #1
 8014784:	429a      	cmp	r2, r3
 8014786:	d90d      	bls.n	80147a4 <_ux_device_stack_descriptor_send+0x2ac>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8014788:	2212      	movs	r2, #18
 801478a:	2109      	movs	r1, #9
 801478c:	2002      	movs	r0, #2
 801478e:	f000 fd01 	bl	8015194 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014792:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014794:	699b      	ldr	r3, [r3, #24]
 8014796:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014798:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801479a:	2114      	movs	r1, #20
 801479c:	4798      	blx	r3
 801479e:	0003      	movs	r3, r0
 80147a0:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 80147a2:	e0eb      	b.n	801497c <_ux_device_stack_descriptor_send+0x484>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80147a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80147a6:	68db      	ldr	r3, [r3, #12]
 80147a8:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 80147aa:	4b36      	ldr	r3, [pc, #216]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 80147ac:	681a      	ldr	r2, [r3, #0]
 80147ae:	23a6      	movs	r3, #166	@ 0xa6
 80147b0:	005b      	lsls	r3, r3, #1
 80147b2:	58d3      	ldr	r3, [r2, r3]
 80147b4:	b2db      	uxtb	r3, r3
 80147b6:	3302      	adds	r3, #2
 80147b8:	b2da      	uxtb	r2, r3
 80147ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147bc:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 80147be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147c0:	3301      	adds	r3, #1
 80147c2:	2203      	movs	r2, #3
 80147c4:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 80147c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80147c8:	1c98      	adds	r0, r3, #2
 80147ca:	4b2e      	ldr	r3, [pc, #184]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	23a4      	movs	r3, #164	@ 0xa4
 80147d0:	005b      	lsls	r3, r3, #1
 80147d2:	58d1      	ldr	r1, [r2, r3]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 80147d4:	4b2b      	ldr	r3, [pc, #172]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 80147d6:	681a      	ldr	r2, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 80147d8:	23a6      	movs	r3, #166	@ 0xa6
 80147da:	005b      	lsls	r3, r3, #1
 80147dc:	58d3      	ldr	r3, [r2, r3]
 80147de:	001a      	movs	r2, r3
 80147e0:	f000 fd71 	bl	80152c6 <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 80147e4:	4b27      	ldr	r3, [pc, #156]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 80147e6:	681a      	ldr	r2, [r3, #0]
 80147e8:	23a6      	movs	r3, #166	@ 0xa6
 80147ea:	005b      	lsls	r3, r3, #1
 80147ec:	58d3      	ldr	r3, [r2, r3]
 80147ee:	3302      	adds	r3, #2
 80147f0:	687a      	ldr	r2, [r7, #4]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d907      	bls.n	8014806 <_ux_device_stack_descriptor_send+0x30e>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 80147f6:	4b23      	ldr	r3, [pc, #140]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 80147f8:	681a      	ldr	r2, [r3, #0]
 80147fa:	23a6      	movs	r3, #166	@ 0xa6
 80147fc:	005b      	lsls	r3, r3, #1
 80147fe:	58d3      	ldr	r3, [r2, r3]
 8014800:	3302      	adds	r3, #2
 8014802:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014804:	e001      	b.n	801480a <_ux_device_stack_descriptor_send+0x312>
            else
                length =  host_length;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801480a:	687a      	ldr	r2, [r7, #4]
 801480c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801480e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014810:	0018      	movs	r0, r3
 8014812:	f000 fc39 	bl	8015088 <_ux_device_stack_transfer_request>
 8014816:	0003      	movs	r3, r0
 8014818:	673b      	str	r3, [r7, #112]	@ 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 801481a:	e0ae      	b.n	801497a <_ux_device_stack_descriptor_send+0x482>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 801481c:	4b19      	ldr	r3, [pc, #100]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 801481e:	681a      	ldr	r2, [r3, #0]
 8014820:	23a0      	movs	r3, #160	@ 0xa0
 8014822:	005b      	lsls	r3, r3, #1
 8014824:	58d3      	ldr	r3, [r2, r3]
 8014826:	66bb      	str	r3, [r7, #104]	@ 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 8014828:	4b16      	ldr	r3, [pc, #88]	@ (8014884 <_ux_device_stack_descriptor_send+0x38c>)
 801482a:	681a      	ldr	r2, [r3, #0]
 801482c:	23a2      	movs	r3, #162	@ 0xa2
 801482e:	005b      	lsls	r3, r3, #1
 8014830:	58d3      	ldr	r3, [r2, r3]
 8014832:	667b      	str	r3, [r7, #100]	@ 0x64
            while (string_framework_length != 0)
 8014834:	e088      	b.n	8014948 <_ux_device_stack_descriptor_send+0x450>
                if (_ux_utility_short_get(string_framework) == request_index)
 8014836:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014838:	0018      	movs	r0, r3
 801483a:	f000 fd6f 	bl	801531c <_ux_utility_short_get>
 801483e:	0002      	movs	r2, r0
 8014840:	68bb      	ldr	r3, [r7, #8]
 8014842:	4293      	cmp	r3, r2
 8014844:	d000      	beq.n	8014848 <_ux_device_stack_descriptor_send+0x350>
 8014846:	e070      	b.n	801492a <_ux_device_stack_descriptor_send+0x432>
                    if (*(string_framework + 2) == descriptor_index)
 8014848:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801484a:	3302      	adds	r3, #2
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	001a      	movs	r2, r3
 8014850:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014852:	4293      	cmp	r3, r2
 8014854:	d169      	bne.n	801492a <_ux_device_stack_descriptor_send+0x432>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8014856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014858:	3303      	adds	r3, #3
 801485a:	781b      	ldrb	r3, [r3, #0]
 801485c:	3301      	adds	r3, #1
 801485e:	005a      	lsls	r2, r3, #1
 8014860:	2380      	movs	r3, #128	@ 0x80
 8014862:	005b      	lsls	r3, r3, #1
 8014864:	429a      	cmp	r2, r3
 8014866:	dd15      	ble.n	8014894 <_ux_device_stack_descriptor_send+0x39c>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 8014868:	2212      	movs	r2, #18
 801486a:	2109      	movs	r1, #9
 801486c:	2002      	movs	r0, #2
 801486e:	f000 fc91 	bl	8015194 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014872:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014874:	699b      	ldr	r3, [r3, #24]
 8014876:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8014878:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801487a:	2114      	movs	r1, #20
 801487c:	4798      	blx	r3
 801487e:	0003      	movs	r3, r0
 8014880:	673b      	str	r3, [r7, #112]	@ 0x70
                            break;
 8014882:	e065      	b.n	8014950 <_ux_device_stack_descriptor_send+0x458>
 8014884:	2000adf0 	.word	0x2000adf0
 8014888:	0801690c 	.word	0x0801690c
 801488c:	20000040 	.word	0x20000040
 8014890:	2000002c 	.word	0x2000002c
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8014894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	64bb      	str	r3, [r7, #72]	@ 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 801489a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801489c:	3303      	adds	r3, #3
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	3301      	adds	r3, #1
 80148a2:	b2db      	uxtb	r3, r3
 80148a4:	18db      	adds	r3, r3, r3
 80148a6:	b2da      	uxtb	r2, r3
 80148a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148aa:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 80148ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80148ae:	3301      	adds	r3, #1
 80148b0:	2203      	movs	r2, #3
 80148b2:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 80148b4:	2300      	movs	r3, #0
 80148b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80148b8:	e015      	b.n	80148e6 <_ux_device_stack_descriptor_send+0x3ee>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 80148ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148bc:	3304      	adds	r3, #4
 80148be:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80148c0:	18d2      	adds	r2, r2, r3
 80148c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148c4:	3301      	adds	r3, #1
 80148c6:	005b      	lsls	r3, r3, #1
 80148c8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80148ca:	18cb      	adds	r3, r1, r3
 80148cc:	7812      	ldrb	r2, [r2, #0]
 80148ce:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 80148d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148d2:	3301      	adds	r3, #1
 80148d4:	005b      	lsls	r3, r3, #1
 80148d6:	3301      	adds	r3, #1
 80148d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80148da:	18d3      	adds	r3, r2, r3
 80148dc:	2200      	movs	r2, #0
 80148de:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 80148e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148e2:	3301      	adds	r3, #1
 80148e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80148e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80148e8:	3303      	adds	r3, #3
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	001a      	movs	r2, r3
 80148ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80148f0:	4293      	cmp	r3, r2
 80148f2:	d3e2      	bcc.n	80148ba <_ux_device_stack_descriptor_send+0x3c2>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 80148f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80148f6:	3303      	adds	r3, #3
 80148f8:	781b      	ldrb	r3, [r3, #0]
 80148fa:	3301      	adds	r3, #1
 80148fc:	005b      	lsls	r3, r3, #1
 80148fe:	001a      	movs	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	4293      	cmp	r3, r2
 8014904:	d906      	bls.n	8014914 <_ux_device_stack_descriptor_send+0x41c>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 8014906:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8014908:	3303      	adds	r3, #3
 801490a:	781b      	ldrb	r3, [r3, #0]
 801490c:	3301      	adds	r3, #1
 801490e:	005b      	lsls	r3, r3, #1
 8014910:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014912:	e001      	b.n	8014918 <_ux_device_stack_descriptor_send+0x420>
                            length =  host_length;
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	66fb      	str	r3, [r7, #108]	@ 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8014918:	687a      	ldr	r2, [r7, #4]
 801491a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801491c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801491e:	0018      	movs	r0, r3
 8014920:	f000 fbb2 	bl	8015088 <_ux_device_stack_transfer_request>
 8014924:	0003      	movs	r3, r0
 8014926:	673b      	str	r3, [r7, #112]	@ 0x70
                        break;
 8014928:	e012      	b.n	8014950 <_ux_device_stack_descriptor_send+0x458>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 801492a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801492c:	3303      	adds	r3, #3
 801492e:	781b      	ldrb	r3, [r3, #0]
 8014930:	001a      	movs	r2, r3
 8014932:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014934:	1a9b      	subs	r3, r3, r2
 8014936:	3b04      	subs	r3, #4
 8014938:	667b      	str	r3, [r7, #100]	@ 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 801493a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801493c:	3303      	adds	r3, #3
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	3304      	adds	r3, #4
 8014942:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014944:	18d3      	adds	r3, r2, r3
 8014946:	66bb      	str	r3, [r7, #104]	@ 0x68
            while (string_framework_length != 0)
 8014948:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801494a:	2b00      	cmp	r3, #0
 801494c:	d000      	beq.n	8014950 <_ux_device_stack_descriptor_send+0x458>
 801494e:	e772      	b.n	8014836 <_ux_device_stack_descriptor_send+0x33e>
            if (string_framework_length == 0)
 8014950:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8014952:	2b00      	cmp	r3, #0
 8014954:	d111      	bne.n	801497a <_ux_device_stack_descriptor_send+0x482>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014956:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014958:	699b      	ldr	r3, [r3, #24]
 801495a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801495c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801495e:	2114      	movs	r1, #20
 8014960:	4798      	blx	r3
                return(UX_ERROR);
 8014962:	23ff      	movs	r3, #255	@ 0xff
 8014964:	e00b      	b.n	801497e <_ux_device_stack_descriptor_send+0x486>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014968:	699b      	ldr	r3, [r3, #24]
 801496a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801496c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801496e:	2114      	movs	r1, #20
 8014970:	4798      	blx	r3
        return(UX_ERROR);
 8014972:	23ff      	movs	r3, #255	@ 0xff
 8014974:	e003      	b.n	801497e <_ux_device_stack_descriptor_send+0x486>
        break;
 8014976:	46c0      	nop			@ (mov r8, r8)
 8014978:	e000      	b.n	801497c <_ux_device_stack_descriptor_send+0x484>
        break;
 801497a:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 801497c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
}
 801497e:	0018      	movs	r0, r3
 8014980:	46bd      	mov	sp, r7
 8014982:	b023      	add	sp, #140	@ 0x8c
 8014984:	bd90      	pop	{r4, r7, pc}
 8014986:	46c0      	nop			@ (mov r8, r8)

08014988 <_ux_device_stack_disconnect>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b092      	sub	sp, #72	@ 0x48
 801498c:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 801498e:	23ff      	movs	r3, #255	@ 0xff
 8014990:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014992:	4b2d      	ldr	r3, [pc, #180]	@ (8014a48 <_ux_device_stack_disconnect+0xc0>)
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014998:	4b2b      	ldr	r3, [pc, #172]	@ (8014a48 <_ux_device_stack_disconnect+0xc0>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	3320      	adds	r3, #32
 801499e:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 80149a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	2b03      	cmp	r3, #3
 80149a6:	d127      	bne.n	80149f8 <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 80149a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149aa:	22f0      	movs	r2, #240	@ 0xf0
 80149ac:	589b      	ldr	r3, [r3, r2]
 80149ae:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface != UX_NULL)
 80149b0:	e01c      	b.n	80149ec <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 80149b2:	1d3b      	adds	r3, r7, #4
 80149b4:	2203      	movs	r2, #3
 80149b6:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 80149b8:	1d3b      	adds	r3, r7, #4
 80149ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80149bc:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class =  interface -> ux_slave_interface_class;
 80149be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80149c0:	685b      	ldr	r3, [r3, #4]
 80149c2:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class;
 80149c4:	1d3b      	adds	r3, r7, #4
 80149c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80149c8:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class != UX_NULL)
 80149ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d004      	beq.n	80149da <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class -> ux_slave_class_entry_function(&class_command);
 80149d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80149d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149d4:	1d3a      	adds	r2, r7, #4
 80149d6:	0010      	movs	r0, r2
 80149d8:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 80149da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80149dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149de:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 80149e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80149e2:	0018      	movs	r0, r3
 80149e4:	f000 f8ea 	bl	8014bbc <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 80149e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80149ea:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface != UX_NULL)
 80149ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80149ee:	2b00      	cmp	r3, #0
 80149f0:	d1df      	bne.n	80149b2 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 80149f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149f4:	2201      	movs	r2, #1
 80149f6:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 80149f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d108      	bne.n	8014a12 <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8014a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014a02:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 8014a04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014a06:	323c      	adds	r2, #60	@ 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 8014a08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8014a0a:	210f      	movs	r1, #15
 8014a0c:	4798      	blx	r3
 8014a0e:	0003      	movs	r3, r0
 8014a10:	643b      	str	r3, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 8014a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a14:	22cc      	movs	r2, #204	@ 0xcc
 8014a16:	2100      	movs	r1, #0
 8014a18:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 8014a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8014a20:	4b09      	ldr	r3, [pc, #36]	@ (8014a48 <_ux_device_stack_disconnect+0xc0>)
 8014a22:	681a      	ldr	r2, [r3, #0]
 8014a24:	23e2      	movs	r3, #226	@ 0xe2
 8014a26:	005b      	lsls	r3, r3, #1
 8014a28:	58d3      	ldr	r3, [r2, r3]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d006      	beq.n	8014a3c <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 8014a2e:	4b06      	ldr	r3, [pc, #24]	@ (8014a48 <_ux_device_stack_disconnect+0xc0>)
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	23e2      	movs	r3, #226	@ 0xe2
 8014a34:	005b      	lsls	r3, r3, #1
 8014a36:	58d3      	ldr	r3, [r2, r3]
 8014a38:	200a      	movs	r0, #10
 8014a3a:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 8014a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 8014a3e:	0018      	movs	r0, r3
 8014a40:	46bd      	mov	sp, r7
 8014a42:	b012      	add	sp, #72	@ 0x48
 8014a44:	bd80      	pop	{r7, pc}
 8014a46:	46c0      	nop			@ (mov r8, r8)
 8014a48:	2000adf0 	.word	0x2000adf0

08014a4c <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b088      	sub	sp, #32
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014a54:	4b17      	ldr	r3, [pc, #92]	@ (8014ab4 <_ux_device_stack_endpoint_stall+0x68>)
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 8014a5a:	23ff      	movs	r3, #255	@ 0xff
 8014a5c:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8014a5e:	f3ef 8310 	mrs	r3, PRIMASK
 8014a62:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8014a64:	b672      	cpsid	i
    return(primask_value);
 8014a66:	693b      	ldr	r3, [r7, #16]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 8014a68:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8014a6a:	4b12      	ldr	r3, [pc, #72]	@ (8014ab4 <_ux_device_stack_endpoint_stall+0x68>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	6a1b      	ldr	r3, [r3, #32]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	d013      	beq.n	8014a9c <_ux_device_stack_endpoint_stall+0x50>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 8014a78:	2b02      	cmp	r3, #2
 8014a7a:	d00f      	beq.n	8014a9c <_ux_device_stack_endpoint_stall+0x50>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014a7c:	69bb      	ldr	r3, [r7, #24]
 8014a7e:	699b      	ldr	r3, [r3, #24]
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	69b8      	ldr	r0, [r7, #24]
 8014a84:	2114      	movs	r1, #20
 8014a86:	4798      	blx	r3
 8014a88:	0003      	movs	r3, r0
 8014a8a:	61fb      	str	r3, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	699b      	ldr	r3, [r3, #24]
 8014a90:	2203      	movs	r2, #3
 8014a92:	4013      	ands	r3, r2
 8014a94:	d002      	beq.n	8014a9c <_ux_device_stack_endpoint_stall+0x50>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2202      	movs	r2, #2
 8014a9a:	605a      	str	r2, [r3, #4]
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	f383 8810 	msr	PRIMASK, r3
}
 8014aa6:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 8014aa8:	69fb      	ldr	r3, [r7, #28]
}
 8014aaa:	0018      	movs	r0, r3
 8014aac:	46bd      	mov	sp, r7
 8014aae:	b008      	add	sp, #32
 8014ab0:	bd80      	pop	{r7, pc}
 8014ab2:	46c0      	nop			@ (mov r8, r8)
 8014ab4:	2000adf0 	.word	0x2000adf0

08014ab8 <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b08a      	sub	sp, #40	@ 0x28
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	60f8      	str	r0, [r7, #12]
 8014ac0:	60b9      	str	r1, [r7, #8]
 8014ac2:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8014bb8 <_ux_device_stack_get_status+0x100>)
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014aca:	4b3b      	ldr	r3, [pc, #236]	@ (8014bb8 <_ux_device_stack_get_status+0x100>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	3320      	adds	r3, #32
 8014ad0:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8014ad2:	69fb      	ldr	r3, [r7, #28]
 8014ad4:	333c      	adds	r3, #60	@ 0x3c
 8014ad6:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014ad8:	69bb      	ldr	r3, [r7, #24]
 8014ada:	3330      	adds	r3, #48	@ 0x30
 8014adc:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 8014ade:	697b      	ldr	r3, [r7, #20]
 8014ae0:	68db      	ldr	r3, [r3, #12]
 8014ae2:	2200      	movs	r2, #0
 8014ae4:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 8014ae6:	697b      	ldr	r3, [r7, #20]
 8014ae8:	68db      	ldr	r3, [r3, #12]
 8014aea:	3301      	adds	r3, #1
 8014aec:	2200      	movs	r2, #0
 8014aee:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 8014af0:	2302      	movs	r3, #2
 8014af2:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2203      	movs	r2, #3
 8014af8:	4013      	ands	r3, r2
 8014afa:	d002      	beq.n	8014b02 <_ux_device_stack_get_status+0x4a>
 8014afc:	2b02      	cmp	r3, #2
 8014afe:	d024      	beq.n	8014b4a <_ux_device_stack_get_status+0x92>
 8014b00:	e03e      	b.n	8014b80 <_ux_device_stack_get_status+0xc8>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 8014b02:	68ba      	ldr	r2, [r7, #8]
 8014b04:	23f0      	movs	r3, #240	@ 0xf0
 8014b06:	021b      	lsls	r3, r3, #8
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d102      	bne.n	8014b12 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 8014b10:	e03e      	b.n	8014b90 <_ux_device_stack_get_status+0xd8>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 8014b12:	4b29      	ldr	r3, [pc, #164]	@ (8014bb8 <_ux_device_stack_get_status+0x100>)
 8014b14:	681a      	ldr	r2, [r3, #0]
 8014b16:	23d2      	movs	r3, #210	@ 0xd2
 8014b18:	005b      	lsls	r3, r3, #1
 8014b1a:	58d3      	ldr	r3, [r2, r3]
 8014b1c:	2b02      	cmp	r3, #2
 8014b1e:	d103      	bne.n	8014b28 <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	68db      	ldr	r3, [r3, #12]
 8014b24:	2201      	movs	r2, #1
 8014b26:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 8014b28:	4b23      	ldr	r3, [pc, #140]	@ (8014bb8 <_ux_device_stack_get_status+0x100>)
 8014b2a:	681a      	ldr	r2, [r3, #0]
 8014b2c:	23d6      	movs	r3, #214	@ 0xd6
 8014b2e:	005b      	lsls	r3, r3, #1
 8014b30:	58d3      	ldr	r3, [r2, r3]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d02c      	beq.n	8014b90 <_ux_device_stack_get_status+0xd8>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 8014b36:	697b      	ldr	r3, [r7, #20]
 8014b38:	68db      	ldr	r3, [r3, #12]
 8014b3a:	781a      	ldrb	r2, [r3, #0]
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	68db      	ldr	r3, [r3, #12]
 8014b40:	2102      	movs	r1, #2
 8014b42:	430a      	orrs	r2, r1
 8014b44:	b2d2      	uxtb	r2, r2
 8014b46:	701a      	strb	r2, [r3, #0]
        break;
 8014b48:	e022      	b.n	8014b90 <_ux_device_stack_get_status+0xd8>
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
#else

        /* This feature returns the halt state of a specific endpoint.  The endpoint address
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
 8014b4a:	6a3b      	ldr	r3, [r7, #32]
 8014b4c:	699b      	ldr	r3, [r3, #24]
 8014b4e:	68ba      	ldr	r2, [r7, #8]
 8014b50:	6a38      	ldr	r0, [r7, #32]
 8014b52:	2115      	movs	r1, #21
 8014b54:	4798      	blx	r3
 8014b56:	0003      	movs	r3, r0
 8014b58:	613b      	str	r3, [r7, #16]
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 8014b5a:	693b      	ldr	r3, [r7, #16]
 8014b5c:	2bff      	cmp	r3, #255	@ 0xff
 8014b5e:	d007      	beq.n	8014b70 <_ux_device_stack_get_status+0xb8>
        {

            if (status == UX_TRUE)
 8014b60:	693b      	ldr	r3, [r7, #16]
 8014b62:	2b01      	cmp	r3, #1
 8014b64:	d116      	bne.n	8014b94 <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 8014b66:	697b      	ldr	r3, [r7, #20]
 8014b68:	68db      	ldr	r3, [r3, #12]
 8014b6a:	2201      	movs	r2, #1
 8014b6c:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 8014b6e:	e011      	b.n	8014b94 <_ux_device_stack_get_status+0xdc>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014b70:	6a3b      	ldr	r3, [r7, #32]
 8014b72:	699b      	ldr	r3, [r3, #24]
 8014b74:	69ba      	ldr	r2, [r7, #24]
 8014b76:	6a38      	ldr	r0, [r7, #32]
 8014b78:	2114      	movs	r1, #20
 8014b7a:	4798      	blx	r3
            return(UX_SUCCESS);            
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	e016      	b.n	8014bae <_ux_device_stack_get_status+0xf6>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014b80:	6a3b      	ldr	r3, [r7, #32]
 8014b82:	699b      	ldr	r3, [r3, #24]
 8014b84:	69ba      	ldr	r2, [r7, #24]
 8014b86:	6a38      	ldr	r0, [r7, #32]
 8014b88:	2114      	movs	r1, #20
 8014b8a:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	e00e      	b.n	8014bae <_ux_device_stack_get_status+0xf6>
        break;
 8014b90:	46c0      	nop			@ (mov r8, r8)
 8014b92:	e000      	b.n	8014b96 <_ux_device_stack_get_status+0xde>
        break;
 8014b94:	46c0      	nop			@ (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8014b96:	697b      	ldr	r3, [r7, #20]
 8014b98:	2203      	movs	r2, #3
 8014b9a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 8014b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014b9e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014ba0:	697b      	ldr	r3, [r7, #20]
 8014ba2:	0018      	movs	r0, r3
 8014ba4:	f000 fa70 	bl	8015088 <_ux_device_stack_transfer_request>
 8014ba8:	0003      	movs	r3, r0
 8014baa:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 8014bac:	693b      	ldr	r3, [r7, #16]
}
 8014bae:	0018      	movs	r0, r3
 8014bb0:	46bd      	mov	sp, r7
 8014bb2:	b00a      	add	sp, #40	@ 0x28
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	46c0      	nop			@ (mov r8, r8)
 8014bb8:	2000adf0 	.word	0x2000adf0

08014bbc <_ux_device_stack_interface_delete>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b086      	sub	sp, #24
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014bc4:	4b20      	ldr	r3, [pc, #128]	@ (8014c48 <_ux_device_stack_interface_delete+0x8c>)
 8014bc6:	681b      	ldr	r3, [r3, #0]
 8014bc8:	3320      	adds	r3, #32
 8014bca:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014bd0:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 8014bd2:	e01c      	b.n	8014c0e <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014bdc:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 8014bde:	4b1a      	ldr	r3, [pc, #104]	@ (8014c48 <_ux_device_stack_interface_delete+0x8c>)
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	699b      	ldr	r3, [r3, #24]
 8014be8:	68fa      	ldr	r2, [r7, #12]
 8014bea:	68b8      	ldr	r0, [r7, #8]
 8014bec:	210f      	movs	r1, #15
 8014bee:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	2200      	movs	r2, #0
 8014bf4:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	2200      	movs	r2, #0
 8014bfa:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	625a      	str	r2, [r3, #36]	@ 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	2200      	movs	r2, #0
 8014c06:	629a      	str	r2, [r3, #40]	@ 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	62da      	str	r2, [r3, #44]	@ 0x2c
    while (next_endpoint != UX_NULL)
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d1df      	bne.n	8014bd4 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014c18:	693b      	ldr	r3, [r7, #16]
 8014c1a:	21f0      	movs	r1, #240	@ 0xf0
 8014c1c:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	2200      	movs	r2, #0
 8014c22:	605a      	str	r2, [r3, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	2200      	movs	r2, #0
 8014c28:	609a      	str	r2, [r3, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	631a      	str	r2, [r3, #48]	@ 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	2200      	movs	r2, #0
 8014c34:	635a      	str	r2, [r3, #52]	@ 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	2200      	movs	r2, #0
 8014c3a:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 8014c3c:	2300      	movs	r3, #0
}
 8014c3e:	0018      	movs	r0, r3
 8014c40:	46bd      	mov	sp, r7
 8014c42:	b006      	add	sp, #24
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	46c0      	nop			@ (mov r8, r8)
 8014c48:	2000adf0 	.word	0x2000adf0

08014c4c <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 8014c4c:	b580      	push	{r7, lr}
 8014c4e:	b092      	sub	sp, #72	@ 0x48
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	60f8      	str	r0, [r7, #12]
 8014c54:	60b9      	str	r1, [r7, #8]
 8014c56:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014c58:	4b86      	ldr	r3, [pc, #536]	@ (8014e74 <_ux_device_stack_interface_set+0x228>)
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014c5e:	4b85      	ldr	r3, [pc, #532]	@ (8014e74 <_ux_device_stack_interface_set+0x228>)
 8014c60:	681b      	ldr	r3, [r3, #0]
 8014c62:	3320      	adds	r3, #32
 8014c64:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface = device -> ux_slave_device_interfaces_pool;
 8014c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c68:	22f4      	movs	r2, #244	@ 0xf4
 8014c6a:	589b      	ldr	r3, [r3, r2]
 8014c6c:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 8014c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c70:	22f8      	movs	r2, #248	@ 0xf8
 8014c72:	589b      	ldr	r3, [r3, r2]
 8014c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 8014c76:	e009      	b.n	8014c8c <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface -> ux_slave_interface_status == UX_UNUSED)
 8014c78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d009      	beq.n	8014c94 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface++;
 8014c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014c82:	3338      	adds	r3, #56	@ 0x38
 8014c84:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 8014c86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c88:	3b01      	subs	r3, #1
 8014c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 8014c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d1f2      	bne.n	8014c78 <_ux_device_stack_interface_set+0x2c>
 8014c92:	e000      	b.n	8014c96 <_ux_device_stack_interface_set+0x4a>
            break;
 8014c94:	46c0      	nop			@ (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 8014c96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d101      	bne.n	8014ca0 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 8014c9c:	2312      	movs	r3, #18
 8014c9e:	e0e5      	b.n	8014e6c <_ux_device_stack_interface_set+0x220>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface -> ux_slave_interface_status = UX_USED;
 8014ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ca2:	2201      	movs	r2, #1
 8014ca4:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface -> ux_slave_interface_descriptor);
 8014ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ca8:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 8014caa:	4973      	ldr	r1, [pc, #460]	@ (8014e78 <_ux_device_stack_interface_set+0x22c>)
 8014cac:	68f8      	ldr	r0, [r7, #12]
 8014cae:	2209      	movs	r2, #9
 8014cb0:	f000 faab 	bl	801520a <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 8014cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cb6:	22f0      	movs	r2, #240	@ 0xf0
 8014cb8:	589b      	ldr	r3, [r3, r2]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d104      	bne.n	8014cc8 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface;
 8014cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cc0:	21f0      	movs	r1, #240	@ 0xf0
 8014cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014cc4:	505a      	str	r2, [r3, r1]
 8014cc6:	e00e      	b.n	8014ce6 <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 8014cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cca:	22f0      	movs	r2, #240	@ 0xf0
 8014ccc:	589b      	ldr	r3, [r3, r2]
 8014cce:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8014cd0:	e002      	b.n	8014cd8 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 8014cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014cd6:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 8014cd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d1f8      	bne.n	8014cd2 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface;
 8014ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ce4:	631a      	str	r2, [r3, #48]	@ 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	001a      	movs	r2, r3
 8014cec:	68bb      	ldr	r3, [r7, #8]
 8014cee:	1a9b      	subs	r3, r3, r2
 8014cf0:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 8014cf2:	68fb      	ldr	r3, [r7, #12]
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	001a      	movs	r2, r3
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	189b      	adds	r3, r3, r2
 8014cfc:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 8014cfe:	e0aa      	b.n	8014e56 <_ux_device_stack_interface_set+0x20a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 8014d06:	211b      	movs	r1, #27
 8014d08:	187b      	adds	r3, r7, r1
 8014d0a:	68fa      	ldr	r2, [r7, #12]
 8014d0c:	7852      	ldrb	r2, [r2, #1]
 8014d0e:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 8014d10:	187b      	adds	r3, r7, r1
 8014d12:	781b      	ldrb	r3, [r3, #0]
 8014d14:	2b05      	cmp	r3, #5
 8014d16:	d008      	beq.n	8014d2a <_ux_device_stack_interface_set+0xde>
 8014d18:	dd00      	ble.n	8014d1c <_ux_device_stack_interface_set+0xd0>
 8014d1a:	e093      	b.n	8014e44 <_ux_device_stack_interface_set+0x1f8>
 8014d1c:	2b02      	cmp	r3, #2
 8014d1e:	d100      	bne.n	8014d22 <_ux_device_stack_interface_set+0xd6>
 8014d20:	e088      	b.n	8014e34 <_ux_device_stack_interface_set+0x1e8>
 8014d22:	2b04      	cmp	r3, #4
 8014d24:	d100      	bne.n	8014d28 <_ux_device_stack_interface_set+0xdc>
 8014d26:	e085      	b.n	8014e34 <_ux_device_stack_interface_set+0x1e8>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 8014d28:	e08c      	b.n	8014e44 <_ux_device_stack_interface_set+0x1f8>
            endpoint = device -> ux_slave_device_endpoints_pool;
 8014d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d2c:	22fc      	movs	r2, #252	@ 0xfc
 8014d2e:	589b      	ldr	r3, [r3, r2]
 8014d30:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 8014d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d34:	2380      	movs	r3, #128	@ 0x80
 8014d36:	005b      	lsls	r3, r3, #1
 8014d38:	58d3      	ldr	r3, [r2, r3]
 8014d3a:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 8014d3c:	e00d      	b.n	8014d5a <_ux_device_stack_interface_set+0x10e>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 8014d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d103      	bne.n	8014d4e <_ux_device_stack_interface_set+0x102>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 8014d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d48:	2201      	movs	r2, #1
 8014d4a:	601a      	str	r2, [r3, #0]
                    break;
 8014d4c:	e008      	b.n	8014d60 <_ux_device_stack_interface_set+0x114>
                endpoint++;
 8014d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d50:	3390      	adds	r3, #144	@ 0x90
 8014d52:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 8014d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d56:	3b01      	subs	r3, #1
 8014d58:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 8014d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d1ee      	bne.n	8014d3e <_ux_device_stack_interface_set+0xf2>
            if (endpoints_pool_number == 0)
 8014d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d101      	bne.n	8014d6a <_ux_device_stack_interface_set+0x11e>
                return(UX_MEMORY_INSUFFICIENT);
 8014d66:	2312      	movs	r3, #18
 8014d68:	e080      	b.n	8014e6c <_ux_device_stack_interface_set+0x220>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 8014d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d6c:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 8014d6e:	4943      	ldr	r1, [pc, #268]	@ (8014e7c <_ux_device_stack_interface_set+0x230>)
 8014d70:	68f8      	ldr	r0, [r7, #12]
 8014d72:	2206      	movs	r2, #6
 8014d74:	f000 fa49 	bl	801520a <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8014d78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d7a:	3330      	adds	r3, #48	@ 0x30
 8014d7c:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8014d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d80:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 8014d82:	055b      	lsls	r3, r3, #21
 8014d84:	0d5b      	lsrs	r3, r3, #21
 8014d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8014d88:	4b3a      	ldr	r3, [pc, #232]	@ (8014e74 <_ux_device_stack_interface_set+0x228>)
 8014d8a:	681a      	ldr	r2, [r3, #0]
 8014d8c:	23d0      	movs	r3, #208	@ 0xd0
 8014d8e:	005b      	lsls	r3, r3, #1
 8014d90:	58d3      	ldr	r3, [r2, r3]
 8014d92:	2b02      	cmp	r3, #2
 8014d94:	d117      	bne.n	8014dc6 <_ux_device_stack_interface_set+0x17a>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 8014d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d98:	699b      	ldr	r3, [r3, #24]
 8014d9a:	2201      	movs	r2, #1
 8014d9c:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 8014d9e:	d012      	beq.n	8014dc6 <_ux_device_stack_interface_set+0x17a>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 8014da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014da2:	69da      	ldr	r2, [r3, #28]
 8014da4:	23c0      	movs	r3, #192	@ 0xc0
 8014da6:	015b      	lsls	r3, r3, #5
 8014da8:	4013      	ands	r3, r2
 8014daa:	613b      	str	r3, [r7, #16]
                if (n_trans)
 8014dac:	693b      	ldr	r3, [r7, #16]
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d009      	beq.n	8014dc6 <_ux_device_stack_interface_set+0x17a>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 8014db2:	693b      	ldr	r3, [r7, #16]
 8014db4:	0adb      	lsrs	r3, r3, #11
 8014db6:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 8014db8:	693b      	ldr	r3, [r7, #16]
 8014dba:	3301      	adds	r3, #1
 8014dbc:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 8014dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dc0:	693a      	ldr	r2, [r7, #16]
 8014dc2:	4353      	muls	r3, r2
 8014dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014dca:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014dd0:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	2201      	movs	r2, #1
 8014dd6:	4252      	negs	r2, r2
 8014dd8:	64da      	str	r2, [r3, #76]	@ 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface;
 8014dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ddc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014dde:	629a      	str	r2, [r3, #40]	@ 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 8014de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014de2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014de4:	62da      	str	r2, [r3, #44]	@ 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 8014de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014de8:	699b      	ldr	r3, [r3, #24]
 8014dea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014dee:	210e      	movs	r1, #14
 8014df0:	4798      	blx	r3
 8014df2:	0003      	movs	r3, r0
 8014df4:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 8014df6:	6a3b      	ldr	r3, [r7, #32]
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d004      	beq.n	8014e06 <_ux_device_stack_interface_set+0x1ba>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 8014dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dfe:	2200      	movs	r2, #0
 8014e00:	601a      	str	r2, [r3, #0]
                return(status);
 8014e02:	6a3b      	ldr	r3, [r7, #32]
 8014e04:	e032      	b.n	8014e6c <_ux_device_stack_interface_set+0x220>
            if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 8014e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d103      	bne.n	8014e16 <_ux_device_stack_interface_set+0x1ca>
                interface -> ux_slave_interface_first_endpoint =  endpoint;
 8014e0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e12:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8014e14:	e017      	b.n	8014e46 <_ux_device_stack_interface_set+0x1fa>
                endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 8014e16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014e1a:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8014e1c:	e002      	b.n	8014e24 <_ux_device_stack_interface_set+0x1d8>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 8014e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e22:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 8014e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d1f8      	bne.n	8014e1e <_ux_device_stack_interface_set+0x1d2>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 8014e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8014e30:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 8014e32:	e008      	b.n	8014e46 <_ux_device_stack_interface_set+0x1fa>
            status =  _ux_device_stack_interface_start(interface);
 8014e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e36:	0018      	movs	r0, r3
 8014e38:	f000 f822 	bl	8014e80 <_ux_device_stack_interface_start>
 8014e3c:	0003      	movs	r3, r0
 8014e3e:	623b      	str	r3, [r7, #32]
            return(status);
 8014e40:	6a3b      	ldr	r3, [r7, #32]
 8014e42:	e013      	b.n	8014e6c <_ux_device_stack_interface_set+0x220>
            break;
 8014e44:	46c0      	nop			@ (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 8014e46:	68ba      	ldr	r2, [r7, #8]
 8014e48:	69fb      	ldr	r3, [r7, #28]
 8014e4a:	1ad3      	subs	r3, r2, r3
 8014e4c:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 8014e4e:	68fa      	ldr	r2, [r7, #12]
 8014e50:	69fb      	ldr	r3, [r7, #28]
 8014e52:	18d3      	adds	r3, r2, r3
 8014e54:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d000      	beq.n	8014e5e <_ux_device_stack_interface_set+0x212>
 8014e5c:	e750      	b.n	8014d00 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface);
 8014e5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e60:	0018      	movs	r0, r3
 8014e62:	f000 f80d 	bl	8014e80 <_ux_device_stack_interface_start>
 8014e66:	0003      	movs	r3, r0
 8014e68:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 8014e6a:	6a3b      	ldr	r3, [r7, #32]
}
 8014e6c:	0018      	movs	r0, r3
 8014e6e:	46bd      	mov	sp, r7
 8014e70:	b012      	add	sp, #72	@ 0x48
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	2000adf0 	.word	0x2000adf0
 8014e78:	20000034 	.word	0x20000034
 8014e7c:	20000014 	.word	0x20000014

08014e80 <_ux_device_stack_interface_start>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface)
{
 8014e80:	b590      	push	{r4, r7, lr}
 8014e82:	b091      	sub	sp, #68	@ 0x44
 8014e84:	af00      	add	r7, sp, #0
 8014e86:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 8014e88:	4b2a      	ldr	r3, [pc, #168]	@ (8014f34 <_ux_device_stack_interface_start+0xb4>)
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	695b      	ldr	r3, [r3, #20]
 8014e90:	3358      	adds	r3, #88	@ 0x58
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	589b      	ldr	r3, [r3, r2]
 8014e96:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class == UX_NULL)
 8014e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d101      	bne.n	8014ea2 <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 8014e9e:	2357      	movs	r3, #87	@ 0x57
 8014ea0:	e044      	b.n	8014f2c <_ux_device_stack_interface_start+0xac>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014ea2:	4b24      	ldr	r3, [pc, #144]	@ (8014f34 <_ux_device_stack_interface_start+0xb4>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	3320      	adds	r3, #32
 8014ea8:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 8014eaa:	2008      	movs	r0, #8
 8014eac:	183b      	adds	r3, r7, r0
 8014eae:	2201      	movs	r2, #1
 8014eb0:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface;
 8014eb2:	183b      	adds	r3, r7, r0
 8014eb4:	687a      	ldr	r2, [r7, #4]
 8014eb6:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface -> ux_slave_interface_descriptor.bInterfaceClass;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6a1a      	ldr	r2, [r3, #32]
 8014ebc:	183b      	adds	r3, r7, r0
 8014ebe:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface -> ux_slave_interface_descriptor.bInterfaceSubClass;
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014ec4:	183b      	adds	r3, r7, r0
 8014ec6:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface -> ux_slave_interface_descriptor.bInterfaceProtocol;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014ecc:	183b      	adds	r3, r7, r0
 8014ece:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 8014ed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ed2:	6a1a      	ldr	r2, [r3, #32]
 8014ed4:	183b      	adds	r3, r7, r0
 8014ed6:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 8014ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014edc:	183b      	adds	r3, r7, r0
 8014ede:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class -> ux_slave_class_interface = interface;
 8014ee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014ee2:	2388      	movs	r3, #136	@ 0x88
 8014ee4:	005b      	lsls	r3, r3, #1
 8014ee6:	6879      	ldr	r1, [r7, #4]
 8014ee8:	50d1      	str	r1, [r2, r3]
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class -> ux_slave_class_entry_function(&class_command);
 8014eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014eee:	0004      	movs	r4, r0
 8014ef0:	183a      	adds	r2, r7, r0
 8014ef2:	0010      	movs	r0, r2
 8014ef4:	4798      	blx	r3
 8014ef6:	0003      	movs	r3, r0
 8014ef8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 8014efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d114      	bne.n	8014f2a <_ux_device_stack_interface_start+0xaa>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class;
 8014f00:	193b      	adds	r3, r7, r4
 8014f02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f04:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 8014f06:	193b      	adds	r3, r7, r4
 8014f08:	2202      	movs	r2, #2
 8014f0a:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class -> ux_slave_class_entry_function(&class_command);
 8014f0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f10:	193a      	adds	r2, r7, r4
 8014f12:	0010      	movs	r0, r2
 8014f14:	4798      	blx	r3
 8014f16:	0003      	movs	r3, r0
 8014f18:	637b      	str	r3, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 8014f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d102      	bne.n	8014f26 <_ux_device_stack_interface_start+0xa6>
            interface -> ux_slave_interface_class =  class;
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8014f24:	605a      	str	r2, [r3, #4]

        return(status); 
 8014f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f28:	e000      	b.n	8014f2c <_ux_device_stack_interface_start+0xac>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 8014f2a:	2357      	movs	r3, #87	@ 0x57
}
 8014f2c:	0018      	movs	r0, r3
 8014f2e:	46bd      	mov	sp, r7
 8014f30:	b011      	add	sp, #68	@ 0x44
 8014f32:	bd90      	pop	{r4, r7, pc}
 8014f34:	2000adf0 	.word	0x2000adf0

08014f38 <_ux_device_stack_set_feature>:
/*                                            supported device requests,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b08a      	sub	sp, #40	@ 0x28
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	60f8      	str	r0, [r7, #12]
 8014f40:	60b9      	str	r1, [r7, #8]
 8014f42:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014f44:	4b29      	ldr	r3, [pc, #164]	@ (8014fec <_ux_device_stack_set_feature+0xb4>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8014f4a:	4b28      	ldr	r3, [pc, #160]	@ (8014fec <_ux_device_stack_set_feature+0xb4>)
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	3320      	adds	r3, #32
 8014f50:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8014f52:	69bb      	ldr	r3, [r7, #24]
 8014f54:	333c      	adds	r3, #60	@ 0x3c
 8014f56:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2203      	movs	r2, #3
 8014f5c:	4013      	ands	r3, r2
 8014f5e:	d002      	beq.n	8014f66 <_ux_device_stack_set_feature+0x2e>
 8014f60:	2b02      	cmp	r3, #2
 8014f62:	d016      	beq.n	8014f92 <_ux_device_stack_set_feature+0x5a>
 8014f64:	e037      	b.n	8014fd6 <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	2b01      	cmp	r3, #1
 8014f6a:	d110      	bne.n	8014f8e <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 8014f6c:	4b1f      	ldr	r3, [pc, #124]	@ (8014fec <_ux_device_stack_set_feature+0xb4>)
 8014f6e:	681a      	ldr	r2, [r3, #0]
 8014f70:	23d4      	movs	r3, #212	@ 0xd4
 8014f72:	005b      	lsls	r3, r3, #1
 8014f74:	58d3      	ldr	r3, [r2, r3]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d007      	beq.n	8014f8a <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 8014f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8014fec <_ux_device_stack_set_feature+0xb4>)
 8014f7c:	681a      	ldr	r2, [r3, #0]
 8014f7e:	23d6      	movs	r3, #214	@ 0xd6
 8014f80:	005b      	lsls	r3, r3, #1
 8014f82:	2101      	movs	r1, #1
 8014f84:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 8014f86:	2300      	movs	r3, #0
 8014f88:	e02c      	b.n	8014fe4 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 8014f8a:	2354      	movs	r3, #84	@ 0x54
 8014f8c:	e02a      	b.n	8014fe4 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8014f8e:	2354      	movs	r3, #84	@ 0x54
 8014f90:	e028      	b.n	8014fe4 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 8014f92:	69bb      	ldr	r3, [r7, #24]
 8014f94:	22f0      	movs	r2, #240	@ 0xf0
 8014f96:	589b      	ldr	r3, [r3, r2]
 8014f98:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 8014f9a:	e019      	b.n	8014fd0 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 8014f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014fa0:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 8014fa2:	e00f      	b.n	8014fc4 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 8014fa4:	6a3b      	ldr	r3, [r7, #32]
 8014fa6:	695b      	ldr	r3, [r3, #20]
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	429a      	cmp	r2, r3
 8014fac:	d107      	bne.n	8014fbe <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 8014fae:	69fb      	ldr	r3, [r7, #28]
 8014fb0:	699b      	ldr	r3, [r3, #24]
 8014fb2:	6a3a      	ldr	r2, [r7, #32]
 8014fb4:	69f8      	ldr	r0, [r7, #28]
 8014fb6:	2114      	movs	r1, #20
 8014fb8:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 8014fba:	2300      	movs	r3, #0
 8014fbc:	e012      	b.n	8014fe4 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 8014fbe:	6a3b      	ldr	r3, [r7, #32]
 8014fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014fc2:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 8014fc4:	6a3b      	ldr	r3, [r7, #32]
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	d1ec      	bne.n	8014fa4 <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 8014fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014fce:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface != UX_NULL)
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d1e2      	bne.n	8014f9c <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8014fd6:	69fb      	ldr	r3, [r7, #28]
 8014fd8:	699b      	ldr	r3, [r3, #24]
 8014fda:	697a      	ldr	r2, [r7, #20]
 8014fdc:	69f8      	ldr	r0, [r7, #28]
 8014fde:	2114      	movs	r1, #20
 8014fe0:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 8014fe2:	2300      	movs	r3, #0
    }
}
 8014fe4:	0018      	movs	r0, r3
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	b00a      	add	sp, #40	@ 0x28
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	2000adf0 	.word	0x2000adf0

08014ff0 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b088      	sub	sp, #32
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8014ffa:	4b18      	ldr	r3, [pc, #96]	@ (801505c <_ux_device_stack_transfer_abort+0x6c>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	683a      	ldr	r2, [r7, #0]
 8015004:	625a      	str	r2, [r3, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8015006:	f3ef 8310 	mrs	r3, PRIMASK
 801500a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801500c:	b672      	cpsid	i
    return(primask_value);
 801500e:	697b      	ldr	r3, [r7, #20]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 8015010:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	2b01      	cmp	r3, #1
 8015018:	d114      	bne.n	8015044 <_ux_device_stack_transfer_abort+0x54>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 801501a:	69fb      	ldr	r3, [r7, #28]
 801501c:	699b      	ldr	r3, [r3, #24]
 801501e:	687a      	ldr	r2, [r7, #4]
 8015020:	69f8      	ldr	r0, [r7, #28]
 8015022:	210d      	movs	r1, #13
 8015024:	4798      	blx	r3
 8015026:	69bb      	ldr	r3, [r7, #24]
 8015028:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801502a:	693b      	ldr	r3, [r7, #16]
 801502c:	f383 8810 	msr	PRIMASK, r3
}
 8015030:	46c0      	nop			@ (mov r8, r8)

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2204      	movs	r2, #4
 8015036:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	3330      	adds	r3, #48	@ 0x30
 801503c:	0018      	movs	r0, r3
 801503e:	f000 f95e 	bl	80152fe <_ux_utility_semaphore_put>
 8015042:	e005      	b.n	8015050 <_ux_device_stack_transfer_abort+0x60>
 8015044:	69bb      	ldr	r3, [r7, #24]
 8015046:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	f383 8810 	msr	PRIMASK, r3
}
 801504e:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 8015050:	2300      	movs	r3, #0
}
 8015052:	0018      	movs	r0, r3
 8015054:	46bd      	mov	sp, r7
 8015056:	b008      	add	sp, #32
 8015058:	bd80      	pop	{r7, pc}
 801505a:	46c0      	nop			@ (mov r8, r8)
 801505c:	2000adf0 	.word	0x2000adf0

08015060 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b084      	sub	sp, #16
 8015064:	af00      	add	r7, sp, #0
 8015066:	6078      	str	r0, [r7, #4]
 8015068:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	3330      	adds	r3, #48	@ 0x30
 801506e:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 8015070:	683a      	ldr	r2, [r7, #0]
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	0011      	movs	r1, r2
 8015076:	0018      	movs	r0, r3
 8015078:	f7ff ffba 	bl	8014ff0 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801507c:	2300      	movs	r3, #0
}
 801507e:	0018      	movs	r0, r3
 8015080:	46bd      	mov	sp, r7
 8015082:	b004      	add	sp, #16
 8015084:	bd80      	pop	{r7, pc}
	...

08015088 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b08c      	sub	sp, #48	@ 0x30
 801508c:	af00      	add	r7, sp, #0
 801508e:	60f8      	str	r0, [r7, #12]
 8015090:	60b9      	str	r1, [r7, #8]
 8015092:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015098:	2b01      	cmp	r3, #1
 801509a:	d101      	bne.n	80150a0 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 801509c:	2300      	movs	r3, #0
 801509e:	e073      	b.n	8015188 <_ux_device_stack_transfer_request+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80150a0:	f3ef 8310 	mrs	r3, PRIMASK
 80150a4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80150a6:	b672      	cpsid	i
    return(primask_value);
 80150a8:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 80150aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 80150ac:	4b38      	ldr	r3, [pc, #224]	@ (8015190 <_ux_device_stack_transfer_request+0x108>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	6a1b      	ldr	r3, [r3, #32]
 80150b2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 80150b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150b6:	2b01      	cmp	r3, #1
 80150b8:	d005      	beq.n	80150c6 <_ux_device_stack_transfer_request+0x3e>
 80150ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150bc:	2b02      	cmp	r3, #2
 80150be:	d002      	beq.n	80150c6 <_ux_device_stack_transfer_request+0x3e>
            || (device_state == UX_DEVICE_CONFIGURED))
 80150c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150c2:	2b03      	cmp	r3, #3
 80150c4:	d114      	bne.n	80150f0 <_ux_device_stack_transfer_request+0x68>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	2201      	movs	r2, #1
 80150ca:	601a      	str	r2, [r3, #0]
 80150cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150ce:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	f383 8810 	msr	PRIMASK, r3
}
 80150d6:	46c0      	nop			@ (mov r8, r8)
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80150d8:	4b2d      	ldr	r3, [pc, #180]	@ (8015190 <_ux_device_stack_transfer_request+0x108>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 80150de:	68fb      	ldr	r3, [r7, #12]
 80150e0:	689b      	ldr	r3, [r3, #8]
 80150e2:	623b      	str	r3, [r7, #32]
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 80150e4:	6a3b      	ldr	r3, [r7, #32]
 80150e6:	699b      	ldr	r3, [r3, #24]
 80150e8:	2203      	movs	r2, #3
 80150ea:	4013      	ands	r3, r2
 80150ec:	d10b      	bne.n	8015106 <_ux_device_stack_transfer_request+0x7e>
 80150ee:	e01a      	b.n	8015126 <_ux_device_stack_transfer_request+0x9e>
 80150f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80150f2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80150f4:	693b      	ldr	r3, [r7, #16]
 80150f6:	f383 8810 	msr	PRIMASK, r3
}
 80150fa:	46c0      	nop			@ (mov r8, r8)
        return(UX_TRANSFER_NOT_READY);
 80150fc:	2325      	movs	r3, #37	@ 0x25
 80150fe:	e043      	b.n	8015188 <_ux_device_stack_transfer_request+0x100>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 8015100:	2064      	movs	r0, #100	@ 0x64
 8015102:	f000 f869 	bl	80151d8 <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 8015106:	6a3b      	ldr	r3, [r7, #32]
 8015108:	685b      	ldr	r3, [r3, #4]
 801510a:	2b02      	cmp	r3, #2
 801510c:	d0f8      	beq.n	8015100 <_ux_device_stack_transfer_request+0x78>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 801510e:	6a3b      	ldr	r3, [r7, #32]
 8015110:	695b      	ldr	r3, [r3, #20]
 8015112:	2280      	movs	r2, #128	@ 0x80
 8015114:	4013      	ands	r3, r2
 8015116:	d003      	beq.n	8015120 <_ux_device_stack_transfer_request+0x98>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8015118:	68fb      	ldr	r3, [r7, #12]
 801511a:	2203      	movs	r2, #3
 801511c:	629a      	str	r2, [r3, #40]	@ 0x28
 801511e:	e002      	b.n	8015126 <_ux_device_stack_transfer_request+0x9e>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	2202      	movs	r2, #2
 8015124:	629a      	str	r2, [r3, #40]	@ 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 8015126:	68fb      	ldr	r3, [r7, #12]
 8015128:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801512a:	2b03      	cmp	r3, #3
 801512c:	d113      	bne.n	8015156 <_ux_device_stack_transfer_request+0xce>
 801512e:	68bb      	ldr	r3, [r7, #8]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d010      	beq.n	8015156 <_ux_device_stack_transfer_request+0xce>
        (slave_length != 0) && (host_length != slave_length) && 
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	429a      	cmp	r2, r3
 801513a:	d00c      	beq.n	8015156 <_ux_device_stack_transfer_request+0xce>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 801513c:	6a3b      	ldr	r3, [r7, #32]
 801513e:	69da      	ldr	r2, [r3, #28]
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	0011      	movs	r1, r2
 8015144:	0018      	movs	r0, r3
 8015146:	f7f1 f9fb 	bl	8006540 <__aeabi_uidivmod>
 801514a:	1e0b      	subs	r3, r1, #0
        (slave_length != 0) && (host_length != slave_length) && 
 801514c:	d103      	bne.n	8015156 <_ux_device_stack_transfer_request+0xce>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	2201      	movs	r2, #1
 8015152:	651a      	str	r2, [r3, #80]	@ 0x50
 8015154:	e002      	b.n	801515c <_ux_device_stack_transfer_request+0xd4>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	2200      	movs	r2, #0
 801515a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801515c:	68fb      	ldr	r3, [r7, #12]
 801515e:	2200      	movs	r2, #0
 8015160:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	68ba      	ldr	r2, [r7, #8]
 8015166:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	68ba      	ldr	r2, [r7, #8]
 801516c:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 8015176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015178:	699b      	ldr	r3, [r3, #24]
 801517a:	68fa      	ldr	r2, [r7, #12]
 801517c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801517e:	210c      	movs	r1, #12
 8015180:	4798      	blx	r3
 8015182:	0003      	movs	r3, r0
 8015184:	61fb      	str	r3, [r7, #28]

    /* And return the status.  */
    return(status);
 8015186:	69fb      	ldr	r3, [r7, #28]

#endif
}
 8015188:	0018      	movs	r0, r3
 801518a:	46bd      	mov	sp, r7
 801518c:	b00c      	add	sp, #48	@ 0x30
 801518e:	bd80      	pop	{r7, pc}
 8015190:	2000adf0 	.word	0x2000adf0

08015194 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8015194:	b580      	push	{r7, lr}
 8015196:	b084      	sub	sp, #16
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 80151a0:	4b0c      	ldr	r3, [pc, #48]	@ (80151d4 <_ux_system_error_handler+0x40>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	651a      	str	r2, [r3, #80]	@ 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 80151a8:	4b0a      	ldr	r3, [pc, #40]	@ (80151d4 <_ux_system_error_handler+0x40>)
 80151aa:	681b      	ldr	r3, [r3, #0]
 80151ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80151ae:	3201      	adds	r2, #1
 80151b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 80151b2:	4b08      	ldr	r3, [pc, #32]	@ (80151d4 <_ux_system_error_handler+0x40>)
 80151b4:	681b      	ldr	r3, [r3, #0]
 80151b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d006      	beq.n	80151ca <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 80151bc:	4b05      	ldr	r3, [pc, #20]	@ (80151d4 <_ux_system_error_handler+0x40>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80151c2:	687a      	ldr	r2, [r7, #4]
 80151c4:	68b9      	ldr	r1, [r7, #8]
 80151c6:	68f8      	ldr	r0, [r7, #12]
 80151c8:	4798      	blx	r3
    }
}
 80151ca:	46c0      	nop			@ (mov r8, r8)
 80151cc:	46bd      	mov	sp, r7
 80151ce:	b004      	add	sp, #16
 80151d0:	bd80      	pop	{r7, pc}
 80151d2:	46c0      	nop			@ (mov r8, r8)
 80151d4:	2000adf4 	.word	0x2000adf4

080151d8 <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b084      	sub	sp, #16
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	2264      	movs	r2, #100	@ 0x64
 80151e4:	4353      	muls	r3, r2
 80151e6:	22fa      	movs	r2, #250	@ 0xfa
 80151e8:	0091      	lsls	r1, r2, #2
 80151ea:	0018      	movs	r0, r3
 80151ec:	f7f1 f922 	bl	8006434 <__udivsi3>
 80151f0:	0003      	movs	r3, r0
 80151f2:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 80151f4:	68fb      	ldr	r3, [r7, #12]
 80151f6:	3301      	adds	r3, #1
 80151f8:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 80151fa:	68fb      	ldr	r3, [r7, #12]
 80151fc:	0018      	movs	r0, r3
 80151fe:	f7fd f873 	bl	80122e8 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 8015202:	46c0      	nop			@ (mov r8, r8)
}
 8015204:	46bd      	mov	sp, r7
 8015206:	b004      	add	sp, #16
 8015208:	bd80      	pop	{r7, pc}

0801520a <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 801520a:	b580      	push	{r7, lr}
 801520c:	b084      	sub	sp, #16
 801520e:	af00      	add	r7, sp, #0
 8015210:	60f8      	str	r0, [r7, #12]
 8015212:	60b9      	str	r1, [r7, #8]
 8015214:	607a      	str	r2, [r7, #4]
 8015216:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 8015218:	e028      	b.n	801526c <_ux_utility_descriptor_parse+0x62>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 801521a:	68bb      	ldr	r3, [r7, #8]
 801521c:	1c5a      	adds	r2, r3, #1
 801521e:	60ba      	str	r2, [r7, #8]
 8015220:	781b      	ldrb	r3, [r3, #0]
 8015222:	2b02      	cmp	r3, #2
 8015224:	d00c      	beq.n	8015240 <_ux_utility_descriptor_parse+0x36>
 8015226:	2b04      	cmp	r3, #4
 8015228:	d115      	bne.n	8015256 <_ux_utility_descriptor_parse+0x4c>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	0018      	movs	r0, r3
 801522e:	f000 f826 	bl	801527e <_ux_utility_long_get>
 8015232:	0002      	movs	r2, r0
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	3304      	adds	r3, #4
 801523c:	60fb      	str	r3, [r7, #12]
            break;                   
 801523e:	e012      	b.n	8015266 <_ux_utility_descriptor_parse+0x5c>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	0018      	movs	r0, r3
 8015244:	f000 f86a 	bl	801531c <_ux_utility_short_get>
 8015248:	0002      	movs	r2, r0
 801524a:	683b      	ldr	r3, [r7, #0]
 801524c:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	3302      	adds	r3, #2
 8015252:	60fb      	str	r3, [r7, #12]
            break;                   
 8015254:	e007      	b.n	8015266 <_ux_utility_descriptor_parse+0x5c>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 8015256:	68fb      	ldr	r3, [r7, #12]
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	001a      	movs	r2, r3
 801525c:	683b      	ldr	r3, [r7, #0]
 801525e:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	3301      	adds	r3, #1
 8015264:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 8015266:	683b      	ldr	r3, [r7, #0]
 8015268:	3304      	adds	r3, #4
 801526a:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	1e5a      	subs	r2, r3, #1
 8015270:	607a      	str	r2, [r7, #4]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d1d1      	bne.n	801521a <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 8015276:	46c0      	nop			@ (mov r8, r8)
}
 8015278:	46bd      	mov	sp, r7
 801527a:	b004      	add	sp, #16
 801527c:	bd80      	pop	{r7, pc}

0801527e <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 801527e:	b580      	push	{r7, lr}
 8015280:	b084      	sub	sp, #16
 8015282:	af00      	add	r7, sp, #0
 8015284:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	1c5a      	adds	r2, r3, #1
 801528a:	607a      	str	r2, [r7, #4]
 801528c:	781b      	ldrb	r3, [r3, #0]
 801528e:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	1c5a      	adds	r2, r3, #1
 8015294:	607a      	str	r2, [r7, #4]
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	021b      	lsls	r3, r3, #8
 801529a:	68fa      	ldr	r2, [r7, #12]
 801529c:	4313      	orrs	r3, r2
 801529e:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	1c5a      	adds	r2, r3, #1
 80152a4:	607a      	str	r2, [r7, #4]
 80152a6:	781b      	ldrb	r3, [r3, #0]
 80152a8:	041b      	lsls	r3, r3, #16
 80152aa:	68fa      	ldr	r2, [r7, #12]
 80152ac:	4313      	orrs	r3, r2
 80152ae:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	781b      	ldrb	r3, [r3, #0]
 80152b4:	061b      	lsls	r3, r3, #24
 80152b6:	68fa      	ldr	r2, [r7, #12]
 80152b8:	4313      	orrs	r3, r2
 80152ba:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 80152bc:	68fb      	ldr	r3, [r7, #12]
}
 80152be:	0018      	movs	r0, r3
 80152c0:	46bd      	mov	sp, r7
 80152c2:	b004      	add	sp, #16
 80152c4:	bd80      	pop	{r7, pc}

080152c6 <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 80152c6:	b580      	push	{r7, lr}
 80152c8:	b086      	sub	sp, #24
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	60f8      	str	r0, [r7, #12]
 80152ce:	60b9      	str	r1, [r7, #8]
 80152d0:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 80152da:	e007      	b.n	80152ec <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 80152dc:	697a      	ldr	r2, [r7, #20]
 80152de:	1c53      	adds	r3, r2, #1
 80152e0:	617b      	str	r3, [r7, #20]
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	1c59      	adds	r1, r3, #1
 80152e6:	6139      	str	r1, [r7, #16]
 80152e8:	7812      	ldrb	r2, [r2, #0]
 80152ea:	701a      	strb	r2, [r3, #0]
    while(length--)
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	1e5a      	subs	r2, r3, #1
 80152f0:	607a      	str	r2, [r7, #4]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d1f2      	bne.n	80152dc <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 80152f6:	46c0      	nop			@ (mov r8, r8)
}
 80152f8:	46bd      	mov	sp, r7
 80152fa:	b006      	add	sp, #24
 80152fc:	bd80      	pop	{r7, pc}

080152fe <_ux_utility_semaphore_put>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 80152fe:	b580      	push	{r7, lr}
 8015300:	b084      	sub	sp, #16
 8015302:	af00      	add	r7, sp, #0
 8015304:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	0018      	movs	r0, r3
 801530a:	f7fe f8cd 	bl	80134a8 <_txe_semaphore_put>
 801530e:	0003      	movs	r3, r0
 8015310:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8015312:	68fb      	ldr	r3, [r7, #12]
}
 8015314:	0018      	movs	r0, r3
 8015316:	46bd      	mov	sp, r7
 8015318:	b004      	add	sp, #16
 801531a:	bd80      	pop	{r7, pc}

0801531c <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	1c5a      	adds	r2, r3, #1
 8015328:	607a      	str	r2, [r7, #4]
 801532a:	781a      	ldrb	r2, [r3, #0]
 801532c:	200e      	movs	r0, #14
 801532e:	183b      	adds	r3, r7, r0
 8015330:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	021b      	lsls	r3, r3, #8
 8015338:	b299      	uxth	r1, r3
 801533a:	183b      	adds	r3, r7, r0
 801533c:	183a      	adds	r2, r7, r0
 801533e:	8812      	ldrh	r2, [r2, #0]
 8015340:	430a      	orrs	r2, r1
 8015342:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 8015344:	183b      	adds	r3, r7, r0
 8015346:	881b      	ldrh	r3, [r3, #0]
}
 8015348:	0018      	movs	r0, r3
 801534a:	46bd      	mov	sp, r7
 801534c:	b004      	add	sp, #16
 801534e:	bd80      	pop	{r7, pc}

08015350 <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	2280      	movs	r2, #128	@ 0x80
 801535e:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	2201      	movs	r2, #1
 8015364:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8015366:	683b      	ldr	r3, [r7, #0]
 8015368:	0018      	movs	r0, r3
 801536a:	f7fe ff77 	bl	801425c <_ux_device_stack_control_request_process>
}
 801536e:	46c0      	nop			@ (mov r8, r8)
 8015370:	46bd      	mov	sp, r7
 8015372:	b002      	add	sp, #8
 8015374:	bd80      	pop	{r7, pc}

08015376 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 8015376:	b580      	push	{r7, lr}
 8015378:	b084      	sub	sp, #16
 801537a:	af00      	add	r7, sp, #0
 801537c:	60f8      	str	r0, [r7, #12]
 801537e:	60b9      	str	r1, [r7, #8]
 8015380:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015382:	68bb      	ldr	r3, [r7, #8]
 8015384:	2200      	movs	r2, #0
 8015386:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8015388:	68fb      	ldr	r3, [r7, #12]
 801538a:	2280      	movs	r2, #128	@ 0x80
 801538c:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 801538e:	68bb      	ldr	r3, [r7, #8]
 8015390:	0018      	movs	r0, r3
 8015392:	f7fe ff63 	bl	801425c <_ux_device_stack_control_request_process>
 8015396:	1e03      	subs	r3, r0, #0
 8015398:	d108      	bne.n	80153ac <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 801539a:	68fb      	ldr	r3, [r7, #12]
 801539c:	2203      	movs	r2, #3
 801539e:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	2300      	movs	r3, #0
 80153a4:	2200      	movs	r2, #0
 80153a6:	2100      	movs	r1, #0
 80153a8:	f7f3 f96e 	bl	8008688 <HAL_PCD_EP_Transmit>
    }
}
 80153ac:	46c0      	nop			@ (mov r8, r8)
 80153ae:	46bd      	mov	sp, r7
 80153b0:	b004      	add	sp, #16
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b084      	sub	sp, #16
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	60f8      	str	r0, [r7, #12]
 80153bc:	60b9      	str	r1, [r7, #8]
 80153be:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	2280      	movs	r2, #128	@ 0x80
 80153c4:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	0018      	movs	r0, r3
 80153ca:	f7fe ff47 	bl	801425c <_ux_device_stack_control_request_process>
 80153ce:	1e03      	subs	r3, r0, #0
 80153d0:	d108      	bne.n	80153e4 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80153d2:	68fb      	ldr	r3, [r7, #12]
 80153d4:	2204      	movs	r2, #4
 80153d6:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 80153d8:	6878      	ldr	r0, [r7, #4]
 80153da:	2300      	movs	r3, #0
 80153dc:	2200      	movs	r2, #0
 80153de:	2100      	movs	r1, #0
 80153e0:	f7f3 f952 	bl	8008688 <HAL_PCD_EP_Transmit>
    }
}
 80153e4:	46c0      	nop			@ (mov r8, r8)
 80153e6:	46bd      	mov	sp, r7
 80153e8:	b004      	add	sp, #16
 80153ea:	bd80      	pop	{r7, pc}

080153ec <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b088      	sub	sp, #32
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80153f4:	4b3e      	ldr	r3, [pc, #248]	@ (80154f0 <HAL_PCD_SetupStageCallback+0x104>)
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80153fa:	69fb      	ldr	r3, [r7, #28]
 80153fc:	69db      	ldr	r3, [r3, #28]
 80153fe:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8015400:	69bb      	ldr	r3, [r7, #24]
 8015402:	3304      	adds	r3, #4
 8015404:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8015406:	697b      	ldr	r3, [r7, #20]
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	3330      	adds	r3, #48	@ 0x30
 801540c:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	3354      	adds	r3, #84	@ 0x54
 8015412:	0018      	movs	r0, r3
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	22a7      	movs	r2, #167	@ 0xa7
 8015418:	0092      	lsls	r2, r2, #2
 801541a:	4694      	mov	ip, r2
 801541c:	4463      	add	r3, ip
 801541e:	2208      	movs	r2, #8
 8015420:	0019      	movs	r1, r3
 8015422:	f7ff ff50 	bl	80152c6 <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8015426:	693b      	ldr	r3, [r7, #16]
 8015428:	2200      	movs	r2, #0
 801542a:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801542c:	693b      	ldr	r3, [r7, #16]
 801542e:	2201      	movs	r2, #1
 8015430:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	2200      	movs	r2, #0
 8015436:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8015438:	697b      	ldr	r3, [r7, #20]
 801543a:	685b      	ldr	r3, [r3, #4]
 801543c:	220e      	movs	r2, #14
 801543e:	4393      	bics	r3, r2
 8015440:	001a      	movs	r2, r3
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8015446:	693b      	ldr	r3, [r7, #16]
 8015448:	2254      	movs	r2, #84	@ 0x54
 801544a:	5c9b      	ldrb	r3, [r3, r2]
 801544c:	b25b      	sxtb	r3, r3
 801544e:	2b00      	cmp	r3, #0
 8015450:	da06      	bge.n	8015460 <HAL_PCD_SetupStageCallback+0x74>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 8015452:	693a      	ldr	r2, [r7, #16]
 8015454:	697b      	ldr	r3, [r7, #20]
 8015456:	0011      	movs	r1, r2
 8015458:	0018      	movs	r0, r3
 801545a:	f7ff ff79 	bl	8015350 <_ux_dcd_stm32_setup_in>
 801545e:	e043      	b.n	80154e8 <HAL_PCD_SetupStageCallback+0xfc>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8015460:	697b      	ldr	r3, [r7, #20]
 8015462:	2200      	movs	r2, #0
 8015464:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8015466:	693b      	ldr	r3, [r7, #16]
 8015468:	225a      	movs	r2, #90	@ 0x5a
 801546a:	5c9b      	ldrb	r3, [r3, r2]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d10b      	bne.n	8015488 <HAL_PCD_SetupStageCallback+0x9c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8015470:	693b      	ldr	r3, [r7, #16]
 8015472:	225b      	movs	r2, #91	@ 0x5b
 8015474:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8015476:	2b00      	cmp	r3, #0
 8015478:	d106      	bne.n	8015488 <HAL_PCD_SetupStageCallback+0x9c>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 801547a:	687a      	ldr	r2, [r7, #4]
 801547c:	6939      	ldr	r1, [r7, #16]
 801547e:	697b      	ldr	r3, [r7, #20]
 8015480:	0018      	movs	r0, r3
 8015482:	f7ff ff97 	bl	80153b4 <_ux_dcd_stm32_setup_status>
 8015486:	e02f      	b.n	80154e8 <HAL_PCD_SetupStageCallback+0xfc>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	689b      	ldr	r3, [r3, #8]
 801548c:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 801548e:	693b      	ldr	r3, [r7, #16]
 8015490:	3354      	adds	r3, #84	@ 0x54
 8015492:	3306      	adds	r3, #6
 8015494:	0018      	movs	r0, r3
 8015496:	f7ff ff41 	bl	801531c <_ux_utility_short_get>
 801549a:	0002      	movs	r2, r0
 801549c:	693b      	ldr	r3, [r7, #16]
 801549e:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 80154a0:	693b      	ldr	r3, [r7, #16]
 80154a2:	695a      	ldr	r2, [r3, #20]
 80154a4:	2380      	movs	r3, #128	@ 0x80
 80154a6:	005b      	lsls	r3, r3, #1
 80154a8:	429a      	cmp	r2, r3
 80154aa:	d909      	bls.n	80154c0 <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 80154ac:	68fa      	ldr	r2, [r7, #12]
 80154ae:	69bb      	ldr	r3, [r7, #24]
 80154b0:	0011      	movs	r1, r2
 80154b2:	0018      	movs	r0, r3
 80154b4:	f000 f97a 	bl	80157ac <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	2200      	movs	r2, #0
 80154bc:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 80154be:	e013      	b.n	80154e8 <HAL_PCD_SetupStageCallback+0xfc>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 80154c0:	693b      	ldr	r3, [r7, #16]
 80154c2:	2200      	movs	r2, #0
 80154c4:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	68da      	ldr	r2, [r3, #12]
 80154ca:	693b      	ldr	r3, [r7, #16]
 80154cc:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80154ce:	68fb      	ldr	r3, [r7, #12]
 80154d0:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 80154d2:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	695b      	ldr	r3, [r3, #20]
 80154dc:	6878      	ldr	r0, [r7, #4]
 80154de:	f7f3 f882 	bl	80085e6 <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 80154e2:	697b      	ldr	r3, [r7, #20]
 80154e4:	2202      	movs	r2, #2
 80154e6:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 80154e8:	46bd      	mov	sp, r7
 80154ea:	b008      	add	sp, #32
 80154ec:	bd80      	pop	{r7, pc}
 80154ee:	46c0      	nop			@ (mov r8, r8)
 80154f0:	2000adf0 	.word	0x2000adf0

080154f4 <HAL_PCD_DataInStageCallback>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80154f4:	b580      	push	{r7, lr}
 80154f6:	b088      	sub	sp, #32
 80154f8:	af00      	add	r7, sp, #0
 80154fa:	6078      	str	r0, [r7, #4]
 80154fc:	000a      	movs	r2, r1
 80154fe:	1cfb      	adds	r3, r7, #3
 8015500:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8015502:	4b4f      	ldr	r3, [pc, #316]	@ (8015640 <HAL_PCD_DataInStageCallback+0x14c>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015508:	697b      	ldr	r3, [r7, #20]
 801550a:	69db      	ldr	r3, [r3, #28]
 801550c:	613b      	str	r3, [r7, #16]

    /* Fetch the address of the physical endpoint.  */
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
 801550e:	1cfb      	adds	r3, r7, #3
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	220f      	movs	r2, #15
 8015514:	4013      	ands	r3, r2
 8015516:	d00d      	beq.n	8015534 <HAL_PCD_DataInStageCallback+0x40>
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
 8015518:	1cfb      	adds	r3, r7, #3
 801551a:	781b      	ldrb	r3, [r3, #0]
 801551c:	220f      	movs	r2, #15
 801551e:	401a      	ands	r2, r3
 8015520:	0013      	movs	r3, r2
 8015522:	005b      	lsls	r3, r3, #1
 8015524:	189b      	adds	r3, r3, r2
 8015526:	009b      	lsls	r3, r3, #2
 8015528:	3360      	adds	r3, #96	@ 0x60
 801552a:	693a      	ldr	r2, [r7, #16]
 801552c:	18d3      	adds	r3, r2, r3
 801552e:	3304      	adds	r3, #4
 8015530:	61fb      	str	r3, [r7, #28]
 8015532:	e00b      	b.n	801554c <HAL_PCD_DataInStageCallback+0x58>
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8015534:	1cfb      	adds	r3, r7, #3
 8015536:	781b      	ldrb	r3, [r3, #0]
 8015538:	220f      	movs	r2, #15
 801553a:	401a      	ands	r2, r3
 801553c:	0013      	movs	r3, r2
 801553e:	005b      	lsls	r3, r3, #1
 8015540:	189b      	adds	r3, r3, r2
 8015542:	009b      	lsls	r3, r3, #2
 8015544:	693a      	ldr	r2, [r7, #16]
 8015546:	18d3      	adds	r3, r2, r3
 8015548:	3304      	adds	r3, #4
 801554a:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	3330      	adds	r3, #48	@ 0x30
 8015552:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 8015554:	1cfb      	adds	r3, r7, #3
 8015556:	781b      	ldrb	r3, [r3, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d15e      	bne.n	801561a <HAL_PCD_DataInStageCallback+0x126>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801555c:	68fb      	ldr	r3, [r7, #12]
 801555e:	689b      	ldr	r3, [r3, #8]
 8015560:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 8015562:	69fb      	ldr	r3, [r7, #28]
 8015564:	7a1b      	ldrb	r3, [r3, #8]
 8015566:	2b01      	cmp	r3, #1
 8015568:	d166      	bne.n	8015638 <HAL_PCD_DataInStageCallback+0x144>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801556a:	6878      	ldr	r0, [r7, #4]
 801556c:	2300      	movs	r3, #0
 801556e:	2200      	movs	r2, #0
 8015570:	2100      	movs	r1, #0
 8015572:	f7f3 f838 	bl	80085e6 <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 801557a:	68bb      	ldr	r3, [r7, #8]
 801557c:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 801557e:	429a      	cmp	r2, r3
 8015580:	d826      	bhi.n	80155d0 <HAL_PCD_DataInStageCallback+0xdc>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015586:	2b01      	cmp	r3, #1
 8015588:	d10b      	bne.n	80155a2 <HAL_PCD_DataInStageCallback+0xae>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 801558a:	68bb      	ldr	r3, [r7, #8]
 801558c:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 801558e:	b2d9      	uxtb	r1, r3
 8015590:	6878      	ldr	r0, [r7, #4]
 8015592:	2300      	movs	r3, #0
 8015594:	2200      	movs	r2, #0
 8015596:	f7f3 f877 	bl	8008688 <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	2200      	movs	r2, #0
 801559e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
    }
}
 80155a0:	e04a      	b.n	8015638 <HAL_PCD_DataInStageCallback+0x144>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	2200      	movs	r2, #0
 80155a6:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	2202      	movs	r2, #2
 80155ac:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d004      	beq.n	80155c8 <HAL_PCD_DataInStageCallback+0xd4>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 80155be:	68fb      	ldr	r3, [r7, #12]
 80155c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80155c2:	68fa      	ldr	r2, [r7, #12]
 80155c4:	0010      	movs	r0, r2
 80155c6:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 80155c8:	69fb      	ldr	r3, [r7, #28]
 80155ca:	2204      	movs	r2, #4
 80155cc:	721a      	strb	r2, [r3, #8]
}
 80155ce:	e033      	b.n	8015638 <HAL_PCD_DataInStageCallback+0x144>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	69da      	ldr	r2, [r3, #28]
 80155d4:	68bb      	ldr	r3, [r7, #8]
 80155d6:	69db      	ldr	r3, [r3, #28]
 80155d8:	1ad3      	subs	r3, r2, r3
 80155da:	61bb      	str	r3, [r7, #24]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 80155dc:	68bb      	ldr	r3, [r7, #8]
 80155de:	69db      	ldr	r3, [r3, #28]
 80155e0:	69ba      	ldr	r2, [r7, #24]
 80155e2:	429a      	cmp	r2, r3
 80155e4:	d902      	bls.n	80155ec <HAL_PCD_DataInStageCallback+0xf8>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80155e6:	68bb      	ldr	r3, [r7, #8]
 80155e8:	69db      	ldr	r3, [r3, #28]
 80155ea:	61bb      	str	r3, [r7, #24]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80155ec:	68fb      	ldr	r3, [r7, #12]
 80155ee:	691a      	ldr	r2, [r3, #16]
 80155f0:	68bb      	ldr	r3, [r7, #8]
 80155f2:	69db      	ldr	r3, [r3, #28]
 80155f4:	18d2      	adds	r2, r2, r3
 80155f6:	68fb      	ldr	r3, [r7, #12]
 80155f8:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 80155fa:	68fb      	ldr	r3, [r7, #12]
 80155fc:	69da      	ldr	r2, [r3, #28]
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	1ad2      	subs	r2, r2, r3
 8015602:	68fb      	ldr	r3, [r7, #12]
 8015604:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 801560a:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 8015610:	69bb      	ldr	r3, [r7, #24]
 8015612:	6878      	ldr	r0, [r7, #4]
 8015614:	f7f3 f838 	bl	8008688 <HAL_PCD_EP_Transmit>
}
 8015618:	e00e      	b.n	8015638 <HAL_PCD_DataInStageCallback+0x144>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	2200      	movs	r2, #0
 801561e:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	2202      	movs	r2, #2
 8015624:	601a      	str	r2, [r3, #0]
            transfer_request -> ux_slave_transfer_request_requested_length;
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	695a      	ldr	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_actual_length =
 801562a:	68fb      	ldr	r3, [r7, #12]
 801562c:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	3330      	adds	r3, #48	@ 0x30
 8015632:	0018      	movs	r0, r3
 8015634:	f7ff fe63 	bl	80152fe <_ux_utility_semaphore_put>
}
 8015638:	46c0      	nop			@ (mov r8, r8)
 801563a:	46bd      	mov	sp, r7
 801563c:	b008      	add	sp, #32
 801563e:	bd80      	pop	{r7, pc}
 8015640:	2000adf0 	.word	0x2000adf0

08015644 <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b088      	sub	sp, #32
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
 801564c:	000a      	movs	r2, r1
 801564e:	1cfb      	adds	r3, r7, #3
 8015650:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 8015652:	4b40      	ldr	r3, [pc, #256]	@ (8015754 <HAL_PCD_DataOutStageCallback+0x110>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8015658:	69fb      	ldr	r3, [r7, #28]
 801565a:	69db      	ldr	r3, [r3, #28]
 801565c:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801565e:	1cfb      	adds	r3, r7, #3
 8015660:	781b      	ldrb	r3, [r3, #0]
 8015662:	220f      	movs	r2, #15
 8015664:	401a      	ands	r2, r3
 8015666:	0013      	movs	r3, r2
 8015668:	005b      	lsls	r3, r3, #1
 801566a:	189b      	adds	r3, r3, r2
 801566c:	009b      	lsls	r3, r3, #2
 801566e:	69ba      	ldr	r2, [r7, #24]
 8015670:	18d3      	adds	r3, r2, r3
 8015672:	3304      	adds	r3, #4
 8015674:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 8015676:	697b      	ldr	r3, [r7, #20]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	3330      	adds	r3, #48	@ 0x30
 801567c:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801567e:	1cfb      	adds	r3, r7, #3
 8015680:	781b      	ldrb	r3, [r3, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d14c      	bne.n	8015720 <HAL_PCD_DataOutStageCallback+0xdc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 8015686:	697b      	ldr	r3, [r7, #20]
 8015688:	7a1b      	ldrb	r3, [r3, #8]
 801568a:	2b02      	cmp	r3, #2
 801568c:	d15d      	bne.n	801574a <HAL_PCD_DataOutStageCallback+0x106>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 801568e:	693b      	ldr	r3, [r7, #16]
 8015690:	689b      	ldr	r3, [r3, #8]
 8015692:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8015694:	1cfb      	adds	r3, r7, #3
 8015696:	781a      	ldrb	r2, [r3, #0]
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	0011      	movs	r1, r2
 801569c:	0018      	movs	r0, r3
 801569e:	f7f2 ffda 	bl	8008656 <HAL_PCD_EP_GetRxCount>
 80156a2:	0003      	movs	r3, r0
 80156a4:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 80156a6:	693b      	ldr	r3, [r7, #16]
 80156a8:	699a      	ldr	r2, [r3, #24]
 80156aa:	68bb      	ldr	r3, [r7, #8]
 80156ac:	18d2      	adds	r2, r2, r3
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 80156b6:	693b      	ldr	r3, [r7, #16]
 80156b8:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d823      	bhi.n	8015706 <HAL_PCD_DataOutStageCallback+0xc2>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80156be:	693b      	ldr	r3, [r7, #16]
 80156c0:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d004      	beq.n	80156d4 <HAL_PCD_DataOutStageCallback+0x90>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 80156ce:	68ba      	ldr	r2, [r7, #8]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d006      	beq.n	80156e2 <HAL_PCD_DataOutStageCallback+0x9e>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	6939      	ldr	r1, [r7, #16]
 80156d8:	697b      	ldr	r3, [r7, #20]
 80156da:	0018      	movs	r0, r3
 80156dc:	f7ff fe4b 	bl	8015376 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 80156e0:	e033      	b.n	801574a <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 80156e2:	693b      	ldr	r3, [r7, #16]
 80156e4:	691a      	ldr	r2, [r3, #16]
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	69db      	ldr	r3, [r3, #28]
 80156ea:	18d2      	adds	r2, r2, r3
 80156ec:	693b      	ldr	r3, [r7, #16]
 80156ee:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 80156f0:	68fb      	ldr	r3, [r7, #12]
 80156f2:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 80156f4:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	69db      	ldr	r3, [r3, #28]
 80156fe:	6878      	ldr	r0, [r7, #4]
 8015700:	f7f2 ff71 	bl	80085e6 <HAL_PCD_EP_Receive>
}
 8015704:	e021      	b.n	801574a <HAL_PCD_DataOutStageCallback+0x106>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 8015706:	693b      	ldr	r3, [r7, #16]
 8015708:	2227      	movs	r2, #39	@ 0x27
 801570a:	625a      	str	r2, [r3, #36]	@ 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 801570c:	693b      	ldr	r3, [r7, #16]
 801570e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015710:	2b00      	cmp	r3, #0
 8015712:	d01a      	beq.n	801574a <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 8015714:	693b      	ldr	r3, [r7, #16]
 8015716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015718:	693a      	ldr	r2, [r7, #16]
 801571a:	0010      	movs	r0, r2
 801571c:	4798      	blx	r3
}
 801571e:	e014      	b.n	801574a <HAL_PCD_DataOutStageCallback+0x106>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 8015720:	1cfb      	adds	r3, r7, #3
 8015722:	781a      	ldrb	r2, [r3, #0]
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	0011      	movs	r1, r2
 8015728:	0018      	movs	r0, r3
 801572a:	f7f2 ff94 	bl	8008656 <HAL_PCD_EP_GetRxCount>
 801572e:	0002      	movs	r2, r0
 8015730:	693b      	ldr	r3, [r7, #16]
 8015732:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8015734:	693b      	ldr	r3, [r7, #16]
 8015736:	2200      	movs	r2, #0
 8015738:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801573a:	693b      	ldr	r3, [r7, #16]
 801573c:	2202      	movs	r2, #2
 801573e:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 8015740:	693b      	ldr	r3, [r7, #16]
 8015742:	3330      	adds	r3, #48	@ 0x30
 8015744:	0018      	movs	r0, r3
 8015746:	f7ff fdda 	bl	80152fe <_ux_utility_semaphore_put>
}
 801574a:	46c0      	nop			@ (mov r8, r8)
 801574c:	46bd      	mov	sp, r7
 801574e:	b008      	add	sp, #32
 8015750:	bd80      	pop	{r7, pc}
 8015752:	46c0      	nop			@ (mov r8, r8)
 8015754:	2000adf0 	.word	0x2000adf0

08015758 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b082      	sub	sp, #8
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 8015760:	4b11      	ldr	r3, [pc, #68]	@ (80157a8 <HAL_PCD_ResetCallback+0x50>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	6a1b      	ldr	r3, [r3, #32]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d001      	beq.n	801576e <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 801576a:	f7ff f90d 	bl	8014988 <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 801576e:	687b      	ldr	r3, [r7, #4]
 8015770:	79db      	ldrb	r3, [r3, #7]
 8015772:	2b02      	cmp	r3, #2
 8015774:	d106      	bne.n	8015784 <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8015776:	4b0c      	ldr	r3, [pc, #48]	@ (80157a8 <HAL_PCD_ResetCallback+0x50>)
 8015778:	681a      	ldr	r2, [r3, #0]
 801577a:	23d0      	movs	r3, #208	@ 0xd0
 801577c:	005b      	lsls	r3, r3, #1
 801577e:	2101      	movs	r1, #1
 8015780:	50d1      	str	r1, [r2, r3]
        break;
 8015782:	e006      	b.n	8015792 <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 8015784:	4b08      	ldr	r3, [pc, #32]	@ (80157a8 <HAL_PCD_ResetCallback+0x50>)
 8015786:	681a      	ldr	r2, [r3, #0]
 8015788:	23d0      	movs	r3, #208	@ 0xd0
 801578a:	005b      	lsls	r3, r3, #1
 801578c:	2101      	movs	r1, #1
 801578e:	50d1      	str	r1, [r2, r3]
        break;
 8015790:	46c0      	nop			@ (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 8015792:	f000 f82b 	bl	80157ec <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 8015796:	4b04      	ldr	r3, [pc, #16]	@ (80157a8 <HAL_PCD_ResetCallback+0x50>)
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	2201      	movs	r2, #1
 801579c:	621a      	str	r2, [r3, #32]
}
 801579e:	46c0      	nop			@ (mov r8, r8)
 80157a0:	46bd      	mov	sp, r7
 80157a2:	b002      	add	sp, #8
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	46c0      	nop			@ (mov r8, r8)
 80157a8:	2000adf0 	.word	0x2000adf0

080157ac <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b084      	sub	sp, #16
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
 80157b4:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 80157b6:	683b      	ldr	r3, [r7, #0]
 80157b8:	689b      	ldr	r3, [r3, #8]
 80157ba:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	685b      	ldr	r3, [r3, #4]
 80157c0:	2204      	movs	r2, #4
 80157c2:	431a      	orrs	r2, r3
 80157c4:	68fb      	ldr	r3, [r7, #12]
 80157c6:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	22c4      	movs	r2, #196	@ 0xc4
 80157cc:	5898      	ldr	r0, [r3, r2]
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	695b      	ldr	r3, [r3, #20]
 80157d2:	b2da      	uxtb	r2, r3
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	7a9b      	ldrb	r3, [r3, #10]
 80157d8:	4313      	orrs	r3, r2
 80157da:	b2db      	uxtb	r3, r3
 80157dc:	0019      	movs	r1, r3
 80157de:	f7f2 ff90 	bl	8008702 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 80157e2:	2300      	movs	r3, #0
}
 80157e4:	0018      	movs	r0, r3
 80157e6:	46bd      	mov	sp, r7
 80157e8:	b004      	add	sp, #16
 80157ea:	bd80      	pop	{r7, pc}

080157ec <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b086      	sub	sp, #24
 80157f0:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 80157f2:	4b6a      	ldr	r3, [pc, #424]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 80157f8:	697b      	ldr	r3, [r7, #20]
 80157fa:	69db      	ldr	r3, [r3, #28]
 80157fc:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80157fe:	4b67      	ldr	r3, [pc, #412]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	3320      	adds	r3, #32
 8015804:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 8015806:	4b65      	ldr	r3, [pc, #404]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015808:	681a      	ldr	r2, [r3, #0]
 801580a:	23de      	movs	r3, #222	@ 0xde
 801580c:	005b      	lsls	r3, r3, #1
 801580e:	58d3      	ldr	r3, [r2, r3]
 8015810:	2b01      	cmp	r3, #1
 8015812:	d114      	bne.n	801583e <_ux_dcd_stm32_initialize_complete+0x52>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 8015814:	4b61      	ldr	r3, [pc, #388]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015816:	6819      	ldr	r1, [r3, #0]
 8015818:	4b60      	ldr	r3, [pc, #384]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801581a:	681a      	ldr	r2, [r3, #0]
 801581c:	23a8      	movs	r3, #168	@ 0xa8
 801581e:	005b      	lsls	r3, r3, #1
 8015820:	58c9      	ldr	r1, [r1, r3]
 8015822:	2394      	movs	r3, #148	@ 0x94
 8015824:	005b      	lsls	r3, r3, #1
 8015826:	50d1      	str	r1, [r2, r3]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 8015828:	4b5c      	ldr	r3, [pc, #368]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801582a:	6819      	ldr	r1, [r3, #0]
 801582c:	4b5b      	ldr	r3, [pc, #364]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801582e:	681a      	ldr	r2, [r3, #0]
 8015830:	23aa      	movs	r3, #170	@ 0xaa
 8015832:	005b      	lsls	r3, r3, #1
 8015834:	58c9      	ldr	r1, [r1, r3]
 8015836:	2396      	movs	r3, #150	@ 0x96
 8015838:	005b      	lsls	r3, r3, #1
 801583a:	50d1      	str	r1, [r2, r3]
 801583c:	e035      	b.n	80158aa <_ux_dcd_stm32_initialize_complete+0xbe>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 801583e:	4b57      	ldr	r3, [pc, #348]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015840:	681a      	ldr	r2, [r3, #0]
 8015842:	23de      	movs	r3, #222	@ 0xde
 8015844:	005b      	lsls	r3, r3, #1
 8015846:	2100      	movs	r1, #0
 8015848:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 801584a:	4b54      	ldr	r3, [pc, #336]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801584c:	681a      	ldr	r2, [r3, #0]
 801584e:	23d0      	movs	r3, #208	@ 0xd0
 8015850:	005b      	lsls	r3, r3, #1
 8015852:	58d3      	ldr	r3, [r2, r3]
 8015854:	2b01      	cmp	r3, #1
 8015856:	d114      	bne.n	8015882 <_ux_dcd_stm32_initialize_complete+0x96>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 8015858:	4b50      	ldr	r3, [pc, #320]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801585a:	6819      	ldr	r1, [r3, #0]
 801585c:	4b4f      	ldr	r3, [pc, #316]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801585e:	681a      	ldr	r2, [r3, #0]
 8015860:	2398      	movs	r3, #152	@ 0x98
 8015862:	005b      	lsls	r3, r3, #1
 8015864:	58c9      	ldr	r1, [r1, r3]
 8015866:	2394      	movs	r3, #148	@ 0x94
 8015868:	005b      	lsls	r3, r3, #1
 801586a:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801586c:	4b4b      	ldr	r3, [pc, #300]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801586e:	6819      	ldr	r1, [r3, #0]
 8015870:	4b4a      	ldr	r3, [pc, #296]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015872:	681a      	ldr	r2, [r3, #0]
 8015874:	239a      	movs	r3, #154	@ 0x9a
 8015876:	005b      	lsls	r3, r3, #1
 8015878:	58c9      	ldr	r1, [r1, r3]
 801587a:	2396      	movs	r3, #150	@ 0x96
 801587c:	005b      	lsls	r3, r3, #1
 801587e:	50d1      	str	r1, [r2, r3]
 8015880:	e013      	b.n	80158aa <_ux_dcd_stm32_initialize_complete+0xbe>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 8015882:	4b46      	ldr	r3, [pc, #280]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015884:	6819      	ldr	r1, [r3, #0]
 8015886:	4b45      	ldr	r3, [pc, #276]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015888:	681a      	ldr	r2, [r3, #0]
 801588a:	239c      	movs	r3, #156	@ 0x9c
 801588c:	005b      	lsls	r3, r3, #1
 801588e:	58c9      	ldr	r1, [r1, r3]
 8015890:	2394      	movs	r3, #148	@ 0x94
 8015892:	005b      	lsls	r3, r3, #1
 8015894:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 8015896:	4b41      	ldr	r3, [pc, #260]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015898:	6819      	ldr	r1, [r3, #0]
 801589a:	4b40      	ldr	r3, [pc, #256]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 801589c:	681a      	ldr	r2, [r3, #0]
 801589e:	239e      	movs	r3, #158	@ 0x9e
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	58c9      	ldr	r1, [r1, r3]
 80158a4:	2396      	movs	r3, #150	@ 0x96
 80158a6:	005b      	lsls	r3, r3, #1
 80158a8:	50d1      	str	r1, [r2, r3]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 80158aa:	4b3c      	ldr	r3, [pc, #240]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	2394      	movs	r3, #148	@ 0x94
 80158b0:	005b      	lsls	r3, r3, #1
 80158b2:	58d3      	ldr	r3, [r2, r3]
 80158b4:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 80158b6:	68fb      	ldr	r3, [r7, #12]
 80158b8:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 80158ba:	4939      	ldr	r1, [pc, #228]	@ (80159a0 <_ux_dcd_stm32_initialize_complete+0x1b4>)
 80158bc:	68b8      	ldr	r0, [r7, #8]
 80158be:	220e      	movs	r2, #14
 80158c0:	f7ff fca3 	bl	801520a <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	336c      	adds	r3, #108	@ 0x6c
 80158c8:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	22fa      	movs	r2, #250	@ 0xfa
 80158ce:	0092      	lsls	r2, r2, #2
 80158d0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80158da:	68fb      	ldr	r3, [r7, #12]
 80158dc:	333c      	adds	r3, #60	@ 0x3c
 80158de:	001a      	movs	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80158e8:	68fa      	ldr	r2, [r7, #12]
 80158ea:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 80158ec:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 80158ee:	68fb      	ldr	r3, [r7, #12]
 80158f0:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 80158f6:	68fb      	ldr	r3, [r7, #12]
 80158f8:	333c      	adds	r3, #60	@ 0x3c
 80158fa:	001a      	movs	r2, r3
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8015900:	697b      	ldr	r3, [r7, #20]
 8015902:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 8015904:	68fa      	ldr	r2, [r7, #12]
 8015906:	323c      	adds	r2, #60	@ 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 8015908:	6978      	ldr	r0, [r7, #20]
 801590a:	210e      	movs	r1, #14
 801590c:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 801590e:	693b      	ldr	r3, [r7, #16]
 8015910:	22c4      	movs	r2, #196	@ 0xc4
 8015912:	589b      	ldr	r3, [r3, r2]
 8015914:	2100      	movs	r1, #0
 8015916:	0018      	movs	r0, r3
 8015918:	f7f2 ff51 	bl	80087be <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801591c:	693b      	ldr	r3, [r7, #16]
 801591e:	22c4      	movs	r2, #196	@ 0xc4
 8015920:	5898      	ldr	r0, [r3, r2]
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	69db      	ldr	r3, [r3, #28]
 8015926:	b29a      	uxth	r2, r3
 8015928:	2300      	movs	r3, #0
 801592a:	2100      	movs	r1, #0
 801592c:	f7f2 fdea 	bl	8008504 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	22c4      	movs	r2, #196	@ 0xc4
 8015934:	589b      	ldr	r3, [r3, r2]
 8015936:	2180      	movs	r1, #128	@ 0x80
 8015938:	0018      	movs	r0, r3
 801593a:	f7f2 ff40 	bl	80087be <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801593e:	693b      	ldr	r3, [r7, #16]
 8015940:	22c4      	movs	r2, #196	@ 0xc4
 8015942:	5898      	ldr	r0, [r3, r2]
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	69db      	ldr	r3, [r3, #28]
 8015948:	b29a      	uxth	r2, r3
 801594a:	2300      	movs	r3, #0
 801594c:	2180      	movs	r1, #128	@ 0x80
 801594e:	f7f2 fdd9 	bl	8008504 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	2200      	movs	r2, #0
 8015956:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	2201      	movs	r2, #1
 801595c:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	2201      	movs	r2, #1
 8015962:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	2208      	movs	r2, #8
 8015968:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2208      	movs	r2, #8
 801596e:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	2200      	movs	r2, #0
 8015974:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 8015976:	4b09      	ldr	r3, [pc, #36]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015978:	681a      	ldr	r2, [r3, #0]
 801597a:	23e2      	movs	r3, #226	@ 0xe2
 801597c:	005b      	lsls	r3, r3, #1
 801597e:	58d3      	ldr	r3, [r2, r3]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d006      	beq.n	8015992 <_ux_dcd_stm32_initialize_complete+0x1a6>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 8015984:	4b05      	ldr	r3, [pc, #20]	@ (801599c <_ux_dcd_stm32_initialize_complete+0x1b0>)
 8015986:	681a      	ldr	r2, [r3, #0]
 8015988:	23e2      	movs	r3, #226	@ 0xe2
 801598a:	005b      	lsls	r3, r3, #1
 801598c:	58d3      	ldr	r3, [r2, r3]
 801598e:	2001      	movs	r0, #1
 8015990:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 8015992:	2300      	movs	r3, #0
}
 8015994:	0018      	movs	r0, r3
 8015996:	46bd      	mov	sp, r7
 8015998:	b006      	add	sp, #24
 801599a:	bd80      	pop	{r7, pc}
 801599c:	2000adf0 	.word	0x2000adf0
 80159a0:	2000001c 	.word	0x2000001c

080159a4 <USBPD_PreInitOs>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
unsigned int USBPD_PreInitOs(void)
{
 80159a4:	b580      	push	{r7, lr}
 80159a6:	af00      	add	r7, sp, #0
  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 80159a8:	f7fa f90c 	bl	800fbc4 <USBPD_HW_IF_GlobalHwInit>
 /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 80159ac:	f000 f822 	bl	80159f4 <USBPD_DPM_InitCore>
 80159b0:	1e03      	subs	r3, r0, #0
 80159b2:	d001      	beq.n	80159b8 <USBPD_PreInitOs+0x14>
  {
    return USBPD_ERROR;
 80159b4:	2302      	movs	r3, #2
 80159b6:	e000      	b.n	80159ba <USBPD_PreInitOs+0x16>
  }

  return USBPD_OK;
 80159b8:	2300      	movs	r3, #0
}
 80159ba:	0018      	movs	r0, r3
 80159bc:	46bd      	mov	sp, r7
 80159be:	bd80      	pop	{r7, pc}

080159c0 <MX_USBPD_Init>:

/* USBPD init function */
unsigned int MX_USBPD_Init(void *memory_ptr)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b084      	sub	sp, #16
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	6078      	str	r0, [r7, #4]
  unsigned int result = USBPD_OK;
 80159c8:	2300      	movs	r3, #0
 80159ca:	60fb      	str	r3, [r7, #12]

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 80159cc:	f000 fba2 	bl	8016114 <USBPD_DPM_UserInit>
 80159d0:	1e03      	subs	r3, r0, #0
 80159d2:	d001      	beq.n	80159d8 <MX_USBPD_Init+0x18>
  {
    return USBPD_ERROR;
 80159d4:	2302      	movs	r3, #2
 80159d6:	e008      	b.n	80159ea <MX_USBPD_Init+0x2a>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS((void*)memory_ptr))
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	0018      	movs	r0, r3
 80159dc:	f000 f8e0 	bl	8015ba0 <USBPD_DPM_InitOS>
 80159e0:	1e03      	subs	r3, r0, #0
 80159e2:	d001      	beq.n	80159e8 <MX_USBPD_Init+0x28>
  {
    return USBPD_ERROR;
 80159e4:	2302      	movs	r3, #2
 80159e6:	e000      	b.n	80159ea <MX_USBPD_Init+0x2a>
  }
  return result;
 80159e8:	68fb      	ldr	r3, [r7, #12]
}
 80159ea:	0018      	movs	r0, r3
 80159ec:	46bd      	mov	sp, r7
 80159ee:	b004      	add	sp, #16
 80159f0:	bd80      	pop	{r7, pc}
	...

080159f4 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 80159f4:	b5b0      	push	{r4, r5, r7, lr}
 80159f6:	b082      	sub	sp, #8
 80159f8:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 80159fa:	1dfb      	adds	r3, r7, #7
 80159fc:	2200      	movs	r2, #0
 80159fe:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 8015a00:	4b62      	ldr	r3, [pc, #392]	@ (8015b8c <USBPD_DPM_InitCore+0x198>)
 8015a02:	0018      	movs	r0, r3
 8015a04:	f7eb fe9e 	bl	8001744 <USBPD_PE_CheckLIB>
 8015a08:	0003      	movs	r3, r0
 8015a0a:	2b01      	cmp	r3, #1
 8015a0c:	d003      	beq.n	8015a16 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 8015a0e:	1dfb      	adds	r3, r7, #7
 8015a10:	2202      	movs	r2, #2
 8015a12:	701a      	strb	r2, [r3, #0]
    goto error;
 8015a14:	e0b4      	b.n	8015b80 <USBPD_DPM_InitCore+0x18c>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8015a16:	f7eb fea3 	bl	8001760 <USBPD_PE_GetMemoryConsumption>
 8015a1a:	0003      	movs	r3, r0
 8015a1c:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015a1e:	1dbb      	adds	r3, r7, #6
 8015a20:	2200      	movs	r2, #0
 8015a22:	701a      	strb	r2, [r3, #0]
 8015a24:	e0a6      	b.n	8015b74 <USBPD_DPM_InitCore+0x180>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8015a26:	1dbb      	adds	r3, r7, #6
 8015a28:	781b      	ldrb	r3, [r3, #0]
 8015a2a:	4a59      	ldr	r2, [pc, #356]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015a2c:	009b      	lsls	r3, r3, #2
 8015a2e:	18d3      	adds	r3, r2, r3
 8015a30:	785a      	ldrb	r2, [r3, #1]
 8015a32:	2108      	movs	r1, #8
 8015a34:	438a      	bics	r2, r1
 8015a36:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8015a38:	1dbb      	adds	r3, r7, #6
 8015a3a:	781a      	ldrb	r2, [r3, #0]
 8015a3c:	1dbb      	adds	r3, r7, #6
 8015a3e:	7818      	ldrb	r0, [r3, #0]
 8015a40:	4954      	ldr	r1, [pc, #336]	@ (8015b94 <USBPD_DPM_InitCore+0x1a0>)
 8015a42:	0013      	movs	r3, r2
 8015a44:	005b      	lsls	r3, r3, #1
 8015a46:	189b      	adds	r3, r3, r2
 8015a48:	009b      	lsls	r3, r3, #2
 8015a4a:	18cb      	adds	r3, r1, r3
 8015a4c:	791b      	ldrb	r3, [r3, #4]
 8015a4e:	079b      	lsls	r3, r3, #30
 8015a50:	0f9b      	lsrs	r3, r3, #30
 8015a52:	b2d9      	uxtb	r1, r3
 8015a54:	4b4e      	ldr	r3, [pc, #312]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015a56:	0082      	lsls	r2, r0, #2
 8015a58:	2003      	movs	r0, #3
 8015a5a:	4001      	ands	r1, r0
 8015a5c:	000c      	movs	r4, r1
 8015a5e:	5cd1      	ldrb	r1, [r2, r3]
 8015a60:	2003      	movs	r0, #3
 8015a62:	4381      	bics	r1, r0
 8015a64:	1c08      	adds	r0, r1, #0
 8015a66:	1c21      	adds	r1, r4, #0
 8015a68:	4301      	orrs	r1, r0
 8015a6a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8015a6c:	1dbb      	adds	r3, r7, #6
 8015a6e:	781a      	ldrb	r2, [r3, #0]
 8015a70:	1dbb      	adds	r3, r7, #6
 8015a72:	7818      	ldrb	r0, [r3, #0]
 8015a74:	4947      	ldr	r1, [pc, #284]	@ (8015b94 <USBPD_DPM_InitCore+0x1a0>)
 8015a76:	0013      	movs	r3, r2
 8015a78:	005b      	lsls	r3, r3, #1
 8015a7a:	189b      	adds	r3, r3, r2
 8015a7c:	009b      	lsls	r3, r3, #2
 8015a7e:	18cb      	adds	r3, r1, r3
 8015a80:	791b      	ldrb	r3, [r3, #4]
 8015a82:	075b      	lsls	r3, r3, #29
 8015a84:	0fdb      	lsrs	r3, r3, #31
 8015a86:	b2d9      	uxtb	r1, r3
 8015a88:	4b41      	ldr	r3, [pc, #260]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015a8a:	0082      	lsls	r2, r0, #2
 8015a8c:	2001      	movs	r0, #1
 8015a8e:	4001      	ands	r1, r0
 8015a90:	008c      	lsls	r4, r1, #2
 8015a92:	5cd1      	ldrb	r1, [r2, r3]
 8015a94:	2004      	movs	r0, #4
 8015a96:	4381      	bics	r1, r0
 8015a98:	1c08      	adds	r0, r1, #0
 8015a9a:	1c21      	adds	r1, r4, #0
 8015a9c:	4301      	orrs	r1, r0
 8015a9e:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8015aa0:	1dbb      	adds	r3, r7, #6
 8015aa2:	781a      	ldrb	r2, [r3, #0]
 8015aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015aa6:	0092      	lsls	r2, r2, #2
 8015aa8:	5cd1      	ldrb	r1, [r2, r3]
 8015aaa:	2010      	movs	r0, #16
 8015aac:	4381      	bics	r1, r0
 8015aae:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8015ab0:	1dbb      	adds	r3, r7, #6
 8015ab2:	781a      	ldrb	r2, [r3, #0]
 8015ab4:	4b36      	ldr	r3, [pc, #216]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015ab6:	0092      	lsls	r2, r2, #2
 8015ab8:	5cd1      	ldrb	r1, [r2, r3]
 8015aba:	203f      	movs	r0, #63	@ 0x3f
 8015abc:	4001      	ands	r1, r0
 8015abe:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8015ac0:	1dbb      	adds	r3, r7, #6
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	4a32      	ldr	r2, [pc, #200]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015ac6:	009b      	lsls	r3, r3, #2
 8015ac8:	18d3      	adds	r3, r2, r3
 8015aca:	785a      	ldrb	r2, [r3, #1]
 8015acc:	2160      	movs	r1, #96	@ 0x60
 8015ace:	438a      	bics	r2, r1
 8015ad0:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8015ad2:	1dbb      	adds	r3, r7, #6
 8015ad4:	781b      	ldrb	r3, [r3, #0]
 8015ad6:	4a2e      	ldr	r2, [pc, #184]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	18d3      	adds	r3, r2, r3
 8015adc:	785a      	ldrb	r2, [r3, #1]
 8015ade:	217f      	movs	r1, #127	@ 0x7f
 8015ae0:	400a      	ands	r2, r1
 8015ae2:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 8015ae4:	1dbb      	adds	r3, r7, #6
 8015ae6:	781a      	ldrb	r2, [r3, #0]
 8015ae8:	0013      	movs	r3, r2
 8015aea:	005b      	lsls	r3, r3, #1
 8015aec:	189b      	adds	r3, r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	4a28      	ldr	r2, [pc, #160]	@ (8015b94 <USBPD_DPM_InitCore+0x1a0>)
 8015af2:	189c      	adds	r4, r3, r2
 8015af4:	1dbb      	adds	r3, r7, #6
 8015af6:	781b      	ldrb	r3, [r3, #0]
 8015af8:	009a      	lsls	r2, r3, #2
 8015afa:	4b25      	ldr	r3, [pc, #148]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015afc:	18d2      	adds	r2, r2, r3
 8015afe:	4926      	ldr	r1, [pc, #152]	@ (8015b98 <USBPD_DPM_InitCore+0x1a4>)
 8015b00:	1dbb      	adds	r3, r7, #6
 8015b02:	7818      	ldrb	r0, [r3, #0]
 8015b04:	0013      	movs	r3, r2
 8015b06:	0022      	movs	r2, r4
 8015b08:	f7ea fc32 	bl	8000370 <USBPD_CAD_Init>
 8015b0c:	1e03      	subs	r3, r0, #0
 8015b0e:	d003      	beq.n	8015b18 <USBPD_DPM_InitCore+0x124>
 8015b10:	1dfb      	adds	r3, r7, #7
 8015b12:	2202      	movs	r2, #2
 8015b14:	701a      	strb	r2, [r3, #0]
 8015b16:	e033      	b.n	8015b80 <USBPD_DPM_InitCore+0x18c>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8015b18:	1dbb      	adds	r3, r7, #6
 8015b1a:	781a      	ldrb	r2, [r3, #0]
 8015b1c:	0013      	movs	r3, r2
 8015b1e:	005b      	lsls	r3, r3, #1
 8015b20:	189b      	adds	r3, r3, r2
 8015b22:	009b      	lsls	r3, r3, #2
 8015b24:	4a1b      	ldr	r2, [pc, #108]	@ (8015b94 <USBPD_DPM_InitCore+0x1a0>)
 8015b26:	1899      	adds	r1, r3, r2
 8015b28:	1dbb      	adds	r3, r7, #6
 8015b2a:	781b      	ldrb	r3, [r3, #0]
 8015b2c:	009a      	lsls	r2, r3, #2
 8015b2e:	4b18      	ldr	r3, [pc, #96]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015b30:	18d2      	adds	r2, r2, r3
 8015b32:	1dfc      	adds	r4, r7, #7
 8015b34:	4d19      	ldr	r5, [pc, #100]	@ (8015b9c <USBPD_DPM_InitCore+0x1a8>)
 8015b36:	1dbb      	adds	r3, r7, #6
 8015b38:	7818      	ldrb	r0, [r3, #0]
 8015b3a:	002b      	movs	r3, r5
 8015b3c:	f7ea fcf6 	bl	800052c <USBPD_PE_Init>
 8015b40:	0003      	movs	r3, r0
 8015b42:	7023      	strb	r3, [r4, #0]
 8015b44:	1dfb      	adds	r3, r7, #7
 8015b46:	781b      	ldrb	r3, [r3, #0]
 8015b48:	2b00      	cmp	r3, #0
 8015b4a:	d119      	bne.n	8015b80 <USBPD_DPM_InitCore+0x18c>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8015b4c:	1dbb      	adds	r3, r7, #6
 8015b4e:	781b      	ldrb	r3, [r3, #0]
 8015b50:	4a0f      	ldr	r2, [pc, #60]	@ (8015b90 <USBPD_DPM_InitCore+0x19c>)
 8015b52:	009b      	lsls	r3, r3, #2
 8015b54:	18d3      	adds	r3, r2, r3
 8015b56:	785a      	ldrb	r2, [r3, #1]
 8015b58:	2108      	movs	r1, #8
 8015b5a:	430a      	orrs	r2, r1
 8015b5c:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8015b5e:	1dbb      	adds	r3, r7, #6
 8015b60:	781b      	ldrb	r3, [r3, #0]
 8015b62:	2101      	movs	r1, #1
 8015b64:	0018      	movs	r0, r3
 8015b66:	f7ea fc30 	bl	80003ca <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8015b6a:	1dbb      	adds	r3, r7, #6
 8015b6c:	1dba      	adds	r2, r7, #6
 8015b6e:	7812      	ldrb	r2, [r2, #0]
 8015b70:	3201      	adds	r2, #1
 8015b72:	701a      	strb	r2, [r3, #0]
 8015b74:	1dbb      	adds	r3, r7, #6
 8015b76:	781b      	ldrb	r3, [r3, #0]
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d800      	bhi.n	8015b7e <USBPD_DPM_InitCore+0x18a>
 8015b7c:	e753      	b.n	8015a26 <USBPD_DPM_InitCore+0x32>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 8015b7e:	46c0      	nop			@ (mov r8, r8)
  return _retr;
 8015b80:	1dfb      	adds	r3, r7, #7
 8015b82:	781b      	ldrb	r3, [r3, #0]
}
 8015b84:	0018      	movs	r0, r3
 8015b86:	46bd      	mov	sp, r7
 8015b88:	b002      	add	sp, #8
 8015b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8015b8c:	30410000 	.word	0x30410000
 8015b90:	2000b0b0 	.word	0x2000b0b0
 8015b94:	20000044 	.word	0x20000044
 8015b98:	0801694c 	.word	0x0801694c
 8015b9c:	08016954 	.word	0x08016954

08015ba0 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
uint32_t USBPD_DPM_InitOS(void *MemoryPtr)
{
 8015ba0:	b5b0      	push	{r4, r5, r7, lr}
 8015ba2:	b08e      	sub	sp, #56	@ 0x38
 8015ba4:	af08      	add	r7, sp, #32
 8015ba6:	6078      	str	r0, [r7, #4]
  OS_INIT();
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	60fb      	str	r3, [r7, #12]
 8015bac:	2300      	movs	r3, #0
 8015bae:	617b      	str	r3, [r7, #20]
  {
    OS_CREATE_QUEUE(CADQueueId, "QCAD", USBPD_PORT_COUNT, OS_ELEMENT_SIZE);
 8015bb0:	2408      	movs	r4, #8
 8015bb2:	1939      	adds	r1, r7, r4
 8015bb4:	68f8      	ldr	r0, [r7, #12]
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	2208      	movs	r2, #8
 8015bba:	f7fd fa19 	bl	8012ff0 <_txe_byte_allocate>
 8015bbe:	0003      	movs	r3, r0
 8015bc0:	617b      	str	r3, [r7, #20]
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d000      	beq.n	8015bca <USBPD_DPM_InitOS+0x2a>
 8015bc8:	e0bb      	b.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
 8015bca:	68bb      	ldr	r3, [r7, #8]
 8015bcc:	495f      	ldr	r1, [pc, #380]	@ (8015d4c <USBPD_DPM_InitOS+0x1ac>)
 8015bce:	4860      	ldr	r0, [pc, #384]	@ (8015d50 <USBPD_DPM_InitOS+0x1b0>)
 8015bd0:	2238      	movs	r2, #56	@ 0x38
 8015bd2:	9201      	str	r2, [sp, #4]
 8015bd4:	2208      	movs	r2, #8
 8015bd6:	9200      	str	r2, [sp, #0]
 8015bd8:	2201      	movs	r2, #1
 8015bda:	f7fd fb1d 	bl	8013218 <_txe_queue_create>
 8015bde:	0003      	movs	r3, r0
 8015be0:	617b      	str	r3, [r7, #20]
 8015be2:	697b      	ldr	r3, [r7, #20]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d000      	beq.n	8015bea <USBPD_DPM_InitOS+0x4a>
 8015be8:	e0ab      	b.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
    OS_DEFINE_TASK(CAD, USBPD_CAD_Task, OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, NULL);
    OS_CREATE_TASK(CADThread, CAD, USBPD_CAD_Task,  OS_CAD_PRIORITY, OS_CAD_STACK_SIZE, (int)NULL);
 8015bea:	2380      	movs	r3, #128	@ 0x80
 8015bec:	00da      	lsls	r2, r3, #3
 8015bee:	1939      	adds	r1, r7, r4
 8015bf0:	68f8      	ldr	r0, [r7, #12]
 8015bf2:	2300      	movs	r3, #0
 8015bf4:	f7fd f9fc 	bl	8012ff0 <_txe_byte_allocate>
 8015bf8:	0003      	movs	r3, r0
 8015bfa:	617b      	str	r3, [r7, #20]
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d000      	beq.n	8015c04 <USBPD_DPM_InitOS+0x64>
 8015c02:	e09e      	b.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	4c53      	ldr	r4, [pc, #332]	@ (8015d54 <USBPD_DPM_InitOS+0x1b4>)
 8015c08:	4953      	ldr	r1, [pc, #332]	@ (8015d58 <USBPD_DPM_InitOS+0x1b8>)
 8015c0a:	4854      	ldr	r0, [pc, #336]	@ (8015d5c <USBPD_DPM_InitOS+0x1bc>)
 8015c0c:	22b0      	movs	r2, #176	@ 0xb0
 8015c0e:	9206      	str	r2, [sp, #24]
 8015c10:	2201      	movs	r2, #1
 8015c12:	9205      	str	r2, [sp, #20]
 8015c14:	2200      	movs	r2, #0
 8015c16:	9204      	str	r2, [sp, #16]
 8015c18:	2201      	movs	r2, #1
 8015c1a:	9203      	str	r2, [sp, #12]
 8015c1c:	2201      	movs	r2, #1
 8015c1e:	9202      	str	r2, [sp, #8]
 8015c20:	2280      	movs	r2, #128	@ 0x80
 8015c22:	00d2      	lsls	r2, r2, #3
 8015c24:	9201      	str	r2, [sp, #4]
 8015c26:	9300      	str	r3, [sp, #0]
 8015c28:	2300      	movs	r3, #0
 8015c2a:	0022      	movs	r2, r4
 8015c2c:	f7fd fc5c 	bl	80134e8 <_txe_thread_create>
 8015c30:	0003      	movs	r3, r0
 8015c32:	617b      	str	r3, [r7, #20]
 8015c34:	697b      	ldr	r3, [r7, #20]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d000      	beq.n	8015c3c <USBPD_DPM_InitOS+0x9c>
 8015c3a:	e082      	b.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
  }

  /* Create the queue corresponding to PE task */
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	613b      	str	r3, [r7, #16]
 8015c40:	e07b      	b.n	8015d3a <USBPD_DPM_InitOS+0x19a>
  {
    OS_CREATE_QUEUE(PEQueueId[index], "QPE", 1, OS_ELEMENT_SIZE);
 8015c42:	2408      	movs	r4, #8
 8015c44:	1939      	adds	r1, r7, r4
 8015c46:	68f8      	ldr	r0, [r7, #12]
 8015c48:	2300      	movs	r3, #0
 8015c4a:	2204      	movs	r2, #4
 8015c4c:	f7fd f9d0 	bl	8012ff0 <_txe_byte_allocate>
 8015c50:	0003      	movs	r3, r0
 8015c52:	617b      	str	r3, [r7, #20]
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d000      	beq.n	8015c5c <USBPD_DPM_InitOS+0xbc>
 8015c5a:	e072      	b.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
 8015c5c:	693a      	ldr	r2, [r7, #16]
 8015c5e:	0013      	movs	r3, r2
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	1a9b      	subs	r3, r3, r2
 8015c64:	00db      	lsls	r3, r3, #3
 8015c66:	4a3e      	ldr	r2, [pc, #248]	@ (8015d60 <USBPD_DPM_InitOS+0x1c0>)
 8015c68:	1898      	adds	r0, r3, r2
 8015c6a:	68bb      	ldr	r3, [r7, #8]
 8015c6c:	493d      	ldr	r1, [pc, #244]	@ (8015d64 <USBPD_DPM_InitOS+0x1c4>)
 8015c6e:	2238      	movs	r2, #56	@ 0x38
 8015c70:	9201      	str	r2, [sp, #4]
 8015c72:	2204      	movs	r2, #4
 8015c74:	9200      	str	r2, [sp, #0]
 8015c76:	2201      	movs	r2, #1
 8015c78:	f7fd face 	bl	8013218 <_txe_queue_create>
 8015c7c:	0003      	movs	r3, r0
 8015c7e:	617b      	str	r3, [r7, #20]
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d15d      	bne.n	8015d42 <USBPD_DPM_InitOS+0x1a2>

    if (index == USBPD_PORT_0)
 8015c86:	693b      	ldr	r3, [r7, #16]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d127      	bne.n	8015cdc <USBPD_DPM_InitOS+0x13c>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_0, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_0);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_0], PE_0, USBPD_PE_Task,
 8015c8c:	2380      	movs	r3, #128	@ 0x80
 8015c8e:	00da      	lsls	r2, r3, #3
 8015c90:	1939      	adds	r1, r7, r4
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	2300      	movs	r3, #0
 8015c96:	f7fd f9ab 	bl	8012ff0 <_txe_byte_allocate>
 8015c9a:	0003      	movs	r3, r0
 8015c9c:	617b      	str	r3, [r7, #20]
 8015c9e:	697b      	ldr	r3, [r7, #20]
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d14e      	bne.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
 8015ca4:	68bb      	ldr	r3, [r7, #8]
 8015ca6:	693d      	ldr	r5, [r7, #16]
 8015ca8:	4c2f      	ldr	r4, [pc, #188]	@ (8015d68 <USBPD_DPM_InitOS+0x1c8>)
 8015caa:	4930      	ldr	r1, [pc, #192]	@ (8015d6c <USBPD_DPM_InitOS+0x1cc>)
 8015cac:	4830      	ldr	r0, [pc, #192]	@ (8015d70 <USBPD_DPM_InitOS+0x1d0>)
 8015cae:	22b0      	movs	r2, #176	@ 0xb0
 8015cb0:	9206      	str	r2, [sp, #24]
 8015cb2:	2201      	movs	r2, #1
 8015cb4:	9205      	str	r2, [sp, #20]
 8015cb6:	2200      	movs	r2, #0
 8015cb8:	9204      	str	r2, [sp, #16]
 8015cba:	2201      	movs	r2, #1
 8015cbc:	9203      	str	r2, [sp, #12]
 8015cbe:	2201      	movs	r2, #1
 8015cc0:	9202      	str	r2, [sp, #8]
 8015cc2:	2280      	movs	r2, #128	@ 0x80
 8015cc4:	00d2      	lsls	r2, r2, #3
 8015cc6:	9201      	str	r2, [sp, #4]
 8015cc8:	9300      	str	r3, [sp, #0]
 8015cca:	002b      	movs	r3, r5
 8015ccc:	0022      	movs	r2, r4
 8015cce:	f7fd fc0b 	bl	80134e8 <_txe_thread_create>
 8015cd2:	0003      	movs	r3, r0
 8015cd4:	617b      	str	r3, [r7, #20]
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d132      	bne.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#if USBPD_PORT_COUNT > 1
    if (index == USBPD_PORT_1)
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	2b01      	cmp	r3, #1
 8015ce0:	d128      	bne.n	8015d34 <USBPD_DPM_InitOS+0x194>
    {
      /* Tasks definition */
      OS_DEFINE_TASK(PE_1, USBPD_PE_Task, OS_PE_PRIORITY,  OS_PE_STACK_SIZE,  USBPD_PORT_1);
      OS_CREATE_TASK(DPM_PEThreadId_Table[USBPD_PORT_1], PE_1, USBPD_PE_Task,
 8015ce2:	2380      	movs	r3, #128	@ 0x80
 8015ce4:	00da      	lsls	r2, r3, #3
 8015ce6:	2308      	movs	r3, #8
 8015ce8:	18f9      	adds	r1, r7, r3
 8015cea:	68f8      	ldr	r0, [r7, #12]
 8015cec:	2300      	movs	r3, #0
 8015cee:	f7fd f97f 	bl	8012ff0 <_txe_byte_allocate>
 8015cf2:	0003      	movs	r3, r0
 8015cf4:	617b      	str	r3, [r7, #20]
 8015cf6:	697b      	ldr	r3, [r7, #20]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d122      	bne.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
 8015cfc:	68bb      	ldr	r3, [r7, #8]
 8015cfe:	693d      	ldr	r5, [r7, #16]
 8015d00:	4c19      	ldr	r4, [pc, #100]	@ (8015d68 <USBPD_DPM_InitOS+0x1c8>)
 8015d02:	491c      	ldr	r1, [pc, #112]	@ (8015d74 <USBPD_DPM_InitOS+0x1d4>)
 8015d04:	481c      	ldr	r0, [pc, #112]	@ (8015d78 <USBPD_DPM_InitOS+0x1d8>)
 8015d06:	22b0      	movs	r2, #176	@ 0xb0
 8015d08:	9206      	str	r2, [sp, #24]
 8015d0a:	2201      	movs	r2, #1
 8015d0c:	9205      	str	r2, [sp, #20]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	9204      	str	r2, [sp, #16]
 8015d12:	2201      	movs	r2, #1
 8015d14:	9203      	str	r2, [sp, #12]
 8015d16:	2201      	movs	r2, #1
 8015d18:	9202      	str	r2, [sp, #8]
 8015d1a:	2280      	movs	r2, #128	@ 0x80
 8015d1c:	00d2      	lsls	r2, r2, #3
 8015d1e:	9201      	str	r2, [sp, #4]
 8015d20:	9300      	str	r3, [sp, #0]
 8015d22:	002b      	movs	r3, r5
 8015d24:	0022      	movs	r2, r4
 8015d26:	f7fd fbdf 	bl	80134e8 <_txe_thread_create>
 8015d2a:	0003      	movs	r3, r0
 8015d2c:	617b      	str	r3, [r7, #20]
 8015d2e:	697b      	ldr	r3, [r7, #20]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d106      	bne.n	8015d42 <USBPD_DPM_InitOS+0x1a2>
  for (uint32_t index = 0; index < USBPD_PORT_COUNT; index++)
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	3301      	adds	r3, #1
 8015d38:	613b      	str	r3, [r7, #16]
 8015d3a:	693b      	ldr	r3, [r7, #16]
 8015d3c:	2b01      	cmp	r3, #1
 8015d3e:	d980      	bls.n	8015c42 <USBPD_DPM_InitOS+0xa2>
                     OS_PE_PRIORITY, OS_PE_STACK_SIZE, (int)index);
    }
#endif /* USBPD_PORT_COUNT > 1*/
  }
error:
 8015d40:	46c0      	nop			@ (mov r8, r8)

  return _retr;
 8015d42:	697b      	ldr	r3, [r7, #20]
}
 8015d44:	0018      	movs	r0, r3
 8015d46:	46bd      	mov	sp, r7
 8015d48:	b006      	add	sp, #24
 8015d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8015d4c:	08016730 	.word	0x08016730
 8015d50:	2000af58 	.word	0x2000af58
 8015d54:	08015e4d 	.word	0x08015e4d
 8015d58:	08016738 	.word	0x08016738
 8015d5c:	2000af90 	.word	0x2000af90
 8015d60:	2000b040 	.word	0x2000b040
 8015d64:	0801673c 	.word	0x0801673c
 8015d68:	08015de1 	.word	0x08015de1
 8015d6c:	08016740 	.word	0x08016740
 8015d70:	2000adf8 	.word	0x2000adf8
 8015d74:	08016748 	.word	0x08016748
 8015d78:	2000aea8 	.word	0x2000aea8

08015d7c <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b084      	sub	sp, #16
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	0002      	movs	r2, r0
 8015d84:	1dfb      	adds	r3, r7, #7
 8015d86:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 8015d88:	4b09      	ldr	r3, [pc, #36]	@ (8015db0 <USBPD_PE_TaskWakeUp+0x34>)
 8015d8a:	60fb      	str	r3, [r7, #12]
 8015d8c:	1dfb      	adds	r3, r7, #7
 8015d8e:	781a      	ldrb	r2, [r3, #0]
 8015d90:	0013      	movs	r3, r2
 8015d92:	00db      	lsls	r3, r3, #3
 8015d94:	1a9b      	subs	r3, r3, r2
 8015d96:	00db      	lsls	r3, r3, #3
 8015d98:	4a06      	ldr	r2, [pc, #24]	@ (8015db4 <USBPD_PE_TaskWakeUp+0x38>)
 8015d9a:	189b      	adds	r3, r3, r2
 8015d9c:	220c      	movs	r2, #12
 8015d9e:	18b9      	adds	r1, r7, r2
 8015da0:	2200      	movs	r2, #0
 8015da2:	0018      	movs	r0, r3
 8015da4:	f7fd fb34 	bl	8013410 <_txe_queue_send>
}
 8015da8:	46c0      	nop			@ (mov r8, r8)
 8015daa:	46bd      	mov	sp, r7
 8015dac:	b004      	add	sp, #16
 8015dae:	bd80      	pop	{r7, pc}
 8015db0:	0000ffff 	.word	0x0000ffff
 8015db4:	2000b040 	.word	0x2000b040

08015db8 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b082      	sub	sp, #8
 8015dbc:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 8015dbe:	4b06      	ldr	r3, [pc, #24]	@ (8015dd8 <USBPD_DPM_CADTaskWakeUp+0x20>)
 8015dc0:	607b      	str	r3, [r7, #4]
 8015dc2:	1d39      	adds	r1, r7, #4
 8015dc4:	4b05      	ldr	r3, [pc, #20]	@ (8015ddc <USBPD_DPM_CADTaskWakeUp+0x24>)
 8015dc6:	2200      	movs	r2, #0
 8015dc8:	0018      	movs	r0, r3
 8015dca:	f7fd fb21 	bl	8013410 <_txe_queue_send>
}
 8015dce:	46c0      	nop			@ (mov r8, r8)
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	b002      	add	sp, #8
 8015dd4:	bd80      	pop	{r7, pc}
 8015dd6:	46c0      	nop			@ (mov r8, r8)
 8015dd8:	0000ffff 	.word	0x0000ffff
 8015ddc:	2000af58 	.word	0x2000af58

08015de0 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_PE_Task)
{
 8015de0:	b590      	push	{r4, r7, lr}
 8015de2:	b087      	sub	sp, #28
 8015de4:	af00      	add	r7, sp, #0
 8015de6:	6078      	str	r0, [r7, #4]
  uint8_t _port = (uint32_t)argument;
 8015de8:	2317      	movs	r3, #23
 8015dea:	18fb      	adds	r3, r7, r3
 8015dec:	687a      	ldr	r2, [r7, #4]
 8015dee:	701a      	strb	r2, [r3, #0]
  UTIL_LPM_SetOffMode(0 == _port ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

  for (;;)
  {
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 8015df0:	2317      	movs	r3, #23
 8015df2:	18fb      	adds	r3, r7, r3
 8015df4:	781b      	ldrb	r3, [r3, #0]
 8015df6:	4a13      	ldr	r2, [pc, #76]	@ (8015e44 <USBPD_PE_Task+0x64>)
 8015df8:	009b      	lsls	r3, r3, #2
 8015dfa:	18d3      	adds	r3, r2, r3
 8015dfc:	785b      	ldrb	r3, [r3, #1]
 8015dfe:	06db      	lsls	r3, r3, #27
 8015e00:	0fdb      	lsrs	r3, r3, #31
 8015e02:	b2db      	uxtb	r3, r3
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d105      	bne.n	8015e14 <USBPD_PE_Task+0x34>
    {
      /* if the port is no more connected, suspend the PE thread */
      OS_TASK_SUSPEND(OS_TASK_GETID());
 8015e08:	f7fc f94e 	bl	80120a8 <_tx_thread_identify>
 8015e0c:	0003      	movs	r3, r0
 8015e0e:	0018      	movs	r0, r3
 8015e10:	f7fd fc7c 	bl	801370c <_txe_thread_suspend>
    }

    _timing = USBPD_PE_StateMachine_DRP(_port);
 8015e14:	2417      	movs	r4, #23
 8015e16:	193b      	adds	r3, r7, r4
 8015e18:	781b      	ldrb	r3, [r3, #0]
 8015e1a:	0018      	movs	r0, r3
 8015e1c:	f7ea fc55 	bl	80006ca <USBPD_PE_StateMachine_DRP>
 8015e20:	0003      	movs	r3, r0
 8015e22:	613b      	str	r3, [r7, #16]
 /* _DRP || ( _SRC && _SNK) */

    OS_GETMESSAGE_QUEUE(PEQueueId[_port], _timing);
 8015e24:	193b      	adds	r3, r7, r4
 8015e26:	781a      	ldrb	r2, [r3, #0]
 8015e28:	0013      	movs	r3, r2
 8015e2a:	00db      	lsls	r3, r3, #3
 8015e2c:	1a9b      	subs	r3, r3, r2
 8015e2e:	00db      	lsls	r3, r3, #3
 8015e30:	4a05      	ldr	r2, [pc, #20]	@ (8015e48 <USBPD_PE_Task+0x68>)
 8015e32:	189b      	adds	r3, r3, r2
 8015e34:	693a      	ldr	r2, [r7, #16]
 8015e36:	210c      	movs	r1, #12
 8015e38:	1879      	adds	r1, r7, r1
 8015e3a:	0018      	movs	r0, r3
 8015e3c:	f7fd fa9c 	bl	8013378 <_txe_queue_receive>
    if (DPM_Params[_port].PE_IsConnected == USBPD_FALSE)
 8015e40:	e7d6      	b.n	8015df0 <USBPD_PE_Task+0x10>
 8015e42:	46c0      	nop			@ (mov r8, r8)
 8015e44:	2000b0b0 	.word	0x2000b0b0
 8015e48:	2000b040 	.word	0x2000b040

08015e4c <USBPD_CAD_Task>:
  * @brief  Main task for CAD layer
  * @param  argument Not used
  * @retval None
  */
DEF_TASK_FUNCTION(USBPD_CAD_Task)
{
 8015e4c:	b580      	push	{r7, lr}
 8015e4e:	b084      	sub	sp, #16
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
#ifdef _LOW_POWER
  UTIL_LPM_SetOffMode(LPM_CAD, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
  for (;;)
  {
    _timing = USBPD_CAD_Process();
 8015e54:	f7ea fac0 	bl	80003d8 <USBPD_CAD_Process>
 8015e58:	0003      	movs	r3, r0
 8015e5a:	60fb      	str	r3, [r7, #12]
    OS_GETMESSAGE_QUEUE(CADQueueId, _timing);
 8015e5c:	68fa      	ldr	r2, [r7, #12]
 8015e5e:	2308      	movs	r3, #8
 8015e60:	18f9      	adds	r1, r7, r3
 8015e62:	4b03      	ldr	r3, [pc, #12]	@ (8015e70 <USBPD_CAD_Task+0x24>)
 8015e64:	0018      	movs	r0, r3
 8015e66:	f7fd fa87 	bl	8013378 <_txe_queue_receive>
    _timing = USBPD_CAD_Process();
 8015e6a:	46c0      	nop			@ (mov r8, r8)
 8015e6c:	e7f2      	b.n	8015e54 <USBPD_CAD_Task+0x8>
 8015e6e:	46c0      	nop			@ (mov r8, r8)
 8015e70:	2000af58 	.word	0x2000af58

08015e74 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b084      	sub	sp, #16
 8015e78:	af00      	add	r7, sp, #0
 8015e7a:	603a      	str	r2, [r7, #0]
 8015e7c:	1dfb      	adds	r3, r7, #7
 8015e7e:	1c02      	adds	r2, r0, #0
 8015e80:	701a      	strb	r2, [r3, #0]
 8015e82:	1dbb      	adds	r3, r7, #6
 8015e84:	1c0a      	adds	r2, r1, #0
 8015e86:	701a      	strb	r2, [r3, #0]
 /* _TRACE */
  (void)(Cc);
  switch (State)
 8015e88:	1dbb      	adds	r3, r7, #6
 8015e8a:	781b      	ldrb	r3, [r3, #0]
 8015e8c:	2b04      	cmp	r3, #4
 8015e8e:	d009      	beq.n	8015ea4 <USBPD_DPM_CADCallback+0x30>
 8015e90:	dd00      	ble.n	8015e94 <USBPD_DPM_CADCallback+0x20>
 8015e92:	e06f      	b.n	8015f74 <USBPD_DPM_CADCallback+0x100>
 8015e94:	2b03      	cmp	r3, #3
 8015e96:	d01d      	beq.n	8015ed4 <USBPD_DPM_CADCallback+0x60>
 8015e98:	dc6c      	bgt.n	8015f74 <USBPD_DPM_CADCallback+0x100>
 8015e9a:	2b01      	cmp	r3, #1
 8015e9c:	d01a      	beq.n	8015ed4 <USBPD_DPM_CADCallback+0x60>
 8015e9e:	2b02      	cmp	r3, #2
 8015ea0:	d00c      	beq.n	8015ebc <USBPD_DPM_CADCallback+0x48>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 8015ea2:	e067      	b.n	8015f74 <USBPD_DPM_CADCallback+0x100>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 8015ea4:	1dfb      	adds	r3, r7, #7
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	2104      	movs	r1, #4
 8015eaa:	0018      	movs	r0, r3
 8015eac:	f000 f938 	bl	8016120 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8015eb0:	1dfb      	adds	r3, r7, #7
 8015eb2:	781b      	ldrb	r3, [r3, #0]
 8015eb4:	0018      	movs	r0, r3
 8015eb6:	f000 f867 	bl	8015f88 <DPM_StartPETask>
      break;
 8015eba:	e05c      	b.n	8015f76 <USBPD_DPM_CADCallback+0x102>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 8015ebc:	1dfb      	adds	r3, r7, #7
 8015ebe:	781b      	ldrb	r3, [r3, #0]
 8015ec0:	2102      	movs	r1, #2
 8015ec2:	0018      	movs	r0, r3
 8015ec4:	f000 f92c 	bl	8016120 <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 8015ec8:	1dfb      	adds	r3, r7, #7
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	0018      	movs	r0, r3
 8015ece:	f000 f85b 	bl	8015f88 <DPM_StartPETask>
      break;
 8015ed2:	e050      	b.n	8015f76 <USBPD_DPM_CADCallback+0x102>
      uint8_t _timeout = 0;
 8015ed4:	230f      	movs	r3, #15
 8015ed6:	18fb      	adds	r3, r7, r3
 8015ed8:	2200      	movs	r2, #0
 8015eda:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 8015edc:	1dfb      	adds	r3, r7, #7
 8015ede:	781b      	ldrb	r3, [r3, #0]
 8015ee0:	0018      	movs	r0, r3
 8015ee2:	f7ff ff4b 	bl	8015d7c <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8015ee6:	e016      	b.n	8015f16 <USBPD_DPM_CADCallback+0xa2>
        (void)OS_DELAY(1);
 8015ee8:	2001      	movs	r0, #1
 8015eea:	f7fc f9fd 	bl	80122e8 <_tx_thread_sleep>
        _timeout++;
 8015eee:	210f      	movs	r1, #15
 8015ef0:	187b      	adds	r3, r7, r1
 8015ef2:	781a      	ldrb	r2, [r3, #0]
 8015ef4:	187b      	adds	r3, r7, r1
 8015ef6:	3201      	adds	r2, #1
 8015ef8:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 8015efa:	187b      	adds	r3, r7, r1
 8015efc:	781b      	ldrb	r3, [r3, #0]
 8015efe:	2b1e      	cmp	r3, #30
 8015f00:	d909      	bls.n	8015f16 <USBPD_DPM_CADCallback+0xa2>
          (void)OS_TASK_SUSPEND(&DPM_PEThreadId_Table[PortNum]);
 8015f02:	1dfb      	adds	r3, r7, #7
 8015f04:	781b      	ldrb	r3, [r3, #0]
 8015f06:	22b0      	movs	r2, #176	@ 0xb0
 8015f08:	435a      	muls	r2, r3
 8015f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8015f80 <USBPD_DPM_CADCallback+0x10c>)
 8015f0c:	18d3      	adds	r3, r2, r3
 8015f0e:	0018      	movs	r0, r3
 8015f10:	f7fd fbfc 	bl	801370c <_txe_thread_suspend>
          break;
 8015f14:	e009      	b.n	8015f2a <USBPD_DPM_CADCallback+0xb6>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 8015f16:	1dfb      	adds	r3, r7, #7
 8015f18:	781b      	ldrb	r3, [r3, #0]
 8015f1a:	4a19      	ldr	r2, [pc, #100]	@ (8015f80 <USBPD_DPM_CADCallback+0x10c>)
 8015f1c:	21b0      	movs	r1, #176	@ 0xb0
 8015f1e:	434b      	muls	r3, r1
 8015f20:	18d3      	adds	r3, r2, r3
 8015f22:	3330      	adds	r3, #48	@ 0x30
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	2b03      	cmp	r3, #3
 8015f28:	d1de      	bne.n	8015ee8 <USBPD_DPM_CADCallback+0x74>
      USBPD_PE_StateMachine_Stop(PortNum);
 8015f2a:	1dfb      	adds	r3, r7, #7
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	0018      	movs	r0, r3
 8015f30:	f7ea fbc7 	bl	80006c2 <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8015f34:	1dfb      	adds	r3, r7, #7
 8015f36:	781a      	ldrb	r2, [r3, #0]
 8015f38:	4b12      	ldr	r3, [pc, #72]	@ (8015f84 <USBPD_DPM_CADCallback+0x110>)
 8015f3a:	0092      	lsls	r2, r2, #2
 8015f3c:	5cd1      	ldrb	r1, [r2, r3]
 8015f3e:	2010      	movs	r0, #16
 8015f40:	4381      	bics	r1, r0
 8015f42:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8015f44:	1dfb      	adds	r3, r7, #7
 8015f46:	781b      	ldrb	r3, [r3, #0]
 8015f48:	4a0e      	ldr	r2, [pc, #56]	@ (8015f84 <USBPD_DPM_CADCallback+0x110>)
 8015f4a:	009b      	lsls	r3, r3, #2
 8015f4c:	18d3      	adds	r3, r2, r3
 8015f4e:	785a      	ldrb	r2, [r3, #1]
 8015f50:	2107      	movs	r1, #7
 8015f52:	438a      	bics	r2, r1
 8015f54:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8015f56:	1dbb      	adds	r3, r7, #6
 8015f58:	781a      	ldrb	r2, [r3, #0]
 8015f5a:	1dfb      	adds	r3, r7, #7
 8015f5c:	781b      	ldrb	r3, [r3, #0]
 8015f5e:	0011      	movs	r1, r2
 8015f60:	0018      	movs	r0, r3
 8015f62:	f000 f8dd 	bl	8016120 <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 8015f66:	1dfb      	adds	r3, r7, #7
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	2169      	movs	r1, #105	@ 0x69
 8015f6c:	0018      	movs	r0, r3
 8015f6e:	f000 f8e4 	bl	801613a <USBPD_DPM_Notification>
      break;
 8015f72:	e000      	b.n	8015f76 <USBPD_DPM_CADCallback+0x102>
      break;
 8015f74:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015f76:	46c0      	nop			@ (mov r8, r8)
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	b004      	add	sp, #16
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	46c0      	nop			@ (mov r8, r8)
 8015f80:	2000adf8 	.word	0x2000adf8
 8015f84:	2000b0b0 	.word	0x2000b0b0

08015f88 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b082      	sub	sp, #8
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	0002      	movs	r2, r0
 8015f90:	1dfb      	adds	r3, r7, #7
 8015f92:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 8015f94:	1dfb      	adds	r3, r7, #7
 8015f96:	781b      	ldrb	r3, [r3, #0]
 8015f98:	0018      	movs	r0, r3
 8015f9a:	f7ea fb8c 	bl	80006b6 <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 8015f9e:	1dfb      	adds	r3, r7, #7
 8015fa0:	781b      	ldrb	r3, [r3, #0]
 8015fa2:	2b01      	cmp	r3, #1
 8015fa4:	d809      	bhi.n	8015fba <DPM_StartPETask+0x32>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 8015fa6:	1dfb      	adds	r3, r7, #7
 8015fa8:	781b      	ldrb	r3, [r3, #0]
 8015faa:	22b0      	movs	r2, #176	@ 0xb0
 8015fac:	435a      	muls	r2, r3
 8015fae:	4b09      	ldr	r3, [pc, #36]	@ (8015fd4 <DPM_StartPETask+0x4c>)
 8015fb0:	18d3      	adds	r3, r2, r3
 8015fb2:	0018      	movs	r0, r3
 8015fb4:	f7fd fb8a 	bl	80136cc <_txe_thread_resume>
      break;
 8015fb8:	e002      	b.n	8015fc0 <DPM_StartPETask+0x38>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 8015fba:	f000 f80d 	bl	8015fd8 <USBPD_DPM_ErrorHandler>
      break;
 8015fbe:	46c0      	nop			@ (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 8015fc0:	1dfb      	adds	r3, r7, #7
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	2168      	movs	r1, #104	@ 0x68
 8015fc6:	0018      	movs	r0, r3
 8015fc8:	f000 f8b7 	bl	801613a <USBPD_DPM_Notification>
}
 8015fcc:	46c0      	nop			@ (mov r8, r8)
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	b002      	add	sp, #8
 8015fd2:	bd80      	pop	{r7, pc}
 8015fd4:	2000adf8 	.word	0x2000adf8

08015fd8 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 8015fd8:	b580      	push	{r7, lr}
 8015fda:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 8015fdc:	46c0      	nop			@ (mov r8, r8)
 8015fde:	e7fd      	b.n	8015fdc <USBPD_DPM_ErrorHandler+0x4>

08015fe0 <USBPD_PWR_IF_SetProfile>:
  * @brief  Sets the required power profile, now it works only with Fixed ones
  * @param  PortNum Port number
  * @retval USBPD status
*/
USBPD_StatusTypeDef USBPD_PWR_IF_SetProfile(uint8_t PortNum)
{
 8015fe0:	b580      	push	{r7, lr}
 8015fe2:	b084      	sub	sp, #16
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	0002      	movs	r2, r0
 8015fe8:	1dfb      	adds	r3, r7, #7
 8015fea:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SetProfile */
  USBPD_StatusTypeDef      _status = USBPD_ERROR;
 8015fec:	210f      	movs	r1, #15
 8015fee:	187b      	adds	r3, r7, r1
 8015ff0:	2202      	movs	r2, #2
 8015ff2:	701a      	strb	r2, [r3, #0]
/*   if (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum, 5000, 3000, 3000))
  {
     _status = USBPD_OK;
  }
 */
   return _status;
 8015ff4:	187b      	adds	r3, r7, r1
 8015ff6:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SetProfile */
}
 8015ff8:	0018      	movs	r0, r3
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	b004      	add	sp, #16
 8015ffe:	bd80      	pop	{r7, pc}

08016000 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8016000:	b580      	push	{r7, lr}
 8016002:	b084      	sub	sp, #16
 8016004:	af00      	add	r7, sp, #0
 8016006:	0002      	movs	r2, r0
 8016008:	1dfb      	adds	r3, r7, #7
 801600a:	701a      	strb	r2, [r3, #0]
 801600c:	1dbb      	adds	r3, r7, #6
 801600e:	1c0a      	adds	r2, r1, #0
 8016010:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8016012:	230f      	movs	r3, #15
 8016014:	18fb      	adds	r3, r7, r3
 8016016:	2202      	movs	r2, #2
 8016018:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801601a:	1dfb      	adds	r3, r7, #7
 801601c:	781b      	ldrb	r3, [r3, #0]
 801601e:	2b01      	cmp	r3, #1
 8016020:	d901      	bls.n	8016026 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 8016022:	2302      	movs	r3, #2
 8016024:	e024      	b.n	8016070 <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8016026:	1dfb      	adds	r3, r7, #7
 8016028:	781b      	ldrb	r3, [r3, #0]
 801602a:	2208      	movs	r2, #8
 801602c:	18ba      	adds	r2, r7, r2
 801602e:	0011      	movs	r1, r2
 8016030:	0018      	movs	r0, r3
 8016032:	f000 f9e4 	bl	80163fe <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8016036:	1dbb      	adds	r3, r7, #6
 8016038:	781b      	ldrb	r3, [r3, #0]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d10a      	bne.n	8016054 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801603e:	68bb      	ldr	r3, [r7, #8]
 8016040:	4a0d      	ldr	r2, [pc, #52]	@ (8016078 <USBPD_PWR_IF_SupplyReady+0x78>)
 8016042:	4293      	cmp	r3, r2
 8016044:	d801      	bhi.n	801604a <USBPD_PWR_IF_SupplyReady+0x4a>
 8016046:	2200      	movs	r2, #0
 8016048:	e000      	b.n	801604c <USBPD_PWR_IF_SupplyReady+0x4c>
 801604a:	2202      	movs	r2, #2
 801604c:	230f      	movs	r3, #15
 801604e:	18fb      	adds	r3, r7, r3
 8016050:	701a      	strb	r2, [r3, #0]
 8016052:	e00a      	b.n	801606a <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 8016054:	68ba      	ldr	r2, [r7, #8]
 8016056:	23af      	movs	r3, #175	@ 0xaf
 8016058:	011b      	lsls	r3, r3, #4
 801605a:	429a      	cmp	r2, r3
 801605c:	d901      	bls.n	8016062 <USBPD_PWR_IF_SupplyReady+0x62>
 801605e:	2200      	movs	r2, #0
 8016060:	e000      	b.n	8016064 <USBPD_PWR_IF_SupplyReady+0x64>
 8016062:	2202      	movs	r2, #2
 8016064:	230f      	movs	r3, #15
 8016066:	18fb      	adds	r3, r7, r3
 8016068:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801606a:	230f      	movs	r3, #15
 801606c:	18fb      	adds	r3, r7, r3
 801606e:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8016070:	0018      	movs	r0, r3
 8016072:	46bd      	mov	sp, r7
 8016074:	b004      	add	sp, #16
 8016076:	bd80      	pop	{r7, pc}
 8016078:	000002ed 	.word	0x000002ed

0801607c <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801607c:	b580      	push	{r7, lr}
 801607e:	b084      	sub	sp, #16
 8016080:	af00      	add	r7, sp, #0
 8016082:	0002      	movs	r2, r0
 8016084:	1dfb      	adds	r3, r7, #7
 8016086:	701a      	strb	r2, [r3, #0]
 8016088:	1dbb      	adds	r3, r7, #6
 801608a:	1c0a      	adds	r2, r1, #0
 801608c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801608e:	230f      	movs	r3, #15
 8016090:	18fb      	adds	r3, r7, r3
 8016092:	2200      	movs	r2, #0
 8016094:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8016096:	1dfb      	adds	r3, r7, #7
 8016098:	781b      	ldrb	r3, [r3, #0]
 801609a:	0018      	movs	r0, r3
 801609c:	f7fa fbf0 	bl	8010880 <HW_IF_PWR_GetVoltage>
 80160a0:	0003      	movs	r3, r0
 80160a2:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 80160a4:	1dbb      	adds	r3, r7, #6
 80160a6:	781b      	ldrb	r3, [r3, #0]
 80160a8:	2b02      	cmp	r3, #2
 80160aa:	d018      	beq.n	80160de <USBPD_PWR_IF_GetVBUSStatus+0x62>
 80160ac:	dc21      	bgt.n	80160f2 <USBPD_PWR_IF_GetVBUSStatus+0x76>
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d002      	beq.n	80160b8 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 80160b2:	2b01      	cmp	r3, #1
 80160b4:	d009      	beq.n	80160ca <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 80160b6:	e01c      	b.n	80160f2 <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	4a15      	ldr	r2, [pc, #84]	@ (8016110 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 80160bc:	4293      	cmp	r3, r2
 80160be:	d81a      	bhi.n	80160f6 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 80160c0:	230f      	movs	r3, #15
 80160c2:	18fb      	adds	r3, r7, r3
 80160c4:	2201      	movs	r2, #1
 80160c6:	701a      	strb	r2, [r3, #0]
    break;
 80160c8:	e015      	b.n	80160f6 <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 80160ca:	68ba      	ldr	r2, [r7, #8]
 80160cc:	23af      	movs	r3, #175	@ 0xaf
 80160ce:	011b      	lsls	r3, r3, #4
 80160d0:	429a      	cmp	r2, r3
 80160d2:	d312      	bcc.n	80160fa <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 80160d4:	230f      	movs	r3, #15
 80160d6:	18fb      	adds	r3, r7, r3
 80160d8:	2201      	movs	r2, #1
 80160da:	701a      	strb	r2, [r3, #0]
    break;
 80160dc:	e00d      	b.n	80160fa <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 80160de:	68ba      	ldr	r2, [r7, #8]
 80160e0:	23af      	movs	r3, #175	@ 0xaf
 80160e2:	011b      	lsls	r3, r3, #4
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d20a      	bcs.n	80160fe <USBPD_PWR_IF_GetVBUSStatus+0x82>
 80160e8:	230f      	movs	r3, #15
 80160ea:	18fb      	adds	r3, r7, r3
 80160ec:	2201      	movs	r2, #1
 80160ee:	701a      	strb	r2, [r3, #0]
    break;
 80160f0:	e005      	b.n	80160fe <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 80160f2:	46c0      	nop			@ (mov r8, r8)
 80160f4:	e004      	b.n	8016100 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 80160f6:	46c0      	nop			@ (mov r8, r8)
 80160f8:	e002      	b.n	8016100 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 80160fa:	46c0      	nop			@ (mov r8, r8)
 80160fc:	e000      	b.n	8016100 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 80160fe:	46c0      	nop			@ (mov r8, r8)
  }
  return _status;
 8016100:	230f      	movs	r3, #15
 8016102:	18fb      	adds	r3, r7, r3
 8016104:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 8016106:	0018      	movs	r0, r3
 8016108:	46bd      	mov	sp, r7
 801610a:	b004      	add	sp, #16
 801610c:	bd80      	pop	{r7, pc}
 801610e:	46c0      	nop			@ (mov r8, r8)
 8016110:	000002ed 	.word	0x000002ed

08016114 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */
  return USBPD_OK;
 8016118:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 801611a:	0018      	movs	r0, r3
 801611c:	46bd      	mov	sp, r7
 801611e:	bd80      	pop	{r7, pc}

08016120 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b082      	sub	sp, #8
 8016124:	af00      	add	r7, sp, #0
 8016126:	0002      	movs	r2, r0
 8016128:	1dfb      	adds	r3, r7, #7
 801612a:	701a      	strb	r2, [r3, #0]
 801612c:	1dbb      	adds	r3, r7, #6
 801612e:	1c0a      	adds	r2, r1, #0
 8016130:	701a      	strb	r2, [r3, #0]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 8016132:	46c0      	nop			@ (mov r8, r8)
 8016134:	46bd      	mov	sp, r7
 8016136:	b002      	add	sp, #8
 8016138:	bd80      	pop	{r7, pc}

0801613a <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801613a:	b580      	push	{r7, lr}
 801613c:	b082      	sub	sp, #8
 801613e:	af00      	add	r7, sp, #0
 8016140:	0002      	movs	r2, r0
 8016142:	1dfb      	adds	r3, r7, #7
 8016144:	701a      	strb	r2, [r3, #0]
 8016146:	1dbb      	adds	r3, r7, #6
 8016148:	1c0a      	adds	r2, r1, #0
 801614a:	701a      	strb	r2, [r3, #0]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 801614c:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801614e:	46c0      	nop			@ (mov r8, r8)
 8016150:	46bd      	mov	sp, r7
 8016152:	b002      	add	sp, #8
 8016154:	bd80      	pop	{r7, pc}

08016156 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 8016156:	b580      	push	{r7, lr}
 8016158:	b082      	sub	sp, #8
 801615a:	af00      	add	r7, sp, #0
 801615c:	6039      	str	r1, [r7, #0]
 801615e:	0011      	movs	r1, r2
 8016160:	1dfb      	adds	r3, r7, #7
 8016162:	1c02      	adds	r2, r0, #0
 8016164:	701a      	strb	r2, [r3, #0]
 8016166:	1dbb      	adds	r3, r7, #6
 8016168:	1c0a      	adds	r2, r1, #0
 801616a:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 801616c:	46c0      	nop			@ (mov r8, r8)
 801616e:	46bd      	mov	sp, r7
 8016170:	b002      	add	sp, #8
 8016172:	bd80      	pop	{r7, pc}

08016174 <USBPD_DPM_SetupNewPower>:
  * @brief  Request the DPM to setup the new power level.
  * @param  PortNum The current port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_SetupNewPower(uint8_t PortNum)
{
 8016174:	b580      	push	{r7, lr}
 8016176:	b082      	sub	sp, #8
 8016178:	af00      	add	r7, sp, #0
 801617a:	0002      	movs	r2, r0
 801617c:	1dfb      	adds	r3, r7, #7
 801617e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetupNewPower */
  return USBPD_PWR_IF_SetProfile(PortNum);
 8016180:	1dfb      	adds	r3, r7, #7
 8016182:	781b      	ldrb	r3, [r3, #0]
 8016184:	0018      	movs	r0, r3
 8016186:	f7ff ff2b 	bl	8015fe0 <USBPD_PWR_IF_SetProfile>
 801618a:	0003      	movs	r3, r0
/* USER CODE END USBPD_DPM_SetupNewPower */
}
 801618c:	0018      	movs	r0, r3
 801618e:	46bd      	mov	sp, r7
 8016190:	b002      	add	sp, #8
 8016192:	bd80      	pop	{r7, pc}

08016194 <USBPD_DPM_EvaluatePowerRoleSwap>:
  * @brief  Evaluate the swap request from PE.
  * @param  PortNum The current port number
  * @retval USBPD_ACCEPT, USBPD_WAIT, USBPD_REJECT
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluatePowerRoleSwap(uint8_t PortNum)
{
 8016194:	b580      	push	{r7, lr}
 8016196:	b082      	sub	sp, #8
 8016198:	af00      	add	r7, sp, #0
 801619a:	0002      	movs	r2, r0
 801619c:	1dfb      	adds	r3, r7, #7
 801619e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluatePowerRoleSwap */
  return USBPD_ACCEPT;
 80161a0:	230a      	movs	r3, #10
/* USER CODE END USBPD_DPM_EvaluatePowerRoleSwap */
}
 80161a2:	0018      	movs	r0, r3
 80161a4:	46bd      	mov	sp, r7
 80161a6:	b002      	add	sp, #8
 80161a8:	bd80      	pop	{r7, pc}

080161aa <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 80161aa:	b580      	push	{r7, lr}
 80161ac:	b084      	sub	sp, #16
 80161ae:	af00      	add	r7, sp, #0
 80161b0:	60ba      	str	r2, [r7, #8]
 80161b2:	607b      	str	r3, [r7, #4]
 80161b4:	230f      	movs	r3, #15
 80161b6:	18fb      	adds	r3, r7, r3
 80161b8:	1c02      	adds	r2, r0, #0
 80161ba:	701a      	strb	r2, [r3, #0]
 80161bc:	230e      	movs	r3, #14
 80161be:	18fb      	adds	r3, r7, r3
 80161c0:	1c0a      	adds	r2, r1, #0
 80161c2:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 80161c4:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 80161c6:	46c0      	nop			@ (mov r8, r8)
 80161c8:	46bd      	mov	sp, r7
 80161ca:	b004      	add	sp, #16
 80161cc:	bd80      	pop	{r7, pc}

080161ce <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 80161ce:	b580      	push	{r7, lr}
 80161d0:	b084      	sub	sp, #16
 80161d2:	af00      	add	r7, sp, #0
 80161d4:	60ba      	str	r2, [r7, #8]
 80161d6:	607b      	str	r3, [r7, #4]
 80161d8:	230f      	movs	r3, #15
 80161da:	18fb      	adds	r3, r7, r3
 80161dc:	1c02      	adds	r2, r0, #0
 80161de:	701a      	strb	r2, [r3, #0]
 80161e0:	230e      	movs	r3, #14
 80161e2:	18fb      	adds	r3, r7, r3
 80161e4:	1c0a      	adds	r2, r1, #0
 80161e6:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 80161e8:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 80161ea:	46c0      	nop			@ (mov r8, r8)
 80161ec:	46bd      	mov	sp, r7
 80161ee:	b004      	add	sp, #16
 80161f0:	bd80      	pop	{r7, pc}

080161f2 <USBPD_DPM_EvaluateRequest>:
  * @param  PortNum Port number
  * @param  PtrPowerObject  Pointer on the power data object
  * @retval USBPD status : USBPD_ACCEPT, USBPD_REJECT, USBPD_WAIT, USBPD_GOTOMIN
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateRequest(uint8_t PortNum, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 80161f2:	b580      	push	{r7, lr}
 80161f4:	b082      	sub	sp, #8
 80161f6:	af00      	add	r7, sp, #0
 80161f8:	0002      	movs	r2, r0
 80161fa:	6039      	str	r1, [r7, #0]
 80161fc:	1dfb      	adds	r3, r7, #7
 80161fe:	701a      	strb	r2, [r3, #0]
    Set power data object to initialize value.
    This parameter is used by the stack to start or not tPPSTimeout
    (in case of USBPD_CORE_PDO_TYPE_APDO, stack will wait for periodic request
    from the port partner in PPS mode).
  */
  *PtrPowerObject = USBPD_CORE_PDO_TYPE_FIXED;
 8016200:	683b      	ldr	r3, [r7, #0]
 8016202:	2200      	movs	r2, #0
 8016204:	601a      	str	r2, [r3, #0]

  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_EvaluateRequest");
  return USBPD_REJECT;
 8016206:	230c      	movs	r3, #12
/* USER CODE END USBPD_DPM_EvaluateRequest */
}
 8016208:	0018      	movs	r0, r3
 801620a:	46bd      	mov	sp, r7
 801620c:	b002      	add	sp, #8
 801620e:	bd80      	pop	{r7, pc}

08016210 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 8016210:	b580      	push	{r7, lr}
 8016212:	b084      	sub	sp, #16
 8016214:	af00      	add	r7, sp, #0
 8016216:	60b9      	str	r1, [r7, #8]
 8016218:	607a      	str	r2, [r7, #4]
 801621a:	230f      	movs	r3, #15
 801621c:	18fb      	adds	r3, r7, r3
 801621e:	1c02      	adds	r2, r0, #0
 8016220:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 8016222:	46c0      	nop			@ (mov r8, r8)
 8016224:	46bd      	mov	sp, r7
 8016226:	b004      	add	sp, #16
 8016228:	bd80      	pop	{r7, pc}

0801622a <USBPD_DPM_PowerRoleSwap>:
  * @param  CurrentRole the current role
  * @param  Status status on power role swap event
  * @retval None
  */
void USBPD_DPM_PowerRoleSwap(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_PRS_Status_TypeDef Status)
{
 801622a:	b580      	push	{r7, lr}
 801622c:	b082      	sub	sp, #8
 801622e:	af00      	add	r7, sp, #0
 8016230:	6039      	str	r1, [r7, #0]
 8016232:	0011      	movs	r1, r2
 8016234:	1dfb      	adds	r3, r7, #7
 8016236:	1c02      	adds	r2, r0, #0
 8016238:	701a      	strb	r2, [r3, #0]
 801623a:	1dbb      	adds	r3, r7, #6
 801623c:	1c0a      	adds	r2, r1, #0
 801623e:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_PowerRoleSwap */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_PowerRoleSwap");
/* USER CODE END USBPD_DPM_PowerRoleSwap */
}
 8016240:	46c0      	nop			@ (mov r8, r8)
 8016242:	46bd      	mov	sp, r7
 8016244:	b002      	add	sp, #8
 8016246:	bd80      	pop	{r7, pc}

08016248 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8016248:	b590      	push	{r4, r7, lr}
 801624a:	b083      	sub	sp, #12
 801624c:	af00      	add	r7, sp, #0
 801624e:	0004      	movs	r4, r0
 8016250:	0008      	movs	r0, r1
 8016252:	603a      	str	r2, [r7, #0]
 8016254:	0019      	movs	r1, r3
 8016256:	1dfb      	adds	r3, r7, #7
 8016258:	1c22      	adds	r2, r4, #0
 801625a:	701a      	strb	r2, [r3, #0]
 801625c:	1dbb      	adds	r3, r7, #6
 801625e:	1c02      	adds	r2, r0, #0
 8016260:	701a      	strb	r2, [r3, #0]
 8016262:	1d3b      	adds	r3, r7, #4
 8016264:	1c0a      	adds	r2, r1, #0
 8016266:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 8016268:	46c0      	nop			@ (mov r8, r8)
 801626a:	46bd      	mov	sp, r7
 801626c:	b003      	add	sp, #12
 801626e:	bd90      	pop	{r4, r7, pc}

08016270 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b082      	sub	sp, #8
 8016274:	af00      	add	r7, sp, #0
 8016276:	0002      	movs	r2, r0
 8016278:	1dfb      	adds	r3, r7, #7
 801627a:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801627c:	1dfb      	adds	r3, r7, #7
 801627e:	781b      	ldrb	r3, [r3, #0]
 8016280:	0018      	movs	r0, r3
 8016282:	f7ea f93f 	bl	8000504 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 8016286:	46c0      	nop			@ (mov r8, r8)
 8016288:	46bd      	mov	sp, r7
 801628a:	b002      	add	sp, #8
 801628c:	bd80      	pop	{r7, pc}
	...

08016290 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 8016290:	b580      	push	{r7, lr}
 8016292:	b084      	sub	sp, #16
 8016294:	af00      	add	r7, sp, #0
 8016296:	0002      	movs	r2, r0
 8016298:	1dfb      	adds	r3, r7, #7
 801629a:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801629c:	230f      	movs	r3, #15
 801629e:	18fb      	adds	r3, r7, r3
 80162a0:	220c      	movs	r2, #12
 80162a2:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 80162a4:	1dfb      	adds	r3, r7, #7
 80162a6:	781a      	ldrb	r2, [r3, #0]
 80162a8:	4b2c      	ldr	r3, [pc, #176]	@ (801635c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 80162aa:	2154      	movs	r1, #84	@ 0x54
 80162ac:	434a      	muls	r2, r1
 80162ae:	5cd3      	ldrb	r3, [r2, r3]
 80162b0:	07db      	lsls	r3, r3, #31
 80162b2:	0fdb      	lsrs	r3, r3, #31
 80162b4:	b2db      	uxtb	r3, r3
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d015      	beq.n	80162e6 <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 80162ba:	1dfb      	adds	r3, r7, #7
 80162bc:	781a      	ldrb	r2, [r3, #0]
 80162be:	4b27      	ldr	r3, [pc, #156]	@ (801635c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 80162c0:	2154      	movs	r1, #84	@ 0x54
 80162c2:	434a      	muls	r2, r1
 80162c4:	5cd3      	ldrb	r3, [r2, r3]
 80162c6:	075b      	lsls	r3, r3, #29
 80162c8:	0fdb      	lsrs	r3, r3, #31
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d10f      	bne.n	80162f0 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 80162d0:	1dfb      	adds	r3, r7, #7
 80162d2:	781a      	ldrb	r2, [r3, #0]
 80162d4:	4b21      	ldr	r3, [pc, #132]	@ (801635c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 80162d6:	2154      	movs	r1, #84	@ 0x54
 80162d8:	434a      	muls	r2, r1
 80162da:	5cd3      	ldrb	r3, [r2, r3]
 80162dc:	071b      	lsls	r3, r3, #28
 80162de:	0fdb      	lsrs	r3, r3, #31
 80162e0:	b2db      	uxtb	r3, r3
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	d104      	bne.n	80162f0 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 80162e6:	230f      	movs	r3, #15
 80162e8:	18fb      	adds	r3, r7, r3
 80162ea:	2201      	movs	r2, #1
 80162ec:	701a      	strb	r2, [r3, #0]
 80162ee:	e02d      	b.n	801634c <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 80162f0:	1dfb      	adds	r3, r7, #7
 80162f2:	781a      	ldrb	r2, [r3, #0]
 80162f4:	4b19      	ldr	r3, [pc, #100]	@ (801635c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 80162f6:	2154      	movs	r1, #84	@ 0x54
 80162f8:	434a      	muls	r2, r1
 80162fa:	5cd3      	ldrb	r3, [r2, r3]
 80162fc:	075b      	lsls	r3, r3, #29
 80162fe:	0fdb      	lsrs	r3, r3, #31
 8016300:	b2db      	uxtb	r3, r3
 8016302:	2b01      	cmp	r3, #1
 8016304:	d109      	bne.n	801631a <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 8016306:	1dfb      	adds	r3, r7, #7
 8016308:	781a      	ldrb	r2, [r3, #0]
 801630a:	4b15      	ldr	r3, [pc, #84]	@ (8016360 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801630c:	0092      	lsls	r2, r2, #2
 801630e:	5cd3      	ldrb	r3, [r2, r3]
 8016310:	071b      	lsls	r3, r3, #28
 8016312:	0fdb      	lsrs	r3, r3, #31
 8016314:	b2db      	uxtb	r3, r3
 8016316:	2b00      	cmp	r3, #0
 8016318:	d014      	beq.n	8016344 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801631a:	1dfb      	adds	r3, r7, #7
 801631c:	781a      	ldrb	r2, [r3, #0]
 801631e:	4b0f      	ldr	r3, [pc, #60]	@ (801635c <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8016320:	2154      	movs	r1, #84	@ 0x54
 8016322:	434a      	muls	r2, r1
 8016324:	5cd3      	ldrb	r3, [r2, r3]
 8016326:	071b      	lsls	r3, r3, #28
 8016328:	0fdb      	lsrs	r3, r3, #31
 801632a:	b2db      	uxtb	r3, r3
 801632c:	2b01      	cmp	r3, #1
 801632e:	d10d      	bne.n	801634c <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 8016330:	1dfb      	adds	r3, r7, #7
 8016332:	781a      	ldrb	r2, [r3, #0]
 8016334:	4b0a      	ldr	r3, [pc, #40]	@ (8016360 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 8016336:	0092      	lsls	r2, r2, #2
 8016338:	5cd3      	ldrb	r3, [r2, r3]
 801633a:	071b      	lsls	r3, r3, #28
 801633c:	0fdb      	lsrs	r3, r3, #31
 801633e:	b2db      	uxtb	r3, r3
 8016340:	2b01      	cmp	r3, #1
 8016342:	d103      	bne.n	801634c <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 8016344:	230f      	movs	r3, #15
 8016346:	18fb      	adds	r3, r7, r3
 8016348:	220a      	movs	r2, #10
 801634a:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 801634c:	230f      	movs	r3, #15
 801634e:	18fb      	adds	r3, r7, r3
 8016350:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8016352:	0018      	movs	r0, r3
 8016354:	46bd      	mov	sp, r7
 8016356:	b004      	add	sp, #16
 8016358:	bd80      	pop	{r7, pc}
 801635a:	46c0      	nop			@ (mov r8, r8)
 801635c:	2000005c 	.word	0x2000005c
 8016360:	2000b0b0 	.word	0x2000b0b0

08016364 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8016364:	b580      	push	{r7, lr}
 8016366:	b082      	sub	sp, #8
 8016368:	af00      	add	r7, sp, #0
 801636a:	0002      	movs	r2, r0
 801636c:	1dfb      	adds	r3, r7, #7
 801636e:	701a      	strb	r2, [r3, #0]
 8016370:	1dbb      	adds	r3, r7, #6
 8016372:	1c0a      	adds	r2, r1, #0
 8016374:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8016376:	1dbb      	adds	r3, r7, #6
 8016378:	781a      	ldrb	r2, [r3, #0]
 801637a:	1dfb      	adds	r3, r7, #7
 801637c:	781b      	ldrb	r3, [r3, #0]
 801637e:	0011      	movs	r1, r2
 8016380:	0018      	movs	r0, r3
 8016382:	f7ff fe3d 	bl	8016000 <USBPD_PWR_IF_SupplyReady>
 8016386:	0003      	movs	r3, r0
 8016388:	425a      	negs	r2, r3
 801638a:	4153      	adcs	r3, r2
 801638c:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801638e:	0018      	movs	r0, r3
 8016390:	46bd      	mov	sp, r7
 8016392:	b002      	add	sp, #8
 8016394:	bd80      	pop	{r7, pc}

08016396 <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 8016396:	b580      	push	{r7, lr}
 8016398:	b084      	sub	sp, #16
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801639e:	2300      	movs	r3, #0
 80163a0:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	2b01      	cmp	r3, #1
 80163a6:	d902      	bls.n	80163ae <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80163a8:	2302      	movs	r3, #2
 80163aa:	425b      	negs	r3, r3
 80163ac:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 80163ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 80163b0:	0018      	movs	r0, r3
 80163b2:	46bd      	mov	sp, r7
 80163b4:	b004      	add	sp, #16
 80163b6:	bd80      	pop	{r7, pc}

080163b8 <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 80163c0:	2300      	movs	r3, #0
 80163c2:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	2b01      	cmp	r3, #1
 80163c8:	d902      	bls.n	80163d0 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80163ca:	2302      	movs	r3, #2
 80163cc:	425b      	negs	r3, r3
 80163ce:	60fb      	str	r3, [r7, #12]
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 80163d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 80163d2:	0018      	movs	r0, r3
 80163d4:	46bd      	mov	sp, r7
 80163d6:	b004      	add	sp, #16
 80163d8:	bd80      	pop	{r7, pc}

080163da <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 80163da:	b580      	push	{r7, lr}
 80163dc:	b084      	sub	sp, #16
 80163de:	af00      	add	r7, sp, #0
 80163e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80163e2:	230b      	movs	r3, #11
 80163e4:	425b      	negs	r3, r3
 80163e6:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	2b01      	cmp	r3, #1
 80163ec:	d902      	bls.n	80163f4 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80163ee:	2302      	movs	r3, #2
 80163f0:	425b      	negs	r3, r3
 80163f2:	60fb      	str	r3, [r7, #12]
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
  return ret;
 80163f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 80163f6:	0018      	movs	r0, r3
 80163f8:	46bd      	mov	sp, r7
 80163fa:	b004      	add	sp, #16
 80163fc:	bd80      	pop	{r7, pc}

080163fe <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 80163fe:	b580      	push	{r7, lr}
 8016400:	b084      	sub	sp, #16
 8016402:	af00      	add	r7, sp, #0
 8016404:	6078      	str	r0, [r7, #4]
 8016406:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 8016408:	2300      	movs	r3, #0
 801640a:	60fb      	str	r3, [r7, #12]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	2b01      	cmp	r3, #1
 8016410:	d802      	bhi.n	8016418 <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 8016412:	683b      	ldr	r3, [r7, #0]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d102      	bne.n	801641e <BSP_USBPD_PWR_VBUSGetVoltage+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8016418:	2302      	movs	r3, #2
 801641a:	425b      	negs	r3, r3
 801641c:	60fb      	str	r3, [r7, #12]
  }
  *pVoltage = 0u;
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	2200      	movs	r2, #0
 8016422:	601a      	str	r2, [r3, #0]
  /* !!!
      BSP_PWR_VBUSGetVoltage is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  return ret;
 8016424:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 8016426:	0018      	movs	r0, r3
 8016428:	46bd      	mov	sp, r7
 801642a:	b004      	add	sp, #16
 801642c:	bd80      	pop	{r7, pc}

0801642e <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 801642e:	b580      	push	{r7, lr}
 8016430:	b084      	sub	sp, #16
 8016432:	af00      	add	r7, sp, #0
 8016434:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 8016436:	2300      	movs	r3, #0
 8016438:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	60bb      	str	r3, [r7, #8]

  /* USER CODE BEGIN MX_USBX_Device_Init */

  /* USER CODE END MX_USBX_Device_Init */

  return ret;
 801643e:	68fb      	ldr	r3, [r7, #12]
}
 8016440:	0018      	movs	r0, r3
 8016442:	46bd      	mov	sp, r7
 8016444:	b004      	add	sp, #16
 8016446:	bd80      	pop	{r7, pc}

08016448 <malloc>:
 8016448:	b510      	push	{r4, lr}
 801644a:	4b03      	ldr	r3, [pc, #12]	@ (8016458 <malloc+0x10>)
 801644c:	0001      	movs	r1, r0
 801644e:	6818      	ldr	r0, [r3, #0]
 8016450:	f000 f826 	bl	80164a0 <_malloc_r>
 8016454:	bd10      	pop	{r4, pc}
 8016456:	46c0      	nop			@ (mov r8, r8)
 8016458:	20000104 	.word	0x20000104

0801645c <sbrk_aligned>:
 801645c:	b570      	push	{r4, r5, r6, lr}
 801645e:	4e0f      	ldr	r6, [pc, #60]	@ (801649c <sbrk_aligned+0x40>)
 8016460:	000d      	movs	r5, r1
 8016462:	6831      	ldr	r1, [r6, #0]
 8016464:	0004      	movs	r4, r0
 8016466:	2900      	cmp	r1, #0
 8016468:	d102      	bne.n	8016470 <sbrk_aligned+0x14>
 801646a:	f000 f8b1 	bl	80165d0 <_sbrk_r>
 801646e:	6030      	str	r0, [r6, #0]
 8016470:	0029      	movs	r1, r5
 8016472:	0020      	movs	r0, r4
 8016474:	f000 f8ac 	bl	80165d0 <_sbrk_r>
 8016478:	1c43      	adds	r3, r0, #1
 801647a:	d103      	bne.n	8016484 <sbrk_aligned+0x28>
 801647c:	2501      	movs	r5, #1
 801647e:	426d      	negs	r5, r5
 8016480:	0028      	movs	r0, r5
 8016482:	bd70      	pop	{r4, r5, r6, pc}
 8016484:	2303      	movs	r3, #3
 8016486:	1cc5      	adds	r5, r0, #3
 8016488:	439d      	bics	r5, r3
 801648a:	42a8      	cmp	r0, r5
 801648c:	d0f8      	beq.n	8016480 <sbrk_aligned+0x24>
 801648e:	1a29      	subs	r1, r5, r0
 8016490:	0020      	movs	r0, r4
 8016492:	f000 f89d 	bl	80165d0 <_sbrk_r>
 8016496:	3001      	adds	r0, #1
 8016498:	d1f2      	bne.n	8016480 <sbrk_aligned+0x24>
 801649a:	e7ef      	b.n	801647c <sbrk_aligned+0x20>
 801649c:	2000b0b8 	.word	0x2000b0b8

080164a0 <_malloc_r>:
 80164a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80164a2:	2203      	movs	r2, #3
 80164a4:	1ccb      	adds	r3, r1, #3
 80164a6:	4393      	bics	r3, r2
 80164a8:	3308      	adds	r3, #8
 80164aa:	0005      	movs	r5, r0
 80164ac:	001f      	movs	r7, r3
 80164ae:	2b0c      	cmp	r3, #12
 80164b0:	d234      	bcs.n	801651c <_malloc_r+0x7c>
 80164b2:	270c      	movs	r7, #12
 80164b4:	42b9      	cmp	r1, r7
 80164b6:	d833      	bhi.n	8016520 <_malloc_r+0x80>
 80164b8:	0028      	movs	r0, r5
 80164ba:	f000 f871 	bl	80165a0 <__malloc_lock>
 80164be:	4e37      	ldr	r6, [pc, #220]	@ (801659c <_malloc_r+0xfc>)
 80164c0:	6833      	ldr	r3, [r6, #0]
 80164c2:	001c      	movs	r4, r3
 80164c4:	2c00      	cmp	r4, #0
 80164c6:	d12f      	bne.n	8016528 <_malloc_r+0x88>
 80164c8:	0039      	movs	r1, r7
 80164ca:	0028      	movs	r0, r5
 80164cc:	f7ff ffc6 	bl	801645c <sbrk_aligned>
 80164d0:	0004      	movs	r4, r0
 80164d2:	1c43      	adds	r3, r0, #1
 80164d4:	d15f      	bne.n	8016596 <_malloc_r+0xf6>
 80164d6:	6834      	ldr	r4, [r6, #0]
 80164d8:	9400      	str	r4, [sp, #0]
 80164da:	9b00      	ldr	r3, [sp, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d14a      	bne.n	8016576 <_malloc_r+0xd6>
 80164e0:	2c00      	cmp	r4, #0
 80164e2:	d052      	beq.n	801658a <_malloc_r+0xea>
 80164e4:	6823      	ldr	r3, [r4, #0]
 80164e6:	0028      	movs	r0, r5
 80164e8:	18e3      	adds	r3, r4, r3
 80164ea:	9900      	ldr	r1, [sp, #0]
 80164ec:	9301      	str	r3, [sp, #4]
 80164ee:	f000 f86f 	bl	80165d0 <_sbrk_r>
 80164f2:	9b01      	ldr	r3, [sp, #4]
 80164f4:	4283      	cmp	r3, r0
 80164f6:	d148      	bne.n	801658a <_malloc_r+0xea>
 80164f8:	6823      	ldr	r3, [r4, #0]
 80164fa:	0028      	movs	r0, r5
 80164fc:	1aff      	subs	r7, r7, r3
 80164fe:	0039      	movs	r1, r7
 8016500:	f7ff ffac 	bl	801645c <sbrk_aligned>
 8016504:	3001      	adds	r0, #1
 8016506:	d040      	beq.n	801658a <_malloc_r+0xea>
 8016508:	6823      	ldr	r3, [r4, #0]
 801650a:	19db      	adds	r3, r3, r7
 801650c:	6023      	str	r3, [r4, #0]
 801650e:	6833      	ldr	r3, [r6, #0]
 8016510:	685a      	ldr	r2, [r3, #4]
 8016512:	2a00      	cmp	r2, #0
 8016514:	d133      	bne.n	801657e <_malloc_r+0xde>
 8016516:	9b00      	ldr	r3, [sp, #0]
 8016518:	6033      	str	r3, [r6, #0]
 801651a:	e019      	b.n	8016550 <_malloc_r+0xb0>
 801651c:	2b00      	cmp	r3, #0
 801651e:	dac9      	bge.n	80164b4 <_malloc_r+0x14>
 8016520:	230c      	movs	r3, #12
 8016522:	602b      	str	r3, [r5, #0]
 8016524:	2000      	movs	r0, #0
 8016526:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8016528:	6821      	ldr	r1, [r4, #0]
 801652a:	1bc9      	subs	r1, r1, r7
 801652c:	d420      	bmi.n	8016570 <_malloc_r+0xd0>
 801652e:	290b      	cmp	r1, #11
 8016530:	d90a      	bls.n	8016548 <_malloc_r+0xa8>
 8016532:	19e2      	adds	r2, r4, r7
 8016534:	6027      	str	r7, [r4, #0]
 8016536:	42a3      	cmp	r3, r4
 8016538:	d104      	bne.n	8016544 <_malloc_r+0xa4>
 801653a:	6032      	str	r2, [r6, #0]
 801653c:	6863      	ldr	r3, [r4, #4]
 801653e:	6011      	str	r1, [r2, #0]
 8016540:	6053      	str	r3, [r2, #4]
 8016542:	e005      	b.n	8016550 <_malloc_r+0xb0>
 8016544:	605a      	str	r2, [r3, #4]
 8016546:	e7f9      	b.n	801653c <_malloc_r+0x9c>
 8016548:	6862      	ldr	r2, [r4, #4]
 801654a:	42a3      	cmp	r3, r4
 801654c:	d10e      	bne.n	801656c <_malloc_r+0xcc>
 801654e:	6032      	str	r2, [r6, #0]
 8016550:	0028      	movs	r0, r5
 8016552:	f000 f82d 	bl	80165b0 <__malloc_unlock>
 8016556:	0020      	movs	r0, r4
 8016558:	2207      	movs	r2, #7
 801655a:	300b      	adds	r0, #11
 801655c:	1d23      	adds	r3, r4, #4
 801655e:	4390      	bics	r0, r2
 8016560:	1ac2      	subs	r2, r0, r3
 8016562:	4298      	cmp	r0, r3
 8016564:	d0df      	beq.n	8016526 <_malloc_r+0x86>
 8016566:	1a1b      	subs	r3, r3, r0
 8016568:	50a3      	str	r3, [r4, r2]
 801656a:	e7dc      	b.n	8016526 <_malloc_r+0x86>
 801656c:	605a      	str	r2, [r3, #4]
 801656e:	e7ef      	b.n	8016550 <_malloc_r+0xb0>
 8016570:	0023      	movs	r3, r4
 8016572:	6864      	ldr	r4, [r4, #4]
 8016574:	e7a6      	b.n	80164c4 <_malloc_r+0x24>
 8016576:	9c00      	ldr	r4, [sp, #0]
 8016578:	6863      	ldr	r3, [r4, #4]
 801657a:	9300      	str	r3, [sp, #0]
 801657c:	e7ad      	b.n	80164da <_malloc_r+0x3a>
 801657e:	001a      	movs	r2, r3
 8016580:	685b      	ldr	r3, [r3, #4]
 8016582:	42a3      	cmp	r3, r4
 8016584:	d1fb      	bne.n	801657e <_malloc_r+0xde>
 8016586:	2300      	movs	r3, #0
 8016588:	e7da      	b.n	8016540 <_malloc_r+0xa0>
 801658a:	230c      	movs	r3, #12
 801658c:	0028      	movs	r0, r5
 801658e:	602b      	str	r3, [r5, #0]
 8016590:	f000 f80e 	bl	80165b0 <__malloc_unlock>
 8016594:	e7c6      	b.n	8016524 <_malloc_r+0x84>
 8016596:	6007      	str	r7, [r0, #0]
 8016598:	e7da      	b.n	8016550 <_malloc_r+0xb0>
 801659a:	46c0      	nop			@ (mov r8, r8)
 801659c:	2000b0bc 	.word	0x2000b0bc

080165a0 <__malloc_lock>:
 80165a0:	b510      	push	{r4, lr}
 80165a2:	4802      	ldr	r0, [pc, #8]	@ (80165ac <__malloc_lock+0xc>)
 80165a4:	f000 f850 	bl	8016648 <__retarget_lock_acquire_recursive>
 80165a8:	bd10      	pop	{r4, pc}
 80165aa:	46c0      	nop			@ (mov r8, r8)
 80165ac:	2000b1fc 	.word	0x2000b1fc

080165b0 <__malloc_unlock>:
 80165b0:	b510      	push	{r4, lr}
 80165b2:	4802      	ldr	r0, [pc, #8]	@ (80165bc <__malloc_unlock+0xc>)
 80165b4:	f000 f849 	bl	801664a <__retarget_lock_release_recursive>
 80165b8:	bd10      	pop	{r4, pc}
 80165ba:	46c0      	nop			@ (mov r8, r8)
 80165bc:	2000b1fc 	.word	0x2000b1fc

080165c0 <memset>:
 80165c0:	0003      	movs	r3, r0
 80165c2:	1882      	adds	r2, r0, r2
 80165c4:	4293      	cmp	r3, r2
 80165c6:	d100      	bne.n	80165ca <memset+0xa>
 80165c8:	4770      	bx	lr
 80165ca:	7019      	strb	r1, [r3, #0]
 80165cc:	3301      	adds	r3, #1
 80165ce:	e7f9      	b.n	80165c4 <memset+0x4>

080165d0 <_sbrk_r>:
 80165d0:	2300      	movs	r3, #0
 80165d2:	b570      	push	{r4, r5, r6, lr}
 80165d4:	4d06      	ldr	r5, [pc, #24]	@ (80165f0 <_sbrk_r+0x20>)
 80165d6:	0004      	movs	r4, r0
 80165d8:	0008      	movs	r0, r1
 80165da:	602b      	str	r3, [r5, #0]
 80165dc:	f7f0 fca0 	bl	8006f20 <_sbrk>
 80165e0:	1c43      	adds	r3, r0, #1
 80165e2:	d103      	bne.n	80165ec <_sbrk_r+0x1c>
 80165e4:	682b      	ldr	r3, [r5, #0]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d000      	beq.n	80165ec <_sbrk_r+0x1c>
 80165ea:	6023      	str	r3, [r4, #0]
 80165ec:	bd70      	pop	{r4, r5, r6, pc}
 80165ee:	46c0      	nop			@ (mov r8, r8)
 80165f0:	2000b1f8 	.word	0x2000b1f8

080165f4 <__errno>:
 80165f4:	4b01      	ldr	r3, [pc, #4]	@ (80165fc <__errno+0x8>)
 80165f6:	6818      	ldr	r0, [r3, #0]
 80165f8:	4770      	bx	lr
 80165fa:	46c0      	nop			@ (mov r8, r8)
 80165fc:	20000104 	.word	0x20000104

08016600 <__libc_init_array>:
 8016600:	b570      	push	{r4, r5, r6, lr}
 8016602:	2600      	movs	r6, #0
 8016604:	4c0c      	ldr	r4, [pc, #48]	@ (8016638 <__libc_init_array+0x38>)
 8016606:	4d0d      	ldr	r5, [pc, #52]	@ (801663c <__libc_init_array+0x3c>)
 8016608:	1b64      	subs	r4, r4, r5
 801660a:	10a4      	asrs	r4, r4, #2
 801660c:	42a6      	cmp	r6, r4
 801660e:	d109      	bne.n	8016624 <__libc_init_array+0x24>
 8016610:	2600      	movs	r6, #0
 8016612:	f000 f835 	bl	8016680 <_init>
 8016616:	4c0a      	ldr	r4, [pc, #40]	@ (8016640 <__libc_init_array+0x40>)
 8016618:	4d0a      	ldr	r5, [pc, #40]	@ (8016644 <__libc_init_array+0x44>)
 801661a:	1b64      	subs	r4, r4, r5
 801661c:	10a4      	asrs	r4, r4, #2
 801661e:	42a6      	cmp	r6, r4
 8016620:	d105      	bne.n	801662e <__libc_init_array+0x2e>
 8016622:	bd70      	pop	{r4, r5, r6, pc}
 8016624:	00b3      	lsls	r3, r6, #2
 8016626:	58eb      	ldr	r3, [r5, r3]
 8016628:	4798      	blx	r3
 801662a:	3601      	adds	r6, #1
 801662c:	e7ee      	b.n	801660c <__libc_init_array+0xc>
 801662e:	00b3      	lsls	r3, r6, #2
 8016630:	58eb      	ldr	r3, [r5, r3]
 8016632:	4798      	blx	r3
 8016634:	3601      	adds	r6, #1
 8016636:	e7f2      	b.n	801661e <__libc_init_array+0x1e>
 8016638:	08016994 	.word	0x08016994
 801663c:	08016994 	.word	0x08016994
 8016640:	08016998 	.word	0x08016998
 8016644:	08016994 	.word	0x08016994

08016648 <__retarget_lock_acquire_recursive>:
 8016648:	4770      	bx	lr

0801664a <__retarget_lock_release_recursive>:
 801664a:	4770      	bx	lr

0801664c <__aeabi_memcpy>:
 801664c:	b510      	push	{r4, lr}
 801664e:	f000 f80d 	bl	801666c <memcpy>
 8016652:	bd10      	pop	{r4, pc}

08016654 <__aeabi_memset>:
 8016654:	000b      	movs	r3, r1
 8016656:	b510      	push	{r4, lr}
 8016658:	0011      	movs	r1, r2
 801665a:	001a      	movs	r2, r3
 801665c:	f7ff ffb0 	bl	80165c0 <memset>
 8016660:	bd10      	pop	{r4, pc}

08016662 <__aeabi_memclr>:
 8016662:	b510      	push	{r4, lr}
 8016664:	2200      	movs	r2, #0
 8016666:	f7ff fff5 	bl	8016654 <__aeabi_memset>
 801666a:	bd10      	pop	{r4, pc}

0801666c <memcpy>:
 801666c:	2300      	movs	r3, #0
 801666e:	b510      	push	{r4, lr}
 8016670:	429a      	cmp	r2, r3
 8016672:	d100      	bne.n	8016676 <memcpy+0xa>
 8016674:	bd10      	pop	{r4, pc}
 8016676:	5ccc      	ldrb	r4, [r1, r3]
 8016678:	54c4      	strb	r4, [r0, r3]
 801667a:	3301      	adds	r3, #1
 801667c:	e7f8      	b.n	8016670 <memcpy+0x4>
	...

08016680 <_init>:
 8016680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016682:	46c0      	nop			@ (mov r8, r8)
 8016684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016686:	bc08      	pop	{r3}
 8016688:	469e      	mov	lr, r3
 801668a:	4770      	bx	lr

0801668c <_fini>:
 801668c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801668e:	46c0      	nop			@ (mov r8, r8)
 8016690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016692:	bc08      	pop	{r3}
 8016694:	469e      	mov	lr, r3
 8016696:	4770      	bx	lr
