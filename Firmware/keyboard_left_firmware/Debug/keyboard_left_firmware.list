
keyboard_left_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e1d4  080000c0  080000c0  000010c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0801e294  0801e294  0001f294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e844  0801e844  000202c4  2**0
                  CONTENTS
  4 .ARM          00000000  0801e844  0801e844  000202c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801e844  0801e844  000202c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e844  0801e844  0001f844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e848  0801e848  0001f848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  0801e84c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011c38  200002c4  0801eb10  000202c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000904  20011efc  0801eb10  00020efc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008927c  00000000  00000000  000202f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00014616  00000000  00000000  000a956e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035b8  00000000  00000000  000bdb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000252d  00000000  00000000  000c1140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003e988  00000000  00000000  000c366d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0008fcb0  00000000  00000000  00101ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2654  00000000  00000000  00191ca5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000041e7  00000000  00000000  002842f9  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033c  00000000  00000000  002884e0  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  0028881c  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000a1e4  00000000  00000000  00288840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000016a  00000000  00000000  00292a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200002c4 	.word	0x200002c4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801e27c 	.word	0x0801e27c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200002c8 	.word	0x200002c8
 8000104:	0801e27c 	.word	0x0801e27c
	...

08000110 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000110:	b672      	cpsid	i
@    ORRS    r1, r1, r2                              @ Set the CYCCNTENA bit
@    STR     r1, [r0]                                @ Enable the cycle count register
@
@    /* Setup Vector Table Offset Register.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000112:	4816      	ldr	r0, [pc, #88]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000114:	4a16      	ldr	r2, [pc, #88]	@ (8000170 <__tx_DBGHandler+0x8>)
    ADD     r0, r0, r2                              @ Build vector base register
 8000116:	4410      	add	r0, r2
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000118:	4916      	ldr	r1, [pc, #88]	@ (8000174 <__tx_DBGHandler+0xc>)
    STR     r1, [r0]                                @ Set vector table address
 800011a:	6001      	str	r1, [r0, #0]
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800011c:	4816      	ldr	r0, [pc, #88]	@ (8000178 <__tx_DBGHandler+0x10>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800011e:	4915      	ldr	r1, [pc, #84]	@ (8000174 <__tx_DBGHandler+0xc>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000120:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000122:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 8000124:	4811      	ldr	r0, [pc, #68]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r1, =SYSTICK_CYCLES
 8000126:	4915      	ldr	r1, [pc, #84]	@ (800017c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 8000128:	6141      	str	r1, [r0, #20]
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 800012a:	4915      	ldr	r1, [pc, #84]	@ (8000180 <__tx_DBGHandler+0x18>)
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 800012c:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */

    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 800012e:	4915      	ldr	r1, [pc, #84]	@ (8000184 <__tx_DBGHandler+0x1c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000130:	480e      	ldr	r0, [pc, #56]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD18                              //
 8000132:	4a15      	ldr	r2, [pc, #84]	@ (8000188 <__tx_DBGHandler+0x20>)
    ADD     r0, r0, r2                              //
 8000134:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 4-7 Priority Registers
 8000136:	6001      	str	r1, [r0, #0]
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 8000138:	4914      	ldr	r1, [pc, #80]	@ (800018c <__tx_DBGHandler+0x24>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 800013a:	480c      	ldr	r0, [pc, #48]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD1C                              //
 800013c:	4a14      	ldr	r2, [pc, #80]	@ (8000190 <__tx_DBGHandler+0x28>)
    ADD     r0, r0, r2                              //
 800013e:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 8-11 Priority Registers
 8000140:	6001      	str	r1, [r0, #0]
                                                    // Note: SVC must be lowest priority, which is 0xFF
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000142:	4914      	ldr	r1, [pc, #80]	@ (8000194 <__tx_DBGHandler+0x2c>)
    LDR     r0, =0xE000E000                         // Build address of NVIC registers
 8000144:	4809      	ldr	r0, [pc, #36]	@ (800016c <__tx_DBGHandler+0x4>)
    LDR     r2, =0xD20                              //
 8000146:	4a14      	ldr	r2, [pc, #80]	@ (8000198 <__tx_DBGHandler+0x30>)
    ADD     r0, r0, r2                              //
 8000148:	4410      	add	r0, r2
    STR     r1, [r0]                                // Setup System Handlers 12-15 Priority Registers
 800014a:	6001      	str	r1, [r0, #0]
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 800014c:	4770      	bx	lr

0800014e <__tx_BadHandler>:

/* Define shells for each of the unused vectors.  */
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 800014e:	e7fe      	b.n	800014e <__tx_BadHandler>

08000150 <__tx_HardfaultHandler>:

/* added to catch the hardfault */
    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000150:	e7fe      	b.n	8000150 <__tx_HardfaultHandler>

08000152 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0, lr}
 8000152:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* BL <your C Function>.... */
#ifdef TX_ENABLE_EXECUTION_CHANGE_NOTIFY
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000154:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000156:	468e      	mov	lr, r1
    BX      lr
 8000158:	4770      	bx	lr

0800015a <SysTick_Handler>:
__tx_SysTickHandler:
    .thumb_func
SysTick_Handler:
// VOID SysTick_Handler (VOID)
// {
    PUSH    {r0, lr}
 800015a:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800015c:	f000 f8a8 	bl	80002b0 <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0, r1}
 8000160:	bc03      	pop	{r0, r1}
    MOV     lr, r1
 8000162:	468e      	mov	lr, r1
    BX      lr
 8000164:	4770      	bx	lr

08000166 <__tx_NMIHandler>:

/* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000166:	e7fe      	b.n	8000166 <__tx_NMIHandler>

08000168 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000168:	e7fe      	b.n	8000168 <__tx_DBGHandler>
 800016a:	0000      	.short	0x0000
    LDR     r0, =0xE000E000                         @ Build address of NVIC registers
 800016c:	e000e000 	.word	0xe000e000
    LDR     r2, =0xD08                              @ Offset to vector base register
 8000170:	00000d08 	.word	0x00000d08
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000174:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000178:	20010fe4 	.word	0x20010fe4
    LDR     r1, =SYSTICK_CYCLES
 800017c:	0000f9ff 	.word	0x0000f9ff
    LDR     r1, =0x7                                // Build SysTick Control Enable Value
 8000180:	00000007 	.word	0x00000007
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 8000184:	00000000 	.word	0x00000000
    LDR     r2, =0xD18                              //
 8000188:	00000d18 	.word	0x00000d18
    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 800018c:	ff000000 	.word	0xff000000
    LDR     r2, =0xD1C                              //
 8000190:	00000d1c 	.word	0x00000d1c
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 8000194:	40ff0000 	.word	0x40ff0000
    LDR     r2, =0xD20                              //
 8000198:	00000d20 	.word	0x00000d20
 800019c:	00000000 	.word	0x00000000

080001a0 <_tx_thread_schedule>:
@       from the first schedule request. Subsequent scheduling occurs
@       from the PendSV handling routines below. */
@
@    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
@
    MOVS    r0, #0                                  @ Build value for TX_FALSE
 80001a0:	2000      	movs	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 80001a2:	4a26      	ldr	r2, [pc, #152]	@ (800023c <__tx_ts_ready+0xc>)
    STR     r0, [r2, #0]                            @ Clear preempt disable flag
 80001a4:	6010      	str	r0, [r2, #0]
@
@    /* Enable interrupts */
@
    CPSIE   i
 80001a6:	b662      	cpsie	i
@
@    /* Enter the scheduler for the first time.  */
@
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 80001a8:	4825      	ldr	r0, [pc, #148]	@ (8000240 <__tx_ts_ready+0x10>)
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 80001aa:	4926      	ldr	r1, [pc, #152]	@ (8000244 <__tx_ts_ready+0x14>)
    STR     r0, [r1]                                @ Set PENDSVBIT in ICSR
 80001ac:	6008      	str	r0, [r1, #0]
    DSB                                             @ Complete all memory accesses
 80001ae:	f3bf 8f4f 	dsb	sy
    ISB                                             @ Flush pipeline
 80001b2:	f3bf 8f6f 	isb	sy

080001b6 <__tx_wait_here>:
@
@    /* Wait here for the PendSV to take place.  */
@
__tx_wait_here:
    B       __tx_wait_here                          @ Wait for the PendSV to happen
 80001b6:	e7fe      	b.n	80001b6 <__tx_wait_here>

080001b8 <PendSV_Handler>:
    BL  _tx_execution_thread_exit                   @ Call the thread exit function
    POP     {r0, r1}                                @ Recover LR
    MOV     lr, r1                                  @
    CPSIE   i                                       @ Enable interrupts
#endif
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 80001b8:	4823      	ldr	r0, [pc, #140]	@ (8000248 <__tx_ts_ready+0x18>)
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 80001ba:	4a24      	ldr	r2, [pc, #144]	@ (800024c <__tx_ts_ready+0x1c>)
    MOVS    r3, #0                                  @ Build NULL value
 80001bc:	2300      	movs	r3, #0
    LDR     r1, [r0]                                @ Pickup current thread pointer
 80001be:	6801      	ldr	r1, [r0, #0]
@
@    /* Determine if there is a current thread to finish preserving.  */
@
    CMP     r1,#0                                   @ If NULL, skip preservation
 80001c0:	2900      	cmp	r1, #0
    BEQ     __tx_ts_new                             @
 80001c2:	d015      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Recover PSP and preserve current thread context.  */
@
    STR     r3, [r0]                                @ Set _tx_thread_current_ptr to NULL
 80001c4:	6003      	str	r3, [r0, #0]
    MRS     r3, PSP                                 @ Pickup PSP pointer (thread's stack pointer)
 80001c6:	f3ef 8309 	mrs	r3, PSP
    SUBS    r3, r3, #16                             @ Allocate stack space
 80001ca:	3b10      	subs	r3, #16
    STM     r3!, {r4-r7}                            @ Save its remaining registers (M3 Instruction: STMDB r12!, {r4-r11})
 80001cc:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    MOV     r4,r8                                   @
 80001ce:	4644      	mov	r4, r8
    MOV     r5,r9                                   @
 80001d0:	464d      	mov	r5, r9
    MOV     r6,r10                                  @
 80001d2:	4656      	mov	r6, sl
    MOV     r7,r11                                  @
 80001d4:	465f      	mov	r7, fp
    SUBS    r3, r3, #32                             @ Allocate stack space
 80001d6:	3b20      	subs	r3, #32
    STM     r3!,{r4-r7}                             @
 80001d8:	c3f0      	stmia	r3!, {r4, r5, r6, r7}
    SUBS    r3, r3, #20                             @ Allocate stack space
 80001da:	3b14      	subs	r3, #20
    MOV     r5, lr                                  @ Move LR into R4
 80001dc:	4675      	mov	r5, lr
    STR     r5, [r3]                                @ Save LR
 80001de:	601d      	str	r5, [r3, #0]
    STR     r3, [r1, #8]                            @ Save its stack pointer
 80001e0:	608b      	str	r3, [r1, #8]
@
@    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */
@
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001e2:	4c1b      	ldr	r4, [pc, #108]	@ (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r4]                                @ Pickup current time-slice
 80001e4:	6825      	ldr	r5, [r4, #0]
    CMP     r5, #0                                  @ If not active, skip processing
 80001e6:	2d00      	cmp	r5, #0
    BEQ     __tx_ts_new                             @
 80001e8:	d002      	beq.n	80001f0 <__tx_ts_new>
@
@    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */
@
    STR     r5, [r1, #24]                           @ Save current time-slice
 80001ea:	618d      	str	r5, [r1, #24]
@
@    /* Clear the global time-slice.  */
@
    MOVS    r5, #0                                  @ Build clear value
 80001ec:	2500      	movs	r5, #0
    STR     r5, [r4]                                @ Clear time-slice
 80001ee:	6025      	str	r5, [r4, #0]

080001f0 <__tx_ts_new>:
@
__tx_ts_new:
@
@    /* Now we are looking for a new thread to execute!  */
@
    CPSID   i                                       @ Disable interrupts
 80001f0:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Is there another thread ready to execute?
 80001f2:	6811      	ldr	r1, [r2, #0]
    CMP     r1, #0                                  @
 80001f4:	2900      	cmp	r1, #0
    BEQ     __tx_ts_wait                            @ No, skip to the wait processing
 80001f6:	d014      	beq.n	8000222 <__tx_ts_wait>
@
@    /* Yes, another thread is ready for else, make the current thread the new thread.  */
@
    STR     r1, [r0]                                @ Setup the current thread pointer to the new thread
 80001f8:	6001      	str	r1, [r0, #0]
    CPSIE   i                                       @ Enable interrupts
 80001fa:	b662      	cpsie	i

080001fc <__tx_ts_restore>:
@
@    /* Increment the thread run count.  */
@
__tx_ts_restore:
    LDR     r7, [r1, #4]                            @ Pickup the current thread run count
 80001fc:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 80001fe:	4c14      	ldr	r4, [pc, #80]	@ (8000250 <__tx_ts_ready+0x20>)
    LDR     r5, [r1, #24]                           @ Pickup thread's current time-slice
 8000200:	698d      	ldr	r5, [r1, #24]
    ADDS    r7, r7, #1                              @ Increment the thread run count
 8000202:	3701      	adds	r7, #1
    STR     r7, [r1, #4]                            @ Store the new run count
 8000204:	604f      	str	r7, [r1, #4]
@
@    /* Setup global time-slice with thread's current time-slice.  */
@
    STR     r5, [r4]                                @ Setup global time-slice
 8000206:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                @ Recover r3
#endif
@
@    /* Restore the thread context and PSP.  */
@
    LDR     r3, [r1, #8]                            @ Pickup thread's stack pointer
 8000208:	688b      	ldr	r3, [r1, #8]
    LDR     r5, [r3]                                @ Recover saved LR
 800020a:	681d      	ldr	r5, [r3, #0]
    ADDS    r3, r3, #4                              @ Position past LR
 800020c:	3304      	adds	r3, #4
    MOV     lr, r5                                  @ Restore LR
 800020e:	46ae      	mov	lr, r5
    LDM     r3!,{r4-r7}                             @ Recover thread's registers (r4-r11)
 8000210:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MOV     r11,r7                                  @
 8000212:	46bb      	mov	fp, r7
    MOV     r10,r6                                  @
 8000214:	46b2      	mov	sl, r6
    MOV     r9,r5                                   @
 8000216:	46a9      	mov	r9, r5
    MOV     r8,r4                                   @
 8000218:	46a0      	mov	r8, r4
    LDM     r3!,{r4-r7}                             @
 800021a:	cbf0      	ldmia	r3!, {r4, r5, r6, r7}
    MSR     PSP, r3                                 @ Setup the thread's stack pointer
 800021c:	f383 8809 	msr	PSP, r3
@
@    /* Return to thread.  */
@
    BX      lr                                      @ Return to thread!
 8000220:	4770      	bx	lr

08000222 <__tx_ts_wait>:
@    /* The following is the idle wait processing... in this case, no threads are ready for execution and the
@       system will simply be idle until an interrupt occurs that makes a thread ready. Note that interrupts
@       are disabled to allow use of WFI for waiting for a thread to arrive.  */
@
__tx_ts_wait:
    CPSID   i                                       @ Disable interrupts
 8000222:	b672      	cpsid	i
    LDR     r1, [r2]                                @ Pickup the next thread to execute pointer
 8000224:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                @ Store it in the current pointer
 8000226:	6001      	str	r1, [r0, #0]
    CMP     r1, #0                                  @ If non-NULL, a new thread is ready!
 8000228:	2900      	cmp	r1, #0
    BNE     __tx_ts_ready                           @
 800022a:	d101      	bne.n	8000230 <__tx_ts_ready>
    PUSH    {r0-r3}
    BL      tx_low_power_exit                       @ Exit low power mode
    POP     {r0-r3}
#endif

    CPSIE   i                                       @ Enable interrupts
 800022c:	b662      	cpsie	i
    B       __tx_ts_wait                            @ Loop to continue waiting
 800022e:	e7f8      	b.n	8000222 <__tx_ts_wait>

08000230 <__tx_ts_ready>:
@
@    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
@       already in the handler!  */
@
__tx_ts_ready:
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000230:	4f08      	ldr	r7, [pc, #32]	@ (8000254 <__tx_ts_ready+0x24>)
    LDR     r5, =0xE000ED04                         @ Build base NVIC address
 8000232:	4d04      	ldr	r5, [pc, #16]	@ (8000244 <__tx_ts_ready+0x14>)
    STR     r7, [r5]                                @ Clear any PendSV
 8000234:	602f      	str	r7, [r5, #0]
@
@    /* Re-enable interrupts and restore new thread.  */
@
    CPSIE   i                                       @ Enable interrupts
 8000236:	b662      	cpsie	i
    B       __tx_ts_restore                         @ Restore the thread
 8000238:	e7e0      	b.n	80001fc <__tx_ts_restore>
 800023a:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800023c:	20011080 	.word	0x20011080
    LDR     r0, =#0x10000000                        @ Load PENDSVSET bit
 8000240:	10000000 	.word	0x10000000
    LDR     r1, =#0xE000ED04                        @ Load NVIC base
 8000244:	e000ed04 	.word	0xe000ed04
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000248:	20010fe8 	.word	0x20010fe8
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 800024c:	20010fec 	.word	0x20010fec
    LDR     r4, =_tx_timer_time_slice               @ Build address of time-slice variable
 8000250:	200115ec 	.word	0x200115ec
    LDR     r7, =0x08000000                         @ Build clear PendSV value
 8000254:	08000000 	.word	0x08000000
	...

08000260 <_tx_thread_stack_build>:
@                       pc          Initial value for pc
@                       xPSR        Initial value for xPSR
@
@    Stack Bottom: (higher memory address)  */
@
    LDR     r2, [r0, #16]                           @ Pickup end of stack area
 8000260:	6902      	ldr	r2, [r0, #16]
    MOVS    r3, #0x7                                @
 8000262:	2307      	movs	r3, #7
    BICS    r2, r2, r3                              @ Align frame for 8-byte alignment
 8000264:	439a      	bics	r2, r3
    SUBS    r2, r2, #68                             @ Subtract frame size
 8000266:	3a44      	subs	r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000268:	4b0b      	ldr	r3, [pc, #44]	@ (8000298 <_tx_thread_stack_build+0x38>)
    STR     r3, [r2, #0]                            @ Save on the stack
 800026a:	6013      	str	r3, [r2, #0]
@
@    /* Actually build the stack frame.  */
@
    MOVS    r3, #0                                  @ Build initial register value
 800026c:	2300      	movs	r3, #0
    STR     r3, [r2, #4]                            @ Store initial r8
 800026e:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            @ Store initial r9
 8000270:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           @ Store initial r10
 8000272:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           @ Store initial r11
 8000274:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           @ Store initial r4
 8000276:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           @ Store initial r5
 8000278:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           @ Store initial r6
 800027a:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           @ Store initial r7
 800027c:	6213      	str	r3, [r2, #32]
@
@    /* Hardware stack follows.  */
@
    STR     r3, [r2, #36]                           @ Store initial r0
 800027e:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           @ Store initial r1
 8000280:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           @ Store initial r2
 8000282:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           @ Store initial r3
 8000284:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           @ Store initial r12
 8000286:	6353      	str	r3, [r2, #52]	@ 0x34
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 8000288:	4b04      	ldr	r3, [pc, #16]	@ (800029c <_tx_thread_stack_build+0x3c>)
    STR     r3, [r2, #56]                           @ Store initial lr
 800028a:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           @ Store initial pc
 800028c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <_tx_thread_stack_build+0x40>)
    STR     r3, [r2, #64]                           @ Store initial xPSR
 8000290:	6413      	str	r3, [r2, #64]	@ 0x40
@
@    /* Setup stack pointer.  */
@    thread_ptr -> tx_thread_stack_ptr =  r2;
@
    STR     r2, [r0, #8]                            @ Save stack pointer in thread's
 8000292:	6082      	str	r2, [r0, #8]
                                                    @   control block
    BX      lr                                      @ Return to caller
 8000294:	4770      	bx	lr
 8000296:	0000      	.short	0x0000
    LDR     r3, =0xFFFFFFFD                         @ Build initial LR value
 8000298:	fffffffd 	.word	0xfffffffd
    LDR     r3, =0xFFFFFFFF                         @ Poison EXC_RETURN value
 800029c:	ffffffff 	.word	0xffffffff
    LDR     r3, =0x01000000                         @ Only T-bit need be set
 80002a0:	01000000 	.word	0x01000000
	...

080002b0 <_tx_timer_interrupt>:
@       for use.  */
@
@    /* Increment the system clock.  */
@    _tx_timer_system_clock++;
@
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 80002b0:	4923      	ldr	r1, [pc, #140]	@ (8000340 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            @ Pickup system clock
 80002b2:	6808      	ldr	r0, [r1, #0]
    ADDS    r0, r0, #1                              @ Increment system clock
 80002b4:	3001      	adds	r0, #1
    STR     r0, [r1, #0]                            @ Store new system clock
 80002b6:	6008      	str	r0, [r1, #0]
@
@    /* Test for time-slice expiration.  */
@    if (_tx_timer_time_slice)
@    {
@
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 80002b8:	4b22      	ldr	r3, [pc, #136]	@ (8000344 <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice
 80002ba:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Is it non-active?
 80002bc:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_time_slice                @ Yes, skip time-slice processing
 80002be:	d006      	beq.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Decrement the time_slice.  */
@       _tx_timer_time_slice--;
@
    SUBS    r2, r2, #1                              @ Decrement the time-slice
 80002c0:	3a01      	subs	r2, #1
    STR     r2, [r3, #0]                            @ Store new time-slice value
 80002c2:	601a      	str	r2, [r3, #0]
@
@       /* Check for expiration.  */
@       if (__tx_timer_time_slice == 0)
@
    CMP     r2, #0                                  @ Has it expired?
 80002c4:	2a00      	cmp	r2, #0
    BNE     __tx_timer_no_time_slice                @ No, skip expiration processing
 80002c6:	d102      	bne.n	80002ce <__tx_timer_no_time_slice>
@
@       /* Set the time-slice expired flag.  */
@       _tx_timer_expired_time_slice =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 80002c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    MOVS    r0, #1                                  @ Build expired value
 80002ca:	2001      	movs	r0, #1
    STR     r0, [r3, #0]                            @ Set time-slice expiration flag
 80002cc:	6018      	str	r0, [r3, #0]

080002ce <__tx_timer_no_time_slice>:
@
@    /* Test for timer expiration.  */
@    if (*_tx_timer_current_ptr)
@    {
@
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 80002ce:	491f      	ldr	r1, [pc, #124]	@ (800034c <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            @ Pickup current timer
 80002d0:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            @ Pickup timer list entry
 80002d2:	6802      	ldr	r2, [r0, #0]
    CMP     r2, #0                                  @ Is there anything in the list?
 80002d4:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_no_timer                     @ No, just increment the timer
 80002d6:	d003      	beq.n	80002e0 <__tx_timer_no_timer>
@
@        /* Set expiration flag.  */
@        _tx_timer_expired =  TX_TRUE;
@
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 80002d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    MOVS    r2, #1                                  @ Build expired value
 80002da:	2201      	movs	r2, #1
    STR     r2, [r3, #0]                            @ Set expired flag
 80002dc:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         @ Finished timer processing
 80002de:	e007      	b.n	80002f0 <__tx_timer_done>

080002e0 <__tx_timer_no_timer>:
__tx_timer_no_timer:
@
@        /* No timer expired, increment the timer pointer.  */
@        _tx_timer_current_ptr++;
@
    ADDS    r0, r0, #4                              @ Move to next timer
 80002e0:	3004      	adds	r0, #4
@
@        /* Check for wrap-around.  */
@        if (_tx_timer_current_ptr == _tx_timer_list_end)
@
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 80002e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000354 <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            @ Pickup list end
 80002e4:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  @ Are we at list end?
 80002e6:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    @ No, skip wrap-around logic
 80002e8:	d101      	bne.n	80002ee <__tx_timer_skip_wrap>
@
@            /* Wrap to beginning of list.  */
@            _tx_timer_current_ptr =  _tx_timer_list_start;
@
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 80002ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000358 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            @ Set current pointer to list start
 80002ec:	6818      	ldr	r0, [r3, #0]

080002ee <__tx_timer_skip_wrap>:
@
__tx_timer_skip_wrap:
@
    STR     r0, [r1, #0]                            @ Store new current timer pointer
 80002ee:	6008      	str	r0, [r1, #0]

080002f0 <__tx_timer_done>:
@
@    /* See if anything has expired.  */
@    if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of expired flag
 80002f0:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup time-slice expired flag
 80002f2:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ Did a time-slice expire?
 80002f4:	2a00      	cmp	r2, #0
    BNE     __tx_something_expired                  @ If non-zero, time-slice expired
 80002f6:	d103      	bne.n	8000300 <__tx_something_expired>
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of other expired flag
 80002f8:	4915      	ldr	r1, [pc, #84]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 80002fa:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Did a timer expire?
 80002fc:	2800      	cmp	r0, #0
    BEQ     __tx_timer_nothing_expired              @ No, nothing expired
 80002fe:	d01b      	beq.n	8000338 <__tx_timer_nothing_expired>

08000300 <__tx_something_expired>:
@
__tx_something_expired:
@
@
    PUSH    {r0, lr}                                @ Save the lr register on the stack
 8000300:	b501      	push	{r0, lr}
@
@    /* Did a timer expire?  */
@    if (_tx_timer_expired)
@    {
@
    LDR     r1, =_tx_timer_expired                  @ Pickup addr of expired flag
 8000302:	4913      	ldr	r1, [pc, #76]	@ (8000350 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            @ Pickup timer expired flag
 8000304:	6808      	ldr	r0, [r1, #0]
    CMP     r0, #0                                  @ Check for timer expiration
 8000306:	2800      	cmp	r0, #0
    BEQ     __tx_timer_dont_activate                @ If not set, skip timer activation
 8000308:	d001      	beq.n	800030e <__tx_timer_dont_activate>
@
@        /* Process timer expiration.  */
@        _tx_timer_expiration_process()@
@
    BL      _tx_timer_expiration_process            @ Call the timer expiration handling routine
 800030a:	f012 f97b 	bl	8012604 <_tx_timer_expiration_process>

0800030e <__tx_timer_dont_activate>:
@
@    /* Did time slice expire?  */
@    if (_tx_timer_expired_time_slice)
@    {
@
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup addr of time-slice expired
 800030e:	4b0e      	ldr	r3, [pc, #56]	@ (8000348 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            @ Pickup the actual flag
 8000310:	681a      	ldr	r2, [r3, #0]
    CMP     r2, #0                                  @ See if the flag is set
 8000312:	2a00      	cmp	r2, #0
    BEQ     __tx_timer_not_ts_expiration            @ No, skip time-slice processing
 8000314:	d00e      	beq.n	8000334 <__tx_timer_not_ts_expiration>
@
@        /* Time slice interrupted thread.  */
@        _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   @ Call time-slice processing
 8000316:	f012 f8eb 	bl	80124f0 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800031a:	4810      	ldr	r0, [pc, #64]	@ (800035c <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                @ Is the preempt disable flag set?
 800031c:	6801      	ldr	r1, [r0, #0]
    CMP     r1, #0                                  @
 800031e:	2900      	cmp	r1, #0
    BNE     __tx_timer_skip_time_slice              @ Yes, skip the PendSV logic
 8000320:	d108      	bne.n	8000334 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000322:	480f      	ldr	r0, [pc, #60]	@ (8000360 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                @ Pickup the current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000326:	4a0f      	ldr	r2, [pc, #60]	@ (8000364 <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                @ Pickup the execute thread pointer
 8000328:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         @ Build address of control register
 800032a:	480f      	ldr	r0, [pc, #60]	@ (8000368 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800032c:	4a0f      	ldr	r2, [pc, #60]	@ (800036c <__tx_timer_nothing_expired+0x34>)
    CMP     r1, r3                                  @ Are they the same?
 800032e:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              @ If the same, there was no time-slice performed
 8000330:	d000      	beq.n	8000334 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                @ Not the same, issue the PendSV for preemption
 8000332:	6002      	str	r2, [r0, #0]

08000334 <__tx_timer_not_ts_expiration>:
@
@    }
@
__tx_timer_not_ts_expiration:
@
    POP   {r0, r1}                                  @ Recover lr register (r0 is just there for
 8000334:	bc03      	pop	{r0, r1}
    MOV   lr, r1                                    @   the 8-byte stack alignment
 8000336:	468e      	mov	lr, r1

08000338 <__tx_timer_nothing_expired>:
@
@    }
@
__tx_timer_nothing_expired:

    DSB                                             @ Complete all memory access
 8000338:	f3bf 8f4f 	dsb	sy
    BX      lr                                      @ Return to caller
 800033c:	4770      	bx	lr
 800033e:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             @ Pickup address of system clock
 8000340:	2001108c 	.word	0x2001108c
    LDR     r3, =_tx_timer_time_slice               @ Pickup address of time-slice
 8000344:	200115ec 	.word	0x200115ec
    LDR     r3, =_tx_timer_expired_time_slice       @ Pickup address of expired flag
 8000348:	20011090 	.word	0x20011090
    LDR     r1, =_tx_timer_current_ptr              @ Pickup current timer pointer address
 800034c:	2001111c 	.word	0x2001111c
    LDR     r3, =_tx_timer_expired                  @ Pickup expiration flag address
 8000350:	20011120 	.word	0x20011120
    LDR     r3, =_tx_timer_list_end                 @ Pickup addr of timer list end
 8000354:	20011118 	.word	0x20011118
    LDR     r3, =_tx_timer_list_start               @ Pickup addr of timer list start
 8000358:	20011114 	.word	0x20011114
    LDR     r0, =_tx_thread_preempt_disable         @ Build address of preempt disable flag
 800035c:	20011080 	.word	0x20011080
    LDR     r0, =_tx_thread_current_ptr             @ Build current thread pointer address
 8000360:	20010fe8 	.word	0x20010fe8
    LDR     r2, =_tx_thread_execute_ptr             @ Build execute thread pointer address
 8000364:	20010fec 	.word	0x20010fec
    LDR     r0, =0xE000ED04                         @ Build address of control register
 8000368:	e000ed04 	.word	0xe000ed04
    LDR     r2, =0x10000000                         @ Build value for PendSV bit
 800036c:	10000000 	.word	0x10000000

08000370 <USBPD_CAD_Init>:
 8000370:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	0015      	movs	r5, r2
 8000376:	001e      	movs	r6, r3
 8000378:	2400      	movs	r4, #0
 800037a:	4668      	mov	r0, sp
 800037c:	7a00      	ldrb	r0, [r0, #8]
 800037e:	2803      	cmp	r0, #3
 8000380:	d301      	bcc.n	8000386 <USBPD_CAD_Init+0x16>
 8000382:	2401      	movs	r4, #1
 8000384:	e01f      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 8000386:	9100      	str	r1, [sp, #0]
 8000388:	2900      	cmp	r1, #0
 800038a:	d101      	bne.n	8000390 <USBPD_CAD_Init+0x20>
 800038c:	2402      	movs	r4, #2
 800038e:	e01a      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 8000390:	200c      	movs	r0, #12
 8000392:	f01d fe57 	bl	801e044 <malloc>
 8000396:	0007      	movs	r7, r0
 8000398:	d101      	bne.n	800039e <USBPD_CAD_Init+0x2e>
 800039a:	2403      	movs	r4, #3
 800039c:	e013      	b.n	80003c6 <USBPD_CAD_Init+0x56>
 800039e:	210c      	movs	r1, #12
 80003a0:	f01d ff5d 	bl	801e25e <__aeabi_memclr>
 80003a4:	603e      	str	r6, [r7, #0]
 80003a6:	723c      	strb	r4, [r7, #8]
 80003a8:	9800      	ldr	r0, [sp, #0]
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	484a      	ldr	r0, [pc, #296]	@ (80004d8 <.text_6>)
 80003ae:	4669      	mov	r1, sp
 80003b0:	7a09      	ldrb	r1, [r1, #8]
 80003b2:	0089      	lsls	r1, r1, #2
 80003b4:	5047      	str	r7, [r0, r1]
 80003b6:	9800      	ldr	r0, [sp, #0]
 80003b8:	6843      	ldr	r3, [r0, #4]
 80003ba:	0032      	movs	r2, r6
 80003bc:	0029      	movs	r1, r5
 80003be:	4668      	mov	r0, sp
 80003c0:	7a00      	ldrb	r0, [r0, #8]
 80003c2:	f013 fb59 	bl	8013a78 <CAD_Init>
 80003c6:	0020      	movs	r0, r4
 80003c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080003ca <USBPD_CAD_PortEnable>:
 80003ca:	2803      	cmp	r0, #3
 80003cc:	d203      	bcs.n	80003d6 <USBPD_CAD_PortEnable+0xc>
 80003ce:	4a42      	ldr	r2, [pc, #264]	@ (80004d8 <.text_6>)
 80003d0:	0080      	lsls	r0, r0, #2
 80003d2:	5810      	ldr	r0, [r2, r0]
 80003d4:	7201      	strb	r1, [r0, #8]
 80003d6:	4770      	bx	lr

080003d8 <USBPD_CAD_Process>:
 80003d8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80003da:	2400      	movs	r4, #0
 80003dc:	4669      	mov	r1, sp
 80003de:	700c      	strb	r4, [r1, #0]
 80003e0:	9401      	str	r4, [sp, #4]
 80003e2:	2500      	movs	r5, #0
 80003e4:	43ed      	mvns	r5, r5
 80003e6:	4f3d      	ldr	r7, [pc, #244]	@ (80004dc <.text_7>)
 80003e8:	483b      	ldr	r0, [pc, #236]	@ (80004d8 <.text_6>)
 80003ea:	00a1      	lsls	r1, r4, #2
 80003ec:	1846      	adds	r6, r0, r1
 80003ee:	6830      	ldr	r0, [r6, #0]
 80003f0:	2800      	cmp	r0, #0
 80003f2:	d06c      	beq.n	80004ce <USBPD_CAD_Process+0xf6>
 80003f4:	7a00      	ldrb	r0, [r0, #8]
 80003f6:	2801      	cmp	r0, #1
 80003f8:	d169      	bne.n	80004ce <USBPD_CAD_Process+0xf6>
 80003fa:	aa01      	add	r2, sp, #4
 80003fc:	4669      	mov	r1, sp
 80003fe:	b2e0      	uxtb	r0, r4
 8000400:	f013 fda8 	bl	8013f54 <CAD_StateMachine>
 8000404:	42a8      	cmp	r0, r5
 8000406:	d800      	bhi.n	800040a <USBPD_CAD_Process+0x32>
 8000408:	0005      	movs	r5, r0
 800040a:	4668      	mov	r0, sp
 800040c:	7800      	ldrb	r0, [r0, #0]
 800040e:	2801      	cmp	r0, #1
 8000410:	d004      	beq.n	800041c <USBPD_CAD_Process+0x44>
 8000412:	2802      	cmp	r0, #2
 8000414:	d012      	beq.n	800043c <USBPD_CAD_Process+0x64>
 8000416:	2804      	cmp	r0, #4
 8000418:	d010      	beq.n	800043c <USBPD_CAD_Process+0x64>
 800041a:	e040      	b.n	800049e <USBPD_CAD_Process+0xc6>
 800041c:	6830      	ldr	r0, [r6, #0]
 800041e:	6801      	ldr	r1, [r0, #0]
 8000420:	680a      	ldr	r2, [r1, #0]
 8000422:	4b2f      	ldr	r3, [pc, #188]	@ (80004e0 <.text_8>)
 8000424:	4013      	ands	r3, r2
 8000426:	600b      	str	r3, [r1, #0]
 8000428:	6801      	ldr	r1, [r0, #0]
 800042a:	680a      	ldr	r2, [r1, #0]
 800042c:	23c0      	movs	r3, #192	@ 0xc0
 800042e:	439a      	bics	r2, r3
 8000430:	600a      	str	r2, [r1, #0]
 8000432:	6800      	ldr	r0, [r0, #0]
 8000434:	6801      	ldr	r1, [r0, #0]
 8000436:	4039      	ands	r1, r7
 8000438:	6001      	str	r1, [r0, #0]
 800043a:	e034      	b.n	80004a6 <USBPD_CAD_Process+0xce>
 800043c:	6830      	ldr	r0, [r6, #0]
 800043e:	9901      	ldr	r1, [sp, #4]
 8000440:	2901      	cmp	r1, #1
 8000442:	6801      	ldr	r1, [r0, #0]
 8000444:	680a      	ldr	r2, [r1, #0]
 8000446:	d103      	bne.n	8000450 <USBPD_CAD_Process+0x78>
 8000448:	403a      	ands	r2, r7
 800044a:	2380      	movs	r3, #128	@ 0x80
 800044c:	01db      	lsls	r3, r3, #7
 800044e:	e002      	b.n	8000456 <USBPD_CAD_Process+0x7e>
 8000450:	403a      	ands	r2, r7
 8000452:	2380      	movs	r3, #128	@ 0x80
 8000454:	019b      	lsls	r3, r3, #6
 8000456:	4313      	orrs	r3, r2
 8000458:	600b      	str	r3, [r1, #0]
 800045a:	6801      	ldr	r1, [r0, #0]
 800045c:	680b      	ldr	r3, [r1, #0]
 800045e:	22c0      	movs	r2, #192	@ 0xc0
 8000460:	4393      	bics	r3, r2
 8000462:	469c      	mov	ip, r3
 8000464:	9a01      	ldr	r2, [sp, #4]
 8000466:	0193      	lsls	r3, r2, #6
 8000468:	22c0      	movs	r2, #192	@ 0xc0
 800046a:	401a      	ands	r2, r3
 800046c:	4663      	mov	r3, ip
 800046e:	431a      	orrs	r2, r3
 8000470:	600a      	str	r2, [r1, #0]
 8000472:	6801      	ldr	r1, [r0, #0]
 8000474:	680a      	ldr	r2, [r1, #0]
 8000476:	2380      	movs	r3, #128	@ 0x80
 8000478:	015b      	lsls	r3, r3, #5
 800047a:	4313      	orrs	r3, r2
 800047c:	600b      	str	r3, [r1, #0]
 800047e:	6800      	ldr	r0, [r0, #0]
 8000480:	6801      	ldr	r1, [r0, #0]
 8000482:	074a      	lsls	r2, r1, #29
 8000484:	0fd2      	lsrs	r2, r2, #31
 8000486:	d103      	bne.n	8000490 <USBPD_CAD_Process+0xb8>
 8000488:	2208      	movs	r2, #8
 800048a:	4391      	bics	r1, r2
 800048c:	6001      	str	r1, [r0, #0]
 800048e:	e002      	b.n	8000496 <USBPD_CAD_Process+0xbe>
 8000490:	2208      	movs	r2, #8
 8000492:	430a      	orrs	r2, r1
 8000494:	6002      	str	r2, [r0, #0]
 8000496:	2168      	movs	r1, #104	@ 0x68
 8000498:	b2e0      	uxtb	r0, r4
 800049a:	f000 f925 	bl	80006e8 <USBPD_PE_Notification>
 800049e:	4668      	mov	r0, sp
 80004a0:	7800      	ldrb	r0, [r0, #0]
 80004a2:	2800      	cmp	r0, #0
 80004a4:	d013      	beq.n	80004ce <USBPD_CAD_Process+0xf6>
 80004a6:	9a01      	ldr	r2, [sp, #4]
 80004a8:	4668      	mov	r0, sp
 80004aa:	7801      	ldrb	r1, [r0, #0]
 80004ac:	b2e0      	uxtb	r0, r4
 80004ae:	6833      	ldr	r3, [r6, #0]
 80004b0:	685b      	ldr	r3, [r3, #4]
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4798      	blx	r3
 80004b6:	4668      	mov	r0, sp
 80004b8:	7800      	ldrb	r0, [r0, #0]
 80004ba:	2801      	cmp	r0, #1
 80004bc:	d003      	beq.n	80004c6 <USBPD_CAD_Process+0xee>
 80004be:	4668      	mov	r0, sp
 80004c0:	7800      	ldrb	r0, [r0, #0]
 80004c2:	2803      	cmp	r0, #3
 80004c4:	d103      	bne.n	80004ce <USBPD_CAD_Process+0xf6>
 80004c6:	2169      	movs	r1, #105	@ 0x69
 80004c8:	b2e0      	uxtb	r0, r4
 80004ca:	f000 f90d 	bl	80006e8 <USBPD_PE_Notification>
 80004ce:	1c64      	adds	r4, r4, #1
 80004d0:	2c03      	cmp	r4, #3
 80004d2:	d389      	bcc.n	80003e8 <USBPD_CAD_Process+0x10>
 80004d4:	0028      	movs	r0, r5
 80004d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080004d8 <.text_6>:
 80004d8:	200002e0 	.word	0x200002e0

080004dc <.text_7>:
 80004dc:	ffff9fff 	.word	0xffff9fff

080004e0 <.text_8>:
 80004e0:	ffffefff 	.word	0xffffefff

080004e4 <USBPD_CAD_AssertRd>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	0004      	movs	r4, r0
 80004e8:	f015 feaa 	bl	8016240 <USBPDM1_DeAssertRp>
 80004ec:	0020      	movs	r0, r4
 80004ee:	f015 feb1 	bl	8016254 <USBPDM1_AssertRd>
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <USBPD_CAD_AssertRp>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	0004      	movs	r4, r0
 80004f8:	f015 ff52 	bl	80163a0 <USBPDM1_DeAssertRd>
 80004fc:	0020      	movs	r0, r4
 80004fe:	f015 fde7 	bl	80160d0 <USBPDM1_AssertRp>
 8000502:	bd10      	pop	{r4, pc}

08000504 <USBPD_CAD_EnterErrorRecovery>:
 8000504:	b580      	push	{r7, lr}
 8000506:	f013 fbc1 	bl	8013c8c <CAD_Enter_ErrorRecovery>
 800050a:	bd01      	pop	{r0, pc}

0800050c <USBPD_CAD_SRC_SetRpResistor>:
 800050c:	b510      	push	{r4, lr}
 800050e:	2404      	movs	r4, #4
 8000510:	f013 fc22 	bl	8013d58 <CAD_Set_ResistorRp>
 8000514:	2800      	cmp	r0, #0
 8000516:	d100      	bne.n	800051a <USBPD_CAD_SRC_SetRpResistor+0xe>
 8000518:	2400      	movs	r4, #0
 800051a:	0020      	movs	r0, r4
 800051c:	bd10      	pop	{r4, pc}

0800051e <USBPD_CAD_SetRpResistor>:
 800051e:	b580      	push	{r7, lr}
 8000520:	f7ff fff4 	bl	800050c <USBPD_CAD_SRC_SetRpResistor>
 8000524:	bd02      	pop	{r1, pc}

08000526 <USBPD_CAD_GetMemoryConsumption>:
 8000526:	2024      	movs	r0, #36	@ 0x24
 8000528:	4770      	bx	lr
	...

0800052c <USBPD_PE_Init>:
 800052c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800052e:	000e      	movs	r6, r1
 8000530:	0017      	movs	r7, r2
 8000532:	001c      	movs	r4, r3
 8000534:	6871      	ldr	r1, [r6, #4]
 8000536:	070a      	lsls	r2, r1, #28
 8000538:	0fd2      	lsrs	r2, r2, #31
 800053a:	d002      	beq.n	8000542 <USBPD_PE_Init+0x16>
 800053c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800053e:	2900      	cmp	r1, #0
 8000540:	d002      	beq.n	8000548 <USBPD_PE_Init+0x1c>
 8000542:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8000544:	2900      	cmp	r1, #0
 8000546:	d101      	bne.n	800054c <USBPD_PE_Init+0x20>
 8000548:	241b      	movs	r4, #27
 800054a:	e04a      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800054c:	4669      	mov	r1, sp
 800054e:	7008      	strb	r0, [r1, #0]
 8000550:	4668      	mov	r0, sp
 8000552:	7800      	ldrb	r0, [r0, #0]
 8000554:	2803      	cmp	r0, #3
 8000556:	d301      	bcc.n	800055c <USBPD_PE_Init+0x30>
 8000558:	2417      	movs	r4, #23
 800055a:	e042      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800055c:	2096      	movs	r0, #150	@ 0x96
 800055e:	00c0      	lsls	r0, r0, #3
 8000560:	f01d fd70 	bl	801e044 <malloc>
 8000564:	0005      	movs	r5, r0
 8000566:	d101      	bne.n	800056c <USBPD_PE_Init+0x40>
 8000568:	2416      	movs	r4, #22
 800056a:	e03a      	b.n	80005e2 <USBPD_PE_Init+0xb6>
 800056c:	2196      	movs	r1, #150	@ 0x96
 800056e:	00c9      	lsls	r1, r1, #3
 8000570:	f01d fe75 	bl	801e25e <__aeabi_memclr>
 8000574:	487a      	ldr	r0, [pc, #488]	@ (8000760 <.text_16>)
 8000576:	4669      	mov	r1, sp
 8000578:	7809      	ldrb	r1, [r1, #0]
 800057a:	0089      	lsls	r1, r1, #2
 800057c:	5045      	str	r5, [r0, r1]
 800057e:	602e      	str	r6, [r5, #0]
 8000580:	606f      	str	r7, [r5, #4]
 8000582:	4668      	mov	r0, sp
 8000584:	7800      	ldrb	r0, [r0, #0]
 8000586:	7428      	strb	r0, [r5, #16]
 8000588:	60ac      	str	r4, [r5, #8]
 800058a:	4876      	ldr	r0, [pc, #472]	@ (8000764 <.text_17>)
 800058c:	182b      	adds	r3, r5, r0
 800058e:	4876      	ldr	r0, [pc, #472]	@ (8000768 <.text_18>)
 8000590:	182a      	adds	r2, r5, r0
 8000592:	0031      	movs	r1, r6
 8000594:	4668      	mov	r0, sp
 8000596:	7800      	ldrb	r0, [r0, #0]
 8000598:	f005 f98c 	bl	80058b4 <USBPD_PRL_Init>
 800059c:	0004      	movs	r4, r0
 800059e:	d120      	bne.n	80005e2 <USBPD_PE_Init+0xb6>
 80005a0:	6868      	ldr	r0, [r5, #4]
 80005a2:	6801      	ldr	r1, [r0, #0]
 80005a4:	2703      	movs	r7, #3
 80005a6:	682a      	ldr	r2, [r5, #0]
 80005a8:	6852      	ldr	r2, [r2, #4]
 80005aa:	0753      	lsls	r3, r2, #29
 80005ac:	0fdb      	lsrs	r3, r3, #31
 80005ae:	d006      	beq.n	80005be <USBPD_PE_Init+0x92>
 80005b0:	2208      	movs	r2, #8
 80005b2:	430a      	orrs	r2, r1
 80005b4:	6002      	str	r2, [r0, #0]
 80005b6:	6873      	ldr	r3, [r6, #4]
 80005b8:	403b      	ands	r3, r7
 80005ba:	2201      	movs	r2, #1
 80005bc:	e005      	b.n	80005ca <USBPD_PE_Init+0x9e>
 80005be:	2208      	movs	r2, #8
 80005c0:	4391      	bics	r1, r2
 80005c2:	6001      	str	r1, [r0, #0]
 80005c4:	6873      	ldr	r3, [r6, #4]
 80005c6:	403b      	ands	r3, r7
 80005c8:	2200      	movs	r2, #0
 80005ca:	4611      	mov	r1, r2
 80005cc:	4668      	mov	r0, sp
 80005ce:	7800      	ldrb	r0, [r0, #0]
 80005d0:	f005 f9ab 	bl	800592a <USBPD_PRL_SetHeader>
 80005d4:	6870      	ldr	r0, [r6, #4]
 80005d6:	4007      	ands	r7, r0
 80005d8:	0039      	movs	r1, r7
 80005da:	4668      	mov	r0, sp
 80005dc:	7800      	ldrb	r0, [r0, #0]
 80005de:	f005 f9e2 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 80005e2:	0020      	movs	r0, r4
 80005e4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080005e6 <USBPD_PE_TimerCounter>:
 80005e6:	495e      	ldr	r1, [pc, #376]	@ (8000760 <.text_16>)
 80005e8:	0080      	lsls	r0, r0, #2
 80005ea:	5808      	ldr	r0, [r1, r0]
 80005ec:	49b4      	ldr	r1, [pc, #720]	@ (80008c0 <.text_20>)
 80005ee:	084a      	lsrs	r2, r1, #1
 80005f0:	8bc3      	ldrh	r3, [r0, #30]
 80005f2:	4213      	tst	r3, r2
 80005f4:	d002      	beq.n	80005fc <USBPD_PE_TimerCounter+0x16>
 80005f6:	8bc3      	ldrh	r3, [r0, #30]
 80005f8:	185b      	adds	r3, r3, r1
 80005fa:	83c3      	strh	r3, [r0, #30]
 80005fc:	8c03      	ldrh	r3, [r0, #32]
 80005fe:	4213      	tst	r3, r2
 8000600:	d002      	beq.n	8000608 <USBPD_PE_TimerCounter+0x22>
 8000602:	8c03      	ldrh	r3, [r0, #32]
 8000604:	185b      	adds	r3, r3, r1
 8000606:	8403      	strh	r3, [r0, #32]
 8000608:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800060a:	4213      	tst	r3, r2
 800060c:	d002      	beq.n	8000614 <USBPD_PE_TimerCounter+0x2e>
 800060e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8000610:	185b      	adds	r3, r3, r1
 8000612:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8000614:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8000616:	4213      	tst	r3, r2
 8000618:	d002      	beq.n	8000620 <USBPD_PE_TimerCounter+0x3a>
 800061a:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 800061c:	185b      	adds	r3, r3, r1
 800061e:	8443      	strh	r3, [r0, #34]	@ 0x22
 8000620:	8c83      	ldrh	r3, [r0, #36]	@ 0x24
 8000622:	4213      	tst	r3, r2
 8000624:	d002      	beq.n	800062c <USBPD_PE_TimerCounter+0x46>
 8000626:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 8000628:	1851      	adds	r1, r2, r1
 800062a:	8481      	strh	r1, [r0, #36]	@ 0x24
 800062c:	4770      	bx	lr

0800062e <USBPD_PE_TimerCounteUpdate>:
 800062e:	b570      	push	{r4, r5, r6, lr}
 8000630:	000e      	movs	r6, r1
 8000632:	494b      	ldr	r1, [pc, #300]	@ (8000760 <.text_16>)
 8000634:	0080      	lsls	r0, r0, #2
 8000636:	580c      	ldr	r4, [r1, r0]
 8000638:	2180      	movs	r1, #128	@ 0x80
 800063a:	0209      	lsls	r1, r1, #8
 800063c:	428e      	cmp	r6, r1
 800063e:	da28      	bge.n	8000692 <USBPD_PE_TimerCounteUpdate+0x64>
 8000640:	1e4d      	subs	r5, r1, #1
 8000642:	8be0      	ldrh	r0, [r4, #30]
 8000644:	4228      	tst	r0, r5
 8000646:	d004      	beq.n	8000652 <USBPD_PE_TimerCounteUpdate+0x24>
 8000648:	0031      	movs	r1, r6
 800064a:	8be0      	ldrh	r0, [r4, #30]
 800064c:	f000 ffcb 	bl	80015e6 <PE_UpdateTimer>
 8000650:	83e0      	strh	r0, [r4, #30]
 8000652:	8c20      	ldrh	r0, [r4, #32]
 8000654:	4228      	tst	r0, r5
 8000656:	d004      	beq.n	8000662 <USBPD_PE_TimerCounteUpdate+0x34>
 8000658:	0031      	movs	r1, r6
 800065a:	8c20      	ldrh	r0, [r4, #32]
 800065c:	f000 ffc3 	bl	80015e6 <PE_UpdateTimer>
 8000660:	8420      	strh	r0, [r4, #32]
 8000662:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8000664:	4228      	tst	r0, r5
 8000666:	d004      	beq.n	8000672 <USBPD_PE_TimerCounteUpdate+0x44>
 8000668:	0031      	movs	r1, r6
 800066a:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 800066c:	f000 ffbb 	bl	80015e6 <PE_UpdateTimer>
 8000670:	84e0      	strh	r0, [r4, #38]	@ 0x26
 8000672:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000674:	4228      	tst	r0, r5
 8000676:	d004      	beq.n	8000682 <USBPD_PE_TimerCounteUpdate+0x54>
 8000678:	0031      	movs	r1, r6
 800067a:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 800067c:	f000 ffb3 	bl	80015e6 <PE_UpdateTimer>
 8000680:	8460      	strh	r0, [r4, #34]	@ 0x22
 8000682:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8000684:	4228      	tst	r0, r5
 8000686:	d004      	beq.n	8000692 <USBPD_PE_TimerCounteUpdate+0x64>
 8000688:	0031      	movs	r1, r6
 800068a:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800068c:	f000 ffab 	bl	80015e6 <PE_UpdateTimer>
 8000690:	84a0      	strh	r0, [r4, #36]	@ 0x24
 8000692:	bd70      	pop	{r4, r5, r6, pc}

08000694 <USBPD_PE_IsCableConnected>:
 8000694:	b510      	push	{r4, lr}
 8000696:	4a32      	ldr	r2, [pc, #200]	@ (8000760 <.text_16>)
 8000698:	0080      	lsls	r0, r0, #2
 800069a:	5810      	ldr	r0, [r2, r0]
 800069c:	6842      	ldr	r2, [r0, #4]
 800069e:	6813      	ldr	r3, [r2, #0]
 80006a0:	4cb2      	ldr	r4, [pc, #712]	@ (800096c <.text_22>)
 80006a2:	401c      	ands	r4, r3
 80006a4:	0309      	lsls	r1, r1, #12
 80006a6:	2380      	movs	r3, #128	@ 0x80
 80006a8:	015b      	lsls	r3, r3, #5
 80006aa:	4019      	ands	r1, r3
 80006ac:	4321      	orrs	r1, r4
 80006ae:	6011      	str	r1, [r2, #0]
 80006b0:	2148      	movs	r1, #72	@ 0x48
 80006b2:	7441      	strb	r1, [r0, #17]
 80006b4:	bd10      	pop	{r4, pc}

080006b6 <USBPD_PE_StateMachine_Reset>:
 80006b6:	2148      	movs	r1, #72	@ 0x48
 80006b8:	4a29      	ldr	r2, [pc, #164]	@ (8000760 <.text_16>)
 80006ba:	0080      	lsls	r0, r0, #2
 80006bc:	5810      	ldr	r0, [r2, r0]
 80006be:	7441      	strb	r1, [r0, #17]
 80006c0:	4770      	bx	lr

080006c2 <USBPD_PE_StateMachine_Stop>:
 80006c2:	b580      	push	{r7, lr}
 80006c4:	f005 fc34 	bl	8005f30 <USBPD_PRL_Stop>
 80006c8:	bd01      	pop	{r0, pc}

080006ca <USBPD_PE_StateMachine_DRP>:
 80006ca:	b580      	push	{r7, lr}
 80006cc:	4924      	ldr	r1, [pc, #144]	@ (8000760 <.text_16>)
 80006ce:	0082      	lsls	r2, r0, #2
 80006d0:	5889      	ldr	r1, [r1, r2]
 80006d2:	6849      	ldr	r1, [r1, #4]
 80006d4:	6809      	ldr	r1, [r1, #0]
 80006d6:	074a      	lsls	r2, r1, #29
 80006d8:	0fd2      	lsrs	r2, r2, #31
 80006da:	d002      	beq.n	80006e2 <USBPD_PE_StateMachine_DRP+0x18>
 80006dc:	f002 fb8a 	bl	8002df4 <USBPD_PE_StateMachine_SRC>
 80006e0:	bd02      	pop	{r1, pc}
 80006e2:	f001 fcd5 	bl	8002090 <USBPD_PE_StateMachine_SNK>
 80006e6:	bd02      	pop	{r1, pc}

080006e8 <USBPD_PE_Notification>:
 80006e8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 80006ea:	0004      	movs	r4, r0
 80006ec:	2803      	cmp	r0, #3
 80006ee:	d211      	bcs.n	8000714 <USBPD_PE_Notification+0x2c>
 80006f0:	000d      	movs	r5, r1
 80006f2:	2000      	movs	r0, #0
 80006f4:	9000      	str	r0, [sp, #0]
 80006f6:	2300      	movs	r3, #0
 80006f8:	002a      	movs	r2, r5
 80006fa:	0021      	movs	r1, r4
 80006fc:	2009      	movs	r0, #9
 80006fe:	4eb2      	ldr	r6, [pc, #712]	@ (80009c8 <.text_24>)
 8000700:	6836      	ldr	r6, [r6, #0]
 8000702:	47b0      	blx	r6
 8000704:	0029      	movs	r1, r5
 8000706:	0020      	movs	r0, r4
 8000708:	4ab0      	ldr	r2, [pc, #704]	@ (80009cc <.text_25>)
 800070a:	00a3      	lsls	r3, r4, #2
 800070c:	58d2      	ldr	r2, [r2, r3]
 800070e:	6892      	ldr	r2, [r2, #8]
 8000710:	68d2      	ldr	r2, [r2, #12]
 8000712:	4790      	blx	r2
 8000714:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000716 <USBPD_PE_InitVDM_Callback>:
 8000716:	4aad      	ldr	r2, [pc, #692]	@ (80009cc <.text_25>)
 8000718:	0080      	lsls	r0, r0, #2
 800071a:	5810      	ldr	r0, [r2, r0]
 800071c:	60c1      	str	r1, [r0, #12]
 800071e:	4770      	bx	lr

08000720 <USBPD_PE_Request_HardReset>:
 8000720:	b580      	push	{r7, lr}
 8000722:	49aa      	ldr	r1, [pc, #680]	@ (80009cc <.text_25>)
 8000724:	0082      	lsls	r2, r0, #2
 8000726:	5889      	ldr	r1, [r1, r2]
 8000728:	220f      	movs	r2, #15
 800072a:	2332      	movs	r3, #50	@ 0x32
 800072c:	54ca      	strb	r2, [r1, r3]
 800072e:	6889      	ldr	r1, [r1, #8]
 8000730:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000732:	4788      	blx	r1
 8000734:	2000      	movs	r0, #0
 8000736:	bd02      	pop	{r1, pc}

08000738 <USBPD_PE_Request_CableReset>:
 8000738:	b580      	push	{r7, lr}
 800073a:	4909      	ldr	r1, [pc, #36]	@ (8000760 <.text_16>)
 800073c:	0082      	lsls	r2, r0, #2
 800073e:	5889      	ldr	r1, [r1, r2]
 8000740:	684a      	ldr	r2, [r1, #4]
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	4ba2      	ldr	r3, [pc, #648]	@ (80009d0 <.text_26>)
 8000746:	4013      	ands	r3, r2
 8000748:	4aa2      	ldr	r2, [pc, #648]	@ (80009d4 <.text_27>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d105      	bne.n	800075a <USBPD_PE_Request_CableReset+0x22>
 800074e:	2299      	movs	r2, #153	@ 0x99
 8000750:	2332      	movs	r3, #50	@ 0x32
 8000752:	54ca      	strb	r2, [r1, r3]
 8000754:	6889      	ldr	r1, [r1, #8]
 8000756:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000758:	4788      	blx	r1
 800075a:	2010      	movs	r0, #16
 800075c:	bd02      	pop	{r1, pc}
	...

08000760 <.text_16>:
 8000760:	200002ec 	.word	0x200002ec

08000764 <.text_17>:
 8000764:	0000048e 	.word	0x0000048e

08000768 <.text_18>:
 8000768:	00000281 	.word	0x00000281

0800076c <USBPD_PE_Request_CtrlMessage>:
 800076c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800076e:	b096      	sub	sp, #88	@ 0x58
 8000770:	4896      	ldr	r0, [pc, #600]	@ (80009cc <.text_25>)
 8000772:	a916      	add	r1, sp, #88	@ 0x58
 8000774:	7809      	ldrb	r1, [r1, #0]
 8000776:	0089      	lsls	r1, r1, #2
 8000778:	5840      	ldr	r0, [r0, r1]
 800077a:	9001      	str	r0, [sp, #4]
 800077c:	2400      	movs	r4, #0
 800077e:	a802      	add	r0, sp, #8
 8000780:	4995      	ldr	r1, [pc, #596]	@ (80009d8 <.text_28>)
 8000782:	224c      	movs	r2, #76	@ 0x4c
 8000784:	f01d fd60 	bl	801e248 <__aeabi_memcpy>
 8000788:	2303      	movs	r3, #3
 800078a:	9801      	ldr	r0, [sp, #4]
 800078c:	2132      	movs	r1, #50	@ 0x32
 800078e:	5c40      	ldrb	r0, [r0, r1]
 8000790:	2800      	cmp	r0, #0
 8000792:	d105      	bne.n	80007a0 <USBPD_PE_Request_CtrlMessage+0x34>
 8000794:	9801      	ldr	r0, [sp, #4]
 8000796:	6840      	ldr	r0, [r0, #4]
 8000798:	6800      	ldr	r0, [r0, #0]
 800079a:	04c1      	lsls	r1, r0, #19
 800079c:	0fc9      	lsrs	r1, r1, #31
 800079e:	d101      	bne.n	80007a4 <USBPD_PE_Request_CtrlMessage+0x38>
 80007a0:	2403      	movs	r4, #3
 80007a2:	e089      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 80007a4:	9901      	ldr	r1, [sp, #4]
 80007a6:	6809      	ldr	r1, [r1, #0]
 80007a8:	684a      	ldr	r2, [r1, #4]
 80007aa:	0712      	lsls	r2, r2, #28
 80007ac:	0fd5      	lsrs	r5, r2, #31
 80007ae:	466a      	mov	r2, sp
 80007b0:	7055      	strb	r5, [r2, #1]
 80007b2:	2201      	movs	r2, #1
 80007b4:	0885      	lsrs	r5, r0, #2
 80007b6:	4015      	ands	r5, r2
 80007b8:	d103      	bne.n	80007c2 <USBPD_PE_Request_CtrlMessage+0x56>
 80007ba:	2502      	movs	r5, #2
 80007bc:	466f      	mov	r7, sp
 80007be:	703c      	strb	r4, [r7, #0]
 80007c0:	e003      	b.n	80007ca <USBPD_PE_Request_CtrlMessage+0x5e>
 80007c2:	2500      	movs	r5, #0
 80007c4:	2604      	movs	r6, #4
 80007c6:	466f      	mov	r7, sp
 80007c8:	703e      	strb	r6, [r7, #0]
 80007ca:	0546      	lsls	r6, r0, #21
 80007cc:	0f76      	lsrs	r6, r6, #29
 80007ce:	2e03      	cmp	r6, #3
 80007d0:	d101      	bne.n	80007d6 <USBPD_PE_Request_CtrlMessage+0x6a>
 80007d2:	2608      	movs	r6, #8
 80007d4:	e000      	b.n	80007d8 <USBPD_PE_Request_CtrlMessage+0x6c>
 80007d6:	2600      	movs	r6, #0
 80007d8:	4018      	ands	r0, r3
 80007da:	2802      	cmp	r0, #2
 80007dc:	d101      	bne.n	80007e2 <USBPD_PE_Request_CtrlMessage+0x76>
 80007de:	2040      	movs	r0, #64	@ 0x40
 80007e0:	e000      	b.n	80007e4 <USBPD_PE_Request_CtrlMessage+0x78>
 80007e2:	2000      	movs	r0, #0
 80007e4:	787f      	ldrb	r7, [r7, #1]
 80007e6:	433d      	orrs	r5, r7
 80007e8:	466f      	mov	r7, sp
 80007ea:	783f      	ldrb	r7, [r7, #0]
 80007ec:	432f      	orrs	r7, r5
 80007ee:	433e      	orrs	r6, r7
 80007f0:	4330      	orrs	r0, r6
 80007f2:	4003      	ands	r3, r0
 80007f4:	d002      	beq.n	80007fc <USBPD_PE_Request_CtrlMessage+0x90>
 80007f6:	0003      	movs	r3, r0
 80007f8:	2010      	movs	r0, #16
 80007fa:	4318      	orrs	r0, r3
 80007fc:	2505      	movs	r5, #5
 80007fe:	4228      	tst	r0, r5
 8000800:	d002      	beq.n	8000808 <USBPD_PE_Request_CtrlMessage+0x9c>
 8000802:	0003      	movs	r3, r0
 8000804:	2020      	movs	r0, #32
 8000806:	4318      	orrs	r0, r3
 8000808:	ab17      	add	r3, sp, #92	@ 0x5c
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	005e      	lsls	r6, r3, #1
 800080e:	18f3      	adds	r3, r6, r3
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	ab02      	add	r3, sp, #8
 8000814:	9e00      	ldr	r6, [sp, #0]
 8000816:	5d9e      	ldrb	r6, [r3, r6]
 8000818:	4030      	ands	r0, r6
 800081a:	42b0      	cmp	r0, r6
 800081c:	d11f      	bne.n	800085e <USBPD_PE_Request_CtrlMessage+0xf2>
 800081e:	9e01      	ldr	r6, [sp, #4]
 8000820:	2733      	movs	r7, #51	@ 0x33
 8000822:	55f4      	strb	r4, [r6, r7]
 8000824:	9801      	ldr	r0, [sp, #4]
 8000826:	4eb2      	ldr	r6, [pc, #712]	@ (8000af0 <.text_30>)
 8000828:	1980      	adds	r0, r0, r6
 800082a:	ae17      	add	r6, sp, #92	@ 0x5c
 800082c:	7836      	ldrb	r6, [r6, #0]
 800082e:	2e05      	cmp	r6, #5
 8000830:	d031      	beq.n	8000896 <USBPD_PE_Request_CtrlMessage+0x12a>
 8000832:	2e0b      	cmp	r6, #11
 8000834:	d00e      	beq.n	8000854 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000836:	2e0d      	cmp	r6, #13
 8000838:	d028      	beq.n	800088c <USBPD_PE_Request_CtrlMessage+0x120>
 800083a:	2e11      	cmp	r6, #17
 800083c:	d011      	beq.n	8000862 <USBPD_PE_Request_CtrlMessage+0xf6>
 800083e:	2e12      	cmp	r6, #18
 8000840:	d013      	beq.n	800086a <USBPD_PE_Request_CtrlMessage+0xfe>
 8000842:	2e14      	cmp	r6, #20
 8000844:	d013      	beq.n	800086e <USBPD_PE_Request_CtrlMessage+0x102>
 8000846:	2e15      	cmp	r6, #21
 8000848:	d017      	beq.n	800087a <USBPD_PE_Request_CtrlMessage+0x10e>
 800084a:	2e16      	cmp	r6, #22
 800084c:	d00b      	beq.n	8000866 <USBPD_PE_Request_CtrlMessage+0xfa>
 800084e:	2e18      	cmp	r6, #24
 8000850:	d01c      	beq.n	800088c <USBPD_PE_Request_CtrlMessage+0x120>
 8000852:	e021      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000854:	9901      	ldr	r1, [sp, #4]
 8000856:	6889      	ldr	r1, [r1, #8]
 8000858:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800085a:	2900      	cmp	r1, #0
 800085c:	d11c      	bne.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 800085e:	2402      	movs	r4, #2
 8000860:	e02a      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 8000862:	2111      	movs	r1, #17
 8000864:	e010      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 8000866:	2116      	movs	r1, #22
 8000868:	e00e      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 800086a:	2112      	movs	r1, #18
 800086c:	e00c      	b.n	8000888 <USBPD_PE_Request_CtrlMessage+0x11c>
 800086e:	8909      	ldrh	r1, [r1, #8]
 8000870:	0889      	lsrs	r1, r1, #2
 8000872:	4211      	tst	r1, r2
 8000874:	d110      	bne.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000876:	2410      	movs	r4, #16
 8000878:	e01e      	b.n	80008b8 <USBPD_PE_Request_CtrlMessage+0x14c>
 800087a:	8909      	ldrh	r1, [r1, #8]
 800087c:	09c9      	lsrs	r1, r1, #7
 800087e:	4211      	tst	r1, r2
 8000880:	d101      	bne.n	8000886 <USBPD_PE_Request_CtrlMessage+0x11a>
 8000882:	2010      	movs	r0, #16
 8000884:	e019      	b.n	80008ba <USBPD_PE_Request_CtrlMessage+0x14e>
 8000886:	2115      	movs	r1, #21
 8000888:	7001      	strb	r1, [r0, #0]
 800088a:	e005      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 800088c:	a918      	add	r1, sp, #96	@ 0x60
 800088e:	7809      	ldrb	r1, [r1, #0]
 8000890:	9a01      	ldr	r2, [sp, #4]
 8000892:	55d1      	strb	r1, [r2, r7]
 8000894:	e000      	b.n	8000898 <USBPD_PE_Request_CtrlMessage+0x12c>
 8000896:	7005      	strb	r5, [r0, #0]
 8000898:	9900      	ldr	r1, [sp, #0]
 800089a:	1859      	adds	r1, r3, r1
 800089c:	7849      	ldrb	r1, [r1, #1]
 800089e:	7041      	strb	r1, [r0, #1]
 80008a0:	9800      	ldr	r0, [sp, #0]
 80008a2:	1818      	adds	r0, r3, r0
 80008a4:	7880      	ldrb	r0, [r0, #2]
 80008a6:	9901      	ldr	r1, [sp, #4]
 80008a8:	2232      	movs	r2, #50	@ 0x32
 80008aa:	5488      	strb	r0, [r1, r2]
 80008ac:	a816      	add	r0, sp, #88	@ 0x58
 80008ae:	7800      	ldrb	r0, [r0, #0]
 80008b0:	9901      	ldr	r1, [sp, #4]
 80008b2:	6889      	ldr	r1, [r1, #8]
 80008b4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80008b6:	4788      	blx	r1
 80008b8:	0020      	movs	r0, r4
 80008ba:	b019      	add	sp, #100	@ 0x64
 80008bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080008c0 <.text_20>:
 80008c0:	0000ffff 	.word	0x0000ffff

080008c4 <USBPD_PE_Request_DataMessage>:
 80008c4:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	000b      	movs	r3, r1
 80008ca:	0017      	movs	r7, r2
 80008cc:	483f      	ldr	r0, [pc, #252]	@ (80009cc <.text_25>)
 80008ce:	4669      	mov	r1, sp
 80008d0:	7a09      	ldrb	r1, [r1, #8]
 80008d2:	0089      	lsls	r1, r1, #2
 80008d4:	5841      	ldr	r1, [r0, r1]
 80008d6:	2402      	movs	r4, #2
 80008d8:	2032      	movs	r0, #50	@ 0x32
 80008da:	5c08      	ldrb	r0, [r1, r0]
 80008dc:	2800      	cmp	r0, #0
 80008de:	d105      	bne.n	80008ec <USBPD_PE_Request_DataMessage+0x28>
 80008e0:	2001      	movs	r0, #1
 80008e2:	684a      	ldr	r2, [r1, #4]
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	0b12      	lsrs	r2, r2, #12
 80008e8:	4002      	ands	r2, r0
 80008ea:	d101      	bne.n	80008f0 <USBPD_PE_Request_DataMessage+0x2c>
 80008ec:	2403      	movs	r4, #3
 80008ee:	e021      	b.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 80008f0:	466a      	mov	r2, sp
 80008f2:	7013      	strb	r3, [r2, #0]
 80008f4:	2200      	movs	r2, #0
 80008f6:	2533      	movs	r5, #51	@ 0x33
 80008f8:	554a      	strb	r2, [r1, r5]
 80008fa:	000b      	movs	r3, r1
 80008fc:	3332      	adds	r3, #50	@ 0x32
 80008fe:	4dc0      	ldr	r5, [pc, #768]	@ (8000c00 <.text_36>)
 8000900:	4ec0      	ldr	r6, [pc, #768]	@ (8000c04 <.text_37>)
 8000902:	9701      	str	r7, [sp, #4]
 8000904:	466f      	mov	r7, sp
 8000906:	783f      	ldrb	r7, [r7, #0]
 8000908:	2f01      	cmp	r7, #1
 800090a:	d004      	beq.n	8000916 <USBPD_PE_Request_DataMessage+0x52>
 800090c:	2f06      	cmp	r7, #6
 800090e:	d013      	beq.n	8000938 <USBPD_PE_Request_DataMessage+0x74>
 8000910:	2f07      	cmp	r7, #7
 8000912:	d01b      	beq.n	800094c <USBPD_PE_Request_DataMessage+0x88>
 8000914:	e027      	b.n	8000966 <USBPD_PE_Request_DataMessage+0xa2>
 8000916:	684d      	ldr	r5, [r1, #4]
 8000918:	682d      	ldr	r5, [r5, #0]
 800091a:	08ad      	lsrs	r5, r5, #2
 800091c:	4005      	ands	r5, r0
 800091e:	d009      	beq.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000920:	4cc1      	ldr	r4, [pc, #772]	@ (8000c28 <.text_39>)
 8000922:	5508      	strb	r0, [r1, r4]
 8000924:	2007      	movs	r0, #7
 8000926:	7018      	strb	r0, [r3, #0]
 8000928:	2400      	movs	r4, #0
 800092a:	4668      	mov	r0, sp
 800092c:	7a00      	ldrb	r0, [r0, #8]
 800092e:	6889      	ldr	r1, [r1, #8]
 8000930:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000932:	4788      	blx	r1
 8000934:	0020      	movs	r0, r4
 8000936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000938:	6848      	ldr	r0, [r1, #4]
 800093a:	6800      	ldr	r0, [r0, #0]
 800093c:	4006      	ands	r6, r0
 800093e:	42ae      	cmp	r6, r5
 8000940:	d1f8      	bne.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000942:	9801      	ldr	r0, [sp, #4]
 8000944:	6800      	ldr	r0, [r0, #0]
 8000946:	6288      	str	r0, [r1, #40]	@ 0x28
 8000948:	202b      	movs	r0, #43	@ 0x2b
 800094a:	e7ec      	b.n	8000926 <USBPD_PE_Request_DataMessage+0x62>
 800094c:	6848      	ldr	r0, [r1, #4]
 800094e:	6800      	ldr	r0, [r0, #0]
 8000950:	4006      	ands	r6, r0
 8000952:	42ae      	cmp	r6, r5
 8000954:	d1ee      	bne.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
 8000956:	9801      	ldr	r0, [sp, #4]
 8000958:	6800      	ldr	r0, [r0, #0]
 800095a:	6288      	str	r0, [r1, #40]	@ 0x28
 800095c:	205d      	movs	r0, #93	@ 0x5d
 800095e:	4cb2      	ldr	r4, [pc, #712]	@ (8000c28 <.text_39>)
 8000960:	5508      	strb	r0, [r1, r4]
 8000962:	2062      	movs	r0, #98	@ 0x62
 8000964:	e7df      	b.n	8000926 <USBPD_PE_Request_DataMessage+0x62>
 8000966:	2410      	movs	r4, #16
 8000968:	e7e4      	b.n	8000934 <USBPD_PE_Request_DataMessage+0x70>
	...

0800096c <.text_22>:
 800096c:	ffffefff 	.word	0xffffefff

08000970 <USBPD_PE_Send_Request>:
 8000970:	b570      	push	{r4, r5, r6, lr}
 8000972:	000b      	movs	r3, r1
 8000974:	4915      	ldr	r1, [pc, #84]	@ (80009cc <.text_25>)
 8000976:	0084      	lsls	r4, r0, #2
 8000978:	590d      	ldr	r5, [r1, r4]
 800097a:	2102      	movs	r1, #2
 800097c:	2432      	movs	r4, #50	@ 0x32
 800097e:	5d2c      	ldrb	r4, [r5, r4]
 8000980:	2c00      	cmp	r4, #0
 8000982:	d104      	bne.n	800098e <USBPD_PE_Send_Request+0x1e>
 8000984:	686c      	ldr	r4, [r5, #4]
 8000986:	6824      	ldr	r4, [r4, #0]
 8000988:	04e6      	lsls	r6, r4, #19
 800098a:	0ff6      	lsrs	r6, r6, #31
 800098c:	d101      	bne.n	8000992 <USBPD_PE_Send_Request+0x22>
 800098e:	2103      	movs	r1, #3
 8000990:	e017      	b.n	80009c2 <USBPD_PE_Send_Request+0x52>
 8000992:	4ea6      	ldr	r6, [pc, #664]	@ (8000c2c <.text_40>)
 8000994:	4026      	ands	r6, r4
 8000996:	24c0      	movs	r4, #192	@ 0xc0
 8000998:	00a4      	lsls	r4, r4, #2
 800099a:	42a6      	cmp	r6, r4
 800099c:	d111      	bne.n	80009c2 <USBPD_PE_Send_Request+0x52>
 800099e:	2145      	movs	r1, #69	@ 0x45
 80009a0:	2432      	movs	r4, #50	@ 0x32
 80009a2:	5529      	strb	r1, [r5, r4]
 80009a4:	61ab      	str	r3, [r5, #24]
 80009a6:	6969      	ldr	r1, [r5, #20]
 80009a8:	2318      	movs	r3, #24
 80009aa:	4399      	bics	r1, r3
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	4013      	ands	r3, r2
 80009b0:	430b      	orrs	r3, r1
 80009b2:	616b      	str	r3, [r5, #20]
 80009b4:	2400      	movs	r4, #0
 80009b6:	2233      	movs	r2, #51	@ 0x33
 80009b8:	54ac      	strb	r4, [r5, r2]
 80009ba:	68a9      	ldr	r1, [r5, #8]
 80009bc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80009be:	4788      	blx	r1
 80009c0:	2100      	movs	r1, #0
 80009c2:	0008      	movs	r0, r1
 80009c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080009c8 <.text_24>:
 80009c8:	20000000 	.word	0x20000000

080009cc <.text_25>:
 80009cc:	200002ec 	.word	0x200002ec

080009d0 <.text_26>:
 80009d0:	00008708 	.word	0x00008708

080009d4 <.text_27>:
 80009d4:	00008308 	.word	0x00008308

080009d8 <.text_28>:
 80009d8:	0801e3f4 	.word	0x0801e3f4

080009dc <USBPD_PE_SendExtendedMessage>:
 80009dc:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80009de:	b083      	sub	sp, #12
 80009e0:	001f      	movs	r7, r3
 80009e2:	2400      	movs	r4, #0
 80009e4:	2500      	movs	r5, #0
 80009e6:	48b5      	ldr	r0, [pc, #724]	@ (8000cbc <.text_43>)
 80009e8:	4669      	mov	r1, sp
 80009ea:	7b09      	ldrb	r1, [r1, #12]
 80009ec:	0089      	lsls	r1, r1, #2
 80009ee:	5846      	ldr	r6, [r0, r1]
 80009f0:	2003      	movs	r0, #3
 80009f2:	2132      	movs	r1, #50	@ 0x32
 80009f4:	5c71      	ldrb	r1, [r6, r1]
 80009f6:	2900      	cmp	r1, #0
 80009f8:	d107      	bne.n	8000a0a <USBPD_PE_SendExtendedMessage+0x2e>
 80009fa:	6871      	ldr	r1, [r6, #4]
 80009fc:	6809      	ldr	r1, [r1, #0]
 80009fe:	9100      	str	r1, [sp, #0]
 8000a00:	2101      	movs	r1, #1
 8000a02:	9b00      	ldr	r3, [sp, #0]
 8000a04:	0b1b      	lsrs	r3, r3, #12
 8000a06:	400b      	ands	r3, r1
 8000a08:	d101      	bne.n	8000a0e <USBPD_PE_SendExtendedMessage+0x32>
 8000a0a:	2503      	movs	r5, #3
 8000a0c:	e06c      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a0e:	9b00      	ldr	r3, [sp, #0]
 8000a10:	055b      	lsls	r3, r3, #21
 8000a12:	0f5b      	lsrs	r3, r3, #29
 8000a14:	2b03      	cmp	r3, #3
 8000a16:	d10b      	bne.n	8000a30 <USBPD_PE_SendExtendedMessage+0x54>
 8000a18:	9b00      	ldr	r3, [sp, #0]
 8000a1a:	4018      	ands	r0, r3
 8000a1c:	2801      	cmp	r0, #1
 8000a1e:	d801      	bhi.n	8000a24 <USBPD_PE_SendExtendedMessage+0x48>
 8000a20:	2501      	movs	r5, #1
 8000a22:	e061      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a24:	4668      	mov	r0, sp
 8000a26:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8000a28:	21ff      	movs	r1, #255	@ 0xff
 8000a2a:	1d89      	adds	r1, r1, #6
 8000a2c:	4288      	cmp	r0, r1
 8000a2e:	d301      	bcc.n	8000a34 <USBPD_PE_SendExtendedMessage+0x58>
 8000a30:	2502      	movs	r5, #2
 8000a32:	e059      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000a34:	4668      	mov	r0, sp
 8000a36:	7002      	strb	r2, [r0, #0]
 8000a38:	6970      	ldr	r0, [r6, #20]
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	4388      	bics	r0, r1
 8000a3e:	6170      	str	r0, [r6, #20]
 8000a40:	2020      	movs	r0, #32
 8000a42:	4669      	mov	r1, sp
 8000a44:	7809      	ldrb	r1, [r1, #0]
 8000a46:	2903      	cmp	r1, #3
 8000a48:	d008      	beq.n	8000a5c <USBPD_PE_SendExtendedMessage+0x80>
 8000a4a:	2904      	cmp	r1, #4
 8000a4c:	d020      	beq.n	8000a90 <USBPD_PE_SendExtendedMessage+0xb4>
 8000a4e:	2906      	cmp	r1, #6
 8000a50:	d020      	beq.n	8000a94 <USBPD_PE_SendExtendedMessage+0xb8>
 8000a52:	2908      	cmp	r1, #8
 8000a54:	d020      	beq.n	8000a98 <USBPD_PE_SendExtendedMessage+0xbc>
 8000a56:	290a      	cmp	r1, #10
 8000a58:	d023      	beq.n	8000aa2 <USBPD_PE_SendExtendedMessage+0xc6>
 8000a5a:	e024      	b.n	8000aa6 <USBPD_PE_SendExtendedMessage+0xca>
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	4aac      	ldr	r2, [pc, #688]	@ (8000d10 <.text_45>)
 8000a60:	18b2      	adds	r2, r6, r2
 8000a62:	7091      	strb	r1, [r2, #2]
 8000a64:	6971      	ldr	r1, [r6, #20]
 8000a66:	4308      	orrs	r0, r1
 8000a68:	6170      	str	r0, [r6, #20]
 8000a6a:	4668      	mov	r0, sp
 8000a6c:	8d00      	ldrh	r0, [r0, #40]	@ 0x28
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	d027      	beq.n	8000ac2 <USBPD_PE_SendExtendedMessage+0xe6>
 8000a72:	9401      	str	r4, [sp, #4]
 8000a74:	4668      	mov	r0, sp
 8000a76:	7b00      	ldrb	r0, [r0, #12]
 8000a78:	f000 fa98 	bl	8000fac <PE_Get_UnchunkedSupport>
 8000a7c:	2801      	cmp	r0, #1
 8000a7e:	d101      	bne.n	8000a84 <USBPD_PE_SendExtendedMessage+0xa8>
 8000a80:	2004      	movs	r0, #4
 8000a82:	9001      	str	r0, [sp, #4]
 8000a84:	9702      	str	r7, [sp, #8]
 8000a86:	9801      	ldr	r0, [sp, #4]
 8000a88:	4669      	mov	r1, sp
 8000a8a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8000a8c:	4fa1      	ldr	r7, [pc, #644]	@ (8000d14 <.text_46>)
 8000a8e:	e012      	b.n	8000ab6 <USBPD_PE_SendExtendedMessage+0xda>
 8000a90:	210d      	movs	r1, #13
 8000a92:	e7e4      	b.n	8000a5e <USBPD_PE_SendExtendedMessage+0x82>
 8000a94:	210e      	movs	r1, #14
 8000a96:	e7e2      	b.n	8000a5e <USBPD_PE_SendExtendedMessage+0x82>
 8000a98:	205b      	movs	r0, #91	@ 0x5b
 8000a9a:	499d      	ldr	r1, [pc, #628]	@ (8000d10 <.text_45>)
 8000a9c:	1871      	adds	r1, r6, r1
 8000a9e:	7088      	strb	r0, [r1, #2]
 8000aa0:	e7e3      	b.n	8000a6a <USBPD_PE_SendExtendedMessage+0x8e>
 8000aa2:	205c      	movs	r0, #92	@ 0x5c
 8000aa4:	e7f9      	b.n	8000a9a <USBPD_PE_SendExtendedMessage+0xbe>
 8000aa6:	2510      	movs	r5, #16
 8000aa8:	e01e      	b.n	8000ae8 <USBPD_PE_SendExtendedMessage+0x10c>
 8000aaa:	9a02      	ldr	r2, [sp, #8]
 8000aac:	5d12      	ldrb	r2, [r2, r4]
 8000aae:	1823      	adds	r3, r4, r0
 8000ab0:	18f3      	adds	r3, r6, r3
 8000ab2:	55da      	strb	r2, [r3, r7]
 8000ab4:	1c64      	adds	r4, r4, #1
 8000ab6:	428c      	cmp	r4, r1
 8000ab8:	d3f7      	bcc.n	8000aaa <USBPD_PE_SendExtendedMessage+0xce>
 8000aba:	2092      	movs	r0, #146	@ 0x92
 8000abc:	00c0      	lsls	r0, r0, #3
 8000abe:	5231      	strh	r1, [r6, r0]
 8000ac0:	e002      	b.n	8000ac8 <USBPD_PE_SendExtendedMessage+0xec>
 8000ac2:	2092      	movs	r0, #146	@ 0x92
 8000ac4:	00c0      	lsls	r0, r0, #3
 8000ac6:	5234      	strh	r4, [r6, r0]
 8000ac8:	4668      	mov	r0, sp
 8000aca:	7c00      	ldrb	r0, [r0, #16]
 8000acc:	2133      	movs	r1, #51	@ 0x33
 8000ace:	5470      	strb	r0, [r6, r1]
 8000ad0:	4668      	mov	r0, sp
 8000ad2:	7800      	ldrb	r0, [r0, #0]
 8000ad4:	498e      	ldr	r1, [pc, #568]	@ (8000d10 <.text_45>)
 8000ad6:	5470      	strb	r0, [r6, r1]
 8000ad8:	2031      	movs	r0, #49	@ 0x31
 8000ada:	2132      	movs	r1, #50	@ 0x32
 8000adc:	5470      	strb	r0, [r6, r1]
 8000ade:	4668      	mov	r0, sp
 8000ae0:	7b00      	ldrb	r0, [r0, #12]
 8000ae2:	68b1      	ldr	r1, [r6, #8]
 8000ae4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000ae6:	4788      	blx	r1
 8000ae8:	0028      	movs	r0, r5
 8000aea:	b005      	add	sp, #20
 8000aec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000af0 <.text_30>:
 8000af0:	0000025e 	.word	0x0000025e

08000af4 <PE_Send_RESET>:
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	0005      	movs	r5, r0
 8000af8:	000c      	movs	r4, r1
 8000afa:	2c05      	cmp	r4, #5
 8000afc:	d101      	bne.n	8000b02 <PE_Send_RESET+0xe>
 8000afe:	211f      	movs	r1, #31
 8000b00:	e000      	b.n	8000b04 <PE_Send_RESET+0x10>
 8000b02:	215e      	movs	r1, #94	@ 0x5e
 8000b04:	7c28      	ldrb	r0, [r5, #16]
 8000b06:	f7ff fdef 	bl	80006e8 <USBPD_PE_Notification>
 8000b0a:	0021      	movs	r1, r4
 8000b0c:	7c28      	ldrb	r0, [r5, #16]
 8000b0e:	f005 f9ab 	bl	8005e68 <USBPD_PRL_ResetRequestProcess>
 8000b12:	f3ef 8010 	mrs	r0, PRIMASK
 8000b16:	b672      	cpsid	i
 8000b18:	2100      	movs	r1, #0
 8000b1a:	223c      	movs	r2, #60	@ 0x3c
 8000b1c:	54a9      	strb	r1, [r5, r2]
 8000b1e:	f380 8810 	msr	PRIMASK, r0
 8000b22:	bd31      	pop	{r0, r4, r5, pc}

08000b24 <PE_Get_SpecRevision>:
 8000b24:	4965      	ldr	r1, [pc, #404]	@ (8000cbc <.text_43>)
 8000b26:	0080      	lsls	r0, r0, #2
 8000b28:	5808      	ldr	r0, [r1, r0]
 8000b2a:	6840      	ldr	r0, [r0, #4]
 8000b2c:	7800      	ldrb	r0, [r0, #0]
 8000b2e:	0780      	lsls	r0, r0, #30
 8000b30:	0f80      	lsrs	r0, r0, #30
 8000b32:	4770      	bx	lr

08000b34 <PE_ChangePowerRole>:
 8000b34:	b538      	push	{r3, r4, r5, lr}
 8000b36:	6842      	ldr	r2, [r0, #4]
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	2404      	movs	r4, #4
 8000b3c:	43a3      	bics	r3, r4
 8000b3e:	008c      	lsls	r4, r1, #2
 8000b40:	2504      	movs	r5, #4
 8000b42:	402c      	ands	r4, r5
 8000b44:	431c      	orrs	r4, r3
 8000b46:	6014      	str	r4, [r2, #0]
 8000b48:	7c00      	ldrb	r0, [r0, #16]
 8000b4a:	f004 ff0a 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 8000b4e:	bd31      	pop	{r0, r4, r5, pc}

08000b50 <PE_Get_RxEvent>:
 8000b50:	b530      	push	{r4, r5, lr}
 8000b52:	0001      	movs	r1, r0
 8000b54:	2014      	movs	r0, #20
 8000b56:	f3ef 8210 	mrs	r2, PRIMASK
 8000b5a:	b672      	cpsid	i
 8000b5c:	233c      	movs	r3, #60	@ 0x3c
 8000b5e:	5ccc      	ldrb	r4, [r1, r3]
 8000b60:	2c00      	cmp	r4, #0
 8000b62:	d029      	beq.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000b64:	2393      	movs	r3, #147	@ 0x93
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	18cb      	adds	r3, r1, r3
 8000b6a:	5d1d      	ldrb	r5, [r3, r4]
 8000b6c:	066d      	lsls	r5, r5, #25
 8000b6e:	d401      	bmi.n	8000b74 <PE_Get_RxEvent+0x24>
 8000b70:	2003      	movs	r0, #3
 8000b72:	e021      	b.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000b74:	2584      	movs	r5, #132	@ 0x84
 8000b76:	006d      	lsls	r5, r5, #1
 8000b78:	436c      	muls	r4, r5
 8000b7a:	190c      	adds	r4, r1, r4
 8000b7c:	3ccb      	subs	r4, #203	@ 0xcb
 8000b7e:	638c      	str	r4, [r1, #56]	@ 0x38
 8000b80:	7825      	ldrb	r5, [r4, #0]
 8000b82:	7864      	ldrb	r4, [r4, #1]
 8000b84:	0224      	lsls	r4, r4, #8
 8000b86:	192c      	adds	r4, r5, r4
 8000b88:	868c      	strh	r4, [r1, #52]	@ 0x34
 8000b8a:	000c      	movs	r4, r1
 8000b8c:	3430      	adds	r4, #48	@ 0x30
 8000b8e:	253c      	movs	r5, #60	@ 0x3c
 8000b90:	5d49      	ldrb	r1, [r1, r5]
 8000b92:	5c59      	ldrb	r1, [r3, r1]
 8000b94:	06c9      	lsls	r1, r1, #27
 8000b96:	0ec9      	lsrs	r1, r1, #27
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d004      	beq.n	8000ba6 <PE_Get_RxEvent+0x56>
 8000b9c:	2902      	cmp	r1, #2
 8000b9e:	d005      	beq.n	8000bac <PE_Get_RxEvent+0x5c>
 8000ba0:	2904      	cmp	r1, #4
 8000ba2:	d006      	beq.n	8000bb2 <PE_Get_RxEvent+0x62>
 8000ba4:	e008      	b.n	8000bb8 <PE_Get_RxEvent+0x68>
 8000ba6:	2011      	movs	r0, #17
 8000ba8:	2100      	movs	r1, #0
 8000baa:	e004      	b.n	8000bb6 <PE_Get_RxEvent+0x66>
 8000bac:	2012      	movs	r0, #18
 8000bae:	2101      	movs	r1, #1
 8000bb0:	e001      	b.n	8000bb6 <PE_Get_RxEvent+0x66>
 8000bb2:	2013      	movs	r0, #19
 8000bb4:	2102      	movs	r1, #2
 8000bb6:	7021      	strb	r1, [r4, #0]
 8000bb8:	f382 8810 	msr	PRIMASK, r2
 8000bbc:	bd30      	pop	{r4, r5, pc}

08000bbe <PE_Clear_RxEvent>:
 8000bbe:	b510      	push	{r4, lr}
 8000bc0:	0001      	movs	r1, r0
 8000bc2:	f3ef 8010 	mrs	r0, PRIMASK
 8000bc6:	b672      	cpsid	i
 8000bc8:	223c      	movs	r2, #60	@ 0x3c
 8000bca:	5c8a      	ldrb	r2, [r1, r2]
 8000bcc:	2a00      	cmp	r2, #0
 8000bce:	d014      	beq.n	8000bfa <PE_Clear_RxEvent+0x3c>
 8000bd0:	1e53      	subs	r3, r2, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	4acb      	ldr	r2, [pc, #812]	@ (8000f04 <.text_56>)
 8000bd6:	188c      	adds	r4, r1, r2
 8000bd8:	2200      	movs	r2, #0
 8000bda:	54e2      	strb	r2, [r4, r3]
 8000bdc:	1e5b      	subs	r3, r3, #1
 8000bde:	419b      	sbcs	r3, r3
 8000be0:	0fdb      	lsrs	r3, r3, #31
 8000be2:	5ce4      	ldrb	r4, [r4, r3]
 8000be4:	0664      	lsls	r4, r4, #25
 8000be6:	d506      	bpl.n	8000bf6 <PE_Clear_RxEvent+0x38>
 8000be8:	1c5b      	adds	r3, r3, #1
 8000bea:	223c      	movs	r2, #60	@ 0x3c
 8000bec:	548b      	strb	r3, [r1, r2]
 8000bee:	f380 8810 	msr	PRIMASK, r0
 8000bf2:	7c08      	ldrb	r0, [r1, #16]
 8000bf4:	e168      	b.n	8000ec8 <.text_54>
 8000bf6:	233c      	movs	r3, #60	@ 0x3c
 8000bf8:	54ca      	strb	r2, [r1, r3]
 8000bfa:	f380 8810 	msr	PRIMASK, r0
 8000bfe:	bd10      	pop	{r4, pc}

08000c00 <.text_36>:
 8000c00:	00000302 	.word	0x00000302

08000c04 <.text_37>:
 8000c04:	00000703 	.word	0x00000703

08000c08 <PE_PRL_Control_RxEvent>:
 8000c08:	492c      	ldr	r1, [pc, #176]	@ (8000cbc <.text_43>)
 8000c0a:	0080      	lsls	r0, r0, #2
 8000c0c:	580a      	ldr	r2, [r1, r0]
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f3ef 8110 	mrs	r1, PRIMASK
 8000c14:	b672      	cpsid	i
 8000c16:	233c      	movs	r3, #60	@ 0x3c
 8000c18:	5cd2      	ldrb	r2, [r2, r3]
 8000c1a:	2a00      	cmp	r2, #0
 8000c1c:	d000      	beq.n	8000c20 <PE_PRL_Control_RxEvent+0x18>
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f381 8810 	msr	PRIMASK, r1
 8000c24:	4770      	bx	lr
	...

08000c28 <.text_39>:
 8000c28:	0000025f 	.word	0x0000025f

08000c2c <.text_40>:
 8000c2c:	00000704 	.word	0x00000704

08000c30 <PE_Convert_SOPRxEvent>:
 8000c30:	2800      	cmp	r0, #0
 8000c32:	d003      	beq.n	8000c3c <PE_Convert_SOPRxEvent+0xc>
 8000c34:	2802      	cmp	r0, #2
 8000c36:	d005      	beq.n	8000c44 <PE_Convert_SOPRxEvent+0x14>
 8000c38:	d302      	bcc.n	8000c40 <PE_Convert_SOPRxEvent+0x10>
 8000c3a:	e005      	b.n	8000c48 <PE_Convert_SOPRxEvent+0x18>
 8000c3c:	2011      	movs	r0, #17
 8000c3e:	4770      	bx	lr
 8000c40:	2012      	movs	r0, #18
 8000c42:	4770      	bx	lr
 8000c44:	2013      	movs	r0, #19
 8000c46:	4770      	bx	lr
 8000c48:	2014      	movs	r0, #20
 8000c4a:	4770      	bx	lr

08000c4c <PE_Check_AMSConflict>:
 8000c4c:	b570      	push	{r4, r5, r6, lr}
 8000c4e:	0005      	movs	r5, r0
 8000c50:	2400      	movs	r4, #0
 8000c52:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8000c54:	49b7      	ldr	r1, [pc, #732]	@ (8000f34 <.text_58>)
 8000c56:	4001      	ands	r1, r0
 8000c58:	290d      	cmp	r1, #13
 8000c5a:	d101      	bne.n	8000c60 <PE_Check_AMSConflict+0x14>
 8000c5c:	2010      	movs	r0, #16
 8000c5e:	e01b      	b.n	8000c98 <PE_Check_AMSConflict+0x4c>
 8000c60:	2603      	movs	r6, #3
 8000c62:	200f      	movs	r0, #15
 8000c64:	7f29      	ldrb	r1, [r5, #28]
 8000c66:	2900      	cmp	r1, #0
 8000c68:	d011      	beq.n	8000c8e <PE_Check_AMSConflict+0x42>
 8000c6a:	1e49      	subs	r1, r1, #1
 8000c6c:	2901      	cmp	r1, #1
 8000c6e:	d912      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c70:	1e89      	subs	r1, r1, #2
 8000c72:	d011      	beq.n	8000c98 <PE_Check_AMSConflict+0x4c>
 8000c74:	1e49      	subs	r1, r1, #1
 8000c76:	d01d      	beq.n	8000cb4 <PE_Check_AMSConflict+0x68>
 8000c78:	1e49      	subs	r1, r1, #1
 8000c7a:	2909      	cmp	r1, #9
 8000c7c:	d90b      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c7e:	390b      	subs	r1, #11
 8000c80:	2901      	cmp	r1, #1
 8000c82:	d908      	bls.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c84:	1e89      	subs	r1, r1, #2
 8000c86:	d004      	beq.n	8000c92 <PE_Check_AMSConflict+0x46>
 8000c88:	394d      	subs	r1, #77	@ 0x4d
 8000c8a:	d004      	beq.n	8000c96 <PE_Check_AMSConflict+0x4a>
 8000c8c:	e006      	b.n	8000c9c <PE_Check_AMSConflict+0x50>
 8000c8e:	746e      	strb	r6, [r5, #17]
 8000c90:	e011      	b.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000c92:	7468      	strb	r0, [r5, #17]
 8000c94:	e00f      	b.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000c96:	2011      	movs	r0, #17
 8000c98:	7468      	strb	r0, [r5, #17]
 8000c9a:	e00b      	b.n	8000cb4 <PE_Check_AMSConflict+0x68>
 8000c9c:	215c      	movs	r1, #92	@ 0x5c
 8000c9e:	7c28      	ldrb	r0, [r5, #16]
 8000ca0:	f7ff fd22 	bl	80006e8 <USBPD_PE_Notification>
 8000ca4:	746e      	strb	r6, [r5, #17]
 8000ca6:	6868      	ldr	r0, [r5, #4]
 8000ca8:	6800      	ldr	r0, [r0, #0]
 8000caa:	49c4      	ldr	r1, [pc, #784]	@ (8000fbc <.text_62>)
 8000cac:	4001      	ands	r1, r0
 8000cae:	0230      	lsls	r0, r6, #8
 8000cb0:	4281      	cmp	r1, r0
 8000cb2:	d000      	beq.n	8000cb6 <PE_Check_AMSConflict+0x6a>
 8000cb4:	2415      	movs	r4, #21
 8000cb6:	0020      	movs	r0, r4
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
	...

08000cbc <.text_43>:
 8000cbc:	200002ec 	.word	0x200002ec

08000cc0 <PE_PRL_ResetReceived>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	0004      	movs	r4, r0
 8000cc4:	48be      	ldr	r0, [pc, #760]	@ (8000fc0 <.text_63>)
 8000cc6:	00a2      	lsls	r2, r4, #2
 8000cc8:	5885      	ldr	r5, [r0, r2]
 8000cca:	2905      	cmp	r1, #5
 8000ccc:	d115      	bne.n	8000cfa <PE_PRL_ResetReceived+0x3a>
 8000cce:	6868      	ldr	r0, [r5, #4]
 8000cd0:	6801      	ldr	r1, [r0, #0]
 8000cd2:	2210      	movs	r2, #16
 8000cd4:	4391      	bics	r1, r2
 8000cd6:	6001      	str	r1, [r0, #0]
 8000cd8:	6968      	ldr	r0, [r5, #20]
 8000cda:	49ba      	ldr	r1, [pc, #744]	@ (8000fc4 <.text_64>)
 8000cdc:	4001      	ands	r1, r0
 8000cde:	0150      	lsls	r0, r2, #5
 8000ce0:	4308      	orrs	r0, r1
 8000ce2:	6168      	str	r0, [r5, #20]
 8000ce4:	2014      	movs	r0, #20
 8000ce6:	2132      	movs	r1, #50	@ 0x32
 8000ce8:	5468      	strb	r0, [r5, r1]
 8000cea:	2000      	movs	r0, #0
 8000cec:	213c      	movs	r1, #60	@ 0x3c
 8000cee:	5468      	strb	r0, [r5, r1]
 8000cf0:	211e      	movs	r1, #30
 8000cf2:	7c28      	ldrb	r0, [r5, #16]
 8000cf4:	f7ff fcf8 	bl	80006e8 <USBPD_PE_Notification>
 8000cf8:	e004      	b.n	8000d04 <PE_PRL_ResetReceived+0x44>
 8000cfa:	6968      	ldr	r0, [r5, #20]
 8000cfc:	2180      	movs	r1, #128	@ 0x80
 8000cfe:	02c9      	lsls	r1, r1, #11
 8000d00:	4301      	orrs	r1, r0
 8000d02:	6169      	str	r1, [r5, #20]
 8000d04:	0020      	movs	r0, r4
 8000d06:	68a9      	ldr	r1, [r5, #8]
 8000d08:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000d0a:	4788      	blx	r1
 8000d0c:	bd31      	pop	{r0, r4, r5, pc}
	...

08000d10 <.text_45>:
 8000d10:	0000025d 	.word	0x0000025d

08000d14 <.text_46>:
 8000d14:	00000385 	.word	0x00000385

08000d18 <PE_PRL_BistCompleted>:
 8000d18:	4770      	bx	lr

08000d1a <PE_Reset_HardReset>:
 8000d1a:	b538      	push	{r3, r4, r5, lr}
 8000d1c:	0004      	movs	r4, r0
 8000d1e:	2032      	movs	r0, #50	@ 0x32
 8000d20:	5c20      	ldrb	r0, [r4, r0]
 8000d22:	2800      	cmp	r0, #0
 8000d24:	d003      	beq.n	8000d2e <PE_Reset_HardReset+0x14>
 8000d26:	215b      	movs	r1, #91	@ 0x5b
 8000d28:	7c20      	ldrb	r0, [r4, #16]
 8000d2a:	f7ff fcdd 	bl	80006e8 <USBPD_PE_Notification>
 8000d2e:	0020      	movs	r0, r4
 8000d30:	f000 f82c 	bl	8000d8c <PE_Reset_ZI>
 8000d34:	2503      	movs	r5, #3
 8000d36:	6820      	ldr	r0, [r4, #0]
 8000d38:	6843      	ldr	r3, [r0, #4]
 8000d3a:	402b      	ands	r3, r5
 8000d3c:	7c20      	ldrb	r0, [r4, #16]
 8000d3e:	6861      	ldr	r1, [r4, #4]
 8000d40:	6809      	ldr	r1, [r1, #0]
 8000d42:	074a      	lsls	r2, r1, #29
 8000d44:	0fd2      	lsrs	r2, r2, #31
 8000d46:	d008      	beq.n	8000d5a <PE_Reset_HardReset+0x40>
 8000d48:	2101      	movs	r1, #1
 8000d4a:	f004 fdee 	bl	800592a <USBPD_PRL_SetHeader>
 8000d4e:	6860      	ldr	r0, [r4, #4]
 8000d50:	6801      	ldr	r1, [r0, #0]
 8000d52:	2208      	movs	r2, #8
 8000d54:	430a      	orrs	r2, r1
 8000d56:	6002      	str	r2, [r0, #0]
 8000d58:	e007      	b.n	8000d6a <PE_Reset_HardReset+0x50>
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f004 fde5 	bl	800592a <USBPD_PRL_SetHeader>
 8000d60:	6860      	ldr	r0, [r4, #4]
 8000d62:	6801      	ldr	r1, [r0, #0]
 8000d64:	2208      	movs	r2, #8
 8000d66:	4391      	bics	r1, r2
 8000d68:	6001      	str	r1, [r0, #0]
 8000d6a:	6820      	ldr	r0, [r4, #0]
 8000d6c:	6840      	ldr	r0, [r0, #4]
 8000d6e:	4005      	ands	r5, r0
 8000d70:	6860      	ldr	r0, [r4, #4]
 8000d72:	6801      	ldr	r1, [r0, #0]
 8000d74:	2203      	movs	r2, #3
 8000d76:	4391      	bics	r1, r2
 8000d78:	430d      	orrs	r5, r1
 8000d7a:	6005      	str	r5, [r0, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	7c20      	ldrb	r0, [r4, #16]
 8000d80:	f004 fe44 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8000d84:	7c20      	ldrb	r0, [r4, #16]
 8000d86:	f005 f8ad 	bl	8005ee4 <USBPD_PRL_Reset>
 8000d8a:	bd31      	pop	{r0, r4, r5, pc}

08000d8c <PE_Reset_ZI>:
 8000d8c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000d8e:	0004      	movs	r4, r0
 8000d90:	2000      	movs	r0, #0
 8000d92:	9001      	str	r0, [sp, #4]
 8000d94:	6860      	ldr	r0, [r4, #4]
 8000d96:	6801      	ldr	r1, [r0, #0]
 8000d98:	2210      	movs	r2, #16
 8000d9a:	4391      	bics	r1, r2
 8000d9c:	6001      	str	r1, [r0, #0]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	0020      	movs	r0, r4
 8000da2:	f000 fc34 	bl	800160e <PE_SetPowerNegotiation>
 8000da6:	2193      	movs	r1, #147	@ 0x93
 8000da8:	0089      	lsls	r1, r1, #2
 8000daa:	0020      	movs	r0, r4
 8000dac:	3014      	adds	r0, #20
 8000dae:	f01d fa56 	bl	801e25e <__aeabi_memclr>
 8000db2:	2304      	movs	r3, #4
 8000db4:	aa01      	add	r2, sp, #4
 8000db6:	2102      	movs	r1, #2
 8000db8:	7c20      	ldrb	r0, [r4, #16]
 8000dba:	68a5      	ldr	r5, [r4, #8]
 8000dbc:	69ad      	ldr	r5, [r5, #24]
 8000dbe:	47a8      	blx	r5
 8000dc0:	2080      	movs	r0, #128	@ 0x80
 8000dc2:	0440      	lsls	r0, r0, #17
 8000dc4:	9000      	str	r0, [sp, #0]
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	466a      	mov	r2, sp
 8000dca:	2106      	movs	r1, #6
 8000dcc:	7c20      	ldrb	r0, [r4, #16]
 8000dce:	68a5      	ldr	r5, [r4, #8]
 8000dd0:	69ad      	ldr	r5, [r5, #24]
 8000dd2:	47a8      	blx	r5
 8000dd4:	2503      	movs	r5, #3
 8000dd6:	6820      	ldr	r0, [r4, #0]
 8000dd8:	6841      	ldr	r1, [r0, #4]
 8000dda:	4029      	ands	r1, r5
 8000ddc:	7c20      	ldrb	r0, [r4, #16]
 8000dde:	f004 fde2 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000de2:	6820      	ldr	r0, [r4, #0]
 8000de4:	6840      	ldr	r0, [r0, #4]
 8000de6:	4005      	ands	r5, r0
 8000de8:	6860      	ldr	r0, [r4, #4]
 8000dea:	6801      	ldr	r1, [r0, #0]
 8000dec:	4a76      	ldr	r2, [pc, #472]	@ (8000fc8 <.text_65>)
 8000dee:	400a      	ands	r2, r1
 8000df0:	06a9      	lsls	r1, r5, #26
 8000df2:	4311      	orrs	r1, r2
 8000df4:	6001      	str	r1, [r0, #0]
 8000df6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000df8 <PE_Reset_Counter>:
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	2103      	movs	r1, #3
 8000dfc:	2298      	movs	r2, #152	@ 0x98
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	1880      	adds	r0, r0, r2
 8000e02:	f01d fa2c 	bl	801e25e <__aeabi_memclr>
 8000e06:	bd01      	pop	{r0, pc}

08000e08 <PE_Reset_StateMachine>:
 8000e08:	b538      	push	{r3, r4, r5, lr}
 8000e0a:	0004      	movs	r4, r0
 8000e0c:	2032      	movs	r0, #50	@ 0x32
 8000e0e:	5c20      	ldrb	r0, [r4, r0]
 8000e10:	2800      	cmp	r0, #0
 8000e12:	d003      	beq.n	8000e1c <PE_Reset_StateMachine+0x14>
 8000e14:	215b      	movs	r1, #91	@ 0x5b
 8000e16:	7c20      	ldrb	r0, [r4, #16]
 8000e18:	f7ff fc66 	bl	80006e8 <USBPD_PE_Notification>
 8000e1c:	0020      	movs	r0, r4
 8000e1e:	f7ff ffb5 	bl	8000d8c <PE_Reset_ZI>
 8000e22:	2101      	movs	r1, #1
 8000e24:	0020      	movs	r0, r4
 8000e26:	f000 fbf2 	bl	800160e <PE_SetPowerNegotiation>
 8000e2a:	7c20      	ldrb	r0, [r4, #16]
 8000e2c:	f005 f85a 	bl	8005ee4 <USBPD_PRL_Reset>
 8000e30:	6860      	ldr	r0, [r4, #4]
 8000e32:	6801      	ldr	r1, [r0, #0]
 8000e34:	2501      	movs	r5, #1
 8000e36:	08ca      	lsrs	r2, r1, #3
 8000e38:	402a      	ands	r2, r5
 8000e3a:	078b      	lsls	r3, r1, #30
 8000e3c:	0f9b      	lsrs	r3, r3, #30
 8000e3e:	7c20      	ldrb	r0, [r4, #16]
 8000e40:	0889      	lsrs	r1, r1, #2
 8000e42:	400d      	ands	r5, r1
 8000e44:	d004      	beq.n	8000e50 <PE_Reset_StateMachine+0x48>
 8000e46:	2101      	movs	r1, #1
 8000e48:	f004 fd6f 	bl	800592a <USBPD_PRL_SetHeader>
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	e003      	b.n	8000e58 <PE_Reset_StateMachine+0x50>
 8000e50:	2100      	movs	r1, #0
 8000e52:	f004 fd6a 	bl	800592a <USBPD_PRL_SetHeader>
 8000e56:	203e      	movs	r0, #62	@ 0x3e
 8000e58:	7460      	strb	r0, [r4, #17]
 8000e5a:	bd31      	pop	{r0, r4, r5, pc}

08000e5c <PE_ExtRevisionInteroperability>:
 8000e5c:	b570      	push	{r4, r5, r6, lr}
 8000e5e:	000a      	movs	r2, r1
 8000e60:	4957      	ldr	r1, [pc, #348]	@ (8000fc0 <.text_63>)
 8000e62:	0083      	lsls	r3, r0, #2
 8000e64:	58cb      	ldr	r3, [r1, r3]
 8000e66:	685c      	ldr	r4, [r3, #4]
 8000e68:	6825      	ldr	r5, [r4, #0]
 8000e6a:	2103      	movs	r1, #3
 8000e6c:	2603      	movs	r6, #3
 8000e6e:	402e      	ands	r6, r5
 8000e70:	42b2      	cmp	r2, r6
 8000e72:	db00      	blt.n	8000e76 <PE_ExtRevisionInteroperability+0x1a>
 8000e74:	0032      	movs	r2, r6
 8000e76:	438d      	bics	r5, r1
 8000e78:	400a      	ands	r2, r1
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	6022      	str	r2, [r4, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	6814      	ldr	r4, [r2, #0]
 8000e82:	2503      	movs	r5, #3
 8000e84:	4025      	ands	r5, r4
 8000e86:	2d01      	cmp	r5, #1
 8000e88:	d101      	bne.n	8000e8e <PE_ExtRevisionInteroperability+0x32>
 8000e8a:	2500      	movs	r5, #0
 8000e8c:	e000      	b.n	8000e90 <PE_ExtRevisionInteroperability+0x34>
 8000e8e:	2520      	movs	r5, #32
 8000e90:	2620      	movs	r6, #32
 8000e92:	43b4      	bics	r4, r6
 8000e94:	4325      	orrs	r5, r4
 8000e96:	6015      	str	r5, [r2, #0]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	6812      	ldr	r2, [r2, #0]
 8000e9c:	4011      	ands	r1, r2
 8000e9e:	f004 fd76 	bl	800598e <USBPD_PRL_SetHeaderSpecification>
 8000ea2:	bd70      	pop	{r4, r5, r6, pc}

08000ea4 <PE_PRL_FastRoleSwapReception>:
 8000ea4:	4946      	ldr	r1, [pc, #280]	@ (8000fc0 <.text_63>)
 8000ea6:	0082      	lsls	r2, r0, #2
 8000ea8:	5889      	ldr	r1, [r1, r2]
 8000eaa:	7f0a      	ldrb	r2, [r1, #28]
 8000eac:	2a09      	cmp	r2, #9
 8000eae:	d100      	bne.n	8000eb2 <PE_PRL_FastRoleSwapReception+0xe>
 8000eb0:	4770      	bx	lr
 8000eb2:	b510      	push	{r4, lr}
 8000eb4:	684a      	ldr	r2, [r1, #4]
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	2410      	movs	r4, #16
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	6014      	str	r4, [r2, #0]
 8000ebe:	694a      	ldr	r2, [r1, #20]
 8000ec0:	2380      	movs	r3, #128	@ 0x80
 8000ec2:	029b      	lsls	r3, r3, #10
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	614b      	str	r3, [r1, #20]

08000ec8 <.text_54>:
 8000ec8:	6889      	ldr	r1, [r1, #8]
 8000eca:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000ecc:	4788      	blx	r1
 8000ece:	bd10      	pop	{r4, pc}

08000ed0 <PE_PRL_PostReceiveEvent>:
 8000ed0:	b530      	push	{r4, r5, lr}
 8000ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc0 <.text_63>)
 8000ed4:	0080      	lsls	r0, r0, #2
 8000ed6:	5813      	ldr	r3, [r2, r0]
 8000ed8:	2400      	movs	r4, #0
 8000eda:	2000      	movs	r0, #0
 8000edc:	191a      	adds	r2, r3, r4
 8000ede:	4d09      	ldr	r5, [pc, #36]	@ (8000f04 <.text_56>)
 8000ee0:	1952      	adds	r2, r2, r5
 8000ee2:	7815      	ldrb	r5, [r2, #0]
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d004      	beq.n	8000ef2 <PE_PRL_PostReceiveEvent+0x22>
 8000ee8:	1c64      	adds	r4, r4, #1
 8000eea:	b2e4      	uxtb	r4, r4
 8000eec:	2c01      	cmp	r4, #1
 8000eee:	d9f5      	bls.n	8000edc <PE_PRL_PostReceiveEvent+0xc>
 8000ef0:	bd30      	pop	{r4, r5, pc}
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	7010      	strb	r0, [r2, #0]
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	7813      	ldrb	r3, [r2, #0]
 8000efa:	2401      	movs	r4, #1
 8000efc:	408c      	lsls	r4, r1
 8000efe:	431c      	orrs	r4, r3
 8000f00:	7014      	strb	r4, [r2, #0]
 8000f02:	bd30      	pop	{r4, r5, pc}

08000f04 <.text_56>:
 8000f04:	0000024d 	.word	0x0000024d

08000f08 <PE_PRL_PostReceiveEventError>:
 8000f08:	b530      	push	{r4, r5, lr}
 8000f0a:	492d      	ldr	r1, [pc, #180]	@ (8000fc0 <.text_63>)
 8000f0c:	0080      	lsls	r0, r0, #2
 8000f0e:	5809      	ldr	r1, [r1, r0]
 8000f10:	2000      	movs	r0, #0
 8000f12:	2200      	movs	r2, #0
 8000f14:	b2d3      	uxtb	r3, r2
 8000f16:	18cb      	adds	r3, r1, r3
 8000f18:	4c2c      	ldr	r4, [pc, #176]	@ (8000fcc <.text_66>)
 8000f1a:	191b      	adds	r3, r3, r4
 8000f1c:	781c      	ldrb	r4, [r3, #0]
 8000f1e:	2560      	movs	r5, #96	@ 0x60
 8000f20:	4025      	ands	r5, r4
 8000f22:	2d20      	cmp	r5, #32
 8000f24:	d004      	beq.n	8000f30 <PE_PRL_PostReceiveEventError+0x28>
 8000f26:	1c52      	adds	r2, r2, #1
 8000f28:	b2d3      	uxtb	r3, r2
 8000f2a:	2b02      	cmp	r3, #2
 8000f2c:	d3f2      	bcc.n	8000f14 <PE_PRL_PostReceiveEventError+0xc>
 8000f2e:	bd30      	pop	{r4, r5, pc}
 8000f30:	7018      	strb	r0, [r3, #0]
 8000f32:	bd30      	pop	{r4, r5, pc}

08000f34 <.text_58>:
 8000f34:	0000f01f 	.word	0x0000f01f

08000f38 <PE_PRL_PostReceiveEventCopy>:
 8000f38:	b538      	push	{r3, r4, r5, lr}
 8000f3a:	4a21      	ldr	r2, [pc, #132]	@ (8000fc0 <.text_63>)
 8000f3c:	0080      	lsls	r0, r0, #2
 8000f3e:	5813      	ldr	r3, [r2, r0]
 8000f40:	2200      	movs	r2, #0
 8000f42:	b2d0      	uxtb	r0, r2
 8000f44:	181c      	adds	r4, r3, r0
 8000f46:	4d21      	ldr	r5, [pc, #132]	@ (8000fcc <.text_66>)
 8000f48:	5d64      	ldrb	r4, [r4, r5]
 8000f4a:	2560      	movs	r5, #96	@ 0x60
 8000f4c:	4025      	ands	r5, r4
 8000f4e:	2d20      	cmp	r5, #32
 8000f50:	d004      	beq.n	8000f5c <PE_PRL_PostReceiveEventCopy+0x24>
 8000f52:	1c52      	adds	r2, r2, #1
 8000f54:	b2d0      	uxtb	r0, r2
 8000f56:	2802      	cmp	r0, #2
 8000f58:	d3f3      	bcc.n	8000f42 <PE_PRL_PostReceiveEventCopy+0xa>
 8000f5a:	bd31      	pop	{r0, r4, r5, pc}
 8000f5c:	2284      	movs	r2, #132	@ 0x84
 8000f5e:	0052      	lsls	r2, r2, #1
 8000f60:	4350      	muls	r0, r2
 8000f62:	1818      	adds	r0, r3, r0
 8000f64:	303d      	adds	r0, #61	@ 0x3d
 8000f66:	f01d f96f 	bl	801e248 <__aeabi_memcpy>
 8000f6a:	bd31      	pop	{r0, r4, r5, pc}

08000f6c <PE_PRL_PostReceiveEventComplete>:
 8000f6c:	b538      	push	{r3, r4, r5, lr}
 8000f6e:	4914      	ldr	r1, [pc, #80]	@ (8000fc0 <.text_63>)
 8000f70:	0082      	lsls	r2, r0, #2
 8000f72:	5889      	ldr	r1, [r1, r2]
 8000f74:	2300      	movs	r3, #0
 8000f76:	1c5a      	adds	r2, r3, #1
 8000f78:	18cb      	adds	r3, r1, r3
 8000f7a:	4c14      	ldr	r4, [pc, #80]	@ (8000fcc <.text_66>)
 8000f7c:	191b      	adds	r3, r3, r4
 8000f7e:	781c      	ldrb	r4, [r3, #0]
 8000f80:	2560      	movs	r5, #96	@ 0x60
 8000f82:	4025      	ands	r5, r4
 8000f84:	2d20      	cmp	r5, #32
 8000f86:	d003      	beq.n	8000f90 <PE_PRL_PostReceiveEventComplete+0x24>
 8000f88:	b2d3      	uxtb	r3, r2
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d3f3      	bcc.n	8000f76 <PE_PRL_PostReceiveEventComplete+0xa>
 8000f8e:	bd31      	pop	{r0, r4, r5, pc}
 8000f90:	781c      	ldrb	r4, [r3, #0]
 8000f92:	2540      	movs	r5, #64	@ 0x40
 8000f94:	4325      	orrs	r5, r4
 8000f96:	701d      	strb	r5, [r3, #0]
 8000f98:	233c      	movs	r3, #60	@ 0x3c
 8000f9a:	5ccb      	ldrb	r3, [r1, r3]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d101      	bne.n	8000fa4 <PE_PRL_PostReceiveEventComplete+0x38>
 8000fa0:	233c      	movs	r3, #60	@ 0x3c
 8000fa2:	54ca      	strb	r2, [r1, r3]
 8000fa4:	6889      	ldr	r1, [r1, #8]
 8000fa6:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8000fa8:	4788      	blx	r1
 8000faa:	bd31      	pop	{r0, r4, r5, pc}

08000fac <PE_Get_UnchunkedSupport>:
 8000fac:	4904      	ldr	r1, [pc, #16]	@ (8000fc0 <.text_63>)
 8000fae:	0080      	lsls	r0, r0, #2
 8000fb0:	5808      	ldr	r0, [r1, r0]
 8000fb2:	6840      	ldr	r0, [r0, #4]
 8000fb4:	6800      	ldr	r0, [r0, #0]
 8000fb6:	0181      	lsls	r1, r0, #6
 8000fb8:	0fc8      	lsrs	r0, r1, #31
 8000fba:	4770      	bx	lr

08000fbc <.text_62>:
 8000fbc:	00000704 	.word	0x00000704

08000fc0 <.text_63>:
 8000fc0:	200002ec 	.word	0x200002ec

08000fc4 <.text_64>:
 8000fc4:	fffff9ff 	.word	0xfffff9ff

08000fc8 <.text_65>:
 8000fc8:	f3ffffff 	.word	0xf3ffffff

08000fcc <.text_66>:
 8000fcc:	0000024d 	.word	0x0000024d

08000fd0 <PE_SubStateMachine_Generic>:
 8000fd0:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8000fd2:	b08d      	sub	sp, #52	@ 0x34
 8000fd4:	0004      	movs	r4, r0
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	9004      	str	r0, [sp, #16]
 8000fda:	2500      	movs	r5, #0
 8000fdc:	9503      	str	r5, [sp, #12]
 8000fde:	2601      	movs	r6, #1
 8000fe0:	2714      	movs	r7, #20
 8000fe2:	7c61      	ldrb	r1, [r4, #17]
 8000fe4:	2901      	cmp	r1, #1
 8000fe6:	d100      	bne.n	8000fea <PE_SubStateMachine_Generic+0x1a>
 8000fe8:	e195      	b.n	8001316 <PE_SubStateMachine_Generic+0x346>
 8000fea:	2918      	cmp	r1, #24
 8000fec:	d03f      	beq.n	800106e <PE_SubStateMachine_Generic+0x9e>
 8000fee:	2919      	cmp	r1, #25
 8000ff0:	d050      	beq.n	8001094 <PE_SubStateMachine_Generic+0xc4>
 8000ff2:	291d      	cmp	r1, #29
 8000ff4:	d100      	bne.n	8000ff8 <PE_SubStateMachine_Generic+0x28>
 8000ff6:	e092      	b.n	800111e <PE_SubStateMachine_Generic+0x14e>
 8000ff8:	2927      	cmp	r1, #39	@ 0x27
 8000ffa:	d100      	bne.n	8000ffe <PE_SubStateMachine_Generic+0x2e>
 8000ffc:	e0b0      	b.n	8001160 <PE_SubStateMachine_Generic+0x190>
 8000ffe:	2928      	cmp	r1, #40	@ 0x28
 8001000:	d100      	bne.n	8001004 <PE_SubStateMachine_Generic+0x34>
 8001002:	e0b9      	b.n	8001178 <PE_SubStateMachine_Generic+0x1a8>
 8001004:	2929      	cmp	r1, #41	@ 0x29
 8001006:	d100      	bne.n	800100a <PE_SubStateMachine_Generic+0x3a>
 8001008:	e0c0      	b.n	800118c <PE_SubStateMachine_Generic+0x1bc>
 800100a:	292c      	cmp	r1, #44	@ 0x2c
 800100c:	d100      	bne.n	8001010 <PE_SubStateMachine_Generic+0x40>
 800100e:	e2bc      	b.n	800158a <PE_SubStateMachine_Generic+0x5ba>
 8001010:	2930      	cmp	r1, #48	@ 0x30
 8001012:	d100      	bne.n	8001016 <PE_SubStateMachine_Generic+0x46>
 8001014:	e1de      	b.n	80013d4 <PE_SubStateMachine_Generic+0x404>
 8001016:	293a      	cmp	r1, #58	@ 0x3a
 8001018:	d100      	bne.n	800101c <PE_SubStateMachine_Generic+0x4c>
 800101a:	e28c      	b.n	8001536 <PE_SubStateMachine_Generic+0x566>
 800101c:	293b      	cmp	r1, #59	@ 0x3b
 800101e:	d100      	bne.n	8001022 <PE_SubStateMachine_Generic+0x52>
 8001020:	e270      	b.n	8001504 <PE_SubStateMachine_Generic+0x534>
 8001022:	293c      	cmp	r1, #60	@ 0x3c
 8001024:	d100      	bne.n	8001028 <PE_SubStateMachine_Generic+0x58>
 8001026:	e247      	b.n	80014b8 <PE_SubStateMachine_Generic+0x4e8>
 8001028:	294b      	cmp	r1, #75	@ 0x4b
 800102a:	d100      	bne.n	800102e <PE_SubStateMachine_Generic+0x5e>
 800102c:	e114      	b.n	8001258 <PE_SubStateMachine_Generic+0x288>
 800102e:	2963      	cmp	r1, #99	@ 0x63
 8001030:	d100      	bne.n	8001034 <PE_SubStateMachine_Generic+0x64>
 8001032:	e178      	b.n	8001326 <PE_SubStateMachine_Generic+0x356>
 8001034:	2964      	cmp	r1, #100	@ 0x64
 8001036:	d100      	bne.n	800103a <PE_SubStateMachine_Generic+0x6a>
 8001038:	e1a0      	b.n	800137c <PE_SubStateMachine_Generic+0x3ac>
 800103a:	2967      	cmp	r1, #103	@ 0x67
 800103c:	d100      	bne.n	8001040 <PE_SubStateMachine_Generic+0x70>
 800103e:	e120      	b.n	8001282 <PE_SubStateMachine_Generic+0x2b2>
 8001040:	2968      	cmp	r1, #104	@ 0x68
 8001042:	d100      	bne.n	8001046 <PE_SubStateMachine_Generic+0x76>
 8001044:	e138      	b.n	80012b8 <PE_SubStateMachine_Generic+0x2e8>
 8001046:	2974      	cmp	r1, #116	@ 0x74
 8001048:	d100      	bne.n	800104c <PE_SubStateMachine_Generic+0x7c>
 800104a:	e1f3      	b.n	8001434 <PE_SubStateMachine_Generic+0x464>
 800104c:	2993      	cmp	r1, #147	@ 0x93
 800104e:	d100      	bne.n	8001052 <PE_SubStateMachine_Generic+0x82>
 8001050:	e0a6      	b.n	80011a0 <PE_SubStateMachine_Generic+0x1d0>
 8001052:	2994      	cmp	r1, #148	@ 0x94
 8001054:	d100      	bne.n	8001058 <PE_SubStateMachine_Generic+0x88>
 8001056:	e0a7      	b.n	80011a8 <PE_SubStateMachine_Generic+0x1d8>
 8001058:	2995      	cmp	r1, #149	@ 0x95
 800105a:	d100      	bne.n	800105e <PE_SubStateMachine_Generic+0x8e>
 800105c:	e0bd      	b.n	80011da <PE_SubStateMachine_Generic+0x20a>
 800105e:	2999      	cmp	r1, #153	@ 0x99
 8001060:	d000      	beq.n	8001064 <PE_SubStateMachine_Generic+0x94>
 8001062:	e297      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001064:	2106      	movs	r1, #6
 8001066:	0020      	movs	r0, r4
 8001068:	f7ff fd44 	bl	8000af4 <PE_Send_RESET>
 800106c:	e220      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 800106e:	6861      	ldr	r1, [r4, #4]
 8001070:	6809      	ldr	r1, [r1, #0]
 8001072:	0889      	lsrs	r1, r1, #2
 8001074:	400e      	ands	r6, r1
 8001076:	d002      	beq.n	800107e <PE_SubStateMachine_Generic+0xae>
 8001078:	6960      	ldr	r0, [r4, #20]
 800107a:	0741      	lsls	r1, r0, #29
 800107c:	0fc8      	lsrs	r0, r1, #31
 800107e:	9000      	str	r0, [sp, #0]
 8001080:	2319      	movs	r3, #25
 8001082:	2208      	movs	r2, #8
 8001084:	2100      	movs	r1, #0
 8001086:	0020      	movs	r0, r4
 8001088:	f000 fb76 	bl	8001778 <PE_Send_CtrlMessage>
 800108c:	2800      	cmp	r0, #0
 800108e:	d156      	bne.n	800113e <PE_SubStateMachine_Generic+0x16e>
 8001090:	2007      	movs	r0, #7
 8001092:	e107      	b.n	80012a4 <PE_SubStateMachine_Generic+0x2d4>
 8001094:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001096:	7800      	ldrb	r0, [r0, #0]
 8001098:	2811      	cmp	r0, #17
 800109a:	d13c      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 800109c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800109e:	0bc1      	lsrs	r1, r0, #15
 80010a0:	d11e      	bne.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010a2:	0441      	lsls	r1, r0, #17
 80010a4:	0f49      	lsrs	r1, r1, #29
 80010a6:	d01b      	beq.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010a8:	06c0      	lsls	r0, r0, #27
 80010aa:	0ec0      	lsrs	r0, r0, #27
 80010ac:	2804      	cmp	r0, #4
 80010ae:	d117      	bne.n	80010e0 <PE_SubStateMachine_Generic+0x110>
 80010b0:	008b      	lsls	r3, r1, #2
 80010b2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80010b4:	1c82      	adds	r2, r0, #2
 80010b6:	2105      	movs	r1, #5
 80010b8:	7c20      	ldrb	r0, [r4, #16]
 80010ba:	68a6      	ldr	r6, [r4, #8]
 80010bc:	69b6      	ldr	r6, [r6, #24]
 80010be:	47b0      	blx	r6
 80010c0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80010c2:	7800      	ldrb	r0, [r0, #0]
 80010c4:	2814      	cmp	r0, #20
 80010c6:	d004      	beq.n	80010d2 <PE_SubStateMachine_Generic+0x102>
 80010c8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80010ca:	700f      	strb	r7, [r1, #0]
 80010cc:	0020      	movs	r0, r4
 80010ce:	f7ff fd76 	bl	8000bbe <PE_Clear_RxEvent>
 80010d2:	2003      	movs	r0, #3
 80010d4:	7460      	strb	r0, [r4, #17]
 80010d6:	9504      	str	r5, [sp, #16]
 80010d8:	2107      	movs	r1, #7
 80010da:	7c20      	ldrb	r0, [r4, #16]
 80010dc:	f7ff fb04 	bl	80006e8 <USBPD_PE_Notification>
 80010e0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80010e2:	21f0      	movs	r1, #240	@ 0xf0
 80010e4:	0209      	lsls	r1, r1, #8
 80010e6:	4001      	ands	r1, r0
 80010e8:	d115      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 80010ea:	06c0      	lsls	r0, r0, #27
 80010ec:	0ec0      	lsrs	r0, r0, #27
 80010ee:	2804      	cmp	r0, #4
 80010f0:	d001      	beq.n	80010f6 <PE_SubStateMachine_Generic+0x126>
 80010f2:	2810      	cmp	r0, #16
 80010f4:	d10f      	bne.n	8001116 <PE_SubStateMachine_Generic+0x146>
 80010f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80010f8:	7800      	ldrb	r0, [r0, #0]
 80010fa:	2814      	cmp	r0, #20
 80010fc:	d004      	beq.n	8001108 <PE_SubStateMachine_Generic+0x138>
 80010fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001100:	7007      	strb	r7, [r0, #0]
 8001102:	0020      	movs	r0, r4
 8001104:	f7ff fd5b 	bl	8000bbe <PE_Clear_RxEvent>
 8001108:	2003      	movs	r0, #3
 800110a:	7460      	strb	r0, [r4, #17]
 800110c:	9504      	str	r5, [sp, #16]
 800110e:	2108      	movs	r1, #8
 8001110:	7c20      	ldrb	r0, [r4, #16]
 8001112:	f7ff fae9 	bl	80006e8 <USBPD_PE_Notification>
 8001116:	8be0      	ldrh	r0, [r4, #30]
 8001118:	2180      	movs	r1, #128	@ 0x80
 800111a:	0209      	lsls	r1, r1, #8
 800111c:	e099      	b.n	8001252 <PE_SubStateMachine_Generic+0x282>
 800111e:	9505      	str	r5, [sp, #20]
 8001120:	ab05      	add	r3, sp, #20
 8001122:	aa06      	add	r2, sp, #24
 8001124:	2101      	movs	r1, #1
 8001126:	7c20      	ldrb	r0, [r4, #16]
 8001128:	68a5      	ldr	r5, [r4, #8]
 800112a:	696d      	ldr	r5, [r5, #20]
 800112c:	47a8      	blx	r5
 800112e:	2104      	movs	r1, #4
 8001130:	9805      	ldr	r0, [sp, #20]
 8001132:	f000 fabf 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001136:	2800      	cmp	r0, #0
 8001138:	d002      	beq.n	8001140 <PE_SubStateMachine_Generic+0x170>
 800113a:	2003      	movs	r0, #3
 800113c:	7460      	strb	r0, [r4, #17]
 800113e:	e22a      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001140:	9002      	str	r0, [sp, #8]
 8001142:	2003      	movs	r0, #3
 8001144:	9001      	str	r0, [sp, #4]
 8001146:	9805      	ldr	r0, [sp, #20]
 8001148:	0880      	lsrs	r0, r0, #2
 800114a:	9000      	str	r0, [sp, #0]
 800114c:	ab06      	add	r3, sp, #24
 800114e:	2204      	movs	r2, #4
 8001150:	2100      	movs	r1, #0
 8001152:	0020      	movs	r0, r4
 8001154:	f000 fb3b 	bl	80017ce <PE_Send_DataMessage>
 8001158:	2800      	cmp	r0, #0
 800115a:	d1f0      	bne.n	800113e <PE_SubStateMachine_Generic+0x16e>
 800115c:	210a      	movs	r1, #10
 800115e:	e165      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 8001160:	2012      	movs	r0, #18
 8001162:	7720      	strb	r0, [r4, #28]
 8001164:	2105      	movs	r1, #5
 8001166:	7c20      	ldrb	r0, [r4, #16]
 8001168:	f004 feab 	bl	8005ec2 <USBDPD_PRL_BistCarrierEyeMode>
 800116c:	2028      	movs	r0, #40	@ 0x28
 800116e:	7460      	strb	r0, [r4, #17]
 8001170:	484f      	ldr	r0, [pc, #316]	@ (80012b0 <PE_SubStateMachine_Generic+0x2e0>)
 8001172:	83e0      	strh	r0, [r4, #30]
 8001174:	202d      	movs	r0, #45	@ 0x2d
 8001176:	e099      	b.n	80012ac <PE_SubStateMachine_Generic+0x2dc>
 8001178:	8be0      	ldrh	r0, [r4, #30]
 800117a:	03f1      	lsls	r1, r6, #15
 800117c:	4288      	cmp	r0, r1
 800117e:	d10e      	bne.n	800119e <PE_SubStateMachine_Generic+0x1ce>
 8001180:	2105      	movs	r1, #5
 8001182:	7c20      	ldrb	r0, [r4, #16]
 8001184:	f004 fea5 	bl	8005ed2 <USBDPD_PRL_BistCarrierEyeModeExit>
 8001188:	83e5      	strh	r5, [r4, #30]
 800118a:	e191      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 800118c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800118e:	7800      	ldrb	r0, [r0, #0]
 8001190:	2814      	cmp	r0, #20
 8001192:	d004      	beq.n	800119e <PE_SubStateMachine_Generic+0x1ce>
 8001194:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001196:	7007      	strb	r7, [r0, #0]
 8001198:	0020      	movs	r0, r4
 800119a:	f7ff fd10 	bl	8000bbe <PE_Clear_RxEvent>
 800119e:	e1fa      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80011a0:	0020      	movs	r0, r4
 80011a2:	f000 f9fb 	bl	800159c <PE_SubStateMachine_ReceiveDRS>
 80011a6:	e1f6      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80011a8:	6861      	ldr	r1, [r4, #4]
 80011aa:	6809      	ldr	r1, [r1, #0]
 80011ac:	0889      	lsrs	r1, r1, #2
 80011ae:	400e      	ands	r6, r1
 80011b0:	d002      	beq.n	80011b8 <PE_SubStateMachine_Generic+0x1e8>
 80011b2:	6960      	ldr	r0, [r4, #20]
 80011b4:	0741      	lsls	r1, r0, #29
 80011b6:	0fc8      	lsrs	r0, r1, #31
 80011b8:	9000      	str	r0, [sp, #0]
 80011ba:	2395      	movs	r3, #149	@ 0x95
 80011bc:	2209      	movs	r2, #9
 80011be:	2100      	movs	r1, #0
 80011c0:	0020      	movs	r0, r4
 80011c2:	f000 fad9 	bl	8001778 <PE_Send_CtrlMessage>
 80011c6:	2800      	cmp	r0, #0
 80011c8:	d1ed      	bne.n	80011a6 <PE_SubStateMachine_Generic+0x1d6>
 80011ca:	2010      	movs	r0, #16
 80011cc:	7720      	strb	r0, [r4, #28]
 80011ce:	4839      	ldr	r0, [pc, #228]	@ (80012b4 <PE_SubStateMachine_Generic+0x2e4>)
 80011d0:	83e0      	strh	r0, [r4, #30]
 80011d2:	201b      	movs	r0, #27
 80011d4:	9004      	str	r0, [sp, #16]
 80011d6:	2122      	movs	r1, #34	@ 0x22
 80011d8:	e128      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 80011da:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80011dc:	7800      	ldrb	r0, [r0, #0]
 80011de:	2814      	cmp	r0, #20
 80011e0:	d035      	beq.n	800124e <PE_SubStateMachine_Generic+0x27e>
 80011e2:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80011e4:	21f0      	movs	r1, #240	@ 0xf0
 80011e6:	0209      	lsls	r1, r1, #8
 80011e8:	4001      	ands	r1, r0
 80011ea:	d130      	bne.n	800124e <PE_SubStateMachine_Generic+0x27e>
 80011ec:	211f      	movs	r1, #31
 80011ee:	231f      	movs	r3, #31
 80011f0:	4003      	ands	r3, r0
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d006      	beq.n	8001204 <PE_SubStateMachine_Generic+0x234>
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	d008      	beq.n	800120c <PE_SubStateMachine_Generic+0x23c>
 80011fa:	2b0c      	cmp	r3, #12
 80011fc:	d006      	beq.n	800120c <PE_SubStateMachine_Generic+0x23c>
 80011fe:	2b10      	cmp	r3, #16
 8001200:	d015      	beq.n	800122e <PE_SubStateMachine_Generic+0x25e>
 8001202:	e024      	b.n	800124e <PE_SubStateMachine_Generic+0x27e>
 8001204:	0020      	movs	r0, r4
 8001206:	f000 fa6d 	bl	80016e4 <PE_SwitchDataRole>
 800120a:	e008      	b.n	800121e <PE_SubStateMachine_Generic+0x24e>
 800120c:	4001      	ands	r1, r0
 800120e:	290c      	cmp	r1, #12
 8001210:	d101      	bne.n	8001216 <PE_SubStateMachine_Generic+0x246>
 8001212:	2126      	movs	r1, #38	@ 0x26
 8001214:	e000      	b.n	8001218 <PE_SubStateMachine_Generic+0x248>
 8001216:	2127      	movs	r1, #39	@ 0x27
 8001218:	7c20      	ldrb	r0, [r4, #16]
 800121a:	f7ff fa65 	bl	80006e8 <USBPD_PE_Notification>
 800121e:	2003      	movs	r0, #3
 8001220:	7460      	strb	r0, [r4, #17]
 8001222:	9504      	str	r5, [sp, #16]
 8001224:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001226:	7800      	ldrb	r0, [r0, #0]
 8001228:	2814      	cmp	r0, #20
 800122a:	d10b      	bne.n	8001244 <PE_SubStateMachine_Generic+0x274>
 800122c:	e00f      	b.n	800124e <PE_SubStateMachine_Generic+0x27e>
 800122e:	2128      	movs	r1, #40	@ 0x28
 8001230:	7c20      	ldrb	r0, [r4, #16]
 8001232:	f7ff fa59 	bl	80006e8 <USBPD_PE_Notification>
 8001236:	2003      	movs	r0, #3
 8001238:	7460      	strb	r0, [r4, #17]
 800123a:	9504      	str	r5, [sp, #16]
 800123c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800123e:	7800      	ldrb	r0, [r0, #0]
 8001240:	2814      	cmp	r0, #20
 8001242:	d004      	beq.n	800124e <PE_SubStateMachine_Generic+0x27e>
 8001244:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001246:	7007      	strb	r7, [r0, #0]
 8001248:	0020      	movs	r0, r4
 800124a:	f7ff fcb8 	bl	8000bbe <PE_Clear_RxEvent>
 800124e:	8be0      	ldrh	r0, [r4, #30]
 8001250:	03f1      	lsls	r1, r6, #15
 8001252:	4288      	cmp	r0, r1
 8001254:	d12b      	bne.n	80012ae <PE_SubStateMachine_Generic+0x2de>
 8001256:	e12b      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 8001258:	ab03      	add	r3, sp, #12
 800125a:	aa05      	add	r2, sp, #20
 800125c:	2114      	movs	r1, #20
 800125e:	7c20      	ldrb	r0, [r4, #16]
 8001260:	68a5      	ldr	r5, [r4, #8]
 8001262:	696d      	ldr	r5, [r5, #20]
 8001264:	47a8      	blx	r5
 8001266:	9803      	ldr	r0, [sp, #12]
 8001268:	2800      	cmp	r0, #0
 800126a:	d100      	bne.n	800126e <PE_SubStateMachine_Generic+0x29e>
 800126c:	e192      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 800126e:	2000      	movs	r0, #0
 8001270:	9002      	str	r0, [sp, #8]
 8001272:	2003      	movs	r0, #3
 8001274:	9001      	str	r0, [sp, #4]
 8001276:	9803      	ldr	r0, [sp, #12]
 8001278:	0880      	lsrs	r0, r0, #2
 800127a:	9000      	str	r0, [sp, #0]
 800127c:	ab05      	add	r3, sp, #20
 800127e:	220c      	movs	r2, #12
 8001280:	e154      	b.n	800152c <PE_SubStateMachine_Generic+0x55c>
 8001282:	6861      	ldr	r1, [r4, #4]
 8001284:	6809      	ldr	r1, [r1, #0]
 8001286:	0889      	lsrs	r1, r1, #2
 8001288:	4031      	ands	r1, r6
 800128a:	d000      	beq.n	800128e <PE_SubStateMachine_Generic+0x2be>
 800128c:	2001      	movs	r0, #1
 800128e:	9000      	str	r0, [sp, #0]
 8001290:	2368      	movs	r3, #104	@ 0x68
 8001292:	2218      	movs	r2, #24
 8001294:	2031      	movs	r0, #49	@ 0x31
 8001296:	5c21      	ldrb	r1, [r4, r0]
 8001298:	0020      	movs	r0, r4
 800129a:	f000 fa6d 	bl	8001778 <PE_Send_CtrlMessage>
 800129e:	2800      	cmp	r0, #0
 80012a0:	d105      	bne.n	80012ae <PE_SubStateMachine_Generic+0x2de>
 80012a2:	200f      	movs	r0, #15
 80012a4:	7720      	strb	r0, [r4, #28]
 80012a6:	4803      	ldr	r0, [pc, #12]	@ (80012b4 <PE_SubStateMachine_Generic+0x2e4>)
 80012a8:	83e0      	strh	r0, [r4, #30]
 80012aa:	201b      	movs	r0, #27
 80012ac:	9004      	str	r0, [sp, #16]
 80012ae:	e172      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80012b0:	0000802d 	.word	0x0000802d
 80012b4:	0000801b 	.word	0x0000801b
 80012b8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80012ba:	7800      	ldrb	r0, [r0, #0]
 80012bc:	2814      	cmp	r0, #20
 80012be:	d023      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012c0:	2030      	movs	r0, #48	@ 0x30
 80012c2:	5c20      	ldrb	r0, [r4, r0]
 80012c4:	2131      	movs	r1, #49	@ 0x31
 80012c6:	5c61      	ldrb	r1, [r4, r1]
 80012c8:	4288      	cmp	r0, r1
 80012ca:	d11d      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012cc:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80012ce:	0bc1      	lsrs	r1, r0, #15
 80012d0:	d11a      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012d2:	0b01      	lsrs	r1, r0, #12
 80012d4:	0749      	lsls	r1, r1, #29
 80012d6:	d017      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012d8:	06c0      	lsls	r0, r0, #27
 80012da:	0ec0      	lsrs	r0, r0, #27
 80012dc:	280c      	cmp	r0, #12
 80012de:	d113      	bne.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012e0:	2304      	movs	r3, #4
 80012e2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80012e4:	1c82      	adds	r2, r0, #2
 80012e6:	2114      	movs	r1, #20
 80012e8:	7c20      	ldrb	r0, [r4, #16]
 80012ea:	68a6      	ldr	r6, [r4, #8]
 80012ec:	69b6      	ldr	r6, [r6, #24]
 80012ee:	47b0      	blx	r6
 80012f0:	2003      	movs	r0, #3
 80012f2:	7460      	strb	r0, [r4, #17]
 80012f4:	9504      	str	r5, [sp, #16]
 80012f6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 80012f8:	7800      	ldrb	r0, [r0, #0]
 80012fa:	2814      	cmp	r0, #20
 80012fc:	d004      	beq.n	8001308 <PE_SubStateMachine_Generic+0x338>
 80012fe:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001300:	7007      	strb	r7, [r0, #0]
 8001302:	0020      	movs	r0, r4
 8001304:	f7ff fc5b 	bl	8000bbe <PE_Clear_RxEvent>
 8001308:	8be0      	ldrh	r0, [r4, #30]
 800130a:	2180      	movs	r1, #128	@ 0x80
 800130c:	0209      	lsls	r1, r1, #8
 800130e:	4288      	cmp	r0, r1
 8001310:	d108      	bne.n	8001324 <PE_SubStateMachine_Generic+0x354>
 8001312:	2011      	movs	r0, #17
 8001314:	e0cd      	b.n	80014b2 <PE_SubStateMachine_Generic+0x4e2>
 8001316:	9500      	str	r5, [sp, #0]
 8001318:	2303      	movs	r3, #3
 800131a:	2210      	movs	r2, #16
 800131c:	2100      	movs	r1, #0
 800131e:	0020      	movs	r0, r4
 8001320:	f000 fa2a 	bl	8001778 <PE_Send_CtrlMessage>
 8001324:	e137      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001326:	ab03      	add	r3, sp, #12
 8001328:	48c9      	ldr	r0, [pc, #804]	@ (8001650 <.text_73>)
 800132a:	1822      	adds	r2, r4, r0
 800132c:	2108      	movs	r1, #8
 800132e:	7c20      	ldrb	r0, [r4, #16]
 8001330:	68a7      	ldr	r7, [r4, #8]
 8001332:	697f      	ldr	r7, [r7, #20]
 8001334:	47b8      	blx	r7
 8001336:	2119      	movs	r1, #25
 8001338:	9803      	ldr	r0, [sp, #12]
 800133a:	f000 f9bb 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800133e:	2800      	cmp	r0, #0
 8001340:	d129      	bne.n	8001396 <PE_SubStateMachine_Generic+0x3c6>
 8001342:	48c4      	ldr	r0, [pc, #784]	@ (8001654 <.text_74>)
 8001344:	1826      	adds	r6, r4, r0
 8001346:	7035      	strb	r5, [r6, #0]
 8001348:	7075      	strb	r5, [r6, #1]
 800134a:	7c20      	ldrb	r0, [r4, #16]
 800134c:	f7ff fe2e 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001350:	2800      	cmp	r0, #0
 8001352:	d103      	bne.n	800135c <PE_SubStateMachine_Generic+0x38c>
 8001354:	7870      	ldrb	r0, [r6, #1]
 8001356:	2180      	movs	r1, #128	@ 0x80
 8001358:	4301      	orrs	r1, r0
 800135a:	7071      	strb	r1, [r6, #1]
 800135c:	9502      	str	r5, [sp, #8]
 800135e:	2003      	movs	r0, #3
 8001360:	9001      	str	r0, [sp, #4]
 8001362:	9803      	ldr	r0, [sp, #12]
 8001364:	1d00      	adds	r0, r0, #4
 8001366:	b280      	uxth	r0, r0
 8001368:	9000      	str	r0, [sp, #0]
 800136a:	48bb      	ldr	r0, [pc, #748]	@ (8001658 <.text_75>)
 800136c:	1823      	adds	r3, r4, r0
 800136e:	2201      	movs	r2, #1
 8001370:	2100      	movs	r1, #0
 8001372:	0020      	movs	r0, r4
 8001374:	f000 fb5e 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001378:	2148      	movs	r1, #72	@ 0x48
 800137a:	e057      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 800137c:	ab03      	add	r3, sp, #12
 800137e:	48b4      	ldr	r0, [pc, #720]	@ (8001650 <.text_73>)
 8001380:	1822      	adds	r2, r4, r0
 8001382:	2113      	movs	r1, #19
 8001384:	7c20      	ldrb	r0, [r4, #16]
 8001386:	68a7      	ldr	r7, [r4, #8]
 8001388:	697f      	ldr	r7, [r7, #20]
 800138a:	47b8      	blx	r7
 800138c:	2118      	movs	r1, #24
 800138e:	9803      	ldr	r0, [sp, #12]
 8001390:	f000 f990 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001394:	2800      	cmp	r0, #0
 8001396:	d000      	beq.n	800139a <PE_SubStateMachine_Generic+0x3ca>
 8001398:	e0fc      	b.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 800139a:	48ae      	ldr	r0, [pc, #696]	@ (8001654 <.text_74>)
 800139c:	1826      	adds	r6, r4, r0
 800139e:	7035      	strb	r5, [r6, #0]
 80013a0:	7075      	strb	r5, [r6, #1]
 80013a2:	7c20      	ldrb	r0, [r4, #16]
 80013a4:	f7ff fe02 	bl	8000fac <PE_Get_UnchunkedSupport>
 80013a8:	2800      	cmp	r0, #0
 80013aa:	d103      	bne.n	80013b4 <PE_SubStateMachine_Generic+0x3e4>
 80013ac:	7870      	ldrb	r0, [r6, #1]
 80013ae:	2180      	movs	r1, #128	@ 0x80
 80013b0:	4301      	orrs	r1, r0
 80013b2:	7071      	strb	r1, [r6, #1]
 80013b4:	9502      	str	r5, [sp, #8]
 80013b6:	2003      	movs	r0, #3
 80013b8:	9001      	str	r0, [sp, #4]
 80013ba:	9803      	ldr	r0, [sp, #12]
 80013bc:	1d00      	adds	r0, r0, #4
 80013be:	b280      	uxth	r0, r0
 80013c0:	9000      	str	r0, [sp, #0]
 80013c2:	48a5      	ldr	r0, [pc, #660]	@ (8001658 <.text_75>)
 80013c4:	1823      	adds	r3, r4, r0
 80013c6:	220f      	movs	r2, #15
 80013c8:	2100      	movs	r1, #0
 80013ca:	0020      	movs	r0, r4
 80013cc:	f000 fb32 	bl	8001a34 <PE_Send_ExtendedMessage>
 80013d0:	2161      	movs	r1, #97	@ 0x61
 80013d2:	e02b      	b.n	800142c <PE_SubStateMachine_Generic+0x45c>
 80013d4:	ab03      	add	r3, sp, #12
 80013d6:	489e      	ldr	r0, [pc, #632]	@ (8001650 <.text_73>)
 80013d8:	1822      	adds	r2, r4, r0
 80013da:	2109      	movs	r1, #9
 80013dc:	7c20      	ldrb	r0, [r4, #16]
 80013de:	68a7      	ldr	r7, [r4, #8]
 80013e0:	697f      	ldr	r7, [r7, #20]
 80013e2:	47b8      	blx	r7
 80013e4:	2107      	movs	r1, #7
 80013e6:	9803      	ldr	r0, [sp, #12]
 80013e8:	f000 f964 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 80013ec:	2800      	cmp	r0, #0
 80013ee:	d170      	bne.n	80014d2 <PE_SubStateMachine_Generic+0x502>
 80013f0:	4998      	ldr	r1, [pc, #608]	@ (8001654 <.text_74>)
 80013f2:	5465      	strb	r5, [r4, r1]
 80013f4:	1860      	adds	r0, r4, r1
 80013f6:	7045      	strb	r5, [r0, #1]
 80013f8:	7c20      	ldrb	r0, [r4, #16]
 80013fa:	f7ff fdd7 	bl	8000fac <PE_Get_UnchunkedSupport>
 80013fe:	2800      	cmp	r0, #0
 8001400:	d105      	bne.n	800140e <PE_SubStateMachine_Generic+0x43e>
 8001402:	4894      	ldr	r0, [pc, #592]	@ (8001654 <.text_74>)
 8001404:	1820      	adds	r0, r4, r0
 8001406:	7841      	ldrb	r1, [r0, #1]
 8001408:	2280      	movs	r2, #128	@ 0x80
 800140a:	430a      	orrs	r2, r1
 800140c:	7042      	strb	r2, [r0, #1]
 800140e:	9502      	str	r5, [sp, #8]
 8001410:	2003      	movs	r0, #3
 8001412:	9001      	str	r0, [sp, #4]
 8001414:	9803      	ldr	r0, [sp, #12]
 8001416:	1d00      	adds	r0, r0, #4
 8001418:	b280      	uxth	r0, r0
 800141a:	9000      	str	r0, [sp, #0]
 800141c:	488e      	ldr	r0, [pc, #568]	@ (8001658 <.text_75>)
 800141e:	1823      	adds	r3, r4, r0
 8001420:	2202      	movs	r2, #2
 8001422:	2100      	movs	r1, #0
 8001424:	0020      	movs	r0, r4
 8001426:	f000 fb05 	bl	8001a34 <PE_Send_ExtendedMessage>
 800142a:	214f      	movs	r1, #79	@ 0x4f
 800142c:	7c20      	ldrb	r0, [r4, #16]
 800142e:	f7ff f95b 	bl	80006e8 <USBPD_PE_Notification>
 8001432:	e0b0      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001434:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001436:	7800      	ldrb	r0, [r0, #0]
 8001438:	2814      	cmp	r0, #20
 800143a:	d034      	beq.n	80014a6 <PE_SubStateMachine_Generic+0x4d6>
 800143c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800143e:	0bc1      	lsrs	r1, r0, #15
 8001440:	d11a      	bne.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001442:	0b01      	lsrs	r1, r0, #12
 8001444:	0749      	lsls	r1, r1, #29
 8001446:	d017      	beq.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001448:	06c0      	lsls	r0, r0, #27
 800144a:	0ec0      	lsrs	r0, r0, #27
 800144c:	2805      	cmp	r0, #5
 800144e:	d113      	bne.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 8001450:	2304      	movs	r3, #4
 8001452:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001454:	1d02      	adds	r2, r0, #4
 8001456:	210f      	movs	r1, #15
 8001458:	7c20      	ldrb	r0, [r4, #16]
 800145a:	68a6      	ldr	r6, [r4, #8]
 800145c:	69b6      	ldr	r6, [r6, #24]
 800145e:	47b0      	blx	r6
 8001460:	2003      	movs	r0, #3
 8001462:	7460      	strb	r0, [r4, #17]
 8001464:	9504      	str	r5, [sp, #16]
 8001466:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001468:	7800      	ldrb	r0, [r0, #0]
 800146a:	2814      	cmp	r0, #20
 800146c:	d004      	beq.n	8001478 <PE_SubStateMachine_Generic+0x4a8>
 800146e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8001470:	700f      	strb	r7, [r1, #0]
 8001472:	0020      	movs	r0, r4
 8001474:	f7ff fba3 	bl	8000bbe <PE_Clear_RxEvent>
 8001478:	2034      	movs	r0, #52	@ 0x34
 800147a:	5c20      	ldrb	r0, [r4, r0]
 800147c:	06c0      	lsls	r0, r0, #27
 800147e:	0ec0      	lsrs	r0, r0, #27
 8001480:	2810      	cmp	r0, #16
 8001482:	d110      	bne.n	80014a6 <PE_SubStateMachine_Generic+0x4d6>
 8001484:	2159      	movs	r1, #89	@ 0x59
 8001486:	7c20      	ldrb	r0, [r4, #16]
 8001488:	f7ff f92e 	bl	80006e8 <USBPD_PE_Notification>
 800148c:	83e5      	strh	r5, [r4, #30]
 800148e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001490:	7800      	ldrb	r0, [r0, #0]
 8001492:	2814      	cmp	r0, #20
 8001494:	d004      	beq.n	80014a0 <PE_SubStateMachine_Generic+0x4d0>
 8001496:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8001498:	7007      	strb	r7, [r0, #0]
 800149a:	0020      	movs	r0, r4
 800149c:	f7ff fb8f 	bl	8000bbe <PE_Clear_RxEvent>
 80014a0:	2003      	movs	r0, #3
 80014a2:	7460      	strb	r0, [r4, #17]
 80014a4:	9504      	str	r5, [sp, #16]
 80014a6:	8be0      	ldrh	r0, [r4, #30]
 80014a8:	2180      	movs	r1, #128	@ 0x80
 80014aa:	0209      	lsls	r1, r1, #8
 80014ac:	4288      	cmp	r0, r1
 80014ae:	d172      	bne.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80014b0:	2003      	movs	r0, #3
 80014b2:	7460      	strb	r0, [r4, #17]
 80014b4:	9504      	str	r5, [sp, #16]
 80014b6:	e06e      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 80014b8:	ab03      	add	r3, sp, #12
 80014ba:	4865      	ldr	r0, [pc, #404]	@ (8001650 <.text_73>)
 80014bc:	1822      	adds	r2, r4, r0
 80014be:	210d      	movs	r1, #13
 80014c0:	7c20      	ldrb	r0, [r4, #16]
 80014c2:	68a7      	ldr	r7, [r4, #8]
 80014c4:	697f      	ldr	r7, [r7, #20]
 80014c6:	47b8      	blx	r7
 80014c8:	2104      	movs	r1, #4
 80014ca:	9803      	ldr	r0, [sp, #12]
 80014cc:	f000 f8f2 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 80014d0:	2800      	cmp	r0, #0
 80014d2:	d15f      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 80014d4:	485f      	ldr	r0, [pc, #380]	@ (8001654 <.text_74>)
 80014d6:	1826      	adds	r6, r4, r0
 80014d8:	7035      	strb	r5, [r6, #0]
 80014da:	7075      	strb	r5, [r6, #1]
 80014dc:	7c20      	ldrb	r0, [r4, #16]
 80014de:	f7ff fd65 	bl	8000fac <PE_Get_UnchunkedSupport>
 80014e2:	2800      	cmp	r0, #0
 80014e4:	d103      	bne.n	80014ee <PE_SubStateMachine_Generic+0x51e>
 80014e6:	7870      	ldrb	r0, [r6, #1]
 80014e8:	2180      	movs	r1, #128	@ 0x80
 80014ea:	4301      	orrs	r1, r0
 80014ec:	7071      	strb	r1, [r6, #1]
 80014ee:	9502      	str	r5, [sp, #8]
 80014f0:	2003      	movs	r0, #3
 80014f2:	9001      	str	r0, [sp, #4]
 80014f4:	9803      	ldr	r0, [sp, #12]
 80014f6:	1d00      	adds	r0, r0, #4
 80014f8:	b280      	uxth	r0, r0
 80014fa:	9000      	str	r0, [sp, #0]
 80014fc:	4856      	ldr	r0, [pc, #344]	@ (8001658 <.text_75>)
 80014fe:	1823      	adds	r3, r4, r0
 8001500:	2207      	movs	r2, #7
 8001502:	e03d      	b.n	8001580 <PE_SubStateMachine_Generic+0x5b0>
 8001504:	9505      	str	r5, [sp, #20]
 8001506:	ab03      	add	r3, sp, #12
 8001508:	aa05      	add	r2, sp, #20
 800150a:	210f      	movs	r1, #15
 800150c:	7c20      	ldrb	r0, [r4, #16]
 800150e:	68a5      	ldr	r5, [r4, #8]
 8001510:	696d      	ldr	r5, [r5, #20]
 8001512:	47a8      	blx	r5
 8001514:	2104      	movs	r1, #4
 8001516:	9803      	ldr	r0, [sp, #12]
 8001518:	f000 f8cc 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800151c:	2800      	cmp	r0, #0
 800151e:	d139      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001520:	9002      	str	r0, [sp, #8]
 8001522:	2003      	movs	r0, #3
 8001524:	9001      	str	r0, [sp, #4]
 8001526:	9600      	str	r6, [sp, #0]
 8001528:	ab05      	add	r3, sp, #20
 800152a:	2205      	movs	r2, #5
 800152c:	2100      	movs	r1, #0
 800152e:	0020      	movs	r0, r4
 8001530:	f000 f94d 	bl	80017ce <PE_Send_DataMessage>
 8001534:	e02f      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 8001536:	ab03      	add	r3, sp, #12
 8001538:	4845      	ldr	r0, [pc, #276]	@ (8001650 <.text_73>)
 800153a:	1822      	adds	r2, r4, r0
 800153c:	2111      	movs	r1, #17
 800153e:	7c20      	ldrb	r0, [r4, #16]
 8001540:	68a7      	ldr	r7, [r4, #8]
 8001542:	697f      	ldr	r7, [r7, #20]
 8001544:	47b8      	blx	r7
 8001546:	2109      	movs	r1, #9
 8001548:	9803      	ldr	r0, [sp, #12]
 800154a:	f000 f8b3 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 800154e:	2800      	cmp	r0, #0
 8001550:	d120      	bne.n	8001594 <PE_SubStateMachine_Generic+0x5c4>
 8001552:	4840      	ldr	r0, [pc, #256]	@ (8001654 <.text_74>)
 8001554:	1826      	adds	r6, r4, r0
 8001556:	7035      	strb	r5, [r6, #0]
 8001558:	7075      	strb	r5, [r6, #1]
 800155a:	7c20      	ldrb	r0, [r4, #16]
 800155c:	f7ff fd26 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001560:	2800      	cmp	r0, #0
 8001562:	d103      	bne.n	800156c <PE_SubStateMachine_Generic+0x59c>
 8001564:	7870      	ldrb	r0, [r6, #1]
 8001566:	2180      	movs	r1, #128	@ 0x80
 8001568:	4301      	orrs	r1, r0
 800156a:	7071      	strb	r1, [r6, #1]
 800156c:	9502      	str	r5, [sp, #8]
 800156e:	2003      	movs	r0, #3
 8001570:	9001      	str	r0, [sp, #4]
 8001572:	9803      	ldr	r0, [sp, #12]
 8001574:	1d00      	adds	r0, r0, #4
 8001576:	b280      	uxth	r0, r0
 8001578:	9000      	str	r0, [sp, #0]
 800157a:	4837      	ldr	r0, [pc, #220]	@ (8001658 <.text_75>)
 800157c:	1823      	adds	r3, r4, r0
 800157e:	2205      	movs	r2, #5
 8001580:	2100      	movs	r1, #0
 8001582:	0020      	movs	r0, r4
 8001584:	f000 fa56 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001588:	e005      	b.n	8001596 <PE_SubStateMachine_Generic+0x5c6>
 800158a:	2150      	movs	r1, #80	@ 0x50
 800158c:	7c20      	ldrb	r0, [r4, #16]
 800158e:	f7ff f8ab 	bl	80006e8 <USBPD_PE_Notification>
 8001592:	e78d      	b.n	80014b0 <PE_SubStateMachine_Generic+0x4e0>
 8001594:	7466      	strb	r6, [r4, #17]
 8001596:	9804      	ldr	r0, [sp, #16]
 8001598:	b00f      	add	sp, #60	@ 0x3c
 800159a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800159c <PE_SubStateMachine_ReceiveDRS>:
 800159c:	b538      	push	{r3, r4, r5, lr}
 800159e:	0004      	movs	r4, r0
 80015a0:	252a      	movs	r5, #42	@ 0x2a
 80015a2:	7c20      	ldrb	r0, [r4, #16]
 80015a4:	68a1      	ldr	r1, [r4, #8]
 80015a6:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 80015a8:	4788      	blx	r1
 80015aa:	280a      	cmp	r0, #10
 80015ac:	d002      	beq.n	80015b4 <PE_SubStateMachine_ReceiveDRS+0x18>
 80015ae:	280c      	cmp	r0, #12
 80015b0:	d017      	beq.n	80015e2 <PE_SubStateMachine_ReceiveDRS+0x46>
 80015b2:	e00d      	b.n	80015d0 <PE_SubStateMachine_ReceiveDRS+0x34>
 80015b4:	2000      	movs	r0, #0
 80015b6:	9000      	str	r0, [sp, #0]
 80015b8:	2303      	movs	r3, #3
 80015ba:	2203      	movs	r2, #3
 80015bc:	2100      	movs	r1, #0
 80015be:	0020      	movs	r0, r4
 80015c0:	f000 f8da 	bl	8001778 <PE_Send_CtrlMessage>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	d10d      	bne.n	80015e4 <PE_SubStateMachine_ReceiveDRS+0x48>
 80015c8:	0020      	movs	r0, r4
 80015ca:	f000 f88b 	bl	80016e4 <PE_SwitchDataRole>
 80015ce:	bd31      	pop	{r0, r4, r5, pc}
 80015d0:	6860      	ldr	r0, [r4, #4]
 80015d2:	7800      	ldrb	r0, [r0, #0]
 80015d4:	0780      	lsls	r0, r0, #30
 80015d6:	0f80      	lsrs	r0, r0, #30
 80015d8:	2802      	cmp	r0, #2
 80015da:	d102      	bne.n	80015e2 <PE_SubStateMachine_ReceiveDRS+0x46>
 80015dc:	2001      	movs	r0, #1
 80015de:	7460      	strb	r0, [r4, #17]
 80015e0:	bd31      	pop	{r0, r4, r5, pc}
 80015e2:	7465      	strb	r5, [r4, #17]
 80015e4:	bd31      	pop	{r0, r4, r5, pc}

080015e6 <PE_UpdateTimer>:
 80015e6:	b510      	push	{r4, lr}
 80015e8:	0002      	movs	r2, r0
 80015ea:	2080      	movs	r0, #128	@ 0x80
 80015ec:	0200      	lsls	r0, r0, #8
 80015ee:	0454      	lsls	r4, r2, #17
 80015f0:	0c64      	lsrs	r4, r4, #17
 80015f2:	42a1      	cmp	r1, r4
 80015f4:	da00      	bge.n	80015f8 <PE_UpdateTimer+0x12>
 80015f6:	1a50      	subs	r0, r2, r1
 80015f8:	b280      	uxth	r0, r0
 80015fa:	bd10      	pop	{r4, pc}

080015fc <PE_CallHardResetCallback>:
 80015fc:	6883      	ldr	r3, [r0, #8]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d100      	bne.n	8001606 <PE_CallHardResetCallback+0xa>
 8001604:	4770      	bx	lr
 8001606:	b580      	push	{r7, lr}
 8001608:	7c00      	ldrb	r0, [r0, #16]
 800160a:	4798      	blx	r3
 800160c:	bd01      	pop	{r0, pc}

0800160e <PE_SetPowerNegotiation>:
 800160e:	b510      	push	{r4, lr}
 8001610:	6842      	ldr	r2, [r0, #4]
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	055c      	lsls	r4, r3, #21
 8001616:	0f64      	lsrs	r4, r4, #29
 8001618:	42a1      	cmp	r1, r4
 800161a:	d00b      	beq.n	8001634 <PE_SetPowerNegotiation+0x26>
 800161c:	4c2e      	ldr	r4, [pc, #184]	@ (80016d8 <.text_79>)
 800161e:	401c      	ands	r4, r3
 8001620:	0209      	lsls	r1, r1, #8
 8001622:	23e0      	movs	r3, #224	@ 0xe0
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	400b      	ands	r3, r1
 8001628:	4323      	orrs	r3, r4
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	215a      	movs	r1, #90	@ 0x5a
 800162e:	7c00      	ldrb	r0, [r0, #16]
 8001630:	f7ff f85a 	bl	80006e8 <USBPD_PE_Notification>
 8001634:	bd10      	pop	{r4, pc}

08001636 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001636:	b580      	push	{r7, lr}
 8001638:	4928      	ldr	r1, [pc, #160]	@ (80016dc <.text_80>)
 800163a:	0082      	lsls	r2, r0, #2
 800163c:	5889      	ldr	r1, [r1, r2]
 800163e:	694a      	ldr	r2, [r1, #20]
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	029b      	lsls	r3, r3, #10
 8001644:	4313      	orrs	r3, r2
 8001646:	614b      	str	r3, [r1, #20]
 8001648:	6889      	ldr	r1, [r1, #8]
 800164a:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800164c:	4788      	blx	r1
 800164e:	bd01      	pop	{r0, pc}

08001650 <.text_73>:
 8001650:	00000267 	.word	0x00000267

08001654 <.text_74>:
 8001654:	00000265 	.word	0x00000265

08001658 <.text_75>:
 8001658:	00000263 	.word	0x00000263

0800165c <PE_CalculateMinTiming>:
 800165c:	0001      	movs	r1, r0
 800165e:	2000      	movs	r0, #0
 8001660:	43c0      	mvns	r0, r0
 8001662:	0c42      	lsrs	r2, r0, #17
 8001664:	8c8b      	ldrh	r3, [r1, #36]	@ 0x24
 8001666:	4213      	tst	r3, r2
 8001668:	d001      	beq.n	800166e <PE_CalculateMinTiming+0x12>
 800166a:	8c88      	ldrh	r0, [r1, #36]	@ 0x24
 800166c:	4010      	ands	r0, r2
 800166e:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 8001670:	4213      	tst	r3, r2
 8001672:	d006      	beq.n	8001682 <PE_CalculateMinTiming+0x26>
 8001674:	8c4b      	ldrh	r3, [r1, #34]	@ 0x22
 8001676:	4013      	ands	r3, r2
 8001678:	4298      	cmp	r0, r3
 800167a:	d302      	bcc.n	8001682 <PE_CalculateMinTiming+0x26>
 800167c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800167e:	0010      	movs	r0, r2
 8001680:	4008      	ands	r0, r1
 8001682:	4770      	bx	lr

08001684 <PE_SetPowerNegociation>:
 8001684:	b538      	push	{r3, r4, r5, lr}
 8001686:	0005      	movs	r5, r0
 8001688:	000c      	movs	r4, r1
 800168a:	6868      	ldr	r0, [r5, #4]
 800168c:	6800      	ldr	r0, [r0, #0]
 800168e:	0540      	lsls	r0, r0, #21
 8001690:	0f40      	lsrs	r0, r0, #29
 8001692:	4284      	cmp	r4, r0
 8001694:	d003      	beq.n	800169e <PE_SetPowerNegociation+0x1a>
 8001696:	215a      	movs	r1, #90	@ 0x5a
 8001698:	7c28      	ldrb	r0, [r5, #16]
 800169a:	f7ff f825 	bl	80006e8 <USBPD_PE_Notification>
 800169e:	6868      	ldr	r0, [r5, #4]
 80016a0:	6801      	ldr	r1, [r0, #0]
 80016a2:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <.text_79>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	0221      	lsls	r1, r4, #8
 80016a8:	23e0      	movs	r3, #224	@ 0xe0
 80016aa:	00db      	lsls	r3, r3, #3
 80016ac:	400b      	ands	r3, r1
 80016ae:	4313      	orrs	r3, r2
 80016b0:	6003      	str	r3, [r0, #0]
 80016b2:	bd31      	pop	{r0, r4, r5, pc}

080016b4 <PE_CheckDataSizeFromGetDataInfo>:
 80016b4:	b51c      	push	{r2, r3, r4, lr}
 80016b6:	0002      	movs	r2, r0
 80016b8:	2000      	movs	r0, #0
 80016ba:	428a      	cmp	r2, r1
 80016bc:	d20a      	bcs.n	80016d4 <PE_CheckDataSizeFromGetDataInfo+0x20>
 80016be:	2018      	movs	r0, #24
 80016c0:	9000      	str	r0, [sp, #0]
 80016c2:	bf00      	nop
 80016c4:	a315      	add	r3, pc, #84	@ (adr r3, 800171c <.text_83>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	2100      	movs	r1, #0
 80016ca:	2006      	movs	r0, #6
 80016cc:	4c04      	ldr	r4, [pc, #16]	@ (80016e0 <.text_81>)
 80016ce:	6824      	ldr	r4, [r4, #0]
 80016d0:	47a0      	blx	r4
 80016d2:	2002      	movs	r0, #2
 80016d4:	bd16      	pop	{r1, r2, r4, pc}
	...

080016d8 <.text_79>:
 80016d8:	fffff8ff 	.word	0xfffff8ff

080016dc <.text_80>:
 80016dc:	200002ec 	.word	0x200002ec

080016e0 <.text_81>:
 80016e0:	20000000 	.word	0x20000000

080016e4 <PE_SwitchDataRole>:
 80016e4:	b510      	push	{r4, lr}
 80016e6:	0004      	movs	r4, r0
 80016e8:	6860      	ldr	r0, [r4, #4]
 80016ea:	6802      	ldr	r2, [r0, #0]
 80016ec:	2101      	movs	r1, #1
 80016ee:	08d3      	lsrs	r3, r2, #3
 80016f0:	400b      	ands	r3, r1
 80016f2:	d107      	bne.n	8001704 <PE_SwitchDataRole+0x20>
 80016f4:	2308      	movs	r3, #8
 80016f6:	4313      	orrs	r3, r2
 80016f8:	6003      	str	r3, [r0, #0]
 80016fa:	7c20      	ldrb	r0, [r4, #16]
 80016fc:	f004 f93b 	bl	8005976 <USBPD_PRL_SetHeaderDataRole>
 8001700:	2125      	movs	r1, #37	@ 0x25
 8001702:	e007      	b.n	8001714 <PE_SwitchDataRole+0x30>
 8001704:	2108      	movs	r1, #8
 8001706:	438a      	bics	r2, r1
 8001708:	6002      	str	r2, [r0, #0]
 800170a:	2100      	movs	r1, #0
 800170c:	7c20      	ldrb	r0, [r4, #16]
 800170e:	f004 f932 	bl	8005976 <USBPD_PRL_SetHeaderDataRole>
 8001712:	2124      	movs	r1, #36	@ 0x24
 8001714:	7c20      	ldrb	r0, [r4, #16]
 8001716:	f7fe ffe7 	bl	80006e8 <USBPD_PE_Notification>
 800171a:	bd10      	pop	{r4, pc}

0800171c <.text_83>:
 800171c:	61746144 	.word	0x61746144
 8001720:	7a695320 	.word	0x7a695320
 8001724:	73692065 	.word	0x73692065
 8001728:	746f6e20 	.word	0x746f6e20
 800172c:	726f6320 	.word	0x726f6320
 8001730:	74636572 	.word	0x74636572
 8001734:	00          	.byte	0x00
 8001735:	00          	.byte	0x00
	...

08001738 <USBPD_PE_SetTrace>:
 8001738:	0001      	movs	r1, r0
 800173a:	d100      	bne.n	800173e <USBPD_PE_SetTrace+0x6>
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <.text_5>)
 800173e:	4906      	ldr	r1, [pc, #24]	@ (8001758 <.text_6>)
 8001740:	6008      	str	r0, [r1, #0]
 8001742:	4770      	bx	lr

08001744 <USBPD_PE_CheckLIB>:
 8001744:	0001      	movs	r1, r0
 8001746:	2000      	movs	r0, #0
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <.text_7>)
 800174a:	4291      	cmp	r1, r2
 800174c:	d100      	bne.n	8001750 <USBPD_PE_CheckLIB+0xc>
 800174e:	2001      	movs	r0, #1
 8001750:	4770      	bx	lr
	...

08001754 <.text_5>:
 8001754:	08001777 	.word	0x08001777

08001758 <.text_6>:
 8001758:	20000000 	.word	0x20000000

0800175c <.text_7>:
 800175c:	30410000 	.word	0x30410000

08001760 <USBPD_PE_GetMemoryConsumption>:
 8001760:	b510      	push	{r4, lr}
 8001762:	f004 f8df 	bl	8005924 <USBPD_PRL_GetMemoryConsumption>
 8001766:	0004      	movs	r4, r0
 8001768:	f7fe fedd 	bl	8000526 <USBPD_CAD_GetMemoryConsumption>
 800176c:	1820      	adds	r0, r4, r0
 800176e:	21e1      	movs	r1, #225	@ 0xe1
 8001770:	0109      	lsls	r1, r1, #4
 8001772:	1840      	adds	r0, r0, r1
 8001774:	bd10      	pop	{r4, pc}

08001776 <PE_Trace_Empty>:
 8001776:	4770      	bx	lr

08001778 <PE_Send_CtrlMessage>:
 8001778:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800177a:	2501      	movs	r5, #1
 800177c:	0004      	movs	r4, r0
 800177e:	000f      	movs	r7, r1
 8001780:	0016      	movs	r6, r2
 8001782:	6860      	ldr	r0, [r4, #4]
 8001784:	6800      	ldr	r0, [r0, #0]
 8001786:	0b00      	lsrs	r0, r0, #12
 8001788:	4028      	ands	r0, r5
 800178a:	d014      	beq.n	80017b6 <PE_Send_CtrlMessage+0x3e>
 800178c:	a808      	add	r0, sp, #32
 800178e:	7800      	ldrb	r0, [r0, #0]
 8001790:	9001      	str	r0, [sp, #4]
 8001792:	2002      	movs	r0, #2
 8001794:	9000      	str	r0, [sp, #0]
 8001796:	48a2      	ldr	r0, [pc, #648]	@ (8001a20 <.text_5>)
 8001798:	1823      	adds	r3, r4, r0
 800179a:	0032      	movs	r2, r6
 800179c:	0039      	movs	r1, r7
 800179e:	7c20      	ldrb	r0, [r4, #16]
 80017a0:	f004 f938 	bl	8005a14 <USBPD_PRL_SendMessage>
 80017a4:	2803      	cmp	r0, #3
 80017a6:	d0ec      	beq.n	8001782 <PE_Send_CtrlMessage+0xa>
 80017a8:	0039      	movs	r1, r7
 80017aa:	2810      	cmp	r0, #16
 80017ac:	d00e      	beq.n	80017cc <PE_Send_CtrlMessage+0x54>
 80017ae:	2e0d      	cmp	r6, #13
 80017b0:	d104      	bne.n	80017bc <PE_Send_CtrlMessage+0x44>
 80017b2:	2201      	movs	r2, #1
 80017b4:	e003      	b.n	80017be <PE_Send_CtrlMessage+0x46>
 80017b6:	7460      	strb	r0, [r4, #17]
 80017b8:	2010      	movs	r0, #16
 80017ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80017bc:	2200      	movs	r2, #0
 80017be:	466b      	mov	r3, sp
 80017c0:	7a1b      	ldrb	r3, [r3, #8]
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	0003      	movs	r3, r0
 80017c6:	0020      	movs	r0, r4
 80017c8:	f000 fc24 	bl	8002014 <PE_CheckSendMessageStatus>
 80017cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080017ce <PE_Send_DataMessage>:
 80017ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	0004      	movs	r4, r0
 80017d4:	2000      	movs	r0, #0
 80017d6:	4e93      	ldr	r6, [pc, #588]	@ (8001a24 <.text_6>)
 80017d8:	e00c      	b.n	80017f4 <PE_Send_DataMessage+0x26>
 80017da:	2100      	movs	r1, #0
 80017dc:	0082      	lsls	r2, r0, #2
 80017de:	18a2      	adds	r2, r4, r2
 80017e0:	1855      	adds	r5, r2, r1
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	00cf      	lsls	r7, r1, #3
 80017e6:	40fa      	lsrs	r2, r7
 80017e8:	55aa      	strb	r2, [r5, r6]
 80017ea:	1c49      	adds	r1, r1, #1
 80017ec:	2904      	cmp	r1, #4
 80017ee:	d3f5      	bcc.n	80017dc <PE_Send_DataMessage+0xe>
 80017f0:	1d1b      	adds	r3, r3, #4
 80017f2:	1c40      	adds	r0, r0, #1
 80017f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80017f6:	4288      	cmp	r0, r1
 80017f8:	d3ef      	bcc.n	80017da <PE_Send_DataMessage+0xc>
 80017fa:	6860      	ldr	r0, [r4, #4]
 80017fc:	6800      	ldr	r0, [r0, #0]
 80017fe:	04c1      	lsls	r1, r0, #19
 8001800:	0fc9      	lsrs	r1, r1, #31
 8001802:	d01f      	beq.n	8001844 <PE_Send_DataMessage+0x76>
 8001804:	a80c      	add	r0, sp, #48	@ 0x30
 8001806:	7800      	ldrb	r0, [r0, #0]
 8001808:	9001      	str	r0, [sp, #4]
 800180a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800180c:	0080      	lsls	r0, r0, #2
 800180e:	1c80      	adds	r0, r0, #2
 8001810:	b280      	uxth	r0, r0
 8001812:	9000      	str	r0, [sp, #0]
 8001814:	1eb0      	subs	r0, r6, #2
 8001816:	1823      	adds	r3, r4, r0
 8001818:	4668      	mov	r0, sp
 800181a:	7c02      	ldrb	r2, [r0, #16]
 800181c:	7b01      	ldrb	r1, [r0, #12]
 800181e:	7c20      	ldrb	r0, [r4, #16]
 8001820:	f004 f8f8 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001824:	2803      	cmp	r0, #3
 8001826:	d0e8      	beq.n	80017fa <PE_Send_DataMessage+0x2c>
 8001828:	4669      	mov	r1, sp
 800182a:	7b09      	ldrb	r1, [r1, #12]
 800182c:	2810      	cmp	r0, #16
 800182e:	d007      	beq.n	8001840 <PE_Send_DataMessage+0x72>
 8001830:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001832:	7812      	ldrb	r2, [r2, #0]
 8001834:	9200      	str	r2, [sp, #0]
 8001836:	0003      	movs	r3, r0
 8001838:	2200      	movs	r2, #0
 800183a:	0020      	movs	r0, r4
 800183c:	f000 fbea 	bl	8002014 <PE_CheckSendMessageStatus>
 8001840:	b005      	add	sp, #20
 8001842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001844:	2010      	movs	r0, #16
 8001846:	e7fb      	b.n	8001840 <PE_Send_DataMessage+0x72>

08001848 <PE_Check_ExtendedMessage>:
 8001848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800184a:	0004      	movs	r4, r0
 800184c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800184e:	7881      	ldrb	r1, [r0, #2]
 8001850:	78c0      	ldrb	r0, [r0, #3]
 8001852:	0200      	lsls	r0, r0, #8
 8001854:	1808      	adds	r0, r1, r0
 8001856:	4974      	ldr	r1, [pc, #464]	@ (8001a28 <.text_7>)
 8001858:	1861      	adds	r1, r4, r1
 800185a:	8008      	strh	r0, [r1, #0]
 800185c:	2234      	movs	r2, #52	@ 0x34
 800185e:	5ca2      	ldrb	r2, [r4, r2]
 8001860:	06d2      	lsls	r2, r2, #27
 8001862:	0ed2      	lsrs	r2, r2, #27
 8001864:	708a      	strb	r2, [r1, #2]
 8001866:	2501      	movs	r5, #1
 8001868:	0403      	lsls	r3, r0, #16
 800186a:	0e9b      	lsrs	r3, r3, #26
 800186c:	2201      	movs	r2, #1
 800186e:	401a      	ands	r2, r3
 8001870:	0403      	lsls	r3, r0, #16
 8001872:	0edb      	lsrs	r3, r3, #27
 8001874:	071b      	lsls	r3, r3, #28
 8001876:	d003      	beq.n	8001880 <PE_Check_ExtendedMessage+0x38>
 8001878:	0013      	movs	r3, r2
 800187a:	d001      	beq.n	8001880 <PE_Check_ExtendedMessage+0x38>
 800187c:	2034      	movs	r0, #52	@ 0x34
 800187e:	e09e      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 8001880:	05c6      	lsls	r6, r0, #23
 8001882:	0df6      	lsrs	r6, r6, #23
 8001884:	2300      	movs	r3, #0
 8001886:	0407      	lsls	r7, r0, #16
 8001888:	0fff      	lsrs	r7, r7, #31
 800188a:	d10d      	bne.n	80018a8 <PE_Check_ExtendedMessage+0x60>
 800188c:	4867      	ldr	r0, [pc, #412]	@ (8001a2c <.text_8>)
 800188e:	5226      	strh	r6, [r4, r0]
 8001890:	4866      	ldr	r0, [pc, #408]	@ (8001a2c <.text_8>)
 8001892:	5a20      	ldrh	r0, [r4, r0]
 8001894:	4283      	cmp	r3, r0
 8001896:	d21b      	bcs.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 8001898:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800189a:	1d00      	adds	r0, r0, #4
 800189c:	5cc0      	ldrb	r0, [r0, r3]
 800189e:	4a64      	ldr	r2, [pc, #400]	@ (8001a30 <.text_9>)
 80018a0:	18a2      	adds	r2, r4, r2
 80018a2:	54d0      	strb	r0, [r2, r3]
 80018a4:	1c5b      	adds	r3, r3, #1
 80018a6:	e7f3      	b.n	8001890 <PE_Check_ExtendedMessage+0x48>
 80018a8:	27f8      	movs	r7, #248	@ 0xf8
 80018aa:	01ff      	lsls	r7, r7, #7
 80018ac:	4007      	ands	r7, r0
 80018ae:	d106      	bne.n	80018be <PE_Check_ExtendedMessage+0x76>
 80018b0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 80018b2:	0440      	lsls	r0, r0, #17
 80018b4:	0f40      	lsrs	r0, r0, #29
 80018b6:	2807      	cmp	r0, #7
 80018b8:	d30a      	bcc.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018ba:	2e1a      	cmp	r6, #26
 80018bc:	d908      	bls.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018be:	2a00      	cmp	r2, #0
 80018c0:	d106      	bne.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018c2:	485a      	ldr	r0, [pc, #360]	@ (8001a2c <.text_8>)
 80018c4:	5a20      	ldrh	r0, [r4, r0]
 80018c6:	42b0      	cmp	r0, r6
 80018c8:	d202      	bcs.n	80018d0 <PE_Check_ExtendedMessage+0x88>
 80018ca:	83e3      	strh	r3, [r4, #30]
 80018cc:	2037      	movs	r0, #55	@ 0x37
 80018ce:	e076      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 80018d0:	7889      	ldrb	r1, [r1, #2]
 80018d2:	2603      	movs	r6, #3
 80018d4:	7f22      	ldrb	r2, [r4, #28]
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d039      	beq.n	800194e <PE_Check_ExtendedMessage+0x106>
 80018da:	2901      	cmp	r1, #1
 80018dc:	d008      	beq.n	80018f0 <PE_Check_ExtendedMessage+0xa8>
 80018de:	2902      	cmp	r1, #2
 80018e0:	d01c      	beq.n	800191c <PE_Check_ExtendedMessage+0xd4>
 80018e2:	2905      	cmp	r1, #5
 80018e4:	d02a      	beq.n	800193c <PE_Check_ExtendedMessage+0xf4>
 80018e6:	2907      	cmp	r1, #7
 80018e8:	d023      	beq.n	8001932 <PE_Check_ExtendedMessage+0xea>
 80018ea:	290f      	cmp	r1, #15
 80018ec:	d00b      	beq.n	8001906 <PE_Check_ExtendedMessage+0xbe>
 80018ee:	e094      	b.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80018f0:	2319      	movs	r3, #25
 80018f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80018f4:	1d02      	adds	r2, r0, #4
 80018f6:	2108      	movs	r1, #8
 80018f8:	7c20      	ldrb	r0, [r4, #16]
 80018fa:	68a7      	ldr	r7, [r4, #8]
 80018fc:	69bf      	ldr	r7, [r7, #24]
 80018fe:	47b8      	blx	r7
 8001900:	7466      	strb	r6, [r4, #17]
 8001902:	2147      	movs	r1, #71	@ 0x47
 8001904:	e014      	b.n	8001930 <PE_Check_ExtendedMessage+0xe8>
 8001906:	2318      	movs	r3, #24
 8001908:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800190a:	1d02      	adds	r2, r0, #4
 800190c:	2113      	movs	r1, #19
 800190e:	7c20      	ldrb	r0, [r4, #16]
 8001910:	68a7      	ldr	r7, [r4, #8]
 8001912:	69bf      	ldr	r7, [r7, #24]
 8001914:	47b8      	blx	r7
 8001916:	7466      	strb	r6, [r4, #17]
 8001918:	2162      	movs	r1, #98	@ 0x62
 800191a:	e009      	b.n	8001930 <PE_Check_ExtendedMessage+0xe8>
 800191c:	2307      	movs	r3, #7
 800191e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001920:	1d02      	adds	r2, r0, #4
 8001922:	2109      	movs	r1, #9
 8001924:	7c20      	ldrb	r0, [r4, #16]
 8001926:	68a7      	ldr	r7, [r4, #8]
 8001928:	69bf      	ldr	r7, [r7, #24]
 800192a:	47b8      	blx	r7
 800192c:	7466      	strb	r6, [r4, #17]
 800192e:	214e      	movs	r1, #78	@ 0x4e
 8001930:	e2c7      	b.n	8001ec2 <.text_21>
 8001932:	231a      	movs	r3, #26
 8001934:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001936:	1d02      	adds	r2, r0, #4
 8001938:	210d      	movs	r1, #13
 800193a:	e003      	b.n	8001944 <PE_Check_ExtendedMessage+0xfc>
 800193c:	2309      	movs	r3, #9
 800193e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001940:	1d02      	adds	r2, r0, #4
 8001942:	2111      	movs	r1, #17
 8001944:	7c20      	ldrb	r0, [r4, #16]
 8001946:	68a7      	ldr	r7, [r4, #8]
 8001948:	69bf      	ldr	r7, [r7, #24]
 800194a:	47b8      	blx	r7
 800194c:	e063      	b.n	8001a16 <PE_Check_ExtendedMessage+0x1ce>
 800194e:	1ec8      	subs	r0, r1, #3
 8001950:	2808      	cmp	r0, #8
 8001952:	d862      	bhi.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 8001954:	a201      	add	r2, pc, #4	@ (adr r2, 800195c <PE_Check_ExtendedMessage+0x114>)
 8001956:	5c12      	ldrb	r2, [r2, r0]
 8001958:	4497      	add	pc, r2
 800195a:	bf00      	nop
 800195c:	46be280a 	.word	0x46be280a
 8001960:	669884be 	.word	0x669884be
 8001964:	006e      	.short	0x006e
 8001966:	6820      	ldr	r0, [r4, #0]
 8001968:	8900      	ldrh	r0, [r0, #8]
 800196a:	0b00      	lsrs	r0, r0, #12
 800196c:	4228      	tst	r0, r5
 800196e:	d054      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 8001970:	2301      	movs	r3, #1
 8001972:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001974:	1d02      	adds	r2, r0, #4
 8001976:	2110      	movs	r1, #16
 8001978:	7c20      	ldrb	r0, [r4, #16]
 800197a:	68a5      	ldr	r5, [r4, #8]
 800197c:	69ad      	ldr	r5, [r5, #24]
 800197e:	47a8      	blx	r5
 8001980:	203a      	movs	r0, #58	@ 0x3a
 8001982:	e01c      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	8900      	ldrh	r0, [r0, #8]
 8001988:	0b00      	lsrs	r0, r0, #12
 800198a:	4228      	tst	r0, r5
 800198c:	d045      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 800198e:	2301      	movs	r3, #1
 8001990:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001992:	1d02      	adds	r2, r0, #4
 8001994:	210e      	movs	r1, #14
 8001996:	7c20      	ldrb	r0, [r4, #16]
 8001998:	68a5      	ldr	r5, [r4, #8]
 800199a:	69ad      	ldr	r5, [r5, #24]
 800199c:	47a8      	blx	r5
 800199e:	203b      	movs	r0, #59	@ 0x3b
 80019a0:	e00d      	b.n	80019be <PE_Check_ExtendedMessage+0x176>
 80019a2:	6820      	ldr	r0, [r4, #0]
 80019a4:	8900      	ldrh	r0, [r0, #8]
 80019a6:	0980      	lsrs	r0, r0, #6
 80019a8:	4228      	tst	r0, r5
 80019aa:	d036      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019ac:	2302      	movs	r3, #2
 80019ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80019b0:	1d02      	adds	r2, r0, #4
 80019b2:	210c      	movs	r1, #12
 80019b4:	7c20      	ldrb	r0, [r4, #16]
 80019b6:	68a5      	ldr	r5, [r4, #8]
 80019b8:	69ad      	ldr	r5, [r5, #24]
 80019ba:	47a8      	blx	r5
 80019bc:	203c      	movs	r0, #60	@ 0x3c
 80019be:	7460      	strb	r0, [r4, #17]
 80019c0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80019c2:	6820      	ldr	r0, [r4, #0]
 80019c4:	8900      	ldrh	r0, [r0, #8]
 80019c6:	0a80      	lsrs	r0, r0, #10
 80019c8:	e00d      	b.n	80019e6 <PE_Check_ExtendedMessage+0x19e>
 80019ca:	68a0      	ldr	r0, [r4, #8]
 80019cc:	6905      	ldr	r5, [r0, #16]
 80019ce:	2d00      	cmp	r5, #0
 80019d0:	d024      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 80019d2:	4816      	ldr	r0, [pc, #88]	@ (8001a2c <.text_8>)
 80019d4:	5a23      	ldrh	r3, [r4, r0]
 80019d6:	4816      	ldr	r0, [pc, #88]	@ (8001a30 <.text_9>)
 80019d8:	1822      	adds	r2, r4, r0
 80019da:	7c20      	ldrb	r0, [r4, #16]
 80019dc:	47a8      	blx	r5
 80019de:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80019e0:	6820      	ldr	r0, [r4, #0]
 80019e2:	8900      	ldrh	r0, [r0, #8]
 80019e4:	0a40      	lsrs	r0, r0, #9
 80019e6:	4228      	tst	r0, r5
 80019e8:	d017      	beq.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019ea:	68a0      	ldr	r0, [r4, #8]
 80019ec:	6900      	ldr	r0, [r0, #16]
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d109      	bne.n	8001a06 <PE_Check_ExtendedMessage+0x1be>
 80019f2:	e012      	b.n	8001a1a <PE_Check_ExtendedMessage+0x1d2>
 80019f4:	6820      	ldr	r0, [r4, #0]
 80019f6:	8900      	ldrh	r0, [r0, #8]
 80019f8:	0a40      	lsrs	r0, r0, #9
 80019fa:	4228      	tst	r0, r5
 80019fc:	d00e      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 80019fe:	68a0      	ldr	r0, [r4, #8]
 8001a00:	6900      	ldr	r0, [r0, #16]
 8001a02:	2800      	cmp	r0, #0
 8001a04:	d00a      	beq.n	8001a1c <PE_Check_ExtendedMessage+0x1d4>
 8001a06:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <.text_8>)
 8001a08:	5a23      	ldrh	r3, [r4, r0]
 8001a0a:	4809      	ldr	r0, [pc, #36]	@ (8001a30 <.text_9>)
 8001a0c:	1822      	adds	r2, r4, r0
 8001a0e:	7c20      	ldrb	r0, [r4, #16]
 8001a10:	68a5      	ldr	r5, [r4, #8]
 8001a12:	692d      	ldr	r5, [r5, #16]
 8001a14:	47a8      	blx	r5
 8001a16:	7466      	strb	r6, [r4, #17]
 8001a18:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001a1a:	7465      	strb	r5, [r4, #17]
 8001a1c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08001a20 <.text_5>:
 8001a20:	00000263 	.word	0x00000263

08001a24 <.text_6>:
 8001a24:	00000265 	.word	0x00000265

08001a28 <.text_7>:
 8001a28:	0000025a 	.word	0x0000025a

08001a2c <.text_8>:
 8001a2c:	0000048e 	.word	0x0000048e

08001a30 <.text_9>:
 8001a30:	00000281 	.word	0x00000281

08001a34 <PE_Send_ExtendedMessage>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8001a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001a3c:	0004      	movs	r4, r0
 8001a3e:	000d      	movs	r5, r1
 8001a40:	4668      	mov	r0, sp
 8001a42:	7202      	strb	r2, [r0, #8]
 8001a44:	9303      	str	r3, [sp, #12]
 8001a46:	6860      	ldr	r0, [r4, #4]
 8001a48:	6800      	ldr	r0, [r0, #0]
 8001a4a:	04c1      	lsls	r1, r0, #19
 8001a4c:	0fc9      	lsrs	r1, r1, #31
 8001a4e:	d019      	beq.n	8001a84 <PE_Send_ExtendedMessage+0x50>
 8001a50:	9601      	str	r6, [sp, #4]
 8001a52:	9700      	str	r7, [sp, #0]
 8001a54:	9b03      	ldr	r3, [sp, #12]
 8001a56:	4668      	mov	r0, sp
 8001a58:	7a00      	ldrb	r0, [r0, #8]
 8001a5a:	2280      	movs	r2, #128	@ 0x80
 8001a5c:	4302      	orrs	r2, r0
 8001a5e:	0029      	movs	r1, r5
 8001a60:	7c20      	ldrb	r0, [r4, #16]
 8001a62:	f003 ffd7 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001a66:	2803      	cmp	r0, #3
 8001a68:	d0ed      	beq.n	8001a46 <PE_Send_ExtendedMessage+0x12>
 8001a6a:	0029      	movs	r1, r5
 8001a6c:	2810      	cmp	r0, #16
 8001a6e:	d007      	beq.n	8001a80 <PE_Send_ExtendedMessage+0x4c>
 8001a70:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	9200      	str	r2, [sp, #0]
 8001a76:	0003      	movs	r3, r0
 8001a78:	2200      	movs	r2, #0
 8001a7a:	0020      	movs	r0, r4
 8001a7c:	f000 faca 	bl	8002014 <PE_CheckSendMessageStatus>
 8001a80:	b005      	add	sp, #20
 8001a82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a84:	2011      	movs	r0, #17
 8001a86:	7460      	strb	r0, [r4, #17]
 8001a88:	2010      	movs	r0, #16
 8001a8a:	e7f9      	b.n	8001a80 <PE_Send_ExtendedMessage+0x4c>

08001a8c <PE_SubStateMachine_ExtendedMessages>:
 8001a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	0004      	movs	r4, r0
 8001a92:	2702      	movs	r7, #2
 8001a94:	4889      	ldr	r0, [pc, #548]	@ (8001cbc <.text_12>)
 8001a96:	1820      	adds	r0, r4, r0
 8001a98:	9000      	str	r0, [sp, #0]
 8001a9a:	2039      	movs	r0, #57	@ 0x39
 8001a9c:	2180      	movs	r1, #128	@ 0x80
 8001a9e:	466a      	mov	r2, sp
 8001aa0:	7211      	strb	r1, [r2, #8]
 8001aa2:	4a87      	ldr	r2, [pc, #540]	@ (8001cc0 <.text_13>)
 8001aa4:	2500      	movs	r5, #0
 8001aa6:	2603      	movs	r6, #3
 8001aa8:	7c63      	ldrb	r3, [r4, #17]
 8001aaa:	2b31      	cmp	r3, #49	@ 0x31
 8001aac:	d010      	beq.n	8001ad0 <PE_SubStateMachine_ExtendedMessages+0x44>
 8001aae:	2b33      	cmp	r3, #51	@ 0x33
 8001ab0:	d075      	beq.n	8001b9e <PE_SubStateMachine_ExtendedMessages+0x112>
 8001ab2:	2b34      	cmp	r3, #52	@ 0x34
 8001ab4:	d07c      	beq.n	8001bb0 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001ab6:	2b35      	cmp	r3, #53	@ 0x35
 8001ab8:	d100      	bne.n	8001abc <PE_SubStateMachine_ExtendedMessages+0x30>
 8001aba:	e0a8      	b.n	8001c0e <PE_SubStateMachine_ExtendedMessages+0x182>
 8001abc:	2b36      	cmp	r3, #54	@ 0x36
 8001abe:	d100      	bne.n	8001ac2 <PE_SubStateMachine_ExtendedMessages+0x36>
 8001ac0:	e0be      	b.n	8001c40 <PE_SubStateMachine_ExtendedMessages+0x1b4>
 8001ac2:	2b37      	cmp	r3, #55	@ 0x37
 8001ac4:	d100      	bne.n	8001ac8 <PE_SubStateMachine_ExtendedMessages+0x3c>
 8001ac6:	e0be      	b.n	8001c46 <PE_SubStateMachine_ExtendedMessages+0x1ba>
 8001ac8:	2b38      	cmp	r3, #56	@ 0x38
 8001aca:	d100      	bne.n	8001ace <PE_SubStateMachine_ExtendedMessages+0x42>
 8001acc:	e0ef      	b.n	8001cae <PE_SubStateMachine_ExtendedMessages+0x222>
 8001ace:	e0f2      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001ad0:	487c      	ldr	r0, [pc, #496]	@ (8001cc4 <.text_14>)
 8001ad2:	1820      	adds	r0, r4, r0
 8001ad4:	9004      	str	r0, [sp, #16]
 8001ad6:	4669      	mov	r1, sp
 8001ad8:	730d      	strb	r5, [r1, #12]
 8001ada:	497b      	ldr	r1, [pc, #492]	@ (8001cc8 <.text_15>)
 8001adc:	5265      	strh	r5, [r4, r1]
 8001ade:	7c20      	ldrb	r0, [r4, #16]
 8001ae0:	f7ff fa64 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001ae4:	2801      	cmp	r0, #1
 8001ae6:	d107      	bne.n	8001af8 <PE_SubStateMachine_ExtendedMessages+0x6c>
 8001ae8:	4878      	ldr	r0, [pc, #480]	@ (8001ccc <.text_16>)
 8001aea:	1820      	adds	r0, r4, r0
 8001aec:	7005      	strb	r5, [r0, #0]
 8001aee:	7045      	strb	r5, [r0, #1]
 8001af0:	4877      	ldr	r0, [pc, #476]	@ (8001cd0 <.text_17>)
 8001af2:	1820      	adds	r0, r4, r0
 8001af4:	9004      	str	r0, [sp, #16]
 8001af6:	e028      	b.n	8001b4a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001af8:	4976      	ldr	r1, [pc, #472]	@ (8001cd4 <.text_18>)
 8001afa:	1861      	adds	r1, r4, r1
 8001afc:	72cd      	strb	r5, [r1, #11]
 8001afe:	4975      	ldr	r1, [pc, #468]	@ (8001cd4 <.text_18>)
 8001b00:	1861      	adds	r1, r4, r1
 8001b02:	730d      	strb	r5, [r1, #12]
 8001b04:	7c20      	ldrb	r0, [r4, #16]
 8001b06:	f7ff fa51 	bl	8000fac <PE_Get_UnchunkedSupport>
 8001b0a:	2800      	cmp	r0, #0
 8001b0c:	d106      	bne.n	8001b1c <PE_SubStateMachine_ExtendedMessages+0x90>
 8001b0e:	4871      	ldr	r0, [pc, #452]	@ (8001cd4 <.text_18>)
 8001b10:	1820      	adds	r0, r4, r0
 8001b12:	7b01      	ldrb	r1, [r0, #12]
 8001b14:	466a      	mov	r2, sp
 8001b16:	7a12      	ldrb	r2, [r2, #8]
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	7302      	strb	r2, [r0, #12]
 8001b1c:	486a      	ldr	r0, [pc, #424]	@ (8001cc8 <.text_15>)
 8001b1e:	1820      	adds	r0, r4, r0
 8001b20:	8841      	ldrh	r1, [r0, #2]
 8001b22:	291b      	cmp	r1, #27
 8001b24:	d30e      	bcc.n	8001b44 <PE_SubStateMachine_ExtendedMessages+0xb8>
 8001b26:	486a      	ldr	r0, [pc, #424]	@ (8001cd0 <.text_17>)
 8001b28:	1820      	adds	r0, r4, r0
 8001b2a:	5d40      	ldrb	r0, [r0, r5]
 8001b2c:	9900      	ldr	r1, [sp, #0]
 8001b2e:	5548      	strb	r0, [r1, r5]
 8001b30:	1c6d      	adds	r5, r5, #1
 8001b32:	2d1a      	cmp	r5, #26
 8001b34:	d209      	bcs.n	8001b4a <PE_SubStateMachine_ExtendedMessages+0xbe>
 8001b36:	e7f6      	b.n	8001b26 <PE_SubStateMachine_ExtendedMessages+0x9a>
 8001b38:	4965      	ldr	r1, [pc, #404]	@ (8001cd0 <.text_17>)
 8001b3a:	1861      	adds	r1, r4, r1
 8001b3c:	5d49      	ldrb	r1, [r1, r5]
 8001b3e:	9a00      	ldr	r2, [sp, #0]
 8001b40:	5551      	strb	r1, [r2, r5]
 8001b42:	1c6d      	adds	r5, r5, #1
 8001b44:	8841      	ldrh	r1, [r0, #2]
 8001b46:	428d      	cmp	r5, r1
 8001b48:	d3f6      	bcc.n	8001b38 <PE_SubStateMachine_ExtendedMessages+0xac>
 8001b4a:	2001      	movs	r0, #1
 8001b4c:	6961      	ldr	r1, [r4, #20]
 8001b4e:	0949      	lsrs	r1, r1, #5
 8001b50:	4001      	ands	r1, r0
 8001b52:	d00a      	beq.n	8001b6a <PE_SubStateMachine_ExtendedMessages+0xde>
 8001b54:	6861      	ldr	r1, [r4, #4]
 8001b56:	6809      	ldr	r1, [r1, #0]
 8001b58:	0889      	lsrs	r1, r1, #2
 8001b5a:	4001      	ands	r1, r0
 8001b5c:	d002      	beq.n	8001b64 <PE_SubStateMachine_ExtendedMessages+0xd8>
 8001b5e:	4669      	mov	r1, sp
 8001b60:	7308      	strb	r0, [r1, #12]
 8001b62:	e001      	b.n	8001b68 <PE_SubStateMachine_ExtendedMessages+0xdc>
 8001b64:	4669      	mov	r1, sp
 8001b66:	730f      	strb	r7, [r1, #12]
 8001b68:	2633      	movs	r6, #51	@ 0x33
 8001b6a:	4668      	mov	r0, sp
 8001b6c:	7b00      	ldrb	r0, [r0, #12]
 8001b6e:	9002      	str	r0, [sp, #8]
 8001b70:	9601      	str	r6, [sp, #4]
 8001b72:	4855      	ldr	r0, [pc, #340]	@ (8001cc8 <.text_15>)
 8001b74:	1820      	adds	r0, r4, r0
 8001b76:	8840      	ldrh	r0, [r0, #2]
 8001b78:	1d00      	adds	r0, r0, #4
 8001b7a:	b280      	uxth	r0, r0
 8001b7c:	9000      	str	r0, [sp, #0]
 8001b7e:	9b04      	ldr	r3, [sp, #16]
 8001b80:	4854      	ldr	r0, [pc, #336]	@ (8001cd4 <.text_18>)
 8001b82:	1820      	adds	r0, r4, r0
 8001b84:	78c2      	ldrb	r2, [r0, #3]
 8001b86:	2033      	movs	r0, #51	@ 0x33
 8001b88:	5c21      	ldrb	r1, [r4, r0]
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	f7ff ff52 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001b90:	2800      	cmp	r0, #0
 8001b92:	d103      	bne.n	8001b9c <PE_SubStateMachine_ExtendedMessages+0x110>
 8001b94:	484f      	ldr	r0, [pc, #316]	@ (8001cd4 <.text_18>)
 8001b96:	1820      	adds	r0, r4, r0
 8001b98:	7940      	ldrb	r0, [r0, #5]
 8001b9a:	7720      	strb	r0, [r4, #28]
 8001b9c:	e08b      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001b9e:	83e2      	strh	r2, [r4, #30]
 8001ba0:	271b      	movs	r7, #27
 8001ba2:	494c      	ldr	r1, [pc, #304]	@ (8001cd4 <.text_18>)
 8001ba4:	1861      	adds	r1, r4, r1
 8001ba6:	78c9      	ldrb	r1, [r1, #3]
 8001ba8:	2904      	cmp	r1, #4
 8001baa:	d151      	bne.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001bac:	2074      	movs	r0, #116	@ 0x74
 8001bae:	e04f      	b.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001bb0:	4848      	ldr	r0, [pc, #288]	@ (8001cd4 <.text_18>)
 8001bb2:	5a20      	ldrh	r0, [r4, r0]
 8001bb4:	0440      	lsls	r0, r0, #17
 8001bb6:	0f02      	lsrs	r2, r0, #28
 8001bb8:	211a      	movs	r1, #26
 8001bba:	4351      	muls	r1, r2
 8001bbc:	4842      	ldr	r0, [pc, #264]	@ (8001cc8 <.text_15>)
 8001bbe:	1820      	adds	r0, r4, r0
 8001bc0:	8843      	ldrh	r3, [r0, #2]
 8001bc2:	4299      	cmp	r1, r3
 8001bc4:	da01      	bge.n	8001bca <PE_SubStateMachine_ExtendedMessages+0x13e>
 8001bc6:	2a0a      	cmp	r2, #10
 8001bc8:	d301      	bcc.n	8001bce <PE_SubStateMachine_ExtendedMessages+0x142>
 8001bca:	7466      	strb	r6, [r4, #17]
 8001bcc:	e01d      	b.n	8001c0a <PE_SubStateMachine_ExtendedMessages+0x17e>
 8001bce:	1a5a      	subs	r2, r3, r1
 8001bd0:	2a1a      	cmp	r2, #26
 8001bd2:	d202      	bcs.n	8001bda <PE_SubStateMachine_ExtendedMessages+0x14e>
 8001bd4:	1a5b      	subs	r3, r3, r1
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	e000      	b.n	8001bdc <PE_SubStateMachine_ExtendedMessages+0x150>
 8001bda:	231a      	movs	r3, #26
 8001bdc:	2200      	movs	r2, #0
 8001bde:	e006      	b.n	8001bee <PE_SubStateMachine_ExtendedMessages+0x162>
 8001be0:	4e3b      	ldr	r6, [pc, #236]	@ (8001cd0 <.text_17>)
 8001be2:	19a6      	adds	r6, r4, r6
 8001be4:	188f      	adds	r7, r1, r2
 8001be6:	5df6      	ldrb	r6, [r6, r7]
 8001be8:	9f00      	ldr	r7, [sp, #0]
 8001bea:	54be      	strb	r6, [r7, r2]
 8001bec:	1c52      	adds	r2, r2, #1
 8001bee:	429a      	cmp	r2, r3
 8001bf0:	d3f6      	bcc.n	8001be0 <PE_SubStateMachine_ExtendedMessages+0x154>
 8001bf2:	4934      	ldr	r1, [pc, #208]	@ (8001cc4 <.text_14>)
 8001bf4:	1863      	adds	r3, r4, r1
 8001bf6:	8842      	ldrh	r2, [r0, #2]
 8001bf8:	4836      	ldr	r0, [pc, #216]	@ (8001cd4 <.text_18>)
 8001bfa:	5a20      	ldrh	r0, [r4, r0]
 8001bfc:	0440      	lsls	r0, r0, #17
 8001bfe:	0f01      	lsrs	r1, r0, #28
 8001c00:	7c20      	ldrb	r0, [r4, #16]
 8001c02:	f004 fba8 	bl	8006356 <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001c06:	2035      	movs	r0, #53	@ 0x35
 8001c08:	7460      	strb	r0, [r4, #17]
 8001c0a:	2700      	movs	r7, #0
 8001c0c:	e053      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c0e:	6960      	ldr	r0, [r4, #20]
 8001c10:	0681      	lsls	r1, r0, #26
 8001c12:	0fc9      	lsrs	r1, r1, #31
 8001c14:	d001      	beq.n	8001c1a <PE_SubStateMachine_ExtendedMessages+0x18e>
 8001c16:	2036      	movs	r0, #54	@ 0x36
 8001c18:	e000      	b.n	8001c1c <PE_SubStateMachine_ExtendedMessages+0x190>
 8001c1a:	2003      	movs	r0, #3
 8001c1c:	492a      	ldr	r1, [pc, #168]	@ (8001cc8 <.text_15>)
 8001c1e:	1866      	adds	r6, r4, r1
 8001c20:	9502      	str	r5, [sp, #8]
 8001c22:	9001      	str	r0, [sp, #4]
 8001c24:	8870      	ldrh	r0, [r6, #2]
 8001c26:	9000      	str	r0, [sp, #0]
 8001c28:	4826      	ldr	r0, [pc, #152]	@ (8001cc4 <.text_14>)
 8001c2a:	1823      	adds	r3, r4, r0
 8001c2c:	3809      	subs	r0, #9
 8001c2e:	1820      	adds	r0, r4, r0
 8001c30:	78c2      	ldrb	r2, [r0, #3]
 8001c32:	2030      	movs	r0, #48	@ 0x30
 8001c34:	5c21      	ldrb	r1, [r4, r0]
 8001c36:	0020      	movs	r0, r4
 8001c38:	f7ff fefc 	bl	8001a34 <PE_Send_ExtendedMessage>
 8001c3c:	8035      	strh	r5, [r6, #0]
 8001c3e:	e03a      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c40:	83e2      	strh	r2, [r4, #30]
 8001c42:	271b      	movs	r7, #27
 8001c44:	e004      	b.n	8001c50 <PE_SubStateMachine_ExtendedMessages+0x1c4>
 8001c46:	8be0      	ldrh	r0, [r4, #30]
 8001c48:	020b      	lsls	r3, r1, #8
 8001c4a:	4298      	cmp	r0, r3
 8001c4c:	d102      	bne.n	8001c54 <PE_SubStateMachine_ExtendedMessages+0x1c8>
 8001c4e:	200f      	movs	r0, #15
 8001c50:	7460      	strb	r0, [r4, #17]
 8001c52:	e030      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001c54:	83e2      	strh	r2, [r4, #30]
 8001c56:	271b      	movs	r7, #27
 8001c58:	481a      	ldr	r0, [pc, #104]	@ (8001cc4 <.text_14>)
 8001c5a:	1825      	adds	r5, r4, r0
 8001c5c:	0029      	movs	r1, r5
 8001c5e:	7c20      	ldrb	r0, [r4, #16]
 8001c60:	f004 fba1 	bl	80063a6 <USBPD_PRL_PrepareChunkRequest>
 8001c64:	6860      	ldr	r0, [r4, #4]
 8001c66:	6800      	ldr	r0, [r0, #0]
 8001c68:	04c1      	lsls	r1, r0, #19
 8001c6a:	0fc9      	lsrs	r1, r1, #31
 8001c6c:	d012      	beq.n	8001c94 <PE_SubStateMachine_ExtendedMessages+0x208>
 8001c6e:	2000      	movs	r0, #0
 8001c70:	9001      	str	r0, [sp, #4]
 8001c72:	2006      	movs	r0, #6
 8001c74:	9000      	str	r0, [sp, #0]
 8001c76:	002b      	movs	r3, r5
 8001c78:	4816      	ldr	r0, [pc, #88]	@ (8001cd4 <.text_18>)
 8001c7a:	1820      	adds	r0, r4, r0
 8001c7c:	7880      	ldrb	r0, [r0, #2]
 8001c7e:	4669      	mov	r1, sp
 8001c80:	7a0a      	ldrb	r2, [r1, #8]
 8001c82:	4302      	orrs	r2, r0
 8001c84:	2030      	movs	r0, #48	@ 0x30
 8001c86:	5c21      	ldrb	r1, [r4, r0]
 8001c88:	7c20      	ldrb	r0, [r4, #16]
 8001c8a:	f003 fec3 	bl	8005a14 <USBPD_PRL_SendMessage>
 8001c8e:	2803      	cmp	r0, #3
 8001c90:	d0e8      	beq.n	8001c64 <PE_SubStateMachine_ExtendedMessages+0x1d8>
 8001c92:	e002      	b.n	8001c9a <PE_SubStateMachine_ExtendedMessages+0x20e>
 8001c94:	2011      	movs	r0, #17
 8001c96:	7460      	strb	r0, [r4, #17]
 8001c98:	2010      	movs	r0, #16
 8001c9a:	2139      	movs	r1, #57	@ 0x39
 8001c9c:	9100      	str	r1, [sp, #0]
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	2030      	movs	r0, #48	@ 0x30
 8001ca4:	5c21      	ldrb	r1, [r4, r0]
 8001ca6:	0020      	movs	r0, r4
 8001ca8:	f000 f9b4 	bl	8002014 <PE_CheckSendMessageStatus>
 8001cac:	e003      	b.n	8001cb6 <PE_SubStateMachine_ExtendedMessages+0x22a>
 8001cae:	7466      	strb	r6, [r4, #17]
 8001cb0:	2700      	movs	r7, #0
 8001cb2:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <.text_15>)
 8001cb4:	5225      	strh	r5, [r4, r0]
 8001cb6:	0038      	movs	r0, r7
 8001cb8:	b005      	add	sp, #20
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cbc <.text_12>:
 8001cbc:	00000267 	.word	0x00000267

08001cc0 <.text_13>:
 8001cc0:	0000801b 	.word	0x0000801b

08001cc4 <.text_14>:
 8001cc4:	00000263 	.word	0x00000263

08001cc8 <.text_15>:
 8001cc8:	0000048e 	.word	0x0000048e

08001ccc <.text_16>:
 8001ccc:	00000387 	.word	0x00000387

08001cd0 <.text_17>:
 8001cd0:	00000385 	.word	0x00000385

08001cd4 <.text_18>:
 8001cd4:	0000025a 	.word	0x0000025a

08001cd8 <PE_ManageRXEvent>:
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	2130      	movs	r1, #48	@ 0x30
 8001cdc:	5c41      	ldrb	r1, [r0, r1]
 8001cde:	2231      	movs	r2, #49	@ 0x31
 8001ce0:	5481      	strb	r1, [r0, r2]
 8001ce2:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 8001ce4:	0bca      	lsrs	r2, r1, #15
 8001ce6:	d002      	beq.n	8001cee <PE_ManageRXEvent+0x16>
 8001ce8:	f7ff fdae 	bl	8001848 <PE_Check_ExtendedMessage>
 8001cec:	bd01      	pop	{r0, pc}
 8001cee:	22f0      	movs	r2, #240	@ 0xf0
 8001cf0:	0212      	lsls	r2, r2, #8
 8001cf2:	400a      	ands	r2, r1
 8001cf4:	d102      	bne.n	8001cfc <PE_ManageRXEvent+0x24>
 8001cf6:	f000 f805 	bl	8001d04 <PE_Check_ControlMessage>
 8001cfa:	bd01      	pop	{r0, pc}
 8001cfc:	f000 f8e5 	bl	8001eca <PE_Check_DataMessage>
 8001d00:	bd01      	pop	{r0, pc}
	...

08001d04 <PE_Check_ControlMessage>:
 8001d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d06:	0004      	movs	r4, r0
 8001d08:	272a      	movs	r7, #42	@ 0x2a
 8001d0a:	2603      	movs	r6, #3
 8001d0c:	2501      	movs	r5, #1
 8001d0e:	200b      	movs	r0, #11
 8001d10:	2134      	movs	r1, #52	@ 0x34
 8001d12:	5c61      	ldrb	r1, [r4, r1]
 8001d14:	06c9      	lsls	r1, r1, #27
 8001d16:	0ec9      	lsrs	r1, r1, #27
 8001d18:	1e49      	subs	r1, r1, #1
 8001d1a:	2917      	cmp	r1, #23
 8001d1c:	d900      	bls.n	8001d20 <PE_Check_ControlMessage+0x1c>
 8001d1e:	e0c7      	b.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001d20:	a201      	add	r2, pc, #4	@ (adr r2, 8001d28 <PE_Check_ControlMessage+0x24>)
 8001d22:	5c52      	ldrb	r2, [r2, r1]
 8001d24:	0052      	lsls	r2, r2, #1
 8001d26:	4497      	add	pc, r2
 8001d28:	c0c00bcb 	.word	0xc0c00bcb
 8001d2c:	5b22c020 	.word	0x5b22c020
 8001d30:	c0413449 	.word	0xc0413449
 8001d34:	bec3c319 	.word	0xbec3c319
 8001d38:	9fb7936f 	.word	0x9fb7936f
 8001d3c:	bac383b0 	.word	0xbac383b0
 8001d40:	6860      	ldr	r0, [r4, #4]
 8001d42:	6800      	ldr	r0, [r0, #0]
 8001d44:	0880      	lsrs	r0, r0, #2
 8001d46:	4005      	ands	r5, r0
 8001d48:	d000      	beq.n	8001d4c <PE_Check_ControlMessage+0x48>
 8001d4a:	e0b9      	b.n	8001ec0 <PE_Check_ControlMessage+0x1bc>
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	7720      	strb	r0, [r4, #28]
 8001d50:	212b      	movs	r1, #43	@ 0x2b
 8001d52:	7c20      	ldrb	r0, [r4, #16]
 8001d54:	f7fe fcc8 	bl	80006e8 <USBPD_PE_Notification>
 8001d58:	2098      	movs	r0, #152	@ 0x98
 8001d5a:	e0a7      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d5c:	7726      	strb	r6, [r4, #28]
 8001d5e:	2132      	movs	r1, #50	@ 0x32
 8001d60:	7c20      	ldrb	r0, [r4, #16]
 8001d62:	f7fe fcc1 	bl	80006e8 <USBPD_PE_Notification>
 8001d66:	2010      	movs	r0, #16
 8001d68:	e0a0      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d6a:	2133      	movs	r1, #51	@ 0x33
 8001d6c:	e09c      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001d6e:	2006      	movs	r0, #6
 8001d70:	7720      	strb	r0, [r4, #28]
 8001d72:	6860      	ldr	r0, [r4, #4]
 8001d74:	6800      	ldr	r0, [r0, #0]
 8001d76:	0881      	lsrs	r1, r0, #2
 8001d78:	4029      	ands	r1, r5
 8001d7a:	d104      	bne.n	8001d86 <PE_Check_ControlMessage+0x82>
 8001d7c:	6821      	ldr	r1, [r4, #0]
 8001d7e:	6849      	ldr	r1, [r1, #4]
 8001d80:	08c9      	lsrs	r1, r1, #3
 8001d82:	4029      	ands	r1, r5
 8001d84:	d039      	beq.n	8001dfa <PE_Check_ControlMessage+0xf6>
 8001d86:	210c      	movs	r1, #12
 8001d88:	7c20      	ldrb	r0, [r4, #16]
 8001d8a:	f7fe fcad 	bl	80006e8 <USBPD_PE_Notification>
 8001d8e:	204c      	movs	r0, #76	@ 0x4c
 8001d90:	e08c      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001d92:	6820      	ldr	r0, [r4, #0]
 8001d94:	6840      	ldr	r0, [r0, #4]
 8001d96:	08c0      	lsrs	r0, r0, #3
 8001d98:	4028      	ands	r0, r5
 8001d9a:	d00a      	beq.n	8001db2 <PE_Check_ControlMessage+0xae>
 8001d9c:	2008      	movs	r0, #8
 8001d9e:	7720      	strb	r0, [r4, #28]
 8001da0:	213c      	movs	r1, #60	@ 0x3c
 8001da2:	7c20      	ldrb	r0, [r4, #16]
 8001da4:	f7fe fca0 	bl	80006e8 <USBPD_PE_Notification>
 8001da8:	2022      	movs	r0, #34	@ 0x22
 8001daa:	e07f      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dac:	68a0      	ldr	r0, [r4, #8]
 8001dae:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001db0:	2800      	cmp	r0, #0
 8001db2:	d07d      	beq.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001db4:	2011      	movs	r0, #17
 8001db6:	7720      	strb	r0, [r4, #28]
 8001db8:	209d      	movs	r0, #157	@ 0x9d
 8001dba:	e077      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dbc:	2123      	movs	r1, #35	@ 0x23
 8001dbe:	7c20      	ldrb	r0, [r4, #16]
 8001dc0:	f7fe fc92 	bl	80006e8 <USBPD_PE_Notification>
 8001dc4:	6960      	ldr	r0, [r4, #20]
 8001dc6:	05c0      	lsls	r0, r0, #23
 8001dc8:	0f40      	lsrs	r0, r0, #29
 8001dca:	d001      	beq.n	8001dd0 <PE_Check_ControlMessage+0xcc>
 8001dcc:	200f      	movs	r0, #15
 8001dce:	e06d      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001dd0:	68a0      	ldr	r0, [r4, #8]
 8001dd2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 8001dd4:	2800      	cmp	r0, #0
 8001dd6:	d06b      	beq.n	8001eb0 <PE_Check_ControlMessage+0x1ac>
 8001dd8:	2010      	movs	r0, #16
 8001dda:	7720      	strb	r0, [r4, #28]
 8001ddc:	2093      	movs	r0, #147	@ 0x93
 8001dde:	e065      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001de0:	6860      	ldr	r0, [r4, #4]
 8001de2:	6800      	ldr	r0, [r0, #0]
 8001de4:	0541      	lsls	r1, r0, #21
 8001de6:	0f49      	lsrs	r1, r1, #29
 8001de8:	2903      	cmp	r1, #3
 8001dea:	d163      	bne.n	8001eb4 <PE_Check_ControlMessage+0x1b0>
 8001dec:	0881      	lsrs	r1, r0, #2
 8001dee:	4029      	ands	r1, r5
 8001df0:	d004      	beq.n	8001dfc <PE_Check_ControlMessage+0xf8>
 8001df2:	6821      	ldr	r1, [r4, #0]
 8001df4:	6849      	ldr	r1, [r1, #4]
 8001df6:	08c9      	lsrs	r1, r1, #3
 8001df8:	4029      	ands	r1, r5
 8001dfa:	d05b      	beq.n	8001eb4 <PE_Check_ControlMessage+0x1b0>
 8001dfc:	2007      	movs	r0, #7
 8001dfe:	7720      	strb	r0, [r4, #28]
 8001e00:	201d      	movs	r0, #29
 8001e02:	7460      	strb	r0, [r4, #17]
 8001e04:	2106      	movs	r1, #6
 8001e06:	e04f      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e08:	6820      	ldr	r0, [r4, #0]
 8001e0a:	8901      	ldrh	r1, [r0, #8]
 8001e0c:	08c9      	lsrs	r1, r1, #3
 8001e0e:	4229      	tst	r1, r5
 8001e10:	d053      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e12:	6861      	ldr	r1, [r4, #4]
 8001e14:	6809      	ldr	r1, [r1, #0]
 8001e16:	0889      	lsrs	r1, r1, #2
 8001e18:	4029      	ands	r1, r5
 8001e1a:	d103      	bne.n	8001e24 <PE_Check_ControlMessage+0x120>
 8001e1c:	6840      	ldr	r0, [r0, #4]
 8001e1e:	08c0      	lsrs	r0, r0, #3
 8001e20:	4028      	ands	r0, r5
 8001e22:	d04a      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e24:	200a      	movs	r0, #10
 8001e26:	7720      	strb	r0, [r4, #28]
 8001e28:	2063      	movs	r0, #99	@ 0x63
 8001e2a:	7460      	strb	r0, [r4, #17]
 8001e2c:	2146      	movs	r1, #70	@ 0x46
 8001e2e:	e03b      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e30:	6860      	ldr	r0, [r4, #4]
 8001e32:	6800      	ldr	r0, [r0, #0]
 8001e34:	0880      	lsrs	r0, r0, #2
 8001e36:	4028      	ands	r0, r5
 8001e38:	d004      	beq.n	8001e44 <PE_Check_ControlMessage+0x140>
 8001e3a:	6820      	ldr	r0, [r4, #0]
 8001e3c:	6840      	ldr	r0, [r0, #4]
 8001e3e:	08c0      	lsrs	r0, r0, #3
 8001e40:	4028      	ands	r0, r5
 8001e42:	d03a      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e44:	205f      	movs	r0, #95	@ 0x5f
 8001e46:	7720      	strb	r0, [r4, #28]
 8001e48:	2064      	movs	r0, #100	@ 0x64
 8001e4a:	7460      	strb	r0, [r4, #17]
 8001e4c:	2160      	movs	r1, #96	@ 0x60
 8001e4e:	e02b      	b.n	8001ea8 <PE_Check_ControlMessage+0x1a4>
 8001e50:	6821      	ldr	r1, [r4, #0]
 8001e52:	8909      	ldrh	r1, [r1, #8]
 8001e54:	0949      	lsrs	r1, r1, #5
 8001e56:	4229      	tst	r1, r5
 8001e58:	d02f      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e5a:	7720      	strb	r0, [r4, #28]
 8001e5c:	214d      	movs	r1, #77	@ 0x4d
 8001e5e:	7c20      	ldrb	r0, [r4, #16]
 8001e60:	f7fe fc42 	bl	80006e8 <USBPD_PE_Notification>
 8001e64:	2030      	movs	r0, #48	@ 0x30
 8001e66:	e021      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e68:	6821      	ldr	r1, [r4, #0]
 8001e6a:	8909      	ldrh	r1, [r1, #8]
 8001e6c:	0889      	lsrs	r1, r1, #2
 8001e6e:	4229      	tst	r1, r5
 8001e70:	d023      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e72:	7720      	strb	r0, [r4, #28]
 8001e74:	2149      	movs	r1, #73	@ 0x49
 8001e76:	7c20      	ldrb	r0, [r4, #16]
 8001e78:	f7fe fc36 	bl	80006e8 <USBPD_PE_Notification>
 8001e7c:	6860      	ldr	r0, [r4, #4]
 8001e7e:	6800      	ldr	r0, [r0, #0]
 8001e80:	0880      	lsrs	r0, r0, #2
 8001e82:	4005      	ands	r5, r0
 8001e84:	d011      	beq.n	8001eaa <PE_Check_ControlMessage+0x1a6>
 8001e86:	202d      	movs	r0, #45	@ 0x2d
 8001e88:	e010      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e8a:	6820      	ldr	r0, [r4, #0]
 8001e8c:	8900      	ldrh	r0, [r0, #8]
 8001e8e:	09c0      	lsrs	r0, r0, #7
 8001e90:	4228      	tst	r0, r5
 8001e92:	d012      	beq.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e94:	202f      	movs	r0, #47	@ 0x2f
 8001e96:	e009      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001e98:	2009      	movs	r0, #9
 8001e9a:	7720      	strb	r0, [r4, #28]
 8001e9c:	e00d      	b.n	8001eba <PE_Check_ControlMessage+0x1b6>
 8001e9e:	200f      	movs	r0, #15
 8001ea0:	7720      	strb	r0, [r4, #28]
 8001ea2:	204b      	movs	r0, #75	@ 0x4b
 8001ea4:	e002      	b.n	8001eac <PE_Check_ControlMessage+0x1a8>
 8001ea6:	2159      	movs	r1, #89	@ 0x59
 8001ea8:	e00b      	b.n	8001ec2 <.text_21>
 8001eaa:	2011      	movs	r0, #17
 8001eac:	7460      	strb	r0, [r4, #17]
 8001eae:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001eb0:	6860      	ldr	r0, [r4, #4]
 8001eb2:	6800      	ldr	r0, [r0, #0]
 8001eb4:	4006      	ands	r6, r0
 8001eb6:	2e02      	cmp	r6, #2
 8001eb8:	d101      	bne.n	8001ebe <PE_Check_ControlMessage+0x1ba>
 8001eba:	7465      	strb	r5, [r4, #17]
 8001ebc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8001ebe:	7467      	strb	r7, [r4, #17]
 8001ec0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001ec2 <.text_21>:
 8001ec2:	7c20      	ldrb	r0, [r4, #16]
 8001ec4:	f7fe fc10 	bl	80006e8 <USBPD_PE_Notification>
 8001ec8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08001eca <PE_Check_DataMessage>:
 8001eca:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001ecc:	0004      	movs	r4, r0
 8001ece:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001ed0:	2501      	movs	r5, #1
 8001ed2:	2603      	movs	r6, #3
 8001ed4:	2700      	movs	r7, #0
 8001ed6:	06c1      	lsls	r1, r0, #27
 8001ed8:	0ec9      	lsrs	r1, r1, #27
 8001eda:	2901      	cmp	r1, #1
 8001edc:	d029      	beq.n	8001f32 <PE_Check_DataMessage+0x68>
 8001ede:	2902      	cmp	r1, #2
 8001ee0:	d00b      	beq.n	8001efa <PE_Check_DataMessage+0x30>
 8001ee2:	2903      	cmp	r1, #3
 8001ee4:	d03d      	beq.n	8001f62 <PE_Check_DataMessage+0x98>
 8001ee6:	2906      	cmp	r1, #6
 8001ee8:	d079      	beq.n	8001fde <PE_Check_DataMessage+0x114>
 8001eea:	2907      	cmp	r1, #7
 8001eec:	d100      	bne.n	8001ef0 <PE_Check_DataMessage+0x26>
 8001eee:	e085      	b.n	8001ffc <PE_Check_DataMessage+0x132>
 8001ef0:	290a      	cmp	r1, #10
 8001ef2:	d078      	beq.n	8001fe6 <PE_Check_DataMessage+0x11c>
 8001ef4:	290f      	cmp	r1, #15
 8001ef6:	d06e      	beq.n	8001fd6 <PE_Check_DataMessage+0x10c>
 8001ef8:	e089      	b.n	800200e <PE_Check_DataMessage+0x144>
 8001efa:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001efc:	7881      	ldrb	r1, [r0, #2]
 8001efe:	78c2      	ldrb	r2, [r0, #3]
 8001f00:	0212      	lsls	r2, r2, #8
 8001f02:	1889      	adds	r1, r1, r2
 8001f04:	7902      	ldrb	r2, [r0, #4]
 8001f06:	0412      	lsls	r2, r2, #16
 8001f08:	1889      	adds	r1, r1, r2
 8001f0a:	7940      	ldrb	r0, [r0, #5]
 8001f0c:	0600      	lsls	r0, r0, #24
 8001f0e:	1808      	adds	r0, r1, r0
 8001f10:	9000      	str	r0, [sp, #0]
 8001f12:	6860      	ldr	r0, [r4, #4]
 8001f14:	6800      	ldr	r0, [r0, #0]
 8001f16:	0880      	lsrs	r0, r0, #2
 8001f18:	4028      	ands	r0, r5
 8001f1a:	d07a      	beq.n	8002012 <PE_Check_DataMessage+0x148>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	466a      	mov	r2, sp
 8001f20:	2106      	movs	r1, #6
 8001f22:	7c20      	ldrb	r0, [r4, #16]
 8001f24:	68a6      	ldr	r6, [r4, #8]
 8001f26:	69b6      	ldr	r6, [r6, #24]
 8001f28:	47b0      	blx	r6
 8001f2a:	7725      	strb	r5, [r4, #28]
 8001f2c:	84a7      	strh	r7, [r4, #36]	@ 0x24
 8001f2e:	2009      	movs	r0, #9
 8001f30:	e06e      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001f32:	6861      	ldr	r1, [r4, #4]
 8001f34:	6809      	ldr	r1, [r1, #0]
 8001f36:	0889      	lsrs	r1, r1, #2
 8001f38:	400d      	ands	r5, r1
 8001f3a:	d16a      	bne.n	8002012 <PE_Check_DataMessage+0x148>
 8001f3c:	0980      	lsrs	r0, r0, #6
 8001f3e:	4006      	ands	r6, r0
 8001f40:	0031      	movs	r1, r6
 8001f42:	7c20      	ldrb	r0, [r4, #16]
 8001f44:	f7fe ff8a 	bl	8000e5c <PE_ExtRevisionInteroperability>
 8001f48:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001f4a:	0440      	lsls	r0, r0, #17
 8001f4c:	0f40      	lsrs	r0, r0, #29
 8001f4e:	0083      	lsls	r3, r0, #2
 8001f50:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f52:	1c82      	adds	r2, r0, #2
 8001f54:	2104      	movs	r1, #4
 8001f56:	7c20      	ldrb	r0, [r4, #16]
 8001f58:	68a5      	ldr	r5, [r4, #8]
 8001f5a:	69ad      	ldr	r5, [r5, #24]
 8001f5c:	47a8      	blx	r5
 8001f5e:	2044      	movs	r0, #68	@ 0x44
 8001f60:	e056      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001f62:	9701      	str	r7, [sp, #4]
 8001f64:	9700      	str	r7, [sp, #0]
 8001f66:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001f68:	7881      	ldrb	r1, [r0, #2]
 8001f6a:	78c2      	ldrb	r2, [r0, #3]
 8001f6c:	0212      	lsls	r2, r2, #8
 8001f6e:	1889      	adds	r1, r1, r2
 8001f70:	7902      	ldrb	r2, [r0, #4]
 8001f72:	0412      	lsls	r2, r2, #16
 8001f74:	1889      	adds	r1, r1, r2
 8001f76:	7940      	ldrb	r0, [r0, #5]
 8001f78:	0600      	lsls	r0, r0, #24
 8001f7a:	180d      	adds	r5, r1, r0
 8001f7c:	466b      	mov	r3, sp
 8001f7e:	aa01      	add	r2, sp, #4
 8001f80:	2103      	movs	r1, #3
 8001f82:	7c20      	ldrb	r0, [r4, #16]
 8001f84:	68a7      	ldr	r7, [r4, #8]
 8001f86:	697f      	ldr	r7, [r7, #20]
 8001f88:	47b8      	blx	r7
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	9800      	ldr	r0, [sp, #0]
 8001f8e:	f7ff fb91 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8001f92:	2800      	cmp	r0, #0
 8001f94:	d11d      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001f96:	6860      	ldr	r0, [r4, #4]
 8001f98:	6800      	ldr	r0, [r0, #0]
 8001f9a:	0540      	lsls	r0, r0, #21
 8001f9c:	0f40      	lsrs	r0, r0, #29
 8001f9e:	2803      	cmp	r0, #3
 8001fa0:	d117      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001fa2:	9801      	ldr	r0, [sp, #4]
 8001fa4:	4938      	ldr	r1, [pc, #224]	@ (8002088 <.text_24>)
 8001fa6:	4288      	cmp	r0, r1
 8001fa8:	d113      	bne.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001faa:	0f28      	lsrs	r0, r5, #28
 8001fac:	2805      	cmp	r0, #5
 8001fae:	d00e      	beq.n	8001fce <PE_Check_DataMessage+0x104>
 8001fb0:	2808      	cmp	r0, #8
 8001fb2:	d00a      	beq.n	8001fca <PE_Check_DataMessage+0x100>
 8001fb4:	2809      	cmp	r0, #9
 8001fb6:	d003      	beq.n	8001fc0 <PE_Check_DataMessage+0xf6>
 8001fb8:	280a      	cmp	r0, #10
 8001fba:	d12a      	bne.n	8002012 <PE_Check_DataMessage+0x148>
 8001fbc:	2166      	movs	r1, #102	@ 0x66
 8001fbe:	e000      	b.n	8001fc2 <PE_Check_DataMessage+0xf8>
 8001fc0:	2165      	movs	r1, #101	@ 0x65
 8001fc2:	7c20      	ldrb	r0, [r4, #16]
 8001fc4:	f7fe fb90 	bl	80006e8 <USBPD_PE_Notification>
 8001fc8:	e003      	b.n	8001fd2 <PE_Check_DataMessage+0x108>
 8001fca:	2029      	movs	r0, #41	@ 0x29
 8001fcc:	e020      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001fce:	2027      	movs	r0, #39	@ 0x27
 8001fd0:	e01e      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001fd2:	7466      	strb	r6, [r4, #17]
 8001fd4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001fd6:	0020      	movs	r0, r4
 8001fd8:	f003 fabe 	bl	8005558 <PE_Check_DataMessageVDM>
 8001fdc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001fde:	6820      	ldr	r0, [r4, #0]
 8001fe0:	8900      	ldrh	r0, [r0, #8]
 8001fe2:	0900      	lsrs	r0, r0, #4
 8001fe4:	4228      	tst	r0, r5
 8001fe6:	d010      	beq.n	800200a <PE_Check_DataMessage+0x140>
 8001fe8:	2304      	movs	r3, #4
 8001fea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001fec:	1c82      	adds	r2, r0, #2
 8001fee:	210b      	movs	r1, #11
 8001ff0:	7c20      	ldrb	r0, [r4, #16]
 8001ff2:	68a5      	ldr	r5, [r4, #8]
 8001ff4:	69ad      	ldr	r5, [r5, #24]
 8001ff6:	47a8      	blx	r5
 8001ff8:	202c      	movs	r0, #44	@ 0x2c
 8001ffa:	e009      	b.n	8002010 <PE_Check_DataMessage+0x146>
 8001ffc:	6820      	ldr	r0, [r4, #0]
 8001ffe:	8900      	ldrh	r0, [r0, #8]
 8002000:	0a00      	lsrs	r0, r0, #8
 8002002:	4228      	tst	r0, r5
 8002004:	d001      	beq.n	800200a <PE_Check_DataMessage+0x140>
 8002006:	203d      	movs	r0, #61	@ 0x3d
 8002008:	e002      	b.n	8002010 <PE_Check_DataMessage+0x146>
 800200a:	7465      	strb	r5, [r4, #17]
 800200c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800200e:	2011      	movs	r0, #17
 8002010:	7460      	strb	r0, [r4, #17]
 8002012:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08002014 <PE_CheckSendMessageStatus>:
 8002014:	b510      	push	{r4, lr}
 8002016:	000c      	movs	r4, r1
 8002018:	2110      	movs	r1, #16
 800201a:	2b05      	cmp	r3, #5
 800201c:	d006      	beq.n	800202c <PE_CheckSendMessageStatus+0x18>
 800201e:	2b06      	cmp	r3, #6
 8002020:	d00e      	beq.n	8002040 <PE_CheckSendMessageStatus+0x2c>
 8002022:	2b07      	cmp	r3, #7
 8002024:	d011      	beq.n	800204a <PE_CheckSendMessageStatus+0x36>
 8002026:	2b09      	cmp	r3, #9
 8002028:	d008      	beq.n	800203c <PE_CheckSendMessageStatus+0x28>
 800202a:	e02a      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800202c:	9902      	ldr	r1, [sp, #8]
 800202e:	7441      	strb	r1, [r0, #17]
 8002030:	6941      	ldr	r1, [r0, #20]
 8002032:	4a16      	ldr	r2, [pc, #88]	@ (800208c <.text_25>)
 8002034:	400a      	ands	r2, r1
 8002036:	6142      	str	r2, [r0, #20]
 8002038:	2100      	movs	r1, #0
 800203a:	e022      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800203c:	2109      	movs	r1, #9
 800203e:	e020      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 8002040:	6942      	ldr	r2, [r0, #20]
 8002042:	024b      	lsls	r3, r1, #9
 8002044:	4313      	orrs	r3, r2
 8002046:	6143      	str	r3, [r0, #20]
 8002048:	e01b      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800204a:	2c00      	cmp	r4, #0
 800204c:	d005      	beq.n	800205a <PE_CheckSendMessageStatus+0x46>
 800204e:	2a01      	cmp	r2, #1
 8002050:	d101      	bne.n	8002056 <PE_CheckSendMessageStatus+0x42>
 8002052:	2299      	movs	r2, #153	@ 0x99
 8002054:	e014      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 8002056:	2107      	movs	r1, #7
 8002058:	e013      	b.n	8002082 <PE_CheckSendMessageStatus+0x6e>
 800205a:	6844      	ldr	r4, [r0, #4]
 800205c:	6824      	ldr	r4, [r4, #0]
 800205e:	0a24      	lsrs	r4, r4, #8
 8002060:	4023      	ands	r3, r4
 8002062:	2b04      	cmp	r3, #4
 8002064:	d003      	beq.n	800206e <PE_CheckSendMessageStatus+0x5a>
 8002066:	2a01      	cmp	r2, #1
 8002068:	d109      	bne.n	800207e <PE_CheckSendMessageStatus+0x6a>
 800206a:	220f      	movs	r2, #15
 800206c:	e008      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 800206e:	2a00      	cmp	r2, #0
 8002070:	d1fb      	bne.n	800206a <PE_CheckSendMessageStatus+0x56>
 8002072:	6882      	ldr	r2, [r0, #8]
 8002074:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002076:	2a00      	cmp	r2, #0
 8002078:	d0f7      	beq.n	800206a <PE_CheckSendMessageStatus+0x56>
 800207a:	2292      	movs	r2, #146	@ 0x92
 800207c:	e000      	b.n	8002080 <PE_CheckSendMessageStatus+0x6c>
 800207e:	2211      	movs	r2, #17
 8002080:	7442      	strb	r2, [r0, #17]
 8002082:	0008      	movs	r0, r1
 8002084:	bd10      	pop	{r4, pc}
	...

08002088 <.text_24>:
 8002088:	00001388 	.word	0x00001388

0800208c <.text_25>:
 800208c:	ffffbfff 	.word	0xffffbfff

08002090 <USBPD_PE_StateMachine_SNK>:
 8002090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002092:	b08c      	sub	sp, #48	@ 0x30
 8002094:	0004      	movs	r4, r0
 8002096:	4828      	ldr	r0, [pc, #160]	@ (8002138 <USBPD_PE_StateMachine_SNK+0xa8>)
 8002098:	00a1      	lsls	r1, r4, #2
 800209a:	5845      	ldr	r5, [r0, r1]
 800209c:	7c68      	ldrb	r0, [r5, #17]
 800209e:	2848      	cmp	r0, #72	@ 0x48
 80020a0:	d133      	bne.n	800210a <USBPD_PE_StateMachine_SNK+0x7a>
 80020a2:	0028      	movs	r0, r5
 80020a4:	f7fe fe72 	bl	8000d8c <PE_Reset_ZI>
 80020a8:	0028      	movs	r0, r5
 80020aa:	f7fe fea5 	bl	8000df8 <PE_Reset_Counter>
 80020ae:	6828      	ldr	r0, [r5, #0]
 80020b0:	7900      	ldrb	r0, [r0, #4]
 80020b2:	0783      	lsls	r3, r0, #30
 80020b4:	0f9b      	lsrs	r3, r3, #30
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	7c28      	ldrb	r0, [r5, #16]
 80020bc:	f003 fc35 	bl	800592a <USBPD_PRL_SetHeader>
 80020c0:	6868      	ldr	r0, [r5, #4]
 80020c2:	6801      	ldr	r1, [r0, #0]
 80020c4:	2208      	movs	r2, #8
 80020c6:	4391      	bics	r1, r2
 80020c8:	6001      	str	r1, [r0, #0]
 80020ca:	6868      	ldr	r0, [r5, #4]
 80020cc:	6801      	ldr	r1, [r0, #0]
 80020ce:	2203      	movs	r2, #3
 80020d0:	4391      	bics	r1, r2
 80020d2:	682a      	ldr	r2, [r5, #0]
 80020d4:	7912      	ldrb	r2, [r2, #4]
 80020d6:	0792      	lsls	r2, r2, #30
 80020d8:	0f92      	lsrs	r2, r2, #30
 80020da:	430a      	orrs	r2, r1
 80020dc:	6002      	str	r2, [r0, #0]
 80020de:	2101      	movs	r1, #1
 80020e0:	7c28      	ldrb	r0, [r5, #16]
 80020e2:	f003 fc93 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80020e6:	7c28      	ldrb	r0, [r5, #16]
 80020e8:	f003 fefc 	bl	8005ee4 <USBPD_PRL_Reset>
 80020ec:	203e      	movs	r0, #62	@ 0x3e
 80020ee:	7468      	strb	r0, [r5, #17]
 80020f0:	7ca9      	ldrb	r1, [r5, #18]
 80020f2:	293e      	cmp	r1, #62	@ 0x3e
 80020f4:	d009      	beq.n	800210a <USBPD_PE_StateMachine_SNK+0x7a>
 80020f6:	74a8      	strb	r0, [r5, #18]
 80020f8:	2000      	movs	r0, #0
 80020fa:	9000      	str	r0, [sp, #0]
 80020fc:	2300      	movs	r3, #0
 80020fe:	223e      	movs	r2, #62	@ 0x3e
 8002100:	7c29      	ldrb	r1, [r5, #16]
 8002102:	2004      	movs	r0, #4
 8002104:	4eb1      	ldr	r6, [pc, #708]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002106:	6836      	ldr	r6, [r6, #0]
 8002108:	47b0      	blx	r6
 800210a:	6968      	ldr	r0, [r5, #20]
 800210c:	0341      	lsls	r1, r0, #13
 800210e:	0fc9      	lsrs	r1, r1, #31
 8002110:	d006      	beq.n	8002120 <USBPD_PE_StateMachine_SNK+0x90>
 8002112:	49af      	ldr	r1, [pc, #700]	@ (80023d0 <__iar_annotation$$branch+0x8>)
 8002114:	4001      	ands	r1, r0
 8002116:	6169      	str	r1, [r5, #20]
 8002118:	2164      	movs	r1, #100	@ 0x64
 800211a:	7c28      	ldrb	r0, [r5, #16]
 800211c:	f7fe fae4 	bl	80006e8 <USBPD_PE_Notification>
 8002120:	0028      	movs	r0, r5
 8002122:	f7fe fd15 	bl	8000b50 <PE_Get_RxEvent>
 8002126:	4669      	mov	r1, sp
 8002128:	7308      	strb	r0, [r1, #12]
 800212a:	4668      	mov	r0, sp
 800212c:	7b00      	ldrb	r0, [r0, #12]
 800212e:	2803      	cmp	r0, #3
 8002130:	d104      	bne.n	800213c <USBPD_PE_StateMachine_SNK+0xac>
 8002132:	2001      	movs	r0, #1
 8002134:	b00d      	add	sp, #52	@ 0x34
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002138:	200002ec 	.word	0x200002ec
 800213c:	4668      	mov	r0, sp
 800213e:	7344      	strb	r4, [r0, #13]
 8002140:	2402      	movs	r4, #2
 8002142:	6868      	ldr	r0, [r5, #4]
 8002144:	6800      	ldr	r0, [r0, #0]
 8002146:	04c1      	lsls	r1, r0, #19
 8002148:	0fc9      	lsrs	r1, r1, #31
 800214a:	d100      	bne.n	800214e <USBPD_PE_StateMachine_SNK+0xbe>
 800214c:	e148      	b.n	80023e0 <__iar_annotation$$branch+0x18>
 800214e:	6968      	ldr	r0, [r5, #20]
 8002150:	0381      	lsls	r1, r0, #14
 8002152:	0fc9      	lsrs	r1, r1, #31
 8002154:	d014      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0xf0>
 8002156:	21a7      	movs	r1, #167	@ 0xa7
 8002158:	7469      	strb	r1, [r5, #17]
 800215a:	4a9e      	ldr	r2, [pc, #632]	@ (80023d4 <__iar_annotation$$branch+0xc>)
 800215c:	4002      	ands	r2, r0
 800215e:	616a      	str	r2, [r5, #20]
 8002160:	2000      	movs	r0, #0
 8002162:	2232      	movs	r2, #50	@ 0x32
 8002164:	54a8      	strb	r0, [r5, r2]
 8002166:	7ca8      	ldrb	r0, [r5, #18]
 8002168:	28a7      	cmp	r0, #167	@ 0xa7
 800216a:	d02b      	beq.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 800216c:	74a9      	strb	r1, [r5, #18]
 800216e:	2000      	movs	r0, #0
 8002170:	9000      	str	r0, [sp, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	22a7      	movs	r2, #167	@ 0xa7
 8002176:	7c29      	ldrb	r1, [r5, #16]
 8002178:	2004      	movs	r0, #4
 800217a:	4e94      	ldr	r6, [pc, #592]	@ (80023cc <__iar_annotation$$branch+0x4>)
 800217c:	6836      	ldr	r6, [r6, #0]
 800217e:	47b0      	blx	r6
 8002180:	2032      	movs	r0, #50	@ 0x32
 8002182:	5c28      	ldrb	r0, [r5, r0]
 8002184:	280f      	cmp	r0, #15
 8002186:	d001      	beq.n	800218c <USBPD_PE_StateMachine_SNK+0xfc>
 8002188:	2814      	cmp	r0, #20
 800218a:	d11b      	bne.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 800218c:	4668      	mov	r0, sp
 800218e:	7b00      	ldrb	r0, [r0, #12]
 8002190:	2814      	cmp	r0, #20
 8002192:	d005      	beq.n	80021a0 <USBPD_PE_StateMachine_SNK+0x110>
 8002194:	2014      	movs	r0, #20
 8002196:	4669      	mov	r1, sp
 8002198:	7308      	strb	r0, [r1, #12]
 800219a:	0028      	movs	r0, r5
 800219c:	f7fe fd0f 	bl	8000bbe <PE_Clear_RxEvent>
 80021a0:	2032      	movs	r0, #50	@ 0x32
 80021a2:	5c2a      	ldrb	r2, [r5, r0]
 80021a4:	746a      	strb	r2, [r5, #17]
 80021a6:	2000      	movs	r0, #0
 80021a8:	2132      	movs	r1, #50	@ 0x32
 80021aa:	5468      	strb	r0, [r5, r1]
 80021ac:	7ca8      	ldrb	r0, [r5, #18]
 80021ae:	4290      	cmp	r0, r2
 80021b0:	d008      	beq.n	80021c4 <USBPD_PE_StateMachine_SNK+0x134>
 80021b2:	74aa      	strb	r2, [r5, #18]
 80021b4:	2000      	movs	r0, #0
 80021b6:	9000      	str	r0, [sp, #0]
 80021b8:	2300      	movs	r3, #0
 80021ba:	7c29      	ldrb	r1, [r5, #16]
 80021bc:	2004      	movs	r0, #4
 80021be:	4e83      	ldr	r6, [pc, #524]	@ (80023cc <__iar_annotation$$branch+0x4>)
 80021c0:	6836      	ldr	r6, [r6, #0]
 80021c2:	47b0      	blx	r6
 80021c4:	4668      	mov	r0, sp
 80021c6:	7b00      	ldrb	r0, [r0, #12]
 80021c8:	2811      	cmp	r0, #17
 80021ca:	d11f      	bne.n	800220c <USBPD_PE_StateMachine_SNK+0x17c>
 80021cc:	6868      	ldr	r0, [r5, #4]
 80021ce:	6800      	ldr	r0, [r0, #0]
 80021d0:	0701      	lsls	r1, r0, #28
 80021d2:	0fc9      	lsrs	r1, r1, #31
 80021d4:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80021d6:	0680      	lsls	r0, r0, #26
 80021d8:	0fc2      	lsrs	r2, r0, #31
 80021da:	4291      	cmp	r1, r2
 80021dc:	d116      	bne.n	800220c <USBPD_PE_StateMachine_SNK+0x17c>
 80021de:	2014      	movs	r0, #20
 80021e0:	4669      	mov	r1, sp
 80021e2:	7308      	strb	r0, [r1, #12]
 80021e4:	0028      	movs	r0, r5
 80021e6:	f7fe fcea 	bl	8000bbe <PE_Clear_RxEvent>
 80021ea:	2092      	movs	r0, #146	@ 0x92
 80021ec:	7468      	strb	r0, [r5, #17]
 80021ee:	7ca8      	ldrb	r0, [r5, #18]
 80021f0:	2892      	cmp	r0, #146	@ 0x92
 80021f2:	d100      	bne.n	80021f6 <USBPD_PE_StateMachine_SNK+0x166>
 80021f4:	e104      	b.n	8002400 <__iar_annotation$$branch+0x38>
 80021f6:	2092      	movs	r0, #146	@ 0x92
 80021f8:	74a8      	strb	r0, [r5, #18]
 80021fa:	2000      	movs	r0, #0
 80021fc:	9000      	str	r0, [sp, #0]
 80021fe:	2300      	movs	r3, #0
 8002200:	2292      	movs	r2, #146	@ 0x92
 8002202:	7c29      	ldrb	r1, [r5, #16]
 8002204:	2004      	movs	r0, #4
 8002206:	4e71      	ldr	r6, [pc, #452]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002208:	6836      	ldr	r6, [r6, #0]
 800220a:	47b0      	blx	r6
 800220c:	7c68      	ldrb	r0, [r5, #17]
 800220e:	4669      	mov	r1, sp
 8002210:	7008      	strb	r0, [r1, #0]
 8002212:	4f71      	ldr	r7, [pc, #452]	@ (80023d8 <__iar_annotation$$branch+0x10>)
 8002214:	20f0      	movs	r0, #240	@ 0xf0
 8002216:	0200      	lsls	r0, r0, #8
 8002218:	4e70      	ldr	r6, [pc, #448]	@ (80023dc <__iar_annotation$$branch+0x14>)
 800221a:	2104      	movs	r1, #4
 800221c:	466a      	mov	r2, sp
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	2a00      	cmp	r2, #0
 8002222:	d100      	bne.n	8002226 <USBPD_PE_StateMachine_SNK+0x196>
 8002224:	e0e0      	b.n	80023e8 <__iar_annotation$$branch+0x20>
 8002226:	1e52      	subs	r2, r2, #1
 8002228:	d040      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 800222a:	1e92      	subs	r2, r2, #2
 800222c:	2a01      	cmp	r2, #1
 800222e:	d800      	bhi.n	8002232 <USBPD_PE_StateMachine_SNK+0x1a2>
 8002230:	e323      	b.n	800287a <__iar_annotation$$branch+0x4b2>
 8002232:	1e92      	subs	r2, r2, #2
 8002234:	d100      	bne.n	8002238 <USBPD_PE_StateMachine_SNK+0x1a8>
 8002236:	e1fb      	b.n	8002630 <__iar_annotation$$branch+0x268>
 8002238:	3a0a      	subs	r2, #10
 800223a:	d100      	bne.n	800223e <USBPD_PE_StateMachine_SNK+0x1ae>
 800223c:	e1fd      	b.n	800263a <__iar_annotation$$branch+0x272>
 800223e:	1e52      	subs	r2, r2, #1
 8002240:	d100      	bne.n	8002244 <USBPD_PE_StateMachine_SNK+0x1b4>
 8002242:	e299      	b.n	8002778 <__iar_annotation$$branch+0x3b0>
 8002244:	1e52      	subs	r2, r2, #1
 8002246:	d100      	bne.n	800224a <USBPD_PE_StateMachine_SNK+0x1ba>
 8002248:	e2a3      	b.n	8002792 <__iar_annotation$$branch+0x3ca>
 800224a:	1ed2      	subs	r2, r2, #3
 800224c:	d100      	bne.n	8002250 <USBPD_PE_StateMachine_SNK+0x1c0>
 800224e:	e228      	b.n	80026a2 <__iar_annotation$$branch+0x2da>
 8002250:	1f12      	subs	r2, r2, #4
 8002252:	2a01      	cmp	r2, #1
 8002254:	d92a      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002256:	1e92      	subs	r2, r2, #2
 8002258:	d100      	bne.n	800225c <USBPD_PE_StateMachine_SNK+0x1cc>
 800225a:	e2d2      	b.n	8002802 <__iar_annotation$$branch+0x43a>
 800225c:	1ed2      	subs	r2, r2, #3
 800225e:	d025      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002260:	1e52      	subs	r2, r2, #1
 8002262:	d100      	bne.n	8002266 <USBPD_PE_StateMachine_SNK+0x1d6>
 8002264:	e3c3      	b.n	80029ee <__iar_annotation$$branch+0x626>
 8002266:	1f12      	subs	r2, r2, #4
 8002268:	d100      	bne.n	800226c <USBPD_PE_StateMachine_SNK+0x1dc>
 800226a:	e316      	b.n	800289a <__iar_annotation$$branch+0x4d2>
 800226c:	1f52      	subs	r2, r2, #5
 800226e:	2a02      	cmp	r2, #2
 8002270:	d91c      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002272:	1ed2      	subs	r2, r2, #3
 8002274:	d100      	bne.n	8002278 <USBPD_PE_StateMachine_SNK+0x1e8>
 8002276:	e2f7      	b.n	8002868 <__iar_annotation$$branch+0x4a0>
 8002278:	1e52      	subs	r2, r2, #1
 800227a:	d101      	bne.n	8002280 <__iar_annotation$$branch+0x4>

0800227c <__iar_annotation$$branch>:
 800227c:	f000 fc39 	bl	8002af2 <__iar_annotation$$branch+0x72a>
 8002280:	1e52      	subs	r2, r2, #1
 8002282:	d013      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002284:	1e92      	subs	r2, r2, #2
 8002286:	d101      	bne.n	800228c <__iar_annotation$$branch+0x4>

08002288 <__iar_annotation$$branch>:
 8002288:	f000 fc80 	bl	8002b8c <__iar_annotation$$branch+0x7c4>
 800228c:	1e52      	subs	r2, r2, #1
 800228e:	2a01      	cmp	r2, #1
 8002290:	d90c      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002292:	1e92      	subs	r2, r2, #2
 8002294:	d001      	beq.n	800229a <__iar_annotation$$branch+0x12>
 8002296:	1e92      	subs	r2, r2, #2
 8002298:	2a05      	cmp	r2, #5
 800229a:	d801      	bhi.n	80022a0 <__iar_annotation$$branch+0x4>

0800229c <__iar_annotation$$branch>:
 800229c:	f000 fcbc 	bl	8002c18 <__iar_annotation$$branch+0x850>
 80022a0:	1f92      	subs	r2, r2, #6
 80022a2:	d101      	bne.n	80022a8 <__iar_annotation$$branch+0x4>

080022a4 <__iar_annotation$$branch>:
 80022a4:	f000 fc86 	bl	8002bb4 <__iar_annotation$$branch+0x7ec>
 80022a8:	1e52      	subs	r2, r2, #1
 80022aa:	2a03      	cmp	r2, #3
 80022ac:	d801      	bhi.n	80022b2 <__iar_annotation$$branch+0x4>

080022ae <__iar_annotation$$branch>:
 80022ae:	f000 fcb7 	bl	8002c20 <__iar_annotation$$branch+0x858>
 80022b2:	1f12      	subs	r2, r2, #4
 80022b4:	d100      	bne.n	80022b8 <__iar_annotation$$branch+0xa>
 80022b6:	e0af      	b.n	8002418 <__iar_annotation$$branch+0x50>
 80022b8:	1e92      	subs	r2, r2, #2
 80022ba:	d100      	bne.n	80022be <__iar_annotation$$branch+0x10>
 80022bc:	e221      	b.n	8002702 <__iar_annotation$$branch+0x33a>
 80022be:	1ed2      	subs	r2, r2, #3
 80022c0:	d100      	bne.n	80022c4 <__iar_annotation$$branch+0x16>
 80022c2:	e0c1      	b.n	8002448 <__iar_annotation$$branch+0x80>
 80022c4:	1e52      	subs	r2, r2, #1
 80022c6:	d100      	bne.n	80022ca <__iar_annotation$$branch+0x1c>
 80022c8:	e100      	b.n	80024cc <__iar_annotation$$branch+0x104>
 80022ca:	1e52      	subs	r2, r2, #1
 80022cc:	d100      	bne.n	80022d0 <__iar_annotation$$branch+0x22>
 80022ce:	e10f      	b.n	80024f0 <__iar_annotation$$branch+0x128>
 80022d0:	1e52      	subs	r2, r2, #1
 80022d2:	d100      	bne.n	80022d6 <__iar_annotation$$branch+0x28>
 80022d4:	e128      	b.n	8002528 <__iar_annotation$$branch+0x160>
 80022d6:	1e52      	subs	r2, r2, #1
 80022d8:	d100      	bne.n	80022dc <__iar_annotation$$branch+0x2e>
 80022da:	e178      	b.n	80025ce <__iar_annotation$$branch+0x206>
 80022dc:	1e92      	subs	r2, r2, #2
 80022de:	d0a6      	beq.n	800222e <USBPD_PE_StateMachine_SNK+0x19e>
 80022e0:	1e92      	subs	r2, r2, #2
 80022e2:	d0e3      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 80022e4:	1e52      	subs	r2, r2, #1
 80022e6:	d101      	bne.n	80022ec <__iar_annotation$$branch+0x4>

080022e8 <__iar_annotation$$branch>:
 80022e8:	f000 fbe5 	bl	8002ab6 <__iar_annotation$$branch+0x6ee>
 80022ec:	1f12      	subs	r2, r2, #4
 80022ee:	d100      	bne.n	80022f2 <__iar_annotation$$branch+0xa>
 80022f0:	e26a      	b.n	80027c8 <__iar_annotation$$branch+0x400>
 80022f2:	1ed2      	subs	r2, r2, #3
 80022f4:	d100      	bne.n	80022f8 <__iar_annotation$$branch+0x10>
 80022f6:	e334      	b.n	8002962 <__iar_annotation$$branch+0x59a>
 80022f8:	1f52      	subs	r2, r2, #5
 80022fa:	d100      	bne.n	80022fe <__iar_annotation$$branch+0x16>
 80022fc:	e388      	b.n	8002a10 <__iar_annotation$$branch+0x648>
 80022fe:	1e52      	subs	r2, r2, #1
 8002300:	d100      	bne.n	8002304 <__iar_annotation$$branch+0x1c>
 8002302:	e2ff      	b.n	8002904 <__iar_annotation$$branch+0x53c>
 8002304:	3a09      	subs	r2, #9
 8002306:	2a02      	cmp	r2, #2
 8002308:	d9d0      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 800230a:	1ed2      	subs	r2, r2, #3
 800230c:	d101      	bne.n	8002312 <__iar_annotation$$branch+0x4>

0800230e <__iar_annotation$$branch>:
 800230e:	f000 fc01 	bl	8002b14 <__iar_annotation$$branch+0x74c>
 8002312:	1e52      	subs	r2, r2, #1
 8002314:	d101      	bne.n	800231a <__iar_annotation$$branch+0x4>

08002316 <__iar_annotation$$branch>:
 8002316:	f000 fc0f 	bl	8002b38 <__iar_annotation$$branch+0x770>
 800231a:	1e52      	subs	r2, r2, #1
 800231c:	2a01      	cmp	r2, #1
 800231e:	d9c5      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002320:	3a0d      	subs	r2, #13
 8002322:	d0c3      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002324:	3a12      	subs	r2, #18
 8002326:	d101      	bne.n	800232c <__iar_annotation$$branch+0x4>

08002328 <__iar_annotation$$branch>:
 8002328:	f000 fc92 	bl	8002c50 <__iar_annotation$$branch+0x888>
 800232c:	3a0c      	subs	r2, #12
 800232e:	d067      	beq.n	8002400 <__iar_annotation$$branch+0x38>
 8002330:	1e52      	subs	r2, r2, #1
 8002332:	2a02      	cmp	r2, #2
 8002334:	d9ba      	bls.n	80022ac <__iar_annotation$$branch+0x8>
 8002336:	1f52      	subs	r2, r2, #5
 8002338:	d100      	bne.n	800233c <__iar_annotation$$branch+0x14>
 800233a:	e271      	b.n	8002820 <__iar_annotation$$branch+0x458>
 800233c:	1e52      	subs	r2, r2, #1
 800233e:	d0b5      	beq.n	80022ac <__iar_annotation$$branch+0x8>
 8002340:	1e52      	subs	r2, r2, #1
 8002342:	d100      	bne.n	8002346 <__iar_annotation$$branch+0x1e>
 8002344:	e174      	b.n	8002630 <__iar_annotation$$branch+0x268>
 8002346:	1e52      	subs	r2, r2, #1
 8002348:	d100      	bne.n	800234c <__iar_annotation$$branch+0x24>
 800234a:	e1be      	b.n	80026ca <__iar_annotation$$branch+0x302>
 800234c:	1e52      	subs	r2, r2, #1
 800234e:	2a08      	cmp	r2, #8
 8002350:	d801      	bhi.n	8002356 <__iar_annotation$$branch+0x4>

08002352 <__iar_annotation$$branch>:
 8002352:	f000 fc6a 	bl	8002c2a <__iar_annotation$$branch+0x862>
 8002356:	3a0b      	subs	r2, #11
 8002358:	d101      	bne.n	800235e <__iar_annotation$$branch+0x4>

0800235a <__iar_annotation$$branch>:
 800235a:	f000 fc7f 	bl	8002c5c <__iar_annotation$$branch+0x894>
 800235e:	a903      	add	r1, sp, #12
 8002360:	0028      	movs	r0, r5
 8002362:	f002 f9e3 	bl	800472c <PE_StateMachine_VDM>
 8002366:	0004      	movs	r4, r0
 8002368:	7c6a      	ldrb	r2, [r5, #17]
 800236a:	7ca8      	ldrb	r0, [r5, #18]
 800236c:	4290      	cmp	r0, r2
 800236e:	d008      	beq.n	8002382 <__iar_annotation$$branch+0x28>
 8002370:	74aa      	strb	r2, [r5, #18]
 8002372:	2000      	movs	r0, #0
 8002374:	9000      	str	r0, [sp, #0]
 8002376:	2300      	movs	r3, #0
 8002378:	7c29      	ldrb	r1, [r5, #16]
 800237a:	2004      	movs	r0, #4
 800237c:	4e13      	ldr	r6, [pc, #76]	@ (80023cc <__iar_annotation$$branch+0x4>)
 800237e:	6836      	ldr	r6, [r6, #0]
 8002380:	47b0      	blx	r6
 8002382:	4e12      	ldr	r6, [pc, #72]	@ (80023cc <__iar_annotation$$branch+0x4>)
 8002384:	4668      	mov	r0, sp
 8002386:	7b00      	ldrb	r0, [r0, #12]
 8002388:	2814      	cmp	r0, #20
 800238a:	d101      	bne.n	8002390 <__iar_annotation$$branch+0x4>

0800238c <__iar_annotation$$branch>:
 800238c:	f000 fc73 	bl	8002c76 <__iar_annotation$$branch+0x8ae>
 8002390:	0028      	movs	r0, r5
 8002392:	f7fe fc5b 	bl	8000c4c <PE_Check_AMSConflict>
 8002396:	2815      	cmp	r0, #21
 8002398:	d109      	bne.n	80023ae <__iar_annotation$$branch+0x22>
 800239a:	4668      	mov	r0, sp
 800239c:	7b00      	ldrb	r0, [r0, #12]
 800239e:	2814      	cmp	r0, #20
 80023a0:	d005      	beq.n	80023ae <__iar_annotation$$branch+0x22>
 80023a2:	2014      	movs	r0, #20
 80023a4:	4669      	mov	r1, sp
 80023a6:	7308      	strb	r0, [r1, #12]
 80023a8:	0028      	movs	r0, r5
 80023aa:	f7fe fc08 	bl	8000bbe <PE_Clear_RxEvent>
 80023ae:	7c6a      	ldrb	r2, [r5, #17]
 80023b0:	7ca8      	ldrb	r0, [r5, #18]
 80023b2:	4290      	cmp	r0, r2
 80023b4:	d007      	beq.n	80023c6 <__iar_annotation$$branch+0x3a>
 80023b6:	74aa      	strb	r2, [r5, #18]
 80023b8:	2000      	movs	r0, #0
 80023ba:	9000      	str	r0, [sp, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	7c29      	ldrb	r1, [r5, #16]
 80023c0:	2004      	movs	r0, #4
 80023c2:	6834      	ldr	r4, [r6, #0]
 80023c4:	47a0      	blx	r4
 80023c6:	2400      	movs	r4, #0

080023c8 <__iar_annotation$$branch>:
 80023c8:	f000 fc74 	bl	8002cb4 <__iar_annotation$$branch+0x8ec>
 80023cc:	20000000 	.word	0x20000000
 80023d0:	fffbffff 	.word	0xfffbffff
 80023d4:	fffdffff 	.word	0xfffdffff
 80023d8:	000081f4 	.word	0x000081f4
 80023dc:	0000801b 	.word	0x0000801b
 80023e0:	2400      	movs	r4, #0
 80023e2:	43e4      	mvns	r4, r4
 80023e4:	0020      	movs	r0, r4
 80023e6:	e6a5      	b.n	8002134 <USBPD_PE_StateMachine_SNK+0xa4>
 80023e8:	6868      	ldr	r0, [r5, #4]
 80023ea:	6801      	ldr	r1, [r0, #0]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4391      	bics	r1, r2
 80023f0:	6001      	str	r1, [r0, #0]
 80023f2:	215f      	movs	r1, #95	@ 0x5f
 80023f4:	7c28      	ldrb	r0, [r5, #16]
 80023f6:	f7fe f977 	bl	80006e8 <USBPD_PE_Notification>
 80023fa:	2400      	movs	r4, #0
 80023fc:	43e4      	mvns	r4, r4
 80023fe:	e7b3      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002400:	6868      	ldr	r0, [r5, #4]
 8002402:	6801      	ldr	r1, [r0, #0]
 8002404:	2210      	movs	r2, #16
 8002406:	4391      	bics	r1, r2
 8002408:	6001      	str	r1, [r0, #0]
 800240a:	68a8      	ldr	r0, [r5, #8]
 800240c:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 800240e:	2900      	cmp	r1, #0
 8002410:	d0f3      	beq.n	80023fa <__iar_annotation$$branch+0x32>
 8002412:	7c28      	ldrb	r0, [r5, #16]
 8002414:	4788      	blx	r1
 8002416:	e7f0      	b.n	80023fa <__iar_annotation$$branch+0x32>
 8002418:	6868      	ldr	r0, [r5, #4]
 800241a:	6801      	ldr	r1, [r0, #0]
 800241c:	2201      	movs	r2, #1
 800241e:	0b0b      	lsrs	r3, r1, #12
 8002420:	4013      	ands	r3, r2
 8002422:	d0a1      	beq.n	8002368 <__iar_annotation$$branch+0xe>
 8002424:	078b      	lsls	r3, r1, #30
 8002426:	0f9b      	lsrs	r3, r3, #30
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <__iar_annotation$$branch+0x68>
 800242c:	2300      	movs	r3, #0
 800242e:	e000      	b.n	8002432 <__iar_annotation$$branch+0x6a>
 8002430:	2320      	movs	r3, #32
 8002432:	2420      	movs	r4, #32
 8002434:	43a1      	bics	r1, r4
 8002436:	430b      	orrs	r3, r1
 8002438:	6003      	str	r3, [r0, #0]
 800243a:	772a      	strb	r2, [r5, #28]
 800243c:	83ef      	strh	r7, [r5, #30]
 800243e:	24fa      	movs	r4, #250	@ 0xfa
 8002440:	0064      	lsls	r4, r4, #1
 8002442:	2043      	movs	r0, #67	@ 0x43
 8002444:	7468      	strb	r0, [r5, #17]
 8002446:	e78f      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002448:	4668      	mov	r0, sp
 800244a:	7b00      	ldrb	r0, [r0, #12]
 800244c:	2811      	cmp	r0, #17
 800244e:	d135      	bne.n	80024bc <__iar_annotation$$branch+0xf4>
 8002450:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002452:	0bc2      	lsrs	r2, r0, #15
 8002454:	d12c      	bne.n	80024b0 <__iar_annotation$$branch+0xe8>
 8002456:	2607      	movs	r6, #7
 8002458:	0b02      	lsrs	r2, r0, #12
 800245a:	4232      	tst	r2, r6
 800245c:	d028      	beq.n	80024b0 <__iar_annotation$$branch+0xe8>
 800245e:	06c2      	lsls	r2, r0, #27
 8002460:	0ed2      	lsrs	r2, r2, #27
 8002462:	2a01      	cmp	r2, #1
 8002464:	d124      	bne.n	80024b0 <__iar_annotation$$branch+0xe8>
 8002466:	2200      	movs	r2, #0
 8002468:	4bc1      	ldr	r3, [pc, #772]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 800246a:	18eb      	adds	r3, r5, r3
 800246c:	709a      	strb	r2, [r3, #2]
 800246e:	696a      	ldr	r2, [r5, #20]
 8002470:	4311      	orrs	r1, r2
 8002472:	6169      	str	r1, [r5, #20]
 8002474:	0600      	lsls	r0, r0, #24
 8002476:	0f81      	lsrs	r1, r0, #30
 8002478:	4668      	mov	r0, sp
 800247a:	7b40      	ldrb	r0, [r0, #13]
 800247c:	f7fe fcee 	bl	8000e5c <PE_ExtRevisionInteroperability>
 8002480:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002482:	0b00      	lsrs	r0, r0, #12
 8002484:	4006      	ands	r6, r0
 8002486:	00b3      	lsls	r3, r6, #2
 8002488:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 800248a:	1c82      	adds	r2, r0, #2
 800248c:	2104      	movs	r1, #4
 800248e:	7c28      	ldrb	r0, [r5, #16]
 8002490:	68ae      	ldr	r6, [r5, #8]
 8002492:	69b6      	ldr	r6, [r6, #24]
 8002494:	47b0      	blx	r6
 8002496:	2001      	movs	r0, #1
 8002498:	7728      	strb	r0, [r5, #28]
 800249a:	6868      	ldr	r0, [r5, #4]
 800249c:	6801      	ldr	r1, [r0, #0]
 800249e:	2210      	movs	r2, #16
 80024a0:	4391      	bics	r1, r2
 80024a2:	6001      	str	r1, [r0, #0]
 80024a4:	2044      	movs	r0, #68	@ 0x44
 80024a6:	7468      	strb	r0, [r5, #17]
 80024a8:	4668      	mov	r0, sp
 80024aa:	7b00      	ldrb	r0, [r0, #12]
 80024ac:	2814      	cmp	r0, #20
 80024ae:	d005      	beq.n	80024bc <__iar_annotation$$branch+0xf4>
 80024b0:	2014      	movs	r0, #20
 80024b2:	4669      	mov	r1, sp
 80024b4:	7308      	strb	r0, [r1, #12]
 80024b6:	0028      	movs	r0, r5
 80024b8:	f7fe fb81 	bl	8000bbe <PE_Clear_RxEvent>
 80024bc:	8be8      	ldrh	r0, [r5, #30]
 80024be:	03a1      	lsls	r1, r4, #14
 80024c0:	4288      	cmp	r0, r1
 80024c2:	d102      	bne.n	80024ca <__iar_annotation$$branch+0x102>
 80024c4:	200f      	movs	r0, #15
 80024c6:	7468      	strb	r0, [r5, #17]
 80024c8:	2400      	movs	r4, #0
 80024ca:	e74d      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80024cc:	466a      	mov	r2, sp
 80024ce:	0029      	movs	r1, r5
 80024d0:	3118      	adds	r1, #24
 80024d2:	7c28      	ldrb	r0, [r5, #16]
 80024d4:	68ab      	ldr	r3, [r5, #8]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4798      	blx	r3
 80024da:	6968      	ldr	r0, [r5, #20]
 80024dc:	2118      	movs	r1, #24
 80024de:	4388      	bics	r0, r1
 80024e0:	9900      	ldr	r1, [sp, #0]
 80024e2:	00c9      	lsls	r1, r1, #3
 80024e4:	2218      	movs	r2, #24
 80024e6:	400a      	ands	r2, r1
 80024e8:	4302      	orrs	r2, r0
 80024ea:	616a      	str	r2, [r5, #20]
 80024ec:	2045      	movs	r0, #69	@ 0x45
 80024ee:	e7ea      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 80024f0:	6968      	ldr	r0, [r5, #20]
 80024f2:	0401      	lsls	r1, r0, #16
 80024f4:	0fc9      	lsrs	r1, r1, #31
 80024f6:	d001      	beq.n	80024fc <__iar_annotation$$branch+0x134>
 80024f8:	2002      	movs	r0, #2
 80024fa:	e000      	b.n	80024fe <__iar_annotation$$branch+0x136>
 80024fc:	2000      	movs	r0, #0
 80024fe:	9002      	str	r0, [sp, #8]
 8002500:	2046      	movs	r0, #70	@ 0x46
 8002502:	9001      	str	r0, [sp, #4]
 8002504:	2001      	movs	r0, #1
 8002506:	9000      	str	r0, [sp, #0]
 8002508:	002b      	movs	r3, r5
 800250a:	3318      	adds	r3, #24
 800250c:	2202      	movs	r2, #2
 800250e:	2100      	movs	r1, #0
 8002510:	0028      	movs	r0, r5
 8002512:	f7ff f95c 	bl	80017ce <PE_Send_DataMessage>
 8002516:	2800      	cmp	r0, #0
 8002518:	d105      	bne.n	8002526 <__iar_annotation$$branch+0x15e>
 800251a:	6968      	ldr	r0, [r5, #20]
 800251c:	4995      	ldr	r1, [pc, #596]	@ (8002774 <__iar_annotation$$branch+0x3ac>)
 800251e:	4001      	ands	r1, r0
 8002520:	6169      	str	r1, [r5, #20]
 8002522:	83ee      	strh	r6, [r5, #30]
 8002524:	241b      	movs	r4, #27
 8002526:	e71f      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002528:	4669      	mov	r1, sp
 800252a:	7b09      	ldrb	r1, [r1, #12]
 800252c:	2911      	cmp	r1, #17
 800252e:	d148      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002530:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8002532:	4201      	tst	r1, r0
 8002534:	d145      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002536:	20fa      	movs	r0, #250	@ 0xfa
 8002538:	0040      	lsls	r0, r0, #1
 800253a:	261f      	movs	r6, #31
 800253c:	221f      	movs	r2, #31
 800253e:	400a      	ands	r2, r1
 8002540:	1e92      	subs	r2, r2, #2
 8002542:	2a01      	cmp	r2, #1
 8002544:	d917      	bls.n	8002576 <__iar_annotation$$branch+0x1ae>
 8002546:	1e92      	subs	r2, r2, #2
 8002548:	d001      	beq.n	800254e <__iar_annotation$$branch+0x186>
 800254a:	3a08      	subs	r2, #8
 800254c:	d125      	bne.n	800259a <__iar_annotation$$branch+0x1d2>
 800254e:	686a      	ldr	r2, [r5, #4]
 8002550:	6812      	ldr	r2, [r2, #0]
 8002552:	0552      	lsls	r2, r2, #21
 8002554:	0f52      	lsrs	r2, r2, #29
 8002556:	2a03      	cmp	r2, #3
 8002558:	d004      	beq.n	8002564 <__iar_annotation$$branch+0x19c>
 800255a:	2143      	movs	r1, #67	@ 0x43
 800255c:	7469      	strb	r1, [r5, #17]
 800255e:	83ef      	strh	r7, [r5, #30]
 8002560:	0004      	movs	r4, r0
 8002562:	e014      	b.n	800258e <__iar_annotation$$branch+0x1c6>
 8002564:	4031      	ands	r1, r6
 8002566:	290c      	cmp	r1, #12
 8002568:	d101      	bne.n	800256e <__iar_annotation$$branch+0x1a6>
 800256a:	2049      	movs	r0, #73	@ 0x49
 800256c:	e000      	b.n	8002570 <__iar_annotation$$branch+0x1a8>
 800256e:	2003      	movs	r0, #3
 8002570:	7468      	strb	r0, [r5, #17]
 8002572:	2400      	movs	r4, #0
 8002574:	e00b      	b.n	800258e <__iar_annotation$$branch+0x1c6>
 8002576:	83ef      	strh	r7, [r5, #30]
 8002578:	0004      	movs	r4, r0
 800257a:	2104      	movs	r1, #4
 800257c:	0028      	movs	r0, r5
 800257e:	f7ff f846 	bl	800160e <PE_SetPowerNegotiation>
 8002582:	2047      	movs	r0, #71	@ 0x47
 8002584:	7468      	strb	r0, [r5, #17]
 8002586:	4668      	mov	r0, sp
 8002588:	7b00      	ldrb	r0, [r0, #12]
 800258a:	2814      	cmp	r0, #20
 800258c:	d005      	beq.n	800259a <__iar_annotation$$branch+0x1d2>
 800258e:	2014      	movs	r0, #20
 8002590:	4669      	mov	r1, sp
 8002592:	7308      	strb	r0, [r1, #12]
 8002594:	0028      	movs	r0, r5
 8002596:	f7fe fb12 	bl	8000bbe <PE_Clear_RxEvent>
 800259a:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800259c:	4006      	ands	r6, r0
 800259e:	2e02      	cmp	r6, #2
 80025a0:	d009      	beq.n	80025b6 <__iar_annotation$$branch+0x1ee>
 80025a2:	2e03      	cmp	r6, #3
 80025a4:	d009      	beq.n	80025ba <__iar_annotation$$branch+0x1f2>
 80025a6:	2e04      	cmp	r6, #4
 80025a8:	d003      	beq.n	80025b2 <__iar_annotation$$branch+0x1ea>
 80025aa:	2e0c      	cmp	r6, #12
 80025ac:	d109      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025ae:	2103      	movs	r1, #3
 80025b0:	e004      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025b2:	2102      	movs	r1, #2
 80025b4:	e002      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025b6:	2104      	movs	r1, #4
 80025b8:	e000      	b.n	80025bc <__iar_annotation$$branch+0x1f4>
 80025ba:	2101      	movs	r1, #1
 80025bc:	7c28      	ldrb	r0, [r5, #16]
 80025be:	f7fe f893 	bl	80006e8 <USBPD_PE_Notification>
 80025c2:	8be8      	ldrh	r0, [r5, #30]
 80025c4:	2180      	movs	r1, #128	@ 0x80
 80025c6:	0209      	lsls	r1, r1, #8
 80025c8:	4288      	cmp	r0, r1
 80025ca:	d1ac      	bne.n	8002526 <__iar_annotation$$branch+0x15e>
 80025cc:	e77a      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 80025ce:	4668      	mov	r0, sp
 80025d0:	7b00      	ldrb	r0, [r0, #12]
 80025d2:	2811      	cmp	r0, #17
 80025d4:	d1f5      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025d6:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80025d8:	499f      	ldr	r1, [pc, #636]	@ (8002858 <__iar_annotation$$branch+0x490>)
 80025da:	4001      	ands	r1, r0
 80025dc:	2906      	cmp	r1, #6
 80025de:	d1f0      	bne.n	80025c2 <__iar_annotation$$branch+0x1fa>
 80025e0:	2014      	movs	r0, #20
 80025e2:	4669      	mov	r1, sp
 80025e4:	7308      	strb	r0, [r1, #12]
 80025e6:	0028      	movs	r0, r5
 80025e8:	f7fe fae9 	bl	8000bbe <PE_Clear_RxEvent>
 80025ec:	2103      	movs	r1, #3
 80025ee:	0028      	movs	r0, r5
 80025f0:	f7ff f80d 	bl	800160e <PE_SetPowerNegotiation>
 80025f4:	2110      	movs	r1, #16
 80025f6:	7c28      	ldrb	r0, [r5, #16]
 80025f8:	f7fe f876 	bl	80006e8 <USBPD_PE_Notification>
 80025fc:	6868      	ldr	r0, [r5, #4]
 80025fe:	6800      	ldr	r0, [r0, #0]
 8002600:	0401      	lsls	r1, r0, #16
 8002602:	0fc9      	lsrs	r1, r1, #31
 8002604:	d002      	beq.n	800260c <__iar_annotation$$branch+0x244>
 8002606:	6828      	ldr	r0, [r5, #0]
 8002608:	6801      	ldr	r1, [r0, #0]
 800260a:	e000      	b.n	800260e <__iar_annotation$$branch+0x246>
 800260c:	2101      	movs	r1, #1
 800260e:	4668      	mov	r0, sp
 8002610:	7b40      	ldrb	r0, [r0, #13]
 8002612:	f003 f9fb 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002616:	2000      	movs	r0, #0
 8002618:	84a8      	strh	r0, [r5, #36]	@ 0x24
 800261a:	2003      	movs	r0, #3
 800261c:	6969      	ldr	r1, [r5, #20]
 800261e:	08c9      	lsrs	r1, r1, #3
 8002620:	4001      	ands	r1, r0
 8002622:	2903      	cmp	r1, #3
 8002624:	d101      	bne.n	800262a <__iar_annotation$$branch+0x262>
 8002626:	498d      	ldr	r1, [pc, #564]	@ (800285c <__iar_annotation$$branch+0x494>)
 8002628:	84a9      	strh	r1, [r5, #36]	@ 0x24
 800262a:	7468      	strb	r0, [r5, #17]
 800262c:	2400      	movs	r4, #0
 800262e:	e7c8      	b.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002630:	a903      	add	r1, sp, #12
 8002632:	0028      	movs	r0, r5
 8002634:	f001 fbac 	bl	8003d90 <PE_StateMachine_VDMCable>
 8002638:	e695      	b.n	8002366 <__iar_annotation$$branch+0xc>
 800263a:	2601      	movs	r6, #1
 800263c:	6868      	ldr	r0, [r5, #4]
 800263e:	6800      	ldr	r0, [r0, #0]
 8002640:	0bc0      	lsrs	r0, r0, #15
 8002642:	4030      	ands	r0, r6
 8002644:	d006      	beq.n	8002654 <__iar_annotation$$branch+0x28c>
 8002646:	68a8      	ldr	r0, [r5, #8]
 8002648:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 800264a:	2a00      	cmp	r2, #0
 800264c:	d002      	beq.n	8002654 <__iar_annotation$$branch+0x28c>
 800264e:	2100      	movs	r1, #0
 8002650:	7c28      	ldrb	r0, [r5, #16]
 8002652:	4790      	blx	r2
 8002654:	6868      	ldr	r0, [r5, #4]
 8002656:	6801      	ldr	r1, [r0, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	4391      	bics	r1, r2
 800265c:	6001      	str	r1, [r0, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	0028      	movs	r0, r5
 8002662:	f7fe ffd4 	bl	800160e <PE_SetPowerNegotiation>
 8002666:	4842      	ldr	r0, [pc, #264]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 8002668:	1829      	adds	r1, r5, r0
 800266a:	7888      	ldrb	r0, [r1, #2]
 800266c:	2803      	cmp	r0, #3
 800266e:	d309      	bcc.n	8002684 <__iar_annotation$$branch+0x2bc>
 8002670:	6968      	ldr	r0, [r5, #20]
 8002672:	0880      	lsrs	r0, r0, #2
 8002674:	4006      	ands	r6, r0
 8002676:	d003      	beq.n	8002680 <__iar_annotation$$branch+0x2b8>
 8002678:	68a8      	ldr	r0, [r5, #8]
 800267a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800267c:	2800      	cmp	r0, #0
 800267e:	d171      	bne.n	8002764 <__iar_annotation$$branch+0x39c>
 8002680:	2000      	movs	r0, #0
 8002682:	e6df      	b.n	8002444 <__iar_annotation$$branch+0x7c>
 8002684:	1c40      	adds	r0, r0, #1
 8002686:	7088      	strb	r0, [r1, #2]
 8002688:	2105      	movs	r1, #5
 800268a:	0028      	movs	r0, r5
 800268c:	f7fe fa32 	bl	8000af4 <PE_Send_RESET>
 8002690:	4873      	ldr	r0, [pc, #460]	@ (8002860 <__iar_annotation$$branch+0x498>)
 8002692:	83e8      	strh	r0, [r5, #30]
 8002694:	2201      	movs	r2, #1
 8002696:	2101      	movs	r1, #1
 8002698:	0028      	movs	r0, r5
 800269a:	f7fe ffaf 	bl	80015fc <PE_CallHardResetCallback>
 800269e:	209b      	movs	r0, #155	@ 0x9b
 80026a0:	e711      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 80026a2:	6868      	ldr	r0, [r5, #4]
 80026a4:	6800      	ldr	r0, [r0, #0]
 80026a6:	0401      	lsls	r1, r0, #16
 80026a8:	0fc9      	lsrs	r1, r1, #31
 80026aa:	d006      	beq.n	80026ba <__iar_annotation$$branch+0x2f2>
 80026ac:	68a8      	ldr	r0, [r5, #8]
 80026ae:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80026b0:	2a00      	cmp	r2, #0
 80026b2:	d002      	beq.n	80026ba <__iar_annotation$$branch+0x2f2>
 80026b4:	2100      	movs	r1, #0
 80026b6:	7c28      	ldrb	r0, [r5, #16]
 80026b8:	4790      	blx	r2
 80026ba:	2200      	movs	r2, #0
 80026bc:	2101      	movs	r1, #1
 80026be:	0028      	movs	r0, r5
 80026c0:	f7fe ff9c 	bl	80015fc <PE_CallHardResetCallback>
 80026c4:	4866      	ldr	r0, [pc, #408]	@ (8002860 <__iar_annotation$$branch+0x498>)
 80026c6:	83e8      	strh	r0, [r5, #30]
 80026c8:	e7e9      	b.n	800269e <__iar_annotation$$branch+0x2d6>
 80026ca:	2100      	movs	r1, #0
 80026cc:	4668      	mov	r0, sp
 80026ce:	7b40      	ldrb	r0, [r0, #13]
 80026d0:	68aa      	ldr	r2, [r5, #8]
 80026d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026d4:	4790      	blx	r2
 80026d6:	2801      	cmp	r0, #1
 80026d8:	d10d      	bne.n	80026f6 <__iar_annotation$$branch+0x32e>
 80026da:	4862      	ldr	r0, [pc, #392]	@ (8002864 <__iar_annotation$$branch+0x49c>)
 80026dc:	83e8      	strh	r0, [r5, #30]
 80026de:	2169      	movs	r1, #105	@ 0x69
 80026e0:	4668      	mov	r0, sp
 80026e2:	7b40      	ldrb	r0, [r0, #13]
 80026e4:	f7fe f800 	bl	80006e8 <USBPD_PE_Notification>
 80026e8:	2040      	movs	r0, #64	@ 0x40
 80026ea:	7468      	strb	r0, [r5, #17]
 80026ec:	2400      	movs	r4, #0
 80026ee:	2113      	movs	r1, #19
 80026f0:	7c28      	ldrb	r0, [r5, #16]
 80026f2:	f7fd fff9 	bl	80006e8 <USBPD_PE_Notification>
 80026f6:	8be8      	ldrh	r0, [r5, #30]
 80026f8:	2180      	movs	r1, #128	@ 0x80
 80026fa:	0209      	lsls	r1, r1, #8
 80026fc:	4288      	cmp	r0, r1
 80026fe:	d135      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 8002700:	e01e      	b.n	8002740 <__iar_annotation$$branch+0x378>
 8002702:	2101      	movs	r1, #1
 8002704:	4668      	mov	r0, sp
 8002706:	7b40      	ldrb	r0, [r0, #13]
 8002708:	68aa      	ldr	r2, [r5, #8]
 800270a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800270c:	4790      	blx	r2
 800270e:	2801      	cmp	r0, #1
 8002710:	d111      	bne.n	8002736 <__iar_annotation$$branch+0x36e>
 8002712:	0028      	movs	r0, r5
 8002714:	f7fe fb01 	bl	8000d1a <PE_Reset_HardReset>
 8002718:	2205      	movs	r2, #5
 800271a:	2100      	movs	r1, #0
 800271c:	0028      	movs	r0, r5
 800271e:	f7fe ff6d 	bl	80015fc <PE_CallHardResetCallback>
 8002722:	2168      	movs	r1, #104	@ 0x68
 8002724:	4668      	mov	r0, sp
 8002726:	7b40      	ldrb	r0, [r0, #13]
 8002728:	f7fd ffde 	bl	80006e8 <USBPD_PE_Notification>
 800272c:	83ef      	strh	r7, [r5, #30]
 800272e:	24fa      	movs	r4, #250	@ 0xfa
 8002730:	0064      	lsls	r4, r4, #1
 8002732:	2043      	movs	r0, #67	@ 0x43
 8002734:	7468      	strb	r0, [r5, #17]
 8002736:	8be8      	ldrh	r0, [r5, #30]
 8002738:	2180      	movs	r1, #128	@ 0x80
 800273a:	0209      	lsls	r1, r1, #8
 800273c:	4288      	cmp	r0, r1
 800273e:	d115      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 8002740:	2206      	movs	r2, #6
 8002742:	2100      	movs	r1, #0
 8002744:	0028      	movs	r0, r5
 8002746:	f7fe ff59 	bl	80015fc <PE_CallHardResetCallback>
 800274a:	4809      	ldr	r0, [pc, #36]	@ (8002770 <__iar_annotation$$branch+0x3a8>)
 800274c:	1828      	adds	r0, r5, r0
 800274e:	7880      	ldrb	r0, [r0, #2]
 8002750:	2803      	cmp	r0, #3
 8002752:	d200      	bcs.n	8002756 <__iar_annotation$$branch+0x38e>
 8002754:	e6b6      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 8002756:	6968      	ldr	r0, [r5, #20]
 8002758:	0741      	lsls	r1, r0, #29
 800275a:	0fc9      	lsrs	r1, r1, #31
 800275c:	d004      	beq.n	8002768 <__iar_annotation$$branch+0x3a0>
 800275e:	68a8      	ldr	r0, [r5, #8]
 8002760:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002762:	2800      	cmp	r0, #0
 8002764:	d000      	beq.n	8002768 <__iar_annotation$$branch+0x3a0>
 8002766:	e0fa      	b.n	800295e <__iar_annotation$$branch+0x596>
 8002768:	2400      	movs	r4, #0
 800276a:	746c      	strb	r4, [r5, #17]
 800276c:	e5fc      	b.n	8002368 <__iar_annotation$$branch+0xe>
 800276e:	bf00      	nop
 8002770:	0000025e 	.word	0x0000025e
 8002774:	ffff7fff 	.word	0xffff7fff
 8002778:	2000      	movs	r0, #0
 800277a:	9000      	str	r0, [sp, #0]
 800277c:	2303      	movs	r3, #3
 800277e:	2203      	movs	r2, #3
 8002780:	2100      	movs	r1, #0
 8002782:	0028      	movs	r0, r5
 8002784:	f7fe fff8 	bl	8001778 <PE_Send_CtrlMessage>
 8002788:	2800      	cmp	r0, #0
 800278a:	d1ef      	bne.n	800276c <__iar_annotation$$branch+0x3a4>
 800278c:	2001      	movs	r0, #1
 800278e:	7728      	strb	r0, [r5, #28]
 8002790:	e654      	b.n	800243c <__iar_annotation$$branch+0x74>
 8002792:	6868      	ldr	r0, [r5, #4]
 8002794:	6800      	ldr	r0, [r0, #0]
 8002796:	0540      	lsls	r0, r0, #21
 8002798:	0f40      	lsrs	r0, r0, #29
 800279a:	2804      	cmp	r0, #4
 800279c:	d100      	bne.n	80027a0 <__iar_annotation$$branch+0x3d8>
 800279e:	e691      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 80027a0:	2000      	movs	r0, #0
 80027a2:	9000      	str	r0, [sp, #0]
 80027a4:	2350      	movs	r3, #80	@ 0x50
 80027a6:	220d      	movs	r2, #13
 80027a8:	2031      	movs	r0, #49	@ 0x31
 80027aa:	5c29      	ldrb	r1, [r5, r0]
 80027ac:	0028      	movs	r0, r5
 80027ae:	f7fe ffe3 	bl	8001778 <PE_Send_CtrlMessage>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d107      	bne.n	80027c6 <__iar_annotation$$branch+0x3fe>
 80027b6:	2003      	movs	r0, #3
 80027b8:	7728      	strb	r0, [r5, #28]
 80027ba:	83ee      	strh	r6, [r5, #30]
 80027bc:	241b      	movs	r4, #27
 80027be:	2130      	movs	r1, #48	@ 0x30
 80027c0:	7c28      	ldrb	r0, [r5, #16]
 80027c2:	f7fd ff91 	bl	80006e8 <USBPD_PE_Notification>
 80027c6:	e5cf      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80027c8:	4668      	mov	r0, sp
 80027ca:	7b00      	ldrb	r0, [r0, #12]
 80027cc:	2814      	cmp	r0, #20
 80027ce:	d017      	beq.n	8002800 <__iar_annotation$$branch+0x438>
 80027d0:	2030      	movs	r0, #48	@ 0x30
 80027d2:	5c28      	ldrb	r0, [r5, r0]
 80027d4:	2131      	movs	r1, #49	@ 0x31
 80027d6:	5c69      	ldrb	r1, [r5, r1]
 80027d8:	4288      	cmp	r0, r1
 80027da:	d111      	bne.n	8002800 <__iar_annotation$$branch+0x438>
 80027dc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80027de:	491e      	ldr	r1, [pc, #120]	@ (8002858 <__iar_annotation$$branch+0x490>)
 80027e0:	4001      	ands	r1, r0
 80027e2:	2903      	cmp	r1, #3
 80027e4:	d10c      	bne.n	8002800 <__iar_annotation$$branch+0x438>
 80027e6:	2001      	movs	r0, #1
 80027e8:	7728      	strb	r0, [r5, #28]
 80027ea:	83ef      	strh	r7, [r5, #30]
 80027ec:	24fa      	movs	r4, #250	@ 0xfa
 80027ee:	0064      	lsls	r4, r4, #1
 80027f0:	2043      	movs	r0, #67	@ 0x43
 80027f2:	7468      	strb	r0, [r5, #17]
 80027f4:	2014      	movs	r0, #20
 80027f6:	4669      	mov	r1, sp
 80027f8:	7308      	strb	r0, [r1, #12]
 80027fa:	0028      	movs	r0, r5
 80027fc:	f7fe f9df 	bl	8000bbe <PE_Clear_RxEvent>
 8002800:	e6df      	b.n	80025c2 <__iar_annotation$$branch+0x1fa>
 8002802:	9400      	str	r4, [sp, #0]
 8002804:	2343      	movs	r3, #67	@ 0x43
 8002806:	2207      	movs	r2, #7
 8002808:	2100      	movs	r1, #0
 800280a:	0028      	movs	r0, r5
 800280c:	f7fe ffb4 	bl	8001778 <PE_Send_CtrlMessage>
 8002810:	2800      	cmp	r0, #0
 8002812:	d11f      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002814:	2006      	movs	r0, #6
 8002816:	7728      	strb	r0, [r5, #28]
 8002818:	83ee      	strh	r6, [r5, #30]
 800281a:	241b      	movs	r4, #27
 800281c:	210b      	movs	r1, #11
 800281e:	e7cf      	b.n	80027c0 <__iar_annotation$$branch+0x3f8>
 8002820:	4668      	mov	r0, sp
 8002822:	7b00      	ldrb	r0, [r0, #12]
 8002824:	2811      	cmp	r0, #17
 8002826:	d115      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002828:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800282a:	490b      	ldr	r1, [pc, #44]	@ (8002858 <__iar_annotation$$branch+0x490>)
 800282c:	4001      	ands	r1, r0
 800282e:	2906      	cmp	r1, #6
 8002830:	d110      	bne.n	8002854 <__iar_annotation$$branch+0x48c>
 8002832:	212c      	movs	r1, #44	@ 0x2c
 8002834:	7c28      	ldrb	r0, [r5, #16]
 8002836:	f7fd ff57 	bl	80006e8 <USBPD_PE_Notification>
 800283a:	2003      	movs	r0, #3
 800283c:	7468      	strb	r0, [r5, #17]
 800283e:	2400      	movs	r4, #0
 8002840:	4668      	mov	r0, sp
 8002842:	7b00      	ldrb	r0, [r0, #12]
 8002844:	2814      	cmp	r0, #20
 8002846:	d005      	beq.n	8002854 <__iar_annotation$$branch+0x48c>
 8002848:	2014      	movs	r0, #20
 800284a:	4669      	mov	r1, sp
 800284c:	7308      	strb	r0, [r1, #12]
 800284e:	0028      	movs	r0, r5
 8002850:	f7fe f9b5 	bl	8000bbe <PE_Clear_RxEvent>
 8002854:	e588      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002856:	bf00      	nop
 8002858:	0000f01f 	.word	0x0000f01f
 800285c:	0000a328 	.word	0x0000a328
 8002860:	000083e8 	.word	0x000083e8
 8002864:	000088e3 	.word	0x000088e3
 8002868:	2000      	movs	r0, #0
 800286a:	9000      	str	r0, [sp, #0]
 800286c:	2303      	movs	r3, #3
 800286e:	2204      	movs	r2, #4
 8002870:	2100      	movs	r1, #0
 8002872:	0028      	movs	r0, r5
 8002874:	f7fe ff80 	bl	8001778 <PE_Send_CtrlMessage>
 8002878:	e576      	b.n	8002368 <__iar_annotation$$branch+0xe>
 800287a:	4668      	mov	r0, sp
 800287c:	7800      	ldrb	r0, [r0, #0]
 800287e:	2804      	cmp	r0, #4
 8002880:	d006      	beq.n	8002890 <__iar_annotation$$branch+0x4c8>
 8002882:	2000      	movs	r0, #0
 8002884:	7728      	strb	r0, [r5, #28]
 8002886:	7469      	strb	r1, [r5, #17]
 8002888:	2120      	movs	r1, #32
 800288a:	7c28      	ldrb	r0, [r5, #16]
 800288c:	f7fd ff2c 	bl	80006e8 <USBPD_PE_Notification>
 8002890:	a903      	add	r1, sp, #12
 8002892:	0028      	movs	r0, r5
 8002894:	f000 fa1a 	bl	8002ccc <PE_StateMachine_SNK_ReadyWait>
 8002898:	e565      	b.n	8002366 <__iar_annotation$$branch+0xc>
 800289a:	68a8      	ldr	r0, [r5, #8]
 800289c:	6881      	ldr	r1, [r0, #8]
 800289e:	2900      	cmp	r1, #0
 80028a0:	d02e      	beq.n	8002900 <__iar_annotation$$branch+0x538>
 80028a2:	4668      	mov	r0, sp
 80028a4:	7b40      	ldrb	r0, [r0, #13]
 80028a6:	4788      	blx	r1
 80028a8:	280a      	cmp	r0, #10
 80028aa:	d002      	beq.n	80028b2 <__iar_annotation$$branch+0x4ea>
 80028ac:	280d      	cmp	r0, #13
 80028ae:	d022      	beq.n	80028f6 <__iar_annotation$$branch+0x52e>
 80028b0:	e026      	b.n	8002900 <__iar_annotation$$branch+0x538>
 80028b2:	2201      	movs	r2, #1
 80028b4:	2100      	movs	r1, #0
 80028b6:	7c28      	ldrb	r0, [r5, #16]
 80028b8:	68ab      	ldr	r3, [r5, #8]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	4798      	blx	r3
 80028be:	2000      	movs	r0, #0
 80028c0:	9000      	str	r0, [sp, #0]
 80028c2:	2359      	movs	r3, #89	@ 0x59
 80028c4:	2203      	movs	r2, #3
 80028c6:	2100      	movs	r1, #0
 80028c8:	0028      	movs	r0, r5
 80028ca:	f7fe ff55 	bl	8001778 <PE_Send_CtrlMessage>
 80028ce:	2800      	cmp	r0, #0
 80028d0:	d110      	bne.n	80028f4 <__iar_annotation$$branch+0x52c>
 80028d2:	2008      	movs	r0, #8
 80028d4:	7728      	strb	r0, [r5, #28]
 80028d6:	6868      	ldr	r0, [r5, #4]
 80028d8:	6801      	ldr	r1, [r0, #0]
 80028da:	2210      	movs	r2, #16
 80028dc:	430a      	orrs	r2, r1
 80028de:	6002      	str	r2, [r0, #0]
 80028e0:	2206      	movs	r2, #6
 80028e2:	2100      	movs	r1, #0
 80028e4:	7c28      	ldrb	r0, [r5, #16]
 80028e6:	68ab      	ldr	r3, [r5, #8]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	4798      	blx	r3
 80028ec:	48b0      	ldr	r0, [pc, #704]	@ (8002bb0 <__iar_annotation$$branch+0x7e8>)
 80028ee:	83e8      	strh	r0, [r5, #30]
 80028f0:	24e1      	movs	r4, #225	@ 0xe1
 80028f2:	00a4      	lsls	r4, r4, #2
 80028f4:	e538      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80028f6:	2000      	movs	r0, #0
 80028f8:	9000      	str	r0, [sp, #0]
 80028fa:	2303      	movs	r3, #3
 80028fc:	220c      	movs	r2, #12
 80028fe:	e7b7      	b.n	8002870 <__iar_annotation$$branch+0x4a8>
 8002900:	202a      	movs	r0, #42	@ 0x2a
 8002902:	e5e0      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002904:	4668      	mov	r0, sp
 8002906:	7b00      	ldrb	r0, [r0, #12]
 8002908:	2811      	cmp	r0, #17
 800290a:	d119      	bne.n	8002940 <__iar_annotation$$branch+0x578>
 800290c:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 800290e:	49c1      	ldr	r1, [pc, #772]	@ (8002c14 <__iar_annotation$$branch+0x84c>)
 8002910:	4001      	ands	r1, r0
 8002912:	2906      	cmp	r1, #6
 8002914:	d114      	bne.n	8002940 <__iar_annotation$$branch+0x578>
 8002916:	7f28      	ldrb	r0, [r5, #28]
 8002918:	2809      	cmp	r0, #9
 800291a:	d005      	beq.n	8002928 <__iar_annotation$$branch+0x560>
 800291c:	2209      	movs	r2, #9
 800291e:	2100      	movs	r1, #0
 8002920:	7c28      	ldrb	r0, [r5, #16]
 8002922:	68ab      	ldr	r3, [r5, #8]
 8002924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002926:	4798      	blx	r3
 8002928:	2053      	movs	r0, #83	@ 0x53
 800292a:	7468      	strb	r0, [r5, #17]
 800292c:	4668      	mov	r0, sp
 800292e:	7b00      	ldrb	r0, [r0, #12]
 8002930:	2814      	cmp	r0, #20
 8002932:	d005      	beq.n	8002940 <__iar_annotation$$branch+0x578>
 8002934:	2014      	movs	r0, #20
 8002936:	4669      	mov	r1, sp
 8002938:	7308      	strb	r0, [r1, #12]
 800293a:	0028      	movs	r0, r5
 800293c:	f7fe f93f 	bl	8000bbe <PE_Clear_RxEvent>
 8002940:	8be8      	ldrh	r0, [r5, #30]
 8002942:	03a1      	lsls	r1, r4, #14
 8002944:	4288      	cmp	r0, r1
 8002946:	d1d5      	bne.n	80028f4 <__iar_annotation$$branch+0x52c>
 8002948:	220f      	movs	r2, #15
 800294a:	2100      	movs	r1, #0
 800294c:	7c28      	ldrb	r0, [r5, #16]
 800294e:	68ab      	ldr	r3, [r5, #8]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	4798      	blx	r3
 8002954:	68a8      	ldr	r0, [r5, #8]
 8002956:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002958:	2800      	cmp	r0, #0
 800295a:	d100      	bne.n	800295e <__iar_annotation$$branch+0x596>
 800295c:	e5b2      	b.n	80024c4 <__iar_annotation$$branch+0xfc>
 800295e:	2092      	movs	r0, #146	@ 0x92
 8002960:	e5b1      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002962:	0028      	movs	r0, r5
 8002964:	f7fe fe53 	bl	800160e <PE_SetPowerNegotiation>
 8002968:	220a      	movs	r2, #10
 800296a:	2100      	movs	r1, #0
 800296c:	7c28      	ldrb	r0, [r5, #16]
 800296e:	68ab      	ldr	r3, [r5, #8]
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	4798      	blx	r3
 8002974:	6868      	ldr	r0, [r5, #4]
 8002976:	7800      	ldrb	r0, [r0, #0]
 8002978:	0780      	lsls	r0, r0, #30
 800297a:	0f80      	lsrs	r0, r0, #30
 800297c:	2802      	cmp	r0, #2
 800297e:	d102      	bne.n	8002986 <__iar_annotation$$branch+0x5be>
 8002980:	7c28      	ldrb	r0, [r5, #16]
 8002982:	f003 f820 	bl	80059c6 <USBPD_PRL_SRCSetSinkNG>
 8002986:	2101      	movs	r1, #1
 8002988:	0028      	movs	r0, r5
 800298a:	f7fe f8d3 	bl	8000b34 <PE_ChangePowerRole>
 800298e:	7f28      	ldrb	r0, [r5, #28]
 8002990:	2809      	cmp	r0, #9
 8002992:	d005      	beq.n	80029a0 <__iar_annotation$$branch+0x5d8>
 8002994:	220b      	movs	r2, #11
 8002996:	2101      	movs	r1, #1
 8002998:	7c28      	ldrb	r0, [r5, #16]
 800299a:	68ab      	ldr	r3, [r5, #8]
 800299c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299e:	4798      	blx	r3
 80029a0:	2000      	movs	r0, #0
 80029a2:	9000      	str	r0, [sp, #0]
 80029a4:	235b      	movs	r3, #91	@ 0x5b
 80029a6:	2206      	movs	r2, #6
 80029a8:	2100      	movs	r1, #0
 80029aa:	0028      	movs	r0, r5
 80029ac:	f7fe fee4 	bl	8001778 <PE_Send_CtrlMessage>
 80029b0:	2800      	cmp	r0, #0
 80029b2:	d108      	bne.n	80029c6 <__iar_annotation$$branch+0x5fe>
 80029b4:	220c      	movs	r2, #12
 80029b6:	2100      	movs	r1, #0
 80029b8:	7c28      	ldrb	r0, [r5, #16]
 80029ba:	68ab      	ldr	r3, [r5, #8]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	4798      	blx	r3
 80029c0:	48c1      	ldr	r0, [pc, #772]	@ (8002cc8 <.text_3>)
 80029c2:	83e8      	strh	r0, [r5, #30]
 80029c4:	2414      	movs	r4, #20
 80029c6:	7c68      	ldrb	r0, [r5, #17]
 80029c8:	285b      	cmp	r0, #91	@ 0x5b
 80029ca:	d00f      	beq.n	80029ec <__iar_annotation$$branch+0x624>
 80029cc:	2100      	movs	r1, #0
 80029ce:	0028      	movs	r0, r5
 80029d0:	f7fe f8b0 	bl	8000b34 <PE_ChangePowerRole>
 80029d4:	2206      	movs	r2, #6
 80029d6:	2101      	movs	r1, #1
 80029d8:	7c28      	ldrb	r0, [r5, #16]
 80029da:	68ab      	ldr	r3, [r5, #8]
 80029dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029de:	4798      	blx	r3
 80029e0:	2207      	movs	r2, #7
 80029e2:	2100      	movs	r1, #0
 80029e4:	7c28      	ldrb	r0, [r5, #16]
 80029e6:	68ab      	ldr	r3, [r5, #8]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ea:	4798      	blx	r3
 80029ec:	e4bc      	b.n	8002368 <__iar_annotation$$branch+0xe>
 80029ee:	9400      	str	r4, [sp, #0]
 80029f0:	2358      	movs	r3, #88	@ 0x58
 80029f2:	220a      	movs	r2, #10
 80029f4:	2100      	movs	r1, #0
 80029f6:	0028      	movs	r0, r5
 80029f8:	f7fe febe 	bl	8001778 <PE_Send_CtrlMessage>
 80029fc:	2800      	cmp	r0, #0
 80029fe:	d105      	bne.n	8002a0c <__iar_annotation$$branch+0x644>
 8002a00:	2008      	movs	r0, #8
 8002a02:	7728      	strb	r0, [r5, #28]
 8002a04:	83ee      	strh	r6, [r5, #30]
 8002a06:	241b      	movs	r4, #27
 8002a08:	2202      	movs	r2, #2
 8002a0a:	e7ea      	b.n	80029e2 <__iar_annotation$$branch+0x61a>
 8002a0c:	220f      	movs	r2, #15
 8002a0e:	e7e8      	b.n	80029e2 <__iar_annotation$$branch+0x61a>
 8002a10:	4669      	mov	r1, sp
 8002a12:	7b09      	ldrb	r1, [r1, #12]
 8002a14:	2911      	cmp	r1, #17
 8002a16:	d10c      	bne.n	8002a32 <__iar_annotation$$branch+0x66a>
 8002a18:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8002a1a:	4201      	tst	r1, r0
 8002a1c:	d109      	bne.n	8002a32 <__iar_annotation$$branch+0x66a>
 8002a1e:	06c8      	lsls	r0, r1, #27
 8002a20:	0ec0      	lsrs	r0, r0, #27
 8002a22:	2803      	cmp	r0, #3
 8002a24:	d006      	beq.n	8002a34 <__iar_annotation$$branch+0x66c>
 8002a26:	2804      	cmp	r0, #4
 8002a28:	d02d      	beq.n	8002a86 <__iar_annotation$$branch+0x6be>
 8002a2a:	280c      	cmp	r0, #12
 8002a2c:	d029      	beq.n	8002a82 <__iar_annotation$$branch+0x6ba>
 8002a2e:	2810      	cmp	r0, #16
 8002a30:	d032      	beq.n	8002a98 <__iar_annotation$$branch+0x6d0>
 8002a32:	e0a5      	b.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002a34:	6868      	ldr	r0, [r5, #4]
 8002a36:	6801      	ldr	r1, [r0, #0]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	6002      	str	r2, [r0, #0]
 8002a3e:	485c      	ldr	r0, [pc, #368]	@ (8002bb0 <__iar_annotation$$branch+0x7e8>)
 8002a40:	83e8      	strh	r0, [r5, #30]
 8002a42:	24e1      	movs	r4, #225	@ 0xe1
 8002a44:	00a4      	lsls	r4, r4, #2
 8002a46:	7f28      	ldrb	r0, [r5, #28]
 8002a48:	2809      	cmp	r0, #9
 8002a4a:	d005      	beq.n	8002a58 <__iar_annotation$$branch+0x690>
 8002a4c:	2206      	movs	r2, #6
 8002a4e:	2100      	movs	r1, #0
 8002a50:	7c28      	ldrb	r0, [r5, #16]
 8002a52:	68ab      	ldr	r3, [r5, #8]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a56:	4798      	blx	r3
 8002a58:	2104      	movs	r1, #4
 8002a5a:	0028      	movs	r0, r5
 8002a5c:	f7fe fdd7 	bl	800160e <PE_SetPowerNegotiation>
 8002a60:	213a      	movs	r1, #58	@ 0x3a
 8002a62:	7c28      	ldrb	r0, [r5, #16]
 8002a64:	f7fd fe40 	bl	80006e8 <USBPD_PE_Notification>
 8002a68:	4668      	mov	r0, sp
 8002a6a:	7b00      	ldrb	r0, [r0, #12]
 8002a6c:	2814      	cmp	r0, #20
 8002a6e:	d005      	beq.n	8002a7c <__iar_annotation$$branch+0x6b4>
 8002a70:	2014      	movs	r0, #20
 8002a72:	4669      	mov	r1, sp
 8002a74:	7308      	strb	r0, [r1, #12]
 8002a76:	0028      	movs	r0, r5
 8002a78:	f7fe f8a1 	bl	8000bbe <PE_Clear_RxEvent>
 8002a7c:	2059      	movs	r0, #89	@ 0x59
 8002a7e:	7468      	strb	r0, [r5, #17]
 8002a80:	e07e      	b.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002a82:	213b      	movs	r1, #59	@ 0x3b
 8002a84:	e000      	b.n	8002a88 <__iar_annotation$$branch+0x6c0>
 8002a86:	2116      	movs	r1, #22
 8002a88:	7c28      	ldrb	r0, [r5, #16]
 8002a8a:	f7fd fe2d 	bl	80006e8 <USBPD_PE_Notification>
 8002a8e:	4668      	mov	r0, sp
 8002a90:	7b00      	ldrb	r0, [r0, #12]
 8002a92:	2814      	cmp	r0, #20
 8002a94:	d108      	bne.n	8002aa8 <__iar_annotation$$branch+0x6e0>
 8002a96:	e070      	b.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002a98:	2117      	movs	r1, #23
 8002a9a:	7c28      	ldrb	r0, [r5, #16]
 8002a9c:	f7fd fe24 	bl	80006e8 <USBPD_PE_Notification>
 8002aa0:	4668      	mov	r0, sp
 8002aa2:	7b00      	ldrb	r0, [r0, #12]
 8002aa4:	2814      	cmp	r0, #20
 8002aa6:	d068      	beq.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002aa8:	2014      	movs	r0, #20
 8002aaa:	4669      	mov	r1, sp
 8002aac:	7308      	strb	r0, [r1, #12]
 8002aae:	0028      	movs	r0, r5
 8002ab0:	f7fe f885 	bl	8000bbe <PE_Clear_RxEvent>
 8002ab4:	e061      	b.n	8002b7a <__iar_annotation$$branch+0x7b2>
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	9004      	str	r0, [sp, #16]
 8002aba:	ab04      	add	r3, sp, #16
 8002abc:	aa05      	add	r2, sp, #20
 8002abe:	2100      	movs	r1, #0
 8002ac0:	7c28      	ldrb	r0, [r5, #16]
 8002ac2:	68ae      	ldr	r6, [r5, #8]
 8002ac4:	6976      	ldr	r6, [r6, #20]
 8002ac6:	47b0      	blx	r6
 8002ac8:	2104      	movs	r1, #4
 8002aca:	9804      	ldr	r0, [sp, #16]
 8002acc:	f7fe fdf2 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	d001      	beq.n	8002ad8 <__iar_annotation$$branch+0x710>
 8002ad4:	2003      	movs	r0, #3
 8002ad6:	e4b5      	b.n	8002444 <__iar_annotation$$branch+0x7c>
 8002ad8:	9002      	str	r0, [sp, #8]
 8002ada:	2003      	movs	r0, #3
 8002adc:	9001      	str	r0, [sp, #4]
 8002ade:	9804      	ldr	r0, [sp, #16]
 8002ae0:	0880      	lsrs	r0, r0, #2
 8002ae2:	9000      	str	r0, [sp, #0]
 8002ae4:	ab05      	add	r3, sp, #20
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	2100      	movs	r1, #0
 8002aea:	0028      	movs	r0, r5
 8002aec:	f7fe fe6f 	bl	80017ce <PE_Send_DataMessage>
 8002af0:	e43a      	b.n	8002368 <__iar_annotation$$branch+0xe>
 8002af2:	2000      	movs	r0, #0
 8002af4:	9002      	str	r0, [sp, #8]
 8002af6:	2003      	movs	r0, #3
 8002af8:	9001      	str	r0, [sp, #4]
 8002afa:	2001      	movs	r0, #1
 8002afc:	9000      	str	r0, [sp, #0]
 8002afe:	002b      	movs	r3, r5
 8002b00:	332c      	adds	r3, #44	@ 0x2c
 8002b02:	2206      	movs	r2, #6
 8002b04:	2100      	movs	r1, #0
 8002b06:	0028      	movs	r0, r5
 8002b08:	f7fe fe61 	bl	80017ce <PE_Send_DataMessage>
 8002b0c:	2800      	cmp	r0, #0
 8002b0e:	d1ef      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b10:	215d      	movs	r1, #93	@ 0x5d
 8002b12:	e655      	b.n	80027c0 <__iar_annotation$$branch+0x3f8>
 8002b14:	9400      	str	r4, [sp, #0]
 8002b16:	2366      	movs	r3, #102	@ 0x66
 8002b18:	2214      	movs	r2, #20
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	0028      	movs	r0, r5
 8002b1e:	f7fe fe2b 	bl	8001778 <PE_Send_CtrlMessage>
 8002b22:	2800      	cmp	r0, #0
 8002b24:	d1e4      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b26:	83ee      	strh	r6, [r5, #30]
 8002b28:	241b      	movs	r4, #27
 8002b2a:	214a      	movs	r1, #74	@ 0x4a
 8002b2c:	7c28      	ldrb	r0, [r5, #16]
 8002b2e:	f7fd fddb 	bl	80006e8 <USBPD_PE_Notification>
 8002b32:	200b      	movs	r0, #11
 8002b34:	7728      	strb	r0, [r5, #28]
 8002b36:	e7db      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b38:	4668      	mov	r0, sp
 8002b3a:	7b00      	ldrb	r0, [r0, #12]
 8002b3c:	2811      	cmp	r0, #17
 8002b3e:	d11f      	bne.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b40:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002b42:	0bc1      	lsrs	r1, r0, #15
 8002b44:	d01c      	beq.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b46:	06c0      	lsls	r0, r0, #27
 8002b48:	0ec0      	lsrs	r0, r0, #27
 8002b4a:	280c      	cmp	r0, #12
 8002b4c:	d118      	bne.n	8002b80 <__iar_annotation$$branch+0x7b8>
 8002b4e:	2304      	movs	r3, #4
 8002b50:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8002b52:	1d02      	adds	r2, r0, #4
 8002b54:	210a      	movs	r1, #10
 8002b56:	7c28      	ldrb	r0, [r5, #16]
 8002b58:	68ac      	ldr	r4, [r5, #8]
 8002b5a:	69a4      	ldr	r4, [r4, #24]
 8002b5c:	47a0      	blx	r4
 8002b5e:	4668      	mov	r0, sp
 8002b60:	7b00      	ldrb	r0, [r0, #12]
 8002b62:	2814      	cmp	r0, #20
 8002b64:	d005      	beq.n	8002b72 <__iar_annotation$$branch+0x7aa>
 8002b66:	2014      	movs	r0, #20
 8002b68:	4669      	mov	r1, sp
 8002b6a:	7308      	strb	r0, [r1, #12]
 8002b6c:	0028      	movs	r0, r5
 8002b6e:	f7fe f826 	bl	8000bbe <PE_Clear_RxEvent>
 8002b72:	214b      	movs	r1, #75	@ 0x4b
 8002b74:	7c28      	ldrb	r0, [r5, #16]
 8002b76:	f7fd fdb7 	bl	80006e8 <USBPD_PE_Notification>
 8002b7a:	2003      	movs	r0, #3
 8002b7c:	7468      	strb	r0, [r5, #17]
 8002b7e:	2400      	movs	r4, #0
 8002b80:	8be8      	ldrh	r0, [r5, #30]
 8002b82:	2180      	movs	r1, #128	@ 0x80
 8002b84:	0209      	lsls	r1, r1, #8
 8002b86:	4288      	cmp	r0, r1
 8002b88:	d1b2      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002b8a:	e041      	b.n	8002c10 <__iar_annotation$$branch+0x848>
 8002b8c:	4895      	ldr	r0, [pc, #596]	@ (8002de4 <.text_5>)
 8002b8e:	182f      	adds	r7, r5, r0
 8002b90:	9400      	str	r4, [sp, #0]
 8002b92:	2339      	movs	r3, #57	@ 0x39
 8002b94:	783a      	ldrb	r2, [r7, #0]
 8002b96:	2100      	movs	r1, #0
 8002b98:	0028      	movs	r0, r5
 8002b9a:	f7fe fded 	bl	8001778 <PE_Send_CtrlMessage>
 8002b9e:	2800      	cmp	r0, #0
 8002ba0:	d1a6      	bne.n	8002af0 <__iar_annotation$$branch+0x728>
 8002ba2:	7878      	ldrb	r0, [r7, #1]
 8002ba4:	7728      	strb	r0, [r5, #28]
 8002ba6:	2144      	movs	r1, #68	@ 0x44
 8002ba8:	7c28      	ldrb	r0, [r5, #16]
 8002baa:	f7fd fd9d 	bl	80006e8 <USBPD_PE_Notification>
 8002bae:	e4b8      	b.n	8002522 <__iar_annotation$$branch+0x15a>
 8002bb0:	00008384 	.word	0x00008384
 8002bb4:	4668      	mov	r0, sp
 8002bb6:	7b00      	ldrb	r0, [r0, #12]
 8002bb8:	2814      	cmp	r0, #20
 8002bba:	d024      	beq.n	8002c06 <__iar_annotation$$branch+0x83e>
 8002bbc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002bbe:	0bc0      	lsrs	r0, r0, #15
 8002bc0:	d00e      	beq.n	8002be0 <__iar_annotation$$branch+0x818>
 8002bc2:	0028      	movs	r0, r5
 8002bc4:	f7fe fe40 	bl	8001848 <PE_Check_ExtendedMessage>
 8002bc8:	4668      	mov	r0, sp
 8002bca:	7b00      	ldrb	r0, [r0, #12]
 8002bcc:	2814      	cmp	r0, #20
 8002bce:	d005      	beq.n	8002bdc <__iar_annotation$$branch+0x814>
 8002bd0:	2014      	movs	r0, #20
 8002bd2:	4669      	mov	r1, sp
 8002bd4:	7308      	strb	r0, [r1, #12]
 8002bd6:	0028      	movs	r0, r5
 8002bd8:	f7fd fff1 	bl	8000bbe <PE_Clear_RxEvent>
 8002bdc:	2000      	movs	r0, #0
 8002bde:	83e8      	strh	r0, [r5, #30]
 8002be0:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8002be2:	490c      	ldr	r1, [pc, #48]	@ (8002c14 <__iar_annotation$$branch+0x84c>)
 8002be4:	4001      	ands	r1, r0
 8002be6:	2910      	cmp	r1, #16
 8002be8:	d10d      	bne.n	8002c06 <__iar_annotation$$branch+0x83e>
 8002bea:	2003      	movs	r0, #3
 8002bec:	7468      	strb	r0, [r5, #17]
 8002bee:	2400      	movs	r4, #0
 8002bf0:	4668      	mov	r0, sp
 8002bf2:	7b00      	ldrb	r0, [r0, #12]
 8002bf4:	2814      	cmp	r0, #20
 8002bf6:	d005      	beq.n	8002c04 <__iar_annotation$$branch+0x83c>
 8002bf8:	2014      	movs	r0, #20
 8002bfa:	4669      	mov	r1, sp
 8002bfc:	7308      	strb	r0, [r1, #12]
 8002bfe:	0028      	movs	r0, r5
 8002c00:	f7fd ffdd 	bl	8000bbe <PE_Clear_RxEvent>
 8002c04:	83ec      	strh	r4, [r5, #30]
 8002c06:	8be8      	ldrh	r0, [r5, #30]
 8002c08:	2180      	movs	r1, #128	@ 0x80
 8002c0a:	0209      	lsls	r1, r1, #8
 8002c0c:	4288      	cmp	r0, r1
 8002c0e:	d11c      	bne.n	8002c4a <__iar_annotation$$branch+0x882>
 8002c10:	2003      	movs	r0, #3
 8002c12:	e458      	b.n	80024c6 <__iar_annotation$$branch+0xfe>
 8002c14:	0000f01f 	.word	0x0000f01f
 8002c18:	0028      	movs	r0, r5
 8002c1a:	f7fe ff37 	bl	8001a8c <PE_SubStateMachine_ExtendedMessages>
 8002c1e:	e63b      	b.n	8002898 <__iar_annotation$$branch+0x4d0>
 8002c20:	a903      	add	r1, sp, #12
 8002c22:	0028      	movs	r0, r5
 8002c24:	f7fe f9d4 	bl	8000fd0 <PE_SubStateMachine_Generic>
 8002c28:	e636      	b.n	8002898 <__iar_annotation$$branch+0x4d0>
 8002c2a:	a903      	add	r1, sp, #12
 8002c2c:	0028      	movs	r0, r5
 8002c2e:	f001 f9ef 	bl	8004010 <PE_SubStateMachine_VconnSwap>
 8002c32:	0004      	movs	r4, r0
 8002c34:	6868      	ldr	r0, [r5, #4]
 8002c36:	6800      	ldr	r0, [r0, #0]
 8002c38:	0401      	lsls	r1, r0, #16
 8002c3a:	0fc9      	lsrs	r1, r1, #31
 8002c3c:	d006      	beq.n	8002c4c <__iar_annotation$$branch+0x884>
 8002c3e:	6828      	ldr	r0, [r5, #0]
 8002c40:	6801      	ldr	r1, [r0, #0]
 8002c42:	4668      	mov	r0, sp
 8002c44:	7b40      	ldrb	r0, [r0, #13]
 8002c46:	f002 fee1 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002c4a:	e751      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	e7f8      	b.n	8002c42 <__iar_annotation$$branch+0x87a>
 8002c50:	4668      	mov	r0, sp
 8002c52:	7b01      	ldrb	r1, [r0, #12]
 8002c54:	0028      	movs	r0, r5
 8002c56:	f002 fc3b 	bl	80054d0 <PE_StateMachine_UVDM>
 8002c5a:	e749      	b.n	8002af0 <__iar_annotation$$branch+0x728>
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	9000      	str	r0, [sp, #0]
 8002c60:	2358      	movs	r3, #88	@ 0x58
 8002c62:	2213      	movs	r2, #19
 8002c64:	2100      	movs	r1, #0
 8002c66:	0028      	movs	r0, r5
 8002c68:	f7fe fd86 	bl	8001778 <PE_Send_CtrlMessage>
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d1f4      	bne.n	8002c5a <__iar_annotation$$branch+0x892>
 8002c70:	2009      	movs	r0, #9
 8002c72:	7728      	strb	r0, [r5, #28]
 8002c74:	e455      	b.n	8002522 <__iar_annotation$$branch+0x15a>
 8002c76:	6968      	ldr	r0, [r5, #20]
 8002c78:	2701      	movs	r7, #1
 8002c7a:	0b41      	lsrs	r1, r0, #13
 8002c7c:	4039      	ands	r1, r7
 8002c7e:	d019      	beq.n	8002cb4 <__iar_annotation$$branch+0x8ec>
 8002c80:	0b80      	lsrs	r0, r0, #14
 8002c82:	4038      	ands	r0, r7
 8002c84:	d007      	beq.n	8002c96 <__iar_annotation$$branch+0x8ce>
 8002c86:	215b      	movs	r1, #91	@ 0x5b
 8002c88:	7c28      	ldrb	r0, [r5, #16]
 8002c8a:	f7fd fd2d 	bl	80006e8 <USBPD_PE_Notification>
 8002c8e:	6968      	ldr	r0, [r5, #20]
 8002c90:	4955      	ldr	r1, [pc, #340]	@ (8002de8 <.text_6>)
 8002c92:	4001      	ands	r1, r0
 8002c94:	6169      	str	r1, [r5, #20]
 8002c96:	2003      	movs	r0, #3
 8002c98:	7468      	strb	r0, [r5, #17]
 8002c9a:	7ca9      	ldrb	r1, [r5, #18]
 8002c9c:	2903      	cmp	r1, #3
 8002c9e:	d008      	beq.n	8002cb2 <__iar_annotation$$branch+0x8ea>
 8002ca0:	74a8      	strb	r0, [r5, #18]
 8002ca2:	2000      	movs	r0, #0
 8002ca4:	9000      	str	r0, [sp, #0]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2203      	movs	r2, #3
 8002caa:	7c29      	ldrb	r1, [r5, #16]
 8002cac:	2004      	movs	r0, #4
 8002cae:	6834      	ldr	r4, [r6, #0]
 8002cb0:	47a0      	blx	r4
 8002cb2:	2401      	movs	r4, #1
 8002cb4:	6968      	ldr	r0, [r5, #20]
 8002cb6:	494d      	ldr	r1, [pc, #308]	@ (8002dec <.text_7>)
 8002cb8:	4001      	ands	r1, r0
 8002cba:	6169      	str	r1, [r5, #20]
 8002cbc:	2c00      	cmp	r4, #0
 8002cbe:	d101      	bne.n	8002cc4 <__iar_annotation$$branch>

08002cc0 <__iar_annotation$$branch>:
 8002cc0:	f7ff fa3e 	bl	8002140 <USBPD_PE_StateMachine_SNK+0xb0>

08002cc4 <__iar_annotation$$branch>:
 8002cc4:	f7ff fb8e 	bl	80023e4 <__iar_annotation$$branch+0x1c>

08002cc8 <.text_3>:
 8002cc8:	00008014 	.word	0x00008014

08002ccc <PE_StateMachine_SNK_ReadyWait>:
 8002ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cce:	0004      	movs	r4, r0
 8002cd0:	000e      	movs	r6, r1
 8002cd2:	2702      	movs	r7, #2
 8002cd4:	7830      	ldrb	r0, [r6, #0]
 8002cd6:	2814      	cmp	r0, #20
 8002cd8:	d00b      	beq.n	8002cf2 <PE_StateMachine_SNK_ReadyWait+0x26>
 8002cda:	0020      	movs	r0, r4
 8002cdc:	f7fe fffc 	bl	8001cd8 <PE_ManageRXEvent>
 8002ce0:	7830      	ldrb	r0, [r6, #0]
 8002ce2:	2814      	cmp	r0, #20
 8002ce4:	d07b      	beq.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002ce6:	2014      	movs	r0, #20
 8002ce8:	7030      	strb	r0, [r6, #0]
 8002cea:	0020      	movs	r0, r4
 8002cec:	f7fd ff67 	bl	8000bbe <PE_Clear_RxEvent>
 8002cf0:	e075      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002cf2:	6961      	ldr	r1, [r4, #20]
 8002cf4:	0cc8      	lsrs	r0, r1, #19
 8002cf6:	03be      	lsls	r6, r7, #14
 8002cf8:	2700      	movs	r7, #0
 8002cfa:	2800      	cmp	r0, #0
 8002cfc:	d021      	beq.n	8002d42 <PE_StateMachine_SNK_ReadyWait+0x76>
 8002cfe:	8c21      	ldrh	r1, [r4, #32]
 8002d00:	42b1      	cmp	r1, r6
 8002d02:	d111      	bne.n	8002d28 <PE_StateMachine_SNK_ReadyWait+0x5c>
 8002d04:	200f      	movs	r0, #15
 8002d06:	7460      	strb	r0, [r4, #17]
 8002d08:	9700      	str	r7, [sp, #0]
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2270      	movs	r2, #112	@ 0x70
 8002d0e:	7c21      	ldrb	r1, [r4, #16]
 8002d10:	2009      	movs	r0, #9
 8002d12:	4d37      	ldr	r5, [pc, #220]	@ (8002df0 <.text_8>)
 8002d14:	682d      	ldr	r5, [r5, #0]
 8002d16:	47a8      	blx	r5
 8002d18:	2098      	movs	r0, #152	@ 0x98
 8002d1a:	0080      	lsls	r0, r0, #2
 8002d1c:	5c20      	ldrb	r0, [r4, r0]
 8002d1e:	1c40      	adds	r0, r0, #1
 8002d20:	2198      	movs	r1, #152	@ 0x98
 8002d22:	0089      	lsls	r1, r1, #2
 8002d24:	5460      	strb	r0, [r4, r1]
 8002d26:	e05a      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d28:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002d2a:	0509      	lsls	r1, r1, #20
 8002d2c:	0f49      	lsrs	r1, r1, #29
 8002d2e:	180a      	adds	r2, r1, r0
 8002d30:	2333      	movs	r3, #51	@ 0x33
 8002d32:	435a      	muls	r2, r3
 8002d34:	4316      	orrs	r6, r2
 8002d36:	8426      	strh	r6, [r4, #32]
 8002d38:	180f      	adds	r7, r1, r0
 8002d3a:	2033      	movs	r0, #51	@ 0x33
 8002d3c:	4347      	muls	r7, r0
 8002d3e:	b2bf      	uxth	r7, r7
 8002d40:	e04d      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d42:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8002d44:	42b0      	cmp	r0, r6
 8002d46:	d104      	bne.n	8002d52 <PE_StateMachine_SNK_ReadyWait+0x86>
 8002d48:	2045      	movs	r0, #69	@ 0x45
 8002d4a:	7460      	strb	r0, [r4, #17]
 8002d4c:	430e      	orrs	r6, r1
 8002d4e:	6166      	str	r6, [r4, #20]
 8002d50:	e045      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002d52:	7c20      	ldrb	r0, [r4, #16]
 8002d54:	f7fd ff58 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d128      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d5c:	2032      	movs	r0, #50	@ 0x32
 8002d5e:	5c20      	ldrb	r0, [r4, r0]
 8002d60:	2800      	cmp	r0, #0
 8002d62:	d024      	beq.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d64:	6860      	ldr	r0, [r4, #4]
 8002d66:	6800      	ldr	r0, [r0, #0]
 8002d68:	2103      	movs	r1, #3
 8002d6a:	2203      	movs	r2, #3
 8002d6c:	4002      	ands	r2, r0
 8002d6e:	2a01      	cmp	r2, #1
 8002d70:	d007      	beq.n	8002d82 <PE_StateMachine_SNK_ReadyWait+0xb6>
 8002d72:	4001      	ands	r1, r0
 8002d74:	2902      	cmp	r1, #2
 8002d76:	d11a      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d78:	7c20      	ldrb	r0, [r4, #16]
 8002d7a:	f002 fe3b 	bl	80059f4 <USBPD_PRL_IsResistor_SinkTxOK>
 8002d7e:	2801      	cmp	r0, #1
 8002d80:	d115      	bne.n	8002dae <PE_StateMachine_SNK_ReadyWait+0xe2>
 8002d82:	2033      	movs	r0, #51	@ 0x33
 8002d84:	5c20      	ldrb	r0, [r4, r0]
 8002d86:	2131      	movs	r1, #49	@ 0x31
 8002d88:	5460      	strb	r0, [r4, r1]
 8002d8a:	2032      	movs	r0, #50	@ 0x32
 8002d8c:	5c20      	ldrb	r0, [r4, r0]
 8002d8e:	7460      	strb	r0, [r4, #17]
 8002d90:	2845      	cmp	r0, #69	@ 0x45
 8002d92:	d102      	bne.n	8002d9a <PE_StateMachine_SNK_ReadyWait+0xce>
 8002d94:	6960      	ldr	r0, [r4, #20]
 8002d96:	4306      	orrs	r6, r0
 8002d98:	6166      	str	r6, [r4, #20]
 8002d9a:	2132      	movs	r1, #50	@ 0x32
 8002d9c:	5467      	strb	r7, [r4, r1]
 8002d9e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002da0:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8002da2:	6960      	ldr	r0, [r4, #20]
 8002da4:	2180      	movs	r1, #128	@ 0x80
 8002da6:	01c9      	lsls	r1, r1, #7
 8002da8:	4301      	orrs	r1, r0
 8002daa:	6161      	str	r1, [r4, #20]
 8002dac:	e017      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002dae:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002db0:	42b0      	cmp	r0, r6
 8002db2:	d109      	bne.n	8002dc8 <PE_StateMachine_SNK_ReadyWait+0xfc>
 8002db4:	8467      	strh	r7, [r4, #34]	@ 0x22
 8002db6:	2098      	movs	r0, #152	@ 0x98
 8002db8:	0080      	lsls	r0, r0, #2
 8002dba:	1820      	adds	r0, r4, r0
 8002dbc:	7881      	ldrb	r1, [r0, #2]
 8002dbe:	1c49      	adds	r1, r1, #1
 8002dc0:	7081      	strb	r1, [r0, #2]
 8002dc2:	2005      	movs	r0, #5
 8002dc4:	7460      	strb	r0, [r4, #17]
 8002dc6:	e00a      	b.n	8002dde <PE_StateMachine_SNK_ReadyWait+0x112>
 8002dc8:	0020      	movs	r0, r4
 8002dca:	f7fe fc47 	bl	800165c <PE_CalculateMinTiming>
 8002dce:	2132      	movs	r1, #50	@ 0x32
 8002dd0:	5c61      	ldrb	r1, [r4, r1]
 8002dd2:	2900      	cmp	r1, #0
 8002dd4:	d002      	beq.n	8002ddc <PE_StateMachine_SNK_ReadyWait+0x110>
 8002dd6:	2802      	cmp	r0, #2
 8002dd8:	d300      	bcc.n	8002ddc <PE_StateMachine_SNK_ReadyWait+0x110>
 8002dda:	2002      	movs	r0, #2
 8002ddc:	0007      	movs	r7, r0
 8002dde:	0038      	movs	r0, r7
 8002de0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

08002de4 <.text_5>:
 8002de4:	0000025e 	.word	0x0000025e

08002de8 <.text_6>:
 8002de8:	ffffbfff 	.word	0xffffbfff

08002dec <.text_7>:
 8002dec:	ffffdfff 	.word	0xffffdfff

08002df0 <.text_8>:
 8002df0:	20000000 	.word	0x20000000

08002df4 <USBPD_PE_StateMachine_SRC>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	0005      	movs	r5, r0
 8002dfa:	4829      	ldr	r0, [pc, #164]	@ (8002ea0 <USBPD_PE_StateMachine_SRC+0xac>)
 8002dfc:	00a9      	lsls	r1, r5, #2
 8002dfe:	5844      	ldr	r4, [r0, r1]
 8002e00:	7c60      	ldrb	r0, [r4, #17]
 8002e02:	2848      	cmp	r0, #72	@ 0x48
 8002e04:	d134      	bne.n	8002e70 <USBPD_PE_StateMachine_SRC+0x7c>
 8002e06:	0020      	movs	r0, r4
 8002e08:	f7fd ffc0 	bl	8000d8c <PE_Reset_ZI>
 8002e0c:	0020      	movs	r0, r4
 8002e0e:	f7fd fff3 	bl	8000df8 <PE_Reset_Counter>
 8002e12:	6820      	ldr	r0, [r4, #0]
 8002e14:	7900      	ldrb	r0, [r0, #4]
 8002e16:	0783      	lsls	r3, r0, #30
 8002e18:	0f9b      	lsrs	r3, r3, #30
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	7c20      	ldrb	r0, [r4, #16]
 8002e20:	f002 fd83 	bl	800592a <USBPD_PRL_SetHeader>
 8002e24:	6860      	ldr	r0, [r4, #4]
 8002e26:	6801      	ldr	r1, [r0, #0]
 8002e28:	2208      	movs	r2, #8
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	6002      	str	r2, [r0, #0]
 8002e2e:	6860      	ldr	r0, [r4, #4]
 8002e30:	6801      	ldr	r1, [r0, #0]
 8002e32:	2203      	movs	r2, #3
 8002e34:	4391      	bics	r1, r2
 8002e36:	6822      	ldr	r2, [r4, #0]
 8002e38:	7912      	ldrb	r2, [r2, #4]
 8002e3a:	0792      	lsls	r2, r2, #30
 8002e3c:	0f92      	lsrs	r2, r2, #30
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	6002      	str	r2, [r0, #0]
 8002e42:	2101      	movs	r1, #1
 8002e44:	7c20      	ldrb	r0, [r4, #16]
 8002e46:	f002 fde1 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8002e4a:	7c20      	ldrb	r0, [r4, #16]
 8002e4c:	f003 f84a 	bl	8005ee4 <USBPD_PRL_Reset>
 8002e50:	2002      	movs	r0, #2
 8002e52:	7460      	strb	r0, [r4, #17]
 8002e54:	7ca0      	ldrb	r0, [r4, #18]
 8002e56:	2802      	cmp	r0, #2
 8002e58:	d00a      	beq.n	8002e70 <USBPD_PE_StateMachine_SRC+0x7c>
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	74a0      	strb	r0, [r4, #18]
 8002e5e:	2000      	movs	r0, #0
 8002e60:	9000      	str	r0, [sp, #0]
 8002e62:	2300      	movs	r3, #0
 8002e64:	2202      	movs	r2, #2
 8002e66:	7c21      	ldrb	r1, [r4, #16]
 8002e68:	2004      	movs	r0, #4
 8002e6a:	4eca      	ldr	r6, [pc, #808]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8002e6c:	6836      	ldr	r6, [r6, #0]
 8002e6e:	47b0      	blx	r6
 8002e70:	6960      	ldr	r0, [r4, #20]
 8002e72:	0341      	lsls	r1, r0, #13
 8002e74:	0fc9      	lsrs	r1, r1, #31
 8002e76:	d006      	beq.n	8002e86 <USBPD_PE_StateMachine_SRC+0x92>
 8002e78:	49c7      	ldr	r1, [pc, #796]	@ (8003198 <__iar_annotation$$branch+0x70>)
 8002e7a:	4001      	ands	r1, r0
 8002e7c:	6161      	str	r1, [r4, #20]
 8002e7e:	2164      	movs	r1, #100	@ 0x64
 8002e80:	7c20      	ldrb	r0, [r4, #16]
 8002e82:	f7fd fc31 	bl	80006e8 <USBPD_PE_Notification>
 8002e86:	0020      	movs	r0, r4
 8002e88:	f7fd fe62 	bl	8000b50 <PE_Get_RxEvent>
 8002e8c:	4669      	mov	r1, sp
 8002e8e:	7308      	strb	r0, [r1, #12]
 8002e90:	4668      	mov	r0, sp
 8002e92:	7b00      	ldrb	r0, [r0, #12]
 8002e94:	2803      	cmp	r0, #3
 8002e96:	d105      	bne.n	8002ea4 <USBPD_PE_StateMachine_SRC+0xb0>
 8002e98:	2001      	movs	r0, #1
 8002e9a:	b007      	add	sp, #28
 8002e9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200002ec 	.word	0x200002ec
 8002ea4:	4668      	mov	r0, sp
 8002ea6:	7345      	strb	r5, [r0, #13]
 8002ea8:	6860      	ldr	r0, [r4, #4]
 8002eaa:	6800      	ldr	r0, [r0, #0]
 8002eac:	04c1      	lsls	r1, r0, #19
 8002eae:	0fc9      	lsrs	r1, r1, #31
 8002eb0:	d100      	bne.n	8002eb4 <USBPD_PE_StateMachine_SRC+0xc0>
 8002eb2:	e13b      	b.n	800312c <__iar_annotation$$branch+0x4>
 8002eb4:	6960      	ldr	r0, [r4, #20]
 8002eb6:	0381      	lsls	r1, r0, #14
 8002eb8:	0fc9      	lsrs	r1, r1, #31
 8002eba:	d100      	bne.n	8002ebe <USBPD_PE_StateMachine_SRC+0xca>
 8002ebc:	e144      	b.n	8003148 <__iar_annotation$$branch+0x20>
 8002ebe:	4668      	mov	r0, sp
 8002ec0:	7b40      	ldrb	r0, [r0, #13]
 8002ec2:	f002 fd9b 	bl	80059fc <USBPD_PRL_FastRoleSwapSignalling>
 8002ec6:	20a6      	movs	r0, #166	@ 0xa6
 8002ec8:	7460      	strb	r0, [r4, #17]
 8002eca:	2109      	movs	r1, #9
 8002ecc:	7721      	strb	r1, [r4, #28]
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2232      	movs	r2, #50	@ 0x32
 8002ed2:	54a1      	strb	r1, [r4, r2]
 8002ed4:	6961      	ldr	r1, [r4, #20]
 8002ed6:	4ab1      	ldr	r2, [pc, #708]	@ (800319c <__iar_annotation$$branch+0x74>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	6162      	str	r2, [r4, #20]
 8002edc:	49b0      	ldr	r1, [pc, #704]	@ (80031a0 <__iar_annotation$$branch+0x78>)
 8002ede:	84e1      	strh	r1, [r4, #38]	@ 0x26
 8002ee0:	7ca1      	ldrb	r1, [r4, #18]
 8002ee2:	29a6      	cmp	r1, #166	@ 0xa6
 8002ee4:	d000      	beq.n	8002ee8 <USBPD_PE_StateMachine_SRC+0xf4>
 8002ee6:	e125      	b.n	8003134 <__iar_annotation$$branch+0xc>
 8002ee8:	2502      	movs	r5, #2
 8002eea:	4668      	mov	r0, sp
 8002eec:	7b00      	ldrb	r0, [r0, #12]
 8002eee:	2811      	cmp	r0, #17
 8002ef0:	d11f      	bne.n	8002f32 <USBPD_PE_StateMachine_SRC+0x13e>
 8002ef2:	6860      	ldr	r0, [r4, #4]
 8002ef4:	6800      	ldr	r0, [r0, #0]
 8002ef6:	0701      	lsls	r1, r0, #28
 8002ef8:	0fc9      	lsrs	r1, r1, #31
 8002efa:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8002efc:	0680      	lsls	r0, r0, #26
 8002efe:	0fc2      	lsrs	r2, r0, #31
 8002f00:	4291      	cmp	r1, r2
 8002f02:	d116      	bne.n	8002f32 <USBPD_PE_StateMachine_SRC+0x13e>
 8002f04:	2014      	movs	r0, #20
 8002f06:	4669      	mov	r1, sp
 8002f08:	7308      	strb	r0, [r1, #12]
 8002f0a:	0020      	movs	r0, r4
 8002f0c:	f7fd fe57 	bl	8000bbe <PE_Clear_RxEvent>
 8002f10:	2092      	movs	r0, #146	@ 0x92
 8002f12:	7460      	strb	r0, [r4, #17]
 8002f14:	7ca0      	ldrb	r0, [r4, #18]
 8002f16:	2892      	cmp	r0, #146	@ 0x92
 8002f18:	d100      	bne.n	8002f1c <USBPD_PE_StateMachine_SRC+0x128>
 8002f1a:	e155      	b.n	80031c8 <__iar_annotation$$branch+0xa0>
 8002f1c:	2092      	movs	r0, #146	@ 0x92
 8002f1e:	74a0      	strb	r0, [r4, #18]
 8002f20:	2000      	movs	r0, #0
 8002f22:	9000      	str	r0, [sp, #0]
 8002f24:	2300      	movs	r3, #0
 8002f26:	2292      	movs	r2, #146	@ 0x92
 8002f28:	7c21      	ldrb	r1, [r4, #16]
 8002f2a:	2004      	movs	r0, #4
 8002f2c:	4e99      	ldr	r6, [pc, #612]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8002f2e:	6836      	ldr	r6, [r6, #0]
 8002f30:	47b0      	blx	r6
 8002f32:	7c60      	ldrb	r0, [r4, #17]
 8002f34:	499b      	ldr	r1, [pc, #620]	@ (80031a4 <__iar_annotation$$branch+0x7c>)
 8002f36:	1866      	adds	r6, r4, r1
 8002f38:	4f9b      	ldr	r7, [pc, #620]	@ (80031a8 <__iar_annotation$$branch+0x80>)
 8002f3a:	499c      	ldr	r1, [pc, #624]	@ (80031ac <__iar_annotation$$branch+0x84>)
 8002f3c:	0002      	movs	r2, r0
 8002f3e:	d100      	bne.n	8002f42 <USBPD_PE_StateMachine_SRC+0x14e>
 8002f40:	e136      	b.n	80031b0 <__iar_annotation$$branch+0x88>
 8002f42:	1e42      	subs	r2, r0, #1
 8002f44:	d067      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8002f46:	1e52      	subs	r2, r2, #1
 8002f48:	d100      	bne.n	8002f4c <USBPD_PE_StateMachine_SRC+0x158>
 8002f4a:	e149      	b.n	80031e0 <__iar_annotation$$branch+0xb8>
 8002f4c:	1e52      	subs	r2, r2, #1
 8002f4e:	2a01      	cmp	r2, #1
 8002f50:	d801      	bhi.n	8002f56 <__iar_annotation$$branch+0x4>

08002f52 <__iar_annotation$$branch>:
 8002f52:	f000 fd90 	bl	8003a76 <__iar_annotation$$branch+0x94e>
 8002f56:	1e92      	subs	r2, r2, #2
 8002f58:	d100      	bne.n	8002f5c <__iar_annotation$$branch+0xa>
 8002f5a:	e189      	b.n	8003270 <__iar_annotation$$branch+0x148>
 8002f5c:	1e52      	subs	r2, r2, #1
 8002f5e:	d100      	bne.n	8002f62 <__iar_annotation$$branch+0x10>
 8002f60:	e18b      	b.n	800327a <__iar_annotation$$branch+0x152>
 8002f62:	1e52      	subs	r2, r2, #1
 8002f64:	d100      	bne.n	8002f68 <__iar_annotation$$branch+0x16>
 8002f66:	e190      	b.n	800328a <__iar_annotation$$branch+0x162>
 8002f68:	1e52      	subs	r2, r2, #1
 8002f6a:	d100      	bne.n	8002f6e <__iar_annotation$$branch+0x1c>
 8002f6c:	e1e1      	b.n	8003332 <__iar_annotation$$branch+0x20a>
 8002f6e:	1e52      	subs	r2, r2, #1
 8002f70:	d100      	bne.n	8002f74 <__iar_annotation$$branch+0x22>
 8002f72:	e223      	b.n	80033bc <__iar_annotation$$branch+0x294>
 8002f74:	1ed2      	subs	r2, r2, #3
 8002f76:	d100      	bne.n	8002f7a <__iar_annotation$$branch+0x28>
 8002f78:	e276      	b.n	8003468 <__iar_annotation$$branch+0x340>
 8002f7a:	1e52      	subs	r2, r2, #1
 8002f7c:	d100      	bne.n	8002f80 <__iar_annotation$$branch+0x2e>
 8002f7e:	e286      	b.n	800348e <__iar_annotation$$branch+0x366>
 8002f80:	1e52      	subs	r2, r2, #1
 8002f82:	d100      	bne.n	8002f86 <__iar_annotation$$branch+0x34>
 8002f84:	e11d      	b.n	80031c2 <__iar_annotation$$branch+0x9a>
 8002f86:	1e52      	subs	r2, r2, #1
 8002f88:	d100      	bne.n	8002f8c <__iar_annotation$$branch+0x3a>
 8002f8a:	e30d      	b.n	80035a8 <__iar_annotation$$branch+0x480>
 8002f8c:	1e52      	subs	r2, r2, #1
 8002f8e:	d100      	bne.n	8002f92 <__iar_annotation$$branch+0x40>
 8002f90:	e2c6      	b.n	8003520 <__iar_annotation$$branch+0x3f8>
 8002f92:	1e52      	subs	r2, r2, #1
 8002f94:	d100      	bne.n	8002f98 <__iar_annotation$$branch+0x46>
 8002f96:	e2cc      	b.n	8003532 <__iar_annotation$$branch+0x40a>
 8002f98:	1e52      	subs	r2, r2, #1
 8002f9a:	d100      	bne.n	8002f9e <__iar_annotation$$branch+0x4c>
 8002f9c:	e2d8      	b.n	8003550 <__iar_annotation$$branch+0x428>
 8002f9e:	1e52      	subs	r2, r2, #1
 8002fa0:	d100      	bne.n	8002fa4 <__iar_annotation$$branch+0x52>
 8002fa2:	e389      	b.n	80036b8 <__iar_annotation$$branch+0x590>
 8002fa4:	1e52      	subs	r2, r2, #1
 8002fa6:	d100      	bne.n	8002faa <__iar_annotation$$branch+0x58>
 8002fa8:	e32b      	b.n	8003602 <__iar_annotation$$branch+0x4da>
 8002faa:	1e52      	subs	r2, r2, #1
 8002fac:	d100      	bne.n	8002fb0 <__iar_annotation$$branch+0x5e>
 8002fae:	e332      	b.n	8003616 <__iar_annotation$$branch+0x4ee>
 8002fb0:	1e52      	subs	r2, r2, #1
 8002fb2:	d100      	bne.n	8002fb6 <__iar_annotation$$branch+0x64>
 8002fb4:	e1d5      	b.n	8003362 <__iar_annotation$$branch+0x23a>
 8002fb6:	1e52      	subs	r2, r2, #1
 8002fb8:	d100      	bne.n	8002fbc <__iar_annotation$$branch+0x6a>
 8002fba:	e34c      	b.n	8003656 <__iar_annotation$$branch+0x52e>
 8002fbc:	1e52      	subs	r2, r2, #1
 8002fbe:	2a01      	cmp	r2, #1
 8002fc0:	d929      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8002fc2:	1e92      	subs	r2, r2, #2
 8002fc4:	d100      	bne.n	8002fc8 <__iar_annotation$$branch+0x76>
 8002fc6:	e3a3      	b.n	8003710 <__iar_annotation$$branch+0x5e8>
 8002fc8:	1e52      	subs	r2, r2, #1
 8002fca:	d100      	bne.n	8002fce <__iar_annotation$$branch+0x7c>
 8002fcc:	e3b0      	b.n	8003730 <__iar_annotation$$branch+0x608>
 8002fce:	1e92      	subs	r2, r2, #2
 8002fd0:	d021      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8002fd2:	1e52      	subs	r2, r2, #1
 8002fd4:	d101      	bne.n	8002fda <__iar_annotation$$branch+0x4>

08002fd6 <__iar_annotation$$branch>:
 8002fd6:	f000 fc88 	bl	80038ea <__iar_annotation$$branch+0x7c2>
 8002fda:	1e52      	subs	r2, r2, #1
 8002fdc:	d101      	bne.n	8002fe2 <__iar_annotation$$branch+0x4>

08002fde <__iar_annotation$$branch>:
 8002fde:	f000 fc9a 	bl	8003916 <__iar_annotation$$branch+0x7ee>
 8002fe2:	1e52      	subs	r2, r2, #1
 8002fe4:	d101      	bne.n	8002fea <__iar_annotation$$branch+0x4>

08002fe6 <__iar_annotation$$branch>:
 8002fe6:	f000 fce6 	bl	80039b6 <__iar_annotation$$branch+0x88e>
 8002fea:	1e52      	subs	r2, r2, #1
 8002fec:	d101      	bne.n	8002ff2 <__iar_annotation$$branch+0x4>

08002fee <__iar_annotation$$branch>:
 8002fee:	f000 fd0f 	bl	8003a10 <__iar_annotation$$branch+0x8e8>
 8002ff2:	1e52      	subs	r2, r2, #1
 8002ff4:	d101      	bne.n	8002ffa <__iar_annotation$$branch+0x4>

08002ff6 <__iar_annotation$$branch>:
 8002ff6:	f000 fbe5 	bl	80037c4 <__iar_annotation$$branch+0x69c>
 8002ffa:	1e92      	subs	r2, r2, #2
 8002ffc:	d101      	bne.n	8003002 <__iar_annotation$$branch+0x4>

08002ffe <__iar_annotation$$branch>:
 8002ffe:	f000 fc0a 	bl	8003816 <__iar_annotation$$branch+0x6ee>
 8003002:	1e52      	subs	r2, r2, #1
 8003004:	d101      	bne.n	800300a <__iar_annotation$$branch+0x4>

08003006 <__iar_annotation$$branch>:
 8003006:	f000 fc2e 	bl	8003866 <__iar_annotation$$branch+0x73e>
 800300a:	1e52      	subs	r2, r2, #1
 800300c:	d101      	bne.n	8003012 <__iar_annotation$$branch+0x4>

0800300e <__iar_annotation$$branch>:
 800300e:	f000 fc49 	bl	80038a4 <__iar_annotation$$branch+0x77c>
 8003012:	1e52      	subs	r2, r2, #1
 8003014:	2a02      	cmp	r2, #2
 8003016:	d801      	bhi.n	800301c <__iar_annotation$$branch+0x4>

08003018 <__iar_annotation$$branch>:
 8003018:	f000 fe1b 	bl	8003c52 <__iar_annotation$$branch+0x106>
 800301c:	1ed2      	subs	r2, r2, #3
 800301e:	d101      	bne.n	8003024 <__iar_annotation$$branch+0x4>

08003020 <__iar_annotation$$branch>:
 8003020:	f000 fbf4 	bl	800380c <__iar_annotation$$branch+0x6e4>
 8003024:	1e52      	subs	r2, r2, #1
 8003026:	d101      	bne.n	800302c <__iar_annotation$$branch+0x4>

08003028 <__iar_annotation$$branch>:
 8003028:	f000 fd96 	bl	8003b58 <__iar_annotation$$branch+0xc>
 800302c:	1e52      	subs	r2, r2, #1
 800302e:	d0f2      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003030:	1e52      	subs	r2, r2, #1
 8003032:	d101      	bne.n	8003038 <__iar_annotation$$branch+0x4>

08003034 <__iar_annotation$$branch>:
 8003034:	f000 fda1 	bl	8003b7a <__iar_annotation$$branch+0x2e>
 8003038:	1e52      	subs	r2, r2, #1
 800303a:	d101      	bne.n	8003040 <__iar_annotation$$branch+0x4>

0800303c <__iar_annotation$$branch>:
 800303c:	f000 fdcf 	bl	8003bde <__iar_annotation$$branch+0x92>
 8003040:	1e52      	subs	r2, r2, #1
 8003042:	2a01      	cmp	r2, #1
 8003044:	d9e7      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003046:	1e92      	subs	r2, r2, #2
 8003048:	d001      	beq.n	800304e <__iar_annotation$$branch+0x12>
 800304a:	1e92      	subs	r2, r2, #2
 800304c:	2a05      	cmp	r2, #5
 800304e:	d801      	bhi.n	8003054 <__iar_annotation$$branch+0x4>

08003050 <__iar_annotation$$branch>:
 8003050:	f000 fdfb 	bl	8003c4a <__iar_annotation$$branch+0xfe>
 8003054:	1f92      	subs	r2, r2, #6
 8003056:	d101      	bne.n	800305c <__iar_annotation$$branch+0x4>

08003058 <__iar_annotation$$branch>:
 8003058:	f000 fdd2 	bl	8003c00 <__iar_annotation$$branch+0xb4>
 800305c:	1e52      	subs	r2, r2, #1
 800305e:	2a03      	cmp	r2, #3
 8003060:	d9d9      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003062:	3a11      	subs	r2, #17
 8003064:	d0d7      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003066:	1e52      	subs	r2, r2, #1
 8003068:	d100      	bne.n	800306c <__iar_annotation$$branch+0x14>
 800306a:	e150      	b.n	800330e <__iar_annotation$$branch+0x1e6>
 800306c:	3a0f      	subs	r2, #15
 800306e:	d101      	bne.n	8003074 <__iar_annotation$$branch+0x4>

08003070 <__iar_annotation$$branch>:
 8003070:	f000 fce9 	bl	8003a46 <__iar_annotation$$branch+0x91e>
 8003074:	1fd2      	subs	r2, r2, #7
 8003076:	2a01      	cmp	r2, #1
 8003078:	d9cd      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 800307a:	1f52      	subs	r2, r2, #5
 800307c:	2a01      	cmp	r2, #1
 800307e:	d9ca      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003080:	3a0d      	subs	r2, #13
 8003082:	d0c8      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 8003084:	3a12      	subs	r2, #18
 8003086:	d101      	bne.n	800308c <__iar_annotation$$branch+0x4>

08003088 <__iar_annotation$$branch>:
 8003088:	f000 fe18 	bl	8003cbc <__iar_annotation$$branch+0x62>
 800308c:	3a0c      	subs	r2, #12
 800308e:	d100      	bne.n	8003092 <__iar_annotation$$branch+0xa>
 8003090:	e09a      	b.n	80031c8 <__iar_annotation$$branch+0xa0>
 8003092:	1e52      	subs	r2, r2, #1
 8003094:	2a02      	cmp	r2, #2
 8003096:	d9be      	bls.n	8003016 <__iar_annotation$$branch+0x8>
 8003098:	1ed2      	subs	r2, r2, #3
 800309a:	d100      	bne.n	800309e <__iar_annotation$$branch+0x16>
 800309c:	e213      	b.n	80034c6 <__iar_annotation$$branch+0x39e>
 800309e:	1e52      	subs	r2, r2, #1
 80030a0:	d100      	bne.n	80030a4 <__iar_annotation$$branch+0x1c>
 80030a2:	e229      	b.n	80034f8 <__iar_annotation$$branch+0x3d0>
 80030a4:	1e92      	subs	r2, r2, #2
 80030a6:	d0b6      	beq.n	8003016 <__iar_annotation$$branch+0x8>
 80030a8:	1e52      	subs	r2, r2, #1
 80030aa:	d100      	bne.n	80030ae <__iar_annotation$$branch+0x26>
 80030ac:	e0e0      	b.n	8003270 <__iar_annotation$$branch+0x148>
 80030ae:	1e92      	subs	r2, r2, #2
 80030b0:	2a08      	cmp	r2, #8
 80030b2:	d801      	bhi.n	80030b8 <__iar_annotation$$branch+0x4>

080030b4 <__iar_annotation$$branch>:
 80030b4:	f000 fdd3 	bl	8003c5e <__iar_annotation$$branch+0x4>
 80030b8:	3a0a      	subs	r2, #10
 80030ba:	d101      	bne.n	80030c0 <__iar_annotation$$branch+0x4>

080030bc <__iar_annotation$$branch>:
 80030bc:	f000 fde2 	bl	8003c84 <__iar_annotation$$branch+0x2a>
 80030c0:	a903      	add	r1, sp, #12
 80030c2:	0020      	movs	r0, r4
 80030c4:	f001 fb32 	bl	800472c <PE_StateMachine_VDM>
 80030c8:	0005      	movs	r5, r0
 80030ca:	7c62      	ldrb	r2, [r4, #17]
 80030cc:	4e31      	ldr	r6, [pc, #196]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 80030ce:	7ca0      	ldrb	r0, [r4, #18]
 80030d0:	4290      	cmp	r0, r2
 80030d2:	d007      	beq.n	80030e4 <__iar_annotation$$branch+0x28>
 80030d4:	74a2      	strb	r2, [r4, #18]
 80030d6:	2000      	movs	r0, #0
 80030d8:	9000      	str	r0, [sp, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	7c21      	ldrb	r1, [r4, #16]
 80030de:	2004      	movs	r0, #4
 80030e0:	6837      	ldr	r7, [r6, #0]
 80030e2:	47b8      	blx	r7
 80030e4:	4668      	mov	r0, sp
 80030e6:	7b00      	ldrb	r0, [r0, #12]
 80030e8:	2814      	cmp	r0, #20
 80030ea:	d101      	bne.n	80030f0 <__iar_annotation$$branch+0x4>

080030ec <__iar_annotation$$branch>:
 80030ec:	f000 fdec 	bl	8003cc8 <__iar_annotation$$branch+0x6e>
 80030f0:	0020      	movs	r0, r4
 80030f2:	f7fd fdab 	bl	8000c4c <PE_Check_AMSConflict>
 80030f6:	2815      	cmp	r0, #21
 80030f8:	d109      	bne.n	800310e <__iar_annotation$$branch+0x22>
 80030fa:	4668      	mov	r0, sp
 80030fc:	7b00      	ldrb	r0, [r0, #12]
 80030fe:	2814      	cmp	r0, #20
 8003100:	d005      	beq.n	800310e <__iar_annotation$$branch+0x22>
 8003102:	2014      	movs	r0, #20
 8003104:	4669      	mov	r1, sp
 8003106:	7308      	strb	r0, [r1, #12]
 8003108:	0020      	movs	r0, r4
 800310a:	f7fd fd58 	bl	8000bbe <PE_Clear_RxEvent>
 800310e:	7c62      	ldrb	r2, [r4, #17]
 8003110:	7ca0      	ldrb	r0, [r4, #18]
 8003112:	4290      	cmp	r0, r2
 8003114:	d007      	beq.n	8003126 <__iar_annotation$$branch+0x3a>
 8003116:	74a2      	strb	r2, [r4, #18]
 8003118:	2000      	movs	r0, #0
 800311a:	9000      	str	r0, [sp, #0]
 800311c:	2300      	movs	r3, #0
 800311e:	7c21      	ldrb	r1, [r4, #16]
 8003120:	2004      	movs	r0, #4
 8003122:	6835      	ldr	r5, [r6, #0]
 8003124:	47a8      	blx	r5
 8003126:	2500      	movs	r5, #0

08003128 <__iar_annotation$$branch>:
 8003128:	f000 fded 	bl	8003d06 <__iar_annotation$$branch+0xac>
 800312c:	2500      	movs	r5, #0
 800312e:	43ed      	mvns	r5, r5
 8003130:	0028      	movs	r0, r5
 8003132:	e6b2      	b.n	8002e9a <USBPD_PE_StateMachine_SRC+0xa6>
 8003134:	74a0      	strb	r0, [r4, #18]
 8003136:	2000      	movs	r0, #0
 8003138:	9000      	str	r0, [sp, #0]
 800313a:	2300      	movs	r3, #0
 800313c:	22a6      	movs	r2, #166	@ 0xa6
 800313e:	7c21      	ldrb	r1, [r4, #16]
 8003140:	2004      	movs	r0, #4
 8003142:	4d14      	ldr	r5, [pc, #80]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 8003144:	682d      	ldr	r5, [r5, #0]
 8003146:	47a8      	blx	r5
 8003148:	2502      	movs	r5, #2
 800314a:	2032      	movs	r0, #50	@ 0x32
 800314c:	5c20      	ldrb	r0, [r4, r0]
 800314e:	280f      	cmp	r0, #15
 8003150:	d001      	beq.n	8003156 <__iar_annotation$$branch+0x2e>
 8003152:	2814      	cmp	r0, #20
 8003154:	d11c      	bne.n	8003190 <__iar_annotation$$branch+0x68>
 8003156:	4668      	mov	r0, sp
 8003158:	7b00      	ldrb	r0, [r0, #12]
 800315a:	2814      	cmp	r0, #20
 800315c:	d005      	beq.n	800316a <__iar_annotation$$branch+0x42>
 800315e:	2014      	movs	r0, #20
 8003160:	4669      	mov	r1, sp
 8003162:	7308      	strb	r0, [r1, #12]
 8003164:	0020      	movs	r0, r4
 8003166:	f7fd fd2a 	bl	8000bbe <PE_Clear_RxEvent>
 800316a:	2032      	movs	r0, #50	@ 0x32
 800316c:	5c22      	ldrb	r2, [r4, r0]
 800316e:	7462      	strb	r2, [r4, #17]
 8003170:	2000      	movs	r0, #0
 8003172:	2332      	movs	r3, #50	@ 0x32
 8003174:	54e0      	strb	r0, [r4, r3]
 8003176:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8003178:	7ca0      	ldrb	r0, [r4, #18]
 800317a:	4290      	cmp	r0, r2
 800317c:	d008      	beq.n	8003190 <__iar_annotation$$branch+0x68>
 800317e:	74a2      	strb	r2, [r4, #18]
 8003180:	2000      	movs	r0, #0
 8003182:	9000      	str	r0, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	7c21      	ldrb	r1, [r4, #16]
 8003188:	2004      	movs	r0, #4
 800318a:	4e02      	ldr	r6, [pc, #8]	@ (8003194 <__iar_annotation$$branch+0x6c>)
 800318c:	6836      	ldr	r6, [r6, #0]
 800318e:	47b0      	blx	r6
 8003190:	e6ab      	b.n	8002eea <USBPD_PE_StateMachine_SRC+0xf6>
 8003192:	bf00      	nop
 8003194:	20000000 	.word	0x20000000
 8003198:	fffbffff 	.word	0xfffbffff
 800319c:	fffdffff 	.word	0xfffdffff
 80031a0:	00008011 	.word	0x00008011
 80031a4:	0000025e 	.word	0x0000025e
 80031a8:	0000801b 	.word	0x0000801b
 80031ac:	0000f01f 	.word	0x0000f01f
 80031b0:	6860      	ldr	r0, [r4, #4]
 80031b2:	6801      	ldr	r1, [r0, #0]
 80031b4:	2210      	movs	r2, #16
 80031b6:	4391      	bics	r1, r2
 80031b8:	6001      	str	r1, [r0, #0]
 80031ba:	215f      	movs	r1, #95	@ 0x5f
 80031bc:	7c20      	ldrb	r0, [r4, #16]
 80031be:	f7fd fa93 	bl	80006e8 <USBPD_PE_Notification>
 80031c2:	2500      	movs	r5, #0
 80031c4:	43ed      	mvns	r5, r5
 80031c6:	e780      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80031c8:	6860      	ldr	r0, [r4, #4]
 80031ca:	6801      	ldr	r1, [r0, #0]
 80031cc:	2210      	movs	r2, #16
 80031ce:	4391      	bics	r1, r2
 80031d0:	6001      	str	r1, [r0, #0]
 80031d2:	68a0      	ldr	r0, [r4, #8]
 80031d4:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 80031d6:	2900      	cmp	r1, #0
 80031d8:	d0f3      	beq.n	80031c2 <__iar_annotation$$branch+0x9a>
 80031da:	7c20      	ldrb	r0, [r4, #16]
 80031dc:	4788      	blx	r1
 80031de:	e7f0      	b.n	80031c2 <__iar_annotation$$branch+0x9a>
 80031e0:	2701      	movs	r7, #1
 80031e2:	6860      	ldr	r0, [r4, #4]
 80031e4:	6800      	ldr	r0, [r0, #0]
 80031e6:	0bc0      	lsrs	r0, r0, #15
 80031e8:	4038      	ands	r0, r7
 80031ea:	d002      	beq.n	80031f2 <__iar_annotation$$branch+0xca>
 80031ec:	6820      	ldr	r0, [r4, #0]
 80031ee:	6801      	ldr	r1, [r0, #0]
 80031f0:	e000      	b.n	80031f4 <__iar_annotation$$branch+0xcc>
 80031f2:	2101      	movs	r1, #1
 80031f4:	4668      	mov	r0, sp
 80031f6:	7b40      	ldrb	r0, [r0, #13]
 80031f8:	f002 fc08 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80031fc:	6860      	ldr	r0, [r4, #4]
 80031fe:	6801      	ldr	r1, [r0, #0]
 8003200:	0b0a      	lsrs	r2, r1, #12
 8003202:	403a      	ands	r2, r7
 8003204:	d02f      	beq.n	8003266 <__iar_annotation$$branch+0x13e>
 8003206:	078a      	lsls	r2, r1, #30
 8003208:	0f92      	lsrs	r2, r2, #30
 800320a:	2a01      	cmp	r2, #1
 800320c:	d101      	bne.n	8003212 <__iar_annotation$$branch+0xea>
 800320e:	2200      	movs	r2, #0
 8003210:	e000      	b.n	8003214 <__iar_annotation$$branch+0xec>
 8003212:	2220      	movs	r2, #32
 8003214:	2320      	movs	r3, #32
 8003216:	4399      	bics	r1, r3
 8003218:	430a      	orrs	r2, r1
 800321a:	6002      	str	r2, [r0, #0]
 800321c:	2000      	movs	r0, #0
 800321e:	70f0      	strb	r0, [r6, #3]
 8003220:	2101      	movs	r1, #1
 8003222:	0020      	movs	r0, r4
 8003224:	f7fe f9f3 	bl	800160e <PE_SetPowerNegotiation>
 8003228:	6860      	ldr	r0, [r4, #4]
 800322a:	6800      	ldr	r0, [r0, #0]
 800322c:	0901      	lsrs	r1, r0, #4
 800322e:	4039      	ands	r1, r7
 8003230:	d005      	beq.n	800323e <__iar_annotation$$branch+0x116>
 8003232:	48ae      	ldr	r0, [pc, #696]	@ (80034ec <__iar_annotation$$branch+0x3c4>)
 8003234:	83e0      	strh	r0, [r4, #30]
 8003236:	2514      	movs	r5, #20
 8003238:	2006      	movs	r0, #6
 800323a:	7460      	strb	r0, [r4, #17]
 800323c:	e745      	b.n	80030ca <__iar_annotation$$branch+0xe>
 800323e:	0bc0      	lsrs	r0, r0, #15
 8003240:	4007      	ands	r7, r0
 8003242:	d00a      	beq.n	800325a <__iar_annotation$$branch+0x132>
 8003244:	6820      	ldr	r0, [r4, #0]
 8003246:	7800      	ldrb	r0, [r0, #0]
 8003248:	0780      	lsls	r0, r0, #30
 800324a:	d400      	bmi.n	800324e <__iar_annotation$$branch+0x126>
 800324c:	e087      	b.n	800335e <__iar_annotation$$branch+0x236>
 800324e:	7930      	ldrb	r0, [r6, #4]
 8003250:	2814      	cmp	r0, #20
 8003252:	d300      	bcc.n	8003256 <__iar_annotation$$branch+0x12e>
 8003254:	e083      	b.n	800335e <__iar_annotation$$branch+0x236>
 8003256:	68e1      	ldr	r1, [r4, #12]
 8003258:	2900      	cmp	r1, #0
 800325a:	d100      	bne.n	800325e <__iar_annotation$$branch+0x136>
 800325c:	e07f      	b.n	800335e <__iar_annotation$$branch+0x236>
 800325e:	1c40      	adds	r0, r0, #1
 8003260:	7130      	strb	r0, [r6, #4]
 8003262:	2005      	movs	r0, #5
 8003264:	e7e9      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003266:	2121      	movs	r1, #33	@ 0x21
 8003268:	7c20      	ldrb	r0, [r4, #16]
 800326a:	f7fd fa3d 	bl	80006e8 <USBPD_PE_Notification>
 800326e:	e04c      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 8003270:	a903      	add	r1, sp, #12
 8003272:	0020      	movs	r0, r4
 8003274:	f000 fd8c 	bl	8003d90 <PE_StateMachine_VDMCable>
 8003278:	e726      	b.n	80030c8 <__iar_annotation$$branch+0xc>
 800327a:	8be0      	ldrh	r0, [r4, #30]
 800327c:	03a9      	lsls	r1, r5, #14
 800327e:	4288      	cmp	r0, r1
 8003280:	d102      	bne.n	8003288 <__iar_annotation$$branch+0x160>
 8003282:	2007      	movs	r0, #7
 8003284:	7460      	strb	r0, [r4, #17]
 8003286:	2500      	movs	r5, #0
 8003288:	e71f      	b.n	80030ca <__iar_annotation$$branch+0xe>
 800328a:	6960      	ldr	r0, [r4, #20]
 800328c:	0740      	lsls	r0, r0, #29
 800328e:	0fc1      	lsrs	r1, r0, #31
 8003290:	0020      	movs	r0, r4
 8003292:	f000 fd45 	bl	8003d20 <PE_Send_SRCCapabilities>
 8003296:	2805      	cmp	r0, #5
 8003298:	d002      	beq.n	80032a0 <__iar_annotation$$branch+0x178>
 800329a:	2809      	cmp	r0, #9
 800329c:	d0f4      	beq.n	8003288 <__iar_annotation$$branch+0x160>
 800329e:	e011      	b.n	80032c4 <__iar_annotation$$branch+0x19c>
 80032a0:	2001      	movs	r0, #1
 80032a2:	7720      	strb	r0, [r4, #28]
 80032a4:	6960      	ldr	r0, [r4, #20]
 80032a6:	2104      	movs	r1, #4
 80032a8:	4301      	orrs	r1, r0
 80032aa:	6161      	str	r1, [r4, #20]
 80032ac:	2000      	movs	r0, #0
 80032ae:	70f0      	strb	r0, [r6, #3]
 80032b0:	70b0      	strb	r0, [r6, #2]
 80032b2:	83e7      	strh	r7, [r4, #30]
 80032b4:	251b      	movs	r5, #27
 80032b6:	2016      	movs	r0, #22
 80032b8:	7460      	strb	r0, [r4, #17]
 80032ba:	210f      	movs	r1, #15
 80032bc:	7c20      	ldrb	r0, [r4, #16]
 80032be:	f7fd fa13 	bl	80006e8 <USBPD_PE_Notification>
 80032c2:	e702      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80032c4:	6960      	ldr	r0, [r4, #20]
 80032c6:	0741      	lsls	r1, r0, #29
 80032c8:	0fc9      	lsrs	r1, r1, #31
 80032ca:	d10f      	bne.n	80032ec <__iar_annotation$$branch+0x1c4>
 80032cc:	78f0      	ldrb	r0, [r6, #3]
 80032ce:	2833      	cmp	r0, #51	@ 0x33
 80032d0:	d217      	bcs.n	8003302 <__iar_annotation$$branch+0x1da>
 80032d2:	4887      	ldr	r0, [pc, #540]	@ (80034f0 <__iar_annotation$$branch+0x3c8>)
 80032d4:	83e0      	strh	r0, [r4, #30]
 80032d6:	2596      	movs	r5, #150	@ 0x96
 80032d8:	2008      	movs	r0, #8
 80032da:	7460      	strb	r0, [r4, #17]
 80032dc:	4885      	ldr	r0, [pc, #532]	@ (80034f4 <__iar_annotation$$branch+0x3cc>)
 80032de:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80032e0:	4201      	tst	r1, r0
 80032e2:	d002      	beq.n	80032ea <__iar_annotation$$branch+0x1c2>
 80032e4:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 80032e6:	0005      	movs	r5, r0
 80032e8:	400d      	ands	r5, r1
 80032ea:	e6ee      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80032ec:	6860      	ldr	r0, [r4, #4]
 80032ee:	7800      	ldrb	r0, [r0, #0]
 80032f0:	0780      	lsls	r0, r0, #30
 80032f2:	0f80      	lsrs	r0, r0, #30
 80032f4:	2802      	cmp	r0, #2
 80032f6:	d102      	bne.n	80032fe <__iar_annotation$$branch+0x1d6>
 80032f8:	7c20      	ldrb	r0, [r4, #16]
 80032fa:	f002 fb68 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 80032fe:	2011      	movs	r0, #17
 8003300:	e7c0      	b.n	8003284 <__iar_annotation$$branch+0x15c>
 8003302:	2121      	movs	r1, #33	@ 0x21
 8003304:	7c20      	ldrb	r0, [r4, #16]
 8003306:	f7fd f9ef 	bl	80006e8 <USBPD_PE_Notification>
 800330a:	2000      	movs	r0, #0
 800330c:	e795      	b.n	800323a <__iar_annotation$$branch+0x112>
 800330e:	2100      	movs	r1, #0
 8003310:	0020      	movs	r0, r4
 8003312:	f000 fd05 	bl	8003d20 <PE_Send_SRCCapabilities>
 8003316:	2805      	cmp	r0, #5
 8003318:	d107      	bne.n	800332a <__iar_annotation$$branch+0x202>
 800331a:	2104      	movs	r1, #4
 800331c:	0020      	movs	r0, r4
 800331e:	f7fe f976 	bl	800160e <PE_SetPowerNegotiation>
 8003322:	2001      	movs	r0, #1
 8003324:	7720      	strb	r0, [r4, #28]
 8003326:	83e7      	strh	r7, [r4, #30]
 8003328:	e7c5      	b.n	80032b6 <__iar_annotation$$branch+0x18e>
 800332a:	2000      	movs	r0, #0
 800332c:	7720      	strb	r0, [r4, #28]
 800332e:	2011      	movs	r0, #17
 8003330:	e783      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003332:	03a8      	lsls	r0, r5, #14
 8003334:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003336:	4281      	cmp	r1, r0
 8003338:	d106      	bne.n	8003348 <__iar_annotation$$branch+0x220>
 800333a:	2100      	movs	r1, #0
 800333c:	8461      	strh	r1, [r4, #34]	@ 0x22
 800333e:	7931      	ldrb	r1, [r6, #4]
 8003340:	1c49      	adds	r1, r1, #1
 8003342:	7131      	strb	r1, [r6, #4]
 8003344:	2105      	movs	r1, #5
 8003346:	7461      	strb	r1, [r4, #17]
 8003348:	8be1      	ldrh	r1, [r4, #30]
 800334a:	4281      	cmp	r1, r0
 800334c:	d1cd      	bne.n	80032ea <__iar_annotation$$branch+0x1c2>
 800334e:	6820      	ldr	r0, [r4, #0]
 8003350:	6840      	ldr	r0, [r0, #4]
 8003352:	0601      	lsls	r1, r0, #24
 8003354:	0fc9      	lsrs	r1, r1, #31
 8003356:	d002      	beq.n	800335e <__iar_annotation$$branch+0x236>
 8003358:	78f0      	ldrb	r0, [r6, #3]
 800335a:	1c40      	adds	r0, r0, #1
 800335c:	70f0      	strb	r0, [r6, #3]
 800335e:	2007      	movs	r0, #7
 8003360:	e76b      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003362:	4668      	mov	r0, sp
 8003364:	7b00      	ldrb	r0, [r0, #12]
 8003366:	2811      	cmp	r0, #17
 8003368:	d109      	bne.n	800337e <__iar_annotation$$branch+0x256>
 800336a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800336c:	0bc1      	lsrs	r1, r0, #15
 800336e:	d106      	bne.n	800337e <__iar_annotation$$branch+0x256>
 8003370:	0b01      	lsrs	r1, r0, #12
 8003372:	0749      	lsls	r1, r1, #29
 8003374:	d100      	bne.n	8003378 <__iar_annotation$$branch+0x250>
 8003376:	e111      	b.n	800359c <__iar_annotation$$branch+0x474>
 8003378:	06c0      	lsls	r0, r0, #27
 800337a:	0ec0      	lsrs	r0, r0, #27
 800337c:	2802      	cmp	r0, #2
 800337e:	d000      	beq.n	8003382 <__iar_annotation$$branch+0x25a>
 8003380:	e10c      	b.n	800359c <__iar_annotation$$branch+0x474>
 8003382:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003384:	7881      	ldrb	r1, [r0, #2]
 8003386:	78c2      	ldrb	r2, [r0, #3]
 8003388:	0212      	lsls	r2, r2, #8
 800338a:	1889      	adds	r1, r1, r2
 800338c:	7902      	ldrb	r2, [r0, #4]
 800338e:	0412      	lsls	r2, r2, #16
 8003390:	1889      	adds	r1, r1, r2
 8003392:	7940      	ldrb	r0, [r0, #5]
 8003394:	0600      	lsls	r0, r0, #24
 8003396:	1808      	adds	r0, r1, r0
 8003398:	9000      	str	r0, [sp, #0]
 800339a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800339c:	0600      	lsls	r0, r0, #24
 800339e:	0f81      	lsrs	r1, r0, #30
 80033a0:	7c20      	ldrb	r0, [r4, #16]
 80033a2:	f7fd fd5b 	bl	8000e5c <PE_ExtRevisionInteroperability>
 80033a6:	2304      	movs	r3, #4
 80033a8:	466a      	mov	r2, sp
 80033aa:	2106      	movs	r1, #6
 80033ac:	7c20      	ldrb	r0, [r4, #16]
 80033ae:	68a5      	ldr	r5, [r4, #8]
 80033b0:	69ad      	ldr	r5, [r5, #24]
 80033b2:	47a8      	blx	r5
 80033b4:	2009      	movs	r0, #9
 80033b6:	7460      	strb	r0, [r4, #17]
 80033b8:	2500      	movs	r5, #0
 80033ba:	e0e5      	b.n	8003588 <__iar_annotation$$branch+0x460>
 80033bc:	2702      	movs	r7, #2
 80033be:	2507      	movs	r5, #7
 80033c0:	a901      	add	r1, sp, #4
 80033c2:	7c20      	ldrb	r0, [r4, #16]
 80033c4:	68a2      	ldr	r2, [r4, #8]
 80033c6:	69d2      	ldr	r2, [r2, #28]
 80033c8:	4790      	blx	r2
 80033ca:	280a      	cmp	r0, #10
 80033cc:	d010      	beq.n	80033f0 <__iar_annotation$$branch+0x2c8>
 80033ce:	280b      	cmp	r0, #11
 80033d0:	d035      	beq.n	800343e <__iar_annotation$$branch+0x316>
 80033d2:	280d      	cmp	r0, #13
 80033d4:	6860      	ldr	r0, [r4, #4]
 80033d6:	6800      	ldr	r0, [r0, #0]
 80033d8:	d136      	bne.n	8003448 <__iar_annotation$$branch+0x320>
 80033da:	0a00      	lsrs	r0, r0, #8
 80033dc:	4005      	ands	r5, r0
 80033de:	2d03      	cmp	r5, #3
 80033e0:	d101      	bne.n	80033e6 <__iar_annotation$$branch+0x2be>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e000      	b.n	80033e8 <__iar_annotation$$branch+0x2c0>
 80033e6:	230e      	movs	r3, #14
 80033e8:	2000      	movs	r0, #0
 80033ea:	9000      	str	r0, [sp, #0]
 80033ec:	220c      	movs	r2, #12
 80033ee:	e035      	b.n	800345c <__iar_annotation$$branch+0x334>
 80033f0:	48a9      	ldr	r0, [pc, #676]	@ (8003698 <__iar_annotation$$branch+0x570>)
 80033f2:	83e0      	strh	r0, [r4, #30]
 80033f4:	271e      	movs	r7, #30
 80033f6:	6860      	ldr	r0, [r4, #4]
 80033f8:	6800      	ldr	r0, [r0, #0]
 80033fa:	0a00      	lsrs	r0, r0, #8
 80033fc:	4005      	ands	r5, r0
 80033fe:	2d01      	cmp	r5, #1
 8003400:	d00b      	beq.n	800341a <__iar_annotation$$branch+0x2f2>
 8003402:	9801      	ldr	r0, [sp, #4]
 8003404:	2803      	cmp	r0, #3
 8003406:	d108      	bne.n	800341a <__iar_annotation$$branch+0x2f2>
 8003408:	6960      	ldr	r0, [r4, #20]
 800340a:	06c0      	lsls	r0, r0, #27
 800340c:	0f80      	lsrs	r0, r0, #30
 800340e:	2803      	cmp	r0, #3
 8003410:	d103      	bne.n	800341a <__iar_annotation$$branch+0x2f2>
 8003412:	2080      	movs	r0, #128	@ 0x80
 8003414:	0200      	lsls	r0, r0, #8
 8003416:	83e0      	strh	r0, [r4, #30]
 8003418:	2700      	movs	r7, #0
 800341a:	2000      	movs	r0, #0
 800341c:	9000      	str	r0, [sp, #0]
 800341e:	230c      	movs	r3, #12
 8003420:	2203      	movs	r2, #3
 8003422:	2100      	movs	r1, #0
 8003424:	0020      	movs	r0, r4
 8003426:	f7fe f9a7 	bl	8001778 <PE_Send_CtrlMessage>
 800342a:	6960      	ldr	r0, [r4, #20]
 800342c:	2118      	movs	r1, #24
 800342e:	4388      	bics	r0, r1
 8003430:	9901      	ldr	r1, [sp, #4]
 8003432:	00c9      	lsls	r1, r1, #3
 8003434:	2218      	movs	r2, #24
 8003436:	400a      	ands	r2, r1
 8003438:	4302      	orrs	r2, r0
 800343a:	6162      	str	r2, [r4, #20]
 800343c:	e012      	b.n	8003464 <__iar_annotation$$branch+0x33c>
 800343e:	2000      	movs	r0, #0
 8003440:	9000      	str	r0, [sp, #0]
 8003442:	230c      	movs	r3, #12
 8003444:	2202      	movs	r2, #2
 8003446:	e009      	b.n	800345c <__iar_annotation$$branch+0x334>
 8003448:	0a00      	lsrs	r0, r0, #8
 800344a:	4005      	ands	r5, r0
 800344c:	2d03      	cmp	r5, #3
 800344e:	d101      	bne.n	8003454 <__iar_annotation$$branch+0x32c>
 8003450:	2303      	movs	r3, #3
 8003452:	e000      	b.n	8003456 <__iar_annotation$$branch+0x32e>
 8003454:	230e      	movs	r3, #14
 8003456:	2000      	movs	r0, #0
 8003458:	9000      	str	r0, [sp, #0]
 800345a:	2204      	movs	r2, #4
 800345c:	2100      	movs	r1, #0
 800345e:	0020      	movs	r0, r4
 8003460:	f7fe f98a 	bl	8001778 <PE_Send_CtrlMessage>
 8003464:	003d      	movs	r5, r7
 8003466:	e630      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003468:	8be0      	ldrh	r0, [r4, #30]
 800346a:	03a9      	lsls	r1, r5, #14
 800346c:	4288      	cmp	r0, r1
 800346e:	d1fa      	bne.n	8003466 <__iar_annotation$$branch+0x33e>
 8003470:	2104      	movs	r1, #4
 8003472:	0020      	movs	r0, r4
 8003474:	f7fe f8cb 	bl	800160e <PE_SetPowerNegotiation>
 8003478:	68a0      	ldr	r0, [r4, #8]
 800347a:	6801      	ldr	r1, [r0, #0]
 800347c:	2900      	cmp	r1, #0
 800347e:	d0f2      	beq.n	8003466 <__iar_annotation$$branch+0x33e>
 8003480:	7c20      	ldrb	r0, [r4, #16]
 8003482:	4788      	blx	r1
 8003484:	2800      	cmp	r0, #0
 8003486:	d000      	beq.n	800348a <__iar_annotation$$branch+0x362>
 8003488:	e2db      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 800348a:	200d      	movs	r0, #13
 800348c:	e6d5      	b.n	800323a <__iar_annotation$$branch+0x112>
 800348e:	2000      	movs	r0, #0
 8003490:	9000      	str	r0, [sp, #0]
 8003492:	2303      	movs	r3, #3
 8003494:	2206      	movs	r2, #6
 8003496:	2100      	movs	r1, #0
 8003498:	0020      	movs	r0, r4
 800349a:	f7fe f96d 	bl	8001778 <PE_Send_CtrlMessage>
 800349e:	2800      	cmp	r0, #0
 80034a0:	d110      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034a2:	2103      	movs	r1, #3
 80034a4:	0020      	movs	r0, r4
 80034a6:	f7fe f8b2 	bl	800160e <PE_SetPowerNegotiation>
 80034aa:	2110      	movs	r1, #16
 80034ac:	7c20      	ldrb	r0, [r4, #16]
 80034ae:	f7fd f91b 	bl	80006e8 <USBPD_PE_Notification>
 80034b2:	2000      	movs	r0, #0
 80034b4:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80034b6:	6960      	ldr	r0, [r4, #20]
 80034b8:	06c0      	lsls	r0, r0, #27
 80034ba:	0f80      	lsrs	r0, r0, #30
 80034bc:	2803      	cmp	r0, #3
 80034be:	d101      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034c0:	4876      	ldr	r0, [pc, #472]	@ (800369c <__iar_annotation$$branch+0x574>)
 80034c2:	84a0      	strh	r0, [r4, #36]	@ 0x24
 80034c4:	e601      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80034c6:	2001      	movs	r0, #1
 80034c8:	9000      	str	r0, [sp, #0]
 80034ca:	2397      	movs	r3, #151	@ 0x97
 80034cc:	2202      	movs	r2, #2
 80034ce:	2100      	movs	r1, #0
 80034d0:	0020      	movs	r0, r4
 80034d2:	f7fe f951 	bl	8001778 <PE_Send_CtrlMessage>
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d1f4      	bne.n	80034c4 <__iar_annotation$$branch+0x39c>
 80034da:	7725      	strb	r5, [r4, #28]
 80034dc:	2129      	movs	r1, #41	@ 0x29
 80034de:	7c20      	ldrb	r0, [r4, #16]
 80034e0:	f7fd f902 	bl	80006e8 <USBPD_PE_Notification>
 80034e4:	486e      	ldr	r0, [pc, #440]	@ (80036a0 <__iar_annotation$$branch+0x578>)
 80034e6:	83e0      	strh	r0, [r4, #30]
 80034e8:	4d6e      	ldr	r5, [pc, #440]	@ (80036a4 <__iar_annotation$$branch+0x57c>)
 80034ea:	e5ee      	b.n	80030ca <__iar_annotation$$branch+0xe>
 80034ec:	00008014 	.word	0x00008014
 80034f0:	00008096 	.word	0x00008096
 80034f4:	00007fff 	.word	0x00007fff
 80034f8:	8be0      	ldrh	r0, [r4, #30]
 80034fa:	03a9      	lsls	r1, r5, #14
 80034fc:	4288      	cmp	r0, r1
 80034fe:	d1f4      	bne.n	80034ea <__iar_annotation$$branch+0x3c2>
 8003500:	212a      	movs	r1, #42	@ 0x2a
 8003502:	7c20      	ldrb	r0, [r4, #16]
 8003504:	f7fd f8f0 	bl	80006e8 <USBPD_PE_Notification>
 8003508:	2000      	movs	r0, #0
 800350a:	9000      	str	r0, [sp, #0]
 800350c:	2303      	movs	r3, #3
 800350e:	2206      	movs	r2, #6
 8003510:	2100      	movs	r1, #0
 8003512:	0020      	movs	r0, r4
 8003514:	f7fe f930 	bl	8001778 <PE_Send_CtrlMessage>
 8003518:	2800      	cmp	r0, #0
 800351a:	d109      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 800351c:	212e      	movs	r1, #46	@ 0x2e
 800351e:	e6cd      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003520:	2000      	movs	r0, #0
 8003522:	9000      	str	r0, [sp, #0]
 8003524:	2307      	movs	r3, #7
 8003526:	2203      	movs	r2, #3
 8003528:	2100      	movs	r1, #0
 800352a:	0020      	movs	r0, r4
 800352c:	f7fe f924 	bl	8001778 <PE_Send_CtrlMessage>
 8003530:	e5cb      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003532:	2000      	movs	r0, #0
 8003534:	9000      	str	r0, [sp, #0]
 8003536:	2312      	movs	r3, #18
 8003538:	220d      	movs	r2, #13
 800353a:	2031      	movs	r0, #49	@ 0x31
 800353c:	5c21      	ldrb	r1, [r4, r0]
 800353e:	0020      	movs	r0, r4
 8003540:	f7fe f91a 	bl	8001778 <PE_Send_CtrlMessage>
 8003544:	2800      	cmp	r0, #0
 8003546:	d1f3      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 8003548:	83e7      	strh	r7, [r4, #30]
 800354a:	251b      	movs	r5, #27
 800354c:	2130      	movs	r1, #48	@ 0x30
 800354e:	e6b5      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003550:	4668      	mov	r0, sp
 8003552:	7b00      	ldrb	r0, [r0, #12]
 8003554:	2814      	cmp	r0, #20
 8003556:	d021      	beq.n	800359c <__iar_annotation$$branch+0x474>
 8003558:	2030      	movs	r0, #48	@ 0x30
 800355a:	5c20      	ldrb	r0, [r4, r0]
 800355c:	2231      	movs	r2, #49	@ 0x31
 800355e:	5ca2      	ldrb	r2, [r4, r2]
 8003560:	4290      	cmp	r0, r2
 8003562:	d11b      	bne.n	800359c <__iar_annotation$$branch+0x474>
 8003564:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003566:	4001      	ands	r1, r0
 8003568:	2903      	cmp	r1, #3
 800356a:	d117      	bne.n	800359c <__iar_annotation$$branch+0x474>
 800356c:	2131      	movs	r1, #49	@ 0x31
 800356e:	7c20      	ldrb	r0, [r4, #16]
 8003570:	f7fd f8ba 	bl	80006e8 <USBPD_PE_Notification>
 8003574:	2030      	movs	r0, #48	@ 0x30
 8003576:	5c20      	ldrb	r0, [r4, r0]
 8003578:	2800      	cmp	r0, #0
 800357a:	d102      	bne.n	8003582 <__iar_annotation$$branch+0x45a>
 800357c:	2007      	movs	r0, #7
 800357e:	7460      	strb	r0, [r4, #17]
 8003580:	e002      	b.n	8003588 <__iar_annotation$$branch+0x460>
 8003582:	2003      	movs	r0, #3
 8003584:	7460      	strb	r0, [r4, #17]
 8003586:	2500      	movs	r5, #0
 8003588:	4668      	mov	r0, sp
 800358a:	7b00      	ldrb	r0, [r0, #12]
 800358c:	2814      	cmp	r0, #20
 800358e:	d005      	beq.n	800359c <__iar_annotation$$branch+0x474>
 8003590:	2014      	movs	r0, #20
 8003592:	4669      	mov	r1, sp
 8003594:	7308      	strb	r0, [r1, #12]
 8003596:	0020      	movs	r0, r4
 8003598:	f7fd fb11 	bl	8000bbe <PE_Clear_RxEvent>
 800359c:	8be0      	ldrh	r0, [r4, #30]
 800359e:	2180      	movs	r1, #128	@ 0x80
 80035a0:	0209      	lsls	r1, r1, #8
 80035a2:	4288      	cmp	r0, r1
 80035a4:	d1c4      	bne.n	8003530 <__iar_annotation$$branch+0x408>
 80035a6:	e24c      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 80035a8:	6860      	ldr	r0, [r4, #4]
 80035aa:	7800      	ldrb	r0, [r0, #0]
 80035ac:	0780      	lsls	r0, r0, #30
 80035ae:	0f80      	lsrs	r0, r0, #30
 80035b0:	2802      	cmp	r0, #2
 80035b2:	d102      	bne.n	80035ba <__iar_annotation$$branch+0x492>
 80035b4:	7c20      	ldrb	r0, [r4, #16]
 80035b6:	f002 fa0a 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 80035ba:	2105      	movs	r1, #5
 80035bc:	0020      	movs	r0, r4
 80035be:	f7fd fa99 	bl	8000af4 <PE_Send_RESET>
 80035c2:	6860      	ldr	r0, [r4, #4]
 80035c4:	6801      	ldr	r1, [r0, #0]
 80035c6:	2210      	movs	r2, #16
 80035c8:	4391      	bics	r1, r2
 80035ca:	6001      	str	r1, [r0, #0]
 80035cc:	78b0      	ldrb	r0, [r6, #2]
 80035ce:	1c40      	adds	r0, r0, #1
 80035d0:	70b0      	strb	r0, [r6, #2]
 80035d2:	6961      	ldr	r1, [r4, #20]
 80035d4:	4834      	ldr	r0, [pc, #208]	@ (80036a8 <__iar_annotation$$branch+0x580>)
 80035d6:	4008      	ands	r0, r1
 80035d8:	6160      	str	r0, [r4, #20]
 80035da:	2100      	movs	r1, #0
 80035dc:	2232      	movs	r2, #50	@ 0x32
 80035de:	54a1      	strb	r1, [r4, r2]
 80035e0:	4932      	ldr	r1, [pc, #200]	@ (80036ac <__iar_annotation$$branch+0x584>)
 80035e2:	4001      	ands	r1, r0
 80035e4:	6161      	str	r1, [r4, #20]
 80035e6:	2202      	movs	r2, #2
 80035e8:	2101      	movs	r1, #1
 80035ea:	0020      	movs	r0, r4
 80035ec:	f7fe f806 	bl	80015fc <PE_CallHardResetCallback>
 80035f0:	2169      	movs	r1, #105	@ 0x69
 80035f2:	4668      	mov	r0, sp
 80035f4:	7b40      	ldrb	r0, [r0, #13]
 80035f6:	f7fd f877 	bl	80006e8 <USBPD_PE_Notification>
 80035fa:	83e7      	strh	r7, [r4, #30]
 80035fc:	251b      	movs	r5, #27
 80035fe:	2015      	movs	r0, #21
 8003600:	e61b      	b.n	800323a <__iar_annotation$$branch+0x112>
 8003602:	6860      	ldr	r0, [r4, #4]
 8003604:	7800      	ldrb	r0, [r0, #0]
 8003606:	0780      	lsls	r0, r0, #30
 8003608:	0f80      	lsrs	r0, r0, #30
 800360a:	2802      	cmp	r0, #2
 800360c:	d1f0      	bne.n	80035f0 <__iar_annotation$$branch+0x4c8>
 800360e:	7c20      	ldrb	r0, [r4, #16]
 8003610:	f002 f9dd 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003614:	e7ec      	b.n	80035f0 <__iar_annotation$$branch+0x4c8>
 8003616:	8be0      	ldrh	r0, [r4, #30]
 8003618:	03a9      	lsls	r1, r5, #14
 800361a:	4288      	cmp	r0, r1
 800361c:	d11a      	bne.n	8003654 <__iar_annotation$$branch+0x52c>
 800361e:	6960      	ldr	r0, [r4, #20]
 8003620:	78b1      	ldrb	r1, [r6, #2]
 8003622:	2903      	cmp	r1, #3
 8003624:	d303      	bcc.n	800362e <__iar_annotation$$branch+0x506>
 8003626:	0741      	lsls	r1, r0, #29
 8003628:	0fc9      	lsrs	r1, r1, #31
 800362a:	d130      	bne.n	800368e <__iar_annotation$$branch+0x566>
 800362c:	e66d      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 800362e:	4920      	ldr	r1, [pc, #128]	@ (80036b0 <__iar_annotation$$branch+0x588>)
 8003630:	83e1      	strh	r1, [r4, #30]
 8003632:	2117      	movs	r1, #23
 8003634:	7461      	strb	r1, [r4, #17]
 8003636:	2500      	movs	r5, #0
 8003638:	0540      	lsls	r0, r0, #21
 800363a:	0f80      	lsrs	r0, r0, #30
 800363c:	1e42      	subs	r2, r0, #1
 800363e:	4192      	sbcs	r2, r2
 8003640:	0fd2      	lsrs	r2, r2, #31
 8003642:	2101      	movs	r1, #1
 8003644:	0020      	movs	r0, r4
 8003646:	f7fd ffd9 	bl	80015fc <PE_CallHardResetCallback>
 800364a:	2203      	movs	r2, #3
 800364c:	2101      	movs	r1, #1
 800364e:	0020      	movs	r0, r4
 8003650:	f7fd ffd4 	bl	80015fc <PE_CallHardResetCallback>
 8003654:	e539      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003656:	2100      	movs	r1, #0
 8003658:	4668      	mov	r0, sp
 800365a:	7b40      	ldrb	r0, [r0, #13]
 800365c:	68a2      	ldr	r2, [r4, #8]
 800365e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003660:	4790      	blx	r2
 8003662:	2801      	cmp	r0, #1
 8003664:	d105      	bne.n	8003672 <__iar_annotation$$branch+0x54a>
 8003666:	4813      	ldr	r0, [pc, #76]	@ (80036b4 <__iar_annotation$$branch+0x58c>)
 8003668:	83e0      	strh	r0, [r4, #30]
 800366a:	25c8      	movs	r5, #200	@ 0xc8
 800366c:	00ad      	lsls	r5, r5, #2
 800366e:	2013      	movs	r0, #19
 8003670:	7460      	strb	r0, [r4, #17]
 8003672:	8be0      	ldrh	r0, [r4, #30]
 8003674:	2180      	movs	r1, #128	@ 0x80
 8003676:	0209      	lsls	r1, r1, #8
 8003678:	4288      	cmp	r0, r1
 800367a:	d1eb      	bne.n	8003654 <__iar_annotation$$branch+0x52c>
 800367c:	2206      	movs	r2, #6
 800367e:	2101      	movs	r1, #1
 8003680:	0020      	movs	r0, r4
 8003682:	f7fd ffbb 	bl	80015fc <PE_CallHardResetCallback>
 8003686:	6960      	ldr	r0, [r4, #20]
 8003688:	0741      	lsls	r1, r0, #29
 800368a:	0fc9      	lsrs	r1, r1, #31
 800368c:	d003      	beq.n	8003696 <__iar_annotation$$branch+0x56e>
 800368e:	68a0      	ldr	r0, [r4, #8]
 8003690:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003692:	2800      	cmp	r0, #0
 8003694:	d137      	bne.n	8003706 <__iar_annotation$$branch+0x5de>
 8003696:	e638      	b.n	800330a <__iar_annotation$$branch+0x1e2>
 8003698:	0000801e 	.word	0x0000801e
 800369c:	0000b6b0 	.word	0x0000b6b0
 80036a0:	00008226 	.word	0x00008226
 80036a4:	00000226 	.word	0x00000226
 80036a8:	fffff9ff 	.word	0xfffff9ff
 80036ac:	fffffe3f 	.word	0xfffffe3f
 80036b0:	0000828a 	.word	0x0000828a
 80036b4:	00008320 	.word	0x00008320
 80036b8:	8be0      	ldrh	r0, [r4, #30]
 80036ba:	03a9      	lsls	r1, r5, #14
 80036bc:	4288      	cmp	r0, r1
 80036be:	d126      	bne.n	800370e <__iar_annotation$$branch+0x5e6>
 80036c0:	2204      	movs	r2, #4
 80036c2:	2101      	movs	r1, #1
 80036c4:	0020      	movs	r0, r4
 80036c6:	f7fd ff99 	bl	80015fc <PE_CallHardResetCallback>
 80036ca:	2101      	movs	r1, #1
 80036cc:	4668      	mov	r0, sp
 80036ce:	7b40      	ldrb	r0, [r0, #13]
 80036d0:	68a2      	ldr	r2, [r4, #8]
 80036d2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80036d4:	4790      	blx	r2
 80036d6:	2801      	cmp	r0, #1
 80036d8:	d10d      	bne.n	80036f6 <__iar_annotation$$branch+0x5ce>
 80036da:	0020      	movs	r0, r4
 80036dc:	f7fd fb1d 	bl	8000d1a <PE_Reset_HardReset>
 80036e0:	2168      	movs	r1, #104	@ 0x68
 80036e2:	4668      	mov	r0, sp
 80036e4:	7b40      	ldrb	r0, [r0, #13]
 80036e6:	f7fc ffff 	bl	80006e8 <USBPD_PE_Notification>
 80036ea:	2205      	movs	r2, #5
 80036ec:	2101      	movs	r1, #1
 80036ee:	0020      	movs	r0, r4
 80036f0:	f7fd ff84 	bl	80015fc <PE_CallHardResetCallback>
 80036f4:	e633      	b.n	800335e <__iar_annotation$$branch+0x236>
 80036f6:	2206      	movs	r2, #6
 80036f8:	2101      	movs	r1, #1
 80036fa:	0020      	movs	r0, r4
 80036fc:	f7fd ff7e 	bl	80015fc <PE_CallHardResetCallback>
 8003700:	68a0      	ldr	r0, [r4, #8]
 8003702:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003704:	2800      	cmp	r0, #0
 8003706:	d000      	beq.n	800370a <__iar_annotation$$branch+0x5e2>
 8003708:	e2d6      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 800370a:	2500      	movs	r5, #0
 800370c:	7465      	strb	r5, [r4, #17]
 800370e:	e4dc      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003710:	2001      	movs	r0, #1
 8003712:	9000      	str	r0, [sp, #0]
 8003714:	231b      	movs	r3, #27
 8003716:	2207      	movs	r2, #7
 8003718:	2100      	movs	r1, #0
 800371a:	0020      	movs	r0, r4
 800371c:	f7fe f82c 	bl	8001778 <PE_Send_CtrlMessage>
 8003720:	2800      	cmp	r0, #0
 8003722:	d1f4      	bne.n	800370e <__iar_annotation$$branch+0x5e6>
 8003724:	2006      	movs	r0, #6
 8003726:	7720      	strb	r0, [r4, #28]
 8003728:	83e7      	strh	r7, [r4, #30]
 800372a:	251b      	movs	r5, #27
 800372c:	210b      	movs	r1, #11
 800372e:	e5c5      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003730:	4668      	mov	r0, sp
 8003732:	7b00      	ldrb	r0, [r0, #12]
 8003734:	2811      	cmp	r0, #17
 8003736:	d13e      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003738:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800373a:	0bc1      	lsrs	r1, r0, #15
 800373c:	d11f      	bne.n	800377e <__iar_annotation$$branch+0x656>
 800373e:	0441      	lsls	r1, r0, #17
 8003740:	0f49      	lsrs	r1, r1, #29
 8003742:	d01c      	beq.n	800377e <__iar_annotation$$branch+0x656>
 8003744:	06c0      	lsls	r0, r0, #27
 8003746:	0ec0      	lsrs	r0, r0, #27
 8003748:	2801      	cmp	r0, #1
 800374a:	d118      	bne.n	800377e <__iar_annotation$$branch+0x656>
 800374c:	008b      	lsls	r3, r1, #2
 800374e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003750:	1c82      	adds	r2, r0, #2
 8003752:	2104      	movs	r1, #4
 8003754:	7c20      	ldrb	r0, [r4, #16]
 8003756:	68a5      	ldr	r5, [r4, #8]
 8003758:	69ad      	ldr	r5, [r5, #24]
 800375a:	47a8      	blx	r5
 800375c:	2003      	movs	r0, #3
 800375e:	7460      	strb	r0, [r4, #17]
 8003760:	2500      	movs	r5, #0
 8003762:	4668      	mov	r0, sp
 8003764:	7b00      	ldrb	r0, [r0, #12]
 8003766:	2814      	cmp	r0, #20
 8003768:	d005      	beq.n	8003776 <__iar_annotation$$branch+0x64e>
 800376a:	2014      	movs	r0, #20
 800376c:	4669      	mov	r1, sp
 800376e:	7308      	strb	r0, [r1, #12]
 8003770:	0020      	movs	r0, r4
 8003772:	f7fd fa24 	bl	8000bbe <PE_Clear_RxEvent>
 8003776:	210d      	movs	r1, #13
 8003778:	7c20      	ldrb	r0, [r4, #16]
 800377a:	f7fc ffb5 	bl	80006e8 <USBPD_PE_Notification>
 800377e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003780:	21f0      	movs	r1, #240	@ 0xf0
 8003782:	0209      	lsls	r1, r1, #8
 8003784:	4001      	ands	r1, r0
 8003786:	d116      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003788:	06c0      	lsls	r0, r0, #27
 800378a:	0ec0      	lsrs	r0, r0, #27
 800378c:	2804      	cmp	r0, #4
 800378e:	d001      	beq.n	8003794 <__iar_annotation$$branch+0x66c>
 8003790:	2810      	cmp	r0, #16
 8003792:	d110      	bne.n	80037b6 <__iar_annotation$$branch+0x68e>
 8003794:	2003      	movs	r0, #3
 8003796:	7460      	strb	r0, [r4, #17]
 8003798:	2500      	movs	r5, #0
 800379a:	4668      	mov	r0, sp
 800379c:	7b00      	ldrb	r0, [r0, #12]
 800379e:	2814      	cmp	r0, #20
 80037a0:	d005      	beq.n	80037ae <__iar_annotation$$branch+0x686>
 80037a2:	2014      	movs	r0, #20
 80037a4:	4669      	mov	r1, sp
 80037a6:	7308      	strb	r0, [r1, #12]
 80037a8:	0020      	movs	r0, r4
 80037aa:	f7fd fa08 	bl	8000bbe <PE_Clear_RxEvent>
 80037ae:	210e      	movs	r1, #14
 80037b0:	7c20      	ldrb	r0, [r4, #16]
 80037b2:	f7fc ff99 	bl	80006e8 <USBPD_PE_Notification>
 80037b6:	8be0      	ldrh	r0, [r4, #30]
 80037b8:	2180      	movs	r1, #128	@ 0x80
 80037ba:	0209      	lsls	r1, r1, #8
 80037bc:	4288      	cmp	r0, r1
 80037be:	d11f      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 80037c0:	2003      	movs	r0, #3
 80037c2:	e55f      	b.n	8003284 <__iar_annotation$$branch+0x15c>
 80037c4:	68a0      	ldr	r0, [r4, #8]
 80037c6:	6881      	ldr	r1, [r0, #8]
 80037c8:	2900      	cmp	r1, #0
 80037ca:	d01f      	beq.n	800380c <__iar_annotation$$branch+0x6e4>
 80037cc:	7c20      	ldrb	r0, [r4, #16]
 80037ce:	4788      	blx	r1
 80037d0:	280a      	cmp	r0, #10
 80037d2:	d002      	beq.n	80037da <__iar_annotation$$branch+0x6b2>
 80037d4:	280d      	cmp	r0, #13
 80037d6:	d014      	beq.n	8003802 <__iar_annotation$$branch+0x6da>
 80037d8:	e018      	b.n	800380c <__iar_annotation$$branch+0x6e4>
 80037da:	1cf8      	adds	r0, r7, #3
 80037dc:	83e0      	strh	r0, [r4, #30]
 80037de:	251e      	movs	r5, #30
 80037e0:	2000      	movs	r0, #0
 80037e2:	9000      	str	r0, [sp, #0]
 80037e4:	2324      	movs	r3, #36	@ 0x24
 80037e6:	2203      	movs	r2, #3
 80037e8:	2100      	movs	r1, #0
 80037ea:	0020      	movs	r0, r4
 80037ec:	f7fd ffc4 	bl	8001778 <PE_Send_CtrlMessage>
 80037f0:	2800      	cmp	r0, #0
 80037f2:	d105      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 80037f4:	2201      	movs	r2, #1
 80037f6:	2101      	movs	r1, #1
 80037f8:	7c20      	ldrb	r0, [r4, #16]
 80037fa:	68a3      	ldr	r3, [r4, #8]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	4798      	blx	r3
 8003800:	e463      	b.n	80030ca <__iar_annotation$$branch+0xe>
 8003802:	2000      	movs	r0, #0
 8003804:	9000      	str	r0, [sp, #0]
 8003806:	2303      	movs	r3, #3
 8003808:	220c      	movs	r2, #12
 800380a:	e68d      	b.n	8003528 <__iar_annotation$$branch+0x400>
 800380c:	2000      	movs	r0, #0
 800380e:	9000      	str	r0, [sp, #0]
 8003810:	2303      	movs	r3, #3
 8003812:	2204      	movs	r2, #4
 8003814:	e688      	b.n	8003528 <__iar_annotation$$branch+0x400>
 8003816:	8be0      	ldrh	r0, [r4, #30]
 8003818:	03a9      	lsls	r1, r5, #14
 800381a:	4288      	cmp	r0, r1
 800381c:	d1f0      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 800381e:	2104      	movs	r1, #4
 8003820:	0020      	movs	r0, r4
 8003822:	f7fd fef4 	bl	800160e <PE_SetPowerNegotiation>
 8003826:	6860      	ldr	r0, [r4, #4]
 8003828:	6801      	ldr	r1, [r0, #0]
 800382a:	2210      	movs	r2, #16
 800382c:	430a      	orrs	r2, r1
 800382e:	6002      	str	r2, [r0, #0]
 8003830:	2206      	movs	r2, #6
 8003832:	2101      	movs	r1, #1
 8003834:	7c20      	ldrb	r0, [r4, #16]
 8003836:	68a3      	ldr	r3, [r4, #8]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	4798      	blx	r3
 800383c:	2207      	movs	r2, #7
 800383e:	2101      	movs	r1, #1
 8003840:	7c20      	ldrb	r0, [r4, #16]
 8003842:	68a3      	ldr	r3, [r4, #8]
 8003844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003846:	4798      	blx	r3
 8003848:	2100      	movs	r1, #0
 800384a:	7c20      	ldrb	r0, [r4, #16]
 800384c:	f002 f889 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 8003850:	2000      	movs	r0, #0
 8003852:	9000      	str	r0, [sp, #0]
 8003854:	2325      	movs	r3, #37	@ 0x25
 8003856:	2206      	movs	r2, #6
 8003858:	2100      	movs	r1, #0
 800385a:	0020      	movs	r0, r4
 800385c:	f7fd ff8c 	bl	8001778 <PE_Send_CtrlMessage>
 8003860:	2800      	cmp	r0, #0
 8003862:	d1cd      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003864:	e0c9      	b.n	80039fa <__iar_annotation$$branch+0x8d2>
 8003866:	4668      	mov	r0, sp
 8003868:	7b00      	ldrb	r0, [r0, #12]
 800386a:	2811      	cmp	r0, #17
 800386c:	d10b      	bne.n	8003886 <__iar_annotation$$branch+0x75e>
 800386e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003870:	4001      	ands	r1, r0
 8003872:	2906      	cmp	r1, #6
 8003874:	d107      	bne.n	8003886 <__iar_annotation$$branch+0x75e>
 8003876:	2014      	movs	r0, #20
 8003878:	4669      	mov	r1, sp
 800387a:	7308      	strb	r0, [r1, #12]
 800387c:	0020      	movs	r0, r4
 800387e:	f7fd f99e 	bl	8000bbe <PE_Clear_RxEvent>
 8003882:	2026      	movs	r0, #38	@ 0x26
 8003884:	7460      	strb	r0, [r4, #17]
 8003886:	8be0      	ldrh	r0, [r4, #30]
 8003888:	03a9      	lsls	r1, r5, #14
 800388a:	4288      	cmp	r0, r1
 800388c:	d1b8      	bne.n	8003800 <__iar_annotation$$branch+0x6d8>
 800388e:	68a3      	ldr	r3, [r4, #8]
 8003890:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003892:	2800      	cmp	r0, #0
 8003894:	d000      	beq.n	8003898 <__iar_annotation$$branch+0x770>
 8003896:	e20f      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 8003898:	220a      	movs	r2, #10
 800389a:	2101      	movs	r1, #1
 800389c:	7c20      	ldrb	r0, [r4, #16]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	4798      	blx	r3
 80038a2:	e0ce      	b.n	8003a42 <__iar_annotation$$branch+0x91a>
 80038a4:	2100      	movs	r1, #0
 80038a6:	0020      	movs	r0, r4
 80038a8:	f7fd f944 	bl	8000b34 <PE_ChangePowerRole>
 80038ac:	220d      	movs	r2, #13
 80038ae:	2100      	movs	r1, #0
 80038b0:	7c20      	ldrb	r0, [r4, #16]
 80038b2:	68a3      	ldr	r3, [r4, #8]
 80038b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b6:	4798      	blx	r3
 80038b8:	2114      	movs	r1, #20
 80038ba:	7c20      	ldrb	r0, [r4, #16]
 80038bc:	f7fc ff14 	bl	80006e8 <USBPD_PE_Notification>
 80038c0:	220e      	movs	r2, #14
 80038c2:	2100      	movs	r1, #0
 80038c4:	7c20      	ldrb	r0, [r4, #16]
 80038c6:	68a3      	ldr	r3, [r4, #8]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ca:	4798      	blx	r3
 80038cc:	6860      	ldr	r0, [r4, #4]
 80038ce:	7800      	ldrb	r0, [r0, #0]
 80038d0:	0780      	lsls	r0, r0, #30
 80038d2:	0f80      	lsrs	r0, r0, #30
 80038d4:	2801      	cmp	r0, #1
 80038d6:	d104      	bne.n	80038e2 <__iar_annotation$$branch+0x7ba>
 80038d8:	2101      	movs	r1, #1
 80038da:	4668      	mov	r0, sp
 80038dc:	7b40      	ldrb	r0, [r0, #13]
 80038de:	f002 f895 	bl	8005a0c <USBPD_PRL_SOPCapability>
 80038e2:	0020      	movs	r0, r4
 80038e4:	f7fd fa90 	bl	8000e08 <PE_Reset_StateMachine>
 80038e8:	e4cd      	b.n	8003286 <__iar_annotation$$branch+0x15e>
 80038ea:	2001      	movs	r0, #1
 80038ec:	9000      	str	r0, [sp, #0]
 80038ee:	231f      	movs	r3, #31
 80038f0:	220a      	movs	r2, #10
 80038f2:	2100      	movs	r1, #0
 80038f4:	0020      	movs	r0, r4
 80038f6:	f7fd ff3f 	bl	8001778 <PE_Send_CtrlMessage>
 80038fa:	2800      	cmp	r0, #0
 80038fc:	d1c6      	bne.n	800388c <__iar_annotation$$branch+0x764>
 80038fe:	2008      	movs	r0, #8
 8003900:	7720      	strb	r0, [r4, #28]
 8003902:	83e7      	strh	r7, [r4, #30]
 8003904:	251b      	movs	r5, #27
 8003906:	2202      	movs	r2, #2
 8003908:	2101      	movs	r1, #1
 800390a:	7c20      	ldrb	r0, [r4, #16]
 800390c:	68a3      	ldr	r3, [r4, #8]
 800390e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003910:	4798      	blx	r3
 8003912:	2139      	movs	r1, #57	@ 0x39
 8003914:	e4d2      	b.n	80032bc <__iar_annotation$$branch+0x194>
 8003916:	4668      	mov	r0, sp
 8003918:	7b00      	ldrb	r0, [r0, #12]
 800391a:	2811      	cmp	r0, #17
 800391c:	d145      	bne.n	80039aa <__iar_annotation$$branch+0x882>
 800391e:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003920:	391f      	subs	r1, #31
 8003922:	4001      	ands	r1, r0
 8003924:	d141      	bne.n	80039aa <__iar_annotation$$branch+0x882>
 8003926:	06c0      	lsls	r0, r0, #27
 8003928:	0ec0      	lsrs	r0, r0, #27
 800392a:	2803      	cmp	r0, #3
 800392c:	d006      	beq.n	800393c <__iar_annotation$$branch+0x814>
 800392e:	2804      	cmp	r0, #4
 8003930:	d012      	beq.n	8003958 <__iar_annotation$$branch+0x830>
 8003932:	280c      	cmp	r0, #12
 8003934:	d008      	beq.n	8003948 <__iar_annotation$$branch+0x820>
 8003936:	2810      	cmp	r0, #16
 8003938:	d020      	beq.n	800397c <__iar_annotation$$branch+0x854>
 800393a:	e036      	b.n	80039aa <__iar_annotation$$branch+0x882>
 800393c:	213a      	movs	r1, #58	@ 0x3a
 800393e:	7c20      	ldrb	r0, [r4, #16]
 8003940:	f7fc fed2 	bl	80006e8 <USBPD_PE_Notification>
 8003944:	2020      	movs	r0, #32
 8003946:	e012      	b.n	800396e <__iar_annotation$$branch+0x846>
 8003948:	2205      	movs	r2, #5
 800394a:	2101      	movs	r1, #1
 800394c:	7c20      	ldrb	r0, [r4, #16]
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003952:	4798      	blx	r3
 8003954:	213b      	movs	r1, #59	@ 0x3b
 8003956:	e006      	b.n	8003966 <__iar_annotation$$branch+0x83e>
 8003958:	2204      	movs	r2, #4
 800395a:	2101      	movs	r1, #1
 800395c:	7c20      	ldrb	r0, [r4, #16]
 800395e:	68a3      	ldr	r3, [r4, #8]
 8003960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003962:	4798      	blx	r3
 8003964:	2116      	movs	r1, #22
 8003966:	7c20      	ldrb	r0, [r4, #16]
 8003968:	f7fc febe 	bl	80006e8 <USBPD_PE_Notification>
 800396c:	2003      	movs	r0, #3
 800396e:	7460      	strb	r0, [r4, #17]
 8003970:	2500      	movs	r5, #0
 8003972:	4668      	mov	r0, sp
 8003974:	7b00      	ldrb	r0, [r0, #12]
 8003976:	2814      	cmp	r0, #20
 8003978:	d111      	bne.n	800399e <__iar_annotation$$branch+0x876>
 800397a:	e016      	b.n	80039aa <__iar_annotation$$branch+0x882>
 800397c:	2204      	movs	r2, #4
 800397e:	2101      	movs	r1, #1
 8003980:	7c20      	ldrb	r0, [r4, #16]
 8003982:	68a3      	ldr	r3, [r4, #8]
 8003984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003986:	4798      	blx	r3
 8003988:	2117      	movs	r1, #23
 800398a:	7c20      	ldrb	r0, [r4, #16]
 800398c:	f7fc feac 	bl	80006e8 <USBPD_PE_Notification>
 8003990:	2003      	movs	r0, #3
 8003992:	7460      	strb	r0, [r4, #17]
 8003994:	2500      	movs	r5, #0
 8003996:	4668      	mov	r0, sp
 8003998:	7b00      	ldrb	r0, [r0, #12]
 800399a:	2814      	cmp	r0, #20
 800399c:	d005      	beq.n	80039aa <__iar_annotation$$branch+0x882>
 800399e:	2014      	movs	r0, #20
 80039a0:	4669      	mov	r1, sp
 80039a2:	7308      	strb	r0, [r1, #12]
 80039a4:	0020      	movs	r0, r4
 80039a6:	f7fd f90a 	bl	8000bbe <PE_Clear_RxEvent>
 80039aa:	8be0      	ldrh	r0, [r4, #30]
 80039ac:	2180      	movs	r1, #128	@ 0x80
 80039ae:	0209      	lsls	r1, r1, #8
 80039b0:	4288      	cmp	r0, r1
 80039b2:	d12c      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 80039b4:	e704      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 80039b6:	6860      	ldr	r0, [r4, #4]
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	2210      	movs	r2, #16
 80039bc:	430a      	orrs	r2, r1
 80039be:	6002      	str	r2, [r0, #0]
 80039c0:	7f20      	ldrb	r0, [r4, #28]
 80039c2:	2809      	cmp	r0, #9
 80039c4:	d005      	beq.n	80039d2 <__iar_annotation$$branch+0x8aa>
 80039c6:	2206      	movs	r2, #6
 80039c8:	2101      	movs	r1, #1
 80039ca:	7c20      	ldrb	r0, [r4, #16]
 80039cc:	68a3      	ldr	r3, [r4, #8]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d0:	4798      	blx	r3
 80039d2:	2207      	movs	r2, #7
 80039d4:	2101      	movs	r1, #1
 80039d6:	7c20      	ldrb	r0, [r4, #16]
 80039d8:	68a3      	ldr	r3, [r4, #8]
 80039da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039dc:	4798      	blx	r3
 80039de:	2100      	movs	r1, #0
 80039e0:	7c20      	ldrb	r0, [r4, #16]
 80039e2:	f001 ffbe 	bl	8005962 <USBPD_PRL_SetHeaderPowerRole>
 80039e6:	2000      	movs	r0, #0
 80039e8:	9000      	str	r0, [sp, #0]
 80039ea:	2321      	movs	r3, #33	@ 0x21
 80039ec:	2206      	movs	r2, #6
 80039ee:	2100      	movs	r1, #0
 80039f0:	0020      	movs	r0, r4
 80039f2:	f7fd fec1 	bl	8001778 <PE_Send_CtrlMessage>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d109      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 80039fa:	2208      	movs	r2, #8
 80039fc:	2101      	movs	r1, #1
 80039fe:	7c20      	ldrb	r0, [r4, #16]
 8003a00:	68a3      	ldr	r3, [r4, #8]
 8003a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a04:	4798      	blx	r3
 8003a06:	48c5      	ldr	r0, [pc, #788]	@ (8003d1c <.text_3>)
 8003a08:	83e0      	strh	r0, [r4, #30]
 8003a0a:	25eb      	movs	r5, #235	@ 0xeb
 8003a0c:	006d      	lsls	r5, r5, #1
 8003a0e:	e6f7      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003a10:	4668      	mov	r0, sp
 8003a12:	7b00      	ldrb	r0, [r0, #12]
 8003a14:	2811      	cmp	r0, #17
 8003a16:	d10b      	bne.n	8003a30 <__iar_annotation$$branch+0x908>
 8003a18:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003a1a:	4001      	ands	r1, r0
 8003a1c:	2906      	cmp	r1, #6
 8003a1e:	d107      	bne.n	8003a30 <__iar_annotation$$branch+0x908>
 8003a20:	2026      	movs	r0, #38	@ 0x26
 8003a22:	7460      	strb	r0, [r4, #17]
 8003a24:	2014      	movs	r0, #20
 8003a26:	4669      	mov	r1, sp
 8003a28:	7308      	strb	r0, [r1, #12]
 8003a2a:	0020      	movs	r0, r4
 8003a2c:	f7fd f8c7 	bl	8000bbe <PE_Clear_RxEvent>
 8003a30:	8be0      	ldrh	r0, [r4, #30]
 8003a32:	03a9      	lsls	r1, r5, #14
 8003a34:	4288      	cmp	r0, r1
 8003a36:	d1ea      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 8003a38:	68a0      	ldr	r0, [r4, #8]
 8003a3a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	d000      	beq.n	8003a42 <__iar_annotation$$branch+0x91a>
 8003a40:	e13a      	b.n	8003cb8 <__iar_annotation$$branch+0x5e>
 8003a42:	200f      	movs	r0, #15
 8003a44:	e6bd      	b.n	80037c2 <__iar_annotation$$branch+0x69a>
 8003a46:	8be0      	ldrh	r0, [r4, #30]
 8003a48:	03a9      	lsls	r1, r5, #14
 8003a4a:	4288      	cmp	r0, r1
 8003a4c:	d1df      	bne.n	8003a0e <__iar_annotation$$branch+0x8e6>
 8003a4e:	220e      	movs	r2, #14
 8003a50:	2101      	movs	r1, #1
 8003a52:	7c20      	ldrb	r0, [r4, #16]
 8003a54:	68a3      	ldr	r3, [r4, #8]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a58:	4798      	blx	r3
 8003a5a:	6860      	ldr	r0, [r4, #4]
 8003a5c:	7800      	ldrb	r0, [r0, #0]
 8003a5e:	0780      	lsls	r0, r0, #30
 8003a60:	0f80      	lsrs	r0, r0, #30
 8003a62:	2802      	cmp	r0, #2
 8003a64:	d102      	bne.n	8003a6c <__iar_annotation$$branch+0x944>
 8003a66:	7c20      	ldrb	r0, [r4, #16]
 8003a68:	f001 ffb1 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003a6c:	0020      	movs	r0, r4
 8003a6e:	f7fd f9cb 	bl	8000e08 <PE_Reset_StateMachine>
 8003a72:	2115      	movs	r1, #21
 8003a74:	e74e      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003a76:	2803      	cmp	r0, #3
 8003a78:	d110      	bne.n	8003a9c <__iar_annotation$$branch+0x974>
 8003a7a:	2000      	movs	r0, #0
 8003a7c:	7720      	strb	r0, [r4, #28]
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	7800      	ldrb	r0, [r0, #0]
 8003a82:	0780      	lsls	r0, r0, #30
 8003a84:	0f80      	lsrs	r0, r0, #30
 8003a86:	2802      	cmp	r0, #2
 8003a88:	d102      	bne.n	8003a90 <__iar_annotation$$branch+0x968>
 8003a8a:	7c20      	ldrb	r0, [r4, #16]
 8003a8c:	f001 ff9f 	bl	80059ce <USBPD_PRL_SRCReleaseSinkNG>
 8003a90:	2004      	movs	r0, #4
 8003a92:	7460      	strb	r0, [r4, #17]
 8003a94:	2167      	movs	r1, #103	@ 0x67
 8003a96:	7c20      	ldrb	r0, [r4, #16]
 8003a98:	f7fc fe26 	bl	80006e8 <USBPD_PE_Notification>
 8003a9c:	4668      	mov	r0, sp
 8003a9e:	7b00      	ldrb	r0, [r0, #12]
 8003aa0:	2814      	cmp	r0, #20
 8003aa2:	d00d      	beq.n	8003ac0 <__iar_annotation$$branch+0x998>
 8003aa4:	0020      	movs	r0, r4
 8003aa6:	f7fe f917 	bl	8001cd8 <PE_ManageRXEvent>
 8003aaa:	4668      	mov	r0, sp
 8003aac:	7b00      	ldrb	r0, [r0, #12]
 8003aae:	2814      	cmp	r0, #20
 8003ab0:	d005      	beq.n	8003abe <__iar_annotation$$branch+0x996>
 8003ab2:	2014      	movs	r0, #20
 8003ab4:	4669      	mov	r1, sp
 8003ab6:	7308      	strb	r0, [r1, #12]
 8003ab8:	0020      	movs	r0, r4
 8003aba:	f7fd f880 	bl	8000bbe <PE_Clear_RxEvent>
 8003abe:	e69f      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003ac0:	6960      	ldr	r0, [r4, #20]
 8003ac2:	0cc0      	lsrs	r0, r0, #19
 8003ac4:	03ad      	lsls	r5, r5, #14
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	d01e      	beq.n	8003b08 <__iar_annotation$$branch+0x9e0>
 8003aca:	8c21      	ldrh	r1, [r4, #32]
 8003acc:	42a9      	cmp	r1, r5
 8003ace:	d10e      	bne.n	8003aee <__iar_annotation$$branch+0x9c6>
 8003ad0:	200f      	movs	r0, #15
 8003ad2:	7460      	strb	r0, [r4, #17]
 8003ad4:	2000      	movs	r0, #0
 8003ad6:	9000      	str	r0, [sp, #0]
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2270      	movs	r2, #112	@ 0x70
 8003adc:	7c21      	ldrb	r1, [r4, #16]
 8003ade:	2009      	movs	r0, #9
 8003ae0:	4da5      	ldr	r5, [pc, #660]	@ (8003d78 <.text_5>)
 8003ae2:	682d      	ldr	r5, [r5, #0]
 8003ae4:	47a8      	blx	r5
 8003ae6:	78b0      	ldrb	r0, [r6, #2]
 8003ae8:	1c40      	adds	r0, r0, #1
 8003aea:	70b0      	strb	r0, [r6, #2]
 8003aec:	e6fc      	b.n	80038e8 <__iar_annotation$$branch+0x7c0>
 8003aee:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003af0:	0509      	lsls	r1, r1, #20
 8003af2:	0f49      	lsrs	r1, r1, #29
 8003af4:	180a      	adds	r2, r1, r0
 8003af6:	2333      	movs	r3, #51	@ 0x33
 8003af8:	435a      	muls	r2, r3
 8003afa:	4315      	orrs	r5, r2
 8003afc:	8425      	strh	r5, [r4, #32]
 8003afe:	180d      	adds	r5, r1, r0
 8003b00:	2033      	movs	r0, #51	@ 0x33
 8003b02:	4345      	muls	r5, r0
 8003b04:	b2ad      	uxth	r5, r5
 8003b06:	e67b      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003b08:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 8003b0a:	42a8      	cmp	r0, r5
 8003b0c:	d099      	beq.n	8003a42 <__iar_annotation$$branch+0x91a>
 8003b0e:	7c20      	ldrb	r0, [r4, #16]
 8003b10:	f7fd f87a 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d113      	bne.n	8003b40 <__iar_annotation$$branch+0xa18>
 8003b18:	2032      	movs	r0, #50	@ 0x32
 8003b1a:	5c20      	ldrb	r0, [r4, r0]
 8003b1c:	2800      	cmp	r0, #0
 8003b1e:	d00f      	beq.n	8003b40 <__iar_annotation$$branch+0xa18>
 8003b20:	2133      	movs	r1, #51	@ 0x33
 8003b22:	5c61      	ldrb	r1, [r4, r1]
 8003b24:	2231      	movs	r2, #49	@ 0x31
 8003b26:	54a1      	strb	r1, [r4, r2]
 8003b28:	7460      	strb	r0, [r4, #17]
 8003b2a:	2500      	movs	r5, #0
 8003b2c:	2132      	movs	r1, #50	@ 0x32
 8003b2e:	5465      	strb	r5, [r4, r1]
 8003b30:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8003b32:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8003b34:	6960      	ldr	r0, [r4, #20]
 8003b36:	2180      	movs	r1, #128	@ 0x80
 8003b38:	01c9      	lsls	r1, r1, #7
 8003b3a:	4301      	orrs	r1, r0
 8003b3c:	6161      	str	r1, [r4, #20]
 8003b3e:	e65f      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003b40:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8003b42:	42a8      	cmp	r0, r5
 8003b44:	d104      	bne.n	8003b50 <__iar_annotation$$branch+0x4>
 8003b46:	2500      	movs	r5, #0
 8003b48:	8465      	strh	r5, [r4, #34]	@ 0x22
 8003b4a:	7930      	ldrb	r0, [r6, #4]

08003b4c <__iar_annotation$$branch>:
 8003b4c:	f7ff fb87 	bl	800325e <__iar_annotation$$branch+0x136>
 8003b50:	0020      	movs	r0, r4
 8003b52:	f7fd fd83 	bl	800165c <PE_CalculateMinTiming>
 8003b56:	e080      	b.n	8003c5a <__iar_annotation$$branch>
 8003b58:	2000      	movs	r0, #0
 8003b5a:	9002      	str	r0, [sp, #8]
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	9001      	str	r0, [sp, #4]
 8003b60:	2001      	movs	r0, #1
 8003b62:	9000      	str	r0, [sp, #0]
 8003b64:	0023      	movs	r3, r4
 8003b66:	332c      	adds	r3, #44	@ 0x2c
 8003b68:	2206      	movs	r2, #6
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	0020      	movs	r0, r4
 8003b6e:	f7fd fe2e 	bl	80017ce <PE_Send_DataMessage>
 8003b72:	2800      	cmp	r0, #0
 8003b74:	d1e3      	bne.n	8003b3e <__iar_annotation$$branch+0xa16>
 8003b76:	215d      	movs	r1, #93	@ 0x5d
 8003b78:	e6cc      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	9004      	str	r0, [sp, #16]
 8003b7e:	ab04      	add	r3, sp, #16
 8003b80:	aa05      	add	r2, sp, #20
 8003b82:	210a      	movs	r1, #10
 8003b84:	4668      	mov	r0, sp
 8003b86:	7b40      	ldrb	r0, [r0, #13]
 8003b88:	68a7      	ldr	r7, [r4, #8]
 8003b8a:	697f      	ldr	r7, [r7, #20]
 8003b8c:	47b8      	blx	r7
 8003b8e:	2104      	movs	r1, #4
 8003b90:	9804      	ldr	r0, [sp, #16]
 8003b92:	f7fd fd8f 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8003b96:	2800      	cmp	r0, #0
 8003b98:	d11f      	bne.n	8003bda <__iar_annotation$$branch+0x8e>
 8003b9a:	71f0      	strb	r0, [r6, #7]
 8003b9c:	7230      	strb	r0, [r6, #8]
 8003b9e:	7c20      	ldrb	r0, [r4, #16]
 8003ba0:	f7fd fa04 	bl	8000fac <PE_Get_UnchunkedSupport>
 8003ba4:	2800      	cmp	r0, #0
 8003ba6:	d103      	bne.n	8003bb0 <__iar_annotation$$branch+0x64>
 8003ba8:	7a30      	ldrb	r0, [r6, #8]
 8003baa:	2180      	movs	r1, #128	@ 0x80
 8003bac:	4301      	orrs	r1, r0
 8003bae:	7231      	strb	r1, [r6, #8]
 8003bb0:	9a04      	ldr	r2, [sp, #16]
 8003bb2:	a905      	add	r1, sp, #20
 8003bb4:	4871      	ldr	r0, [pc, #452]	@ (8003d7c <.text_6>)
 8003bb6:	1820      	adds	r0, r4, r0
 8003bb8:	f01a fb46 	bl	801e248 <__aeabi_memcpy>
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	9002      	str	r0, [sp, #8]
 8003bc0:	2003      	movs	r0, #3
 8003bc2:	9001      	str	r0, [sp, #4]
 8003bc4:	2008      	movs	r0, #8
 8003bc6:	9000      	str	r0, [sp, #0]
 8003bc8:	486d      	ldr	r0, [pc, #436]	@ (8003d80 <.text_7>)
 8003bca:	1823      	adds	r3, r4, r0
 8003bcc:	220c      	movs	r2, #12
 8003bce:	2100      	movs	r1, #0
 8003bd0:	0020      	movs	r0, r4
 8003bd2:	f7fd ff2f 	bl	8001a34 <PE_Send_ExtendedMessage>
 8003bd6:	214c      	movs	r1, #76	@ 0x4c
 8003bd8:	e69c      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003bda:	2001      	movs	r0, #1
 8003bdc:	e510      	b.n	8003600 <__iar_annotation$$branch+0x4d8>
 8003bde:	2001      	movs	r0, #1
 8003be0:	9000      	str	r0, [sp, #0]
 8003be2:	2339      	movs	r3, #57	@ 0x39
 8003be4:	7832      	ldrb	r2, [r6, #0]
 8003be6:	2033      	movs	r0, #51	@ 0x33
 8003be8:	5c21      	ldrb	r1, [r4, r0]
 8003bea:	0020      	movs	r0, r4
 8003bec:	f7fd fdc4 	bl	8001778 <PE_Send_CtrlMessage>
 8003bf0:	2800      	cmp	r0, #0
 8003bf2:	d144      	bne.n	8003c7e <__iar_annotation$$branch+0x24>
 8003bf4:	7870      	ldrb	r0, [r6, #1]
 8003bf6:	7720      	strb	r0, [r4, #28]
 8003bf8:	83e7      	strh	r7, [r4, #30]
 8003bfa:	251b      	movs	r5, #27
 8003bfc:	2144      	movs	r1, #68	@ 0x44
 8003bfe:	e689      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003c00:	8be0      	ldrh	r0, [r4, #30]
 8003c02:	03a9      	lsls	r1, r5, #14
 8003c04:	4288      	cmp	r0, r1
 8003c06:	d104      	bne.n	8003c12 <__iar_annotation$$branch+0xc6>
 8003c08:	4668      	mov	r0, sp
 8003c0a:	7b00      	ldrb	r0, [r0, #12]
 8003c0c:	2814      	cmp	r0, #20
 8003c0e:	d100      	bne.n	8003c12 <__iar_annotation$$branch+0xc6>
 8003c10:	e5d6      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 8003c12:	4668      	mov	r0, sp
 8003c14:	7b00      	ldrb	r0, [r0, #12]
 8003c16:	2814      	cmp	r0, #20
 8003c18:	d031      	beq.n	8003c7e <__iar_annotation$$branch+0x24>
 8003c1a:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003c1c:	0bc1      	lsrs	r1, r0, #15
 8003c1e:	d003      	beq.n	8003c28 <__iar_annotation$$branch+0xdc>
 8003c20:	0020      	movs	r0, r4
 8003c22:	f7fd fe11 	bl	8001848 <PE_Check_ExtendedMessage>
 8003c26:	e740      	b.n	8003aaa <__iar_annotation$$branch+0x982>
 8003c28:	06c0      	lsls	r0, r0, #27
 8003c2a:	0ec0      	lsrs	r0, r0, #27
 8003c2c:	2810      	cmp	r0, #16
 8003c2e:	d000      	beq.n	8003c32 <__iar_annotation$$branch+0xe6>
 8003c30:	e5c6      	b.n	80037c0 <__iar_annotation$$branch+0x698>
 8003c32:	2014      	movs	r0, #20
 8003c34:	4669      	mov	r1, sp
 8003c36:	7308      	strb	r0, [r1, #12]
 8003c38:	0020      	movs	r0, r4
 8003c3a:	f7fc ffc0 	bl	8000bbe <PE_Clear_RxEvent>
 8003c3e:	2500      	movs	r5, #0
 8003c40:	83e5      	strh	r5, [r4, #30]
 8003c42:	2003      	movs	r0, #3
 8003c44:	7460      	strb	r0, [r4, #17]
 8003c46:	2159      	movs	r1, #89	@ 0x59
 8003c48:	e664      	b.n	8003914 <__iar_annotation$$branch+0x7ec>
 8003c4a:	0020      	movs	r0, r4
 8003c4c:	f7fd ff1e 	bl	8001a8c <PE_SubStateMachine_ExtendedMessages>
 8003c50:	e003      	b.n	8003c5a <__iar_annotation$$branch>
 8003c52:	a903      	add	r1, sp, #12
 8003c54:	0020      	movs	r0, r4
 8003c56:	f7fd f9bb 	bl	8000fd0 <PE_SubStateMachine_Generic>

08003c5a <__iar_annotation$$branch>:
 8003c5a:	f7ff fa35 	bl	80030c8 <__iar_annotation$$branch+0xc>
 8003c5e:	a903      	add	r1, sp, #12
 8003c60:	0020      	movs	r0, r4
 8003c62:	f000 f9d5 	bl	8004010 <PE_SubStateMachine_VconnSwap>
 8003c66:	0005      	movs	r5, r0
 8003c68:	6860      	ldr	r0, [r4, #4]
 8003c6a:	6800      	ldr	r0, [r0, #0]
 8003c6c:	0401      	lsls	r1, r0, #16
 8003c6e:	0fc9      	lsrs	r1, r1, #31
 8003c70:	d006      	beq.n	8003c80 <__iar_annotation$$branch+0x26>
 8003c72:	6820      	ldr	r0, [r4, #0]
 8003c74:	6801      	ldr	r1, [r0, #0]
 8003c76:	4668      	mov	r0, sp
 8003c78:	7b40      	ldrb	r0, [r0, #13]
 8003c7a:	f001 fec7 	bl	8005a0c <USBPD_PRL_SOPCapability>
 8003c7e:	e5bf      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003c80:	2101      	movs	r1, #1
 8003c82:	e7f8      	b.n	8003c76 <__iar_annotation$$branch+0x1c>
 8003c84:	4668      	mov	r0, sp
 8003c86:	7b00      	ldrb	r0, [r0, #12]
 8003c88:	2811      	cmp	r0, #17
 8003c8a:	d111      	bne.n	8003cb0 <__iar_annotation$$branch+0x56>
 8003c8c:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8003c8e:	4001      	ands	r1, r0
 8003c90:	2913      	cmp	r1, #19
 8003c92:	d10d      	bne.n	8003cb0 <__iar_annotation$$branch+0x56>
 8003c94:	2014      	movs	r0, #20
 8003c96:	4669      	mov	r1, sp
 8003c98:	7308      	strb	r0, [r1, #12]
 8003c9a:	0020      	movs	r0, r4
 8003c9c:	f7fc ff8f 	bl	8000bbe <PE_Clear_RxEvent>
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	9000      	str	r0, [sp, #0]
 8003ca4:	2320      	movs	r3, #32
 8003ca6:	2203      	movs	r2, #3
 8003ca8:	2100      	movs	r1, #0
 8003caa:	0020      	movs	r0, r4
 8003cac:	f7fd fd64 	bl	8001778 <PE_Send_CtrlMessage>
 8003cb0:	8ce0      	ldrh	r0, [r4, #38]	@ 0x26
 8003cb2:	03a9      	lsls	r1, r5, #14
 8003cb4:	4288      	cmp	r0, r1
 8003cb6:	d106      	bne.n	8003cc6 <__iar_annotation$$branch+0x6c>
 8003cb8:	2092      	movs	r0, #146	@ 0x92
 8003cba:	e582      	b.n	80037c2 <__iar_annotation$$branch+0x69a>
 8003cbc:	4668      	mov	r0, sp
 8003cbe:	7b01      	ldrb	r1, [r0, #12]
 8003cc0:	0020      	movs	r0, r4
 8003cc2:	f001 fc05 	bl	80054d0 <PE_StateMachine_UVDM>
 8003cc6:	e59b      	b.n	8003800 <__iar_annotation$$branch+0x6d8>
 8003cc8:	6960      	ldr	r0, [r4, #20]
 8003cca:	2701      	movs	r7, #1
 8003ccc:	0b41      	lsrs	r1, r0, #13
 8003cce:	4039      	ands	r1, r7
 8003cd0:	d019      	beq.n	8003d06 <__iar_annotation$$branch+0xac>
 8003cd2:	0b80      	lsrs	r0, r0, #14
 8003cd4:	4038      	ands	r0, r7
 8003cd6:	d007      	beq.n	8003ce8 <__iar_annotation$$branch+0x8e>
 8003cd8:	215b      	movs	r1, #91	@ 0x5b
 8003cda:	7c20      	ldrb	r0, [r4, #16]
 8003cdc:	f7fc fd04 	bl	80006e8 <USBPD_PE_Notification>
 8003ce0:	6960      	ldr	r0, [r4, #20]
 8003ce2:	4928      	ldr	r1, [pc, #160]	@ (8003d84 <.text_8>)
 8003ce4:	4001      	ands	r1, r0
 8003ce6:	6161      	str	r1, [r4, #20]
 8003ce8:	2003      	movs	r0, #3
 8003cea:	7460      	strb	r0, [r4, #17]
 8003cec:	7ca1      	ldrb	r1, [r4, #18]
 8003cee:	2903      	cmp	r1, #3
 8003cf0:	d008      	beq.n	8003d04 <__iar_annotation$$branch+0xaa>
 8003cf2:	74a0      	strb	r0, [r4, #18]
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	9000      	str	r0, [sp, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2203      	movs	r2, #3
 8003cfc:	7c21      	ldrb	r1, [r4, #16]
 8003cfe:	2004      	movs	r0, #4
 8003d00:	6835      	ldr	r5, [r6, #0]
 8003d02:	47a8      	blx	r5
 8003d04:	2501      	movs	r5, #1
 8003d06:	6960      	ldr	r0, [r4, #20]
 8003d08:	491f      	ldr	r1, [pc, #124]	@ (8003d88 <.text_9>)
 8003d0a:	4001      	ands	r1, r0
 8003d0c:	6161      	str	r1, [r4, #20]
 8003d0e:	2d00      	cmp	r5, #0
 8003d10:	d101      	bne.n	8003d16 <__iar_annotation$$branch>

08003d12 <__iar_annotation$$branch>:
 8003d12:	f7ff f8c9 	bl	8002ea8 <USBPD_PE_StateMachine_SRC+0xb4>

08003d16 <__iar_annotation$$branch>:
 8003d16:	f7ff fa0b 	bl	8003130 <__iar_annotation$$branch+0x8>
	...

08003d1c <.text_3>:
 8003d1c:	000081d6 	.word	0x000081d6

08003d20 <PE_Send_SRCCapabilities>:
 8003d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003d22:	0004      	movs	r4, r0
 8003d24:	000d      	movs	r5, r1
 8003d26:	2000      	movs	r0, #0
 8003d28:	9002      	str	r0, [sp, #8]
 8003d2a:	ab02      	add	r3, sp, #8
 8003d2c:	4817      	ldr	r0, [pc, #92]	@ (8003d8c <.text_10>)
 8003d2e:	1822      	adds	r2, r4, r0
 8003d30:	2100      	movs	r1, #0
 8003d32:	7c20      	ldrb	r0, [r4, #16]
 8003d34:	68a6      	ldr	r6, [r4, #8]
 8003d36:	6976      	ldr	r6, [r6, #20]
 8003d38:	47b0      	blx	r6
 8003d3a:	9802      	ldr	r0, [sp, #8]
 8003d3c:	1c80      	adds	r0, r0, #2
 8003d3e:	9002      	str	r0, [sp, #8]
 8003d40:	2104      	movs	r1, #4
 8003d42:	9802      	ldr	r0, [sp, #8]
 8003d44:	f7fd fcb6 	bl	80016b4 <PE_CheckDataSizeFromGetDataInfo>
 8003d48:	2800      	cmp	r0, #0
 8003d4a:	d113      	bne.n	8003d74 <PE_Send_SRCCapabilities+0x54>
 8003d4c:	6860      	ldr	r0, [r4, #4]
 8003d4e:	6800      	ldr	r0, [r0, #0]
 8003d50:	04c1      	lsls	r1, r0, #19
 8003d52:	0fc9      	lsrs	r1, r1, #31
 8003d54:	d00e      	beq.n	8003d74 <PE_Send_SRCCapabilities+0x54>
 8003d56:	9501      	str	r5, [sp, #4]
 8003d58:	9802      	ldr	r0, [sp, #8]
 8003d5a:	b280      	uxth	r0, r0
 8003d5c:	9000      	str	r0, [sp, #0]
 8003d5e:	4808      	ldr	r0, [pc, #32]	@ (8003d80 <.text_7>)
 8003d60:	1823      	adds	r3, r4, r0
 8003d62:	2201      	movs	r2, #1
 8003d64:	2100      	movs	r1, #0
 8003d66:	7c20      	ldrb	r0, [r4, #16]
 8003d68:	f001 fe54 	bl	8005a14 <USBPD_PRL_SendMessage>
 8003d6c:	2803      	cmp	r0, #3
 8003d6e:	d0e7      	beq.n	8003d40 <PE_Send_SRCCapabilities+0x20>
 8003d70:	b004      	add	sp, #16
 8003d72:	bd70      	pop	{r4, r5, r6, pc}
 8003d74:	2010      	movs	r0, #16
 8003d76:	e7fb      	b.n	8003d70 <PE_Send_SRCCapabilities+0x50>

08003d78 <.text_5>:
 8003d78:	20000000 	.word	0x20000000

08003d7c <.text_6>:
 8003d7c:	00000267 	.word	0x00000267

08003d80 <.text_7>:
 8003d80:	00000263 	.word	0x00000263

08003d84 <.text_8>:
 8003d84:	ffffbfff 	.word	0xffffbfff

08003d88 <.text_9>:
 8003d88:	ffffdfff 	.word	0xffffdfff

08003d8c <.text_10>:
 8003d8c:	00000265 	.word	0x00000265

08003d90 <PE_StateMachine_VDMCable>:
 8003d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d92:	b08c      	sub	sp, #48	@ 0x30
 8003d94:	0004      	movs	r4, r0
 8003d96:	2502      	movs	r5, #2
 8003d98:	2607      	movs	r6, #7
 8003d9a:	7c60      	ldrb	r0, [r4, #17]
 8003d9c:	2805      	cmp	r0, #5
 8003d9e:	d002      	beq.n	8003da6 <PE_StateMachine_VDMCable+0x16>
 8003da0:	289a      	cmp	r0, #154	@ 0x9a
 8003da2:	d072      	beq.n	8003e8a <PE_StateMachine_VDMCable+0xfa>
 8003da4:	e127      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003da6:	6860      	ldr	r0, [r4, #4]
 8003da8:	7800      	ldrb	r0, [r0, #0]
 8003daa:	0781      	lsls	r1, r0, #30
 8003dac:	0f89      	lsrs	r1, r1, #30
 8003dae:	0020      	movs	r0, r4
 8003db0:	f000 fa5e 	bl	8004270 <PE_ExtRevisionInteroperability_Cable>
 8003db4:	2094      	movs	r0, #148	@ 0x94
 8003db6:	0080      	lsls	r0, r0, #2
 8003db8:	5821      	ldr	r1, [r4, r0]
 8003dba:	201f      	movs	r0, #31
 8003dbc:	4381      	bics	r1, r0
 8003dbe:	488f      	ldr	r0, [pc, #572]	@ (8003ffc <.text_3>)
 8003dc0:	4308      	orrs	r0, r1
 8003dc2:	2194      	movs	r1, #148	@ 0x94
 8003dc4:	0089      	lsls	r1, r1, #2
 8003dc6:	5060      	str	r0, [r4, r1]
 8003dc8:	6861      	ldr	r1, [r4, #4]
 8003dca:	9100      	str	r1, [sp, #0]
 8003dcc:	2101      	movs	r1, #1
 8003dce:	9a00      	ldr	r2, [sp, #0]
 8003dd0:	6812      	ldr	r2, [r2, #0]
 8003dd2:	0953      	lsrs	r3, r2, #5
 8003dd4:	400b      	ands	r3, r1
 8003dd6:	4a8a      	ldr	r2, [pc, #552]	@ (8004000 <.text_4>)
 8003dd8:	4002      	ands	r2, r0
 8003dda:	0358      	lsls	r0, r3, #13
 8003ddc:	4310      	orrs	r0, r2
 8003dde:	22ff      	movs	r2, #255	@ 0xff
 8003de0:	0612      	lsls	r2, r2, #24
 8003de2:	4302      	orrs	r2, r0
 8003de4:	2094      	movs	r0, #148	@ 0x94
 8003de6:	0080      	lsls	r0, r0, #2
 8003de8:	5022      	str	r2, [r4, r0]
 8003dea:	9800      	ldr	r0, [sp, #0]
 8003dec:	6800      	ldr	r0, [r0, #0]
 8003dee:	0880      	lsrs	r0, r0, #2
 8003df0:	4001      	ands	r1, r0
 8003df2:	d003      	beq.n	8003dfc <PE_StateMachine_VDMCable+0x6c>
 8003df4:	6960      	ldr	r0, [r4, #20]
 8003df6:	0741      	lsls	r1, r0, #29
 8003df8:	0fc8      	lsrs	r0, r1, #31
 8003dfa:	e000      	b.n	8003dfe <PE_StateMachine_VDMCable+0x6e>
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	2194      	movs	r1, #148	@ 0x94
 8003e00:	0089      	lsls	r1, r1, #2
 8003e02:	1867      	adds	r7, r4, r1
 8003e04:	9002      	str	r0, [sp, #8]
 8003e06:	209a      	movs	r0, #154	@ 0x9a
 8003e08:	9001      	str	r0, [sp, #4]
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	9000      	str	r0, [sp, #0]
 8003e0e:	003b      	movs	r3, r7
 8003e10:	220f      	movs	r2, #15
 8003e12:	2101      	movs	r1, #1
 8003e14:	0020      	movs	r0, r4
 8003e16:	f7fd fcda 	bl	80017ce <PE_Send_DataMessage>
 8003e1a:	2800      	cmp	r0, #0
 8003e1c:	d109      	bne.n	8003e32 <PE_StateMachine_VDMCable+0xa2>
 8003e1e:	6960      	ldr	r0, [r4, #20]
 8003e20:	03e9      	lsls	r1, r5, #15
 8003e22:	4301      	orrs	r1, r0
 8003e24:	6161      	str	r1, [r4, #20]
 8003e26:	2051      	movs	r0, #81	@ 0x51
 8003e28:	7720      	strb	r0, [r4, #28]
 8003e2a:	4876      	ldr	r0, [pc, #472]	@ (8004004 <.text_5>)
 8003e2c:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003e2e:	251e      	movs	r5, #30
 8003e30:	e0e1      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e32:	2809      	cmp	r0, #9
 8003e34:	d0fc      	beq.n	8003e30 <PE_StateMachine_VDMCable+0xa0>
 8003e36:	7cb8      	ldrb	r0, [r7, #18]
 8003e38:	2815      	cmp	r0, #21
 8003e3a:	d202      	bcs.n	8003e42 <PE_StateMachine_VDMCable+0xb2>
 8003e3c:	4872      	ldr	r0, [pc, #456]	@ (8004008 <.text_6>)
 8003e3e:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003e40:	e00a      	b.n	8003e58 <PE_StateMachine_VDMCable+0xc8>
 8003e42:	68e0      	ldr	r0, [r4, #12]
 8003e44:	6940      	ldr	r0, [r0, #20]
 8003e46:	9000      	str	r0, [sp, #0]
 8003e48:	2800      	cmp	r0, #0
 8003e4a:	d005      	beq.n	8003e58 <PE_StateMachine_VDMCable+0xc8>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2205      	movs	r2, #5
 8003e50:	2101      	movs	r1, #1
 8003e52:	7c20      	ldrb	r0, [r4, #16]
 8003e54:	9f00      	ldr	r7, [sp, #0]
 8003e56:	47b8      	blx	r7
 8003e58:	6860      	ldr	r0, [r4, #4]
 8003e5a:	6800      	ldr	r0, [r0, #0]
 8003e5c:	0a00      	lsrs	r0, r0, #8
 8003e5e:	4030      	ands	r0, r6
 8003e60:	2803      	cmp	r0, #3
 8003e62:	d100      	bne.n	8003e66 <PE_StateMachine_VDMCable+0xd6>
 8003e64:	e0a4      	b.n	8003fb0 <PE_StateMachine_VDMCable+0x220>
 8003e66:	4869      	ldr	r0, [pc, #420]	@ (800400c <.text_7>)
 8003e68:	8be1      	ldrh	r1, [r4, #30]
 8003e6a:	4201      	tst	r1, r0
 8003e6c:	d00b      	beq.n	8003e86 <PE_StateMachine_VDMCable+0xf6>
 8003e6e:	2108      	movs	r1, #8
 8003e70:	7461      	strb	r1, [r4, #17]
 8003e72:	8be1      	ldrh	r1, [r4, #30]
 8003e74:	4001      	ands	r1, r0
 8003e76:	292d      	cmp	r1, #45	@ 0x2d
 8003e78:	d203      	bcs.n	8003e82 <PE_StateMachine_VDMCable+0xf2>
 8003e7a:	8be1      	ldrh	r1, [r4, #30]
 8003e7c:	0005      	movs	r5, r0
 8003e7e:	400d      	ands	r5, r1
 8003e80:	e0b9      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e82:	252d      	movs	r5, #45	@ 0x2d
 8003e84:	e0b7      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e86:	7466      	strb	r6, [r4, #17]
 8003e88:	e0b5      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003e8a:	9101      	str	r1, [sp, #4]
 8003e8c:	2001      	movs	r0, #1
 8003e8e:	f7fc fecf 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8003e92:	4669      	mov	r1, sp
 8003e94:	7008      	strb	r0, [r1, #0]
 8003e96:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8003e98:	2700      	movs	r7, #0
 8003e9a:	221f      	movs	r2, #31
 8003e9c:	9801      	ldr	r0, [sp, #4]
 8003e9e:	7800      	ldrb	r0, [r0, #0]
 8003ea0:	466b      	mov	r3, sp
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4298      	cmp	r0, r3
 8003ea6:	d14f      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003ea8:	0bc8      	lsrs	r0, r1, #15
 8003eaa:	d14d      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eac:	0b08      	lsrs	r0, r1, #12
 8003eae:	4230      	tst	r0, r6
 8003eb0:	d04a      	beq.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eb2:	201f      	movs	r0, #31
 8003eb4:	4008      	ands	r0, r1
 8003eb6:	280f      	cmp	r0, #15
 8003eb8:	d146      	bne.n	8003f48 <PE_StateMachine_VDMCable+0x1b8>
 8003eba:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003ebc:	7880      	ldrb	r0, [r0, #2]
 8003ebe:	9000      	str	r0, [sp, #0]
 8003ec0:	4002      	ands	r2, r0
 8003ec2:	2a01      	cmp	r2, #1
 8003ec4:	d13b      	bne.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003ec6:	0980      	lsrs	r0, r0, #6
 8003ec8:	d039      	beq.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003eca:	0608      	lsls	r0, r1, #24
 8003ecc:	0f81      	lsrs	r1, r0, #30
 8003ece:	0020      	movs	r0, r4
 8003ed0:	f000 f9ce 	bl	8004270 <PE_ExtRevisionInteroperability_Cable>
 8003ed4:	68e0      	ldr	r0, [r4, #12]
 8003ed6:	6940      	ldr	r0, [r0, #20]
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	d023      	beq.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003edc:	9800      	ldr	r0, [sp, #0]
 8003ede:	0985      	lsrs	r5, r0, #6
 8003ee0:	07a8      	lsls	r0, r5, #30
 8003ee2:	0f80      	lsrs	r0, r0, #30
 8003ee4:	2801      	cmp	r0, #1
 8003ee6:	d11d      	bne.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003ee8:	aa03      	add	r2, sp, #12
 8003eea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8003eec:	1d81      	adds	r1, r0, #6
 8003eee:	7c20      	ldrb	r0, [r4, #16]
 8003ef0:	f001 fb9a 	bl	8005628 <PE_SVDM_CheckIdentity>
 8003ef4:	2800      	cmp	r0, #0
 8003ef6:	d111      	bne.n	8003f1c <PE_StateMachine_VDMCable+0x18c>
 8003ef8:	ab03      	add	r3, sp, #12
 8003efa:	07aa      	lsls	r2, r5, #30
 8003efc:	0f92      	lsrs	r2, r2, #30
 8003efe:	2101      	movs	r1, #1
 8003f00:	7c20      	ldrb	r0, [r4, #16]
 8003f02:	68e5      	ldr	r5, [r4, #12]
 8003f04:	696d      	ldr	r5, [r5, #20]
 8003f06:	47a8      	blx	r5
 8003f08:	2152      	movs	r1, #82	@ 0x52
 8003f0a:	7c20      	ldrb	r0, [r4, #16]
 8003f0c:	f7fc fbec 	bl	80006e8 <USBPD_PE_Notification>
 8003f10:	2014      	movs	r0, #20
 8003f12:	2194      	movs	r1, #148	@ 0x94
 8003f14:	0089      	lsls	r1, r1, #2
 8003f16:	1861      	adds	r1, r4, r1
 8003f18:	7488      	strb	r0, [r1, #18]
 8003f1a:	e003      	b.n	8003f24 <PE_StateMachine_VDMCable+0x194>
 8003f1c:	211b      	movs	r1, #27
 8003f1e:	7c20      	ldrb	r0, [r4, #16]
 8003f20:	f7fc fbe2 	bl	80006e8 <USBPD_PE_Notification>
 8003f24:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f26:	6860      	ldr	r0, [r4, #4]
 8003f28:	6800      	ldr	r0, [r0, #0]
 8003f2a:	0a00      	lsrs	r0, r0, #8
 8003f2c:	4030      	ands	r0, r6
 8003f2e:	2803      	cmp	r0, #3
 8003f30:	d102      	bne.n	8003f38 <PE_StateMachine_VDMCable+0x1a8>
 8003f32:	7460      	strb	r0, [r4, #17]
 8003f34:	2500      	movs	r5, #0
 8003f36:	e002      	b.n	8003f3e <PE_StateMachine_VDMCable+0x1ae>
 8003f38:	7466      	strb	r6, [r4, #17]
 8003f3a:	2500      	movs	r5, #0
 8003f3c:	7727      	strb	r7, [r4, #28]
 8003f3e:	9801      	ldr	r0, [sp, #4]
 8003f40:	7800      	ldrb	r0, [r0, #0]
 8003f42:	2814      	cmp	r0, #20
 8003f44:	d119      	bne.n	8003f7a <PE_StateMachine_VDMCable+0x1ea>
 8003f46:	e056      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f48:	2003      	movs	r0, #3
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	2a10      	cmp	r2, #16
 8003f4e:	d11b      	bne.n	8003f88 <PE_StateMachine_VDMCable+0x1f8>
 8003f50:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f52:	6861      	ldr	r1, [r4, #4]
 8003f54:	6809      	ldr	r1, [r1, #0]
 8003f56:	0a09      	lsrs	r1, r1, #8
 8003f58:	4031      	ands	r1, r6
 8003f5a:	2903      	cmp	r1, #3
 8003f5c:	d102      	bne.n	8003f64 <PE_StateMachine_VDMCable+0x1d4>
 8003f5e:	7460      	strb	r0, [r4, #17]
 8003f60:	2500      	movs	r5, #0
 8003f62:	e002      	b.n	8003f6a <PE_StateMachine_VDMCable+0x1da>
 8003f64:	7466      	strb	r6, [r4, #17]
 8003f66:	2500      	movs	r5, #0
 8003f68:	7727      	strb	r7, [r4, #28]
 8003f6a:	2159      	movs	r1, #89	@ 0x59
 8003f6c:	7c20      	ldrb	r0, [r4, #16]
 8003f6e:	f7fc fbbb 	bl	80006e8 <USBPD_PE_Notification>
 8003f72:	9801      	ldr	r0, [sp, #4]
 8003f74:	7800      	ldrb	r0, [r0, #0]
 8003f76:	2814      	cmp	r0, #20
 8003f78:	d03d      	beq.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f7a:	2014      	movs	r0, #20
 8003f7c:	9901      	ldr	r1, [sp, #4]
 8003f7e:	7008      	strb	r0, [r1, #0]
 8003f80:	0020      	movs	r0, r4
 8003f82:	f7fc fe1c 	bl	8000bbe <PE_Clear_RxEvent>
 8003f86:	e036      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f88:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003f8a:	03aa      	lsls	r2, r5, #14
 8003f8c:	4291      	cmp	r1, r2
 8003f8e:	d132      	bne.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003f90:	8467      	strh	r7, [r4, #34]	@ 0x22
 8003f92:	6861      	ldr	r1, [r4, #4]
 8003f94:	680a      	ldr	r2, [r1, #0]
 8003f96:	0a13      	lsrs	r3, r2, #8
 8003f98:	4033      	ands	r3, r6
 8003f9a:	2b03      	cmp	r3, #3
 8003f9c:	d10c      	bne.n	8003fb8 <PE_StateMachine_VDMCable+0x228>
 8003f9e:	68e0      	ldr	r0, [r4, #12]
 8003fa0:	6945      	ldr	r5, [r0, #20]
 8003fa2:	2d00      	cmp	r5, #0
 8003fa4:	d004      	beq.n	8003fb0 <PE_StateMachine_VDMCable+0x220>
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	2204      	movs	r2, #4
 8003faa:	2101      	movs	r1, #1
 8003fac:	7c20      	ldrb	r0, [r4, #16]
 8003fae:	47a8      	blx	r5
 8003fb0:	2003      	movs	r0, #3
 8003fb2:	7460      	strb	r0, [r4, #17]
 8003fb4:	2500      	movs	r5, #0
 8003fb6:	e01e      	b.n	8003ff6 <PE_StateMachine_VDMCable+0x266>
 8003fb8:	0e93      	lsrs	r3, r2, #26
 8003fba:	4018      	ands	r0, r3
 8003fbc:	2802      	cmp	r0, #2
 8003fbe:	d10e      	bne.n	8003fde <PE_StateMachine_VDMCable+0x24e>
 8003fc0:	48b7      	ldr	r0, [pc, #732]	@ (80042a0 <.text_10>)
 8003fc2:	4010      	ands	r0, r2
 8003fc4:	066a      	lsls	r2, r5, #25
 8003fc6:	4302      	orrs	r2, r0
 8003fc8:	600a      	str	r2, [r1, #0]
 8003fca:	2101      	movs	r1, #1
 8003fcc:	7c20      	ldrb	r0, [r4, #16]
 8003fce:	f001 fcea 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003fd2:	480d      	ldr	r0, [pc, #52]	@ (8004008 <.text_6>)
 8003fd4:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003fd6:	252d      	movs	r5, #45	@ 0x2d
 8003fd8:	2008      	movs	r0, #8
 8003fda:	7460      	strb	r0, [r4, #17]
 8003fdc:	e00a      	b.n	8003ff4 <PE_StateMachine_VDMCable+0x264>
 8003fde:	68e0      	ldr	r0, [r4, #12]
 8003fe0:	6945      	ldr	r5, [r0, #20]
 8003fe2:	2d00      	cmp	r5, #0
 8003fe4:	d004      	beq.n	8003ff0 <PE_StateMachine_VDMCable+0x260>
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	2204      	movs	r2, #4
 8003fea:	2101      	movs	r1, #1
 8003fec:	7c20      	ldrb	r0, [r4, #16]
 8003fee:	47a8      	blx	r5
 8003ff0:	7466      	strb	r6, [r4, #17]
 8003ff2:	2500      	movs	r5, #0
 8003ff4:	7727      	strb	r7, [r4, #28]
 8003ff6:	0028      	movs	r0, r5
 8003ff8:	b00d      	add	sp, #52	@ 0x34
 8003ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ffc <.text_3>:
 8003ffc:	00008001 	.word	0x00008001

08004000 <.text_4>:
 8004000:	0000983f 	.word	0x0000983f

08004004 <.text_5>:
 8004004:	0000801e 	.word	0x0000801e

08004008 <.text_6>:
 8004008:	0000802d 	.word	0x0000802d

0800400c <.text_7>:
 800400c:	00007fff 	.word	0x00007fff

08004010 <PE_SubStateMachine_VconnSwap>:
 8004010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004012:	0004      	movs	r4, r0
 8004014:	2502      	movs	r5, #2
 8004016:	2703      	movs	r7, #3
 8004018:	4ea2      	ldr	r6, [pc, #648]	@ (80042a4 <.text_11>)
 800401a:	2014      	movs	r0, #20
 800401c:	7c62      	ldrb	r2, [r4, #17]
 800401e:	2a9d      	cmp	r2, #157	@ 0x9d
 8004020:	d010      	beq.n	8004044 <PE_SubStateMachine_VconnSwap+0x34>
 8004022:	d30e      	bcc.n	8004042 <PE_SubStateMachine_VconnSwap+0x32>
 8004024:	2a9f      	cmp	r2, #159	@ 0x9f
 8004026:	d057      	beq.n	80040d8 <PE_SubStateMachine_VconnSwap+0xc8>
 8004028:	d33d      	bcc.n	80040a6 <PE_SubStateMachine_VconnSwap+0x96>
 800402a:	2aa1      	cmp	r2, #161	@ 0xa1
 800402c:	d100      	bne.n	8004030 <PE_SubStateMachine_VconnSwap+0x20>
 800402e:	e085      	b.n	800413c <PE_SubStateMachine_VconnSwap+0x12c>
 8004030:	d377      	bcc.n	8004122 <PE_SubStateMachine_VconnSwap+0x112>
 8004032:	2aa3      	cmp	r2, #163	@ 0xa3
 8004034:	d100      	bne.n	8004038 <PE_SubStateMachine_VconnSwap+0x28>
 8004036:	e0a3      	b.n	8004180 <PE_SubStateMachine_VconnSwap+0x170>
 8004038:	d200      	bcs.n	800403c <PE_SubStateMachine_VconnSwap+0x2c>
 800403a:	e08e      	b.n	800415a <PE_SubStateMachine_VconnSwap+0x14a>
 800403c:	2aa4      	cmp	r2, #164	@ 0xa4
 800403e:	d100      	bne.n	8004042 <PE_SubStateMachine_VconnSwap+0x32>
 8004040:	e106      	b.n	8004250 <PE_SubStateMachine_VconnSwap+0x240>
 8004042:	e113      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004044:	6860      	ldr	r0, [r4, #4]
 8004046:	6800      	ldr	r0, [r0, #0]
 8004048:	21b8      	movs	r1, #184	@ 0xb8
 800404a:	0149      	lsls	r1, r1, #5
 800404c:	4001      	ands	r1, r0
 800404e:	2098      	movs	r0, #152	@ 0x98
 8004050:	0140      	lsls	r0, r0, #5
 8004052:	4281      	cmp	r1, r0
 8004054:	d121      	bne.n	800409a <PE_SubStateMachine_VconnSwap+0x8a>
 8004056:	7c20      	ldrb	r0, [r4, #16]
 8004058:	68a1      	ldr	r1, [r4, #8]
 800405a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 800405c:	4788      	blx	r1
 800405e:	280a      	cmp	r0, #10
 8004060:	d002      	beq.n	8004068 <PE_SubStateMachine_VconnSwap+0x58>
 8004062:	280d      	cmp	r0, #13
 8004064:	d007      	beq.n	8004076 <PE_SubStateMachine_VconnSwap+0x66>
 8004066:	e00f      	b.n	8004088 <PE_SubStateMachine_VconnSwap+0x78>
 8004068:	209e      	movs	r0, #158	@ 0x9e
 800406a:	7460      	strb	r0, [r4, #17]
 800406c:	6960      	ldr	r0, [r4, #20]
 800406e:	02e9      	lsls	r1, r5, #11
 8004070:	4301      	orrs	r1, r0
 8004072:	6161      	str	r1, [r4, #20]
 8004074:	e0fa      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004076:	2000      	movs	r0, #0
 8004078:	9000      	str	r0, [sp, #0]
 800407a:	2303      	movs	r3, #3
 800407c:	220c      	movs	r2, #12
 800407e:	2100      	movs	r1, #0
 8004080:	0020      	movs	r0, r4
 8004082:	f7fd fb79 	bl	8001778 <PE_Send_CtrlMessage>
 8004086:	e0f1      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004088:	2000      	movs	r0, #0
 800408a:	9000      	str	r0, [sp, #0]
 800408c:	2303      	movs	r3, #3
 800408e:	2204      	movs	r2, #4
 8004090:	2100      	movs	r1, #0
 8004092:	0020      	movs	r0, r4
 8004094:	f7fd fb70 	bl	8001778 <PE_Send_CtrlMessage>
 8004098:	e002      	b.n	80040a0 <PE_SubStateMachine_VconnSwap+0x90>
 800409a:	6960      	ldr	r0, [r4, #20]
 800409c:	4006      	ands	r6, r0
 800409e:	6166      	str	r6, [r4, #20]
 80040a0:	7467      	strb	r7, [r4, #17]
 80040a2:	2500      	movs	r5, #0
 80040a4:	e0e2      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 80040a6:	2000      	movs	r0, #0
 80040a8:	9000      	str	r0, [sp, #0]
 80040aa:	239e      	movs	r3, #158	@ 0x9e
 80040ac:	2203      	movs	r2, #3
 80040ae:	2100      	movs	r1, #0
 80040b0:	0020      	movs	r0, r4
 80040b2:	f7fd fb61 	bl	8001778 <PE_Send_CtrlMessage>
 80040b6:	2800      	cmp	r0, #0
 80040b8:	d1f4      	bne.n	80040a4 <PE_SubStateMachine_VconnSwap+0x94>
 80040ba:	6860      	ldr	r0, [r4, #4]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	0401      	lsls	r1, r0, #16
 80040c0:	0fc9      	lsrs	r1, r1, #31
 80040c2:	d005      	beq.n	80040d0 <PE_SubStateMachine_VconnSwap+0xc0>
 80040c4:	209f      	movs	r0, #159	@ 0x9f
 80040c6:	7460      	strb	r0, [r4, #17]
 80040c8:	4877      	ldr	r0, [pc, #476]	@ (80042a8 <.text_12>)
 80040ca:	83e0      	strh	r0, [r4, #30]
 80040cc:	2596      	movs	r5, #150	@ 0x96
 80040ce:	e001      	b.n	80040d4 <PE_SubStateMachine_VconnSwap+0xc4>
 80040d0:	20a0      	movs	r0, #160	@ 0xa0
 80040d2:	7460      	strb	r0, [r4, #17]
 80040d4:	213f      	movs	r1, #63	@ 0x3f
 80040d6:	e0b7      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 80040d8:	8be2      	ldrh	r2, [r4, #30]
 80040da:	03ab      	lsls	r3, r5, #14
 80040dc:	429a      	cmp	r2, r3
 80040de:	d100      	bne.n	80040e2 <PE_SubStateMachine_VconnSwap+0xd2>
 80040e0:	e0ac      	b.n	800423c <PE_SubStateMachine_VconnSwap+0x22c>
 80040e2:	780a      	ldrb	r2, [r1, #0]
 80040e4:	2a11      	cmp	r2, #17
 80040e6:	d11b      	bne.n	8004120 <PE_SubStateMachine_VconnSwap+0x110>
 80040e8:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 80040ea:	4b70      	ldr	r3, [pc, #448]	@ (80042ac <.text_13>)
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d116      	bne.n	8004120 <PE_SubStateMachine_VconnSwap+0x110>
 80040f2:	7008      	strb	r0, [r1, #0]
 80040f4:	0020      	movs	r0, r4
 80040f6:	f7fc fd62 	bl	8000bbe <PE_Clear_RxEvent>
 80040fa:	68a0      	ldr	r0, [r4, #8]
 80040fc:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 80040fe:	2a00      	cmp	r2, #0
 8004100:	d002      	beq.n	8004108 <PE_SubStateMachine_VconnSwap+0xf8>
 8004102:	2100      	movs	r1, #0
 8004104:	7c20      	ldrb	r0, [r4, #16]
 8004106:	4790      	blx	r2
 8004108:	6960      	ldr	r0, [r4, #20]
 800410a:	4006      	ands	r6, r0
 800410c:	6166      	str	r6, [r4, #20]
 800410e:	7467      	strb	r7, [r4, #17]
 8004110:	2500      	movs	r5, #0
 8004112:	2142      	movs	r1, #66	@ 0x42
 8004114:	7c20      	ldrb	r0, [r4, #16]
 8004116:	f7fc fae7 	bl	80006e8 <USBPD_PE_Notification>
 800411a:	8465      	strh	r5, [r4, #34]	@ 0x22
 800411c:	4964      	ldr	r1, [pc, #400]	@ (80042b0 <.text_14>)
 800411e:	5465      	strb	r5, [r4, r1]
 8004120:	e0a4      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004122:	68a0      	ldr	r0, [r4, #8]
 8004124:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004126:	2a00      	cmp	r2, #0
 8004128:	d002      	beq.n	8004130 <PE_SubStateMachine_VconnSwap+0x120>
 800412a:	2101      	movs	r1, #1
 800412c:	7c20      	ldrb	r0, [r4, #16]
 800412e:	4790      	blx	r2
 8004130:	20a1      	movs	r0, #161	@ 0xa1
 8004132:	7460      	strb	r0, [r4, #17]
 8004134:	2000      	movs	r0, #0
 8004136:	495e      	ldr	r1, [pc, #376]	@ (80042b0 <.text_14>)
 8004138:	5460      	strb	r0, [r4, r1]
 800413a:	e097      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 800413c:	2000      	movs	r0, #0
 800413e:	9000      	str	r0, [sp, #0]
 8004140:	2303      	movs	r3, #3
 8004142:	2206      	movs	r2, #6
 8004144:	2100      	movs	r1, #0
 8004146:	0020      	movs	r0, r4
 8004148:	f7fd fb16 	bl	8001778 <PE_Send_CtrlMessage>
 800414c:	2800      	cmp	r0, #0
 800414e:	d1f4      	bne.n	800413a <PE_SubStateMachine_VconnSwap+0x12a>
 8004150:	6960      	ldr	r0, [r4, #20]
 8004152:	4006      	ands	r6, r0
 8004154:	6166      	str	r6, [r4, #20]
 8004156:	2142      	movs	r1, #66	@ 0x42
 8004158:	e076      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 800415a:	2000      	movs	r0, #0
 800415c:	9000      	str	r0, [sp, #0]
 800415e:	23a3      	movs	r3, #163	@ 0xa3
 8004160:	220b      	movs	r2, #11
 8004162:	2100      	movs	r1, #0
 8004164:	0020      	movs	r0, r4
 8004166:	f7fd fb07 	bl	8001778 <PE_Send_CtrlMessage>
 800416a:	2800      	cmp	r0, #0
 800416c:	d1e5      	bne.n	800413a <PE_SubStateMachine_VconnSwap+0x12a>
 800416e:	6960      	ldr	r0, [r4, #20]
 8004170:	02e9      	lsls	r1, r5, #11
 8004172:	4301      	orrs	r1, r0
 8004174:	6161      	str	r1, [r4, #20]
 8004176:	484f      	ldr	r0, [pc, #316]	@ (80042b4 <.text_15>)
 8004178:	83e0      	strh	r0, [r4, #30]
 800417a:	251b      	movs	r5, #27
 800417c:	213e      	movs	r1, #62	@ 0x3e
 800417e:	e063      	b.n	8004248 <PE_SubStateMachine_VconnSwap+0x238>
 8004180:	780a      	ldrb	r2, [r1, #0]
 8004182:	2a11      	cmp	r2, #17
 8004184:	d155      	bne.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 8004186:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8004188:	23f0      	movs	r3, #240	@ 0xf0
 800418a:	021b      	lsls	r3, r3, #8
 800418c:	4013      	ands	r3, r2
 800418e:	d150      	bne.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 8004190:	06d2      	lsls	r2, r2, #27
 8004192:	0ed2      	lsrs	r2, r2, #27
 8004194:	2a03      	cmp	r2, #3
 8004196:	d006      	beq.n	80041a6 <PE_SubStateMachine_VconnSwap+0x196>
 8004198:	2a04      	cmp	r2, #4
 800419a:	d024      	beq.n	80041e6 <PE_SubStateMachine_VconnSwap+0x1d6>
 800419c:	2a0c      	cmp	r2, #12
 800419e:	d014      	beq.n	80041ca <PE_SubStateMachine_VconnSwap+0x1ba>
 80041a0:	2a10      	cmp	r2, #16
 80041a2:	d02e      	beq.n	8004202 <PE_SubStateMachine_VconnSwap+0x1f2>
 80041a4:	e045      	b.n	8004232 <PE_SubStateMachine_VconnSwap+0x222>
 80041a6:	6862      	ldr	r2, [r4, #4]
 80041a8:	6812      	ldr	r2, [r2, #0]
 80041aa:	0413      	lsls	r3, r2, #16
 80041ac:	0fdb      	lsrs	r3, r3, #31
 80041ae:	d001      	beq.n	80041b4 <PE_SubStateMachine_VconnSwap+0x1a4>
 80041b0:	229f      	movs	r2, #159	@ 0x9f
 80041b2:	e000      	b.n	80041b6 <PE_SubStateMachine_VconnSwap+0x1a6>
 80041b4:	22a0      	movs	r2, #160	@ 0xa0
 80041b6:	7462      	strb	r2, [r4, #17]
 80041b8:	780a      	ldrb	r2, [r1, #0]
 80041ba:	2a14      	cmp	r2, #20
 80041bc:	d003      	beq.n	80041c6 <PE_SubStateMachine_VconnSwap+0x1b6>
 80041be:	7008      	strb	r0, [r1, #0]
 80041c0:	0020      	movs	r0, r4
 80041c2:	f7fc fcfc 	bl	8000bbe <PE_Clear_RxEvent>
 80041c6:	213f      	movs	r1, #63	@ 0x3f
 80041c8:	e030      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 80041ca:	6962      	ldr	r2, [r4, #20]
 80041cc:	4032      	ands	r2, r6
 80041ce:	6162      	str	r2, [r4, #20]
 80041d0:	7467      	strb	r7, [r4, #17]
 80041d2:	2500      	movs	r5, #0
 80041d4:	780a      	ldrb	r2, [r1, #0]
 80041d6:	2a14      	cmp	r2, #20
 80041d8:	d003      	beq.n	80041e2 <PE_SubStateMachine_VconnSwap+0x1d2>
 80041da:	7008      	strb	r0, [r1, #0]
 80041dc:	0020      	movs	r0, r4
 80041de:	f7fc fcee 	bl	8000bbe <PE_Clear_RxEvent>
 80041e2:	2140      	movs	r1, #64	@ 0x40
 80041e4:	e022      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 80041e6:	6962      	ldr	r2, [r4, #20]
 80041e8:	4032      	ands	r2, r6
 80041ea:	6162      	str	r2, [r4, #20]
 80041ec:	7467      	strb	r7, [r4, #17]
 80041ee:	2500      	movs	r5, #0
 80041f0:	780a      	ldrb	r2, [r1, #0]
 80041f2:	2a14      	cmp	r2, #20
 80041f4:	d003      	beq.n	80041fe <PE_SubStateMachine_VconnSwap+0x1ee>
 80041f6:	7008      	strb	r0, [r1, #0]
 80041f8:	0020      	movs	r0, r4
 80041fa:	f7fc fce0 	bl	8000bbe <PE_Clear_RxEvent>
 80041fe:	2141      	movs	r1, #65	@ 0x41
 8004200:	e014      	b.n	800422c <PE_SubStateMachine_VconnSwap+0x21c>
 8004202:	6862      	ldr	r2, [r4, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	0413      	lsls	r3, r2, #16
 8004208:	0fdb      	lsrs	r3, r3, #31
 800420a:	d102      	bne.n	8004212 <PE_SubStateMachine_VconnSwap+0x202>
 800420c:	22a4      	movs	r2, #164	@ 0xa4
 800420e:	7462      	strb	r2, [r4, #17]
 8004210:	e004      	b.n	800421c <PE_SubStateMachine_VconnSwap+0x20c>
 8004212:	6962      	ldr	r2, [r4, #20]
 8004214:	4032      	ands	r2, r6
 8004216:	6162      	str	r2, [r4, #20]
 8004218:	7467      	strb	r7, [r4, #17]
 800421a:	2500      	movs	r5, #0
 800421c:	780a      	ldrb	r2, [r1, #0]
 800421e:	2a14      	cmp	r2, #20
 8004220:	d003      	beq.n	800422a <PE_SubStateMachine_VconnSwap+0x21a>
 8004222:	7008      	strb	r0, [r1, #0]
 8004224:	0020      	movs	r0, r4
 8004226:	f7fc fcca 	bl	8000bbe <PE_Clear_RxEvent>
 800422a:	2143      	movs	r1, #67	@ 0x43
 800422c:	7c20      	ldrb	r0, [r4, #16]
 800422e:	f7fc fa5b 	bl	80006e8 <USBPD_PE_Notification>
 8004232:	8be0      	ldrh	r0, [r4, #30]
 8004234:	2180      	movs	r1, #128	@ 0x80
 8004236:	0209      	lsls	r1, r1, #8
 8004238:	4288      	cmp	r0, r1
 800423a:	d117      	bne.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 800423c:	6960      	ldr	r0, [r4, #20]
 800423e:	4006      	ands	r6, r0
 8004240:	6166      	str	r6, [r4, #20]
 8004242:	7467      	strb	r7, [r4, #17]
 8004244:	2500      	movs	r5, #0
 8004246:	211c      	movs	r1, #28
 8004248:	7c20      	ldrb	r0, [r4, #16]
 800424a:	f7fc fa4d 	bl	80006e8 <USBPD_PE_Notification>
 800424e:	e00d      	b.n	800426c <PE_SubStateMachine_VconnSwap+0x25c>
 8004250:	68a0      	ldr	r0, [r4, #8]
 8004252:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004254:	2a00      	cmp	r2, #0
 8004256:	d002      	beq.n	800425e <PE_SubStateMachine_VconnSwap+0x24e>
 8004258:	2101      	movs	r1, #1
 800425a:	7c20      	ldrb	r0, [r4, #16]
 800425c:	4790      	blx	r2
 800425e:	6960      	ldr	r0, [r4, #20]
 8004260:	4006      	ands	r6, r0
 8004262:	6166      	str	r6, [r4, #20]
 8004264:	7467      	strb	r7, [r4, #17]
 8004266:	2500      	movs	r5, #0
 8004268:	4813      	ldr	r0, [pc, #76]	@ (80042b8 <.text_16>)
 800426a:	8460      	strh	r0, [r4, #34]	@ 0x22
 800426c:	0028      	movs	r0, r5
 800426e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004270 <PE_ExtRevisionInteroperability_Cable>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	000a      	movs	r2, r1
 8004274:	6843      	ldr	r3, [r0, #4]
 8004276:	681c      	ldr	r4, [r3, #0]
 8004278:	2103      	movs	r1, #3
 800427a:	2503      	movs	r5, #3
 800427c:	4025      	ands	r5, r4
 800427e:	42aa      	cmp	r2, r5
 8004280:	d300      	bcc.n	8004284 <PE_ExtRevisionInteroperability_Cable+0x14>
 8004282:	002a      	movs	r2, r5
 8004284:	4d06      	ldr	r5, [pc, #24]	@ (80042a0 <.text_10>)
 8004286:	4025      	ands	r5, r4
 8004288:	0694      	lsls	r4, r2, #26
 800428a:	068a      	lsls	r2, r1, #26
 800428c:	4022      	ands	r2, r4
 800428e:	432a      	orrs	r2, r5
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	0e92      	lsrs	r2, r2, #26
 8004294:	4011      	ands	r1, r2
 8004296:	7c00      	ldrb	r0, [r0, #16]
 8004298:	f001 fb85 	bl	80059a6 <USBPD_PRL_CBL_SetHeaderSpecification>
 800429c:	bd31      	pop	{r0, r4, r5, pc}
	...

080042a0 <.text_10>:
 80042a0:	f3ffffff 	.word	0xf3ffffff

080042a4 <.text_11>:
 80042a4:	ffffefff 	.word	0xffffefff

080042a8 <.text_12>:
 80042a8:	00008096 	.word	0x00008096

080042ac <.text_13>:
 80042ac:	0000f01f 	.word	0x0000f01f

080042b0 <.text_14>:
 80042b0:	00000262 	.word	0x00000262

080042b4 <.text_15>:
 80042b4:	0000801b 	.word	0x0000801b

080042b8 <.text_16>:
 80042b8:	0000802d 	.word	0x0000802d

080042bc <USBPD_PE_SVDM_RequestIdentity>:
 80042bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042be:	000a      	movs	r2, r1
 80042c0:	49aa      	ldr	r1, [pc, #680]	@ (800456c <.text_8>)
 80042c2:	0083      	lsls	r3, r0, #2
 80042c4:	58cb      	ldr	r3, [r1, r3]
 80042c6:	2110      	movs	r1, #16
 80042c8:	2401      	movs	r4, #1
 80042ca:	681d      	ldr	r5, [r3, #0]
 80042cc:	686d      	ldr	r5, [r5, #4]
 80042ce:	0a6d      	lsrs	r5, r5, #9
 80042d0:	4025      	ands	r5, r4
 80042d2:	d004      	beq.n	80042de <USBPD_PE_SVDM_RequestIdentity+0x22>
 80042d4:	68dd      	ldr	r5, [r3, #12]
 80042d6:	2d00      	cmp	r5, #0
 80042d8:	d001      	beq.n	80042de <USBPD_PE_SVDM_RequestIdentity+0x22>
 80042da:	2a02      	cmp	r2, #2
 80042dc:	d101      	bne.n	80042e2 <USBPD_PE_SVDM_RequestIdentity+0x26>
 80042de:	2102      	movs	r1, #2
 80042e0:	e02d      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 80042e2:	2532      	movs	r5, #50	@ 0x32
 80042e4:	5d5d      	ldrb	r5, [r3, r5]
 80042e6:	2d00      	cmp	r5, #0
 80042e8:	d104      	bne.n	80042f4 <USBPD_PE_SVDM_RequestIdentity+0x38>
 80042ea:	685d      	ldr	r5, [r3, #4]
 80042ec:	682d      	ldr	r5, [r5, #0]
 80042ee:	0b2d      	lsrs	r5, r5, #12
 80042f0:	402c      	ands	r4, r5
 80042f2:	d101      	bne.n	80042f8 <USBPD_PE_SVDM_RequestIdentity+0x3c>
 80042f4:	2103      	movs	r1, #3
 80042f6:	e022      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 80042f8:	2433      	movs	r4, #51	@ 0x33
 80042fa:	551a      	strb	r2, [r3, r4]
 80042fc:	2507      	movs	r5, #7
 80042fe:	2a00      	cmp	r2, #0
 8004300:	d002      	beq.n	8004308 <USBPD_PE_SVDM_RequestIdentity+0x4c>
 8004302:	2a01      	cmp	r2, #1
 8004304:	d008      	beq.n	8004318 <USBPD_PE_SVDM_RequestIdentity+0x5c>
 8004306:	e01a      	b.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	0a12      	lsrs	r2, r2, #8
 800430e:	4015      	ands	r5, r2
 8004310:	2d03      	cmp	r5, #3
 8004312:	d114      	bne.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004314:	217d      	movs	r1, #125	@ 0x7d
 8004316:	e00c      	b.n	8004332 <USBPD_PE_SVDM_RequestIdentity+0x76>
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	4eab      	ldr	r6, [pc, #684]	@ (80045cc <.text_10>)
 800431e:	4016      	ands	r6, r2
 8004320:	2782      	movs	r7, #130	@ 0x82
 8004322:	007f      	lsls	r7, r7, #1
 8004324:	42be      	cmp	r6, r7
 8004326:	d003      	beq.n	8004330 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8004328:	0a12      	lsrs	r2, r2, #8
 800432a:	4015      	ands	r5, r2
 800432c:	2d03      	cmp	r5, #3
 800432e:	d106      	bne.n	800433e <USBPD_PE_SVDM_RequestIdentity+0x82>
 8004330:	2105      	movs	r1, #5
 8004332:	2232      	movs	r2, #50	@ 0x32
 8004334:	5499      	strb	r1, [r3, r2]
 8004336:	6899      	ldr	r1, [r3, #8]
 8004338:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800433a:	4788      	blx	r1
 800433c:	2100      	movs	r1, #0
 800433e:	0008      	movs	r0, r1
 8004340:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004342 <USBPD_PE_SVDM_RequestSVID>:
 8004342:	b570      	push	{r4, r5, r6, lr}
 8004344:	000a      	movs	r2, r1
 8004346:	4989      	ldr	r1, [pc, #548]	@ (800456c <.text_8>)
 8004348:	0083      	lsls	r3, r0, #2
 800434a:	58cb      	ldr	r3, [r1, r3]
 800434c:	2110      	movs	r1, #16
 800434e:	68dc      	ldr	r4, [r3, #12]
 8004350:	2c00      	cmp	r4, #0
 8004352:	d001      	beq.n	8004358 <USBPD_PE_SVDM_RequestSVID+0x16>
 8004354:	2a02      	cmp	r2, #2
 8004356:	d101      	bne.n	800435c <USBPD_PE_SVDM_RequestSVID+0x1a>
 8004358:	2102      	movs	r1, #2
 800435a:	e020      	b.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800435c:	2432      	movs	r4, #50	@ 0x32
 800435e:	5d1c      	ldrb	r4, [r3, r4]
 8004360:	2c00      	cmp	r4, #0
 8004362:	d105      	bne.n	8004370 <USBPD_PE_SVDM_RequestSVID+0x2e>
 8004364:	685c      	ldr	r4, [r3, #4]
 8004366:	6825      	ldr	r5, [r4, #0]
 8004368:	2401      	movs	r4, #1
 800436a:	0b2e      	lsrs	r6, r5, #12
 800436c:	4026      	ands	r6, r4
 800436e:	d101      	bne.n	8004374 <USBPD_PE_SVDM_RequestSVID+0x32>
 8004370:	2103      	movs	r1, #3
 8004372:	e014      	b.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004374:	056d      	lsls	r5, r5, #21
 8004376:	0f6d      	lsrs	r5, r5, #29
 8004378:	2d03      	cmp	r5, #3
 800437a:	d110      	bne.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800437c:	2533      	movs	r5, #51	@ 0x33
 800437e:	555a      	strb	r2, [r3, r5]
 8004380:	257f      	movs	r5, #127	@ 0x7f
 8004382:	2632      	movs	r6, #50	@ 0x32
 8004384:	559d      	strb	r5, [r3, r6]
 8004386:	2a00      	cmp	r2, #0
 8004388:	d005      	beq.n	8004396 <USBPD_PE_SVDM_RequestSVID+0x54>
 800438a:	2a01      	cmp	r2, #1
 800438c:	d107      	bne.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	0c12      	lsrs	r2, r2, #16
 8004392:	4014      	ands	r4, r2
 8004394:	d003      	beq.n	800439e <USBPD_PE_SVDM_RequestSVID+0x5c>
 8004396:	6899      	ldr	r1, [r3, #8]
 8004398:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800439a:	4788      	blx	r1
 800439c:	2100      	movs	r1, #0
 800439e:	0008      	movs	r0, r1
 80043a0:	bd70      	pop	{r4, r5, r6, pc}

080043a2 <USBPD_PE_SVDM_RequestMode>:
 80043a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a4:	000b      	movs	r3, r1
 80043a6:	4971      	ldr	r1, [pc, #452]	@ (800456c <.text_8>)
 80043a8:	0084      	lsls	r4, r0, #2
 80043aa:	590c      	ldr	r4, [r1, r4]
 80043ac:	2110      	movs	r1, #16
 80043ae:	68e5      	ldr	r5, [r4, #12]
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	d001      	beq.n	80043b8 <USBPD_PE_SVDM_RequestMode+0x16>
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d101      	bne.n	80043bc <USBPD_PE_SVDM_RequestMode+0x1a>
 80043b8:	2102      	movs	r1, #2
 80043ba:	e023      	b.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043bc:	2532      	movs	r5, #50	@ 0x32
 80043be:	5d65      	ldrb	r5, [r4, r5]
 80043c0:	2d00      	cmp	r5, #0
 80043c2:	d105      	bne.n	80043d0 <USBPD_PE_SVDM_RequestMode+0x2e>
 80043c4:	6865      	ldr	r5, [r4, #4]
 80043c6:	682e      	ldr	r6, [r5, #0]
 80043c8:	2501      	movs	r5, #1
 80043ca:	0b37      	lsrs	r7, r6, #12
 80043cc:	402f      	ands	r7, r5
 80043ce:	d101      	bne.n	80043d4 <USBPD_PE_SVDM_RequestMode+0x32>
 80043d0:	2103      	movs	r1, #3
 80043d2:	e017      	b.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043d4:	0576      	lsls	r6, r6, #21
 80043d6:	0f76      	lsrs	r6, r6, #29
 80043d8:	2e03      	cmp	r6, #3
 80043da:	d113      	bne.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043dc:	2633      	movs	r6, #51	@ 0x33
 80043de:	55a3      	strb	r3, [r4, r6]
 80043e0:	2681      	movs	r6, #129	@ 0x81
 80043e2:	2732      	movs	r7, #50	@ 0x32
 80043e4:	55e6      	strb	r6, [r4, r7]
 80043e6:	2696      	movs	r6, #150	@ 0x96
 80043e8:	00b6      	lsls	r6, r6, #2
 80043ea:	53a2      	strh	r2, [r4, r6]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <USBPD_PE_SVDM_RequestMode+0x5a>
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d107      	bne.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043f4:	6962      	ldr	r2, [r4, #20]
 80043f6:	0c12      	lsrs	r2, r2, #16
 80043f8:	4015      	ands	r5, r2
 80043fa:	d003      	beq.n	8004404 <USBPD_PE_SVDM_RequestMode+0x62>
 80043fc:	68a1      	ldr	r1, [r4, #8]
 80043fe:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004400:	4788      	blx	r1
 8004402:	2100      	movs	r1, #0
 8004404:	0008      	movs	r0, r1
 8004406:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004408 <USBPD_PE_SVDM_RequestModeEnter>:
 8004408:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800440a:	4858      	ldr	r0, [pc, #352]	@ (800456c <.text_8>)
 800440c:	466c      	mov	r4, sp
 800440e:	7824      	ldrb	r4, [r4, #0]
 8004410:	00a4      	lsls	r4, r4, #2
 8004412:	5904      	ldr	r4, [r0, r4]
 8004414:	2010      	movs	r0, #16
 8004416:	68e5      	ldr	r5, [r4, #12]
 8004418:	2d00      	cmp	r5, #0
 800441a:	d101      	bne.n	8004420 <USBPD_PE_SVDM_RequestModeEnter+0x18>
 800441c:	2002      	movs	r0, #2
 800441e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004420:	2532      	movs	r5, #50	@ 0x32
 8004422:	5d65      	ldrb	r5, [r4, r5]
 8004424:	2d00      	cmp	r5, #0
 8004426:	d105      	bne.n	8004434 <USBPD_PE_SVDM_RequestModeEnter+0x2c>
 8004428:	6865      	ldr	r5, [r4, #4]
 800442a:	682e      	ldr	r6, [r5, #0]
 800442c:	2501      	movs	r5, #1
 800442e:	0b37      	lsrs	r7, r6, #12
 8004430:	402f      	ands	r7, r5
 8004432:	d101      	bne.n	8004438 <USBPD_PE_SVDM_RequestModeEnter+0x30>
 8004434:	2003      	movs	r0, #3
 8004436:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004438:	27e1      	movs	r7, #225	@ 0xe1
 800443a:	00ff      	lsls	r7, r7, #3
 800443c:	4037      	ands	r7, r6
 800443e:	26c2      	movs	r6, #194	@ 0xc2
 8004440:	00b6      	lsls	r6, r6, #2
 8004442:	42b7      	cmp	r7, r6
 8004444:	d11e      	bne.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004446:	2633      	movs	r6, #51	@ 0x33
 8004448:	55a1      	strb	r1, [r4, r6]
 800444a:	2682      	movs	r6, #130	@ 0x82
 800444c:	2732      	movs	r7, #50	@ 0x32
 800444e:	55e6      	strb	r6, [r4, r7]
 8004450:	2696      	movs	r6, #150	@ 0x96
 8004452:	00b6      	lsls	r6, r6, #2
 8004454:	53a2      	strh	r2, [r4, r6]
 8004456:	6966      	ldr	r6, [r4, #20]
 8004458:	4aaf      	ldr	r2, [pc, #700]	@ (8004718 <.text_13>)
 800445a:	4032      	ands	r2, r6
 800445c:	019e      	lsls	r6, r3, #6
 800445e:	23e0      	movs	r3, #224	@ 0xe0
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4033      	ands	r3, r6
 8004464:	4313      	orrs	r3, r2
 8004466:	6163      	str	r3, [r4, #20]
 8004468:	2900      	cmp	r1, #0
 800446a:	d005      	beq.n	8004478 <USBPD_PE_SVDM_RequestModeEnter+0x70>
 800446c:	2902      	cmp	r1, #2
 800446e:	d000      	beq.n	8004472 <USBPD_PE_SVDM_RequestModeEnter+0x6a>
 8004470:	d208      	bcs.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004472:	0c19      	lsrs	r1, r3, #16
 8004474:	400d      	ands	r5, r1
 8004476:	d005      	beq.n	8004484 <USBPD_PE_SVDM_RequestModeEnter+0x7c>
 8004478:	4668      	mov	r0, sp
 800447a:	7800      	ldrb	r0, [r0, #0]
 800447c:	68a1      	ldr	r1, [r4, #8]
 800447e:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004480:	4788      	blx	r1
 8004482:	2000      	movs	r0, #0
 8004484:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004486 <USBPD_PE_SVDM_RequestModeExit>:
 8004486:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004488:	4838      	ldr	r0, [pc, #224]	@ (800456c <.text_8>)
 800448a:	466c      	mov	r4, sp
 800448c:	7824      	ldrb	r4, [r4, #0]
 800448e:	00a4      	lsls	r4, r4, #2
 8004490:	5904      	ldr	r4, [r0, r4]
 8004492:	2010      	movs	r0, #16
 8004494:	68e5      	ldr	r5, [r4, #12]
 8004496:	2d00      	cmp	r5, #0
 8004498:	d101      	bne.n	800449e <USBPD_PE_SVDM_RequestModeExit+0x18>
 800449a:	2002      	movs	r0, #2
 800449c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800449e:	2532      	movs	r5, #50	@ 0x32
 80044a0:	5d65      	ldrb	r5, [r4, r5]
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	d105      	bne.n	80044b2 <USBPD_PE_SVDM_RequestModeExit+0x2c>
 80044a6:	6865      	ldr	r5, [r4, #4]
 80044a8:	682e      	ldr	r6, [r5, #0]
 80044aa:	2501      	movs	r5, #1
 80044ac:	0b37      	lsrs	r7, r6, #12
 80044ae:	402f      	ands	r7, r5
 80044b0:	d101      	bne.n	80044b6 <USBPD_PE_SVDM_RequestModeExit+0x30>
 80044b2:	2003      	movs	r0, #3
 80044b4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 80044b6:	27e1      	movs	r7, #225	@ 0xe1
 80044b8:	00ff      	lsls	r7, r7, #3
 80044ba:	4037      	ands	r7, r6
 80044bc:	26c2      	movs	r6, #194	@ 0xc2
 80044be:	00b6      	lsls	r6, r6, #2
 80044c0:	42b7      	cmp	r7, r6
 80044c2:	d11e      	bne.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044c4:	2633      	movs	r6, #51	@ 0x33
 80044c6:	55a1      	strb	r1, [r4, r6]
 80044c8:	2683      	movs	r6, #131	@ 0x83
 80044ca:	2732      	movs	r7, #50	@ 0x32
 80044cc:	55e6      	strb	r6, [r4, r7]
 80044ce:	2696      	movs	r6, #150	@ 0x96
 80044d0:	00b6      	lsls	r6, r6, #2
 80044d2:	53a2      	strh	r2, [r4, r6]
 80044d4:	6966      	ldr	r6, [r4, #20]
 80044d6:	4a90      	ldr	r2, [pc, #576]	@ (8004718 <.text_13>)
 80044d8:	4032      	ands	r2, r6
 80044da:	019e      	lsls	r6, r3, #6
 80044dc:	23e0      	movs	r3, #224	@ 0xe0
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	4033      	ands	r3, r6
 80044e2:	4313      	orrs	r3, r2
 80044e4:	6163      	str	r3, [r4, #20]
 80044e6:	2900      	cmp	r1, #0
 80044e8:	d005      	beq.n	80044f6 <USBPD_PE_SVDM_RequestModeExit+0x70>
 80044ea:	2902      	cmp	r1, #2
 80044ec:	d000      	beq.n	80044f0 <USBPD_PE_SVDM_RequestModeExit+0x6a>
 80044ee:	d208      	bcs.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044f0:	0c19      	lsrs	r1, r3, #16
 80044f2:	400d      	ands	r5, r1
 80044f4:	d005      	beq.n	8004502 <USBPD_PE_SVDM_RequestModeExit+0x7c>
 80044f6:	4668      	mov	r0, sp
 80044f8:	7800      	ldrb	r0, [r0, #0]
 80044fa:	68a1      	ldr	r1, [r4, #8]
 80044fc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80044fe:	4788      	blx	r1
 8004500:	2000      	movs	r0, #0
 8004502:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08004504 <USBPD_PE_SVDM_RequestSpecific>:
 8004504:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 8004506:	4819      	ldr	r0, [pc, #100]	@ (800456c <.text_8>)
 8004508:	466c      	mov	r4, sp
 800450a:	7824      	ldrb	r4, [r4, #0]
 800450c:	00a4      	lsls	r4, r4, #2
 800450e:	5904      	ldr	r4, [r0, r4]
 8004510:	2010      	movs	r0, #16
 8004512:	68e5      	ldr	r5, [r4, #12]
 8004514:	2d00      	cmp	r5, #0
 8004516:	d101      	bne.n	800451c <USBPD_PE_SVDM_RequestSpecific+0x18>
 8004518:	2002      	movs	r0, #2
 800451a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800451c:	2532      	movs	r5, #50	@ 0x32
 800451e:	5d65      	ldrb	r5, [r4, r5]
 8004520:	2d00      	cmp	r5, #0
 8004522:	d105      	bne.n	8004530 <USBPD_PE_SVDM_RequestSpecific+0x2c>
 8004524:	6865      	ldr	r5, [r4, #4]
 8004526:	682d      	ldr	r5, [r5, #0]
 8004528:	2601      	movs	r6, #1
 800452a:	0b2f      	lsrs	r7, r5, #12
 800452c:	4037      	ands	r7, r6
 800452e:	d101      	bne.n	8004534 <USBPD_PE_SVDM_RequestSpecific+0x30>
 8004530:	2003      	movs	r0, #3
 8004532:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8004534:	6967      	ldr	r7, [r4, #20]
 8004536:	0c3f      	lsrs	r7, r7, #16
 8004538:	403e      	ands	r6, r7
 800453a:	d101      	bne.n	8004540 <USBPD_PE_SVDM_RequestSpecific+0x3c>
 800453c:	000e      	movs	r6, r1
 800453e:	d113      	bne.n	8004568 <USBPD_PE_SVDM_RequestSpecific+0x64>
 8004540:	056d      	lsls	r5, r5, #21
 8004542:	0f6d      	lsrs	r5, r5, #29
 8004544:	2d03      	cmp	r5, #3
 8004546:	d10f      	bne.n	8004568 <USBPD_PE_SVDM_RequestSpecific+0x64>
 8004548:	2033      	movs	r0, #51	@ 0x33
 800454a:	5421      	strb	r1, [r4, r0]
 800454c:	2085      	movs	r0, #133	@ 0x85
 800454e:	2132      	movs	r1, #50	@ 0x32
 8004550:	5460      	strb	r0, [r4, r1]
 8004552:	2095      	movs	r0, #149	@ 0x95
 8004554:	0080      	lsls	r0, r0, #2
 8004556:	1820      	adds	r0, r4, r0
 8004558:	6002      	str	r2, [r0, #0]
 800455a:	8083      	strh	r3, [r0, #4]
 800455c:	4668      	mov	r0, sp
 800455e:	7800      	ldrb	r0, [r0, #0]
 8004560:	68a1      	ldr	r1, [r4, #8]
 8004562:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 8004564:	4788      	blx	r1
 8004566:	2000      	movs	r0, #0
 8004568:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
	...

0800456c <.text_8>:
 800456c:	200002ec 	.word	0x200002ec

08004570 <USBPD_PE_SVDM_RequestAttention>:
 8004570:	b538      	push	{r3, r4, r5, lr}
 8004572:	000b      	movs	r3, r1
 8004574:	4969      	ldr	r1, [pc, #420]	@ (800471c <.text_14>)
 8004576:	0084      	lsls	r4, r0, #2
 8004578:	590d      	ldr	r5, [r1, r4]
 800457a:	2110      	movs	r1, #16
 800457c:	68ec      	ldr	r4, [r5, #12]
 800457e:	2c00      	cmp	r4, #0
 8004580:	d001      	beq.n	8004586 <USBPD_PE_SVDM_RequestAttention+0x16>
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <USBPD_PE_SVDM_RequestAttention+0x1a>
 8004586:	2102      	movs	r1, #2
 8004588:	e01e      	b.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 800458a:	2332      	movs	r3, #50	@ 0x32
 800458c:	5ceb      	ldrb	r3, [r5, r3]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d104      	bne.n	800459c <USBPD_PE_SVDM_RequestAttention+0x2c>
 8004592:	686b      	ldr	r3, [r5, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	04dc      	lsls	r4, r3, #19
 8004598:	0fe4      	lsrs	r4, r4, #31
 800459a:	d101      	bne.n	80045a0 <USBPD_PE_SVDM_RequestAttention+0x30>
 800459c:	2103      	movs	r1, #3
 800459e:	e013      	b.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 80045a0:	055b      	lsls	r3, r3, #21
 80045a2:	0f5b      	lsrs	r3, r3, #29
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d10f      	bne.n	80045c8 <USBPD_PE_SVDM_RequestAttention+0x58>
 80045a8:	2400      	movs	r4, #0
 80045aa:	2333      	movs	r3, #51	@ 0x33
 80045ac:	54ec      	strb	r4, [r5, r3]
 80045ae:	2184      	movs	r1, #132	@ 0x84
 80045b0:	2332      	movs	r3, #50	@ 0x32
 80045b2:	54e9      	strb	r1, [r5, r3]
 80045b4:	2195      	movs	r1, #149	@ 0x95
 80045b6:	0089      	lsls	r1, r1, #2
 80045b8:	1869      	adds	r1, r5, r1
 80045ba:	2306      	movs	r3, #6
 80045bc:	600b      	str	r3, [r1, #0]
 80045be:	808a      	strh	r2, [r1, #4]
 80045c0:	68a9      	ldr	r1, [r5, #8]
 80045c2:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 80045c4:	4788      	blx	r1
 80045c6:	2100      	movs	r1, #0
 80045c8:	0008      	movs	r0, r1
 80045ca:	bd32      	pop	{r1, r4, r5, pc}

080045cc <.text_10>:
 80045cc:	00000704 	.word	0x00000704

080045d0 <USBPD_PE_UVDM_RequestMessage>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	000a      	movs	r2, r1
 80045d4:	4951      	ldr	r1, [pc, #324]	@ (800471c <.text_14>)
 80045d6:	0083      	lsls	r3, r0, #2
 80045d8:	58cb      	ldr	r3, [r1, r3]
 80045da:	2110      	movs	r1, #16
 80045dc:	68dc      	ldr	r4, [r3, #12]
 80045de:	2c00      	cmp	r4, #0
 80045e0:	d101      	bne.n	80045e6 <USBPD_PE_UVDM_RequestMessage+0x16>
 80045e2:	2102      	movs	r1, #2
 80045e4:	e01d      	b.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 80045e6:	2432      	movs	r4, #50	@ 0x32
 80045e8:	5d1c      	ldrb	r4, [r3, r4]
 80045ea:	2c00      	cmp	r4, #0
 80045ec:	d105      	bne.n	80045fa <USBPD_PE_UVDM_RequestMessage+0x2a>
 80045ee:	685c      	ldr	r4, [r3, #4]
 80045f0:	6824      	ldr	r4, [r4, #0]
 80045f2:	2501      	movs	r5, #1
 80045f4:	0b26      	lsrs	r6, r4, #12
 80045f6:	402e      	ands	r6, r5
 80045f8:	d101      	bne.n	80045fe <USBPD_PE_UVDM_RequestMessage+0x2e>
 80045fa:	2103      	movs	r1, #3
 80045fc:	e011      	b.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 80045fe:	0be6      	lsrs	r6, r4, #15
 8004600:	4035      	ands	r5, r6
 8004602:	d101      	bne.n	8004608 <USBPD_PE_UVDM_RequestMessage+0x38>
 8004604:	0015      	movs	r5, r2
 8004606:	d10c      	bne.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 8004608:	0564      	lsls	r4, r4, #21
 800460a:	0f64      	lsrs	r4, r4, #29
 800460c:	2c03      	cmp	r4, #3
 800460e:	d108      	bne.n	8004622 <USBPD_PE_UVDM_RequestMessage+0x52>
 8004610:	2133      	movs	r1, #51	@ 0x33
 8004612:	545a      	strb	r2, [r3, r1]
 8004614:	2186      	movs	r1, #134	@ 0x86
 8004616:	2232      	movs	r2, #50	@ 0x32
 8004618:	5499      	strb	r1, [r3, r2]
 800461a:	6899      	ldr	r1, [r3, #8]
 800461c:	6a89      	ldr	r1, [r1, #40]	@ 0x28
 800461e:	4788      	blx	r1
 8004620:	2100      	movs	r1, #0
 8004622:	0008      	movs	r0, r1
 8004624:	bd70      	pop	{r4, r5, r6, pc}

08004626 <PE_Receive_SVDM>:
 8004626:	493e      	ldr	r1, [pc, #248]	@ (8004720 <.text_15>)
 8004628:	1842      	adds	r2, r0, r1
 800462a:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 800462c:	0449      	lsls	r1, r1, #17
 800462e:	0f49      	lsrs	r1, r1, #29
 8004630:	1e49      	subs	r1, r1, #1
 8004632:	7611      	strb	r1, [r2, #24]
 8004634:	2131      	movs	r1, #49	@ 0x31
 8004636:	5c41      	ldrb	r1, [r0, r1]
 8004638:	2900      	cmp	r1, #0
 800463a:	d000      	beq.n	800463e <PE_Receive_SVDM+0x18>
 800463c:	4770      	bx	lr
 800463e:	b570      	push	{r4, r5, r6, lr}
 8004640:	2300      	movs	r3, #0
 8004642:	e010      	b.n	8004666 <PE_Receive_SVDM+0x40>
 8004644:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8004646:	009c      	lsls	r4, r3, #2
 8004648:	1909      	adds	r1, r1, r4
 800464a:	798c      	ldrb	r4, [r1, #6]
 800464c:	79cd      	ldrb	r5, [r1, #7]
 800464e:	022d      	lsls	r5, r5, #8
 8004650:	1964      	adds	r4, r4, r5
 8004652:	7a0d      	ldrb	r5, [r1, #8]
 8004654:	042d      	lsls	r5, r5, #16
 8004656:	1964      	adds	r4, r4, r5
 8004658:	7a49      	ldrb	r1, [r1, #9]
 800465a:	0609      	lsls	r1, r1, #24
 800465c:	1861      	adds	r1, r4, r1
 800465e:	009c      	lsls	r4, r3, #2
 8004660:	5111      	str	r1, [r2, r4]
 8004662:	1c5b      	adds	r3, r3, #1
 8004664:	b2db      	uxtb	r3, r3
 8004666:	7e11      	ldrb	r1, [r2, #24]
 8004668:	428b      	cmp	r3, r1
 800466a:	dbeb      	blt.n	8004644 <PE_Receive_SVDM+0x1e>
 800466c:	0004      	movs	r4, r0
 800466e:	2503      	movs	r5, #3
 8004670:	4b2c      	ldr	r3, [pc, #176]	@ (8004724 <.text_16>)
 8004672:	482d      	ldr	r0, [pc, #180]	@ (8004728 <.text_17>)
 8004674:	2694      	movs	r6, #148	@ 0x94
 8004676:	00b6      	lsls	r6, r6, #2
 8004678:	5da6      	ldrb	r6, [r4, r6]
 800467a:	06f6      	lsls	r6, r6, #27
 800467c:	0ef6      	lsrs	r6, r6, #27
 800467e:	1e76      	subs	r6, r6, #1
 8004680:	d00d      	beq.n	800469e <PE_Receive_SVDM+0x78>
 8004682:	1e76      	subs	r6, r6, #1
 8004684:	d022      	beq.n	80046cc <PE_Receive_SVDM+0xa6>
 8004686:	1e76      	subs	r6, r6, #1
 8004688:	d025      	beq.n	80046d6 <PE_Receive_SVDM+0xb0>
 800468a:	1e76      	subs	r6, r6, #1
 800468c:	d028      	beq.n	80046e0 <PE_Receive_SVDM+0xba>
 800468e:	1e76      	subs	r6, r6, #1
 8004690:	d02b      	beq.n	80046ea <PE_Receive_SVDM+0xc4>
 8004692:	1e76      	subs	r6, r6, #1
 8004694:	d02e      	beq.n	80046f4 <PE_Receive_SVDM+0xce>
 8004696:	3e0a      	subs	r6, #10
 8004698:	2e0f      	cmp	r6, #15
 800469a:	d937      	bls.n	800470c <PE_Receive_SVDM+0xe6>
 800469c:	bd70      	pop	{r4, r5, r6, pc}
 800469e:	2150      	movs	r1, #80	@ 0x50
 80046a0:	7721      	strb	r1, [r4, #28]
 80046a2:	6861      	ldr	r1, [r4, #4]
 80046a4:	680a      	ldr	r2, [r1, #0]
 80046a6:	0693      	lsls	r3, r2, #26
 80046a8:	0fdb      	lsrs	r3, r3, #31
 80046aa:	2694      	movs	r6, #148	@ 0x94
 80046ac:	00b6      	lsls	r6, r6, #2
 80046ae:	59a6      	ldr	r6, [r4, r6]
 80046b0:	0b76      	lsrs	r6, r6, #13
 80046b2:	4035      	ands	r5, r6
 80046b4:	429d      	cmp	r5, r3
 80046b6:	da00      	bge.n	80046ba <PE_Receive_SVDM+0x94>
 80046b8:	002b      	movs	r3, r5
 80046ba:	2520      	movs	r5, #32
 80046bc:	43aa      	bics	r2, r5
 80046be:	015b      	lsls	r3, r3, #5
 80046c0:	402b      	ands	r3, r5
 80046c2:	4313      	orrs	r3, r2
 80046c4:	600b      	str	r3, [r1, #0]
 80046c6:	83e0      	strh	r0, [r4, #30]
 80046c8:	2075      	movs	r0, #117	@ 0x75
 80046ca:	e023      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046cc:	2152      	movs	r1, #82	@ 0x52
 80046ce:	7721      	strb	r1, [r4, #28]
 80046d0:	83e0      	strh	r0, [r4, #30]
 80046d2:	2076      	movs	r0, #118	@ 0x76
 80046d4:	e01e      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046d6:	2153      	movs	r1, #83	@ 0x53
 80046d8:	7721      	strb	r1, [r4, #28]
 80046da:	83e0      	strh	r0, [r4, #30]
 80046dc:	2078      	movs	r0, #120	@ 0x78
 80046de:	e019      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046e0:	2054      	movs	r0, #84	@ 0x54
 80046e2:	7720      	strb	r0, [r4, #28]
 80046e4:	83e3      	strh	r3, [r4, #30]
 80046e6:	2079      	movs	r0, #121	@ 0x79
 80046e8:	e014      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046ea:	2055      	movs	r0, #85	@ 0x55
 80046ec:	7720      	strb	r0, [r4, #28]
 80046ee:	83e3      	strh	r3, [r4, #30]
 80046f0:	207a      	movs	r0, #122	@ 0x7a
 80046f2:	e00f      	b.n	8004714 <PE_Receive_SVDM+0xee>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <PE_Receive_SVDM+0xe2>
 80046fc:	2900      	cmp	r1, #0
 80046fe:	d000      	beq.n	8004702 <PE_Receive_SVDM+0xdc>
 8004700:	2101      	movs	r1, #1
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	7c20      	ldrb	r0, [r4, #16]
 8004706:	4798      	blx	r3
 8004708:	7465      	strb	r5, [r4, #17]
 800470a:	bd70      	pop	{r4, r5, r6, pc}
 800470c:	215a      	movs	r1, #90	@ 0x5a
 800470e:	7721      	strb	r1, [r4, #28]
 8004710:	83e0      	strh	r0, [r4, #30]
 8004712:	207b      	movs	r0, #123	@ 0x7b
 8004714:	7460      	strb	r0, [r4, #17]
 8004716:	bd70      	pop	{r4, r5, r6, pc}

08004718 <.text_13>:
 8004718:	fffffe3f 	.word	0xfffffe3f

0800471c <.text_14>:
 800471c:	200002ec 	.word	0x200002ec

08004720 <.text_15>:
 8004720:	00000494 	.word	0x00000494

08004724 <.text_16>:
 8004724:	00008019 	.word	0x00008019

08004728 <.text_17>:
 8004728:	0000800f 	.word	0x0000800f

0800472c <PE_StateMachine_VDM>:
 800472c:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 800472e:	b09c      	sub	sp, #112	@ 0x70
 8004730:	0005      	movs	r5, r0
 8004732:	2002      	movs	r0, #2
 8004734:	9004      	str	r0, [sp, #16]
 8004736:	7c6a      	ldrb	r2, [r5, #17]
 8004738:	0010      	movs	r0, r2
 800473a:	3875      	subs	r0, #117	@ 0x75
 800473c:	2807      	cmp	r0, #7
 800473e:	d206      	bcs.n	800474e <__iar_annotation$$branch+0x4>
 8004740:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8004742:	7800      	ldrb	r0, [r0, #0]
 8004744:	2814      	cmp	r0, #20
 8004746:	d002      	beq.n	800474e <__iar_annotation$$branch+0x4>
 8004748:	2002      	movs	r0, #2

0800474a <__iar_annotation$$branch>:
 800474a:	f000 febc 	bl	80054c6 <__iar_annotation$$branch+0xce4>
 800474e:	2094      	movs	r0, #148	@ 0x94
 8004750:	0080      	lsls	r0, r0, #2
 8004752:	182c      	adds	r4, r5, r0
 8004754:	210b      	movs	r1, #11
 8004756:	271e      	movs	r7, #30
 8004758:	201f      	movs	r0, #31
 800475a:	43c0      	mvns	r0, r0
 800475c:	26c0      	movs	r6, #192	@ 0xc0
 800475e:	43f6      	mvns	r6, r6
 8004760:	2a75      	cmp	r2, #117	@ 0x75
 8004762:	d041      	beq.n	80047e8 <__iar_annotation$$branch+0x6>
 8004764:	2a76      	cmp	r2, #118	@ 0x76
 8004766:	d100      	bne.n	800476a <__iar_annotation$$branch+0x20>
 8004768:	e0bb      	b.n	80048e2 <__iar_annotation$$branch+0x100>
 800476a:	2a77      	cmp	r2, #119	@ 0x77
 800476c:	d100      	bne.n	8004770 <__iar_annotation$$branch+0x26>
 800476e:	e144      	b.n	80049fa <__iar_annotation$$branch+0x218>
 8004770:	2a78      	cmp	r2, #120	@ 0x78
 8004772:	d100      	bne.n	8004776 <__iar_annotation$$branch+0x2c>
 8004774:	e1b4      	b.n	8004ae0 <__iar_annotation$$branch+0x2fe>
 8004776:	2a79      	cmp	r2, #121	@ 0x79
 8004778:	d100      	bne.n	800477c <__iar_annotation$$branch+0x32>
 800477a:	e216      	b.n	8004baa <__iar_annotation$$branch+0x3c8>
 800477c:	2a7a      	cmp	r2, #122	@ 0x7a
 800477e:	d100      	bne.n	8004782 <__iar_annotation$$branch+0x38>
 8004780:	e24b      	b.n	8004c1a <__iar_annotation$$branch+0x438>
 8004782:	2a7b      	cmp	r2, #123	@ 0x7b
 8004784:	d100      	bne.n	8004788 <__iar_annotation$$branch+0x3e>
 8004786:	e292      	b.n	8004cae <__iar_annotation$$branch+0x4cc>
 8004788:	2a7d      	cmp	r2, #125	@ 0x7d
 800478a:	d100      	bne.n	800478e <__iar_annotation$$branch+0x44>
 800478c:	e2e0      	b.n	8004d50 <__iar_annotation$$branch+0x56e>
 800478e:	2a7f      	cmp	r2, #127	@ 0x7f
 8004790:	d100      	bne.n	8004794 <__iar_annotation$$branch+0x4a>
 8004792:	e352      	b.n	8004e3a <__iar_annotation$$branch+0x658>
 8004794:	2a81      	cmp	r2, #129	@ 0x81
 8004796:	d100      	bne.n	800479a <__iar_annotation$$branch+0x50>
 8004798:	e3c2      	b.n	8004f20 <__iar_annotation$$branch+0x73e>
 800479a:	2a82      	cmp	r2, #130	@ 0x82
 800479c:	d101      	bne.n	80047a2 <__iar_annotation$$branch+0x4>

0800479e <__iar_annotation$$branch>:
 800479e:	f000 fc3b 	bl	8005018 <__iar_annotation$$branch+0x836>
 80047a2:	2a83      	cmp	r2, #131	@ 0x83
 80047a4:	d101      	bne.n	80047aa <__iar_annotation$$branch+0x4>

080047a6 <__iar_annotation$$branch>:
 80047a6:	f000 fcc9 	bl	800513c <__iar_annotation$$branch+0x95a>
 80047aa:	2a84      	cmp	r2, #132	@ 0x84
 80047ac:	d101      	bne.n	80047b2 <__iar_annotation$$branch+0x4>

080047ae <__iar_annotation$$branch>:
 80047ae:	f000 fe38 	bl	8005422 <__iar_annotation$$branch+0xc40>
 80047b2:	2a85      	cmp	r2, #133	@ 0x85
 80047b4:	d101      	bne.n	80047ba <__iar_annotation$$branch+0x4>

080047b6 <__iar_annotation$$branch>:
 80047b6:	f000 fd5d 	bl	8005274 <__iar_annotation$$branch+0xa92>
 80047ba:	2a87      	cmp	r2, #135	@ 0x87
 80047bc:	d100      	bne.n	80047c0 <__iar_annotation$$branch+0xa>
 80047be:	e2fc      	b.n	8004dba <__iar_annotation$$branch+0x5d8>
 80047c0:	2a89      	cmp	r2, #137	@ 0x89
 80047c2:	d100      	bne.n	80047c6 <__iar_annotation$$branch+0x10>
 80047c4:	e375      	b.n	8004eb2 <__iar_annotation$$branch+0x6d0>
 80047c6:	2a8b      	cmp	r2, #139	@ 0x8b
 80047c8:	d101      	bne.n	80047ce <__iar_annotation$$branch+0x4>

080047ca <__iar_annotation$$branch>:
 80047ca:	f000 fbe4 	bl	8004f96 <__iar_annotation$$branch+0x7b4>
 80047ce:	2a8c      	cmp	r2, #140	@ 0x8c
 80047d0:	d101      	bne.n	80047d6 <__iar_annotation$$branch+0x4>

080047d2 <__iar_annotation$$branch>:
 80047d2:	f000 fc63 	bl	800509c <__iar_annotation$$branch+0x8ba>
 80047d6:	2a8d      	cmp	r2, #141	@ 0x8d
 80047d8:	d101      	bne.n	80047de <__iar_annotation$$branch+0x4>

080047da <__iar_annotation$$branch>:
 80047da:	f000 fcf7 	bl	80051cc <__iar_annotation$$branch+0x9ea>
 80047de:	2a8f      	cmp	r2, #143	@ 0x8f
 80047e0:	d101      	bne.n	80047e6 <__iar_annotation$$branch+0x4>

080047e2 <__iar_annotation$$branch>:
 80047e2:	f000 fda5 	bl	8005330 <__iar_annotation$$branch+0xb4e>
 80047e6:	e2b2      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 80047e8:	2201      	movs	r2, #1
 80047ea:	9203      	str	r2, [sp, #12]
 80047ec:	03d3      	lsls	r3, r2, #15
 80047ee:	8bea      	ldrh	r2, [r5, #30]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d100      	bne.n	80047f6 <__iar_annotation$$branch+0x14>
 80047f4:	e262      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 80047f6:	2701      	movs	r7, #1
 80047f8:	6822      	ldr	r2, [r4, #0]
 80047fa:	4010      	ands	r0, r2
 80047fc:	4338      	orrs	r0, r7
 80047fe:	6020      	str	r0, [r4, #0]
 8004800:	4303      	orrs	r3, r0
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	6868      	ldr	r0, [r5, #4]
 8004806:	6800      	ldr	r0, [r0, #0]
 8004808:	0942      	lsrs	r2, r0, #5
 800480a:	403a      	ands	r2, r7
 800480c:	48c9      	ldr	r0, [pc, #804]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 800480e:	4018      	ands	r0, r3
 8004810:	0352      	lsls	r2, r2, #13
 8004812:	4302      	orrs	r2, r0
 8004814:	6022      	str	r2, [r4, #0]
 8004816:	6868      	ldr	r0, [r5, #4]
 8004818:	6800      	ldr	r0, [r0, #0]
 800481a:	4001      	ands	r1, r0
 800481c:	2909      	cmp	r1, #9
 800481e:	d051      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004820:	68e8      	ldr	r0, [r5, #12]
 8004822:	2800      	cmp	r0, #0
 8004824:	d04e      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004826:	6803      	ldr	r3, [r0, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d04b      	beq.n	80048c4 <__iar_annotation$$branch+0xe2>
 800482c:	0c10      	lsrs	r0, r2, #16
 800482e:	21ff      	movs	r1, #255	@ 0xff
 8004830:	0209      	lsls	r1, r1, #8
 8004832:	4288      	cmp	r0, r1
 8004834:	d146      	bne.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004836:	a90b      	add	r1, sp, #44	@ 0x2c
 8004838:	7c28      	ldrb	r0, [r5, #16]
 800483a:	4798      	blx	r3
 800483c:	2803      	cmp	r0, #3
 800483e:	d002      	beq.n	8004846 <__iar_annotation$$branch+0x64>
 8004840:	280f      	cmp	r0, #15
 8004842:	d005      	beq.n	8004850 <__iar_annotation$$branch+0x6e>
 8004844:	e03e      	b.n	80048c4 <__iar_annotation$$branch+0xe2>
 8004846:	6820      	ldr	r0, [r4, #0]
 8004848:	21c0      	movs	r1, #192	@ 0xc0
 800484a:	4301      	orrs	r1, r0
 800484c:	6021      	str	r1, [r4, #0]
 800484e:	e03e      	b.n	80048ce <__iar_annotation$$branch+0xec>
 8004850:	6820      	ldr	r0, [r4, #0]
 8004852:	4006      	ands	r6, r0
 8004854:	2040      	movs	r0, #64	@ 0x40
 8004856:	4330      	orrs	r0, r6
 8004858:	6020      	str	r0, [r4, #0]
 800485a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800485c:	9015      	str	r0, [sp, #84]	@ 0x54
 800485e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004860:	9016      	str	r0, [sp, #88]	@ 0x58
 8004862:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004864:	9017      	str	r0, [sp, #92]	@ 0x5c
 8004866:	2004      	movs	r0, #4
 8004868:	9003      	str	r0, [sp, #12]
 800486a:	a80b      	add	r0, sp, #44	@ 0x2c
 800486c:	2120      	movs	r1, #32
 800486e:	5c40      	ldrb	r0, [r0, r1]
 8004870:	0841      	lsrs	r1, r0, #1
 8004872:	4239      	tst	r1, r7
 8004874:	d003      	beq.n	800487e <__iar_annotation$$branch+0x9c>
 8004876:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004878:	9118      	str	r1, [sp, #96]	@ 0x60
 800487a:	2105      	movs	r1, #5
 800487c:	9103      	str	r1, [sp, #12]
 800487e:	08c2      	lsrs	r2, r0, #3
 8004880:	2101      	movs	r1, #1
 8004882:	4011      	ands	r1, r2
 8004884:	d008      	beq.n	8004898 <__iar_annotation$$branch+0xb6>
 8004886:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8004888:	aa14      	add	r2, sp, #80	@ 0x50
 800488a:	9b03      	ldr	r3, [sp, #12]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	50d6      	str	r6, [r2, r3]
 8004890:	9a03      	ldr	r2, [sp, #12]
 8004892:	1c52      	adds	r2, r2, #1
 8004894:	b2d2      	uxtb	r2, r2
 8004896:	9203      	str	r2, [sp, #12]
 8004898:	0900      	lsrs	r0, r0, #4
 800489a:	4238      	tst	r0, r7
 800489c:	d017      	beq.n	80048ce <__iar_annotation$$branch+0xec>
 800489e:	2900      	cmp	r1, #0
 80048a0:	d007      	beq.n	80048b2 <__iar_annotation$$branch+0xd0>
 80048a2:	2000      	movs	r0, #0
 80048a4:	a914      	add	r1, sp, #80	@ 0x50
 80048a6:	9a03      	ldr	r2, [sp, #12]
 80048a8:	0092      	lsls	r2, r2, #2
 80048aa:	5088      	str	r0, [r1, r2]
 80048ac:	9803      	ldr	r0, [sp, #12]
 80048ae:	1c40      	adds	r0, r0, #1
 80048b0:	9003      	str	r0, [sp, #12]
 80048b2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80048b4:	a914      	add	r1, sp, #80	@ 0x50
 80048b6:	9a03      	ldr	r2, [sp, #12]
 80048b8:	0092      	lsls	r2, r2, #2
 80048ba:	5088      	str	r0, [r1, r2]
 80048bc:	9803      	ldr	r0, [sp, #12]
 80048be:	1c40      	adds	r0, r0, #1
 80048c0:	9003      	str	r0, [sp, #12]
 80048c2:	e004      	b.n	80048ce <__iar_annotation$$branch+0xec>
 80048c4:	6820      	ldr	r0, [r4, #0]
 80048c6:	4006      	ands	r6, r0
 80048c8:	2080      	movs	r0, #128	@ 0x80
 80048ca:	4330      	orrs	r0, r6
 80048cc:	6020      	str	r0, [r4, #0]
 80048ce:	6820      	ldr	r0, [r4, #0]
 80048d0:	9014      	str	r0, [sp, #80]	@ 0x50
 80048d2:	2000      	movs	r0, #0
 80048d4:	9002      	str	r0, [sp, #8]
 80048d6:	2003      	movs	r0, #3
 80048d8:	9001      	str	r0, [sp, #4]
 80048da:	9803      	ldr	r0, [sp, #12]
 80048dc:	9000      	str	r0, [sp, #0]
 80048de:	ab14      	add	r3, sp, #80	@ 0x50
 80048e0:	e22f      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 80048e2:	2201      	movs	r2, #1
 80048e4:	466b      	mov	r3, sp
 80048e6:	731a      	strb	r2, [r3, #12]
 80048e8:	03d2      	lsls	r2, r2, #15
 80048ea:	8beb      	ldrh	r3, [r5, #30]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d100      	bne.n	80048f2 <__iar_annotation$$branch+0x110>
 80048f0:	e1e4      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	4018      	ands	r0, r3
 80048f6:	2302      	movs	r3, #2
 80048f8:	4303      	orrs	r3, r0
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	431a      	orrs	r2, r3
 80048fe:	6022      	str	r2, [r4, #0]
 8004900:	6868      	ldr	r0, [r5, #4]
 8004902:	6803      	ldr	r3, [r0, #0]
 8004904:	0698      	lsls	r0, r3, #26
 8004906:	0fc0      	lsrs	r0, r0, #31
 8004908:	4b8a      	ldr	r3, [pc, #552]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 800490a:	4013      	ands	r3, r2
 800490c:	0340      	lsls	r0, r0, #13
 800490e:	4318      	orrs	r0, r3
 8004910:	6020      	str	r0, [r4, #0]
 8004912:	686a      	ldr	r2, [r5, #4]
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	4011      	ands	r1, r2
 8004918:	2909      	cmp	r1, #9
 800491a:	d05f      	beq.n	80049dc <__iar_annotation$$branch+0x1fa>
 800491c:	68e9      	ldr	r1, [r5, #12]
 800491e:	684b      	ldr	r3, [r1, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d05b      	beq.n	80049dc <__iar_annotation$$branch+0x1fa>
 8004924:	0c00      	lsrs	r0, r0, #16
 8004926:	21ff      	movs	r1, #255	@ 0xff
 8004928:	0209      	lsls	r1, r1, #8
 800492a:	4288      	cmp	r0, r1
 800492c:	d156      	bne.n	80049dc <__iar_annotation$$branch+0x1fa>
 800492e:	4882      	ldr	r0, [pc, #520]	@ (8004b38 <__iar_annotation$$branch+0x356>)
 8004930:	182a      	adds	r2, r5, r0
 8004932:	a905      	add	r1, sp, #20
 8004934:	7c28      	ldrb	r0, [r5, #16]
 8004936:	4798      	blx	r3
 8004938:	2803      	cmp	r0, #3
 800493a:	d04b      	beq.n	80049d4 <__iar_annotation$$branch+0x1f2>
 800493c:	280f      	cmp	r0, #15
 800493e:	d14d      	bne.n	80049dc <__iar_annotation$$branch+0x1fa>
 8004940:	6820      	ldr	r0, [r4, #0]
 8004942:	4006      	ands	r6, r0
 8004944:	2040      	movs	r0, #64	@ 0x40
 8004946:	4330      	orrs	r0, r6
 8004948:	6020      	str	r0, [r4, #0]
 800494a:	211c      	movs	r1, #28
 800494c:	a806      	add	r0, sp, #24
 800494e:	f019 fc86 	bl	801e25e <__aeabi_memclr>
 8004952:	2300      	movs	r3, #0
 8004954:	2200      	movs	r2, #0
 8004956:	a806      	add	r0, sp, #24
 8004958:	9000      	str	r0, [sp, #0]
 800495a:	e014      	b.n	8004986 <__iar_annotation$$branch+0x1a4>
 800495c:	005f      	lsls	r7, r3, #1
 800495e:	5bf6      	ldrh	r6, [r6, r7]
 8004960:	0436      	lsls	r6, r6, #16
 8004962:	430e      	orrs	r6, r1
 8004964:	6006      	str	r6, [r0, #0]
 8004966:	e00d      	b.n	8004984 <__iar_annotation$$branch+0x1a2>
 8004968:	1c52      	adds	r2, r2, #1
 800496a:	9800      	ldr	r0, [sp, #0]
 800496c:	1d00      	adds	r0, r0, #4
 800496e:	0859      	lsrs	r1, r3, #1
 8004970:	0089      	lsls	r1, r1, #2
 8004972:	1840      	adds	r0, r0, r1
 8004974:	07d9      	lsls	r1, r3, #31
 8004976:	6801      	ldr	r1, [r0, #0]
 8004978:	9e05      	ldr	r6, [sp, #20]
 800497a:	d5ef      	bpl.n	800495c <__iar_annotation$$branch+0x17a>
 800497c:	005f      	lsls	r7, r3, #1
 800497e:	5bf6      	ldrh	r6, [r6, r7]
 8004980:	4331      	orrs	r1, r6
 8004982:	6001      	str	r1, [r0, #0]
 8004984:	1c5b      	adds	r3, r3, #1
 8004986:	486d      	ldr	r0, [pc, #436]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004988:	1828      	adds	r0, r5, r0
 800498a:	7840      	ldrb	r0, [r0, #1]
 800498c:	4283      	cmp	r3, r0
 800498e:	d201      	bcs.n	8004994 <__iar_annotation$$branch+0x1b2>
 8004990:	2b0c      	cmp	r3, #12
 8004992:	d3e9      	bcc.n	8004968 <__iar_annotation$$branch+0x186>
 8004994:	1a80      	subs	r0, r0, r2
 8004996:	4969      	ldr	r1, [pc, #420]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004998:	1869      	adds	r1, r5, r1
 800499a:	7048      	strb	r0, [r1, #1]
 800499c:	b2d0      	uxtb	r0, r2
 800499e:	280c      	cmp	r0, #12
 80049a0:	d111      	bne.n	80049c6 <__iar_annotation$$branch+0x1e4>
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	9006      	str	r0, [sp, #24]
 80049a6:	2000      	movs	r0, #0
 80049a8:	9002      	str	r0, [sp, #8]
 80049aa:	2077      	movs	r0, #119	@ 0x77
 80049ac:	9001      	str	r0, [sp, #4]
 80049ae:	2007      	movs	r0, #7
 80049b0:	9000      	str	r0, [sp, #0]
 80049b2:	ab06      	add	r3, sp, #24
 80049b4:	220f      	movs	r2, #15
 80049b6:	2031      	movs	r0, #49	@ 0x31
 80049b8:	5c29      	ldrb	r1, [r5, r0]
 80049ba:	0028      	movs	r0, r5
 80049bc:	f7fc ff07 	bl	80017ce <PE_Send_DataMessage>
 80049c0:	485f      	ldr	r0, [pc, #380]	@ (8004b40 <__iar_annotation$$branch+0x35e>)
 80049c2:	83e8      	strh	r0, [r5, #30]
 80049c4:	e1c3      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 80049c6:	0612      	lsls	r2, r2, #24
 80049c8:	0e50      	lsrs	r0, r2, #25
 80049ca:	1c80      	adds	r0, r0, #2
 80049cc:	4669      	mov	r1, sp
 80049ce:	7308      	strb	r0, [r1, #12]
 80049d0:	6820      	ldr	r0, [r4, #0]
 80049d2:	e008      	b.n	80049e6 <__iar_annotation$$branch+0x204>
 80049d4:	6821      	ldr	r1, [r4, #0]
 80049d6:	20c0      	movs	r0, #192	@ 0xc0
 80049d8:	4308      	orrs	r0, r1
 80049da:	e003      	b.n	80049e4 <__iar_annotation$$branch+0x202>
 80049dc:	6820      	ldr	r0, [r4, #0]
 80049de:	4006      	ands	r6, r0
 80049e0:	2080      	movs	r0, #128	@ 0x80
 80049e2:	4330      	orrs	r0, r6
 80049e4:	6020      	str	r0, [r4, #0]
 80049e6:	9006      	str	r0, [sp, #24]
 80049e8:	2000      	movs	r0, #0
 80049ea:	9002      	str	r0, [sp, #8]
 80049ec:	2003      	movs	r0, #3
 80049ee:	9001      	str	r0, [sp, #4]
 80049f0:	4668      	mov	r0, sp
 80049f2:	7b00      	ldrb	r0, [r0, #12]
 80049f4:	9000      	str	r0, [sp, #0]
 80049f6:	ab06      	add	r3, sp, #24
 80049f8:	e1a3      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 80049fa:	2180      	movs	r1, #128	@ 0x80
 80049fc:	0209      	lsls	r1, r1, #8
 80049fe:	8bea      	ldrh	r2, [r5, #30]
 8004a00:	428a      	cmp	r2, r1
 8004a02:	d100      	bne.n	8004a06 <__iar_annotation$$branch+0x224>
 8004a04:	e15a      	b.n	8004cbc <__iar_annotation$$branch+0x4da>
 8004a06:	6822      	ldr	r2, [r4, #0]
 8004a08:	4010      	ands	r0, r2
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	4302      	orrs	r2, r0
 8004a0e:	6022      	str	r2, [r4, #0]
 8004a10:	b292      	uxth	r2, r2
 8004a12:	20ff      	movs	r0, #255	@ 0xff
 8004a14:	0600      	lsls	r0, r0, #24
 8004a16:	4310      	orrs	r0, r2
 8004a18:	6020      	str	r0, [r4, #0]
 8004a1a:	4301      	orrs	r1, r0
 8004a1c:	6021      	str	r1, [r4, #0]
 8004a1e:	2701      	movs	r7, #1
 8004a20:	6868      	ldr	r0, [r5, #4]
 8004a22:	6800      	ldr	r0, [r0, #0]
 8004a24:	0940      	lsrs	r0, r0, #5
 8004a26:	4038      	ands	r0, r7
 8004a28:	4a42      	ldr	r2, [pc, #264]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 8004a2a:	400a      	ands	r2, r1
 8004a2c:	0340      	lsls	r0, r0, #13
 8004a2e:	4310      	orrs	r0, r2
 8004a30:	6020      	str	r0, [r4, #0]
 8004a32:	4006      	ands	r6, r0
 8004a34:	2040      	movs	r0, #64	@ 0x40
 8004a36:	4330      	orrs	r0, r6
 8004a38:	6020      	str	r0, [r4, #0]
 8004a3a:	aa03      	add	r2, sp, #12
 8004a3c:	a905      	add	r1, sp, #20
 8004a3e:	7c28      	ldrb	r0, [r5, #16]
 8004a40:	68eb      	ldr	r3, [r5, #12]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4798      	blx	r3
 8004a46:	211c      	movs	r1, #28
 8004a48:	a806      	add	r0, sp, #24
 8004a4a:	f019 fc08 	bl	801e25e <__aeabi_memclr>
 8004a4e:	2100      	movs	r1, #0
 8004a50:	2200      	movs	r2, #0
 8004a52:	a806      	add	r0, sp, #24
 8004a54:	002c      	movs	r4, r5
 8004a56:	e016      	b.n	8004a86 <__iar_annotation$$branch+0x2a4>
 8004a58:	004d      	lsls	r5, r1, #1
 8004a5a:	5b75      	ldrh	r5, [r6, r5]
 8004a5c:	042d      	lsls	r5, r5, #16
 8004a5e:	4666      	mov	r6, ip
 8004a60:	4335      	orrs	r5, r6
 8004a62:	601d      	str	r5, [r3, #0]
 8004a64:	e00e      	b.n	8004a84 <__iar_annotation$$branch+0x2a2>
 8004a66:	1c52      	adds	r2, r2, #1
 8004a68:	1d03      	adds	r3, r0, #4
 8004a6a:	084d      	lsrs	r5, r1, #1
 8004a6c:	00ad      	lsls	r5, r5, #2
 8004a6e:	195b      	adds	r3, r3, r5
 8004a70:	4239      	tst	r1, r7
 8004a72:	681e      	ldr	r6, [r3, #0]
 8004a74:	46b4      	mov	ip, r6
 8004a76:	9e05      	ldr	r6, [sp, #20]
 8004a78:	d0ee      	beq.n	8004a58 <__iar_annotation$$branch+0x276>
 8004a7a:	004d      	lsls	r5, r1, #1
 8004a7c:	5b75      	ldrh	r5, [r6, r5]
 8004a7e:	4666      	mov	r6, ip
 8004a80:	432e      	orrs	r6, r5
 8004a82:	601e      	str	r6, [r3, #0]
 8004a84:	1c49      	adds	r1, r1, #1
 8004a86:	4b2d      	ldr	r3, [pc, #180]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004a88:	18e3      	adds	r3, r4, r3
 8004a8a:	785b      	ldrb	r3, [r3, #1]
 8004a8c:	4299      	cmp	r1, r3
 8004a8e:	d201      	bcs.n	8004a94 <__iar_annotation$$branch+0x2b2>
 8004a90:	290c      	cmp	r1, #12
 8004a92:	d3e8      	bcc.n	8004a66 <__iar_annotation$$branch+0x284>
 8004a94:	1a98      	subs	r0, r3, r2
 8004a96:	4929      	ldr	r1, [pc, #164]	@ (8004b3c <__iar_annotation$$branch+0x35a>)
 8004a98:	1861      	adds	r1, r4, r1
 8004a9a:	7048      	strb	r0, [r1, #1]
 8004a9c:	b2d0      	uxtb	r0, r2
 8004a9e:	280c      	cmp	r0, #12
 8004aa0:	d10f      	bne.n	8004ac2 <__iar_annotation$$branch+0x2e0>
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	9002      	str	r0, [sp, #8]
 8004aa6:	2077      	movs	r0, #119	@ 0x77
 8004aa8:	9001      	str	r0, [sp, #4]
 8004aaa:	2007      	movs	r0, #7
 8004aac:	9000      	str	r0, [sp, #0]
 8004aae:	ab06      	add	r3, sp, #24
 8004ab0:	220f      	movs	r2, #15
 8004ab2:	2031      	movs	r0, #49	@ 0x31
 8004ab4:	5c21      	ldrb	r1, [r4, r0]
 8004ab6:	0020      	movs	r0, r4
 8004ab8:	f7fc fe89 	bl	80017ce <PE_Send_DataMessage>
 8004abc:	4820      	ldr	r0, [pc, #128]	@ (8004b40 <__iar_annotation$$branch+0x35e>)
 8004abe:	83e0      	strh	r0, [r4, #30]
 8004ac0:	e145      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	9002      	str	r0, [sp, #8]
 8004ac6:	2003      	movs	r0, #3
 8004ac8:	9001      	str	r0, [sp, #4]
 8004aca:	0610      	lsls	r0, r2, #24
 8004acc:	0e40      	lsrs	r0, r0, #25
 8004ace:	1c80      	adds	r0, r0, #2
 8004ad0:	b2c0      	uxtb	r0, r0
 8004ad2:	9000      	str	r0, [sp, #0]
 8004ad4:	ab06      	add	r3, sp, #24
 8004ad6:	220f      	movs	r2, #15
 8004ad8:	2031      	movs	r0, #49	@ 0x31
 8004ada:	5c21      	ldrb	r1, [r4, r0]
 8004adc:	0020      	movs	r0, r4
 8004ade:	e134      	b.n	8004d4a <__iar_annotation$$branch+0x568>
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	9206      	str	r2, [sp, #24]
 8004ae4:	03d2      	lsls	r2, r2, #15
 8004ae6:	8beb      	ldrh	r3, [r5, #30]
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d100      	bne.n	8004aee <__iar_annotation$$branch+0x30c>
 8004aec:	e3c1      	b.n	8005272 <__iar_annotation$$branch+0xa90>
 8004aee:	6823      	ldr	r3, [r4, #0]
 8004af0:	4018      	ands	r0, r3
 8004af2:	2303      	movs	r3, #3
 8004af4:	4303      	orrs	r3, r0
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	431a      	orrs	r2, r3
 8004afa:	6022      	str	r2, [r4, #0]
 8004afc:	6868      	ldr	r0, [r5, #4]
 8004afe:	6803      	ldr	r3, [r0, #0]
 8004b00:	0698      	lsls	r0, r3, #26
 8004b02:	0fc0      	lsrs	r0, r0, #31
 8004b04:	4b0b      	ldr	r3, [pc, #44]	@ (8004b34 <__iar_annotation$$branch+0x352>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	0340      	lsls	r0, r0, #13
 8004b0a:	4318      	orrs	r0, r3
 8004b0c:	6020      	str	r0, [r4, #0]
 8004b0e:	686a      	ldr	r2, [r5, #4]
 8004b10:	6812      	ldr	r2, [r2, #0]
 8004b12:	4011      	ands	r1, r2
 8004b14:	2909      	cmp	r1, #9
 8004b16:	d037      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b18:	68e9      	ldr	r1, [r5, #12]
 8004b1a:	688f      	ldr	r7, [r1, #8]
 8004b1c:	2f00      	cmp	r7, #0
 8004b1e:	d033      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b20:	ab03      	add	r3, sp, #12
 8004b22:	aa05      	add	r2, sp, #20
 8004b24:	0c01      	lsrs	r1, r0, #16
 8004b26:	7c28      	ldrb	r0, [r5, #16]
 8004b28:	47b8      	blx	r7
 8004b2a:	2803      	cmp	r0, #3
 8004b2c:	d00a      	beq.n	8004b44 <__iar_annotation$$branch+0x362>
 8004b2e:	280f      	cmp	r0, #15
 8004b30:	d00d      	beq.n	8004b4e <__iar_annotation$$branch+0x36c>
 8004b32:	e029      	b.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b34:	ffff9fff 	.word	0xffff9fff
 8004b38:	000004ad 	.word	0x000004ad
 8004b3c:	000004ac 	.word	0x000004ac
 8004b40:	0000800f 	.word	0x0000800f
 8004b44:	6820      	ldr	r0, [r4, #0]
 8004b46:	21c0      	movs	r1, #192	@ 0xc0
 8004b48:	4301      	orrs	r1, r0
 8004b4a:	6021      	str	r1, [r4, #0]
 8004b4c:	e023      	b.n	8004b96 <__iar_annotation$$branch+0x3b4>
 8004b4e:	4668      	mov	r0, sp
 8004b50:	7b00      	ldrb	r0, [r0, #12]
 8004b52:	2800      	cmp	r0, #0
 8004b54:	d018      	beq.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b56:	4668      	mov	r0, sp
 8004b58:	7b02      	ldrb	r2, [r0, #12]
 8004b5a:	2a07      	cmp	r2, #7
 8004b5c:	d214      	bcs.n	8004b88 <__iar_annotation$$branch+0x3a6>
 8004b5e:	6820      	ldr	r0, [r4, #0]
 8004b60:	4006      	ands	r6, r0
 8004b62:	2040      	movs	r0, #64	@ 0x40
 8004b64:	4330      	orrs	r0, r6
 8004b66:	6020      	str	r0, [r4, #0]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	9806      	ldr	r0, [sp, #24]
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d211      	bcs.n	8004b94 <__iar_annotation$$branch+0x3b2>
 8004b70:	9905      	ldr	r1, [sp, #20]
 8004b72:	6809      	ldr	r1, [r1, #0]
 8004b74:	ae07      	add	r6, sp, #28
 8004b76:	1d36      	adds	r6, r6, #4
 8004b78:	009f      	lsls	r7, r3, #2
 8004b7a:	51f1      	str	r1, [r6, r7]
 8004b7c:	9905      	ldr	r1, [sp, #20]
 8004b7e:	1d09      	adds	r1, r1, #4
 8004b80:	9105      	str	r1, [sp, #20]
 8004b82:	1c40      	adds	r0, r0, #1
 8004b84:	1c5b      	adds	r3, r3, #1
 8004b86:	e7f1      	b.n	8004b6c <__iar_annotation$$branch+0x38a>
 8004b88:	6820      	ldr	r0, [r4, #0]
 8004b8a:	4006      	ands	r6, r0
 8004b8c:	2080      	movs	r0, #128	@ 0x80
 8004b8e:	4330      	orrs	r0, r6
 8004b90:	6020      	str	r0, [r4, #0]
 8004b92:	e000      	b.n	8004b96 <__iar_annotation$$branch+0x3b4>
 8004b94:	9006      	str	r0, [sp, #24]
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	9007      	str	r0, [sp, #28]
 8004b9a:	2000      	movs	r0, #0
 8004b9c:	9002      	str	r0, [sp, #8]
 8004b9e:	2003      	movs	r0, #3
 8004ba0:	9001      	str	r0, [sp, #4]
 8004ba2:	9806      	ldr	r0, [sp, #24]
 8004ba4:	9000      	str	r0, [sp, #0]
 8004ba6:	ab07      	add	r3, sp, #28
 8004ba8:	e0cb      	b.n	8004d42 <__iar_annotation$$branch+0x560>
 8004baa:	2180      	movs	r1, #128	@ 0x80
 8004bac:	0209      	lsls	r1, r1, #8
 8004bae:	8bea      	ldrh	r2, [r5, #30]
 8004bb0:	428a      	cmp	r2, r1
 8004bb2:	d100      	bne.n	8004bb6 <__iar_annotation$$branch+0x3d4>
 8004bb4:	e35d      	b.n	8005272 <__iar_annotation$$branch+0xa90>
 8004bb6:	6822      	ldr	r2, [r4, #0]
 8004bb8:	4010      	ands	r0, r2
 8004bba:	2204      	movs	r2, #4
 8004bbc:	4302      	orrs	r2, r0
 8004bbe:	6022      	str	r2, [r4, #0]
 8004bc0:	4311      	orrs	r1, r2
 8004bc2:	6021      	str	r1, [r4, #0]
 8004bc4:	2001      	movs	r0, #1
 8004bc6:	686a      	ldr	r2, [r5, #4]
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	0952      	lsrs	r2, r2, #5
 8004bcc:	4002      	ands	r2, r0
 8004bce:	4ba6      	ldr	r3, [pc, #664]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004bd0:	400b      	ands	r3, r1
 8004bd2:	0351      	lsls	r1, r2, #13
 8004bd4:	4319      	orrs	r1, r3
 8004bd6:	6021      	str	r1, [r4, #0]
 8004bd8:	686a      	ldr	r2, [r5, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	08d2      	lsrs	r2, r2, #3
 8004bde:	4010      	ands	r0, r2
 8004be0:	d152      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004be2:	68e8      	ldr	r0, [r5, #12]
 8004be4:	68c3      	ldr	r3, [r0, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d04e      	beq.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004bea:	2707      	movs	r7, #7
 8004bec:	0a0a      	lsrs	r2, r1, #8
 8004bee:	403a      	ands	r2, r7
 8004bf0:	0c09      	lsrs	r1, r1, #16
 8004bf2:	7c28      	ldrb	r0, [r5, #16]
 8004bf4:	4798      	blx	r3
 8004bf6:	2803      	cmp	r0, #3
 8004bf8:	d041      	beq.n	8004c7e <__iar_annotation$$branch+0x49c>
 8004bfa:	280f      	cmp	r0, #15
 8004bfc:	d144      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004bfe:	6820      	ldr	r0, [r4, #0]
 8004c00:	4006      	ands	r6, r0
 8004c02:	2040      	movs	r0, #64	@ 0x40
 8004c04:	4330      	orrs	r0, r6
 8004c06:	6020      	str	r0, [r4, #0]
 8004c08:	0a00      	lsrs	r0, r0, #8
 8004c0a:	4007      	ands	r7, r0
 8004c0c:	6968      	ldr	r0, [r5, #20]
 8004c0e:	4940      	ldr	r1, [pc, #256]	@ (8004d10 <__iar_annotation$$branch+0x52e>)
 8004c10:	4001      	ands	r1, r0
 8004c12:	01b8      	lsls	r0, r7, #6
 8004c14:	4308      	orrs	r0, r1
 8004c16:	6168      	str	r0, [r5, #20]
 8004c18:	e03b      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c1a:	2180      	movs	r1, #128	@ 0x80
 8004c1c:	0209      	lsls	r1, r1, #8
 8004c1e:	8bea      	ldrh	r2, [r5, #30]
 8004c20:	428a      	cmp	r2, r1
 8004c22:	d04b      	beq.n	8004cbc <__iar_annotation$$branch+0x4da>
 8004c24:	6822      	ldr	r2, [r4, #0]
 8004c26:	4010      	ands	r0, r2
 8004c28:	2205      	movs	r2, #5
 8004c2a:	4302      	orrs	r2, r0
 8004c2c:	6022      	str	r2, [r4, #0]
 8004c2e:	4311      	orrs	r1, r2
 8004c30:	6021      	str	r1, [r4, #0]
 8004c32:	2001      	movs	r0, #1
 8004c34:	686a      	ldr	r2, [r5, #4]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	0952      	lsrs	r2, r2, #5
 8004c3a:	4002      	ands	r2, r0
 8004c3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004c3e:	400b      	ands	r3, r1
 8004c40:	0351      	lsls	r1, r2, #13
 8004c42:	4319      	orrs	r1, r3
 8004c44:	6021      	str	r1, [r4, #0]
 8004c46:	686a      	ldr	r2, [r5, #4]
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	08d2      	lsrs	r2, r2, #3
 8004c4c:	4010      	ands	r0, r2
 8004c4e:	d11b      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c50:	68e8      	ldr	r0, [r5, #12]
 8004c52:	6903      	ldr	r3, [r0, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d017      	beq.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c58:	0548      	lsls	r0, r1, #21
 8004c5a:	0f42      	lsrs	r2, r0, #29
 8004c5c:	0c09      	lsrs	r1, r1, #16
 8004c5e:	7c28      	ldrb	r0, [r5, #16]
 8004c60:	4798      	blx	r3
 8004c62:	2803      	cmp	r0, #3
 8004c64:	d00b      	beq.n	8004c7e <__iar_annotation$$branch+0x49c>
 8004c66:	280f      	cmp	r0, #15
 8004c68:	d10e      	bne.n	8004c88 <__iar_annotation$$branch+0x4a6>
 8004c6a:	6820      	ldr	r0, [r4, #0]
 8004c6c:	4006      	ands	r6, r0
 8004c6e:	2040      	movs	r0, #64	@ 0x40
 8004c70:	4330      	orrs	r0, r6
 8004c72:	6020      	str	r0, [r4, #0]
 8004c74:	6968      	ldr	r0, [r5, #20]
 8004c76:	4926      	ldr	r1, [pc, #152]	@ (8004d10 <__iar_annotation$$branch+0x52e>)
 8004c78:	4001      	ands	r1, r0
 8004c7a:	6169      	str	r1, [r5, #20]
 8004c7c:	e009      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c7e:	6820      	ldr	r0, [r4, #0]
 8004c80:	21c0      	movs	r1, #192	@ 0xc0
 8004c82:	4301      	orrs	r1, r0
 8004c84:	6021      	str	r1, [r4, #0]
 8004c86:	e004      	b.n	8004c92 <__iar_annotation$$branch+0x4b0>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	4006      	ands	r6, r0
 8004c8c:	2080      	movs	r0, #128	@ 0x80
 8004c8e:	4330      	orrs	r0, r6
 8004c90:	6020      	str	r0, [r4, #0]
 8004c92:	2000      	movs	r0, #0
 8004c94:	9002      	str	r0, [sp, #8]
 8004c96:	2003      	movs	r0, #3
 8004c98:	9001      	str	r0, [sp, #4]
 8004c9a:	2001      	movs	r0, #1
 8004c9c:	9000      	str	r0, [sp, #0]
 8004c9e:	0023      	movs	r3, r4
 8004ca0:	220f      	movs	r2, #15
 8004ca2:	2031      	movs	r0, #49	@ 0x31
 8004ca4:	5c29      	ldrb	r1, [r5, r0]
 8004ca6:	0028      	movs	r0, r5
 8004ca8:	f7fc fd91 	bl	80017ce <PE_Send_DataMessage>
 8004cac:	e04f      	b.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004cae:	2001      	movs	r0, #1
 8004cb0:	4669      	mov	r1, sp
 8004cb2:	7308      	strb	r0, [r1, #12]
 8004cb4:	8be8      	ldrh	r0, [r5, #30]
 8004cb6:	2180      	movs	r1, #128	@ 0x80
 8004cb8:	0209      	lsls	r1, r1, #8
 8004cba:	4288      	cmp	r0, r1
 8004cbc:	d100      	bne.n	8004cc0 <__iar_annotation$$branch+0x4de>
 8004cbe:	e3ab      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 8004cc0:	68e8      	ldr	r0, [r5, #12]
 8004cc2:	6b47      	ldr	r7, [r0, #52]	@ 0x34
 8004cc4:	2f00      	cmp	r7, #0
 8004cc6:	d02a      	beq.n	8004d1e <__iar_annotation$$branch+0x53c>
 8004cc8:	4868      	ldr	r0, [pc, #416]	@ (8004e6c <__iar_annotation$$branch+0x68a>)
 8004cca:	182b      	adds	r3, r5, r0
 8004ccc:	3018      	adds	r0, #24
 8004cce:	182a      	adds	r2, r5, r0
 8004cd0:	7820      	ldrb	r0, [r4, #0]
 8004cd2:	06c1      	lsls	r1, r0, #27
 8004cd4:	0ec9      	lsrs	r1, r1, #27
 8004cd6:	7c28      	ldrb	r0, [r5, #16]
 8004cd8:	47b8      	blx	r7
 8004cda:	2803      	cmp	r0, #3
 8004cdc:	d01a      	beq.n	8004d14 <__iar_annotation$$branch+0x532>
 8004cde:	280f      	cmp	r0, #15
 8004ce0:	d11d      	bne.n	8004d1e <__iar_annotation$$branch+0x53c>
 8004ce2:	6820      	ldr	r0, [r4, #0]
 8004ce4:	4006      	ands	r6, r0
 8004ce6:	2040      	movs	r0, #64	@ 0x40
 8004ce8:	4330      	orrs	r0, r6
 8004cea:	6020      	str	r0, [r4, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	4668      	mov	r0, sp
 8004cf0:	7b00      	ldrb	r0, [r0, #12]
 8004cf2:	495f      	ldr	r1, [pc, #380]	@ (8004e70 <__iar_annotation$$branch+0x68e>)
 8004cf4:	5c69      	ldrb	r1, [r5, r1]
 8004cf6:	428a      	cmp	r2, r1
 8004cf8:	d217      	bcs.n	8004d2a <__iar_annotation$$branch+0x548>
 8004cfa:	0091      	lsls	r1, r2, #2
 8004cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8004e6c <__iar_annotation$$branch+0x68a>)
 8004cfe:	18eb      	adds	r3, r5, r3
 8004d00:	585b      	ldr	r3, [r3, r1]
 8004d02:	ae05      	add	r6, sp, #20
 8004d04:	1d36      	adds	r6, r6, #4
 8004d06:	5073      	str	r3, [r6, r1]
 8004d08:	1c40      	adds	r0, r0, #1
 8004d0a:	1c52      	adds	r2, r2, #1
 8004d0c:	e7f1      	b.n	8004cf2 <__iar_annotation$$branch+0x510>
 8004d0e:	bf00      	nop
 8004d10:	fffffe3f 	.word	0xfffffe3f
 8004d14:	6820      	ldr	r0, [r4, #0]
 8004d16:	21c0      	movs	r1, #192	@ 0xc0
 8004d18:	4301      	orrs	r1, r0
 8004d1a:	6021      	str	r1, [r4, #0]
 8004d1c:	e007      	b.n	8004d2e <__iar_annotation$$branch+0x54c>
 8004d1e:	6820      	ldr	r0, [r4, #0]
 8004d20:	4006      	ands	r6, r0
 8004d22:	2080      	movs	r0, #128	@ 0x80
 8004d24:	4330      	orrs	r0, r6
 8004d26:	6020      	str	r0, [r4, #0]
 8004d28:	e001      	b.n	8004d2e <__iar_annotation$$branch+0x54c>
 8004d2a:	4669      	mov	r1, sp
 8004d2c:	7308      	strb	r0, [r1, #12]
 8004d2e:	6820      	ldr	r0, [r4, #0]
 8004d30:	9005      	str	r0, [sp, #20]
 8004d32:	2000      	movs	r0, #0
 8004d34:	9002      	str	r0, [sp, #8]
 8004d36:	2003      	movs	r0, #3
 8004d38:	9001      	str	r0, [sp, #4]
 8004d3a:	4668      	mov	r0, sp
 8004d3c:	7b00      	ldrb	r0, [r0, #12]
 8004d3e:	9000      	str	r0, [sp, #0]
 8004d40:	ab05      	add	r3, sp, #20
 8004d42:	220f      	movs	r2, #15
 8004d44:	2031      	movs	r0, #49	@ 0x31
 8004d46:	5c29      	ldrb	r1, [r5, r0]
 8004d48:	0028      	movs	r0, r5
 8004d4a:	f7fc fd40 	bl	80017ce <PE_Send_DataMessage>
 8004d4e:	e3b9      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8004d50:	2101      	movs	r1, #1
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	4010      	ands	r0, r2
 8004d56:	4308      	orrs	r0, r1
 8004d58:	6020      	str	r0, [r4, #0]
 8004d5a:	03ca      	lsls	r2, r1, #15
 8004d5c:	4302      	orrs	r2, r0
 8004d5e:	6022      	str	r2, [r4, #0]
 8004d60:	6868      	ldr	r0, [r5, #4]
 8004d62:	6800      	ldr	r0, [r0, #0]
 8004d64:	0943      	lsrs	r3, r0, #5
 8004d66:	400b      	ands	r3, r1
 8004d68:	483f      	ldr	r0, [pc, #252]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004d6a:	4010      	ands	r0, r2
 8004d6c:	035a      	lsls	r2, r3, #13
 8004d6e:	4302      	orrs	r2, r0
 8004d70:	6022      	str	r2, [r4, #0]
 8004d72:	48bf      	ldr	r0, [pc, #764]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004d74:	4010      	ands	r0, r2
 8004d76:	6020      	str	r0, [r4, #0]
 8004d78:	4006      	ands	r6, r0
 8004d7a:	6026      	str	r6, [r4, #0]
 8004d7c:	b2b0      	uxth	r0, r6
 8004d7e:	22ff      	movs	r2, #255	@ 0xff
 8004d80:	0612      	lsls	r2, r2, #24
 8004d82:	4302      	orrs	r2, r0
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	6868      	ldr	r0, [r5, #4]
 8004d88:	6800      	ldr	r0, [r0, #0]
 8004d8a:	0880      	lsrs	r0, r0, #2
 8004d8c:	4001      	ands	r1, r0
 8004d8e:	d003      	beq.n	8004d98 <__iar_annotation$$branch+0x5b6>
 8004d90:	6968      	ldr	r0, [r5, #20]
 8004d92:	0741      	lsls	r1, r0, #29
 8004d94:	0fc8      	lsrs	r0, r1, #31
 8004d96:	e000      	b.n	8004d9a <__iar_annotation$$branch+0x5b8>
 8004d98:	2002      	movs	r0, #2
 8004d9a:	9002      	str	r0, [sp, #8]
 8004d9c:	2087      	movs	r0, #135	@ 0x87
 8004d9e:	9001      	str	r0, [sp, #4]
 8004da0:	2001      	movs	r0, #1
 8004da2:	9000      	str	r0, [sp, #0]
 8004da4:	0023      	movs	r3, r4
 8004da6:	220f      	movs	r2, #15
 8004da8:	2031      	movs	r0, #49	@ 0x31
 8004daa:	5c29      	ldrb	r1, [r5, r0]
 8004dac:	0028      	movs	r0, r5
 8004dae:	f7fc fd0e 	bl	80017ce <PE_Send_DataMessage>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d1cb      	bne.n	8004d4e <__iar_annotation$$branch+0x56c>
 8004db6:	2050      	movs	r0, #80	@ 0x50
 8004db8:	e0e8      	b.n	8004f8c <__iar_annotation$$branch+0x7aa>
 8004dba:	2031      	movs	r0, #49	@ 0x31
 8004dbc:	5c28      	ldrb	r0, [r5, r0]
 8004dbe:	f7fb ff37 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004dc2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004dc4:	7809      	ldrb	r1, [r1, #0]
 8004dc6:	4281      	cmp	r1, r0
 8004dc8:	d000      	beq.n	8004dcc <__iar_annotation$$branch+0x5ea>
 8004dca:	e245      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004dcc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004dce:	0bc2      	lsrs	r2, r0, #15
 8004dd0:	d176      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004dd2:	0b02      	lsrs	r2, r0, #12
 8004dd4:	0752      	lsls	r2, r2, #29
 8004dd6:	d012      	beq.n	8004dfe <__iar_annotation$$branch+0x61c>
 8004dd8:	06c0      	lsls	r0, r0, #27
 8004dda:	0ec0      	lsrs	r0, r0, #27
 8004ddc:	280f      	cmp	r0, #15
 8004dde:	d16f      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004de0:	2914      	cmp	r1, #20
 8004de2:	d005      	beq.n	8004df0 <__iar_annotation$$branch+0x60e>
 8004de4:	2014      	movs	r0, #20
 8004de6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004de8:	7008      	strb	r0, [r1, #0]
 8004dea:	0028      	movs	r0, r5
 8004dec:	f7fb fee7 	bl	8000bbe <PE_Clear_RxEvent>
 8004df0:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004df2:	7881      	ldrb	r1, [r0, #2]
 8004df4:	06ca      	lsls	r2, r1, #27
 8004df6:	0ed2      	lsrs	r2, r2, #27
 8004df8:	2a01      	cmp	r2, #1
 8004dfa:	d161      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004dfc:	098c      	lsrs	r4, r1, #6
 8004dfe:	d100      	bne.n	8004e02 <__iar_annotation$$branch+0x620>
 8004e00:	e22a      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004e02:	68e9      	ldr	r1, [r5, #12]
 8004e04:	6949      	ldr	r1, [r1, #20]
 8004e06:	2900      	cmp	r1, #0
 8004e08:	d100      	bne.n	8004e0c <__iar_annotation$$branch+0x62a>
 8004e0a:	e2e3      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004e0c:	2103      	movs	r1, #3
 8004e0e:	4021      	ands	r1, r4
 8004e10:	2901      	cmp	r1, #1
 8004e12:	d000      	beq.n	8004e16 <__iar_annotation$$branch+0x634>
 8004e14:	e2de      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004e16:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004e18:	1d81      	adds	r1, r0, #6
 8004e1a:	7c28      	ldrb	r0, [r5, #16]
 8004e1c:	f000 fc04 	bl	8005628 <PE_SVDM_CheckIdentity>
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d108      	bne.n	8004e36 <__iar_annotation$$branch+0x654>
 8004e24:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004e26:	2201      	movs	r2, #1
 8004e28:	2100      	movs	r1, #0
 8004e2a:	7c28      	ldrb	r0, [r5, #16]
 8004e2c:	68ec      	ldr	r4, [r5, #12]
 8004e2e:	6964      	ldr	r4, [r4, #20]
 8004e30:	47a0      	blx	r4
 8004e32:	2151      	movs	r1, #81	@ 0x51
 8004e34:	e0ec      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004e36:	211b      	movs	r1, #27
 8004e38:	e0ea      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004e3a:	6821      	ldr	r1, [r4, #0]
 8004e3c:	400e      	ands	r6, r1
 8004e3e:	6026      	str	r6, [r4, #0]
 8004e40:	2102      	movs	r1, #2
 8004e42:	4030      	ands	r0, r6
 8004e44:	4308      	orrs	r0, r1
 8004e46:	6020      	str	r0, [r4, #0]
 8004e48:	b280      	uxth	r0, r0
 8004e4a:	22ff      	movs	r2, #255	@ 0xff
 8004e4c:	0612      	lsls	r2, r2, #24
 8004e4e:	4302      	orrs	r2, r0
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	0388      	lsls	r0, r1, #14
 8004e54:	4310      	orrs	r0, r2
 8004e56:	6020      	str	r0, [r4, #0]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	686b      	ldr	r3, [r5, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	095e      	lsrs	r6, r3, #5
 8004e60:	4016      	ands	r6, r2
 8004e62:	4b01      	ldr	r3, [pc, #4]	@ (8004e68 <__iar_annotation$$branch+0x686>)
 8004e64:	e006      	b.n	8004e74 <__iar_annotation$$branch+0x692>
 8004e66:	bf00      	nop
 8004e68:	ffff9fff 	.word	0xffff9fff
 8004e6c:	00000494 	.word	0x00000494
 8004e70:	000004ac 	.word	0x000004ac
 8004e74:	4003      	ands	r3, r0
 8004e76:	0370      	lsls	r0, r6, #13
 8004e78:	4318      	orrs	r0, r3
 8004e7a:	6020      	str	r0, [r4, #0]
 8004e7c:	4b7c      	ldr	r3, [pc, #496]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004e7e:	4003      	ands	r3, r0
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	6868      	ldr	r0, [r5, #4]
 8004e84:	6800      	ldr	r0, [r0, #0]
 8004e86:	0880      	lsrs	r0, r0, #2
 8004e88:	4002      	ands	r2, r0
 8004e8a:	d002      	beq.n	8004e92 <__iar_annotation$$branch+0x6b0>
 8004e8c:	6968      	ldr	r0, [r5, #20]
 8004e8e:	0740      	lsls	r0, r0, #29
 8004e90:	0fc1      	lsrs	r1, r0, #31
 8004e92:	9102      	str	r1, [sp, #8]
 8004e94:	2089      	movs	r0, #137	@ 0x89
 8004e96:	9001      	str	r0, [sp, #4]
 8004e98:	2001      	movs	r0, #1
 8004e9a:	9000      	str	r0, [sp, #0]
 8004e9c:	0023      	movs	r3, r4
 8004e9e:	220f      	movs	r2, #15
 8004ea0:	2031      	movs	r0, #49	@ 0x31
 8004ea2:	5c29      	ldrb	r1, [r5, r0]
 8004ea4:	0028      	movs	r0, r5
 8004ea6:	f7fc fc92 	bl	80017ce <PE_Send_DataMessage>
 8004eaa:	2800      	cmp	r0, #0
 8004eac:	d172      	bne.n	8004f94 <__iar_annotation$$branch+0x7b2>
 8004eae:	2052      	movs	r0, #82	@ 0x52
 8004eb0:	e06c      	b.n	8004f8c <__iar_annotation$$branch+0x7aa>
 8004eb2:	2031      	movs	r0, #49	@ 0x31
 8004eb4:	5c28      	ldrb	r0, [r5, r0]
 8004eb6:	f7fb febb 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004eba:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004ebc:	7809      	ldrb	r1, [r1, #0]
 8004ebe:	4281      	cmp	r1, r0
 8004ec0:	d000      	beq.n	8004ec4 <__iar_annotation$$branch+0x6e2>
 8004ec2:	e1c9      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004ec4:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004ec6:	0bc2      	lsrs	r2, r0, #15
 8004ec8:	d1fa      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004eca:	0b02      	lsrs	r2, r0, #12
 8004ecc:	0752      	lsls	r2, r2, #29
 8004ece:	d06f      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004ed0:	06c0      	lsls	r0, r0, #27
 8004ed2:	0ec0      	lsrs	r0, r0, #27
 8004ed4:	280f      	cmp	r0, #15
 8004ed6:	d1f3      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004ed8:	2914      	cmp	r1, #20
 8004eda:	d005      	beq.n	8004ee8 <__iar_annotation$$branch+0x706>
 8004edc:	2014      	movs	r0, #20
 8004ede:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004ee0:	7008      	strb	r0, [r1, #0]
 8004ee2:	0028      	movs	r0, r5
 8004ee4:	f7fb fe6b 	bl	8000bbe <PE_Clear_RxEvent>
 8004ee8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004eea:	7881      	ldrb	r1, [r0, #2]
 8004eec:	06ca      	lsls	r2, r1, #27
 8004eee:	0ed2      	lsrs	r2, r2, #27
 8004ef0:	2a02      	cmp	r2, #2
 8004ef2:	d1e5      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004ef4:	060c      	lsls	r4, r1, #24
 8004ef6:	d05b      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004ef8:	68e9      	ldr	r1, [r5, #12]
 8004efa:	6989      	ldr	r1, [r1, #24]
 8004efc:	2900      	cmp	r1, #0
 8004efe:	d100      	bne.n	8004f02 <__iar_annotation$$branch+0x720>
 8004f00:	e268      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8004f02:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f04:	1d81      	adds	r1, r0, #6
 8004f06:	7c28      	ldrb	r0, [r5, #16]
 8004f08:	f000 fc55 	bl	80057b6 <PE_SVDM_CheckSVIDs>
 8004f0c:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004f0e:	0fa2      	lsrs	r2, r4, #30
 8004f10:	2031      	movs	r0, #49	@ 0x31
 8004f12:	5c29      	ldrb	r1, [r5, r0]
 8004f14:	7c28      	ldrb	r0, [r5, #16]
 8004f16:	68ec      	ldr	r4, [r5, #12]
 8004f18:	69a4      	ldr	r4, [r4, #24]
 8004f1a:	47a0      	blx	r4
 8004f1c:	2153      	movs	r1, #83	@ 0x53
 8004f1e:	e077      	b.n	8005010 <__iar_annotation$$branch+0x82e>
 8004f20:	6821      	ldr	r1, [r4, #0]
 8004f22:	400e      	ands	r6, r1
 8004f24:	6026      	str	r6, [r4, #0]
 8004f26:	4030      	ands	r0, r6
 8004f28:	2103      	movs	r1, #3
 8004f2a:	4301      	orrs	r1, r0
 8004f2c:	6021      	str	r1, [r4, #0]
 8004f2e:	8920      	ldrh	r0, [r4, #8]
 8004f30:	b28a      	uxth	r2, r1
 8004f32:	0401      	lsls	r1, r0, #16
 8004f34:	4311      	orrs	r1, r2
 8004f36:	6021      	str	r1, [r4, #0]
 8004f38:	2080      	movs	r0, #128	@ 0x80
 8004f3a:	0200      	lsls	r0, r0, #8
 8004f3c:	4308      	orrs	r0, r1
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	2101      	movs	r1, #1
 8004f42:	686a      	ldr	r2, [r5, #4]
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	0952      	lsrs	r2, r2, #5
 8004f48:	400a      	ands	r2, r1
 8004f4a:	4b9e      	ldr	r3, [pc, #632]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8004f4c:	4003      	ands	r3, r0
 8004f4e:	0350      	lsls	r0, r2, #13
 8004f50:	4318      	orrs	r0, r3
 8004f52:	6020      	str	r0, [r4, #0]
 8004f54:	4a46      	ldr	r2, [pc, #280]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8004f56:	4002      	ands	r2, r0
 8004f58:	6022      	str	r2, [r4, #0]
 8004f5a:	6868      	ldr	r0, [r5, #4]
 8004f5c:	6800      	ldr	r0, [r0, #0]
 8004f5e:	0880      	lsrs	r0, r0, #2
 8004f60:	4001      	ands	r1, r0
 8004f62:	d003      	beq.n	8004f6c <__iar_annotation$$branch+0x78a>
 8004f64:	6968      	ldr	r0, [r5, #20]
 8004f66:	0741      	lsls	r1, r0, #29
 8004f68:	0fc8      	lsrs	r0, r1, #31
 8004f6a:	e000      	b.n	8004f6e <__iar_annotation$$branch+0x78c>
 8004f6c:	2002      	movs	r0, #2
 8004f6e:	9002      	str	r0, [sp, #8]
 8004f70:	208b      	movs	r0, #139	@ 0x8b
 8004f72:	9001      	str	r0, [sp, #4]
 8004f74:	2001      	movs	r0, #1
 8004f76:	9000      	str	r0, [sp, #0]
 8004f78:	0023      	movs	r3, r4
 8004f7a:	220f      	movs	r2, #15
 8004f7c:	2031      	movs	r0, #49	@ 0x31
 8004f7e:	5c29      	ldrb	r1, [r5, r0]
 8004f80:	0028      	movs	r0, r5
 8004f82:	f7fc fc24 	bl	80017ce <PE_Send_DataMessage>
 8004f86:	2800      	cmp	r0, #0
 8004f88:	d104      	bne.n	8004f94 <__iar_annotation$$branch+0x7b2>
 8004f8a:	2053      	movs	r0, #83	@ 0x53
 8004f8c:	7728      	strb	r0, [r5, #28]
 8004f8e:	488e      	ldr	r0, [pc, #568]	@ (80051c8 <__iar_annotation$$branch+0x9e6>)
 8004f90:	83e8      	strh	r0, [r5, #30]
 8004f92:	9704      	str	r7, [sp, #16]
 8004f94:	e296      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8004f96:	2031      	movs	r0, #49	@ 0x31
 8004f98:	5c28      	ldrb	r0, [r5, r0]
 8004f9a:	f7fb fe49 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8004f9e:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004fa0:	7809      	ldrb	r1, [r1, #0]
 8004fa2:	4281      	cmp	r1, r0
 8004fa4:	d18c      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004fa6:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004fa8:	0bc2      	lsrs	r2, r0, #15
 8004faa:	d189      	bne.n	8004ec0 <__iar_annotation$$branch+0x6de>
 8004fac:	0b02      	lsrs	r2, r0, #12
 8004fae:	0752      	lsls	r2, r2, #29
 8004fb0:	d100      	bne.n	8004fb4 <__iar_annotation$$branch+0x7d2>
 8004fb2:	e151      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004fb4:	06c0      	lsls	r0, r0, #27
 8004fb6:	0ec0      	lsrs	r0, r0, #27
 8004fb8:	280f      	cmp	r0, #15
 8004fba:	d000      	beq.n	8004fbe <__iar_annotation$$branch+0x7dc>
 8004fbc:	e14c      	b.n	8005258 <__iar_annotation$$branch+0xa76>
 8004fbe:	2914      	cmp	r1, #20
 8004fc0:	d005      	beq.n	8004fce <__iar_annotation$$branch+0x7ec>
 8004fc2:	2014      	movs	r0, #20
 8004fc4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8004fc6:	7008      	strb	r0, [r1, #0]
 8004fc8:	0028      	movs	r0, r5
 8004fca:	f7fb fdf8 	bl	8000bbe <PE_Clear_RxEvent>
 8004fce:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004fd0:	7881      	ldrb	r1, [r0, #2]
 8004fd2:	06ca      	lsls	r2, r1, #27
 8004fd4:	0ed2      	lsrs	r2, r2, #27
 8004fd6:	2a03      	cmp	r2, #3
 8004fd8:	d1ef      	bne.n	8004fba <__iar_annotation$$branch+0x7d8>
 8004fda:	098e      	lsrs	r6, r1, #6
 8004fdc:	d0e8      	beq.n	8004fb0 <__iar_annotation$$branch+0x7ce>
 8004fde:	68e9      	ldr	r1, [r5, #12]
 8004fe0:	69c9      	ldr	r1, [r1, #28]
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	d017      	beq.n	8005016 <__iar_annotation$$branch+0x834>
 8004fe6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004fe8:	1d82      	adds	r2, r0, #6
 8004fea:	6820      	ldr	r0, [r4, #0]
 8004fec:	0c01      	lsrs	r1, r0, #16
 8004fee:	7c28      	ldrb	r0, [r5, #16]
 8004ff0:	f000 fc22 	bl	8005838 <PE_SVDM_CheckModes>
 8004ff4:	2403      	movs	r4, #3
 8004ff6:	ab0b      	add	r3, sp, #44	@ 0x2c
 8004ff8:	2203      	movs	r2, #3
 8004ffa:	4032      	ands	r2, r6
 8004ffc:	2031      	movs	r0, #49	@ 0x31
 8004ffe:	5c29      	ldrb	r1, [r5, r0]
 8005000:	7c28      	ldrb	r0, [r5, #16]
 8005002:	68ef      	ldr	r7, [r5, #12]
 8005004:	69ff      	ldr	r7, [r7, #28]
 8005006:	47b8      	blx	r7
 8005008:	4034      	ands	r4, r6
 800500a:	2c01      	cmp	r4, #1
 800500c:	d103      	bne.n	8005016 <__iar_annotation$$branch+0x834>
 800500e:	2154      	movs	r1, #84	@ 0x54
 8005010:	7c28      	ldrb	r0, [r5, #16]
 8005012:	f7fb fb69 	bl	80006e8 <USBPD_PE_Notification>
 8005016:	e1dd      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005018:	6821      	ldr	r1, [r4, #0]
 800501a:	400e      	ands	r6, r1
 800501c:	6026      	str	r6, [r4, #0]
 800501e:	4030      	ands	r0, r6
 8005020:	2104      	movs	r1, #4
 8005022:	4301      	orrs	r1, r0
 8005024:	6021      	str	r1, [r4, #0]
 8005026:	8920      	ldrh	r0, [r4, #8]
 8005028:	b289      	uxth	r1, r1
 800502a:	0400      	lsls	r0, r0, #16
 800502c:	4308      	orrs	r0, r1
 800502e:	6020      	str	r0, [r4, #0]
 8005030:	2180      	movs	r1, #128	@ 0x80
 8005032:	0209      	lsls	r1, r1, #8
 8005034:	4301      	orrs	r1, r0
 8005036:	6021      	str	r1, [r4, #0]
 8005038:	2001      	movs	r0, #1
 800503a:	686a      	ldr	r2, [r5, #4]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	0952      	lsrs	r2, r2, #5
 8005040:	4002      	ands	r2, r0
 8005042:	4b60      	ldr	r3, [pc, #384]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8005044:	400b      	ands	r3, r1
 8005046:	0351      	lsls	r1, r2, #13
 8005048:	4319      	orrs	r1, r3
 800504a:	6021      	str	r1, [r4, #0]
 800504c:	696a      	ldr	r2, [r5, #20]
 800504e:	05d2      	lsls	r2, r2, #23
 8005050:	0f52      	lsrs	r2, r2, #29
 8005052:	4b07      	ldr	r3, [pc, #28]	@ (8005070 <__iar_annotation$$branch+0x88e>)
 8005054:	400b      	ands	r3, r1
 8005056:	0211      	lsls	r1, r2, #8
 8005058:	4319      	orrs	r1, r3
 800505a:	6021      	str	r1, [r4, #0]
 800505c:	6869      	ldr	r1, [r5, #4]
 800505e:	6809      	ldr	r1, [r1, #0]
 8005060:	0889      	lsrs	r1, r1, #2
 8005062:	4008      	ands	r0, r1
 8005064:	d006      	beq.n	8005074 <__iar_annotation$$branch+0x892>
 8005066:	6968      	ldr	r0, [r5, #20]
 8005068:	0741      	lsls	r1, r0, #29
 800506a:	0fc8      	lsrs	r0, r1, #31
 800506c:	e003      	b.n	8005076 <__iar_annotation$$branch+0x894>
 800506e:	bf00      	nop
 8005070:	fffff8ff 	.word	0xfffff8ff
 8005074:	2002      	movs	r0, #2
 8005076:	9002      	str	r0, [sp, #8]
 8005078:	208c      	movs	r0, #140	@ 0x8c
 800507a:	9001      	str	r0, [sp, #4]
 800507c:	2001      	movs	r0, #1
 800507e:	9000      	str	r0, [sp, #0]
 8005080:	0023      	movs	r3, r4
 8005082:	220f      	movs	r2, #15
 8005084:	2031      	movs	r0, #49	@ 0x31
 8005086:	5c29      	ldrb	r1, [r5, r0]
 8005088:	0028      	movs	r0, r5
 800508a:	f7fc fba0 	bl	80017ce <PE_Send_DataMessage>
 800508e:	2800      	cmp	r0, #0
 8005090:	d000      	beq.n	8005094 <__iar_annotation$$branch+0x8b2>
 8005092:	e217      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005094:	2054      	movs	r0, #84	@ 0x54
 8005096:	7728      	strb	r0, [r5, #28]
 8005098:	2134      	movs	r1, #52	@ 0x34
 800509a:	e08c      	b.n	80051b6 <__iar_annotation$$branch+0x9d4>
 800509c:	2634      	movs	r6, #52	@ 0x34
 800509e:	2031      	movs	r0, #49	@ 0x31
 80050a0:	5c28      	ldrb	r0, [r5, r0]
 80050a2:	f7fb fdc5 	bl	8000c30 <PE_Convert_SOPRxEvent>
 80050a6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80050a8:	7809      	ldrb	r1, [r1, #0]
 80050aa:	4281      	cmp	r1, r0
 80050ac:	d144      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050ae:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80050b0:	0bc2      	lsrs	r2, r0, #15
 80050b2:	d141      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050b4:	2707      	movs	r7, #7
 80050b6:	0b02      	lsrs	r2, r0, #12
 80050b8:	423a      	tst	r2, r7
 80050ba:	d03d      	beq.n	8005138 <__iar_annotation$$branch+0x956>
 80050bc:	06c0      	lsls	r0, r0, #27
 80050be:	0ec0      	lsrs	r0, r0, #27
 80050c0:	280f      	cmp	r0, #15
 80050c2:	d139      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050c4:	2914      	cmp	r1, #20
 80050c6:	d005      	beq.n	80050d4 <__iar_annotation$$branch+0x8f2>
 80050c8:	2014      	movs	r0, #20
 80050ca:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80050cc:	7008      	strb	r0, [r1, #0]
 80050ce:	0028      	movs	r0, r5
 80050d0:	f7fb fd75 	bl	8000bbe <PE_Clear_RxEvent>
 80050d4:	2000      	movs	r0, #0
 80050d6:	7728      	strb	r0, [r5, #28]
 80050d8:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80050da:	7880      	ldrb	r0, [r0, #2]
 80050dc:	06c1      	lsls	r1, r0, #27
 80050de:	0ec9      	lsrs	r1, r1, #27
 80050e0:	2904      	cmp	r1, #4
 80050e2:	d129      	bne.n	8005138 <__iar_annotation$$branch+0x956>
 80050e4:	0980      	lsrs	r0, r0, #6
 80050e6:	d027      	beq.n	8005138 <__iar_annotation$$branch+0x956>
 80050e8:	9001      	str	r0, [sp, #4]
 80050ea:	488f      	ldr	r0, [pc, #572]	@ (8005328 <__iar_annotation$$branch+0xb46>)
 80050ec:	9901      	ldr	r1, [sp, #4]
 80050ee:	2901      	cmp	r1, #1
 80050f0:	d004      	beq.n	80050fc <__iar_annotation$$branch+0x91a>
 80050f2:	d30e      	bcc.n	8005112 <__iar_annotation$$branch+0x930>
 80050f4:	2903      	cmp	r1, #3
 80050f6:	d008      	beq.n	800510a <__iar_annotation$$branch+0x928>
 80050f8:	d302      	bcc.n	8005100 <__iar_annotation$$branch+0x91e>
 80050fa:	e00a      	b.n	8005112 <__iar_annotation$$branch+0x930>
 80050fc:	2635      	movs	r6, #53	@ 0x35
 80050fe:	e008      	b.n	8005112 <__iar_annotation$$branch+0x930>
 8005100:	6969      	ldr	r1, [r5, #20]
 8005102:	4008      	ands	r0, r1
 8005104:	6168      	str	r0, [r5, #20]
 8005106:	2636      	movs	r6, #54	@ 0x36
 8005108:	e003      	b.n	8005112 <__iar_annotation$$branch+0x930>
 800510a:	6969      	ldr	r1, [r5, #20]
 800510c:	4008      	ands	r0, r1
 800510e:	6168      	str	r0, [r5, #20]
 8005110:	2637      	movs	r6, #55	@ 0x37
 8005112:	0031      	movs	r1, r6
 8005114:	7c28      	ldrb	r0, [r5, #16]
 8005116:	f7fb fae7 	bl	80006e8 <USBPD_PE_Notification>
 800511a:	68e8      	ldr	r0, [r5, #12]
 800511c:	6a06      	ldr	r6, [r0, #32]
 800511e:	2e00      	cmp	r6, #0
 8005120:	d009      	beq.n	8005136 <__iar_annotation$$branch+0x954>
 8005122:	6820      	ldr	r0, [r4, #0]
 8005124:	0a01      	lsrs	r1, r0, #8
 8005126:	400f      	ands	r7, r1
 8005128:	9700      	str	r7, [sp, #0]
 800512a:	0c03      	lsrs	r3, r0, #16
 800512c:	9a01      	ldr	r2, [sp, #4]
 800512e:	2031      	movs	r0, #49	@ 0x31
 8005130:	5c29      	ldrb	r1, [r5, r0]
 8005132:	7c28      	ldrb	r0, [r5, #16]
 8005134:	47b0      	blx	r6
 8005136:	e14d      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005138:	5da8      	ldrb	r0, [r5, r6]
 800513a:	e08f      	b.n	800525c <__iar_annotation$$branch+0xa7a>
 800513c:	6821      	ldr	r1, [r4, #0]
 800513e:	400e      	ands	r6, r1
 8005140:	6026      	str	r6, [r4, #0]
 8005142:	4030      	ands	r0, r6
 8005144:	2105      	movs	r1, #5
 8005146:	4301      	orrs	r1, r0
 8005148:	6021      	str	r1, [r4, #0]
 800514a:	8920      	ldrh	r0, [r4, #8]
 800514c:	b289      	uxth	r1, r1
 800514e:	0400      	lsls	r0, r0, #16
 8005150:	4308      	orrs	r0, r1
 8005152:	6020      	str	r0, [r4, #0]
 8005154:	2180      	movs	r1, #128	@ 0x80
 8005156:	0209      	lsls	r1, r1, #8
 8005158:	4301      	orrs	r1, r0
 800515a:	6021      	str	r1, [r4, #0]
 800515c:	2001      	movs	r0, #1
 800515e:	686a      	ldr	r2, [r5, #4]
 8005160:	6812      	ldr	r2, [r2, #0]
 8005162:	0952      	lsrs	r2, r2, #5
 8005164:	4002      	ands	r2, r0
 8005166:	4b17      	ldr	r3, [pc, #92]	@ (80051c4 <__iar_annotation$$branch+0x9e2>)
 8005168:	400b      	ands	r3, r1
 800516a:	0351      	lsls	r1, r2, #13
 800516c:	4319      	orrs	r1, r3
 800516e:	6021      	str	r1, [r4, #0]
 8005170:	696a      	ldr	r2, [r5, #20]
 8005172:	05d2      	lsls	r2, r2, #23
 8005174:	0f52      	lsrs	r2, r2, #29
 8005176:	4b6d      	ldr	r3, [pc, #436]	@ (800532c <__iar_annotation$$branch+0xb4a>)
 8005178:	400b      	ands	r3, r1
 800517a:	0211      	lsls	r1, r2, #8
 800517c:	4319      	orrs	r1, r3
 800517e:	6021      	str	r1, [r4, #0]
 8005180:	6869      	ldr	r1, [r5, #4]
 8005182:	6809      	ldr	r1, [r1, #0]
 8005184:	0889      	lsrs	r1, r1, #2
 8005186:	4008      	ands	r0, r1
 8005188:	d003      	beq.n	8005192 <__iar_annotation$$branch+0x9b0>
 800518a:	6968      	ldr	r0, [r5, #20]
 800518c:	0741      	lsls	r1, r0, #29
 800518e:	0fc8      	lsrs	r0, r1, #31
 8005190:	e000      	b.n	8005194 <__iar_annotation$$branch+0x9b2>
 8005192:	2002      	movs	r0, #2
 8005194:	9002      	str	r0, [sp, #8]
 8005196:	208d      	movs	r0, #141	@ 0x8d
 8005198:	9001      	str	r0, [sp, #4]
 800519a:	2001      	movs	r0, #1
 800519c:	9000      	str	r0, [sp, #0]
 800519e:	0023      	movs	r3, r4
 80051a0:	220f      	movs	r2, #15
 80051a2:	2031      	movs	r0, #49	@ 0x31
 80051a4:	5c29      	ldrb	r1, [r5, r0]
 80051a6:	0028      	movs	r0, r5
 80051a8:	f7fc fb11 	bl	80017ce <PE_Send_DataMessage>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d15e      	bne.n	800526e <__iar_annotation$$branch+0xa8c>
 80051b0:	2055      	movs	r0, #85	@ 0x55
 80051b2:	7728      	strb	r0, [r5, #28]
 80051b4:	2155      	movs	r1, #85	@ 0x55
 80051b6:	7c28      	ldrb	r0, [r5, #16]
 80051b8:	f7fb fa96 	bl	80006e8 <USBPD_PE_Notification>
 80051bc:	48c3      	ldr	r0, [pc, #780]	@ (80054cc <.text_19>)
 80051be:	83e8      	strh	r0, [r5, #30]
 80051c0:	2032      	movs	r0, #50	@ 0x32
 80051c2:	e12c      	b.n	800541e <__iar_annotation$$branch+0xc3c>
 80051c4:	ffff9fff 	.word	0xffff9fff
 80051c8:	0000801e 	.word	0x0000801e
 80051cc:	2031      	movs	r0, #49	@ 0x31
 80051ce:	5c28      	ldrb	r0, [r5, r0]
 80051d0:	f7fb fd2e 	bl	8000c30 <PE_Convert_SOPRxEvent>
 80051d4:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80051d6:	7809      	ldrb	r1, [r1, #0]
 80051d8:	4281      	cmp	r1, r0
 80051da:	d13d      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051dc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80051de:	0bc2      	lsrs	r2, r0, #15
 80051e0:	d13a      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051e2:	2607      	movs	r6, #7
 80051e4:	0b02      	lsrs	r2, r0, #12
 80051e6:	4232      	tst	r2, r6
 80051e8:	d036      	beq.n	8005258 <__iar_annotation$$branch+0xa76>
 80051ea:	06c0      	lsls	r0, r0, #27
 80051ec:	0ec0      	lsrs	r0, r0, #27
 80051ee:	280f      	cmp	r0, #15
 80051f0:	d132      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 80051f2:	2914      	cmp	r1, #20
 80051f4:	d005      	beq.n	8005202 <__iar_annotation$$branch+0xa20>
 80051f6:	2014      	movs	r0, #20
 80051f8:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80051fa:	7008      	strb	r0, [r1, #0]
 80051fc:	0028      	movs	r0, r5
 80051fe:	f7fb fcde 	bl	8000bbe <PE_Clear_RxEvent>
 8005202:	2000      	movs	r0, #0
 8005204:	7728      	strb	r0, [r5, #28]
 8005206:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005208:	7880      	ldrb	r0, [r0, #2]
 800520a:	06c1      	lsls	r1, r0, #27
 800520c:	0ec9      	lsrs	r1, r1, #27
 800520e:	2905      	cmp	r1, #5
 8005210:	d122      	bne.n	8005258 <__iar_annotation$$branch+0xa76>
 8005212:	0980      	lsrs	r0, r0, #6
 8005214:	d020      	beq.n	8005258 <__iar_annotation$$branch+0xa76>
 8005216:	9001      	str	r0, [sp, #4]
 8005218:	2801      	cmp	r0, #1
 800521a:	d004      	beq.n	8005226 <__iar_annotation$$branch+0xa44>
 800521c:	d309      	bcc.n	8005232 <__iar_annotation$$branch+0xa50>
 800521e:	2803      	cmp	r0, #3
 8005220:	d005      	beq.n	800522e <__iar_annotation$$branch+0xa4c>
 8005222:	d302      	bcc.n	800522a <__iar_annotation$$branch+0xa48>
 8005224:	e005      	b.n	8005232 <__iar_annotation$$branch+0xa50>
 8005226:	2156      	movs	r1, #86	@ 0x56
 8005228:	e004      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 800522a:	2157      	movs	r1, #87	@ 0x57
 800522c:	e002      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 800522e:	2158      	movs	r1, #88	@ 0x58
 8005230:	e000      	b.n	8005234 <__iar_annotation$$branch+0xa52>
 8005232:	2155      	movs	r1, #85	@ 0x55
 8005234:	7c28      	ldrb	r0, [r5, #16]
 8005236:	f7fb fa57 	bl	80006e8 <USBPD_PE_Notification>
 800523a:	68e8      	ldr	r0, [r5, #12]
 800523c:	6a47      	ldr	r7, [r0, #36]	@ 0x24
 800523e:	2f00      	cmp	r7, #0
 8005240:	d009      	beq.n	8005256 <__iar_annotation$$branch+0xa74>
 8005242:	6820      	ldr	r0, [r4, #0]
 8005244:	0a01      	lsrs	r1, r0, #8
 8005246:	400e      	ands	r6, r1
 8005248:	9600      	str	r6, [sp, #0]
 800524a:	0c03      	lsrs	r3, r0, #16
 800524c:	9a01      	ldr	r2, [sp, #4]
 800524e:	2031      	movs	r0, #49	@ 0x31
 8005250:	5c29      	ldrb	r1, [r5, r0]
 8005252:	7c28      	ldrb	r0, [r5, #16]
 8005254:	47b8      	blx	r7
 8005256:	e0bd      	b.n	80053d4 <__iar_annotation$$branch+0xbf2>
 8005258:	2034      	movs	r0, #52	@ 0x34
 800525a:	5c28      	ldrb	r0, [r5, r0]
 800525c:	06c0      	lsls	r0, r0, #27
 800525e:	0ec0      	lsrs	r0, r0, #27
 8005260:	2810      	cmp	r0, #16
 8005262:	d100      	bne.n	8005266 <__iar_annotation$$branch+0xa84>
 8005264:	e0bf      	b.n	80053e6 <__iar_annotation$$branch+0xc04>
 8005266:	8be8      	ldrh	r0, [r5, #30]
 8005268:	2180      	movs	r1, #128	@ 0x80
 800526a:	0209      	lsls	r1, r1, #8
 800526c:	4288      	cmp	r0, r1
 800526e:	d000      	beq.n	8005272 <__iar_annotation$$branch+0xa90>
 8005270:	e128      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005272:	e0d1      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 8005274:	2100      	movs	r1, #0
 8005276:	466a      	mov	r2, sp
 8005278:	7311      	strb	r1, [r2, #12]
 800527a:	6821      	ldr	r1, [r4, #0]
 800527c:	400e      	ands	r6, r1
 800527e:	6026      	str	r6, [r4, #0]
 8005280:	6861      	ldr	r1, [r4, #4]
 8005282:	4030      	ands	r0, r6
 8005284:	06c9      	lsls	r1, r1, #27
 8005286:	0ec9      	lsrs	r1, r1, #27
 8005288:	4301      	orrs	r1, r0
 800528a:	6021      	str	r1, [r4, #0]
 800528c:	8920      	ldrh	r0, [r4, #8]
 800528e:	b28a      	uxth	r2, r1
 8005290:	0401      	lsls	r1, r0, #16
 8005292:	4311      	orrs	r1, r2
 8005294:	6021      	str	r1, [r4, #0]
 8005296:	2080      	movs	r0, #128	@ 0x80
 8005298:	0200      	lsls	r0, r0, #8
 800529a:	4308      	orrs	r0, r1
 800529c:	6020      	str	r0, [r4, #0]
 800529e:	2601      	movs	r6, #1
 80052a0:	6869      	ldr	r1, [r5, #4]
 80052a2:	6809      	ldr	r1, [r1, #0]
 80052a4:	0949      	lsrs	r1, r1, #5
 80052a6:	4031      	ands	r1, r6
 80052a8:	4aaa      	ldr	r2, [pc, #680]	@ (8005554 <.text_21>)
 80052aa:	4002      	ands	r2, r0
 80052ac:	0348      	lsls	r0, r1, #13
 80052ae:	4310      	orrs	r0, r2
 80052b0:	6020      	str	r0, [r4, #0]
 80052b2:	491e      	ldr	r1, [pc, #120]	@ (800532c <__iar_annotation$$branch+0xb4a>)
 80052b4:	4001      	ands	r1, r0
 80052b6:	0230      	lsls	r0, r6, #8
 80052b8:	4308      	orrs	r0, r1
 80052ba:	6020      	str	r0, [r4, #0]
 80052bc:	9005      	str	r0, [sp, #20]
 80052be:	68e8      	ldr	r0, [r5, #12]
 80052c0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80052c2:	9001      	str	r0, [sp, #4]
 80052c4:	2800      	cmp	r0, #0
 80052c6:	d00b      	beq.n	80052e0 <__iar_annotation$$branch+0xafe>
 80052c8:	a805      	add	r0, sp, #20
 80052ca:	1d00      	adds	r0, r0, #4
 80052cc:	9000      	str	r0, [sp, #0]
 80052ce:	ab03      	add	r3, sp, #12
 80052d0:	7820      	ldrb	r0, [r4, #0]
 80052d2:	06c2      	lsls	r2, r0, #27
 80052d4:	0ed2      	lsrs	r2, r2, #27
 80052d6:	2031      	movs	r0, #49	@ 0x31
 80052d8:	5c29      	ldrb	r1, [r5, r0]
 80052da:	7c28      	ldrb	r0, [r5, #16]
 80052dc:	9c01      	ldr	r4, [sp, #4]
 80052de:	47a0      	blx	r4
 80052e0:	4668      	mov	r0, sp
 80052e2:	7b00      	ldrb	r0, [r0, #12]
 80052e4:	1c40      	adds	r0, r0, #1
 80052e6:	4669      	mov	r1, sp
 80052e8:	7308      	strb	r0, [r1, #12]
 80052ea:	6868      	ldr	r0, [r5, #4]
 80052ec:	6800      	ldr	r0, [r0, #0]
 80052ee:	0880      	lsrs	r0, r0, #2
 80052f0:	4006      	ands	r6, r0
 80052f2:	d003      	beq.n	80052fc <__iar_annotation$$branch+0xb1a>
 80052f4:	6968      	ldr	r0, [r5, #20]
 80052f6:	0741      	lsls	r1, r0, #29
 80052f8:	0fc8      	lsrs	r0, r1, #31
 80052fa:	e000      	b.n	80052fe <__iar_annotation$$branch+0xb1c>
 80052fc:	2002      	movs	r0, #2
 80052fe:	9002      	str	r0, [sp, #8]
 8005300:	208f      	movs	r0, #143	@ 0x8f
 8005302:	9001      	str	r0, [sp, #4]
 8005304:	4668      	mov	r0, sp
 8005306:	7b00      	ldrb	r0, [r0, #12]
 8005308:	9000      	str	r0, [sp, #0]
 800530a:	ab05      	add	r3, sp, #20
 800530c:	220f      	movs	r2, #15
 800530e:	2031      	movs	r0, #49	@ 0x31
 8005310:	5c29      	ldrb	r1, [r5, r0]
 8005312:	0028      	movs	r0, r5
 8005314:	f7fc fa5b 	bl	80017ce <PE_Send_DataMessage>
 8005318:	2800      	cmp	r0, #0
 800531a:	d104      	bne.n	8005326 <__iar_annotation$$branch+0xb44>
 800531c:	205a      	movs	r0, #90	@ 0x5a
 800531e:	7728      	strb	r0, [r5, #28]
 8005320:	48bf      	ldr	r0, [pc, #764]	@ (8005620 <.text_23>)
 8005322:	83e8      	strh	r0, [r5, #30]
 8005324:	9704      	str	r7, [sp, #16]
 8005326:	e0ca      	b.n	80054be <__iar_annotation$$branch+0xcdc>
 8005328:	fffffe3f 	.word	0xfffffe3f
 800532c:	fffff8ff 	.word	0xfffff8ff
 8005330:	2607      	movs	r6, #7
 8005332:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8005334:	0b00      	lsrs	r0, r0, #12
 8005336:	2107      	movs	r1, #7
 8005338:	4001      	ands	r1, r0
 800533a:	1e48      	subs	r0, r1, #1
 800533c:	4669      	mov	r1, sp
 800533e:	7108      	strb	r0, [r1, #4]
 8005340:	2031      	movs	r0, #49	@ 0x31
 8005342:	5c28      	ldrb	r0, [r5, r0]
 8005344:	f7fb fc74 	bl	8000c30 <PE_Convert_SOPRxEvent>
 8005348:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800534a:	7809      	ldrb	r1, [r1, #0]
 800534c:	4281      	cmp	r1, r0
 800534e:	d144      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005350:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8005352:	0bc2      	lsrs	r2, r0, #15
 8005354:	d141      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005356:	0b02      	lsrs	r2, r0, #12
 8005358:	4232      	tst	r2, r6
 800535a:	d03e      	beq.n	80053da <__iar_annotation$$branch+0xbf8>
 800535c:	06c0      	lsls	r0, r0, #27
 800535e:	0ec0      	lsrs	r0, r0, #27
 8005360:	280f      	cmp	r0, #15
 8005362:	d13a      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005364:	2914      	cmp	r1, #20
 8005366:	d005      	beq.n	8005374 <__iar_annotation$$branch+0xb92>
 8005368:	2014      	movs	r0, #20
 800536a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800536c:	7008      	strb	r0, [r1, #0]
 800536e:	0028      	movs	r0, r5
 8005370:	f7fb fc25 	bl	8000bbe <PE_Clear_RxEvent>
 8005374:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005376:	7880      	ldrb	r0, [r0, #2]
 8005378:	06c1      	lsls	r1, r0, #27
 800537a:	0ec9      	lsrs	r1, r1, #27
 800537c:	6862      	ldr	r2, [r4, #4]
 800537e:	4291      	cmp	r1, r2
 8005380:	d12b      	bne.n	80053da <__iar_annotation$$branch+0xbf8>
 8005382:	0981      	lsrs	r1, r0, #6
 8005384:	d029      	beq.n	80053da <__iar_annotation$$branch+0xbf8>
 8005386:	68e9      	ldr	r1, [r5, #12]
 8005388:	6b89      	ldr	r1, [r1, #56]	@ 0x38
 800538a:	2900      	cmp	r1, #0
 800538c:	d022      	beq.n	80053d4 <__iar_annotation$$branch+0xbf2>
 800538e:	2600      	movs	r6, #0
 8005390:	e011      	b.n	80053b6 <__iar_annotation$$branch+0xbd4>
 8005392:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8005394:	00b2      	lsls	r2, r6, #2
 8005396:	188b      	adds	r3, r1, r2
 8005398:	799c      	ldrb	r4, [r3, #6]
 800539a:	79df      	ldrb	r7, [r3, #7]
 800539c:	023f      	lsls	r7, r7, #8
 800539e:	19e4      	adds	r4, r4, r7
 80053a0:	3108      	adds	r1, #8
 80053a2:	5c89      	ldrb	r1, [r1, r2]
 80053a4:	0409      	lsls	r1, r1, #16
 80053a6:	1861      	adds	r1, r4, r1
 80053a8:	7a5a      	ldrb	r2, [r3, #9]
 80053aa:	0612      	lsls	r2, r2, #24
 80053ac:	1889      	adds	r1, r1, r2
 80053ae:	aa05      	add	r2, sp, #20
 80053b0:	00b3      	lsls	r3, r6, #2
 80053b2:	50d1      	str	r1, [r2, r3]
 80053b4:	1c76      	adds	r6, r6, #1
 80053b6:	4669      	mov	r1, sp
 80053b8:	7909      	ldrb	r1, [r1, #4]
 80053ba:	428e      	cmp	r6, r1
 80053bc:	d3e9      	bcc.n	8005392 <__iar_annotation$$branch+0xbb0>
 80053be:	a905      	add	r1, sp, #20
 80053c0:	9100      	str	r1, [sp, #0]
 80053c2:	ab01      	add	r3, sp, #4
 80053c4:	06c2      	lsls	r2, r0, #27
 80053c6:	0ed2      	lsrs	r2, r2, #27
 80053c8:	2031      	movs	r0, #49	@ 0x31
 80053ca:	5c29      	ldrb	r1, [r5, r0]
 80053cc:	7c28      	ldrb	r0, [r5, #16]
 80053ce:	68ec      	ldr	r4, [r5, #12]
 80053d0:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
 80053d2:	47a0      	blx	r4
 80053d4:	2000      	movs	r0, #0
 80053d6:	83e8      	strh	r0, [r5, #30]
 80053d8:	e01e      	b.n	8005418 <__iar_annotation$$branch+0xc36>
 80053da:	2034      	movs	r0, #52	@ 0x34
 80053dc:	5c28      	ldrb	r0, [r5, r0]
 80053de:	06c0      	lsls	r0, r0, #27
 80053e0:	0ec0      	lsrs	r0, r0, #27
 80053e2:	2810      	cmp	r0, #16
 80053e4:	d113      	bne.n	800540e <__iar_annotation$$branch+0xc2c>
 80053e6:	981c      	ldr	r0, [sp, #112]	@ 0x70
 80053e8:	7800      	ldrb	r0, [r0, #0]
 80053ea:	2814      	cmp	r0, #20
 80053ec:	d005      	beq.n	80053fa <__iar_annotation$$branch+0xc18>
 80053ee:	2014      	movs	r0, #20
 80053f0:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80053f2:	7008      	strb	r0, [r1, #0]
 80053f4:	0028      	movs	r0, r5
 80053f6:	f7fb fbe2 	bl	8000bbe <PE_Clear_RxEvent>
 80053fa:	2000      	movs	r0, #0
 80053fc:	83e8      	strh	r0, [r5, #30]
 80053fe:	2103      	movs	r1, #3
 8005400:	7469      	strb	r1, [r5, #17]
 8005402:	9004      	str	r0, [sp, #16]
 8005404:	2159      	movs	r1, #89	@ 0x59
 8005406:	7c28      	ldrb	r0, [r5, #16]
 8005408:	f7fb f96e 	bl	80006e8 <USBPD_PE_Notification>
 800540c:	e05a      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 800540e:	8be8      	ldrh	r0, [r5, #30]
 8005410:	2180      	movs	r1, #128	@ 0x80
 8005412:	0209      	lsls	r1, r1, #8
 8005414:	4288      	cmp	r0, r1
 8005416:	d155      	bne.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005418:	2003      	movs	r0, #3
 800541a:	7468      	strb	r0, [r5, #17]
 800541c:	2000      	movs	r0, #0
 800541e:	9004      	str	r0, [sp, #16]
 8005420:	e050      	b.n	80054c4 <__iar_annotation$$branch+0xce2>
 8005422:	2100      	movs	r1, #0
 8005424:	466a      	mov	r2, sp
 8005426:	7311      	strb	r1, [r2, #12]
 8005428:	6821      	ldr	r1, [r4, #0]
 800542a:	400e      	ands	r6, r1
 800542c:	6026      	str	r6, [r4, #0]
 800542e:	6861      	ldr	r1, [r4, #4]
 8005430:	4030      	ands	r0, r6
 8005432:	06c9      	lsls	r1, r1, #27
 8005434:	0ec9      	lsrs	r1, r1, #27
 8005436:	4301      	orrs	r1, r0
 8005438:	6021      	str	r1, [r4, #0]
 800543a:	8920      	ldrh	r0, [r4, #8]
 800543c:	b28a      	uxth	r2, r1
 800543e:	0401      	lsls	r1, r0, #16
 8005440:	4311      	orrs	r1, r2
 8005442:	6021      	str	r1, [r4, #0]
 8005444:	2080      	movs	r0, #128	@ 0x80
 8005446:	0200      	lsls	r0, r0, #8
 8005448:	4308      	orrs	r0, r1
 800544a:	6020      	str	r0, [r4, #0]
 800544c:	2601      	movs	r6, #1
 800544e:	6869      	ldr	r1, [r5, #4]
 8005450:	6809      	ldr	r1, [r1, #0]
 8005452:	0949      	lsrs	r1, r1, #5
 8005454:	4031      	ands	r1, r6
 8005456:	4a3f      	ldr	r2, [pc, #252]	@ (8005554 <.text_21>)
 8005458:	4002      	ands	r2, r0
 800545a:	0348      	lsls	r0, r1, #13
 800545c:	4310      	orrs	r0, r2
 800545e:	6020      	str	r0, [r4, #0]
 8005460:	4970      	ldr	r1, [pc, #448]	@ (8005624 <.text_24>)
 8005462:	4001      	ands	r1, r0
 8005464:	0230      	lsls	r0, r6, #8
 8005466:	4308      	orrs	r0, r1
 8005468:	6020      	str	r0, [r4, #0]
 800546a:	9005      	str	r0, [sp, #20]
 800546c:	68e8      	ldr	r0, [r5, #12]
 800546e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8005470:	2b00      	cmp	r3, #0
 8005472:	d004      	beq.n	800547e <__iar_annotation$$branch+0xc9c>
 8005474:	a805      	add	r0, sp, #20
 8005476:	1d02      	adds	r2, r0, #4
 8005478:	a903      	add	r1, sp, #12
 800547a:	7c28      	ldrb	r0, [r5, #16]
 800547c:	4798      	blx	r3
 800547e:	4668      	mov	r0, sp
 8005480:	7b00      	ldrb	r0, [r0, #12]
 8005482:	1c40      	adds	r0, r0, #1
 8005484:	4669      	mov	r1, sp
 8005486:	7308      	strb	r0, [r1, #12]
 8005488:	6868      	ldr	r0, [r5, #4]
 800548a:	6800      	ldr	r0, [r0, #0]
 800548c:	0880      	lsrs	r0, r0, #2
 800548e:	4006      	ands	r6, r0
 8005490:	d003      	beq.n	800549a <__iar_annotation$$branch+0xcb8>
 8005492:	6968      	ldr	r0, [r5, #20]
 8005494:	0741      	lsls	r1, r0, #29
 8005496:	0fc8      	lsrs	r0, r1, #31
 8005498:	e000      	b.n	800549c <__iar_annotation$$branch+0xcba>
 800549a:	2002      	movs	r0, #2
 800549c:	9002      	str	r0, [sp, #8]
 800549e:	2003      	movs	r0, #3
 80054a0:	9001      	str	r0, [sp, #4]
 80054a2:	4668      	mov	r0, sp
 80054a4:	7b00      	ldrb	r0, [r0, #12]
 80054a6:	9000      	str	r0, [sp, #0]
 80054a8:	ab05      	add	r3, sp, #20
 80054aa:	220f      	movs	r2, #15
 80054ac:	2031      	movs	r0, #49	@ 0x31
 80054ae:	5c29      	ldrb	r1, [r5, r0]
 80054b0:	0028      	movs	r0, r5
 80054b2:	f7fc f98c 	bl	80017ce <PE_Send_DataMessage>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d101      	bne.n	80054be <__iar_annotation$$branch+0xcdc>
 80054ba:	205a      	movs	r0, #90	@ 0x5a
 80054bc:	7728      	strb	r0, [r5, #28]
 80054be:	2000      	movs	r0, #0
 80054c0:	2132      	movs	r1, #50	@ 0x32
 80054c2:	5468      	strb	r0, [r5, r1]
 80054c4:	9804      	ldr	r0, [sp, #16]
 80054c6:	b01d      	add	sp, #116	@ 0x74
 80054c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080054cc <.text_19>:
 80054cc:	00008032 	.word	0x00008032

080054d0 <PE_StateMachine_UVDM>:
 80054d0:	2914      	cmp	r1, #20
 80054d2:	d000      	beq.n	80054d6 <PE_StateMachine_UVDM+0x6>
 80054d4:	4770      	bx	lr
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	b08c      	sub	sp, #48	@ 0x30
 80054da:	0004      	movs	r4, r0
 80054dc:	68e0      	ldr	r0, [r4, #12]
 80054de:	2800      	cmp	r0, #0
 80054e0:	d035      	beq.n	800554e <PE_StateMachine_UVDM+0x7e>
 80054e2:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d032      	beq.n	800554e <PE_StateMachine_UVDM+0x7e>
 80054e8:	2500      	movs	r5, #0
 80054ea:	4669      	mov	r1, sp
 80054ec:	730d      	strb	r5, [r1, #12]
 80054ee:	a805      	add	r0, sp, #20
 80054f0:	1d03      	adds	r3, r0, #4
 80054f2:	aa03      	add	r2, sp, #12
 80054f4:	a904      	add	r1, sp, #16
 80054f6:	7c20      	ldrb	r0, [r4, #16]
 80054f8:	68e6      	ldr	r6, [r4, #12]
 80054fa:	6bf6      	ldr	r6, [r6, #60]	@ 0x3c
 80054fc:	47b0      	blx	r6
 80054fe:	9804      	ldr	r0, [sp, #16]
 8005500:	49cc      	ldr	r1, [pc, #816]	@ (8005834 <.text_27>)
 8005502:	4001      	ands	r1, r0
 8005504:	9104      	str	r1, [sp, #16]
 8005506:	4668      	mov	r0, sp
 8005508:	7b00      	ldrb	r0, [r0, #12]
 800550a:	1c40      	adds	r0, r0, #1
 800550c:	4669      	mov	r1, sp
 800550e:	7308      	strb	r0, [r1, #12]
 8005510:	9804      	ldr	r0, [sp, #16]
 8005512:	9005      	str	r0, [sp, #20]
 8005514:	6860      	ldr	r0, [r4, #4]
 8005516:	6800      	ldr	r0, [r0, #0]
 8005518:	0741      	lsls	r1, r0, #29
 800551a:	0fc9      	lsrs	r1, r1, #31
 800551c:	d003      	beq.n	8005526 <PE_StateMachine_UVDM+0x56>
 800551e:	6960      	ldr	r0, [r4, #20]
 8005520:	0741      	lsls	r1, r0, #29
 8005522:	0fc8      	lsrs	r0, r1, #31
 8005524:	e000      	b.n	8005528 <PE_StateMachine_UVDM+0x58>
 8005526:	2002      	movs	r0, #2
 8005528:	9002      	str	r0, [sp, #8]
 800552a:	2003      	movs	r0, #3
 800552c:	9001      	str	r0, [sp, #4]
 800552e:	4668      	mov	r0, sp
 8005530:	7b00      	ldrb	r0, [r0, #12]
 8005532:	9000      	str	r0, [sp, #0]
 8005534:	ab05      	add	r3, sp, #20
 8005536:	220f      	movs	r2, #15
 8005538:	2031      	movs	r0, #49	@ 0x31
 800553a:	5c21      	ldrb	r1, [r4, r0]
 800553c:	0020      	movs	r0, r4
 800553e:	f7fc f946 	bl	80017ce <PE_Send_DataMessage>
 8005542:	2800      	cmp	r0, #0
 8005544:	d101      	bne.n	800554a <PE_StateMachine_UVDM+0x7a>
 8005546:	2059      	movs	r0, #89	@ 0x59
 8005548:	7720      	strb	r0, [r4, #28]
 800554a:	2032      	movs	r0, #50	@ 0x32
 800554c:	5425      	strb	r5, [r4, r0]
 800554e:	b00c      	add	sp, #48	@ 0x30
 8005550:	bd70      	pop	{r4, r5, r6, pc}
	...

08005554 <.text_21>:
 8005554:	ffff9fff 	.word	0xffff9fff

08005558 <PE_Check_DataMessageVDM>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	2403      	movs	r4, #3
 800555c:	2501      	movs	r5, #1
 800555e:	6801      	ldr	r1, [r0, #0]
 8005560:	6849      	ldr	r1, [r1, #4]
 8005562:	0949      	lsrs	r1, r1, #5
 8005564:	4029      	ands	r1, r5
 8005566:	d01f      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 8005568:	68c1      	ldr	r1, [r0, #12]
 800556a:	2900      	cmp	r1, #0
 800556c:	d01c      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 800556e:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8005570:	788a      	ldrb	r2, [r1, #2]
 8005572:	78cb      	ldrb	r3, [r1, #3]
 8005574:	021b      	lsls	r3, r3, #8
 8005576:	18d2      	adds	r2, r2, r3
 8005578:	790b      	ldrb	r3, [r1, #4]
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	18d2      	adds	r2, r2, r3
 800557e:	7949      	ldrb	r1, [r1, #5]
 8005580:	0609      	lsls	r1, r1, #24
 8005582:	1851      	adds	r1, r2, r1
 8005584:	9100      	str	r1, [sp, #0]
 8005586:	0bca      	lsrs	r2, r1, #15
 8005588:	402a      	ands	r2, r5
 800558a:	d014      	beq.n	80055b6 <PE_Check_DataMessageVDM+0x5e>
 800558c:	2394      	movs	r3, #148	@ 0x94
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	50c1      	str	r1, [r0, r3]
 8005592:	0989      	lsrs	r1, r1, #6
 8005594:	4021      	ands	r1, r4
 8005596:	d107      	bne.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 8005598:	6801      	ldr	r1, [r0, #0]
 800559a:	6849      	ldr	r1, [r1, #4]
 800559c:	0a09      	lsrs	r1, r1, #8
 800559e:	4029      	ands	r1, r5
 80055a0:	d002      	beq.n	80055a8 <PE_Check_DataMessageVDM+0x50>
 80055a2:	f7ff f840 	bl	8004626 <PE_Receive_SVDM>
 80055a6:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80055a8:	6841      	ldr	r1, [r0, #4]
 80055aa:	6809      	ldr	r1, [r1, #0]
 80055ac:	400c      	ands	r4, r1
 80055ae:	2c02      	cmp	r4, #2
 80055b0:	d134      	bne.n	800561c <PE_Check_DataMessageVDM+0xc4>
 80055b2:	7445      	strb	r5, [r0, #17]
 80055b4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80055b6:	8e81      	ldrh	r1, [r0, #52]	@ 0x34
 80055b8:	0449      	lsls	r1, r1, #17
 80055ba:	0f49      	lsrs	r1, r1, #29
 80055bc:	1e49      	subs	r1, r1, #1
 80055be:	4ab1      	ldr	r2, [pc, #708]	@ (8005884 <.text_29>)
 80055c0:	5481      	strb	r1, [r0, r2]
 80055c2:	0006      	movs	r6, r0
 80055c4:	2000      	movs	r0, #0
 80055c6:	e00f      	b.n	80055e8 <PE_Check_DataMessageVDM+0x90>
 80055c8:	6bb1      	ldr	r1, [r6, #56]	@ 0x38
 80055ca:	0082      	lsls	r2, r0, #2
 80055cc:	1889      	adds	r1, r1, r2
 80055ce:	798a      	ldrb	r2, [r1, #6]
 80055d0:	79cf      	ldrb	r7, [r1, #7]
 80055d2:	023f      	lsls	r7, r7, #8
 80055d4:	19d2      	adds	r2, r2, r7
 80055d6:	7a0f      	ldrb	r7, [r1, #8]
 80055d8:	043f      	lsls	r7, r7, #16
 80055da:	19d2      	adds	r2, r2, r7
 80055dc:	7a49      	ldrb	r1, [r1, #9]
 80055de:	0609      	lsls	r1, r1, #24
 80055e0:	1851      	adds	r1, r2, r1
 80055e2:	0082      	lsls	r2, r0, #2
 80055e4:	5099      	str	r1, [r3, r2]
 80055e6:	1c40      	adds	r0, r0, #1
 80055e8:	49a7      	ldr	r1, [pc, #668]	@ (8005888 <.text_30>)
 80055ea:	1873      	adds	r3, r6, r1
 80055ec:	3118      	adds	r1, #24
 80055ee:	1872      	adds	r2, r6, r1
 80055f0:	7811      	ldrb	r1, [r2, #0]
 80055f2:	4288      	cmp	r0, r1
 80055f4:	d3e8      	bcc.n	80055c8 <PE_Check_DataMessageVDM+0x70>
 80055f6:	9900      	ldr	r1, [sp, #0]
 80055f8:	68f0      	ldr	r0, [r6, #12]
 80055fa:	2800      	cmp	r0, #0
 80055fc:	d008      	beq.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 80055fe:	6c07      	ldr	r7, [r0, #64]	@ 0x40
 8005600:	2f00      	cmp	r7, #0
 8005602:	d005      	beq.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 8005604:	7c30      	ldrb	r0, [r6, #16]
 8005606:	47b8      	blx	r7
 8005608:	2800      	cmp	r0, #0
 800560a:	d101      	bne.n	8005610 <PE_Check_DataMessageVDM+0xb8>
 800560c:	7474      	strb	r4, [r6, #17]
 800560e:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8005610:	6870      	ldr	r0, [r6, #4]
 8005612:	6800      	ldr	r0, [r0, #0]
 8005614:	4004      	ands	r4, r0
 8005616:	2c02      	cmp	r4, #2
 8005618:	d100      	bne.n	800561c <PE_Check_DataMessageVDM+0xc4>
 800561a:	7475      	strb	r5, [r6, #17]
 800561c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

08005620 <.text_23>:
 8005620:	0000801e 	.word	0x0000801e

08005624 <.text_24>:
 8005624:	fffff8ff 	.word	0xfffff8ff

08005628 <PE_SVDM_CheckIdentity>:
 8005628:	b5fc      	push	{r2, r3, r4, r5, r6, r7, lr}
 800562a:	0003      	movs	r3, r0
 800562c:	2000      	movs	r0, #0
 800562e:	4c97      	ldr	r4, [pc, #604]	@ (800588c <.text_31>)
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	58e3      	ldr	r3, [r4, r3]
 8005634:	9301      	str	r3, [sp, #4]
 8005636:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8005638:	045b      	lsls	r3, r3, #17
 800563a:	0f5b      	lsrs	r3, r3, #29
 800563c:	1e5c      	subs	r4, r3, #1
 800563e:	b2e3      	uxtb	r3, r4
 8005640:	2b03      	cmp	r3, #3
 8005642:	d200      	bcs.n	8005646 <PE_SVDM_CheckIdentity+0x1e>
 8005644:	e0b5      	b.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005646:	000b      	movs	r3, r1
 8005648:	7819      	ldrb	r1, [r3, #0]
 800564a:	785d      	ldrb	r5, [r3, #1]
 800564c:	022d      	lsls	r5, r5, #8
 800564e:	1949      	adds	r1, r1, r5
 8005650:	789d      	ldrb	r5, [r3, #2]
 8005652:	042d      	lsls	r5, r5, #16
 8005654:	1949      	adds	r1, r1, r5
 8005656:	78dd      	ldrb	r5, [r3, #3]
 8005658:	062d      	lsls	r5, r5, #24
 800565a:	194d      	adds	r5, r1, r5
 800565c:	6015      	str	r5, [r2, #0]
 800565e:	7919      	ldrb	r1, [r3, #4]
 8005660:	795e      	ldrb	r6, [r3, #5]
 8005662:	0236      	lsls	r6, r6, #8
 8005664:	1989      	adds	r1, r1, r6
 8005666:	799e      	ldrb	r6, [r3, #6]
 8005668:	0436      	lsls	r6, r6, #16
 800566a:	1989      	adds	r1, r1, r6
 800566c:	79de      	ldrb	r6, [r3, #7]
 800566e:	0636      	lsls	r6, r6, #24
 8005670:	1989      	adds	r1, r1, r6
 8005672:	6051      	str	r1, [r2, #4]
 8005674:	2108      	movs	r1, #8
 8005676:	7a1e      	ldrb	r6, [r3, #8]
 8005678:	7a5f      	ldrb	r7, [r3, #9]
 800567a:	023f      	lsls	r7, r7, #8
 800567c:	19f6      	adds	r6, r6, r7
 800567e:	7a9f      	ldrb	r7, [r3, #10]
 8005680:	043f      	lsls	r7, r7, #16
 8005682:	19f6      	adds	r6, r6, r7
 8005684:	7adf      	ldrb	r7, [r3, #11]
 8005686:	063f      	lsls	r7, r7, #24
 8005688:	19f6      	adds	r6, r6, r7
 800568a:	6096      	str	r6, [r2, #8]
 800568c:	1ee4      	subs	r4, r4, #3
 800568e:	2620      	movs	r6, #32
 8005690:	5d97      	ldrb	r7, [r2, r6]
 8005692:	26e0      	movs	r6, #224	@ 0xe0
 8005694:	403e      	ands	r6, r7
 8005696:	466f      	mov	r7, sp
 8005698:	703e      	strb	r6, [r7, #0]
 800569a:	466e      	mov	r6, sp
 800569c:	7836      	ldrb	r6, [r6, #0]
 800569e:	2720      	movs	r7, #32
 80056a0:	55d6      	strb	r6, [r2, r7]
 80056a2:	0626      	lsls	r6, r4, #24
 80056a4:	d022      	beq.n	80056ec <PE_SVDM_CheckIdentity+0xc4>
 80056a6:	1e66      	subs	r6, r4, #1
 80056a8:	466f      	mov	r7, sp
 80056aa:	707e      	strb	r6, [r7, #1]
 80056ac:	00ae      	lsls	r6, r5, #2
 80056ae:	0f76      	lsrs	r6, r6, #29
 80056b0:	2e05      	cmp	r6, #5
 80056b2:	d827      	bhi.n	8005704 <PE_SVDM_CheckIdentity+0xdc>
 80056b4:	a701      	add	r7, pc, #4	@ (adr r7, 80056bc <PE_SVDM_CheckIdentity+0x94>)
 80056b6:	5dbf      	ldrb	r7, [r7, r6]
 80056b8:	44bf      	add	pc, r7
 80056ba:	bf00      	nop
 80056bc:	5a060632 	.word	0x5a060632
 80056c0:	a680      	.short	0xa680
 80056c2:	210c      	movs	r1, #12
 80056c4:	466c      	mov	r4, sp
 80056c6:	7824      	ldrb	r4, [r4, #0]
 80056c8:	2608      	movs	r6, #8
 80056ca:	4326      	orrs	r6, r4
 80056cc:	2420      	movs	r4, #32
 80056ce:	5516      	strb	r6, [r2, r4]
 80056d0:	7b1c      	ldrb	r4, [r3, #12]
 80056d2:	7b5e      	ldrb	r6, [r3, #13]
 80056d4:	0236      	lsls	r6, r6, #8
 80056d6:	19a4      	adds	r4, r4, r6
 80056d8:	7b9e      	ldrb	r6, [r3, #14]
 80056da:	0436      	lsls	r6, r6, #16
 80056dc:	19a4      	adds	r4, r4, r6
 80056de:	7bde      	ldrb	r6, [r3, #15]
 80056e0:	0636      	lsls	r6, r6, #24
 80056e2:	19a4      	adds	r4, r4, r6
 80056e4:	6194      	str	r4, [r2, #24]
 80056e6:	466c      	mov	r4, sp
 80056e8:	7864      	ldrb	r4, [r4, #1]
 80056ea:	0026      	movs	r6, r4
 80056ec:	d062      	beq.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 80056ee:	9e01      	ldr	r6, [sp, #4]
 80056f0:	8eb6      	ldrh	r6, [r6, #52]	@ 0x34
 80056f2:	0636      	lsls	r6, r6, #24
 80056f4:	0fb6      	lsrs	r6, r6, #30
 80056f6:	2e02      	cmp	r6, #2
 80056f8:	d35c      	bcc.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 80056fa:	01ad      	lsls	r5, r5, #6
 80056fc:	0f6d      	lsrs	r5, r5, #29
 80056fe:	d059      	beq.n	80057b4 <PE_SVDM_CheckIdentity+0x18c>
 8005700:	1e6d      	subs	r5, r5, #1
 8005702:	2d02      	cmp	r5, #2
 8005704:	d855      	bhi.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005706:	2520      	movs	r5, #32
 8005708:	5d55      	ldrb	r5, [r2, r5]
 800570a:	08ef      	lsrs	r7, r5, #3
 800570c:	07ff      	lsls	r7, r7, #31
 800570e:	d53b      	bpl.n	8005788 <PE_SVDM_CheckIdentity+0x160>
 8005710:	3108      	adds	r1, #8
 8005712:	1e64      	subs	r4, r4, #1
 8005714:	e039      	b.n	800578a <PE_SVDM_CheckIdentity+0x162>
 8005716:	210c      	movs	r1, #12
 8005718:	466c      	mov	r4, sp
 800571a:	7824      	ldrb	r4, [r4, #0]
 800571c:	2601      	movs	r6, #1
 800571e:	4326      	orrs	r6, r4
 8005720:	2420      	movs	r4, #32
 8005722:	5516      	strb	r6, [r2, r4]
 8005724:	7b1c      	ldrb	r4, [r3, #12]
 8005726:	7b5e      	ldrb	r6, [r3, #13]
 8005728:	0236      	lsls	r6, r6, #8
 800572a:	19a4      	adds	r4, r4, r6
 800572c:	7b9e      	ldrb	r6, [r3, #14]
 800572e:	0436      	lsls	r6, r6, #16
 8005730:	19a4      	adds	r4, r4, r6
 8005732:	7bde      	ldrb	r6, [r3, #15]
 8005734:	0636      	lsls	r6, r6, #24
 8005736:	19a4      	adds	r4, r4, r6
 8005738:	60d4      	str	r4, [r2, #12]
 800573a:	e7d4      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 800573c:	210c      	movs	r1, #12
 800573e:	466c      	mov	r4, sp
 8005740:	7824      	ldrb	r4, [r4, #0]
 8005742:	2604      	movs	r6, #4
 8005744:	4326      	orrs	r6, r4
 8005746:	2420      	movs	r4, #32
 8005748:	5516      	strb	r6, [r2, r4]
 800574a:	7b1c      	ldrb	r4, [r3, #12]
 800574c:	7b5e      	ldrb	r6, [r3, #13]
 800574e:	0236      	lsls	r6, r6, #8
 8005750:	19a4      	adds	r4, r4, r6
 8005752:	7b9e      	ldrb	r6, [r3, #14]
 8005754:	0436      	lsls	r6, r6, #16
 8005756:	19a4      	adds	r4, r4, r6
 8005758:	7bde      	ldrb	r6, [r3, #15]
 800575a:	0636      	lsls	r6, r6, #24
 800575c:	19a4      	adds	r4, r4, r6
 800575e:	6154      	str	r4, [r2, #20]
 8005760:	e7c1      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 8005762:	210c      	movs	r1, #12
 8005764:	466c      	mov	r4, sp
 8005766:	7824      	ldrb	r4, [r4, #0]
 8005768:	2602      	movs	r6, #2
 800576a:	4326      	orrs	r6, r4
 800576c:	2420      	movs	r4, #32
 800576e:	5516      	strb	r6, [r2, r4]
 8005770:	7b1c      	ldrb	r4, [r3, #12]
 8005772:	7b5e      	ldrb	r6, [r3, #13]
 8005774:	0236      	lsls	r6, r6, #8
 8005776:	19a4      	adds	r4, r4, r6
 8005778:	7b9e      	ldrb	r6, [r3, #14]
 800577a:	0436      	lsls	r6, r6, #16
 800577c:	19a4      	adds	r4, r4, r6
 800577e:	7bde      	ldrb	r6, [r3, #15]
 8005780:	0636      	lsls	r6, r6, #24
 8005782:	19a4      	adds	r4, r4, r6
 8005784:	6114      	str	r4, [r2, #16]
 8005786:	e7ae      	b.n	80056e6 <PE_SVDM_CheckIdentity+0xbe>
 8005788:	1d09      	adds	r1, r1, #4
 800578a:	b2e4      	uxtb	r4, r4
 800578c:	2c01      	cmp	r4, #1
 800578e:	d110      	bne.n	80057b2 <PE_SVDM_CheckIdentity+0x18a>
 8005790:	2410      	movs	r4, #16
 8005792:	432c      	orrs	r4, r5
 8005794:	2520      	movs	r5, #32
 8005796:	5554      	strb	r4, [r2, r5]
 8005798:	1859      	adds	r1, r3, r1
 800579a:	780b      	ldrb	r3, [r1, #0]
 800579c:	784c      	ldrb	r4, [r1, #1]
 800579e:	0224      	lsls	r4, r4, #8
 80057a0:	191b      	adds	r3, r3, r4
 80057a2:	788c      	ldrb	r4, [r1, #2]
 80057a4:	0424      	lsls	r4, r4, #16
 80057a6:	191b      	adds	r3, r3, r4
 80057a8:	78c9      	ldrb	r1, [r1, #3]
 80057aa:	0609      	lsls	r1, r1, #24
 80057ac:	1859      	adds	r1, r3, r1
 80057ae:	61d1      	str	r1, [r2, #28]
 80057b0:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}
 80057b2:	2002      	movs	r0, #2
 80057b4:	bdf6      	pop	{r1, r2, r4, r5, r6, r7, pc}

080057b6 <PE_SVDM_CheckSVIDs>:
 80057b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057b8:	4b34      	ldr	r3, [pc, #208]	@ (800588c <.text_31>)
 80057ba:	0080      	lsls	r0, r0, #2
 80057bc:	5818      	ldr	r0, [r3, r0]
 80057be:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 80057c0:	0440      	lsls	r0, r0, #17
 80057c2:	0f40      	lsrs	r0, r0, #29
 80057c4:	1e46      	subs	r6, r0, #1
 80057c6:	b2f6      	uxtb	r6, r6
 80057c8:	2000      	movs	r0, #0
 80057ca:	2500      	movs	r5, #0
 80057cc:	7610      	strb	r0, [r2, #24]
 80057ce:	7650      	strb	r0, [r2, #25]
 80057d0:	000b      	movs	r3, r1
 80057d2:	0014      	movs	r4, r2
 80057d4:	0031      	movs	r1, r6
 80057d6:	5c1a      	ldrb	r2, [r3, r0]
 80057d8:	1c5e      	adds	r6, r3, #1
 80057da:	5c36      	ldrb	r6, [r6, r0]
 80057dc:	0236      	lsls	r6, r6, #8
 80057de:	1992      	adds	r2, r2, r6
 80057e0:	7e26      	ldrb	r6, [r4, #24]
 80057e2:	0076      	lsls	r6, r6, #1
 80057e4:	53a2      	strh	r2, [r4, r6]
 80057e6:	7e26      	ldrb	r6, [r4, #24]
 80057e8:	2201      	movs	r2, #1
 80057ea:	0077      	lsls	r7, r6, #1
 80057ec:	5be7      	ldrh	r7, [r4, r7]
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	d002      	beq.n	80057f8 <PE_SVDM_CheckSVIDs+0x42>
 80057f2:	1c76      	adds	r6, r6, #1
 80057f4:	7626      	strb	r6, [r4, #24]
 80057f6:	e001      	b.n	80057fc <PE_SVDM_CheckSVIDs+0x46>
 80057f8:	2501      	movs	r5, #1
 80057fa:	7662      	strb	r2, [r4, #25]
 80057fc:	1c80      	adds	r0, r0, #2
 80057fe:	b2c0      	uxtb	r0, r0
 8005800:	5c1e      	ldrb	r6, [r3, r0]
 8005802:	1c5f      	adds	r7, r3, #1
 8005804:	5c3f      	ldrb	r7, [r7, r0]
 8005806:	023f      	lsls	r7, r7, #8
 8005808:	19f6      	adds	r6, r6, r7
 800580a:	7e27      	ldrb	r7, [r4, #24]
 800580c:	007f      	lsls	r7, r7, #1
 800580e:	53e6      	strh	r6, [r4, r7]
 8005810:	7e26      	ldrb	r6, [r4, #24]
 8005812:	0077      	lsls	r7, r6, #1
 8005814:	5be7      	ldrh	r7, [r4, r7]
 8005816:	2f00      	cmp	r7, #0
 8005818:	d002      	beq.n	8005820 <PE_SVDM_CheckSVIDs+0x6a>
 800581a:	1c76      	adds	r6, r6, #1
 800581c:	7626      	strb	r6, [r4, #24]
 800581e:	e001      	b.n	8005824 <PE_SVDM_CheckSVIDs+0x6e>
 8005820:	2501      	movs	r5, #1
 8005822:	7662      	strb	r2, [r4, #25]
 8005824:	1c80      	adds	r0, r0, #2
 8005826:	b2c0      	uxtb	r0, r0
 8005828:	008a      	lsls	r2, r1, #2
 800582a:	4290      	cmp	r0, r2
 800582c:	d201      	bcs.n	8005832 <PE_SVDM_CheckSVIDs+0x7c>
 800582e:	002a      	movs	r2, r5
 8005830:	d0d1      	beq.n	80057d6 <PE_SVDM_CheckSVIDs+0x20>
 8005832:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005834 <.text_27>:
 8005834:	ffff7fff 	.word	0xffff7fff

08005838 <PE_SVDM_CheckModes>:
 8005838:	b530      	push	{r4, r5, lr}
 800583a:	4c14      	ldr	r4, [pc, #80]	@ (800588c <.text_31>)
 800583c:	0080      	lsls	r0, r0, #2
 800583e:	5820      	ldr	r0, [r4, r0]
 8005840:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8005842:	0440      	lsls	r0, r0, #17
 8005844:	0f40      	lsrs	r0, r0, #29
 8005846:	1e40      	subs	r0, r0, #1
 8005848:	b2c0      	uxtb	r0, r0
 800584a:	2400      	movs	r4, #0
 800584c:	8399      	strh	r1, [r3, #28]
 800584e:	601c      	str	r4, [r3, #0]
 8005850:	5d11      	ldrb	r1, [r2, r4]
 8005852:	1915      	adds	r5, r2, r4
 8005854:	786d      	ldrb	r5, [r5, #1]
 8005856:	022d      	lsls	r5, r5, #8
 8005858:	1949      	adds	r1, r1, r5
 800585a:	1915      	adds	r5, r2, r4
 800585c:	78ad      	ldrb	r5, [r5, #2]
 800585e:	042d      	lsls	r5, r5, #16
 8005860:	1949      	adds	r1, r1, r5
 8005862:	1915      	adds	r5, r2, r4
 8005864:	78ed      	ldrb	r5, [r5, #3]
 8005866:	062d      	lsls	r5, r5, #24
 8005868:	1949      	adds	r1, r1, r5
 800586a:	681d      	ldr	r5, [r3, #0]
 800586c:	00ad      	lsls	r5, r5, #2
 800586e:	195d      	adds	r5, r3, r5
 8005870:	6069      	str	r1, [r5, #4]
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	1c49      	adds	r1, r1, #1
 8005876:	6019      	str	r1, [r3, #0]
 8005878:	1d24      	adds	r4, r4, #4
 800587a:	b2e4      	uxtb	r4, r4
 800587c:	0081      	lsls	r1, r0, #2
 800587e:	428c      	cmp	r4, r1
 8005880:	d3e6      	bcc.n	8005850 <PE_SVDM_CheckModes+0x18>
 8005882:	bd30      	pop	{r4, r5, pc}

08005884 <.text_29>:
 8005884:	000004ac 	.word	0x000004ac

08005888 <.text_30>:
 8005888:	00000494 	.word	0x00000494

0800588c <.text_31>:
 800588c:	200002ec 	.word	0x200002ec

08005890 <USBPD_PRL_TimerCounter>:
 8005890:	4954      	ldr	r1, [pc, #336]	@ (80059e4 <.text_15>)
 8005892:	0080      	lsls	r0, r0, #2
 8005894:	1808      	adds	r0, r1, r0
 8005896:	6801      	ldr	r1, [r0, #0]
 8005898:	790a      	ldrb	r2, [r1, #4]
 800589a:	2a00      	cmp	r2, #0
 800589c:	d002      	beq.n	80058a4 <USBPD_PRL_TimerCounter+0x14>
 800589e:	790a      	ldrb	r2, [r1, #4]
 80058a0:	1e52      	subs	r2, r2, #1
 80058a2:	710a      	strb	r2, [r1, #4]
 80058a4:	6800      	ldr	r0, [r0, #0]
 80058a6:	7841      	ldrb	r1, [r0, #1]
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d001      	beq.n	80058b0 <USBPD_PRL_TimerCounter+0x20>
 80058ac:	1e49      	subs	r1, r1, #1
 80058ae:	7041      	strb	r1, [r0, #1]
 80058b0:	4770      	bx	lr
	...

080058b4 <USBPD_PRL_Init>:
 80058b4:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 80058b6:	b081      	sub	sp, #4
 80058b8:	0014      	movs	r4, r2
 80058ba:	001d      	movs	r5, r3
 80058bc:	2616      	movs	r6, #22
 80058be:	209c      	movs	r0, #156	@ 0x9c
 80058c0:	0040      	lsls	r0, r0, #1
 80058c2:	f018 fbbf 	bl	801e044 <malloc>
 80058c6:	0007      	movs	r7, r0
 80058c8:	d01e      	beq.n	8005908 <USBPD_PRL_Init+0x54>
 80058ca:	9e02      	ldr	r6, [sp, #8]
 80058cc:	219c      	movs	r1, #156	@ 0x9c
 80058ce:	0049      	lsls	r1, r1, #1
 80058d0:	f018 fcc5 	bl	801e25e <__aeabi_memclr>
 80058d4:	220f      	movs	r2, #15
 80058d6:	2103      	movs	r1, #3
 80058d8:	1db8      	adds	r0, r7, #6
 80058da:	f018 fcb9 	bl	801e250 <__aeabi_memset>
 80058de:	4841      	ldr	r0, [pc, #260]	@ (80059e4 <.text_15>)
 80058e0:	4669      	mov	r1, sp
 80058e2:	7909      	ldrb	r1, [r1, #4]
 80058e4:	0089      	lsls	r1, r1, #2
 80058e6:	5047      	str	r7, [r0, r1]
 80058e8:	62bc      	str	r4, [r7, #40]	@ 0x28
 80058ea:	62fd      	str	r5, [r7, #44]	@ 0x2c
 80058ec:	2001      	movs	r0, #1
 80058ee:	9000      	str	r0, [sp, #0]
 80058f0:	6870      	ldr	r0, [r6, #4]
 80058f2:	0743      	lsls	r3, r0, #29
 80058f4:	0fdb      	lsrs	r3, r3, #31
 80058f6:	003a      	movs	r2, r7
 80058f8:	3230      	adds	r2, #48	@ 0x30
 80058fa:	bf00      	nop
 80058fc:	a103      	add	r1, pc, #12	@ (adr r1, 800590c <USBPD_PRL_Init::PRL_PhyCallbacks>)
 80058fe:	4668      	mov	r0, sp
 8005900:	7900      	ldrb	r0, [r0, #4]
 8005902:	f00f fe6b 	bl	80155dc <USBPD_PHY_Init>
 8005906:	0006      	movs	r6, r0
 8005908:	0030      	movs	r0, r6
 800590a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0800590c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 800590c:	5f45 0800 629d 0800 62f7 0800 6311 0800     E_...b...b...c..
 800591c:	6319 0800 5a05 0800                         .c...Z..

08005924 <USBPD_PRL_GetMemoryConsumption>:
 8005924:	20ea      	movs	r0, #234	@ 0xea
 8005926:	0080      	lsls	r0, r0, #2
 8005928:	4770      	bx	lr

0800592a <USBPD_PRL_SetHeader>:
 800592a:	b530      	push	{r4, r5, lr}
 800592c:	4c2d      	ldr	r4, [pc, #180]	@ (80059e4 <.text_15>)
 800592e:	0080      	lsls	r0, r0, #2
 8005930:	5820      	ldr	r0, [r4, r0]
 8005932:	8a44      	ldrh	r4, [r0, #18]
 8005934:	4d2c      	ldr	r5, [pc, #176]	@ (80059e8 <.text_16>)
 8005936:	4025      	ands	r5, r4
 8005938:	0209      	lsls	r1, r1, #8
 800593a:	2480      	movs	r4, #128	@ 0x80
 800593c:	0064      	lsls	r4, r4, #1
 800593e:	4021      	ands	r1, r4
 8005940:	4329      	orrs	r1, r5
 8005942:	8241      	strh	r1, [r0, #18]
 8005944:	4c29      	ldr	r4, [pc, #164]	@ (80059ec <.text_17>)
 8005946:	400c      	ands	r4, r1
 8005948:	0151      	lsls	r1, r2, #5
 800594a:	2220      	movs	r2, #32
 800594c:	4011      	ands	r1, r2
 800594e:	4321      	orrs	r1, r4
 8005950:	8241      	strh	r1, [r0, #18]
 8005952:	4a27      	ldr	r2, [pc, #156]	@ (80059f0 <.text_18>)
 8005954:	400a      	ands	r2, r1
 8005956:	0199      	lsls	r1, r3, #6
 8005958:	23c0      	movs	r3, #192	@ 0xc0
 800595a:	400b      	ands	r3, r1
 800595c:	4313      	orrs	r3, r2
 800595e:	8243      	strh	r3, [r0, #18]
 8005960:	bd30      	pop	{r4, r5, pc}

08005962 <USBPD_PRL_SetHeaderPowerRole>:
 8005962:	4a20      	ldr	r2, [pc, #128]	@ (80059e4 <.text_15>)
 8005964:	0080      	lsls	r0, r0, #2
 8005966:	5810      	ldr	r0, [r2, r0]
 8005968:	8a42      	ldrh	r2, [r0, #18]
 800596a:	4b1f      	ldr	r3, [pc, #124]	@ (80059e8 <.text_16>)
 800596c:	4013      	ands	r3, r2
 800596e:	0209      	lsls	r1, r1, #8
 8005970:	2280      	movs	r2, #128	@ 0x80
 8005972:	0052      	lsls	r2, r2, #1
 8005974:	e007      	b.n	8005986 <.text_10>

08005976 <USBPD_PRL_SetHeaderDataRole>:
 8005976:	4a1b      	ldr	r2, [pc, #108]	@ (80059e4 <.text_15>)
 8005978:	0080      	lsls	r0, r0, #2
 800597a:	5810      	ldr	r0, [r2, r0]
 800597c:	8a42      	ldrh	r2, [r0, #18]
 800597e:	4b1b      	ldr	r3, [pc, #108]	@ (80059ec <.text_17>)
 8005980:	4013      	ands	r3, r2
 8005982:	0149      	lsls	r1, r1, #5
 8005984:	2220      	movs	r2, #32

08005986 <.text_10>:
 8005986:	4011      	ands	r1, r2
 8005988:	4319      	orrs	r1, r3
 800598a:	8241      	strh	r1, [r0, #18]
 800598c:	4770      	bx	lr

0800598e <USBPD_PRL_SetHeaderSpecification>:
 800598e:	4a15      	ldr	r2, [pc, #84]	@ (80059e4 <.text_15>)
 8005990:	0080      	lsls	r0, r0, #2
 8005992:	5810      	ldr	r0, [r2, r0]
 8005994:	8a42      	ldrh	r2, [r0, #18]
 8005996:	4b16      	ldr	r3, [pc, #88]	@ (80059f0 <.text_18>)
 8005998:	4013      	ands	r3, r2
 800599a:	0189      	lsls	r1, r1, #6
 800599c:	22c0      	movs	r2, #192	@ 0xc0
 800599e:	400a      	ands	r2, r1
 80059a0:	431a      	orrs	r2, r3
 80059a2:	8242      	strh	r2, [r0, #18]
 80059a4:	4770      	bx	lr

080059a6 <USBPD_PRL_CBL_SetHeaderSpecification>:
 80059a6:	4a0f      	ldr	r2, [pc, #60]	@ (80059e4 <.text_15>)
 80059a8:	0080      	lsls	r0, r0, #2
 80059aa:	5810      	ldr	r0, [r2, r0]
 80059ac:	018a      	lsls	r2, r1, #6
 80059ae:	21c0      	movs	r1, #192	@ 0xc0
 80059b0:	4011      	ands	r1, r2
 80059b2:	4a0f      	ldr	r2, [pc, #60]	@ (80059f0 <.text_18>)
 80059b4:	8a83      	ldrh	r3, [r0, #20]
 80059b6:	4013      	ands	r3, r2
 80059b8:	430b      	orrs	r3, r1
 80059ba:	8283      	strh	r3, [r0, #20]
 80059bc:	8ac3      	ldrh	r3, [r0, #22]
 80059be:	401a      	ands	r2, r3
 80059c0:	4311      	orrs	r1, r2
 80059c2:	82c1      	strh	r1, [r0, #22]
 80059c4:	4770      	bx	lr

080059c6 <USBPD_PRL_SRCSetSinkNG>:
 80059c6:	b580      	push	{r7, lr}
 80059c8:	f00f fefd 	bl	80157c6 <USBPD_PHY_SetResistor_SinkTxNG>
 80059cc:	bd01      	pop	{r0, pc}

080059ce <USBPD_PRL_SRCReleaseSinkNG>:
 80059ce:	b510      	push	{r4, lr}
 80059d0:	0004      	movs	r4, r0
 80059d2:	f00f ff07 	bl	80157e4 <USBPD_PHY_SetResistor_SinkTxOK>
 80059d6:	2000      	movs	r0, #0
 80059d8:	4902      	ldr	r1, [pc, #8]	@ (80059e4 <.text_15>)
 80059da:	00a2      	lsls	r2, r4, #2
 80059dc:	5889      	ldr	r1, [r1, r2]
 80059de:	7148      	strb	r0, [r1, #5]
 80059e0:	bd10      	pop	{r4, pc}
	...

080059e4 <.text_15>:
 80059e4:	200002f8 	.word	0x200002f8

080059e8 <.text_16>:
 80059e8:	0000feff 	.word	0x0000feff

080059ec <.text_17>:
 80059ec:	0000ffdf 	.word	0x0000ffdf

080059f0 <.text_18>:
 80059f0:	0000ff3f 	.word	0x0000ff3f

080059f4 <USBPD_PRL_IsResistor_SinkTxOK>:
 80059f4:	b580      	push	{r7, lr}
 80059f6:	f00f ff1b 	bl	8015830 <USBPD_PHY_IsResistor_SinkTxOk>
 80059fa:	bd02      	pop	{r1, pc}

080059fc <USBPD_PRL_FastRoleSwapSignalling>:
 80059fc:	b580      	push	{r7, lr}
 80059fe:	f00f ff27 	bl	8015850 <USBPD_PHY_FastRoleSwapSignalling>
 8005a02:	bd01      	pop	{r0, pc}

08005a04 <PRL_FastRoleSwapReception>:
 8005a04:	b580      	push	{r7, lr}
 8005a06:	f7fb fa4d 	bl	8000ea4 <PE_PRL_FastRoleSwapReception>
 8005a0a:	bd01      	pop	{r0, pc}

08005a0c <USBPD_PRL_SOPCapability>:
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	f00f fef9 	bl	8015804 <USBPD_PHY_SOPSupported>
 8005a12:	bd01      	pop	{r0, pc}

08005a14 <USBPD_PRL_SendMessage>:
 8005a14:	b5f5      	push	{r0, r2, r4, r5, r6, r7, lr}
 8005a16:	b087      	sub	sp, #28
 8005a18:	2503      	movs	r5, #3
 8005a1a:	4668      	mov	r0, sp
 8005a1c:	7f00      	ldrb	r0, [r0, #28]
 8005a1e:	9005      	str	r0, [sp, #20]
 8005a20:	48ca      	ldr	r0, [pc, #808]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005a22:	9a05      	ldr	r2, [sp, #20]
 8005a24:	0092      	lsls	r2, r2, #2
 8005a26:	1880      	adds	r0, r0, r2
 8005a28:	9000      	str	r0, [sp, #0]
 8005a2a:	6800      	ldr	r0, [r0, #0]
 8005a2c:	0004      	movs	r4, r0
 8005a2e:	7962      	ldrb	r2, [r4, #5]
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	d004      	beq.n	8005a3e <USBPD_PRL_SendMessage+0x2a>
 8005a34:	7a62      	ldrb	r2, [r4, #9]
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	d101      	bne.n	8005a3e <USBPD_PRL_SendMessage+0x2a>
 8005a3a:	220f      	movs	r2, #15
 8005a3c:	7142      	strb	r2, [r0, #5]
 8005a3e:	466a      	mov	r2, sp
 8005a40:	7111      	strb	r1, [r2, #4]
 8005a42:	4669      	mov	r1, sp
 8005a44:	7909      	ldrb	r1, [r1, #4]
 8005a46:	9104      	str	r1, [sp, #16]
 8005a48:	1861      	adds	r1, r4, r1
 8005a4a:	9a05      	ldr	r2, [sp, #20]
 8005a4c:	0052      	lsls	r2, r2, #1
 8005a4e:	1c52      	adds	r2, r2, #1
 8005a50:	466e      	mov	r6, sp
 8005a52:	7172      	strb	r2, [r6, #5]
 8005a54:	9a04      	ldr	r2, [sp, #16]
 8005a56:	0052      	lsls	r2, r2, #1
 8005a58:	9203      	str	r2, [sp, #12]
 8005a5a:	2600      	movs	r6, #0
 8005a5c:	9302      	str	r3, [sp, #8]
 8005a5e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005a60:	7963      	ldrb	r3, [r4, #5]
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d900      	bls.n	8005a68 <USBPD_PRL_SendMessage+0x54>
 8005a66:	e1f6      	b.n	8005e56 <USBPD_PRL_SendMessage+0x442>
 8005a68:	a701      	add	r7, pc, #4	@ (adr r7, 8005a70 <USBPD_PRL_SendMessage+0x5c>)
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	5aff      	ldrh	r7, [r7, r3]
 8005a6e:	44bf      	add	pc, r7
 8005a70:	00480020 	.word	0x00480020
 8005a74:	03e4005e 	.word	0x03e4005e
 8005a78:	00a8006a 	.word	0x00a8006a
 8005a7c:	015a0086 	.word	0x015a0086
 8005a80:	03e403e4 	.word	0x03e403e4
 8005a84:	030802de 	.word	0x030802de
 8005a88:	03560334 	.word	0x03560334
 8005a8c:	03de03e4 	.word	0x03de03e4
 8005a90:	03a6      	.short	0x03a6
 8005a92:	f3ef 8710 	mrs	r7, PRIMASK
 8005a96:	b672      	cpsid	i
 8005a98:	4668      	mov	r0, sp
 8005a9a:	7f00      	ldrb	r0, [r0, #28]
 8005a9c:	f7fb f8b4 	bl	8000c08 <PE_PRL_Control_RxEvent>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d105      	bne.n	8005ab0 <USBPD_PRL_SendMessage+0x9c>
 8005aa4:	7aa0      	ldrb	r0, [r4, #10]
 8005aa6:	2800      	cmp	r0, #0
 8005aa8:	d102      	bne.n	8005ab0 <USBPD_PRL_SendMessage+0x9c>
 8005aaa:	20ff      	movs	r0, #255	@ 0xff
 8005aac:	7260      	strb	r0, [r4, #9]
 8005aae:	e000      	b.n	8005ab2 <USBPD_PRL_SendMessage+0x9e>
 8005ab0:	7266      	strb	r6, [r4, #9]
 8005ab2:	f387 8810 	msr	PRIMASK, r7
 8005ab6:	2006      	movs	r0, #6
 8005ab8:	e1a0      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005aba:	4668      	mov	r0, sp
 8005abc:	7f00      	ldrb	r0, [r0, #28]
 8005abe:	f00f fe82 	bl	80157c6 <USBPD_PHY_SetResistor_SinkTxNG>
 8005ac2:	2002      	movs	r0, #2
 8005ac4:	9900      	ldr	r1, [sp, #0]
 8005ac6:	6809      	ldr	r1, [r1, #0]
 8005ac8:	7148      	strb	r0, [r1, #5]
 8005aca:	2013      	movs	r0, #19
 8005acc:	7060      	strb	r0, [r4, #1]
 8005ace:	e1c4      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005ad0:	2a01      	cmp	r2, #1
 8005ad2:	d10f      	bne.n	8005af4 <USBPD_PRL_SendMessage+0xe0>
 8005ad4:	7861      	ldrb	r1, [r4, #1]
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d10a      	bne.n	8005af0 <USBPD_PRL_SendMessage+0xdc>
 8005ada:	e01c      	b.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005adc:	2a02      	cmp	r2, #2
 8005ade:	d109      	bne.n	8005af4 <USBPD_PRL_SendMessage+0xe0>
 8005ae0:	4668      	mov	r0, sp
 8005ae2:	7f00      	ldrb	r0, [r0, #28]
 8005ae4:	f00f fea4 	bl	8015830 <USBPD_PHY_IsResistor_SinkTxOk>
 8005ae8:	2801      	cmp	r0, #1
 8005aea:	d101      	bne.n	8005af0 <USBPD_PRL_SendMessage+0xdc>
 8005aec:	2005      	movs	r0, #5
 8005aee:	e185      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005af0:	2509      	movs	r5, #9
 8005af2:	e1b2      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005af4:	2106      	movs	r1, #6
 8005af6:	e154      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005af8:	9903      	ldr	r1, [sp, #12]
 8005afa:	1861      	adds	r1, r4, r1
 8005afc:	8a49      	ldrh	r1, [r1, #18]
 8005afe:	0609      	lsls	r1, r1, #24
 8005b00:	0f89      	lsrs	r1, r1, #30
 8005b02:	2902      	cmp	r1, #2
 8005b04:	d107      	bne.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005b06:	2a01      	cmp	r2, #1
 8005b08:	d101      	bne.n	8005b0e <USBPD_PRL_SendMessage+0xfa>
 8005b0a:	7142      	strb	r2, [r0, #5]
 8005b0c:	e1a5      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005b0e:	2a02      	cmp	r2, #2
 8005b10:	d101      	bne.n	8005b16 <USBPD_PRL_SendMessage+0x102>
 8005b12:	2104      	movs	r1, #4
 8005b14:	e145      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005b16:	2105      	movs	r1, #5
 8005b18:	e143      	b.n	8005da2 <USBPD_PRL_SendMessage+0x38e>
 8005b1a:	9803      	ldr	r0, [sp, #12]
 8005b1c:	1820      	adds	r0, r4, r0
 8005b1e:	8a43      	ldrh	r3, [r0, #18]
 8005b20:	4acf      	ldr	r2, [pc, #828]	@ (8005e60 <.text_24>)
 8005b22:	401a      	ands	r2, r3
 8005b24:	ab08      	add	r3, sp, #32
 8005b26:	781b      	ldrb	r3, [r3, #0]
 8005b28:	06db      	lsls	r3, r3, #27
 8005b2a:	0edb      	lsrs	r3, r3, #27
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	8243      	strh	r3, [r0, #18]
 8005b30:	045a      	lsls	r2, r3, #17
 8005b32:	0c52      	lsrs	r2, r2, #17
 8005b34:	ab08      	add	r3, sp, #32
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	09db      	lsrs	r3, r3, #7
 8005b3a:	03db      	lsls	r3, r3, #15
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	8243      	strh	r3, [r0, #18]
 8005b40:	70a6      	strb	r6, [r4, #2]
 8005b42:	8a43      	ldrh	r3, [r0, #18]
 8005b44:	0bda      	lsrs	r2, r3, #15
 8005b46:	d023      	beq.n	8005b90 <USBPD_PRL_SendMessage+0x17c>
 8005b48:	9a02      	ldr	r2, [sp, #8]
 8005b4a:	7892      	ldrb	r2, [r2, #2]
 8005b4c:	9b02      	ldr	r3, [sp, #8]
 8005b4e:	78db      	ldrb	r3, [r3, #3]
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	18d2      	adds	r2, r2, r3
 8005b54:	83a2      	strh	r2, [r4, #28]
 8005b56:	8ba2      	ldrh	r2, [r4, #28]
 8005b58:	0a93      	lsrs	r3, r2, #10
 8005b5a:	07db      	lsls	r3, r3, #31
 8005b5c:	d40f      	bmi.n	8005b7e <USBPD_PRL_SendMessage+0x16a>
 8005b5e:	0ad2      	lsrs	r2, r2, #11
 8005b60:	0712      	lsls	r2, r2, #28
 8005b62:	d122      	bne.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b64:	466a      	mov	r2, sp
 8005b66:	8f12      	ldrh	r2, [r2, #56]	@ 0x38
 8005b68:	1f12      	subs	r2, r2, #4
 8005b6a:	8462      	strh	r2, [r4, #34]	@ 0x22
 8005b6c:	05d2      	lsls	r2, r2, #23
 8005b6e:	0dd2      	lsrs	r2, r2, #23
 8005b70:	8ba3      	ldrh	r3, [r4, #28]
 8005b72:	27fe      	movs	r7, #254	@ 0xfe
 8005b74:	023f      	lsls	r7, r7, #8
 8005b76:	401f      	ands	r7, r3
 8005b78:	433a      	orrs	r2, r7
 8005b7a:	83a2      	strh	r2, [r4, #28]
 8005b7c:	e015      	b.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b7e:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005b80:	8a42      	ldrh	r2, [r0, #18]
 8005b82:	4bb8      	ldr	r3, [pc, #736]	@ (8005e64 <.text_25>)
 8005b84:	4013      	ands	r3, r2
 8005b86:	2280      	movs	r2, #128	@ 0x80
 8005b88:	0152      	lsls	r2, r2, #5
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	8242      	strh	r2, [r0, #18]
 8005b8e:	e00c      	b.n	8005baa <USBPD_PRL_SendMessage+0x196>
 8005b90:	4ab4      	ldr	r2, [pc, #720]	@ (8005e64 <.text_25>)
 8005b92:	401a      	ands	r2, r3
 8005b94:	466b      	mov	r3, sp
 8005b96:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8005b98:	1e9b      	subs	r3, r3, #2
 8005b9a:	089b      	lsrs	r3, r3, #2
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	27e0      	movs	r7, #224	@ 0xe0
 8005ba0:	01ff      	lsls	r7, r7, #7
 8005ba2:	401f      	ands	r7, r3
 8005ba4:	4317      	orrs	r7, r2
 8005ba6:	8247      	strh	r7, [r0, #18]
 8005ba8:	8466      	strh	r6, [r4, #34]	@ 0x22
 8005baa:	aa08      	add	r2, sp, #32
 8005bac:	7812      	ldrb	r2, [r2, #0]
 8005bae:	2a0d      	cmp	r2, #13
 8005bb0:	d10a      	bne.n	8005bc8 <USBPD_PRL_SendMessage+0x1b4>
 8005bb2:	8a40      	ldrh	r0, [r0, #18]
 8005bb4:	22f0      	movs	r2, #240	@ 0xf0
 8005bb6:	0212      	lsls	r2, r2, #8
 8005bb8:	4002      	ands	r2, r0
 8005bba:	d105      	bne.n	8005bc8 <USBPD_PRL_SendMessage+0x1b4>
 8005bbc:	72ce      	strb	r6, [r1, #11]
 8005bbe:	220f      	movs	r2, #15
 8005bc0:	2103      	movs	r1, #3
 8005bc2:	1da0      	adds	r0, r4, #6
 8005bc4:	f018 fb44 	bl	801e250 <__aeabi_memset>
 8005bc8:	2007      	movs	r0, #7
 8005bca:	e117      	b.n	8005dfc <USBPD_PRL_SendMessage+0x3e8>
 8005bcc:	4669      	mov	r1, sp
 8005bce:	8f0c      	ldrh	r4, [r1, #56]	@ 0x38
 8005bd0:	9903      	ldr	r1, [sp, #12]
 8005bd2:	1841      	adds	r1, r0, r1
 8005bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005bd6:	466b      	mov	r3, sp
 8005bd8:	7f1b      	ldrb	r3, [r3, #28]
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	58d2      	ldr	r2, [r2, r3]
 8005bde:	466b      	mov	r3, sp
 8005be0:	791b      	ldrb	r3, [r3, #4]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	18d2      	adds	r2, r2, r3
 8005be6:	8a52      	ldrh	r2, [r2, #18]
 8005be8:	0bd3      	lsrs	r3, r2, #15
 8005bea:	d074      	beq.n	8005cd6 <USBPD_PRL_SendMessage+0x2c2>
 8005bec:	8b83      	ldrh	r3, [r0, #28]
 8005bee:	0a9b      	lsrs	r3, r3, #10
 8005bf0:	07db      	lsls	r3, r3, #31
 8005bf2:	d465      	bmi.n	8005cc0 <USBPD_PRL_SendMessage+0x2ac>
 8005bf4:	4b55      	ldr	r3, [pc, #340]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005bf6:	466f      	mov	r7, sp
 8005bf8:	7f3f      	ldrb	r7, [r7, #28]
 8005bfa:	00bf      	lsls	r7, r7, #2
 8005bfc:	59db      	ldr	r3, [r3, r7]
 8005bfe:	8b9b      	ldrh	r3, [r3, #28]
 8005c00:	8c47      	ldrh	r7, [r0, #34]	@ 0x22
 8005c02:	2f1b      	cmp	r7, #27
 8005c04:	d30a      	bcc.n	8005c1c <USBPD_PRL_SendMessage+0x208>
 8005c06:	0bdf      	lsrs	r7, r3, #15
 8005c08:	d008      	beq.n	8005c1c <USBPD_PRL_SendMessage+0x208>
 8005c0a:	23e0      	movs	r3, #224	@ 0xe0
 8005c0c:	01db      	lsls	r3, r3, #7
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	824b      	strh	r3, [r1, #18]
 8005c12:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 8005c14:	391a      	subs	r1, #26
 8005c16:	8441      	strh	r1, [r0, #34]	@ 0x22
 8005c18:	241e      	movs	r4, #30
 8005c1a:	e051      	b.n	8005cc0 <USBPD_PRL_SendMessage+0x2ac>
 8005c1c:	0ada      	lsrs	r2, r3, #11
 8005c1e:	0712      	lsls	r2, r2, #28
 8005c20:	d107      	bne.n	8005c32 <USBPD_PRL_SendMessage+0x21e>
 8005c22:	22fe      	movs	r2, #254	@ 0xfe
 8005c24:	0212      	lsls	r2, r2, #8
 8005c26:	401a      	ands	r2, r3
 8005c28:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c2a:	05db      	lsls	r3, r3, #23
 8005c2c:	0ddb      	lsrs	r3, r3, #23
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	8383      	strh	r3, [r0, #28]
 8005c32:	8a4b      	ldrh	r3, [r1, #18]
 8005c34:	4a8b      	ldr	r2, [pc, #556]	@ (8005e64 <.text_25>)
 8005c36:	401a      	ands	r2, r3
 8005c38:	824a      	strh	r2, [r1, #18]
 8005c3a:	8b83      	ldrh	r3, [r0, #28]
 8005c3c:	0bdb      	lsrs	r3, r3, #15
 8005c3e:	d03c      	beq.n	8005cba <USBPD_PRL_SendMessage+0x2a6>
 8005c40:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
 8005c42:	1c9b      	adds	r3, r3, #2
 8005c44:	089b      	lsrs	r3, r3, #2
 8005c46:	031b      	lsls	r3, r3, #12
 8005c48:	24e0      	movs	r4, #224	@ 0xe0
 8005c4a:	01e4      	lsls	r4, r4, #7
 8005c4c:	401c      	ands	r4, r3
 8005c4e:	4314      	orrs	r4, r2
 8005c50:	824c      	strh	r4, [r1, #18]
 8005c52:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8005c54:	1c80      	adds	r0, r0, #2
 8005c56:	0781      	lsls	r1, r0, #30
 8005c58:	0f89      	lsrs	r1, r1, #30
 8005c5a:	d025      	beq.n	8005ca8 <USBPD_PRL_SendMessage+0x294>
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	483b      	ldr	r0, [pc, #236]	@ (8005d4c <USBPD_PRL_SendMessage+0x338>)
 8005c60:	9b05      	ldr	r3, [sp, #20]
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	18c0      	adds	r0, r0, r3
 8005c66:	9000      	str	r0, [sp, #0]
 8005c68:	9802      	ldr	r0, [sp, #8]
 8005c6a:	9102      	str	r1, [sp, #8]
 8005c6c:	e004      	b.n	8005c78 <USBPD_PRL_SendMessage+0x264>
 8005c6e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8005c70:	1859      	adds	r1, r3, r1
 8005c72:	1841      	adds	r1, r0, r1
 8005c74:	710e      	strb	r6, [r1, #4]
 8005c76:	1c52      	adds	r2, r2, #1
 8005c78:	9900      	ldr	r1, [sp, #0]
 8005c7a:	680b      	ldr	r3, [r1, #0]
 8005c7c:	b2d1      	uxtb	r1, r2
 8005c7e:	2404      	movs	r4, #4
 8005c80:	9f02      	ldr	r7, [sp, #8]
 8005c82:	1be4      	subs	r4, r4, r7
 8005c84:	42a1      	cmp	r1, r4
 8005c86:	d3f2      	bcc.n	8005c6e <USBPD_PRL_SendMessage+0x25a>
 8005c88:	9002      	str	r0, [sp, #8]
 8005c8a:	0018      	movs	r0, r3
 8005c8c:	3012      	adds	r0, #18
 8005c8e:	9903      	ldr	r1, [sp, #12]
 8005c90:	1840      	adds	r0, r0, r1
 8005c92:	8801      	ldrh	r1, [r0, #0]
 8005c94:	4a73      	ldr	r2, [pc, #460]	@ (8005e64 <.text_25>)
 8005c96:	400a      	ands	r2, r1
 8005c98:	0b09      	lsrs	r1, r1, #12
 8005c9a:	1c49      	adds	r1, r1, #1
 8005c9c:	0309      	lsls	r1, r1, #12
 8005c9e:	23e0      	movs	r3, #224	@ 0xe0
 8005ca0:	01db      	lsls	r3, r3, #7
 8005ca2:	400b      	ands	r3, r1
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	8003      	strh	r3, [r0, #0]
 8005ca8:	9800      	ldr	r0, [sp, #0]
 8005caa:	6800      	ldr	r0, [r0, #0]
 8005cac:	3012      	adds	r0, #18
 8005cae:	9903      	ldr	r1, [sp, #12]
 8005cb0:	5a40      	ldrh	r0, [r0, r1]
 8005cb2:	0440      	lsls	r0, r0, #17
 8005cb4:	0f40      	lsrs	r0, r0, #29
 8005cb6:	0084      	lsls	r4, r0, #2
 8005cb8:	1ca4      	adds	r4, r4, #2
 8005cba:	9800      	ldr	r0, [sp, #0]
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	8446      	strh	r6, [r0, #34]	@ 0x22
 8005cc0:	9800      	ldr	r0, [sp, #0]
 8005cc2:	6800      	ldr	r0, [r0, #0]
 8005cc4:	8b80      	ldrh	r0, [r0, #28]
 8005cc6:	9902      	ldr	r1, [sp, #8]
 8005cc8:	7088      	strb	r0, [r1, #2]
 8005cca:	9800      	ldr	r0, [sp, #0]
 8005ccc:	6800      	ldr	r0, [r0, #0]
 8005cce:	8b80      	ldrh	r0, [r0, #28]
 8005cd0:	0a00      	lsrs	r0, r0, #8
 8005cd2:	9902      	ldr	r1, [sp, #8]
 8005cd4:	70c8      	strb	r0, [r1, #3]
 8005cd6:	9800      	ldr	r0, [sp, #0]
 8005cd8:	6802      	ldr	r2, [r0, #0]
 8005cda:	0010      	movs	r0, r2
 8005cdc:	3012      	adds	r0, #18
 8005cde:	9903      	ldr	r1, [sp, #12]
 8005ce0:	1840      	adds	r0, r0, r1
 8005ce2:	8803      	ldrh	r3, [r0, #0]
 8005ce4:	498c      	ldr	r1, [pc, #560]	@ (8005f18 <.text_30>)
 8005ce6:	4019      	ands	r1, r3
 8005ce8:	320b      	adds	r2, #11
 8005cea:	9b04      	ldr	r3, [sp, #16]
 8005cec:	5cd2      	ldrb	r2, [r2, r3]
 8005cee:	0253      	lsls	r3, r2, #9
 8005cf0:	22e0      	movs	r2, #224	@ 0xe0
 8005cf2:	0112      	lsls	r2, r2, #4
 8005cf4:	401a      	ands	r2, r3
 8005cf6:	430a      	orrs	r2, r1
 8005cf8:	8002      	strh	r2, [r0, #0]
 8005cfa:	9802      	ldr	r0, [sp, #8]
 8005cfc:	7002      	strb	r2, [r0, #0]
 8005cfe:	9800      	ldr	r0, [sp, #0]
 8005d00:	6800      	ldr	r0, [r0, #0]
 8005d02:	3012      	adds	r0, #18
 8005d04:	9903      	ldr	r1, [sp, #12]
 8005d06:	5a40      	ldrh	r0, [r0, r1]
 8005d08:	0a00      	lsrs	r0, r0, #8
 8005d0a:	9902      	ldr	r1, [sp, #8]
 8005d0c:	7048      	strb	r0, [r1, #1]
 8005d0e:	9800      	ldr	r0, [sp, #0]
 8005d10:	6800      	ldr	r0, [r0, #0]
 8005d12:	81c4      	strh	r4, [r0, #14]
 8005d14:	210a      	movs	r1, #10
 8005d16:	7141      	strb	r1, [r0, #5]
 8005d18:	2102      	movs	r1, #2
 8005d1a:	7401      	strb	r1, [r0, #16]
 8005d1c:	b2a0      	uxth	r0, r4
 8005d1e:	9000      	str	r0, [sp, #0]
 8005d20:	9b02      	ldr	r3, [sp, #8]
 8005d22:	4668      	mov	r0, sp
 8005d24:	7902      	ldrb	r2, [r0, #4]
 8005d26:	7f01      	ldrb	r1, [r0, #28]
 8005d28:	2002      	movs	r0, #2
 8005d2a:	4e7c      	ldr	r6, [pc, #496]	@ (8005f1c <.text_31>)
 8005d2c:	6836      	ldr	r6, [r6, #0]
 8005d2e:	47b0      	blx	r6
 8005d30:	497b      	ldr	r1, [pc, #492]	@ (8005f20 <.text_32>)
 8005d32:	4668      	mov	r0, sp
 8005d34:	7940      	ldrb	r0, [r0, #5]
 8005d36:	f011 f8f3 	bl	8016f20 <USBPD_TIM_Start>
 8005d3a:	b2a3      	uxth	r3, r4
 8005d3c:	9a02      	ldr	r2, [sp, #8]
 8005d3e:	4668      	mov	r0, sp
 8005d40:	7901      	ldrb	r1, [r0, #4]
 8005d42:	7f00      	ldrb	r0, [r0, #28]
 8005d44:	f00f fcf9 	bl	801573a <USBPD_PHY_SendMessage>
 8005d48:	e087      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005d4a:	bf00      	nop
 8005d4c:	200002f8 	.word	0x200002f8
 8005d50:	f3ef 8410 	mrs	r4, PRIMASK
 8005d54:	b672      	cpsid	i
 8005d56:	9800      	ldr	r0, [sp, #0]
 8005d58:	6800      	ldr	r0, [r0, #0]
 8005d5a:	7940      	ldrb	r0, [r0, #5]
 8005d5c:	280a      	cmp	r0, #10
 8005d5e:	d109      	bne.n	8005d74 <USBPD_PRL_SendMessage+0x360>
 8005d60:	4668      	mov	r0, sp
 8005d62:	7940      	ldrb	r0, [r0, #5]
 8005d64:	f011 f94a 	bl	8016ffc <USBPD_TIM_IsExpired>
 8005d68:	2801      	cmp	r0, #1
 8005d6a:	d103      	bne.n	8005d74 <USBPD_PRL_SendMessage+0x360>
 8005d6c:	200d      	movs	r0, #13
 8005d6e:	9900      	ldr	r1, [sp, #0]
 8005d70:	6809      	ldr	r1, [r1, #0]
 8005d72:	7148      	strb	r0, [r1, #5]
 8005d74:	f384 8810 	msr	PRIMASK, r4
 8005d78:	e06f      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005d7a:	7aca      	ldrb	r2, [r1, #11]
 8005d7c:	8b67      	ldrh	r7, [r4, #26]
 8005d7e:	053f      	lsls	r7, r7, #20
 8005d80:	0f7f      	lsrs	r7, r7, #29
 8005d82:	42ba      	cmp	r2, r7
 8005d84:	d10c      	bne.n	8005da0 <USBPD_PRL_SendMessage+0x38c>
 8005d86:	7ea3      	ldrb	r3, [r4, #26]
 8005d88:	06db      	lsls	r3, r3, #27
 8005d8a:	0edb      	lsrs	r3, r3, #27
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d107      	bne.n	8005da0 <USBPD_PRL_SendMessage+0x38c>
 8005d90:	1c52      	adds	r2, r2, #1
 8005d92:	0750      	lsls	r0, r2, #29
 8005d94:	0f40      	lsrs	r0, r0, #29
 8005d96:	72c8      	strb	r0, [r1, #11]
 8005d98:	9800      	ldr	r0, [sp, #0]
 8005d9a:	6800      	ldr	r0, [r0, #0]
 8005d9c:	7146      	strb	r6, [r0, #5]
 8005d9e:	e011      	b.n	8005dc4 <USBPD_PRL_SendMessage+0x3b0>
 8005da0:	210d      	movs	r1, #13
 8005da2:	7141      	strb	r1, [r0, #5]
 8005da4:	e059      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005da6:	7ac8      	ldrb	r0, [r1, #11]
 8005da8:	1c40      	adds	r0, r0, #1
 8005daa:	0740      	lsls	r0, r0, #29
 8005dac:	0f40      	lsrs	r0, r0, #29
 8005dae:	72c8      	strb	r0, [r1, #11]
 8005db0:	9800      	ldr	r0, [sp, #0]
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	7146      	strb	r6, [r0, #5]
 8005db6:	8ba1      	ldrh	r1, [r4, #28]
 8005db8:	485a      	ldr	r0, [pc, #360]	@ (8005f24 <.text_33>)
 8005dba:	4008      	ands	r0, r1
 8005dbc:	83a0      	strh	r0, [r4, #28]
 8005dbe:	495a      	ldr	r1, [pc, #360]	@ (8005f28 <.text_34>)
 8005dc0:	4001      	ands	r1, r0
 8005dc2:	83a1      	strh	r1, [r4, #28]
 8005dc4:	2505      	movs	r5, #5
 8005dc6:	e048      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005dc8:	78a0      	ldrb	r0, [r4, #2]
 8005dca:	1c40      	adds	r0, r0, #1
 8005dcc:	70a0      	strb	r0, [r4, #2]
 8005dce:	9a03      	ldr	r2, [sp, #12]
 8005dd0:	18a2      	adds	r2, r4, r2
 8005dd2:	8a52      	ldrh	r2, [r2, #18]
 8005dd4:	0613      	lsls	r3, r2, #24
 8005dd6:	0f9b      	lsrs	r3, r3, #30
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <USBPD_PRL_SendMessage+0x3cc>
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e000      	b.n	8005de2 <USBPD_PRL_SendMessage+0x3ce>
 8005de0:	2302      	movs	r3, #2
 8005de2:	0bd2      	lsrs	r2, r2, #15
 8005de4:	d006      	beq.n	8005df4 <USBPD_PRL_SendMessage+0x3e0>
 8005de6:	8ba2      	ldrh	r2, [r4, #28]
 8005de8:	0bd4      	lsrs	r4, r2, #15
 8005dea:	d103      	bne.n	8005df4 <USBPD_PRL_SendMessage+0x3e0>
 8005dec:	05d2      	lsls	r2, r2, #23
 8005dee:	0dd2      	lsrs	r2, r2, #23
 8005df0:	2a1b      	cmp	r2, #27
 8005df2:	d207      	bcs.n	8005e04 <USBPD_PRL_SendMessage+0x3f0>
 8005df4:	b2c0      	uxtb	r0, r0
 8005df6:	4283      	cmp	r3, r0
 8005df8:	d304      	bcc.n	8005e04 <USBPD_PRL_SendMessage+0x3f0>
 8005dfa:	2010      	movs	r0, #16
 8005dfc:	9900      	ldr	r1, [sp, #0]
 8005dfe:	6809      	ldr	r1, [r1, #0]
 8005e00:	7148      	strb	r0, [r1, #5]
 8005e02:	e02a      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e04:	9800      	ldr	r0, [sp, #0]
 8005e06:	6800      	ldr	r0, [r0, #0]
 8005e08:	7146      	strb	r6, [r0, #5]
 8005e0a:	2507      	movs	r5, #7
 8005e0c:	7ac8      	ldrb	r0, [r1, #11]
 8005e0e:	1c40      	adds	r0, r0, #1
 8005e10:	2207      	movs	r2, #7
 8005e12:	4002      	ands	r2, r0
 8005e14:	72ca      	strb	r2, [r1, #11]
 8005e16:	e020      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e18:	210a      	movs	r1, #10
 8005e1a:	7141      	strb	r1, [r0, #5]
 8005e1c:	2002      	movs	r0, #2
 8005e1e:	7420      	strb	r0, [r4, #16]
 8005e20:	493f      	ldr	r1, [pc, #252]	@ (8005f20 <.text_32>)
 8005e22:	4668      	mov	r0, sp
 8005e24:	7940      	ldrb	r0, [r0, #5]
 8005e26:	f011 f87b 	bl	8016f20 <USBPD_TIM_Start>
 8005e2a:	89e3      	ldrh	r3, [r4, #14]
 8005e2c:	9a02      	ldr	r2, [sp, #8]
 8005e2e:	4668      	mov	r0, sp
 8005e30:	7901      	ldrb	r1, [r0, #4]
 8005e32:	7f00      	ldrb	r0, [r0, #28]
 8005e34:	f00f fc81 	bl	801573a <USBPD_PHY_SendMessage>
 8005e38:	4668      	mov	r0, sp
 8005e3a:	8f00      	ldrh	r0, [r0, #56]	@ 0x38
 8005e3c:	9000      	str	r0, [sp, #0]
 8005e3e:	9b02      	ldr	r3, [sp, #8]
 8005e40:	4668      	mov	r0, sp
 8005e42:	7902      	ldrb	r2, [r0, #4]
 8005e44:	7f01      	ldrb	r1, [r0, #28]
 8005e46:	2002      	movs	r0, #2
 8005e48:	4c34      	ldr	r4, [pc, #208]	@ (8005f1c <.text_31>)
 8005e4a:	6824      	ldr	r4, [r4, #0]
 8005e4c:	47a0      	blx	r4
 8005e4e:	e004      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e50:	7146      	strb	r6, [r0, #5]
 8005e52:	2506      	movs	r5, #6
 8005e54:	e001      	b.n	8005e5a <USBPD_PRL_SendMessage+0x446>
 8005e56:	7146      	strb	r6, [r0, #5]
 8005e58:	2510      	movs	r5, #16
 8005e5a:	0028      	movs	r0, r5
 8005e5c:	b009      	add	sp, #36	@ 0x24
 8005e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005e60 <.text_24>:
 8005e60:	0000ffe0 	.word	0x0000ffe0

08005e64 <.text_25>:
 8005e64:	00008fff 	.word	0x00008fff

08005e68 <USBPD_PRL_ResetRequestProcess>:
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	0005      	movs	r5, r0
 8005e6c:	000e      	movs	r6, r1
 8005e6e:	482f      	ldr	r0, [pc, #188]	@ (8005f2c <.text_35>)
 8005e70:	00a9      	lsls	r1, r5, #2
 8005e72:	1840      	adds	r0, r0, r1
 8005e74:	9000      	str	r0, [sp, #0]
 8005e76:	6804      	ldr	r4, [r0, #0]
 8005e78:	2700      	movs	r7, #0
 8005e7a:	70e7      	strb	r7, [r4, #3]
 8005e7c:	72e7      	strb	r7, [r4, #11]
 8005e7e:	7327      	strb	r7, [r4, #12]
 8005e80:	7367      	strb	r7, [r4, #13]
 8005e82:	220f      	movs	r2, #15
 8005e84:	2103      	movs	r1, #3
 8005e86:	1da0      	adds	r0, r4, #6
 8005e88:	f018 f9e2 	bl	801e250 <__aeabi_memset>
 8005e8c:	9800      	ldr	r0, [sp, #0]
 8005e8e:	6800      	ldr	r0, [r0, #0]
 8005e90:	7147      	strb	r7, [r0, #5]
 8005e92:	9700      	str	r7, [sp, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	0032      	movs	r2, r6
 8005e98:	0029      	movs	r1, r5
 8005e9a:	2002      	movs	r0, #2
 8005e9c:	4f1f      	ldr	r7, [pc, #124]	@ (8005f1c <.text_31>)
 8005e9e:	683f      	ldr	r7, [r7, #0]
 8005ea0:	47b8      	blx	r7
 8005ea2:	0028      	movs	r0, r5
 8005ea4:	f000 f849 	bl	8005f3a <PRL_DisableRX>
 8005ea8:	0031      	movs	r1, r6
 8005eaa:	0028      	movs	r0, r5
 8005eac:	f00f fc2f 	bl	801570e <USBPD_PHY_ResetRequest>
 8005eb0:	2005      	movs	r0, #5
 8005eb2:	7120      	strb	r0, [r4, #4]
 8005eb4:	78e0      	ldrb	r0, [r4, #3]
 8005eb6:	2801      	cmp	r0, #1
 8005eb8:	d002      	beq.n	8005ec0 <USBPD_PRL_ResetRequestProcess+0x58>
 8005eba:	7920      	ldrb	r0, [r4, #4]
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d1f9      	bne.n	8005eb4 <USBPD_PRL_ResetRequestProcess+0x4c>
 8005ec0:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08005ec2 <USBDPD_PRL_BistCarrierEyeMode>:
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	2905      	cmp	r1, #5
 8005ec6:	d102      	bne.n	8005ece <USBDPD_PRL_BistCarrierEyeMode+0xc>
 8005ec8:	f00f fc56 	bl	8015778 <USBPD_PHY_Send_BIST_Pattern>
 8005ecc:	bd02      	pop	{r1, pc}
 8005ece:	2010      	movs	r0, #16
 8005ed0:	bd02      	pop	{r1, pc}

08005ed2 <USBDPD_PRL_BistCarrierEyeModeExit>:
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	2905      	cmp	r1, #5
 8005ed6:	d103      	bne.n	8005ee0 <USBDPD_PRL_BistCarrierEyeModeExit+0xe>
 8005ed8:	2107      	movs	r1, #7
 8005eda:	f00f fc5d 	bl	8015798 <USBPD_PHY_ExitTransmit>
 8005ede:	bd02      	pop	{r1, pc}
 8005ee0:	2010      	movs	r0, #16
 8005ee2:	bd02      	pop	{r1, pc}

08005ee4 <USBPD_PRL_Reset>:
 8005ee4:	b570      	push	{r4, r5, r6, lr}
 8005ee6:	0004      	movs	r4, r0
 8005ee8:	4810      	ldr	r0, [pc, #64]	@ (8005f2c <.text_35>)
 8005eea:	00a1      	lsls	r1, r4, #2
 8005eec:	5845      	ldr	r5, [r0, r1]
 8005eee:	2600      	movs	r6, #0
 8005ef0:	716e      	strb	r6, [r5, #5]
 8005ef2:	702e      	strb	r6, [r5, #0]
 8005ef4:	712e      	strb	r6, [r5, #4]
 8005ef6:	72ee      	strb	r6, [r5, #11]
 8005ef8:	732e      	strb	r6, [r5, #12]
 8005efa:	736e      	strb	r6, [r5, #13]
 8005efc:	220f      	movs	r2, #15
 8005efe:	2103      	movs	r1, #3
 8005f00:	1da8      	adds	r0, r5, #6
 8005f02:	f018 f9a5 	bl	801e250 <__aeabi_memset>
 8005f06:	2025      	movs	r0, #37	@ 0x25
 8005f08:	542e      	strb	r6, [r5, r0]
 8005f0a:	0020      	movs	r0, r4
 8005f0c:	f00f fbf5 	bl	80156fa <USBPD_PHY_Reset>
 8005f10:	0020      	movs	r0, r4
 8005f12:	f00f fcac 	bl	801586e <USBPD_PHY_EnableRX>
 8005f16:	bd70      	pop	{r4, r5, r6, pc}

08005f18 <.text_30>:
 8005f18:	0000f1ff 	.word	0x0000f1ff

08005f1c <.text_31>:
 8005f1c:	20000000 	.word	0x20000000

08005f20 <.text_32>:
 8005f20:	00002710 	.word	0x00002710

08005f24 <.text_33>:
 8005f24:	000087ff 	.word	0x000087ff

08005f28 <.text_34>:
 8005f28:	0000fbff 	.word	0x0000fbff

08005f2c <.text_35>:
 8005f2c:	200002f8 	.word	0x200002f8

08005f30 <USBPD_PRL_Stop>:
 8005f30:	b580      	push	{r7, lr}
 8005f32:	f00f fcab 	bl	801588c <USBPD_PHY_DisableRX>
 8005f36:	bd01      	pop	{r0, pc}

08005f38 <USBPD_PRL_DeInit>:
 8005f38:	4770      	bx	lr

08005f3a <PRL_DisableRX>:
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	f00f fca6 	bl	801588c <USBPD_PHY_DisableRX>
 8005f40:	bd01      	pop	{r0, pc}
	...

08005f44 <PRL_Received>:
 8005f44:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8005f46:	b089      	sub	sp, #36	@ 0x24
 8005f48:	a809      	add	r0, sp, #36	@ 0x24
 8005f4a:	7805      	ldrb	r5, [r0, #0]
 8005f4c:	48d0      	ldr	r0, [pc, #832]	@ (8006290 <PRL_Received+0x34c>)
 8005f4e:	00a9      	lsls	r1, r5, #2
 8005f50:	1846      	adds	r6, r0, r1
 8005f52:	6834      	ldr	r4, [r6, #0]
 8005f54:	4628      	mov	r0, r5
 8005f56:	f00f fbc5 	bl	80156e4 <USBPD_PHY_GetMinGOODCRCTimerValue>
 8005f5a:	a909      	add	r1, sp, #36	@ 0x24
 8005f5c:	7809      	ldrb	r1, [r1, #0]
 8005f5e:	0049      	lsls	r1, r1, #1
 8005f60:	466a      	mov	r2, sp
 8005f62:	7011      	strb	r1, [r2, #0]
 8005f64:	0001      	movs	r1, r0
 8005f66:	4668      	mov	r0, sp
 8005f68:	7800      	ldrb	r0, [r0, #0]
 8005f6a:	f010 ffd9 	bl	8016f20 <USBPD_TIM_Start>
 8005f6e:	2030      	movs	r0, #48	@ 0x30
 8005f70:	5c20      	ldrb	r0, [r4, r0]
 8005f72:	2131      	movs	r1, #49	@ 0x31
 8005f74:	5c61      	ldrb	r1, [r4, r1]
 8005f76:	0209      	lsls	r1, r1, #8
 8005f78:	1840      	adds	r0, r0, r1
 8005f7a:	4669      	mov	r1, sp
 8005f7c:	8088      	strh	r0, [r1, #4]
 8005f7e:	4668      	mov	r0, sp
 8005f80:	8880      	ldrh	r0, [r0, #4]
 8005f82:	0440      	lsls	r0, r0, #17
 8005f84:	0f40      	lsrs	r0, r0, #29
 8005f86:	0080      	lsls	r0, r0, #2
 8005f88:	9005      	str	r0, [sp, #20]
 8005f8a:	1c80      	adds	r0, r0, #2
 8005f8c:	9007      	str	r0, [sp, #28]
 8005f8e:	48c1      	ldr	r0, [pc, #772]	@ (8006294 <.text_40>)
 8005f90:	8889      	ldrh	r1, [r1, #4]
 8005f92:	4001      	ands	r1, r0
 8005f94:	2901      	cmp	r1, #1
 8005f96:	d116      	bne.n	8005fc6 <PRL_Received+0x82>
 8005f98:	0068      	lsls	r0, r5, #1
 8005f9a:	1c40      	adds	r0, r0, #1
 8005f9c:	b2c0      	uxtb	r0, r0
 8005f9e:	f011 f82d 	bl	8016ffc <USBPD_TIM_IsExpired>
 8005fa2:	2801      	cmp	r0, #1
 8005fa4:	d04c      	beq.n	8006040 <PRL_Received+0xfc>
 8005fa6:	200b      	movs	r0, #11
 8005fa8:	6831      	ldr	r1, [r6, #0]
 8005faa:	7148      	strb	r0, [r1, #5]
 8005fac:	4668      	mov	r0, sp
 8005fae:	8880      	ldrh	r0, [r0, #4]
 8005fb0:	8360      	strh	r0, [r4, #26]
 8005fb2:	9807      	ldr	r0, [sp, #28]
 8005fb4:	9000      	str	r0, [sp, #0]
 8005fb6:	0023      	movs	r3, r4
 8005fb8:	3330      	adds	r3, #48	@ 0x30
 8005fba:	a80a      	add	r0, sp, #40	@ 0x28
 8005fbc:	7802      	ldrb	r2, [r0, #0]
 8005fbe:	a809      	add	r0, sp, #36	@ 0x24
 8005fc0:	7801      	ldrb	r1, [r0, #0]
 8005fc2:	2001      	movs	r0, #1
 8005fc4:	e15f      	b.n	8006286 <PRL_Received+0x342>
 8005fc6:	49b4      	ldr	r1, [pc, #720]	@ (8006298 <.text_41>)
 8005fc8:	880f      	ldrh	r7, [r1, #0]
 8005fca:	2601      	movs	r6, #1
 8005fcc:	72a6      	strb	r6, [r4, #10]
 8005fce:	a90a      	add	r1, sp, #40	@ 0x28
 8005fd0:	7809      	ldrb	r1, [r1, #0]
 8005fd2:	1861      	adds	r1, r4, r1
 8005fd4:	9104      	str	r1, [sp, #16]
 8005fd6:	2500      	movs	r5, #0
 8005fd8:	4669      	mov	r1, sp
 8005fda:	8889      	ldrh	r1, [r1, #4]
 8005fdc:	4008      	ands	r0, r1
 8005fde:	280d      	cmp	r0, #13
 8005fe0:	d106      	bne.n	8005ff0 <PRL_Received+0xac>
 8005fe2:	9904      	ldr	r1, [sp, #16]
 8005fe4:	72cd      	strb	r5, [r1, #11]
 8005fe6:	220f      	movs	r2, #15
 8005fe8:	2103      	movs	r1, #3
 8005fea:	1da0      	adds	r0, r4, #6
 8005fec:	f018 f930 	bl	801e250 <__aeabi_memset>
 8005ff0:	a80a      	add	r0, sp, #40	@ 0x28
 8005ff2:	7800      	ldrb	r0, [r0, #0]
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d10d      	bne.n	8006014 <PRL_Received+0xd0>
 8005ff8:	8a61      	ldrh	r1, [r4, #18]
 8005ffa:	094a      	lsrs	r2, r1, #5
 8005ffc:	2001      	movs	r0, #1
 8005ffe:	4010      	ands	r0, r2
 8006000:	0a0a      	lsrs	r2, r1, #8
 8006002:	2101      	movs	r1, #1
 8006004:	4011      	ands	r1, r2
 8006006:	4abf      	ldr	r2, [pc, #764]	@ (8006304 <.text_44>)
 8006008:	403a      	ands	r2, r7
 800600a:	0143      	lsls	r3, r0, #5
 800600c:	4313      	orrs	r3, r2
 800600e:	0208      	lsls	r0, r1, #8
 8006010:	4318      	orrs	r0, r3
 8006012:	e001      	b.n	8006018 <PRL_Received+0xd4>
 8006014:	48bc      	ldr	r0, [pc, #752]	@ (8006308 <.text_45>)
 8006016:	4038      	ands	r0, r7
 8006018:	49bc      	ldr	r1, [pc, #752]	@ (800630c <.text_46>)
 800601a:	4001      	ands	r1, r0
 800601c:	4668      	mov	r0, sp
 800601e:	8880      	ldrh	r0, [r0, #4]
 8006020:	22e0      	movs	r2, #224	@ 0xe0
 8006022:	0112      	lsls	r2, r2, #4
 8006024:	4002      	ands	r2, r0
 8006026:	430a      	orrs	r2, r1
 8006028:	2040      	movs	r0, #64	@ 0x40
 800602a:	4310      	orrs	r0, r2
 800602c:	7620      	strb	r0, [r4, #24]
 800602e:	0a00      	lsrs	r0, r0, #8
 8006030:	7660      	strb	r0, [r4, #25]
 8006032:	a80a      	add	r0, sp, #40	@ 0x28
 8006034:	7801      	ldrb	r1, [r0, #0]
 8006036:	a809      	add	r0, sp, #36	@ 0x24
 8006038:	7800      	ldrb	r0, [r0, #0]
 800603a:	f7fa ff49 	bl	8000ed0 <PE_PRL_PostReceiveEvent>
 800603e:	2800      	cmp	r0, #0
 8006040:	d100      	bne.n	8006044 <PRL_Received+0x100>
 8006042:	e123      	b.n	800628c <PRL_Received+0x348>
 8006044:	7426      	strb	r6, [r4, #16]
 8006046:	4668      	mov	r0, sp
 8006048:	7800      	ldrb	r0, [r0, #0]
 800604a:	f010 ffd7 	bl	8016ffc <USBPD_TIM_IsExpired>
 800604e:	2800      	cmp	r0, #0
 8006050:	d0f9      	beq.n	8006046 <PRL_Received+0x102>
 8006052:	2302      	movs	r3, #2
 8006054:	0022      	movs	r2, r4
 8006056:	3218      	adds	r2, #24
 8006058:	a80a      	add	r0, sp, #40	@ 0x28
 800605a:	7801      	ldrb	r1, [r0, #0]
 800605c:	a809      	add	r0, sp, #36	@ 0x24
 800605e:	7800      	ldrb	r0, [r0, #0]
 8006060:	f00f fb6b 	bl	801573a <USBPD_PHY_SendMessage>
 8006064:	9006      	str	r0, [sp, #24]
 8006066:	a80a      	add	r0, sp, #40	@ 0x28
 8006068:	7800      	ldrb	r0, [r0, #0]
 800606a:	7260      	strb	r0, [r4, #9]
 800606c:	0021      	movs	r1, r4
 800606e:	3130      	adds	r1, #48	@ 0x30
 8006070:	a809      	add	r0, sp, #36	@ 0x24
 8006072:	7800      	ldrb	r0, [r0, #0]
 8006074:	f7fa ff60 	bl	8000f38 <PE_PRL_PostReceiveEventCopy>
 8006078:	2033      	movs	r0, #51	@ 0x33
 800607a:	5c20      	ldrb	r0, [r4, r0]
 800607c:	2132      	movs	r1, #50	@ 0x32
 800607e:	5c61      	ldrb	r1, [r4, r1]
 8006080:	0203      	lsls	r3, r0, #8
 8006082:	18ca      	adds	r2, r1, r3
 8006084:	466b      	mov	r3, sp
 8006086:	80da      	strh	r2, [r3, #6]
 8006088:	466a      	mov	r2, sp
 800608a:	8892      	ldrh	r2, [r2, #4]
 800608c:	0452      	lsls	r2, r2, #17
 800608e:	0f52      	lsrs	r2, r2, #29
 8006090:	81da      	strh	r2, [r3, #14]
 8006092:	466a      	mov	r2, sp
 8006094:	88d2      	ldrh	r2, [r2, #6]
 8006096:	05d2      	lsls	r2, r2, #23
 8006098:	0dd2      	lsrs	r2, r2, #23
 800609a:	811a      	strh	r2, [r3, #8]
 800609c:	466a      	mov	r2, sp
 800609e:	88d2      	ldrh	r2, [r2, #6]
 80060a0:	0bd2      	lsrs	r2, r2, #15
 80060a2:	819a      	strh	r2, [r3, #12]
 80060a4:	466a      	mov	r2, sp
 80060a6:	8892      	ldrh	r2, [r2, #4]
 80060a8:	0bd2      	lsrs	r2, r2, #15
 80060aa:	815a      	strh	r2, [r3, #10]
 80060ac:	d007      	beq.n	80060be <PRL_Received+0x17a>
 80060ae:	466a      	mov	r2, sp
 80060b0:	8992      	ldrh	r2, [r2, #12]
 80060b2:	2a00      	cmp	r2, #0
 80060b4:	d103      	bne.n	80060be <PRL_Received+0x17a>
 80060b6:	4668      	mov	r0, sp
 80060b8:	8900      	ldrh	r0, [r0, #8]
 80060ba:	1d00      	adds	r0, r0, #4
 80060bc:	e01b      	b.n	80060f6 <PRL_Received+0x1b2>
 80060be:	7822      	ldrb	r2, [r4, #0]
 80060c0:	2a00      	cmp	r2, #0
 80060c2:	d117      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060c4:	466a      	mov	r2, sp
 80060c6:	89d2      	ldrh	r2, [r2, #14]
 80060c8:	2a00      	cmp	r2, #0
 80060ca:	d013      	beq.n	80060f4 <PRL_Received+0x1b0>
 80060cc:	466a      	mov	r2, sp
 80060ce:	8892      	ldrh	r2, [r2, #4]
 80060d0:	06d2      	lsls	r2, r2, #27
 80060d2:	0ed2      	lsrs	r2, r2, #27
 80060d4:	2a03      	cmp	r2, #3
 80060d6:	d10d      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060d8:	0200      	lsls	r0, r0, #8
 80060da:	1808      	adds	r0, r1, r0
 80060dc:	2134      	movs	r1, #52	@ 0x34
 80060de:	5c61      	ldrb	r1, [r4, r1]
 80060e0:	0409      	lsls	r1, r1, #16
 80060e2:	1840      	adds	r0, r0, r1
 80060e4:	2135      	movs	r1, #53	@ 0x35
 80060e6:	5c61      	ldrb	r1, [r4, r1]
 80060e8:	0609      	lsls	r1, r1, #24
 80060ea:	1840      	adds	r0, r0, r1
 80060ec:	0f00      	lsrs	r0, r0, #28
 80060ee:	2808      	cmp	r0, #8
 80060f0:	d100      	bne.n	80060f4 <PRL_Received+0x1b0>
 80060f2:	7026      	strb	r6, [r4, #0]
 80060f4:	9807      	ldr	r0, [sp, #28]
 80060f6:	9000      	str	r0, [sp, #0]
 80060f8:	0023      	movs	r3, r4
 80060fa:	3330      	adds	r3, #48	@ 0x30
 80060fc:	a80a      	add	r0, sp, #40	@ 0x28
 80060fe:	7802      	ldrb	r2, [r0, #0]
 8006100:	a809      	add	r0, sp, #36	@ 0x24
 8006102:	7801      	ldrb	r1, [r0, #0]
 8006104:	2001      	movs	r0, #1
 8006106:	4fc1      	ldr	r7, [pc, #772]	@ (800640c <.text_51>)
 8006108:	683f      	ldr	r7, [r7, #0]
 800610a:	47b8      	blx	r7
 800610c:	9806      	ldr	r0, [sp, #24]
 800610e:	2800      	cmp	r0, #0
 8006110:	d10b      	bne.n	800612a <PRL_Received+0x1e6>
 8006112:	2002      	movs	r0, #2
 8006114:	9000      	str	r0, [sp, #0]
 8006116:	0023      	movs	r3, r4
 8006118:	3318      	adds	r3, #24
 800611a:	a80a      	add	r0, sp, #40	@ 0x28
 800611c:	7802      	ldrb	r2, [r0, #0]
 800611e:	a809      	add	r0, sp, #36	@ 0x24
 8006120:	7801      	ldrb	r1, [r0, #0]
 8006122:	2002      	movs	r0, #2
 8006124:	4fb9      	ldr	r7, [pc, #740]	@ (800640c <.text_51>)
 8006126:	683f      	ldr	r7, [r7, #0]
 8006128:	47b8      	blx	r7
 800612a:	4668      	mov	r0, sp
 800612c:	8880      	ldrh	r0, [r0, #4]
 800612e:	0a40      	lsrs	r0, r0, #9
 8006130:	2107      	movs	r1, #7
 8006132:	9a04      	ldr	r2, [sp, #16]
 8006134:	7992      	ldrb	r2, [r2, #6]
 8006136:	2307      	movs	r3, #7
 8006138:	4003      	ands	r3, r0
 800613a:	429a      	cmp	r2, r3
 800613c:	d103      	bne.n	8006146 <PRL_Received+0x202>
 800613e:	9a06      	ldr	r2, [sp, #24]
 8006140:	2a00      	cmp	r2, #0
 8006142:	d100      	bne.n	8006146 <PRL_Received+0x202>
 8006144:	e08f      	b.n	8006266 <PRL_Received+0x322>
 8006146:	4001      	ands	r1, r0
 8006148:	9804      	ldr	r0, [sp, #16]
 800614a:	7181      	strb	r1, [r0, #6]
 800614c:	4668      	mov	r0, sp
 800614e:	8880      	ldrh	r0, [r0, #4]
 8006150:	8420      	strh	r0, [r4, #32]
 8006152:	4668      	mov	r0, sp
 8006154:	8940      	ldrh	r0, [r0, #10]
 8006156:	2800      	cmp	r0, #0
 8006158:	d043      	beq.n	80061e2 <PRL_Received+0x29e>
 800615a:	4668      	mov	r0, sp
 800615c:	8980      	ldrh	r0, [r0, #12]
 800615e:	2800      	cmp	r0, #0
 8006160:	d03f      	beq.n	80061e2 <PRL_Received+0x29e>
 8006162:	4668      	mov	r0, sp
 8006164:	88c0      	ldrh	r0, [r0, #6]
 8006166:	83e0      	strh	r0, [r4, #30]
 8006168:	4668      	mov	r0, sp
 800616a:	88c0      	ldrh	r0, [r0, #6]
 800616c:	0440      	lsls	r0, r0, #17
 800616e:	0f01      	lsrs	r1, r0, #28
 8006170:	201a      	movs	r0, #26
 8006172:	4348      	muls	r0, r1
 8006174:	9905      	ldr	r1, [sp, #20]
 8006176:	1e89      	subs	r1, r1, #2
 8006178:	466a      	mov	r2, sp
 800617a:	88d2      	ldrh	r2, [r2, #6]
 800617c:	23f8      	movs	r3, #248	@ 0xf8
 800617e:	01db      	lsls	r3, r3, #7
 8006180:	4013      	ands	r3, r2
 8006182:	d12f      	bne.n	80061e4 <PRL_Received+0x2a0>
 8006184:	466a      	mov	r2, sp
 8006186:	88d2      	ldrh	r2, [r2, #6]
 8006188:	05d2      	lsls	r2, r2, #23
 800618a:	0dd2      	lsrs	r2, r2, #23
 800618c:	466b      	mov	r3, sp
 800618e:	89db      	ldrh	r3, [r3, #14]
 8006190:	2b07      	cmp	r3, #7
 8006192:	d30a      	bcc.n	80061aa <PRL_Received+0x266>
 8006194:	2a1a      	cmp	r2, #26
 8006196:	d811      	bhi.n	80061bc <PRL_Received+0x278>
 8006198:	e007      	b.n	80061aa <PRL_Received+0x266>
 800619a:	0023      	movs	r3, r4
 800619c:	3334      	adds	r3, #52	@ 0x34
 800619e:	5d5b      	ldrb	r3, [r3, r5]
 80061a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061a2:	182f      	adds	r7, r5, r0
 80061a4:	55f3      	strb	r3, [r6, r7]
 80061a6:	1c6d      	adds	r5, r5, #1
 80061a8:	b2ad      	uxth	r5, r5
 80061aa:	428d      	cmp	r5, r1
 80061ac:	d3f5      	bcc.n	800619a <PRL_Received+0x256>
 80061ae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80061b0:	4291      	cmp	r1, r2
 80061b2:	d301      	bcc.n	80061b8 <PRL_Received+0x274>
 80061b4:	4669      	mov	r1, sp
 80061b6:	8909      	ldrh	r1, [r1, #8]
 80061b8:	8001      	strh	r1, [r0, #0]
 80061ba:	e00c      	b.n	80061d6 <PRL_Received+0x292>
 80061bc:	2025      	movs	r0, #37	@ 0x25
 80061be:	5426      	strb	r6, [r4, r0]
 80061c0:	0020      	movs	r0, r4
 80061c2:	3034      	adds	r0, #52	@ 0x34
 80061c4:	5d40      	ldrb	r0, [r0, r5]
 80061c6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80061c8:	5548      	strb	r0, [r1, r5]
 80061ca:	1c6d      	adds	r5, r5, #1
 80061cc:	2d1a      	cmp	r5, #26
 80061ce:	d3f7      	bcc.n	80061c0 <PRL_Received+0x27c>
 80061d0:	201a      	movs	r0, #26
 80061d2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80061d4:	8008      	strh	r0, [r1, #0]
 80061d6:	a80a      	add	r0, sp, #40	@ 0x28
 80061d8:	7801      	ldrb	r1, [r0, #0]
 80061da:	a809      	add	r0, sp, #36	@ 0x24
 80061dc:	7800      	ldrb	r0, [r0, #0]
 80061de:	f7fa fe77 	bl	8000ed0 <PE_PRL_PostReceiveEvent>
 80061e2:	e053      	b.n	800628c <PRL_Received+0x348>
 80061e4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	9b05      	ldr	r3, [sp, #20]
 80061ea:	18d3      	adds	r3, r2, r3
 80061ec:	1e9b      	subs	r3, r3, #2
 80061ee:	27ff      	movs	r7, #255	@ 0xff
 80061f0:	1dbf      	adds	r7, r7, #6
 80061f2:	321a      	adds	r2, #26
 80061f4:	42ba      	cmp	r2, r7
 80061f6:	d21b      	bcs.n	8006230 <PRL_Received+0x2ec>
 80061f8:	466a      	mov	r2, sp
 80061fa:	8912      	ldrh	r2, [r2, #8]
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d217      	bcs.n	8006230 <PRL_Received+0x2ec>
 8006200:	2225      	movs	r2, #37	@ 0x25
 8006202:	54a6      	strb	r6, [r4, r2]
 8006204:	e007      	b.n	8006216 <PRL_Received+0x2d2>
 8006206:	0022      	movs	r2, r4
 8006208:	3234      	adds	r2, #52	@ 0x34
 800620a:	5d52      	ldrb	r2, [r2, r5]
 800620c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800620e:	182e      	adds	r6, r5, r0
 8006210:	559a      	strb	r2, [r3, r6]
 8006212:	1c6d      	adds	r5, r5, #1
 8006214:	b2ad      	uxth	r5, r5
 8006216:	428d      	cmp	r5, r1
 8006218:	d3f5      	bcc.n	8006206 <PRL_Received+0x2c2>
 800621a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800621c:	8801      	ldrh	r1, [r0, #0]
 800621e:	466a      	mov	r2, sp
 8006220:	8892      	ldrh	r2, [r2, #4]
 8006222:	0a92      	lsrs	r2, r2, #10
 8006224:	231c      	movs	r3, #28
 8006226:	4013      	ands	r3, r2
 8006228:	1e9a      	subs	r2, r3, #2
 800622a:	1889      	adds	r1, r1, r2
 800622c:	8001      	strh	r1, [r0, #0]
 800622e:	e02d      	b.n	800628c <PRL_Received+0x348>
 8006230:	42bb      	cmp	r3, r7
 8006232:	d215      	bcs.n	8006260 <PRL_Received+0x31c>
 8006234:	466a      	mov	r2, sp
 8006236:	8912      	ldrh	r2, [r2, #8]
 8006238:	4293      	cmp	r3, r2
 800623a:	d311      	bcc.n	8006260 <PRL_Received+0x31c>
 800623c:	2225      	movs	r2, #37	@ 0x25
 800623e:	54a6      	strb	r6, [r4, r2]
 8006240:	e007      	b.n	8006252 <PRL_Received+0x30e>
 8006242:	0022      	movs	r2, r4
 8006244:	3234      	adds	r2, #52	@ 0x34
 8006246:	5d52      	ldrb	r2, [r2, r5]
 8006248:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800624a:	182e      	adds	r6, r5, r0
 800624c:	559a      	strb	r2, [r3, r6]
 800624e:	1c6d      	adds	r5, r5, #1
 8006250:	b2ad      	uxth	r5, r5
 8006252:	428d      	cmp	r5, r1
 8006254:	d3f5      	bcc.n	8006242 <PRL_Received+0x2fe>
 8006256:	4668      	mov	r0, sp
 8006258:	8900      	ldrh	r0, [r0, #8]
 800625a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800625c:	8008      	strh	r0, [r1, #0]
 800625e:	e015      	b.n	800628c <PRL_Received+0x348>
 8006260:	2025      	movs	r0, #37	@ 0x25
 8006262:	5425      	strb	r5, [r4, r0]
 8006264:	e012      	b.n	800628c <PRL_Received+0x348>
 8006266:	20ff      	movs	r0, #255	@ 0xff
 8006268:	7260      	strb	r0, [r4, #9]
 800626a:	7425      	strb	r5, [r4, #16]
 800626c:	a809      	add	r0, sp, #36	@ 0x24
 800626e:	7800      	ldrb	r0, [r0, #0]
 8006270:	f7fa fe4a 	bl	8000f08 <PE_PRL_PostReceiveEventError>
 8006274:	72a5      	strb	r5, [r4, #10]
 8006276:	2017      	movs	r0, #23
 8006278:	9000      	str	r0, [sp, #0]
 800627a:	bf00      	nop
 800627c:	a367      	add	r3, pc, #412	@ (adr r3, 800641c <.text_55>)
 800627e:	2200      	movs	r2, #0
 8006280:	a809      	add	r0, sp, #36	@ 0x24
 8006282:	7801      	ldrb	r1, [r0, #0]
 8006284:	2006      	movs	r0, #6
 8006286:	4c61      	ldr	r4, [pc, #388]	@ (800640c <.text_51>)
 8006288:	6824      	ldr	r4, [r4, #0]
 800628a:	47a0      	blx	r4
 800628c:	b00b      	add	sp, #44	@ 0x2c
 800628e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006290:	200002f8 	.word	0x200002f8

08006294 <.text_40>:
 8006294:	0000f01f 	.word	0x0000f01f

08006298 <.text_41>:
 8006298:	0801e440 	.word	0x0801e440

0800629c <PRL_ResetIndicate>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	0004      	movs	r4, r0
 80062a0:	000d      	movs	r5, r1
 80062a2:	2d05      	cmp	r5, #5
 80062a4:	d119      	bne.n	80062da <PRL_ResetIndicate+0x3e>
 80062a6:	485a      	ldr	r0, [pc, #360]	@ (8006410 <.text_52>)
 80062a8:	00a1      	lsls	r1, r4, #2
 80062aa:	1840      	adds	r0, r0, r1
 80062ac:	9000      	str	r0, [sp, #0]
 80062ae:	6807      	ldr	r7, [r0, #0]
 80062b0:	2600      	movs	r6, #0
 80062b2:	2000      	movs	r0, #0
 80062b4:	b2c2      	uxtb	r2, r0
 80062b6:	18ba      	adds	r2, r7, r2
 80062b8:	72d6      	strb	r6, [r2, #11]
 80062ba:	1c40      	adds	r0, r0, #1
 80062bc:	b2c1      	uxtb	r1, r0
 80062be:	2903      	cmp	r1, #3
 80062c0:	d3f8      	bcc.n	80062b4 <PRL_ResetIndicate+0x18>
 80062c2:	220f      	movs	r2, #15
 80062c4:	2103      	movs	r1, #3
 80062c6:	1db8      	adds	r0, r7, #6
 80062c8:	f017 ffc2 	bl	801e250 <__aeabi_memset>
 80062cc:	9900      	ldr	r1, [sp, #0]
 80062ce:	6809      	ldr	r1, [r1, #0]
 80062d0:	714e      	strb	r6, [r1, #5]
 80062d2:	703e      	strb	r6, [r7, #0]
 80062d4:	0020      	movs	r0, r4
 80062d6:	f7ff fe30 	bl	8005f3a <PRL_DisableRX>
 80062da:	2000      	movs	r0, #0
 80062dc:	9000      	str	r0, [sp, #0]
 80062de:	2300      	movs	r3, #0
 80062e0:	002a      	movs	r2, r5
 80062e2:	0021      	movs	r1, r4
 80062e4:	2001      	movs	r0, #1
 80062e6:	4e49      	ldr	r6, [pc, #292]	@ (800640c <.text_51>)
 80062e8:	6836      	ldr	r6, [r6, #0]
 80062ea:	47b0      	blx	r6
 80062ec:	0029      	movs	r1, r5
 80062ee:	0020      	movs	r0, r4
 80062f0:	f7fa fce6 	bl	8000cc0 <PE_PRL_ResetReceived>
 80062f4:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080062f6 <PRL_ResetCompleted>:
 80062f6:	2101      	movs	r1, #1
 80062f8:	4a45      	ldr	r2, [pc, #276]	@ (8006410 <.text_52>)
 80062fa:	0080      	lsls	r0, r0, #2
 80062fc:	5810      	ldr	r0, [r2, r0]
 80062fe:	70c1      	strb	r1, [r0, #3]
 8006300:	4770      	bx	lr
	...

08006304 <.text_44>:
 8006304:	0000fedf 	.word	0x0000fedf

08006308 <.text_45>:
 8006308:	0000feff 	.word	0x0000feff

0800630c <.text_46>:
 800630c:	0000f13f 	.word	0x0000f13f

08006310 <PRL_BistCompleted>:
 8006310:	b580      	push	{r7, lr}
 8006312:	f7fa fd01 	bl	8000d18 <PE_PRL_BistCompleted>
 8006316:	bd01      	pop	{r0, pc}

08006318 <PRL_TxCompleted>:
 8006318:	b570      	push	{r4, r5, r6, lr}
 800631a:	0004      	movs	r4, r0
 800631c:	4a3c      	ldr	r2, [pc, #240]	@ (8006410 <.text_52>)
 800631e:	00a3      	lsls	r3, r4, #2
 8006320:	58d6      	ldr	r6, [r2, r3]
 8006322:	2500      	movs	r5, #0
 8006324:	7c32      	ldrb	r2, [r6, #16]
 8006326:	2a01      	cmp	r2, #1
 8006328:	d002      	beq.n	8006330 <PRL_TxCompleted+0x18>
 800632a:	2a02      	cmp	r2, #2
 800632c:	d009      	beq.n	8006342 <PRL_TxCompleted+0x2a>
 800632e:	e010      	b.n	8006352 <PRL_TxCompleted+0x3a>
 8006330:	2900      	cmp	r1, #0
 8006332:	d102      	bne.n	800633a <PRL_TxCompleted+0x22>
 8006334:	f7fa fe1a 	bl	8000f6c <PE_PRL_PostReceiveEventComplete>
 8006338:	e001      	b.n	800633e <PRL_TxCompleted+0x26>
 800633a:	f7fa fde5 	bl	8000f08 <PE_PRL_PostReceiveEventError>
 800633e:	72b5      	strb	r5, [r6, #10]
 8006340:	e007      	b.n	8006352 <PRL_TxCompleted+0x3a>
 8006342:	f00f f9c1 	bl	80156c8 <USBPD_PHY_GetRetryTimerValue>
 8006346:	0001      	movs	r1, r0
 8006348:	0060      	lsls	r0, r4, #1
 800634a:	1c40      	adds	r0, r0, #1
 800634c:	b2c0      	uxtb	r0, r0
 800634e:	f010 fde7 	bl	8016f20 <USBPD_TIM_Start>
 8006352:	7435      	strb	r5, [r6, #16]
 8006354:	bd70      	pop	{r4, r5, r6, pc}

08006356 <USBPD_PRL_PrepareExtendedTxChunkSending>:
 8006356:	b570      	push	{r4, r5, r6, lr}
 8006358:	4c2d      	ldr	r4, [pc, #180]	@ (8006410 <.text_52>)
 800635a:	0080      	lsls	r0, r0, #2
 800635c:	5820      	ldr	r0, [r4, r0]
 800635e:	2480      	movs	r4, #128	@ 0x80
 8006360:	0224      	lsls	r4, r4, #8
 8006362:	8b85      	ldrh	r5, [r0, #28]
 8006364:	4e2b      	ldr	r6, [pc, #172]	@ (8006414 <.text_53>)
 8006366:	402e      	ands	r6, r5
 8006368:	02c9      	lsls	r1, r1, #11
 800636a:	4331      	orrs	r1, r6
 800636c:	25fe      	movs	r5, #254	@ 0xfe
 800636e:	022d      	lsls	r5, r5, #8
 8006370:	400d      	ands	r5, r1
 8006372:	05d1      	lsls	r1, r2, #23
 8006374:	0dc9      	lsrs	r1, r1, #23
 8006376:	4329      	orrs	r1, r5
 8006378:	4321      	orrs	r1, r4
 800637a:	8381      	strh	r1, [r0, #28]
 800637c:	8a41      	ldrh	r1, [r0, #18]
 800637e:	430c      	orrs	r4, r1
 8006380:	8244      	strh	r4, [r0, #18]
 8006382:	4a25      	ldr	r2, [pc, #148]	@ (8006418 <.text_54>)
 8006384:	4022      	ands	r2, r4
 8006386:	2120      	movs	r1, #32
 8006388:	5c41      	ldrb	r1, [r0, r1]
 800638a:	06c9      	lsls	r1, r1, #27
 800638c:	0ec9      	lsrs	r1, r1, #27
 800638e:	4311      	orrs	r1, r2
 8006390:	8241      	strh	r1, [r0, #18]
 8006392:	7019      	strb	r1, [r3, #0]
 8006394:	8a41      	ldrh	r1, [r0, #18]
 8006396:	0a09      	lsrs	r1, r1, #8
 8006398:	7059      	strb	r1, [r3, #1]
 800639a:	8b81      	ldrh	r1, [r0, #28]
 800639c:	7099      	strb	r1, [r3, #2]
 800639e:	8b80      	ldrh	r0, [r0, #28]
 80063a0:	0a00      	lsrs	r0, r0, #8
 80063a2:	70d8      	strb	r0, [r3, #3]
 80063a4:	bd70      	pop	{r4, r5, r6, pc}

080063a6 <USBPD_PRL_PrepareChunkRequest>:
 80063a6:	b510      	push	{r4, lr}
 80063a8:	4a19      	ldr	r2, [pc, #100]	@ (8006410 <.text_52>)
 80063aa:	0080      	lsls	r0, r0, #2
 80063ac:	5810      	ldr	r0, [r2, r0]
 80063ae:	8b83      	ldrh	r3, [r0, #28]
 80063b0:	2284      	movs	r2, #132	@ 0x84
 80063b2:	0212      	lsls	r2, r2, #8
 80063b4:	431a      	orrs	r2, r3
 80063b6:	8382      	strh	r2, [r0, #28]
 80063b8:	2386      	movs	r3, #134	@ 0x86
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	4013      	ands	r3, r2
 80063be:	8bc2      	ldrh	r2, [r0, #30]
 80063c0:	0ad2      	lsrs	r2, r2, #11
 80063c2:	1c52      	adds	r2, r2, #1
 80063c4:	02d2      	lsls	r2, r2, #11
 80063c6:	24f0      	movs	r4, #240	@ 0xf0
 80063c8:	01e4      	lsls	r4, r4, #7
 80063ca:	4014      	ands	r4, r2
 80063cc:	431c      	orrs	r4, r3
 80063ce:	8384      	strh	r4, [r0, #28]
 80063d0:	8a43      	ldrh	r3, [r0, #18]
 80063d2:	2280      	movs	r2, #128	@ 0x80
 80063d4:	0212      	lsls	r2, r2, #8
 80063d6:	431a      	orrs	r2, r3
 80063d8:	0003      	movs	r3, r0
 80063da:	3312      	adds	r3, #18
 80063dc:	801a      	strh	r2, [r3, #0]
 80063de:	4c0e      	ldr	r4, [pc, #56]	@ (8006418 <.text_54>)
 80063e0:	4014      	ands	r4, r2
 80063e2:	2220      	movs	r2, #32
 80063e4:	5c82      	ldrb	r2, [r0, r2]
 80063e6:	06d2      	lsls	r2, r2, #27
 80063e8:	0ed2      	lsrs	r2, r2, #27
 80063ea:	4322      	orrs	r2, r4
 80063ec:	801a      	strh	r2, [r3, #0]
 80063ee:	2200      	movs	r2, #0
 80063f0:	7142      	strb	r2, [r0, #5]
 80063f2:	8a43      	ldrh	r3, [r0, #18]
 80063f4:	700b      	strb	r3, [r1, #0]
 80063f6:	8a43      	ldrh	r3, [r0, #18]
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	704b      	strb	r3, [r1, #1]
 80063fc:	8b83      	ldrh	r3, [r0, #28]
 80063fe:	708b      	strb	r3, [r1, #2]
 8006400:	8b80      	ldrh	r0, [r0, #28]
 8006402:	0a00      	lsrs	r0, r0, #8
 8006404:	70c8      	strb	r0, [r1, #3]
 8006406:	710a      	strb	r2, [r1, #4]
 8006408:	714a      	strb	r2, [r1, #5]
 800640a:	bd10      	pop	{r4, pc}

0800640c <.text_51>:
 800640c:	20000000 	.word	0x20000000

08006410 <.text_52>:
 8006410:	200002f8 	.word	0x200002f8

08006414 <.text_53>:
 8006414:	000083ff 	.word	0x000083ff

08006418 <.text_54>:
 8006418:	0000ffe0 	.word	0x0000ffe0

0800641c <.text_55>:
 800641c:	5f4c5250 	.word	0x5f4c5250
 8006420:	4e455645 	.word	0x4e455645
 8006424:	58525f54 	.word	0x58525f54
 8006428:	5349445f 	.word	0x5349445f
 800642c:	44524143 	.word	0x44524143
 8006430:	00004445 	.word	0x00004445

08006434 <strlen>:
 8006434:	2300      	movs	r3, #0
 8006436:	5cc2      	ldrb	r2, [r0, r3]
 8006438:	3301      	adds	r3, #1
 800643a:	2a00      	cmp	r2, #0
 800643c:	d1fb      	bne.n	8006436 <strlen+0x2>
 800643e:	1e58      	subs	r0, r3, #1
 8006440:	4770      	bx	lr
	...

08006444 <__udivsi3>:
 8006444:	2200      	movs	r2, #0
 8006446:	0843      	lsrs	r3, r0, #1
 8006448:	428b      	cmp	r3, r1
 800644a:	d374      	bcc.n	8006536 <__udivsi3+0xf2>
 800644c:	0903      	lsrs	r3, r0, #4
 800644e:	428b      	cmp	r3, r1
 8006450:	d35f      	bcc.n	8006512 <__udivsi3+0xce>
 8006452:	0a03      	lsrs	r3, r0, #8
 8006454:	428b      	cmp	r3, r1
 8006456:	d344      	bcc.n	80064e2 <__udivsi3+0x9e>
 8006458:	0b03      	lsrs	r3, r0, #12
 800645a:	428b      	cmp	r3, r1
 800645c:	d328      	bcc.n	80064b0 <__udivsi3+0x6c>
 800645e:	0c03      	lsrs	r3, r0, #16
 8006460:	428b      	cmp	r3, r1
 8006462:	d30d      	bcc.n	8006480 <__udivsi3+0x3c>
 8006464:	22ff      	movs	r2, #255	@ 0xff
 8006466:	0209      	lsls	r1, r1, #8
 8006468:	ba12      	rev	r2, r2
 800646a:	0c03      	lsrs	r3, r0, #16
 800646c:	428b      	cmp	r3, r1
 800646e:	d302      	bcc.n	8006476 <__udivsi3+0x32>
 8006470:	1212      	asrs	r2, r2, #8
 8006472:	0209      	lsls	r1, r1, #8
 8006474:	d065      	beq.n	8006542 <__udivsi3+0xfe>
 8006476:	0b03      	lsrs	r3, r0, #12
 8006478:	428b      	cmp	r3, r1
 800647a:	d319      	bcc.n	80064b0 <__udivsi3+0x6c>
 800647c:	e000      	b.n	8006480 <__udivsi3+0x3c>
 800647e:	0a09      	lsrs	r1, r1, #8
 8006480:	0bc3      	lsrs	r3, r0, #15
 8006482:	428b      	cmp	r3, r1
 8006484:	d301      	bcc.n	800648a <__udivsi3+0x46>
 8006486:	03cb      	lsls	r3, r1, #15
 8006488:	1ac0      	subs	r0, r0, r3
 800648a:	4152      	adcs	r2, r2
 800648c:	0b83      	lsrs	r3, r0, #14
 800648e:	428b      	cmp	r3, r1
 8006490:	d301      	bcc.n	8006496 <__udivsi3+0x52>
 8006492:	038b      	lsls	r3, r1, #14
 8006494:	1ac0      	subs	r0, r0, r3
 8006496:	4152      	adcs	r2, r2
 8006498:	0b43      	lsrs	r3, r0, #13
 800649a:	428b      	cmp	r3, r1
 800649c:	d301      	bcc.n	80064a2 <__udivsi3+0x5e>
 800649e:	034b      	lsls	r3, r1, #13
 80064a0:	1ac0      	subs	r0, r0, r3
 80064a2:	4152      	adcs	r2, r2
 80064a4:	0b03      	lsrs	r3, r0, #12
 80064a6:	428b      	cmp	r3, r1
 80064a8:	d301      	bcc.n	80064ae <__udivsi3+0x6a>
 80064aa:	030b      	lsls	r3, r1, #12
 80064ac:	1ac0      	subs	r0, r0, r3
 80064ae:	4152      	adcs	r2, r2
 80064b0:	0ac3      	lsrs	r3, r0, #11
 80064b2:	428b      	cmp	r3, r1
 80064b4:	d301      	bcc.n	80064ba <__udivsi3+0x76>
 80064b6:	02cb      	lsls	r3, r1, #11
 80064b8:	1ac0      	subs	r0, r0, r3
 80064ba:	4152      	adcs	r2, r2
 80064bc:	0a83      	lsrs	r3, r0, #10
 80064be:	428b      	cmp	r3, r1
 80064c0:	d301      	bcc.n	80064c6 <__udivsi3+0x82>
 80064c2:	028b      	lsls	r3, r1, #10
 80064c4:	1ac0      	subs	r0, r0, r3
 80064c6:	4152      	adcs	r2, r2
 80064c8:	0a43      	lsrs	r3, r0, #9
 80064ca:	428b      	cmp	r3, r1
 80064cc:	d301      	bcc.n	80064d2 <__udivsi3+0x8e>
 80064ce:	024b      	lsls	r3, r1, #9
 80064d0:	1ac0      	subs	r0, r0, r3
 80064d2:	4152      	adcs	r2, r2
 80064d4:	0a03      	lsrs	r3, r0, #8
 80064d6:	428b      	cmp	r3, r1
 80064d8:	d301      	bcc.n	80064de <__udivsi3+0x9a>
 80064da:	020b      	lsls	r3, r1, #8
 80064dc:	1ac0      	subs	r0, r0, r3
 80064de:	4152      	adcs	r2, r2
 80064e0:	d2cd      	bcs.n	800647e <__udivsi3+0x3a>
 80064e2:	09c3      	lsrs	r3, r0, #7
 80064e4:	428b      	cmp	r3, r1
 80064e6:	d301      	bcc.n	80064ec <__udivsi3+0xa8>
 80064e8:	01cb      	lsls	r3, r1, #7
 80064ea:	1ac0      	subs	r0, r0, r3
 80064ec:	4152      	adcs	r2, r2
 80064ee:	0983      	lsrs	r3, r0, #6
 80064f0:	428b      	cmp	r3, r1
 80064f2:	d301      	bcc.n	80064f8 <__udivsi3+0xb4>
 80064f4:	018b      	lsls	r3, r1, #6
 80064f6:	1ac0      	subs	r0, r0, r3
 80064f8:	4152      	adcs	r2, r2
 80064fa:	0943      	lsrs	r3, r0, #5
 80064fc:	428b      	cmp	r3, r1
 80064fe:	d301      	bcc.n	8006504 <__udivsi3+0xc0>
 8006500:	014b      	lsls	r3, r1, #5
 8006502:	1ac0      	subs	r0, r0, r3
 8006504:	4152      	adcs	r2, r2
 8006506:	0903      	lsrs	r3, r0, #4
 8006508:	428b      	cmp	r3, r1
 800650a:	d301      	bcc.n	8006510 <__udivsi3+0xcc>
 800650c:	010b      	lsls	r3, r1, #4
 800650e:	1ac0      	subs	r0, r0, r3
 8006510:	4152      	adcs	r2, r2
 8006512:	08c3      	lsrs	r3, r0, #3
 8006514:	428b      	cmp	r3, r1
 8006516:	d301      	bcc.n	800651c <__udivsi3+0xd8>
 8006518:	00cb      	lsls	r3, r1, #3
 800651a:	1ac0      	subs	r0, r0, r3
 800651c:	4152      	adcs	r2, r2
 800651e:	0883      	lsrs	r3, r0, #2
 8006520:	428b      	cmp	r3, r1
 8006522:	d301      	bcc.n	8006528 <__udivsi3+0xe4>
 8006524:	008b      	lsls	r3, r1, #2
 8006526:	1ac0      	subs	r0, r0, r3
 8006528:	4152      	adcs	r2, r2
 800652a:	0843      	lsrs	r3, r0, #1
 800652c:	428b      	cmp	r3, r1
 800652e:	d301      	bcc.n	8006534 <__udivsi3+0xf0>
 8006530:	004b      	lsls	r3, r1, #1
 8006532:	1ac0      	subs	r0, r0, r3
 8006534:	4152      	adcs	r2, r2
 8006536:	1a41      	subs	r1, r0, r1
 8006538:	d200      	bcs.n	800653c <__udivsi3+0xf8>
 800653a:	4601      	mov	r1, r0
 800653c:	4152      	adcs	r2, r2
 800653e:	4610      	mov	r0, r2
 8006540:	4770      	bx	lr
 8006542:	e7ff      	b.n	8006544 <__udivsi3+0x100>
 8006544:	b501      	push	{r0, lr}
 8006546:	2000      	movs	r0, #0
 8006548:	f000 f806 	bl	8006558 <__aeabi_idiv0>
 800654c:	bd02      	pop	{r1, pc}
 800654e:	46c0      	nop			@ (mov r8, r8)

08006550 <__aeabi_uidivmod>:
 8006550:	2900      	cmp	r1, #0
 8006552:	d0f7      	beq.n	8006544 <__udivsi3+0x100>
 8006554:	e776      	b.n	8006444 <__udivsi3>
 8006556:	4770      	bx	lr

08006558 <__aeabi_idiv0>:
 8006558:	4770      	bx	lr
 800655a:	46c0      	nop			@ (mov r8, r8)

0800655c <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 800655c:	b590      	push	{r4, r7, lr}
 800655e:	b087      	sub	sp, #28
 8006560:	af02      	add	r7, sp, #8
 8006562:	6078      	str	r0, [r7, #4]

  /* USER CODE END  tx_application_define */

  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8006564:	2380      	movs	r3, #128	@ 0x80
 8006566:	021b      	lsls	r3, r3, #8
 8006568:	4a11      	ldr	r2, [pc, #68]	@ (80065b0 <tx_application_define+0x54>)
 800656a:	4912      	ldr	r1, [pc, #72]	@ (80065b4 <tx_application_define+0x58>)
 800656c:	4812      	ldr	r0, [pc, #72]	@ (80065b8 <tx_application_define+0x5c>)
 800656e:	2434      	movs	r4, #52	@ 0x34
 8006570:	9400      	str	r4, [sp, #0]
 8006572:	f00c fb0b 	bl	8012b8c <_txe_byte_pool_create>
 8006576:	1e03      	subs	r3, r0, #0
 8006578:	d105      	bne.n	8006586 <tx_application_define+0x2a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800657a:	4b0f      	ldr	r3, [pc, #60]	@ (80065b8 <tx_application_define+0x5c>)
 800657c:	60fb      	str	r3, [r7, #12]

    if (App_ThreadX_Init(memory_ptr) != TX_SUCCESS)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	0018      	movs	r0, r3
 8006582:	f000 fcf9 	bl	8006f78 <App_ThreadX_Init>

    /* USER CODE END  App_ThreadX_Init_Success */

  }

  if (tx_byte_pool_create(&ux_device_app_byte_pool, "Ux App memory pool", ux_device_byte_pool_buffer, UX_DEVICE_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8006586:	2380      	movs	r3, #128	@ 0x80
 8006588:	021b      	lsls	r3, r3, #8
 800658a:	4a0c      	ldr	r2, [pc, #48]	@ (80065bc <tx_application_define+0x60>)
 800658c:	490c      	ldr	r1, [pc, #48]	@ (80065c0 <tx_application_define+0x64>)
 800658e:	480d      	ldr	r0, [pc, #52]	@ (80065c4 <tx_application_define+0x68>)
 8006590:	2434      	movs	r4, #52	@ 0x34
 8006592:	9400      	str	r4, [sp, #0]
 8006594:	f00c fafa 	bl	8012b8c <_txe_byte_pool_create>
 8006598:	1e03      	subs	r3, r0, #0
 800659a:	d105      	bne.n	80065a8 <tx_application_define+0x4c>
  {
    /* USER CODE BEGIN UX_Device_Byte_Pool_Success */

    /* USER CODE END UX_Device_Byte_Pool_Success */

    memory_ptr = (VOID *)&ux_device_app_byte_pool;
 800659c:	4b09      	ldr	r3, [pc, #36]	@ (80065c4 <tx_application_define+0x68>)
 800659e:	60fb      	str	r3, [r7, #12]

    if (MX_USBX_Device_Init(memory_ptr) != UX_SUCCESS)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	0018      	movs	r0, r3
 80065a4:	f016 fd5d 	bl	801d062 <MX_USBX_Device_Init>

    /* USER CODE BEGIN MX_USBX_Device_Init_Success */

    /* USER CODE END MX_USBX_Device_Init_Success */
  }
}
 80065a8:	46c0      	nop			@ (mov r8, r8)
 80065aa:	46bd      	mov	sp, r7
 80065ac:	b005      	add	sp, #20
 80065ae:	bd90      	pop	{r4, r7, pc}
 80065b0:	20000304 	.word	0x20000304
 80065b4:	0801e294 	.word	0x0801e294
 80065b8:	20008304 	.word	0x20008304
 80065bc:	20008338 	.word	0x20008338
 80065c0:	0801e2a8 	.word	0x0801e2a8
 80065c4:	20010338 	.word	0x20010338

080065c8 <USB2533_Init>:

#include "USB2533.h"
#include "i2c.h"


USB2533_StatusTypeDef USB2533_Init(USB2533_HandleTypeDef *dev, I2C_HandleTypeDef *i2cHandle){
 80065c8:	b5b0      	push	{r4, r5, r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]

    USB2533_StatusTypeDef status = USB2533_OK;
 80065d2:	210f      	movs	r1, #15
 80065d4:	187b      	adds	r3, r7, r1
 80065d6:	2200      	movs	r2, #0
 80065d8:	701a      	strb	r2, [r3, #0]
//    uint8_t regData;

    dev->i2cHandle = i2cHandle;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	683a      	ldr	r2, [r7, #0]
 80065de:	601a      	str	r2, [r3, #0]

    dev->current_page = 1;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	711a      	strb	r2, [r3, #4]


    /* TODO: config here */

    /* USB Attach. Exit SOC_CONFIG and Enter HUB_CONFIG Stage. */
    status = USB2533_WriteCommand(dev, USB2533_COMMAND_USB_ATTACH);
 80065e6:	000d      	movs	r5, r1
 80065e8:	187c      	adds	r4, r7, r1
 80065ea:	4a0b      	ldr	r2, [pc, #44]	@ (8006618 <USB2533_Init+0x50>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	0011      	movs	r1, r2
 80065f0:	0018      	movs	r0, r3
 80065f2:	f000 f813 	bl	800661c <USB2533_WriteCommand>
 80065f6:	0003      	movs	r3, r0
 80065f8:	7023      	strb	r3, [r4, #0]
    if (status != USB2533_OK){
 80065fa:	197b      	adds	r3, r7, r5
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <USB2533_Init+0x40>
    	return status;
 8006602:	197b      	adds	r3, r7, r5
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	e002      	b.n	800660e <USB2533_Init+0x46>
    }

    return status;
 8006608:	230f      	movs	r3, #15
 800660a:	18fb      	adds	r3, r7, r3
 800660c:	781b      	ldrb	r3, [r3, #0]
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b004      	add	sp, #16
 8006614:	bdb0      	pop	{r4, r5, r7, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	0000aa55 	.word	0x0000aa55

0800661c <USB2533_WriteCommand>:


//USB2533_StatusTypeDef USB2533_ReadRegister(USB2533_HandleTypeDef *dev, uint8_t reg, uint8_t *data);
//USB2533_StatusTypeDef USB2533_WriteRegister(USB2533_HandleTypeDef *dev, uint8_t reg, uint8_t *data);

USB2533_StatusTypeDef USB2533_WriteCommand(USB2533_HandleTypeDef *dev, uint16_t command){
 800661c:	b5b0      	push	{r4, r5, r7, lr}
 800661e:	b086      	sub	sp, #24
 8006620:	af02      	add	r7, sp, #8
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	000a      	movs	r2, r1
 8006626:	1cbb      	adds	r3, r7, #2
 8006628:	801a      	strh	r2, [r3, #0]

    USB2533_StatusTypeDef status = USB2533_OK;
 800662a:	240f      	movs	r4, #15
 800662c:	193b      	adds	r3, r7, r4
 800662e:	2200      	movs	r2, #0
 8006630:	701a      	strb	r2, [r3, #0]
	uint8_t regData[3];

	regData[0] = command >> 8; 				   /* Command MSB */
 8006632:	1cbb      	adds	r3, r7, #2
 8006634:	881b      	ldrh	r3, [r3, #0]
 8006636:	0a1b      	lsrs	r3, r3, #8
 8006638:	b29b      	uxth	r3, r3
 800663a:	b2da      	uxtb	r2, r3
 800663c:	210c      	movs	r1, #12
 800663e:	187b      	adds	r3, r7, r1
 8006640:	701a      	strb	r2, [r3, #0]
	regData[1] = (uint8_t) (command & 0x00FF); /* Command LSB */
 8006642:	1cbb      	adds	r3, r7, #2
 8006644:	881b      	ldrh	r3, [r3, #0]
 8006646:	b2da      	uxtb	r2, r3
 8006648:	187b      	adds	r3, r7, r1
 800664a:	705a      	strb	r2, [r3, #1]
	regData[2] = 0x00; 						   /* Command complete */
 800664c:	187b      	adds	r3, r7, r1
 800664e:	2200      	movs	r2, #0
 8006650:	709a      	strb	r2, [r3, #2]

    status = HAL_I2C_Master_Transmit(dev->i2cHandle, USB2533_I2C_CONFIG_ADDR, regData, 3, 100);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6818      	ldr	r0, [r3, #0]
 8006656:	0025      	movs	r5, r4
 8006658:	193c      	adds	r4, r7, r4
 800665a:	187a      	adds	r2, r7, r1
 800665c:	2364      	movs	r3, #100	@ 0x64
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	2303      	movs	r3, #3
 8006662:	215a      	movs	r1, #90	@ 0x5a
 8006664:	f002 f9e4 	bl	8008a30 <HAL_I2C_Master_Transmit>
 8006668:	0003      	movs	r3, r0
 800666a:	7023      	strb	r3, [r4, #0]

    return status;
 800666c:	197b      	adds	r3, r7, r5
 800666e:	781b      	ldrb	r3, [r3, #0]
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b004      	add	sp, #16
 8006676:	bdb0      	pop	{r4, r5, r7, pc}

08006678 <create_threads>:
TX_THREAD scan_keys_thread_ptr;



/* Place this function under "USER CODE BEGIN App_ThreadX_Init" */
void create_threads(){
 8006678:	b590      	push	{r4, r7, lr}
 800667a:	b089      	sub	sp, #36	@ 0x24
 800667c:	af08      	add	r7, sp, #32
	tx_thread_create(&scan_keys_thread_ptr, SCAN_KEYS_THREAD_NAME, scan_keys_thread, 0x1234, scan_keys_thread_stack, SCAN_KEYS_THREAD_STACK_SIZE, SCAN_KEYS_THREAD_PRIORITY, SCAN_KEYS_THREAD_PRIORITY, 1, TX_AUTO_START);
 800667e:	4c0d      	ldr	r4, [pc, #52]	@ (80066b4 <create_threads+0x3c>)
 8006680:	4a0d      	ldr	r2, [pc, #52]	@ (80066b8 <create_threads+0x40>)
 8006682:	490e      	ldr	r1, [pc, #56]	@ (80066bc <create_threads+0x44>)
 8006684:	480e      	ldr	r0, [pc, #56]	@ (80066c0 <create_threads+0x48>)
 8006686:	23b0      	movs	r3, #176	@ 0xb0
 8006688:	9306      	str	r3, [sp, #24]
 800668a:	2301      	movs	r3, #1
 800668c:	9305      	str	r3, [sp, #20]
 800668e:	2301      	movs	r3, #1
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	230f      	movs	r3, #15
 8006694:	9303      	str	r3, [sp, #12]
 8006696:	230f      	movs	r3, #15
 8006698:	9302      	str	r3, [sp, #8]
 800669a:	2380      	movs	r3, #128	@ 0x80
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	4b08      	ldr	r3, [pc, #32]	@ (80066c4 <create_threads+0x4c>)
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	0023      	movs	r3, r4
 80066a6:	f00c ff23 	bl	80134f0 <_txe_thread_create>
}
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	46bd      	mov	sp, r7
 80066ae:	b001      	add	sp, #4
 80066b0:	bd90      	pop	{r4, r7, pc}
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	00001234 	.word	0x00001234
 80066b8:	080069b9 	.word	0x080069b9
 80066bc:	0801e2bc 	.word	0x0801e2bc
 80066c0:	2001076c 	.word	0x2001076c
 80066c4:	2001036c 	.word	0x2001036c

080066c8 <USBD_HID_Keyboard_Activate>:
 *         This function is called when insertion of a HID Keyboard device.
 * @param  hid_instance: Pointer to the hid class instance.
 * @retval none
 */
VOID USBD_HID_Keyboard_Activate(VOID *hid_instance)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_HID_Keyboard_Activate */

	/* Save the HID keyboard instance */
	hid_keyboard = (UX_SLAVE_CLASS_HID*) hid_instance;
 80066d0:	4b03      	ldr	r3, [pc, #12]	@ (80066e0 <USBD_HID_Keyboard_Activate+0x18>)
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	601a      	str	r2, [r3, #0]

	/* USER CODE END USBD_HID_Keyboard_Activate */

	return;
 80066d6:	46c0      	nop			@ (mov r8, r8)
}
 80066d8:	46bd      	mov	sp, r7
 80066da:	b002      	add	sp, #8
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	46c0      	nop			@ (mov r8, r8)
 80066e0:	2001081c 	.word	0x2001081c

080066e4 <USBD_HID_Keyboard_Deactivate>:
 *         This function is called when extraction of a HID Keyboard device.
 * @param  hid_instance: Pointer to the hid class instance.
 * @retval none
 */
VOID USBD_HID_Keyboard_Deactivate(VOID *hid_instance)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN USBD_HID_Keyboard_Deactivate */
	UX_PARAMETER_NOT_USED(hid_instance);

	/* Reset the HID mouse instance */
	hid_keyboard = UX_NULL;
 80066ec:	4b03      	ldr	r3, [pc, #12]	@ (80066fc <USBD_HID_Keyboard_Deactivate+0x18>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]

	/* USER CODE END USBD_HID_Keyboard_Deactivate */

	return;
 80066f2:	46c0      	nop			@ (mov r8, r8)
}
 80066f4:	46bd      	mov	sp, r7
 80066f6:	b002      	add	sp, #8
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	46c0      	nop			@ (mov r8, r8)
 80066fc:	2001081c 	.word	0x2001081c

08006700 <USBD_HID_Keyboard_SetReport>:
 * @param  hid_event: Pointer to structure of the hid event.
 * @retval status
 */
UINT USBD_HID_Keyboard_SetReport(UX_SLAVE_CLASS_HID *hid_instance,
		UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
	UINT status = UX_SUCCESS;
 800670a:	2300      	movs	r3, #0
 800670c:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN USBD_HID_Keyboard_SetReport */
	UX_PARAMETER_NOT_USED(hid_instance);
	UX_PARAMETER_NOT_USED(hid_event);
	/* USER CODE END USBD_HID_Keyboard_SetReport */

	return status;
 800670e:	68fb      	ldr	r3, [r7, #12]
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	b004      	add	sp, #16
 8006716:	bd80      	pop	{r7, pc}

08006718 <USBD_HID_Keyboard_GetReport>:
 * @param  hid_event: Pointer to structure of the hid event.
 * @retval status
 */
UINT USBD_HID_Keyboard_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
		UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
	UINT status = UX_SUCCESS;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN USBD_HID_Keyboard_GetReport */
	UX_PARAMETER_NOT_USED(hid_instance);
	UX_PARAMETER_NOT_USED(hid_event);
	/* USER CODE END USBD_HID_Keyboard_GetReport */

	return status;
 8006726:	68fb      	ldr	r3, [r7, #12]
}
 8006728:	0018      	movs	r0, r3
 800672a:	46bd      	mov	sp, r7
 800672c:	b004      	add	sp, #16
 800672e:	bd80      	pop	{r7, pc}

08006730 <hid_keyboard_thread>:
/**
 * @brief  Function implementing usbx_hid_keyboard_thread_entry.
 * @param  thread_input: not used
 * @retval none
 */
void hid_keyboard_thread(uint32_t thread_input){
 8006730:	b5b0      	push	{r4, r5, r7, lr}
 8006732:	b090      	sub	sp, #64	@ 0x40
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]


	TX_PARAMETER_NOT_USED(thread_input);

	/* Get the pointer to the device */
	device = &_ux_system_slave -> ux_system_slave_device;
 8006738:	4b33      	ldr	r3, [pc, #204]	@ (8006808 <hid_keyboard_thread+0xd8>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3320      	adds	r3, #32
 800673e:	63bb      	str	r3, [r7, #56]	@ 0x38

	/* Reset the HID event structure */
	ux_utility_memory_set(&hid_event, 0, sizeof(UX_SLAVE_CLASS_HID_EVENT));
 8006740:	2308      	movs	r3, #8
 8006742:	18fb      	adds	r3, r7, r3
 8006744:	222c      	movs	r2, #44	@ 0x2c
 8006746:	2100      	movs	r1, #0
 8006748:	0018      	movs	r0, r3
 800674a:	f011 f8e7 	bl	801791c <_ux_utility_memory_set>

	while (1)
	{
		/* Check if the device state already configured */
		if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_keyboard != UX_NULL))
 800674e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2b03      	cmp	r3, #3
 8006754:	d154      	bne.n	8006800 <hid_keyboard_thread+0xd0>
 8006756:	4b2d      	ldr	r3, [pc, #180]	@ (800680c <hid_keyboard_thread+0xdc>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d050      	beq.n	8006800 <hid_keyboard_thread+0xd0>
		{
			/* Sleep Thread for 20ms */
			tx_thread_sleep(MS_TO_TICK(20));
 800675e:	2002      	movs	r0, #2
 8006760:	f00b fa6e 	bl	8011c40 <_tx_thread_sleep>

			current_state = HAL_GPIO_ReadPin(KEY_A6_GPIO_Port, KEY_A6_Pin);
 8006764:	2537      	movs	r5, #55	@ 0x37
 8006766:	197c      	adds	r4, r7, r5
 8006768:	2380      	movs	r3, #128	@ 0x80
 800676a:	00da      	lsls	r2, r3, #3
 800676c:	23a0      	movs	r3, #160	@ 0xa0
 800676e:	05db      	lsls	r3, r3, #23
 8006770:	0011      	movs	r1, r2
 8006772:	0018      	movs	r0, r3
 8006774:	f002 f860 	bl	8008838 <HAL_GPIO_ReadPin>
 8006778:	0003      	movs	r3, r0
 800677a:	7023      	strb	r3, [r4, #0]

			if (current_state == GPIO_PIN_RESET && previous_state == GPIO_PIN_SET){
 800677c:	197b      	adds	r3, r7, r5
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d118      	bne.n	80067b6 <hid_keyboard_thread+0x86>
 8006784:	233f      	movs	r3, #63	@ 0x3f
 8006786:	18fb      	adds	r3, r7, r3
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d113      	bne.n	80067b6 <hid_keyboard_thread+0x86>

				hid_event.ux_device_class_hid_event_length = 8;
 800678e:	2108      	movs	r1, #8
 8006790:	187b      	adds	r3, r7, r1
 8006792:	2208      	movs	r2, #8
 8006794:	629a      	str	r2, [r3, #40]	@ 0x28

				/* This byte is a modifier byte */
				hid_event.ux_device_class_hid_event_buffer[0] = 0;
 8006796:	187b      	adds	r3, r7, r1
 8006798:	2200      	movs	r2, #0
 800679a:	721a      	strb	r2, [r3, #8]

				/* This byte is reserved */
				hid_event.ux_device_class_hid_event_buffer[1] = 0;
 800679c:	187b      	adds	r3, r7, r1
 800679e:	2200      	movs	r2, #0
 80067a0:	725a      	strb	r2, [r3, #9]

				/* Update key button byte */
				hid_event.ux_device_class_hid_event_buffer[2] = 34;
 80067a2:	187b      	adds	r3, r7, r1
 80067a4:	2222      	movs	r2, #34	@ 0x22
 80067a6:	729a      	strb	r2, [r3, #10]

				/* Send keyboard event */
				ux_device_class_hid_event_set(hid_keyboard, &hid_event);
 80067a8:	4b18      	ldr	r3, [pc, #96]	@ (800680c <hid_keyboard_thread+0xdc>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	187a      	adds	r2, r7, r1
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f011 fd01 	bl	80181b8 <_ux_device_class_hid_event_set>
			}


			if (current_state == GPIO_PIN_SET && previous_state == GPIO_PIN_RESET){
 80067b6:	2337      	movs	r3, #55	@ 0x37
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d118      	bne.n	80067f2 <hid_keyboard_thread+0xc2>
 80067c0:	233f      	movs	r3, #63	@ 0x3f
 80067c2:	18fb      	adds	r3, r7, r3
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d113      	bne.n	80067f2 <hid_keyboard_thread+0xc2>

				hid_event.ux_device_class_hid_event_length = 8;
 80067ca:	2108      	movs	r1, #8
 80067cc:	187b      	adds	r3, r7, r1
 80067ce:	2208      	movs	r2, #8
 80067d0:	629a      	str	r2, [r3, #40]	@ 0x28

				/* This byte is a modifier byte */
				hid_event.ux_device_class_hid_event_buffer[0] = 0;
 80067d2:	187b      	adds	r3, r7, r1
 80067d4:	2200      	movs	r2, #0
 80067d6:	721a      	strb	r2, [r3, #8]

				/* This byte is reserved */
				hid_event.ux_device_class_hid_event_buffer[1] = 0;
 80067d8:	187b      	adds	r3, r7, r1
 80067da:	2200      	movs	r2, #0
 80067dc:	725a      	strb	r2, [r3, #9]

				/* Update key button byte */
				hid_event.ux_device_class_hid_event_buffer[2] = 0;
 80067de:	187b      	adds	r3, r7, r1
 80067e0:	2200      	movs	r2, #0
 80067e2:	729a      	strb	r2, [r3, #10]

				/* Send keyboard event */
				ux_device_class_hid_event_set(hid_keyboard, &hid_event);
 80067e4:	4b09      	ldr	r3, [pc, #36]	@ (800680c <hid_keyboard_thread+0xdc>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	187a      	adds	r2, r7, r1
 80067ea:	0011      	movs	r1, r2
 80067ec:	0018      	movs	r0, r3
 80067ee:	f011 fce3 	bl	80181b8 <_ux_device_class_hid_event_set>
			}

			previous_state = current_state;
 80067f2:	233f      	movs	r3, #63	@ 0x3f
 80067f4:	18fb      	adds	r3, r7, r3
 80067f6:	2237      	movs	r2, #55	@ 0x37
 80067f8:	18ba      	adds	r2, r7, r2
 80067fa:	7812      	ldrb	r2, [r2, #0]
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e002      	b.n	8006806 <hid_keyboard_thread+0xd6>
			//      }
		}
		else
		{
			/* Sleep thread for 10ms */
			tx_thread_sleep(MS_TO_TICK(10));
 8006800:	2001      	movs	r0, #1
 8006802:	f00b fa1d 	bl	8011c40 <_tx_thread_sleep>
		if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_keyboard != UX_NULL))
 8006806:	e7a2      	b.n	800674e <hid_keyboard_thread+0x1e>
 8006808:	200116a4 	.word	0x200116a4
 800680c:	2001081c 	.word	0x2001081c

08006810 <USBD_HID_Mouse_Activate>:
  *         This function is called when insertion of a HID Mouse device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Mouse_Activate(VOID *hid_instance)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Mouse_Activate */

  /* Save the HID mouse instance */
  hid_mouse = (UX_SLAVE_CLASS_HID*) hid_instance;
 8006818:	4b03      	ldr	r3, [pc, #12]	@ (8006828 <USBD_HID_Mouse_Activate+0x18>)
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]

  /* USER CODE END USBD_HID_Mouse_Activate */

  return;
 800681e:	46c0      	nop			@ (mov r8, r8)
}
 8006820:	46bd      	mov	sp, r7
 8006822:	b002      	add	sp, #8
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	20010820 	.word	0x20010820

0800682c <USBD_HID_Mouse_Deactivate>:
  *         This function is called when extraction of a HID Mouse device.
  * @param  hid_instance: Pointer to the hid class instance.
  * @retval none
  */
VOID USBD_HID_Mouse_Deactivate(VOID *hid_instance)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b082      	sub	sp, #8
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_HID_Mouse_Deactivate */
  UX_PARAMETER_NOT_USED(hid_instance);

  /* Reset the HID mouse instance */
  hid_mouse = UX_NULL;
 8006834:	4b03      	ldr	r3, [pc, #12]	@ (8006844 <USBD_HID_Mouse_Deactivate+0x18>)
 8006836:	2200      	movs	r2, #0
 8006838:	601a      	str	r2, [r3, #0]

  /* USER CODE END USBD_HID_Mouse_Deactivate */

  return;
 800683a:	46c0      	nop			@ (mov r8, r8)
}
 800683c:	46bd      	mov	sp, r7
 800683e:	b002      	add	sp, #8
 8006840:	bd80      	pop	{r7, pc}
 8006842:	46c0      	nop			@ (mov r8, r8)
 8006844:	20010820 	.word	0x20010820

08006848 <USBD_HID_Mouse_SetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Mouse_SetReport(UX_SLAVE_CLASS_HID *hid_instance,
                              UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 8006852:	2300      	movs	r3, #0
 8006854:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Mouse_SetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Mouse_SetReport */

  return status;
 8006856:	68fb      	ldr	r3, [r7, #12]
}
 8006858:	0018      	movs	r0, r3
 800685a:	46bd      	mov	sp, r7
 800685c:	b004      	add	sp, #16
 800685e:	bd80      	pop	{r7, pc}

08006860 <USBD_HID_Mouse_GetReport>:
  * @param  hid_event: Pointer to structure of the hid event.
  * @retval status
  */
UINT USBD_HID_Mouse_GetReport(UX_SLAVE_CLASS_HID *hid_instance,
                              UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  UINT status = UX_SUCCESS;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN USBD_HID_Mouse_GetReport */
  UX_PARAMETER_NOT_USED(hid_instance);
  UX_PARAMETER_NOT_USED(hid_event);
  /* USER CODE END USBD_HID_Mouse_GetReport */

  return status;
 800686e:	68fb      	ldr	r3, [r7, #12]
}
 8006870:	0018      	movs	r0, r3
 8006872:	46bd      	mov	sp, r7
 8006874:	b004      	add	sp, #16
 8006876:	bd80      	pop	{r7, pc}

08006878 <hid_mouse_thread>:
  * @brief  Function implementing usbx_hid_mouse_thread_entry.
  * @param  thread_input: not used
  * @retval none
  */
void hid_mouse_thread(uint32_t thread_input)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08e      	sub	sp, #56	@ 0x38
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UX_SLAVE_CLASS_HID_EVENT hid_event;

  TX_PARAMETER_NOT_USED(thread_input);

  /* Get the pointer to the device */
  device = &_ux_system_slave -> ux_system_slave_device;
 8006880:	4b0d      	ldr	r3, [pc, #52]	@ (80068b8 <hid_mouse_thread+0x40>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3320      	adds	r3, #32
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Reset the HID event structure */
  ux_utility_memory_set(&hid_event, 0, sizeof(UX_SLAVE_CLASS_HID_EVENT));
 8006888:	2308      	movs	r3, #8
 800688a:	18fb      	adds	r3, r7, r3
 800688c:	222c      	movs	r2, #44	@ 0x2c
 800688e:	2100      	movs	r1, #0
 8006890:	0018      	movs	r0, r3
 8006892:	f011 f843 	bl	801791c <_ux_utility_memory_set>

  while (1)
  {
    /* Check if the device state already configured */
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_mouse != UX_NULL))
 8006896:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	2b03      	cmp	r3, #3
 800689c:	d107      	bne.n	80068ae <hid_mouse_thread+0x36>
 800689e:	4b07      	ldr	r3, [pc, #28]	@ (80068bc <hid_mouse_thread+0x44>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <hid_mouse_thread+0x36>
    {
      /* Sleep for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 80068a6:	2001      	movs	r0, #1
 80068a8:	f00b f9ca 	bl	8011c40 <_tx_thread_sleep>
 80068ac:	e002      	b.n	80068b4 <hid_mouse_thread+0x3c>
//      JoyState = JOY_NONE;
    }
    else
    {
      /* Sleep thread for 10ms */
      tx_thread_sleep(MS_TO_TICK(10));
 80068ae:	2001      	movs	r0, #1
 80068b0:	f00b f9c6 	bl	8011c40 <_tx_thread_sleep>
    if ((device->ux_slave_device_state == UX_DEVICE_CONFIGURED) && (hid_mouse != UX_NULL))
 80068b4:	e7ef      	b.n	8006896 <hid_mouse_thread+0x1e>
 80068b6:	46c0      	nop			@ (mov r8, r8)
 80068b8:	200116a4 	.word	0x200116a4
 80068bc:	20010820 	.word	0x20010820

080068c0 <USBD_STORAGE_Activate>:
  *         This function is called when insertion of a storage device.
  * @param  storage_instance: Pointer to the storage class instance.
  * @retval none
  */
VOID USBD_STORAGE_Activate(VOID *storage_instance)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_STORAGE_Activate */
  UX_PARAMETER_NOT_USED(storage_instance);
  /* USER CODE END USBD_STORAGE_Activate */

  return;
 80068c8:	46c0      	nop			@ (mov r8, r8)
}
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <USBD_STORAGE_Deactivate>:
  *         This function is called when extraction of a storage device.
  * @param  storage_instance: Pointer to the storage class instance.
  * @retval none
  */
VOID USBD_STORAGE_Deactivate(VOID *storage_instance)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN USBD_STORAGE_Activate */
  UX_PARAMETER_NOT_USED(storage_instance);
  /* USER CODE END USBD_STORAGE_Activate */

  return;
 80068d8:	46c0      	nop			@ (mov r8, r8)
}
 80068da:	46bd      	mov	sp, r7
 80068dc:	b002      	add	sp, #8
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_STORAGE_Read>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Read(VOID *storage_instance, ULONG lun, UCHAR *data_pointer,
                       ULONG number_blocks, ULONG lba, ULONG *media_status)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN USBD_STORAGE_Read */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_status);

  ULONG ReadFlags = 0U;
 80068f2:	2300      	movs	r3, #0
 80068f4:	613b      	str	r3, [r7, #16]

  /* USER CODE END USBD_STORAGE_Read */

  return status;
 80068f6:	697b      	ldr	r3, [r7, #20]
}
 80068f8:	0018      	movs	r0, r3
 80068fa:	46bd      	mov	sp, r7
 80068fc:	b006      	add	sp, #24
 80068fe:	bd80      	pop	{r7, pc}

08006900 <USBD_STORAGE_Write>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Write(VOID *storage_instance, ULONG lun, UCHAR *data_pointer,
                        ULONG number_blocks, ULONG lba, ULONG *media_status)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN USBD_STORAGE_Write */
  UX_PARAMETER_NOT_USED(storage_instance);
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_status);

  ULONG WriteFlags = 0U;
 8006912:	2300      	movs	r3, #0
 8006914:	613b      	str	r3, [r7, #16]



  return status;
 8006916:	697b      	ldr	r3, [r7, #20]
}
 8006918:	0018      	movs	r0, r3
 800691a:	46bd      	mov	sp, r7
 800691c:	b006      	add	sp, #24
 800691e:	bd80      	pop	{r7, pc}

08006920 <USBD_STORAGE_Flush>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Flush(VOID *storage_instance, ULONG lun, ULONG number_blocks,
                        ULONG lba, ULONG *media_status)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 800692e:	2300      	movs	r3, #0
 8006930:	617b      	str	r3, [r7, #20]
  UX_PARAMETER_NOT_USED(number_blocks);
  UX_PARAMETER_NOT_USED(lba);
  UX_PARAMETER_NOT_USED(media_status);
  /* USER CODE END USBD_STORAGE_Flush */

  return status;
 8006932:	697b      	ldr	r3, [r7, #20]
}
 8006934:	0018      	movs	r0, r3
 8006936:	46bd      	mov	sp, r7
 8006938:	b006      	add	sp, #24
 800693a:	bd80      	pop	{r7, pc}

0800693c <USBD_STORAGE_Status>:
  *                       callback return value.
  * @retval status
  */
UINT USBD_STORAGE_Status(VOID *storage_instance, ULONG lun, ULONG media_id,
                         ULONG *media_status)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
  UX_PARAMETER_NOT_USED(lun);
  UX_PARAMETER_NOT_USED(media_id);
  UX_PARAMETER_NOT_USED(media_status);
  /* USER CODE END USBD_STORAGE_Status */

  return status;
 800694e:	697b      	ldr	r3, [r7, #20]
}
 8006950:	0018      	movs	r0, r3
 8006952:	46bd      	mov	sp, r7
 8006954:	b006      	add	sp, #24
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_STORAGE_Notification>:
  * @retval status
  */
UINT USBD_STORAGE_Notification(VOID *storage_instance, ULONG lun, ULONG media_id,
                               ULONG notification_class, UCHAR **media_notification,
                               ULONG *media_notification_length)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b086      	sub	sp, #24
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
 8006964:	603b      	str	r3, [r7, #0]
  UINT status = UX_SUCCESS;
 8006966:	2300      	movs	r3, #0
 8006968:	617b      	str	r3, [r7, #20]
  UX_PARAMETER_NOT_USED(notification_class);
  UX_PARAMETER_NOT_USED(media_notification);
  UX_PARAMETER_NOT_USED(media_notification_length);
  /* USER CODE END USBD_STORAGE_Notification */

  return status;
 800696a:	697b      	ldr	r3, [r7, #20]
}
 800696c:	0018      	movs	r0, r3
 800696e:	46bd      	mov	sp, r7
 8006970:	b006      	add	sp, #24
 8006972:	bd80      	pop	{r7, pc}

08006974 <USBD_STORAGE_GetMediaLastLba>:
  *         Get Media last LBA.
  * @param  none
  * @retval last lba
  */
ULONG USBD_STORAGE_GetMediaLastLba(VOID)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
  ULONG LastLba = 0U;
 800697a:	2300      	movs	r3, #0
 800697c:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN USBD_STORAGE_GetMediaLastLba */

  LastLba = (ULONG) 1; // TODO: get better value
 800697e:	2301      	movs	r3, #1
 8006980:	607b      	str	r3, [r7, #4]

  /* USER CODE END USBD_STORAGE_GetMediaLastLba */

  return LastLba;
 8006982:	687b      	ldr	r3, [r7, #4]
}
 8006984:	0018      	movs	r0, r3
 8006986:	46bd      	mov	sp, r7
 8006988:	b002      	add	sp, #8
 800698a:	bd80      	pop	{r7, pc}

0800698c <USBD_STORAGE_GetMediaBlocklength>:
  *         Get Media block length.
  * @param  none.
  * @retval block length.
  */
ULONG USBD_STORAGE_GetMediaBlocklength(VOID)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
  ULONG MediaBlockLen = 0U;
 8006992:	2300      	movs	r3, #0
 8006994:	607b      	str	r3, [r7, #4]

  /* USER CODE BEGIN USBD_STORAGE_GetMediaBlocklength */

  MediaBlockLen = (ULONG) 512; // TODO: get better value
 8006996:	2380      	movs	r3, #128	@ 0x80
 8006998:	009b      	lsls	r3, r3, #2
 800699a:	607b      	str	r3, [r7, #4]

  /* USER CODE END USBD_STORAGE_GetMediaBlocklength */

  return MediaBlockLen;
 800699c:	687b      	ldr	r3, [r7, #4]
}
 800699e:	0018      	movs	r0, r3
 80069a0:	46bd      	mov	sp, r7
 80069a2:	b002      	add	sp, #8
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <msc_thread>:




void msc_thread(uint32_t thread_input){
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]

}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b002      	add	sp, #8
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <scan_keys_thread>:
#define PORT_B_PINS (KEY_B4_Pin | KEY_A1_Pin | KEY_C5_Pin | ENC_SW_Pin | KEY_E3_Pin | KEY_E2_Pin | KEY_A2_Pin | KEY_B5_Pin | KEY_A3_Pin)
#define PORT_C_PINS (KEY_A4_Pin | KEY_A5_Pin | KEY_E1_Pin | KEY_D1_Pin | KEY_D2_Pin)
#define PORT_D_PINS (KEY_C6_Pin)
#define PORT_F_PINS (KEY_D3_Pin | KEY_D4_Pin)

void scan_keys_thread(uint32_t initial_input){
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]

	uint16_t keys_pressed_port_a = 0;
 80069c0:	231c      	movs	r3, #28
 80069c2:	18fb      	adds	r3, r7, r3
 80069c4:	2200      	movs	r2, #0
 80069c6:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_b = 0;
 80069c8:	231a      	movs	r3, #26
 80069ca:	18fb      	adds	r3, r7, r3
 80069cc:	2200      	movs	r2, #0
 80069ce:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_c = 0;
 80069d0:	2318      	movs	r3, #24
 80069d2:	18fb      	adds	r3, r7, r3
 80069d4:	2200      	movs	r2, #0
 80069d6:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_d = 0;
 80069d8:	2316      	movs	r3, #22
 80069da:	18fb      	adds	r3, r7, r3
 80069dc:	2200      	movs	r2, #0
 80069de:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_f = 0;
 80069e0:	2314      	movs	r3, #20
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	2200      	movs	r2, #0
 80069e6:	801a      	strh	r2, [r3, #0]

	uint16_t keys_pressed_port_a_prev = 0;
 80069e8:	231e      	movs	r3, #30
 80069ea:	18fb      	adds	r3, r7, r3
 80069ec:	2200      	movs	r2, #0
 80069ee:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_b_prev = 0;
 80069f0:	2312      	movs	r3, #18
 80069f2:	18fb      	adds	r3, r7, r3
 80069f4:	2200      	movs	r2, #0
 80069f6:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_c_prev = 0;
 80069f8:	2310      	movs	r3, #16
 80069fa:	18fb      	adds	r3, r7, r3
 80069fc:	2200      	movs	r2, #0
 80069fe:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_d_prev = 0;
 8006a00:	230e      	movs	r3, #14
 8006a02:	18fb      	adds	r3, r7, r3
 8006a04:	2200      	movs	r2, #0
 8006a06:	801a      	strh	r2, [r3, #0]
	uint16_t keys_pressed_port_f_prev = 0;
 8006a08:	230c      	movs	r3, #12
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	801a      	strh	r2, [r3, #0]

	while (1){
		// TODO: atomic load IDR
		keys_pressed_port_a = (GPIOA->IDR) & PORT_A_PINS;
 8006a10:	23a0      	movs	r3, #160	@ 0xa0
 8006a12:	05db      	lsls	r3, r3, #23
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	b29a      	uxth	r2, r3
 8006a18:	201c      	movs	r0, #28
 8006a1a:	183b      	adds	r3, r7, r0
 8006a1c:	4928      	ldr	r1, [pc, #160]	@ (8006ac0 <scan_keys_thread+0x108>)
 8006a1e:	400a      	ands	r2, r1
 8006a20:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_b = (GPIOB->IDR) & PORT_B_PINS;
 8006a22:	4b28      	ldr	r3, [pc, #160]	@ (8006ac4 <scan_keys_thread+0x10c>)
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	231a      	movs	r3, #26
 8006a2a:	18fb      	adds	r3, r7, r3
 8006a2c:	4926      	ldr	r1, [pc, #152]	@ (8006ac8 <scan_keys_thread+0x110>)
 8006a2e:	400a      	ands	r2, r1
 8006a30:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_c = (GPIOC->IDR) & PORT_C_PINS;
 8006a32:	4b26      	ldr	r3, [pc, #152]	@ (8006acc <scan_keys_thread+0x114>)
 8006a34:	691b      	ldr	r3, [r3, #16]
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	2318      	movs	r3, #24
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	4924      	ldr	r1, [pc, #144]	@ (8006ad0 <scan_keys_thread+0x118>)
 8006a3e:	400a      	ands	r2, r1
 8006a40:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_d = (GPIOD->IDR) & PORT_D_PINS;
 8006a42:	4b24      	ldr	r3, [pc, #144]	@ (8006ad4 <scan_keys_thread+0x11c>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	2316      	movs	r3, #22
 8006a4a:	18fb      	adds	r3, r7, r3
 8006a4c:	2102      	movs	r1, #2
 8006a4e:	400a      	ands	r2, r1
 8006a50:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_f = (GPIOF->IDR) & PORT_F_PINS;
 8006a52:	4b21      	ldr	r3, [pc, #132]	@ (8006ad8 <scan_keys_thread+0x120>)
 8006a54:	691b      	ldr	r3, [r3, #16]
 8006a56:	b29a      	uxth	r2, r3
 8006a58:	2314      	movs	r3, #20
 8006a5a:	18fb      	adds	r3, r7, r3
 8006a5c:	2103      	movs	r1, #3
 8006a5e:	400a      	ands	r2, r1
 8006a60:	801a      	strh	r2, [r3, #0]





		if (keys_pressed_port_a_prev != keys_pressed_port_a){
 8006a62:	231e      	movs	r3, #30
 8006a64:	18fa      	adds	r2, r7, r3
 8006a66:	183b      	adds	r3, r7, r0
 8006a68:	8812      	ldrh	r2, [r2, #0]
 8006a6a:	881b      	ldrh	r3, [r3, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d004      	beq.n	8006a7a <scan_keys_thread+0xc2>
			HAL_GPIO_TogglePin(STAT1_LED_GPIO_Port, STAT1_LED_Pin);
 8006a70:	4b18      	ldr	r3, [pc, #96]	@ (8006ad4 <scan_keys_thread+0x11c>)
 8006a72:	2108      	movs	r1, #8
 8006a74:	0018      	movs	r0, r3
 8006a76:	f001 ff19 	bl	80088ac <HAL_GPIO_TogglePin>
		}

		keys_pressed_port_a_prev = keys_pressed_port_a;
 8006a7a:	231e      	movs	r3, #30
 8006a7c:	18fb      	adds	r3, r7, r3
 8006a7e:	221c      	movs	r2, #28
 8006a80:	18ba      	adds	r2, r7, r2
 8006a82:	8812      	ldrh	r2, [r2, #0]
 8006a84:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_b_prev = keys_pressed_port_b;
 8006a86:	2312      	movs	r3, #18
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	221a      	movs	r2, #26
 8006a8c:	18ba      	adds	r2, r7, r2
 8006a8e:	8812      	ldrh	r2, [r2, #0]
 8006a90:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_c_prev = keys_pressed_port_c;
 8006a92:	2310      	movs	r3, #16
 8006a94:	18fb      	adds	r3, r7, r3
 8006a96:	2218      	movs	r2, #24
 8006a98:	18ba      	adds	r2, r7, r2
 8006a9a:	8812      	ldrh	r2, [r2, #0]
 8006a9c:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_d_prev = keys_pressed_port_d;
 8006a9e:	230e      	movs	r3, #14
 8006aa0:	18fb      	adds	r3, r7, r3
 8006aa2:	2216      	movs	r2, #22
 8006aa4:	18ba      	adds	r2, r7, r2
 8006aa6:	8812      	ldrh	r2, [r2, #0]
 8006aa8:	801a      	strh	r2, [r3, #0]
		keys_pressed_port_f_prev = keys_pressed_port_f;
 8006aaa:	230c      	movs	r3, #12
 8006aac:	18fb      	adds	r3, r7, r3
 8006aae:	2214      	movs	r2, #20
 8006ab0:	18ba      	adds	r2, r7, r2
 8006ab2:	8812      	ldrh	r2, [r2, #0]
 8006ab4:	801a      	strh	r2, [r3, #0]

		tx_thread_sleep(10); // TODO: Remove sleep and do proper timing
 8006ab6:	200a      	movs	r0, #10
 8006ab8:	f00b f8c2 	bl	8011c40 <_tx_thread_sleep>
		keys_pressed_port_a = (GPIOA->IDR) & PORT_A_PINS;
 8006abc:	e7a8      	b.n	8006a10 <scan_keys_thread+0x58>
 8006abe:	46c0      	nop			@ (mov r8, r8)
 8006ac0:	ffff86ff 	.word	0xffff86ff
 8006ac4:	50000400 	.word	0x50000400
 8006ac8:	00001f47 	.word	0x00001f47
 8006acc:	50000800 	.word	0x50000800
 8006ad0:	ffffe0c0 	.word	0xffffe0c0
 8006ad4:	50000c00 	.word	0x50000c00
 8006ad8:	50001400 	.word	0x50001400

08006adc <usb_init>:
ULONG storage_interface_number;
ULONG storage_configuration_number;
UX_SLAVE_CLASS_STORAGE_PARAMETER storage_parameter;

UINT usb_init(VOID *memory_ptr)
{
 8006adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ade:	b097      	sub	sp, #92	@ 0x5c
 8006ae0:	af08      	add	r7, sp, #32
 8006ae2:	6078      	str	r0, [r7, #4]
	UINT ret = UX_SUCCESS;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	637b      	str	r3, [r7, #52]	@ 0x34
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30
	UCHAR *pointer;

	(void)byte_pool;

	/* Allocate the stack for USBX Memory */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, USBX_MEMORY_SIZE, TX_NO_WAIT) != TX_SUCCESS)
 8006aec:	23ec      	movs	r3, #236	@ 0xec
 8006aee:	019a      	lsls	r2, r3, #6
 8006af0:	230c      	movs	r3, #12
 8006af2:	18f9      	adds	r1, r7, r3
 8006af4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006af6:	2300      	movs	r3, #0
 8006af8:	f00b ffd2 	bl	8012aa0 <_txe_byte_allocate>
 8006afc:	1e03      	subs	r3, r0, #0
 8006afe:	d001      	beq.n	8006b04 <usb_init+0x28>
	{
		/* USER CODE BEGIN USBX_ALLOCATE_STACK_ERORR */
		return TX_POOL_ERROR;
 8006b00:	2302      	movs	r3, #2
 8006b02:	e197      	b.n	8006e34 <usb_init+0x358>
		/* USER CODE END USBX_ALLOCATE_STACK_ERORR */
	}

	/* Initialise USBX Memory */
	if (ux_system_initialize(pointer, USBX_MEMORY_SIZE, UX_NULL, 0) != UX_SUCCESS)
 8006b04:	68f8      	ldr	r0, [r7, #12]
 8006b06:	23ec      	movs	r3, #236	@ 0xec
 8006b08:	0199      	lsls	r1, r3, #6
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f010 fad1 	bl	80170b4 <_ux_system_initialize>
 8006b12:	1e03      	subs	r3, r0, #0
 8006b14:	d001      	beq.n	8006b1a <usb_init+0x3e>
	{
		/* USER CODE BEGIN USBX_SYSTEM_INITIALIZE_ERORR */
		return UX_ERROR;
 8006b16:	23ff      	movs	r3, #255	@ 0xff
 8006b18:	e18c      	b.n	8006e34 <usb_init+0x358>
		/* USER CODE END USBX_SYSTEM_INITIALIZE_ERORR */
	}

	/* Get Device Framework High Speed and get the length */
	device_framework_high_speed = USBD_Get_Device_Framework_Speed(USBD_HIGH_SPEED, &device_framework_hs_length);
 8006b1a:	231c      	movs	r3, #28
 8006b1c:	18fb      	adds	r3, r7, r3
 8006b1e:	0019      	movs	r1, r3
 8006b20:	2001      	movs	r0, #1
 8006b22:	f016 faaf 	bl	801d084 <USBD_Get_Device_Framework_Speed>
 8006b26:	0003      	movs	r3, r0
 8006b28:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Get Device Framework Full Speed and get the length */
	device_framework_full_speed = USBD_Get_Device_Framework_Speed(USBD_FULL_SPEED, &device_framework_fs_length);
 8006b2a:	2318      	movs	r3, #24
 8006b2c:	18fb      	adds	r3, r7, r3
 8006b2e:	0019      	movs	r1, r3
 8006b30:	2000      	movs	r0, #0
 8006b32:	f016 faa7 	bl	801d084 <USBD_Get_Device_Framework_Speed>
 8006b36:	0003      	movs	r3, r0
 8006b38:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Get String Framework and get the length */
	string_framework = USBD_Get_String_Framework(&string_framework_length);
 8006b3a:	2314      	movs	r3, #20
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f016 faea 	bl	801d118 <USBD_Get_String_Framework>
 8006b44:	0003      	movs	r3, r0
 8006b46:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Get Language Id Framework and get the length */
	language_id_framework = USBD_Get_Language_Id_Framework(&language_id_framework_length);
 8006b48:	2310      	movs	r3, #16
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	0018      	movs	r0, r3
 8006b4e:	f016 fb85 	bl	801d25c <USBD_Get_Language_Id_Framework>
 8006b52:	0003      	movs	r3, r0
 8006b54:	623b      	str	r3, [r7, #32]

	/* Install the device portion of USBX */
	if (ux_device_stack_initialize(device_framework_high_speed,
 8006b56:	69f9      	ldr	r1, [r7, #28]
 8006b58:	69bd      	ldr	r5, [r7, #24]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	6abc      	ldr	r4, [r7, #40]	@ 0x28
 8006b60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b62:	2600      	movs	r6, #0
 8006b64:	9604      	str	r6, [sp, #16]
 8006b66:	9203      	str	r2, [sp, #12]
 8006b68:	6a3a      	ldr	r2, [r7, #32]
 8006b6a:	9202      	str	r2, [sp, #8]
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b70:	9300      	str	r3, [sp, #0]
 8006b72:	002b      	movs	r3, r5
 8006b74:	0022      	movs	r2, r4
 8006b76:	f015 f96d 	bl	801be54 <_ux_device_stack_initialize>
 8006b7a:	1e03      	subs	r3, r0, #0
 8006b7c:	d001      	beq.n	8006b82 <usb_init+0xa6>
			string_framework_length,
			language_id_framework,
			language_id_framework_length,
			UX_NULL) != UX_SUCCESS)
	{
		return UX_ERROR;
 8006b7e:	23ff      	movs	r3, #255	@ 0xff
 8006b80:	e158      	b.n	8006e34 <usb_init+0x358>
	}

	/* Initialize the hid mouse class parameters for the device */
	hid_mouse_parameter.ux_slave_class_hid_instance_activate         = USBD_HID_Mouse_Activate;
 8006b82:	4bae      	ldr	r3, [pc, #696]	@ (8006e3c <usb_init+0x360>)
 8006b84:	4aae      	ldr	r2, [pc, #696]	@ (8006e40 <usb_init+0x364>)
 8006b86:	601a      	str	r2, [r3, #0]
	hid_mouse_parameter.ux_slave_class_hid_instance_deactivate       = USBD_HID_Mouse_Deactivate;
 8006b88:	4bac      	ldr	r3, [pc, #688]	@ (8006e3c <usb_init+0x360>)
 8006b8a:	4aae      	ldr	r2, [pc, #696]	@ (8006e44 <usb_init+0x368>)
 8006b8c:	605a      	str	r2, [r3, #4]
	hid_mouse_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_MOUSE);
 8006b8e:	2002      	movs	r0, #2
 8006b90:	f016 fbf0 	bl	801d374 <USBD_HID_ReportDesc>
 8006b94:	0002      	movs	r2, r0
 8006b96:	4ba9      	ldr	r3, [pc, #676]	@ (8006e3c <usb_init+0x360>)
 8006b98:	609a      	str	r2, [r3, #8]
	hid_mouse_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 8006b9a:	2002      	movs	r0, #2
 8006b9c:	f016 fc08 	bl	801d3b0 <USBD_HID_ReportDesc_length>
 8006ba0:	0003      	movs	r3, r0
 8006ba2:	001a      	movs	r2, r3
 8006ba4:	4ba5      	ldr	r3, [pc, #660]	@ (8006e3c <usb_init+0x360>)
 8006ba6:	611a      	str	r2, [r3, #16]
	hid_mouse_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8006ba8:	4ba4      	ldr	r3, [pc, #656]	@ (8006e3c <usb_init+0x360>)
 8006baa:	2200      	movs	r2, #0
 8006bac:	60da      	str	r2, [r3, #12]
	hid_mouse_parameter.ux_device_class_hid_parameter_callback       = USBD_HID_Mouse_SetReport;
 8006bae:	4ba3      	ldr	r3, [pc, #652]	@ (8006e3c <usb_init+0x360>)
 8006bb0:	4aa5      	ldr	r2, [pc, #660]	@ (8006e48 <usb_init+0x36c>)
 8006bb2:	615a      	str	r2, [r3, #20]
	hid_mouse_parameter.ux_device_class_hid_parameter_get_callback   = USBD_HID_Mouse_GetReport;
 8006bb4:	4ba1      	ldr	r3, [pc, #644]	@ (8006e3c <usb_init+0x360>)
 8006bb6:	4aa5      	ldr	r2, [pc, #660]	@ (8006e4c <usb_init+0x370>)
 8006bb8:	619a      	str	r2, [r3, #24]

	/* Get hid mouse configuration number */
	hid_mouse_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 8006bba:	2102      	movs	r1, #2
 8006bbc:	2001      	movs	r0, #1
 8006bbe:	f016 fbc5 	bl	801d34c <USBD_Get_Configuration_Number>
 8006bc2:	0003      	movs	r3, r0
 8006bc4:	001a      	movs	r2, r3
 8006bc6:	4ba2      	ldr	r3, [pc, #648]	@ (8006e50 <usb_init+0x374>)
 8006bc8:	601a      	str	r2, [r3, #0]

	/* Find hid mouse interface number */
	hid_mouse_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_MOUSE);
 8006bca:	2102      	movs	r1, #2
 8006bcc:	2001      	movs	r0, #1
 8006bce:	f016 fb6d 	bl	801d2ac <USBD_Get_Interface_Number>
 8006bd2:	0003      	movs	r3, r0
 8006bd4:	001a      	movs	r2, r3
 8006bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8006e54 <usb_init+0x378>)
 8006bd8:	601a      	str	r2, [r3, #0]

	/* Initialize the device hid Mouse class */
	if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8006bda:	4b9d      	ldr	r3, [pc, #628]	@ (8006e50 <usb_init+0x374>)
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4b9d      	ldr	r3, [pc, #628]	@ (8006e54 <usb_init+0x378>)
 8006be0:	681c      	ldr	r4, [r3, #0]
 8006be2:	499d      	ldr	r1, [pc, #628]	@ (8006e58 <usb_init+0x37c>)
 8006be4:	489d      	ldr	r0, [pc, #628]	@ (8006e5c <usb_init+0x380>)
 8006be6:	4b95      	ldr	r3, [pc, #596]	@ (8006e3c <usb_init+0x360>)
 8006be8:	9300      	str	r3, [sp, #0]
 8006bea:	0023      	movs	r3, r4
 8006bec:	f014 f952 	bl	801ae94 <_ux_device_stack_class_register>
 8006bf0:	1e03      	subs	r3, r0, #0
 8006bf2:	d001      	beq.n	8006bf8 <usb_init+0x11c>
			hid_mouse_configuration_number,
			hid_mouse_interface_number,
			&hid_mouse_parameter) != UX_SUCCESS)
	{
		/* USER CODE BEGIN USBX_DEVICE_HID_MOUSE_REGISTER_ERORR */
		return UX_ERROR;
 8006bf4:	23ff      	movs	r3, #255	@ 0xff
 8006bf6:	e11d      	b.n	8006e34 <usb_init+0x358>
		/* USER CODE END USBX_DEVICE_HID_MOUSE_REGISTER_ERORR */
	}

	/* Initialize the hid keyboard class parameters for the device */
	hid_keyboard_parameter.ux_slave_class_hid_instance_activate         = USBD_HID_Keyboard_Activate;
 8006bf8:	4b99      	ldr	r3, [pc, #612]	@ (8006e60 <usb_init+0x384>)
 8006bfa:	4a9a      	ldr	r2, [pc, #616]	@ (8006e64 <usb_init+0x388>)
 8006bfc:	601a      	str	r2, [r3, #0]
	hid_keyboard_parameter.ux_slave_class_hid_instance_deactivate       = USBD_HID_Keyboard_Deactivate;
 8006bfe:	4b98      	ldr	r3, [pc, #608]	@ (8006e60 <usb_init+0x384>)
 8006c00:	4a99      	ldr	r2, [pc, #612]	@ (8006e68 <usb_init+0x38c>)
 8006c02:	605a      	str	r2, [r3, #4]
	hid_keyboard_parameter.ux_device_class_hid_parameter_report_address = USBD_HID_ReportDesc(INTERFACE_HID_KEYBOARD);
 8006c04:	2001      	movs	r0, #1
 8006c06:	f016 fbb5 	bl	801d374 <USBD_HID_ReportDesc>
 8006c0a:	0002      	movs	r2, r0
 8006c0c:	4b94      	ldr	r3, [pc, #592]	@ (8006e60 <usb_init+0x384>)
 8006c0e:	609a      	str	r2, [r3, #8]
	hid_keyboard_parameter.ux_device_class_hid_parameter_report_length  = USBD_HID_ReportDesc_length(INTERFACE_HID_KEYBOARD);
 8006c10:	2001      	movs	r0, #1
 8006c12:	f016 fbcd 	bl	801d3b0 <USBD_HID_ReportDesc_length>
 8006c16:	0003      	movs	r3, r0
 8006c18:	001a      	movs	r2, r3
 8006c1a:	4b91      	ldr	r3, [pc, #580]	@ (8006e60 <usb_init+0x384>)
 8006c1c:	611a      	str	r2, [r3, #16]
	hid_keyboard_parameter.ux_device_class_hid_parameter_report_id      = UX_FALSE;
 8006c1e:	4b90      	ldr	r3, [pc, #576]	@ (8006e60 <usb_init+0x384>)
 8006c20:	2200      	movs	r2, #0
 8006c22:	60da      	str	r2, [r3, #12]
	hid_keyboard_parameter.ux_device_class_hid_parameter_callback       = USBD_HID_Keyboard_SetReport;
 8006c24:	4b8e      	ldr	r3, [pc, #568]	@ (8006e60 <usb_init+0x384>)
 8006c26:	4a91      	ldr	r2, [pc, #580]	@ (8006e6c <usb_init+0x390>)
 8006c28:	615a      	str	r2, [r3, #20]
	hid_keyboard_parameter.ux_device_class_hid_parameter_get_callback   = USBD_HID_Keyboard_GetReport;
 8006c2a:	4b8d      	ldr	r3, [pc, #564]	@ (8006e60 <usb_init+0x384>)
 8006c2c:	4a90      	ldr	r2, [pc, #576]	@ (8006e70 <usb_init+0x394>)
 8006c2e:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN HID_KEYBOARD_PARAMETER */

	/* USER CODE END HID_KEYBOARD_PARAMETER */

	/* Get hid keyboard configuration number */
	hid_keyboard_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_HID, INTERFACE_HID_KEYBOARD);
 8006c30:	2101      	movs	r1, #1
 8006c32:	2001      	movs	r0, #1
 8006c34:	f016 fb8a 	bl	801d34c <USBD_Get_Configuration_Number>
 8006c38:	0003      	movs	r3, r0
 8006c3a:	001a      	movs	r2, r3
 8006c3c:	4b8d      	ldr	r3, [pc, #564]	@ (8006e74 <usb_init+0x398>)
 8006c3e:	601a      	str	r2, [r3, #0]

	/* Find hid keyboard interface number */
	hid_keyboard_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_HID, INTERFACE_HID_KEYBOARD);
 8006c40:	2101      	movs	r1, #1
 8006c42:	2001      	movs	r0, #1
 8006c44:	f016 fb32 	bl	801d2ac <USBD_Get_Interface_Number>
 8006c48:	0003      	movs	r3, r0
 8006c4a:	001a      	movs	r2, r3
 8006c4c:	4b8a      	ldr	r3, [pc, #552]	@ (8006e78 <usb_init+0x39c>)
 8006c4e:	601a      	str	r2, [r3, #0]

	/* Initialize the device hid keyboard class */
	if (ux_device_stack_class_register(_ux_system_slave_class_hid_name,
 8006c50:	4b88      	ldr	r3, [pc, #544]	@ (8006e74 <usb_init+0x398>)
 8006c52:	681a      	ldr	r2, [r3, #0]
 8006c54:	4b88      	ldr	r3, [pc, #544]	@ (8006e78 <usb_init+0x39c>)
 8006c56:	681c      	ldr	r4, [r3, #0]
 8006c58:	497f      	ldr	r1, [pc, #508]	@ (8006e58 <usb_init+0x37c>)
 8006c5a:	4880      	ldr	r0, [pc, #512]	@ (8006e5c <usb_init+0x380>)
 8006c5c:	4b80      	ldr	r3, [pc, #512]	@ (8006e60 <usb_init+0x384>)
 8006c5e:	9300      	str	r3, [sp, #0]
 8006c60:	0023      	movs	r3, r4
 8006c62:	f014 f917 	bl	801ae94 <_ux_device_stack_class_register>
 8006c66:	1e03      	subs	r3, r0, #0
 8006c68:	d001      	beq.n	8006c6e <usb_init+0x192>
			ux_device_class_hid_entry,
			hid_keyboard_configuration_number,
			hid_keyboard_interface_number,
			&hid_keyboard_parameter) != UX_SUCCESS)
	{
		return UX_ERROR;
 8006c6a:	23ff      	movs	r3, #255	@ 0xff
 8006c6c:	e0e2      	b.n	8006e34 <usb_init+0x358>
	}

	/* Initialise the storage class parameters for the device */
	storage_parameter.ux_slave_class_storage_instance_activate   = USBD_STORAGE_Activate;
 8006c6e:	4b83      	ldr	r3, [pc, #524]	@ (8006e7c <usb_init+0x3a0>)
 8006c70:	4a83      	ldr	r2, [pc, #524]	@ (8006e80 <usb_init+0x3a4>)
 8006c72:	601a      	str	r2, [r3, #0]
	storage_parameter.ux_slave_class_storage_instance_deactivate = USBD_STORAGE_Deactivate;
 8006c74:	4b81      	ldr	r3, [pc, #516]	@ (8006e7c <usb_init+0x3a0>)
 8006c76:	4a83      	ldr	r2, [pc, #524]	@ (8006e84 <usb_init+0x3a8>)
 8006c78:	605a      	str	r2, [r3, #4]

	/* Store the number of LUN in this device storage instance */
	storage_parameter.ux_slave_class_storage_parameter_number_lun = STORAGE_NUMBER_LUN;
 8006c7a:	4b80      	ldr	r3, [pc, #512]	@ (8006e7c <usb_init+0x3a0>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	609a      	str	r2, [r3, #8]

	/* Initialise the storage class parameters for reading/writing to the Flash Disk */
	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_last_lba = USBD_STORAGE_GetMediaLastLba();
 8006c80:	f7ff fe78 	bl	8006974 <USBD_STORAGE_GetMediaLastLba>
 8006c84:	0002      	movs	r2, r0
 8006c86:	4b7d      	ldr	r3, [pc, #500]	@ (8006e7c <usb_init+0x3a0>)
 8006c88:	60da      	str	r2, [r3, #12]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_block_length = USBD_STORAGE_GetMediaBlocklength();
 8006c8a:	f7ff fe7f 	bl	800698c <USBD_STORAGE_GetMediaBlocklength>
 8006c8e:	0002      	movs	r2, r0
 8006c90:	4b7a      	ldr	r3, [pc, #488]	@ (8006e7c <usb_init+0x3a0>)
 8006c92:	611a      	str	r2, [r3, #16]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_type = 0;
 8006c94:	4b79      	ldr	r3, [pc, #484]	@ (8006e7c <usb_init+0x3a0>)
 8006c96:	2200      	movs	r2, #0
 8006c98:	615a      	str	r2, [r3, #20]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_removable_flag = STORAGE_REMOVABLE_FLAG;
 8006c9a:	4b78      	ldr	r3, [pc, #480]	@ (8006e7c <usb_init+0x3a0>)
 8006c9c:	2280      	movs	r2, #128	@ 0x80
 8006c9e:	619a      	str	r2, [r3, #24]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_read_only_flag = STORAGE_READ_ONLY;
 8006ca0:	4b76      	ldr	r3, [pc, #472]	@ (8006e7c <usb_init+0x3a0>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	61da      	str	r2, [r3, #28]

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_read = USBD_STORAGE_Read;
 8006ca6:	4b75      	ldr	r3, [pc, #468]	@ (8006e7c <usb_init+0x3a0>)
 8006ca8:	4a77      	ldr	r2, [pc, #476]	@ (8006e88 <usb_init+0x3ac>)
 8006caa:	631a      	str	r2, [r3, #48]	@ 0x30

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_write = USBD_STORAGE_Write;
 8006cac:	4b73      	ldr	r3, [pc, #460]	@ (8006e7c <usb_init+0x3a0>)
 8006cae:	4a77      	ldr	r2, [pc, #476]	@ (8006e8c <usb_init+0x3b0>)
 8006cb0:	635a      	str	r2, [r3, #52]	@ 0x34

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_flush = USBD_STORAGE_Flush;
 8006cb2:	4b72      	ldr	r3, [pc, #456]	@ (8006e7c <usb_init+0x3a0>)
 8006cb4:	4a76      	ldr	r2, [pc, #472]	@ (8006e90 <usb_init+0x3b4>)
 8006cb6:	639a      	str	r2, [r3, #56]	@ 0x38

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_status = USBD_STORAGE_Status;
 8006cb8:	4b70      	ldr	r3, [pc, #448]	@ (8006e7c <usb_init+0x3a0>)
 8006cba:	4a76      	ldr	r2, [pc, #472]	@ (8006e94 <usb_init+0x3b8>)
 8006cbc:	63da      	str	r2, [r3, #60]	@ 0x3c

	storage_parameter.ux_slave_class_storage_parameter_lun[0].
	ux_slave_class_storage_media_notification = USBD_STORAGE_Notification;
 8006cbe:	4b6f      	ldr	r3, [pc, #444]	@ (8006e7c <usb_init+0x3a0>)
 8006cc0:	4a75      	ldr	r2, [pc, #468]	@ (8006e98 <usb_init+0x3bc>)
 8006cc2:	641a      	str	r2, [r3, #64]	@ 0x40

	/* Get storage configuration number */
	storage_configuration_number = USBD_Get_Configuration_Number(CLASS_TYPE_MSC, 0);
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	2003      	movs	r0, #3
 8006cc8:	f016 fb40 	bl	801d34c <USBD_Get_Configuration_Number>
 8006ccc:	0003      	movs	r3, r0
 8006cce:	001a      	movs	r2, r3
 8006cd0:	4b72      	ldr	r3, [pc, #456]	@ (8006e9c <usb_init+0x3c0>)
 8006cd2:	601a      	str	r2, [r3, #0]

	/* Find storage interface number */
	storage_interface_number = USBD_Get_Interface_Number(CLASS_TYPE_MSC, 0);
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	2003      	movs	r0, #3
 8006cd8:	f016 fae8 	bl	801d2ac <USBD_Get_Interface_Number>
 8006cdc:	0003      	movs	r3, r0
 8006cde:	001a      	movs	r2, r3
 8006ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8006ea0 <usb_init+0x3c4>)
 8006ce2:	601a      	str	r2, [r3, #0]

	/* Initialise the device storage class */
	if (ux_device_stack_class_register(_ux_system_slave_class_storage_name,
 8006ce4:	4b6d      	ldr	r3, [pc, #436]	@ (8006e9c <usb_init+0x3c0>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	4b6d      	ldr	r3, [pc, #436]	@ (8006ea0 <usb_init+0x3c4>)
 8006cea:	681c      	ldr	r4, [r3, #0]
 8006cec:	496d      	ldr	r1, [pc, #436]	@ (8006ea4 <usb_init+0x3c8>)
 8006cee:	486e      	ldr	r0, [pc, #440]	@ (8006ea8 <usb_init+0x3cc>)
 8006cf0:	4b62      	ldr	r3, [pc, #392]	@ (8006e7c <usb_init+0x3a0>)
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	0023      	movs	r3, r4
 8006cf6:	f014 f8cd 	bl	801ae94 <_ux_device_stack_class_register>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d001      	beq.n	8006d02 <usb_init+0x226>
			ux_device_class_storage_entry,
			storage_configuration_number,
			storage_interface_number,
			&storage_parameter) != UX_SUCCESS)
	{
		return UX_ERROR;
 8006cfe:	23ff      	movs	r3, #255	@ 0xff
 8006d00:	e098      	b.n	8006e34 <usb_init+0x358>
	}

	/* Allocate the stack for device application main thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, UX_THREAD_STACK_SIZE,
 8006d02:	2380      	movs	r3, #128	@ 0x80
 8006d04:	00da      	lsls	r2, r3, #3
 8006d06:	230c      	movs	r3, #12
 8006d08:	18f9      	adds	r1, r7, r3
 8006d0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	f00b fec7 	bl	8012aa0 <_txe_byte_allocate>
 8006d12:	1e03      	subs	r3, r0, #0
 8006d14:	d001      	beq.n	8006d1a <usb_init+0x23e>
			TX_NO_WAIT) != TX_SUCCESS)
	{
		return TX_POOL_ERROR;
 8006d16:	2302      	movs	r3, #2
 8006d18:	e08c      	b.n	8006e34 <usb_init+0x358>
	}

	/* Create the device application main thread */
	if (tx_thread_create(&usb_thread_ptr, USB_THREAD_NAME, usb_thread,
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4c63      	ldr	r4, [pc, #396]	@ (8006eac <usb_init+0x3d0>)
 8006d1e:	4964      	ldr	r1, [pc, #400]	@ (8006eb0 <usb_init+0x3d4>)
 8006d20:	4864      	ldr	r0, [pc, #400]	@ (8006eb4 <usb_init+0x3d8>)
 8006d22:	22b0      	movs	r2, #176	@ 0xb0
 8006d24:	9206      	str	r2, [sp, #24]
 8006d26:	2201      	movs	r2, #1
 8006d28:	9205      	str	r2, [sp, #20]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	9204      	str	r2, [sp, #16]
 8006d2e:	220a      	movs	r2, #10
 8006d30:	9203      	str	r2, [sp, #12]
 8006d32:	220a      	movs	r2, #10
 8006d34:	9202      	str	r2, [sp, #8]
 8006d36:	2280      	movs	r2, #128	@ 0x80
 8006d38:	00d2      	lsls	r2, r2, #3
 8006d3a:	9201      	str	r2, [sp, #4]
 8006d3c:	9300      	str	r3, [sp, #0]
 8006d3e:	2300      	movs	r3, #0
 8006d40:	0022      	movs	r2, r4
 8006d42:	f00c fbd5 	bl	80134f0 <_txe_thread_create>
 8006d46:	1e03      	subs	r3, r0, #0
 8006d48:	d001      	beq.n	8006d4e <usb_init+0x272>
			0, pointer, UX_THREAD_STACK_SIZE, USB_THREAD_PRIORITY,
			USB_THREAD_PRIORITY, 1,
			TX_AUTO_START) != TX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 8006d4a:	230e      	movs	r3, #14
 8006d4c:	e072      	b.n	8006e34 <usb_init+0x358>
	}

	/* Allocate the stack for usbx hid mouse thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, USBX_HID_MOUSE_THREAD_STACK_SIZE, TX_NO_WAIT) != UX_SUCCESS)
 8006d4e:	2380      	movs	r3, #128	@ 0x80
 8006d50:	00da      	lsls	r2, r3, #3
 8006d52:	230c      	movs	r3, #12
 8006d54:	18f9      	adds	r1, r7, r3
 8006d56:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d58:	2300      	movs	r3, #0
 8006d5a:	f00b fea1 	bl	8012aa0 <_txe_byte_allocate>
 8006d5e:	1e03      	subs	r3, r0, #0
 8006d60:	d001      	beq.n	8006d66 <usb_init+0x28a>
	{
		return TX_POOL_ERROR;
 8006d62:	2302      	movs	r3, #2
 8006d64:	e066      	b.n	8006e34 <usb_init+0x358>
	}

	/* Create the usbx hid mouse thread */
	if (tx_thread_create(&hid_mouse_thread_ptr, USBX_HID_MOUSE_THREAD_NAME,
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	4c53      	ldr	r4, [pc, #332]	@ (8006eb8 <usb_init+0x3dc>)
 8006d6a:	4954      	ldr	r1, [pc, #336]	@ (8006ebc <usb_init+0x3e0>)
 8006d6c:	4854      	ldr	r0, [pc, #336]	@ (8006ec0 <usb_init+0x3e4>)
 8006d6e:	22b0      	movs	r2, #176	@ 0xb0
 8006d70:	9206      	str	r2, [sp, #24]
 8006d72:	2201      	movs	r2, #1
 8006d74:	9205      	str	r2, [sp, #20]
 8006d76:	2201      	movs	r2, #1
 8006d78:	9204      	str	r2, [sp, #16]
 8006d7a:	2214      	movs	r2, #20
 8006d7c:	9203      	str	r2, [sp, #12]
 8006d7e:	2214      	movs	r2, #20
 8006d80:	9202      	str	r2, [sp, #8]
 8006d82:	2280      	movs	r2, #128	@ 0x80
 8006d84:	00d2      	lsls	r2, r2, #3
 8006d86:	9201      	str	r2, [sp, #4]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	0022      	movs	r2, r4
 8006d8e:	f00c fbaf 	bl	80134f0 <_txe_thread_create>
 8006d92:	1e03      	subs	r3, r0, #0
 8006d94:	d001      	beq.n	8006d9a <usb_init+0x2be>
			hid_mouse_thread, 0, pointer, USBX_HID_MOUSE_THREAD_STACK_SIZE,
			USBX_HID_MOUSE_THREAD_PRIORITY, USBX_HID_MOUSE_THREAD_PRIORITY, 1, TX_AUTO_START) != UX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 8006d96:	230e      	movs	r3, #14
 8006d98:	e04c      	b.n	8006e34 <usb_init+0x358>
	}

	/* Allocate the stack for usbx hid keyboard thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, USBX_HID_KEYBOARD_THREAD_STACK_SIZE, TX_NO_WAIT) != UX_SUCCESS)
 8006d9a:	2380      	movs	r3, #128	@ 0x80
 8006d9c:	00da      	lsls	r2, r3, #3
 8006d9e:	230c      	movs	r3, #12
 8006da0:	18f9      	adds	r1, r7, r3
 8006da2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006da4:	2300      	movs	r3, #0
 8006da6:	f00b fe7b 	bl	8012aa0 <_txe_byte_allocate>
 8006daa:	1e03      	subs	r3, r0, #0
 8006dac:	d001      	beq.n	8006db2 <usb_init+0x2d6>
	{
		return TX_POOL_ERROR;
 8006dae:	2302      	movs	r3, #2
 8006db0:	e040      	b.n	8006e34 <usb_init+0x358>
	}

	/* Create the usbx hid keyboard thread */
	if (tx_thread_create(&hid_keyboard_thread_ptr, USBX_HID_KEYBOARD_THREAD_NAME,
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	4c43      	ldr	r4, [pc, #268]	@ (8006ec4 <usb_init+0x3e8>)
 8006db6:	4944      	ldr	r1, [pc, #272]	@ (8006ec8 <usb_init+0x3ec>)
 8006db8:	4844      	ldr	r0, [pc, #272]	@ (8006ecc <usb_init+0x3f0>)
 8006dba:	22b0      	movs	r2, #176	@ 0xb0
 8006dbc:	9206      	str	r2, [sp, #24]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	9205      	str	r2, [sp, #20]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	9204      	str	r2, [sp, #16]
 8006dc6:	2214      	movs	r2, #20
 8006dc8:	9203      	str	r2, [sp, #12]
 8006dca:	2214      	movs	r2, #20
 8006dcc:	9202      	str	r2, [sp, #8]
 8006dce:	2280      	movs	r2, #128	@ 0x80
 8006dd0:	00d2      	lsls	r2, r2, #3
 8006dd2:	9201      	str	r2, [sp, #4]
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	0022      	movs	r2, r4
 8006dda:	f00c fb89 	bl	80134f0 <_txe_thread_create>
 8006dde:	1e03      	subs	r3, r0, #0
 8006de0:	d001      	beq.n	8006de6 <usb_init+0x30a>
			hid_keyboard_thread, 0, pointer, USBX_HID_KEYBOARD_THREAD_STACK_SIZE,
			USBX_HID_KEYBOARD_THREAD_PRIORITY, USBX_HID_KEYBOARD_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START) != UX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 8006de2:	230e      	movs	r3, #14
 8006de4:	e026      	b.n	8006e34 <usb_init+0x358>
	}

	/* Allocate the stack for usbx msc thread */
	if (tx_byte_allocate(byte_pool, (VOID **) &pointer, USBX_MSC_THREAD_STACK_SIZE, TX_NO_WAIT) != UX_SUCCESS)
 8006de6:	2380      	movs	r3, #128	@ 0x80
 8006de8:	00da      	lsls	r2, r3, #3
 8006dea:	230c      	movs	r3, #12
 8006dec:	18f9      	adds	r1, r7, r3
 8006dee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006df0:	2300      	movs	r3, #0
 8006df2:	f00b fe55 	bl	8012aa0 <_txe_byte_allocate>
 8006df6:	1e03      	subs	r3, r0, #0
 8006df8:	d001      	beq.n	8006dfe <usb_init+0x322>
	{
		return TX_POOL_ERROR;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e01a      	b.n	8006e34 <usb_init+0x358>
	}

	/* Create the usbx msc thread */
	if (tx_thread_create(&msc_thread_ptr, USBX_MSC_THREAD_NAME,
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	4c33      	ldr	r4, [pc, #204]	@ (8006ed0 <usb_init+0x3f4>)
 8006e02:	4931      	ldr	r1, [pc, #196]	@ (8006ec8 <usb_init+0x3ec>)
 8006e04:	4833      	ldr	r0, [pc, #204]	@ (8006ed4 <usb_init+0x3f8>)
 8006e06:	22b0      	movs	r2, #176	@ 0xb0
 8006e08:	9206      	str	r2, [sp, #24]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	9205      	str	r2, [sp, #20]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	9204      	str	r2, [sp, #16]
 8006e12:	2214      	movs	r2, #20
 8006e14:	9203      	str	r2, [sp, #12]
 8006e16:	2214      	movs	r2, #20
 8006e18:	9202      	str	r2, [sp, #8]
 8006e1a:	2280      	movs	r2, #128	@ 0x80
 8006e1c:	00d2      	lsls	r2, r2, #3
 8006e1e:	9201      	str	r2, [sp, #4]
 8006e20:	9300      	str	r3, [sp, #0]
 8006e22:	2300      	movs	r3, #0
 8006e24:	0022      	movs	r2, r4
 8006e26:	f00c fb63 	bl	80134f0 <_txe_thread_create>
 8006e2a:	1e03      	subs	r3, r0, #0
 8006e2c:	d001      	beq.n	8006e32 <usb_init+0x356>
			msc_thread, 0, pointer, USBX_MSC_THREAD_STACK_SIZE,
			USBX_MSC_THREAD_PRIORITY, USBX_MSC_THREAD_PRIORITY, TX_NO_TIME_SLICE, TX_AUTO_START) != UX_SUCCESS)
	{
		return TX_THREAD_ERROR;
 8006e2e:	230e      	movs	r3, #14
 8006e30:	e000      	b.n	8006e34 <usb_init+0x358>
	}

	return ret;
 8006e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006e34:	0018      	movs	r0, r3
 8006e36:	46bd      	mov	sp, r7
 8006e38:	b00f      	add	sp, #60	@ 0x3c
 8006e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e3c:	20010aec 	.word	0x20010aec
 8006e40:	08006811 	.word	0x08006811
 8006e44:	0800682d 	.word	0x0800682d
 8006e48:	08006849 	.word	0x08006849
 8006e4c:	08006861 	.word	0x08006861
 8006e50:	20010ae8 	.word	0x20010ae8
 8006e54:	20010ae4 	.word	0x20010ae4
 8006e58:	0801809d 	.word	0x0801809d
 8006e5c:	2000009c 	.word	0x2000009c
 8006e60:	20010b10 	.word	0x20010b10
 8006e64:	080066c9 	.word	0x080066c9
 8006e68:	080066e5 	.word	0x080066e5
 8006e6c:	08006701 	.word	0x08006701
 8006e70:	08006719 	.word	0x08006719
 8006e74:	20010b0c 	.word	0x20010b0c
 8006e78:	20010b08 	.word	0x20010b08
 8006e7c:	20010b34 	.word	0x20010b34
 8006e80:	080068c1 	.word	0x080068c1
 8006e84:	080068d1 	.word	0x080068d1
 8006e88:	080068e1 	.word	0x080068e1
 8006e8c:	08006901 	.word	0x08006901
 8006e90:	08006921 	.word	0x08006921
 8006e94:	0800693d 	.word	0x0800693d
 8006e98:	08006959 	.word	0x08006959
 8006e9c:	20010b30 	.word	0x20010b30
 8006ea0:	20010b2c 	.word	0x20010b2c
 8006ea4:	080189bd 	.word	0x080189bd
 8006ea8:	20000084 	.word	0x20000084
 8006eac:	08006ed9 	.word	0x08006ed9
 8006eb0:	0801e2c8 	.word	0x0801e2c8
 8006eb4:	20010824 	.word	0x20010824
 8006eb8:	08006879 	.word	0x08006879
 8006ebc:	0801e2d4 	.word	0x0801e2d4
 8006ec0:	200108d4 	.word	0x200108d4
 8006ec4:	08006731 	.word	0x08006731
 8006ec8:	0801e2e4 	.word	0x0801e2e4
 8006ecc:	20010984 	.word	0x20010984
 8006ed0:	080069a7 	.word	0x080069a7
 8006ed4:	20010a34 	.word	0x20010a34

08006ed8 <usb_thread>:

/* PFP */
void STM32_USB_Init(void);


void usb_thread(uint32_t thread_input){
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]

	HAL_StatusTypeDef status;

	USB2533_Init(&usb2533, &hi2c2);
 8006ee0:	4a05      	ldr	r2, [pc, #20]	@ (8006ef8 <usb_thread+0x20>)
 8006ee2:	4b06      	ldr	r3, [pc, #24]	@ (8006efc <usb_thread+0x24>)
 8006ee4:	0011      	movs	r1, r2
 8006ee6:	0018      	movs	r0, r3
 8006ee8:	f7ff fb6e 	bl	80065c8 <USB2533_Init>
	STM32_USB_Init();
 8006eec:	f000 f808 	bl	8006f00 <STM32_USB_Init>

	while (1){
		tx_thread_sleep(100);
 8006ef0:	2064      	movs	r0, #100	@ 0x64
 8006ef2:	f00a fea5 	bl	8011c40 <_tx_thread_sleep>
 8006ef6:	e7fb      	b.n	8006ef0 <usb_thread+0x18>
 8006ef8:	20010b90 	.word	0x20010b90
 8006efc:	20010b88 	.word	0x20010b88

08006f00 <STM32_USB_Init>:

	}
}


void STM32_USB_Init(){
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0

	MX_USB_DRD_FS_PCD_Init();
 8006f04:	f001 f8fc 	bl	8008100 <MX_USB_DRD_FS_PCD_Init>
	 * BTABLE uses the first 20 bytes of the PMA when the USB peripheral is configured
	 * for 3 end points (EP0, EP1, EP2). For more info, see RM0440 p1268.
	 */

	/* Configure control endpoints */
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x00, PCD_SNG_BUF, 0x40);
 8006f08:	4819      	ldr	r0, [pc, #100]	@ (8006f70 <STM32_USB_Init+0x70>)
 8006f0a:	2340      	movs	r3, #64	@ 0x40
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	2100      	movs	r1, #0
 8006f10:	f003 ff28 	bl	800ad64 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, 0x80, PCD_SNG_BUF, 0x80);
 8006f14:	4816      	ldr	r0, [pc, #88]	@ (8006f70 <STM32_USB_Init+0x70>)
 8006f16:	2380      	movs	r3, #128	@ 0x80
 8006f18:	2200      	movs	r2, #0
 8006f1a:	2180      	movs	r1, #128	@ 0x80
 8006f1c:	f003 ff22 	bl	800ad64 <HAL_PCDEx_PMAConfig>

	/* Configure class endpoints */
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_MSC_EPOUT_ADDR, PCD_SNG_BUF, 0xC0);
 8006f20:	4813      	ldr	r0, [pc, #76]	@ (8006f70 <STM32_USB_Init+0x70>)
 8006f22:	23c0      	movs	r3, #192	@ 0xc0
 8006f24:	2200      	movs	r2, #0
 8006f26:	2102      	movs	r1, #2
 8006f28:	f003 ff1c 	bl	800ad64 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_MSC_EPIN_ADDR, PCD_SNG_BUF, 0x100);
 8006f2c:	2380      	movs	r3, #128	@ 0x80
 8006f2e:	005b      	lsls	r3, r3, #1
 8006f30:	480f      	ldr	r0, [pc, #60]	@ (8006f70 <STM32_USB_Init+0x70>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	2181      	movs	r1, #129	@ 0x81
 8006f36:	f003 ff15 	bl	800ad64 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_HID_MOUSE_EPIN_ADDR, PCD_SNG_BUF, 0x140);
 8006f3a:	23a0      	movs	r3, #160	@ 0xa0
 8006f3c:	005b      	lsls	r3, r3, #1
 8006f3e:	480c      	ldr	r0, [pc, #48]	@ (8006f70 <STM32_USB_Init+0x70>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	2183      	movs	r1, #131	@ 0x83
 8006f44:	f003 ff0e 	bl	800ad64 <HAL_PCDEx_PMAConfig>
	HAL_PCDEx_PMAConfig(&hpcd_USB_DRD_FS, USBD_HID_KEYBOARD_EPIN_ADDR, PCD_SNG_BUF, 0x180);
 8006f48:	23c0      	movs	r3, #192	@ 0xc0
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4808      	ldr	r0, [pc, #32]	@ (8006f70 <STM32_USB_Init+0x70>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	2184      	movs	r1, #132	@ 0x84
 8006f52:	f003 ff07 	bl	800ad64 <HAL_PCDEx_PMAConfig>

	ux_dcd_stm32_initialize((ULONG)USB_DRD_FS, (ULONG)&hpcd_USB_DRD_FS);
 8006f56:	4b06      	ldr	r3, [pc, #24]	@ (8006f70 <STM32_USB_Init+0x70>)
 8006f58:	4a06      	ldr	r2, [pc, #24]	@ (8006f74 <STM32_USB_Init+0x74>)
 8006f5a:	0019      	movs	r1, r3
 8006f5c:	0010      	movs	r0, r2
 8006f5e:	f013 fb43 	bl	801a5e8 <_ux_dcd_stm32_initialize>

	HAL_PCD_Start(&hpcd_USB_DRD_FS);
 8006f62:	4b03      	ldr	r3, [pc, #12]	@ (8006f70 <STM32_USB_Init+0x70>)
 8006f64:	0018      	movs	r0, r3
 8006f66:	f002 fabb 	bl	80094e0 <HAL_PCD_Start>
}
 8006f6a:	46c0      	nop			@ (mov r8, r8)
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	20010ccc 	.word	0x20010ccc
 8006f74:	40005c00 	.word	0x40005c00

08006f78 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8006f80:	2300      	movs	r3, #0
 8006f82:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
create_threads();
 8006f88:	f7ff fb76 	bl	8006678 <create_threads>
/* USER CODE END App_ThreadX_Init */

  return ret;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
}
 8006f8e:	0018      	movs	r0, r3
 8006f90:	46bd      	mov	sp, r7
 8006f92:	b004      	add	sp, #16
 8006f94:	bd80      	pop	{r7, pc}

08006f96 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8006f96:	b580      	push	{r7, lr}
 8006f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8006f9a:	f009 f95b 	bl	8010254 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8006f9e:	46c0      	nop			@ (mov r8, r8)
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	0002      	movs	r2, r0
 8006fac:	1dfb      	adds	r3, r7, #7
 8006fae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006fb0:	1dfb      	adds	r3, r7, #7
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb6:	d809      	bhi.n	8006fcc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fb8:	1dfb      	adds	r3, r7, #7
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	001a      	movs	r2, r3
 8006fbe:	231f      	movs	r3, #31
 8006fc0:	401a      	ands	r2, r3
 8006fc2:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <__NVIC_EnableIRQ+0x30>)
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	4091      	lsls	r1, r2
 8006fc8:	000a      	movs	r2, r1
 8006fca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006fcc:	46c0      	nop			@ (mov r8, r8)
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	b002      	add	sp, #8
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	e000e100 	.word	0xe000e100

08006fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	0002      	movs	r2, r0
 8006fe0:	6039      	str	r1, [r7, #0]
 8006fe2:	1dfb      	adds	r3, r7, #7
 8006fe4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006fe6:	1dfb      	adds	r3, r7, #7
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fec:	d828      	bhi.n	8007040 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006fee:	4a2f      	ldr	r2, [pc, #188]	@ (80070ac <__NVIC_SetPriority+0xd4>)
 8006ff0:	1dfb      	adds	r3, r7, #7
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b25b      	sxtb	r3, r3
 8006ff6:	089b      	lsrs	r3, r3, #2
 8006ff8:	33c0      	adds	r3, #192	@ 0xc0
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	589b      	ldr	r3, [r3, r2]
 8006ffe:	1dfa      	adds	r2, r7, #7
 8007000:	7812      	ldrb	r2, [r2, #0]
 8007002:	0011      	movs	r1, r2
 8007004:	2203      	movs	r2, #3
 8007006:	400a      	ands	r2, r1
 8007008:	00d2      	lsls	r2, r2, #3
 800700a:	21ff      	movs	r1, #255	@ 0xff
 800700c:	4091      	lsls	r1, r2
 800700e:	000a      	movs	r2, r1
 8007010:	43d2      	mvns	r2, r2
 8007012:	401a      	ands	r2, r3
 8007014:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	019b      	lsls	r3, r3, #6
 800701a:	22ff      	movs	r2, #255	@ 0xff
 800701c:	401a      	ands	r2, r3
 800701e:	1dfb      	adds	r3, r7, #7
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	0018      	movs	r0, r3
 8007024:	2303      	movs	r3, #3
 8007026:	4003      	ands	r3, r0
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800702c:	481f      	ldr	r0, [pc, #124]	@ (80070ac <__NVIC_SetPriority+0xd4>)
 800702e:	1dfb      	adds	r3, r7, #7
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	b25b      	sxtb	r3, r3
 8007034:	089b      	lsrs	r3, r3, #2
 8007036:	430a      	orrs	r2, r1
 8007038:	33c0      	adds	r3, #192	@ 0xc0
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800703e:	e031      	b.n	80070a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007040:	4a1b      	ldr	r2, [pc, #108]	@ (80070b0 <__NVIC_SetPriority+0xd8>)
 8007042:	1dfb      	adds	r3, r7, #7
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	0019      	movs	r1, r3
 8007048:	230f      	movs	r3, #15
 800704a:	400b      	ands	r3, r1
 800704c:	3b08      	subs	r3, #8
 800704e:	089b      	lsrs	r3, r3, #2
 8007050:	3306      	adds	r3, #6
 8007052:	009b      	lsls	r3, r3, #2
 8007054:	18d3      	adds	r3, r2, r3
 8007056:	3304      	adds	r3, #4
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	1dfa      	adds	r2, r7, #7
 800705c:	7812      	ldrb	r2, [r2, #0]
 800705e:	0011      	movs	r1, r2
 8007060:	2203      	movs	r2, #3
 8007062:	400a      	ands	r2, r1
 8007064:	00d2      	lsls	r2, r2, #3
 8007066:	21ff      	movs	r1, #255	@ 0xff
 8007068:	4091      	lsls	r1, r2
 800706a:	000a      	movs	r2, r1
 800706c:	43d2      	mvns	r2, r2
 800706e:	401a      	ands	r2, r3
 8007070:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	019b      	lsls	r3, r3, #6
 8007076:	22ff      	movs	r2, #255	@ 0xff
 8007078:	401a      	ands	r2, r3
 800707a:	1dfb      	adds	r3, r7, #7
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	0018      	movs	r0, r3
 8007080:	2303      	movs	r3, #3
 8007082:	4003      	ands	r3, r0
 8007084:	00db      	lsls	r3, r3, #3
 8007086:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007088:	4809      	ldr	r0, [pc, #36]	@ (80070b0 <__NVIC_SetPriority+0xd8>)
 800708a:	1dfb      	adds	r3, r7, #7
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	001c      	movs	r4, r3
 8007090:	230f      	movs	r3, #15
 8007092:	4023      	ands	r3, r4
 8007094:	3b08      	subs	r3, #8
 8007096:	089b      	lsrs	r3, r3, #2
 8007098:	430a      	orrs	r2, r1
 800709a:	3306      	adds	r3, #6
 800709c:	009b      	lsls	r3, r3, #2
 800709e:	18c3      	adds	r3, r0, r3
 80070a0:	3304      	adds	r3, #4
 80070a2:	601a      	str	r2, [r3, #0]
}
 80070a4:	46c0      	nop			@ (mov r8, r8)
 80070a6:	46bd      	mov	sp, r7
 80070a8:	b003      	add	sp, #12
 80070aa:	bd90      	pop	{r4, r7, pc}
 80070ac:	e000e100 	.word	0xe000e100
 80070b0:	e000ed00 	.word	0xe000ed00

080070b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80070ba:	4b13      	ldr	r3, [pc, #76]	@ (8007108 <MX_DMA_Init+0x54>)
 80070bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070be:	4b12      	ldr	r3, [pc, #72]	@ (8007108 <MX_DMA_Init+0x54>)
 80070c0:	2101      	movs	r1, #1
 80070c2:	430a      	orrs	r2, r1
 80070c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80070c6:	4b10      	ldr	r3, [pc, #64]	@ (8007108 <MX_DMA_Init+0x54>)
 80070c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ca:	2201      	movs	r2, #1
 80070cc:	4013      	ands	r3, r2
 80070ce:	607b      	str	r3, [r7, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 0);
 80070d2:	2100      	movs	r1, #0
 80070d4:	2009      	movs	r0, #9
 80070d6:	f7ff ff7f 	bl	8006fd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80070da:	2009      	movs	r0, #9
 80070dc:	f7ff ff62 	bl	8006fa4 <__NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0);
 80070e0:	2100      	movs	r1, #0
 80070e2:	200a      	movs	r0, #10
 80070e4:	f7ff ff78 	bl	8006fd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80070e8:	200a      	movs	r0, #10
 80070ea:	f7ff ff5b 	bl	8006fa4 <__NVIC_EnableIRQ>
  /* DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn, 0, 0);
 80070ee:	2200      	movs	r2, #0
 80070f0:	2100      	movs	r1, #0
 80070f2:	200b      	movs	r0, #11
 80070f4:	f001 fa0e 	bl	8008514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn);
 80070f8:	200b      	movs	r0, #11
 80070fa:	f001 fa20 	bl	800853e <HAL_NVIC_EnableIRQ>

}
 80070fe:	46c0      	nop			@ (mov r8, r8)
 8007100:	46bd      	mov	sp, r7
 8007102:	b002      	add	sp, #8
 8007104:	bd80      	pop	{r7, pc}
 8007106:	46c0      	nop			@ (mov r8, r8)
 8007108:	40021000 	.word	0x40021000

0800710c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800710c:	b590      	push	{r4, r7, lr}
 800710e:	b08b      	sub	sp, #44	@ 0x2c
 8007110:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007112:	2414      	movs	r4, #20
 8007114:	193b      	adds	r3, r7, r4
 8007116:	0018      	movs	r0, r3
 8007118:	2314      	movs	r3, #20
 800711a:	001a      	movs	r2, r3
 800711c:	2100      	movs	r1, #0
 800711e:	f017 f84d 	bl	801e1bc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007122:	4b5e      	ldr	r3, [pc, #376]	@ (800729c <MX_GPIO_Init+0x190>)
 8007124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007126:	4b5d      	ldr	r3, [pc, #372]	@ (800729c <MX_GPIO_Init+0x190>)
 8007128:	2104      	movs	r1, #4
 800712a:	430a      	orrs	r2, r1
 800712c:	635a      	str	r2, [r3, #52]	@ 0x34
 800712e:	4b5b      	ldr	r3, [pc, #364]	@ (800729c <MX_GPIO_Init+0x190>)
 8007130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007132:	2204      	movs	r2, #4
 8007134:	4013      	ands	r3, r2
 8007136:	613b      	str	r3, [r7, #16]
 8007138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800713a:	4b58      	ldr	r3, [pc, #352]	@ (800729c <MX_GPIO_Init+0x190>)
 800713c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800713e:	4b57      	ldr	r3, [pc, #348]	@ (800729c <MX_GPIO_Init+0x190>)
 8007140:	2120      	movs	r1, #32
 8007142:	430a      	orrs	r2, r1
 8007144:	635a      	str	r2, [r3, #52]	@ 0x34
 8007146:	4b55      	ldr	r3, [pc, #340]	@ (800729c <MX_GPIO_Init+0x190>)
 8007148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800714a:	2220      	movs	r2, #32
 800714c:	4013      	ands	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007152:	4b52      	ldr	r3, [pc, #328]	@ (800729c <MX_GPIO_Init+0x190>)
 8007154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007156:	4b51      	ldr	r3, [pc, #324]	@ (800729c <MX_GPIO_Init+0x190>)
 8007158:	2101      	movs	r1, #1
 800715a:	430a      	orrs	r2, r1
 800715c:	635a      	str	r2, [r3, #52]	@ 0x34
 800715e:	4b4f      	ldr	r3, [pc, #316]	@ (800729c <MX_GPIO_Init+0x190>)
 8007160:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007162:	2201      	movs	r2, #1
 8007164:	4013      	ands	r3, r2
 8007166:	60bb      	str	r3, [r7, #8]
 8007168:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800716a:	4b4c      	ldr	r3, [pc, #304]	@ (800729c <MX_GPIO_Init+0x190>)
 800716c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800716e:	4b4b      	ldr	r3, [pc, #300]	@ (800729c <MX_GPIO_Init+0x190>)
 8007170:	2102      	movs	r1, #2
 8007172:	430a      	orrs	r2, r1
 8007174:	635a      	str	r2, [r3, #52]	@ 0x34
 8007176:	4b49      	ldr	r3, [pc, #292]	@ (800729c <MX_GPIO_Init+0x190>)
 8007178:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800717a:	2202      	movs	r2, #2
 800717c:	4013      	ands	r3, r2
 800717e:	607b      	str	r3, [r7, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007182:	4b46      	ldr	r3, [pc, #280]	@ (800729c <MX_GPIO_Init+0x190>)
 8007184:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007186:	4b45      	ldr	r3, [pc, #276]	@ (800729c <MX_GPIO_Init+0x190>)
 8007188:	2108      	movs	r1, #8
 800718a:	430a      	orrs	r2, r1
 800718c:	635a      	str	r2, [r3, #52]	@ 0x34
 800718e:	4b43      	ldr	r3, [pc, #268]	@ (800729c <MX_GPIO_Init+0x190>)
 8007190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007192:	2208      	movs	r2, #8
 8007194:	4013      	ands	r3, r2
 8007196:	603b      	str	r3, [r7, #0]
 8007198:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT1_LED_GPIO_Port, STAT1_LED_Pin, GPIO_PIN_RESET);
 800719a:	4b41      	ldr	r3, [pc, #260]	@ (80072a0 <MX_GPIO_Init+0x194>)
 800719c:	2200      	movs	r2, #0
 800719e:	2108      	movs	r1, #8
 80071a0:	0018      	movs	r0, r3
 80071a2:	f001 fb66 	bl	8008872 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT2_LED_GPIO_Port, STAT2_LED_Pin, GPIO_PIN_RESET);
 80071a6:	4b3f      	ldr	r3, [pc, #252]	@ (80072a4 <MX_GPIO_Init+0x198>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	2108      	movs	r1, #8
 80071ac:	0018      	movs	r0, r3
 80071ae:	f001 fb60 	bl	8008872 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = KEY_E1_Pin|KEY_D1_Pin|KEY_D2_Pin|KEY_A4_Pin
 80071b2:	193b      	adds	r3, r7, r4
 80071b4:	4a3c      	ldr	r2, [pc, #240]	@ (80072a8 <MX_GPIO_Init+0x19c>)
 80071b6:	601a      	str	r2, [r3, #0]
                          |KEY_A5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071b8:	193b      	adds	r3, r7, r4
 80071ba:	2200      	movs	r2, #0
 80071bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071be:	193b      	adds	r3, r7, r4
 80071c0:	2201      	movs	r2, #1
 80071c2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80071c4:	193b      	adds	r3, r7, r4
 80071c6:	4a39      	ldr	r2, [pc, #228]	@ (80072ac <MX_GPIO_Init+0x1a0>)
 80071c8:	0019      	movs	r1, r3
 80071ca:	0010      	movs	r0, r2
 80071cc:	f001 f9c8 	bl	8008560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = KEY_D3_Pin|KEY_D4_Pin;
 80071d0:	193b      	adds	r3, r7, r4
 80071d2:	2203      	movs	r2, #3
 80071d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071d6:	193b      	adds	r3, r7, r4
 80071d8:	2200      	movs	r2, #0
 80071da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071dc:	193b      	adds	r3, r7, r4
 80071de:	2201      	movs	r2, #1
 80071e0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80071e2:	193b      	adds	r3, r7, r4
 80071e4:	4a32      	ldr	r2, [pc, #200]	@ (80072b0 <MX_GPIO_Init+0x1a4>)
 80071e6:	0019      	movs	r1, r3
 80071e8:	0010      	movs	r0, r2
 80071ea:	f001 f9b9 	bl	8008560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin
 80071ee:	193b      	adds	r3, r7, r4
 80071f0:	4a30      	ldr	r2, [pc, #192]	@ (80072b4 <MX_GPIO_Init+0x1a8>)
 80071f2:	601a      	str	r2, [r3, #0]
                          |KEY_D5_Pin|KEY_B1_Pin|KEY_B2_Pin|KEY_B3_Pin
                          |KEY_D6_Pin|KEY_A6_Pin|KEY_B6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071f4:	193b      	adds	r3, r7, r4
 80071f6:	2200      	movs	r2, #0
 80071f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80071fa:	193b      	adds	r3, r7, r4
 80071fc:	2201      	movs	r2, #1
 80071fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007200:	193a      	adds	r2, r7, r4
 8007202:	23a0      	movs	r3, #160	@ 0xa0
 8007204:	05db      	lsls	r3, r3, #23
 8007206:	0011      	movs	r1, r2
 8007208:	0018      	movs	r0, r3
 800720a:	f001 f9a9 	bl	8008560 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = KEY_B4_Pin|KEY_A1_Pin|KEY_C5_Pin|KEY_A2_Pin
 800720e:	193b      	adds	r3, r7, r4
 8007210:	4a29      	ldr	r2, [pc, #164]	@ (80072b8 <MX_GPIO_Init+0x1ac>)
 8007212:	601a      	str	r2, [r3, #0]
                          |KEY_B5_Pin|KEY_A3_Pin|ENC_SW_Pin|KEY_E3_Pin
                          |KEY_E2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007214:	193b      	adds	r3, r7, r4
 8007216:	2200      	movs	r2, #0
 8007218:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800721a:	193b      	adds	r3, r7, r4
 800721c:	2201      	movs	r2, #1
 800721e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007220:	193b      	adds	r3, r7, r4
 8007222:	4a20      	ldr	r2, [pc, #128]	@ (80072a4 <MX_GPIO_Init+0x198>)
 8007224:	0019      	movs	r1, r3
 8007226:	0010      	movs	r0, r2
 8007228:	f001 f99a 	bl	8008560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_C6_Pin;
 800722c:	193b      	adds	r3, r7, r4
 800722e:	2202      	movs	r2, #2
 8007230:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007232:	193b      	adds	r3, r7, r4
 8007234:	2200      	movs	r2, #0
 8007236:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007238:	193b      	adds	r3, r7, r4
 800723a:	2201      	movs	r2, #1
 800723c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(KEY_C6_GPIO_Port, &GPIO_InitStruct);
 800723e:	193b      	adds	r3, r7, r4
 8007240:	4a17      	ldr	r2, [pc, #92]	@ (80072a0 <MX_GPIO_Init+0x194>)
 8007242:	0019      	movs	r1, r3
 8007244:	0010      	movs	r0, r2
 8007246:	f001 f98b 	bl	8008560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STAT1_LED_Pin;
 800724a:	193b      	adds	r3, r7, r4
 800724c:	2208      	movs	r2, #8
 800724e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007250:	193b      	adds	r3, r7, r4
 8007252:	2201      	movs	r2, #1
 8007254:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007256:	193b      	adds	r3, r7, r4
 8007258:	2200      	movs	r2, #0
 800725a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800725c:	193b      	adds	r3, r7, r4
 800725e:	2200      	movs	r2, #0
 8007260:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STAT1_LED_GPIO_Port, &GPIO_InitStruct);
 8007262:	193b      	adds	r3, r7, r4
 8007264:	4a0e      	ldr	r2, [pc, #56]	@ (80072a0 <MX_GPIO_Init+0x194>)
 8007266:	0019      	movs	r1, r3
 8007268:	0010      	movs	r0, r2
 800726a:	f001 f979 	bl	8008560 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STAT2_LED_Pin;
 800726e:	0021      	movs	r1, r4
 8007270:	187b      	adds	r3, r7, r1
 8007272:	2208      	movs	r2, #8
 8007274:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007276:	187b      	adds	r3, r7, r1
 8007278:	2201      	movs	r2, #1
 800727a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727c:	187b      	adds	r3, r7, r1
 800727e:	2200      	movs	r2, #0
 8007280:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007282:	187b      	adds	r3, r7, r1
 8007284:	2200      	movs	r2, #0
 8007286:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STAT2_LED_GPIO_Port, &GPIO_InitStruct);
 8007288:	187b      	adds	r3, r7, r1
 800728a:	4a06      	ldr	r2, [pc, #24]	@ (80072a4 <MX_GPIO_Init+0x198>)
 800728c:	0019      	movs	r1, r3
 800728e:	0010      	movs	r0, r2
 8007290:	f001 f966 	bl	8008560 <HAL_GPIO_Init>

}
 8007294:	46c0      	nop			@ (mov r8, r8)
 8007296:	46bd      	mov	sp, r7
 8007298:	b00b      	add	sp, #44	@ 0x2c
 800729a:	bd90      	pop	{r4, r7, pc}
 800729c:	40021000 	.word	0x40021000
 80072a0:	50000c00 	.word	0x50000c00
 80072a4:	50000400 	.word	0x50000400
 80072a8:	0000e0c0 	.word	0x0000e0c0
 80072ac:	50000800 	.word	0x50000800
 80072b0:	50001400 	.word	0x50001400
 80072b4:	000086ff 	.word	0x000086ff
 80072b8:	00001f47 	.word	0x00001f47

080072bc <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80072c0:	4b1b      	ldr	r3, [pc, #108]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072c2:	4a1c      	ldr	r2, [pc, #112]	@ (8007334 <MX_I2C2_Init+0x78>)
 80072c4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80072c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072c8:	4a1b      	ldr	r2, [pc, #108]	@ (8007338 <MX_I2C2_Init+0x7c>)
 80072ca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80072cc:	4b18      	ldr	r3, [pc, #96]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80072d2:	4b17      	ldr	r3, [pc, #92]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072d4:	2201      	movs	r2, #1
 80072d6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80072d8:	4b15      	ldr	r3, [pc, #84]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072da:	2200      	movs	r2, #0
 80072dc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80072de:	4b14      	ldr	r3, [pc, #80]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072e0:	2200      	movs	r2, #0
 80072e2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80072e4:	4b12      	ldr	r3, [pc, #72]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80072ea:	4b11      	ldr	r3, [pc, #68]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072ec:	2200      	movs	r2, #0
 80072ee:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80072f0:	4b0f      	ldr	r3, [pc, #60]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072f2:	2200      	movs	r2, #0
 80072f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80072f6:	4b0e      	ldr	r3, [pc, #56]	@ (8007330 <MX_I2C2_Init+0x74>)
 80072f8:	0018      	movs	r0, r3
 80072fa:	f001 faf3 	bl	80088e4 <HAL_I2C_Init>
 80072fe:	1e03      	subs	r3, r0, #0
 8007300:	d001      	beq.n	8007306 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007302:	f000 f93d 	bl	8007580 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007306:	4b0a      	ldr	r3, [pc, #40]	@ (8007330 <MX_I2C2_Init+0x74>)
 8007308:	2100      	movs	r1, #0
 800730a:	0018      	movs	r0, r3
 800730c:	f001 fef0 	bl	80090f0 <HAL_I2CEx_ConfigAnalogFilter>
 8007310:	1e03      	subs	r3, r0, #0
 8007312:	d001      	beq.n	8007318 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007314:	f000 f934 	bl	8007580 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007318:	4b05      	ldr	r3, [pc, #20]	@ (8007330 <MX_I2C2_Init+0x74>)
 800731a:	2100      	movs	r1, #0
 800731c:	0018      	movs	r0, r3
 800731e:	f001 ff33 	bl	8009188 <HAL_I2CEx_ConfigDigitalFilter>
 8007322:	1e03      	subs	r3, r0, #0
 8007324:	d001      	beq.n	800732a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007326:	f000 f92b 	bl	8007580 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800732a:	46c0      	nop			@ (mov r8, r8)
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}
 8007330:	20010b90 	.word	0x20010b90
 8007334:	40005800 	.word	0x40005800
 8007338:	10707dbc 	.word	0x10707dbc

0800733c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800733c:	b590      	push	{r4, r7, lr}
 800733e:	b09f      	sub	sp, #124	@ 0x7c
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007344:	2364      	movs	r3, #100	@ 0x64
 8007346:	18fb      	adds	r3, r7, r3
 8007348:	0018      	movs	r0, r3
 800734a:	2314      	movs	r3, #20
 800734c:	001a      	movs	r2, r3
 800734e:	2100      	movs	r1, #0
 8007350:	f016 ff34 	bl	801e1bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007354:	2414      	movs	r4, #20
 8007356:	193b      	adds	r3, r7, r4
 8007358:	0018      	movs	r0, r3
 800735a:	2350      	movs	r3, #80	@ 0x50
 800735c:	001a      	movs	r2, r3
 800735e:	2100      	movs	r1, #0
 8007360:	f016 ff2c 	bl	801e1bc <memset>
  if(i2cHandle->Instance==I2C2)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a22      	ldr	r2, [pc, #136]	@ (80073f4 <HAL_I2C_MspInit+0xb8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d13e      	bne.n	80073ec <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800736e:	193b      	adds	r3, r7, r4
 8007370:	2240      	movs	r2, #64	@ 0x40
 8007372:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8007374:	193b      	adds	r3, r7, r4
 8007376:	2200      	movs	r2, #0
 8007378:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800737a:	193b      	adds	r3, r7, r4
 800737c:	0018      	movs	r0, r3
 800737e:	f004 fafd 	bl	800b97c <HAL_RCCEx_PeriphCLKConfig>
 8007382:	1e03      	subs	r3, r0, #0
 8007384:	d001      	beq.n	800738a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8007386:	f000 f8fb 	bl	8007580 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800738a:	4b1b      	ldr	r3, [pc, #108]	@ (80073f8 <HAL_I2C_MspInit+0xbc>)
 800738c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800738e:	4b1a      	ldr	r3, [pc, #104]	@ (80073f8 <HAL_I2C_MspInit+0xbc>)
 8007390:	2102      	movs	r1, #2
 8007392:	430a      	orrs	r2, r1
 8007394:	635a      	str	r2, [r3, #52]	@ 0x34
 8007396:	4b18      	ldr	r3, [pc, #96]	@ (80073f8 <HAL_I2C_MspInit+0xbc>)
 8007398:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800739a:	2202      	movs	r2, #2
 800739c:	4013      	ands	r3, r2
 800739e:	613b      	str	r3, [r7, #16]
 80073a0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80073a2:	2164      	movs	r1, #100	@ 0x64
 80073a4:	187b      	adds	r3, r7, r1
 80073a6:	22c0      	movs	r2, #192	@ 0xc0
 80073a8:	01d2      	lsls	r2, r2, #7
 80073aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80073ac:	187b      	adds	r3, r7, r1
 80073ae:	2212      	movs	r2, #18
 80073b0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b2:	187b      	adds	r3, r7, r1
 80073b4:	2200      	movs	r2, #0
 80073b6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b8:	187b      	adds	r3, r7, r1
 80073ba:	2200      	movs	r2, #0
 80073bc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80073be:	187b      	adds	r3, r7, r1
 80073c0:	2206      	movs	r2, #6
 80073c2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073c4:	187b      	adds	r3, r7, r1
 80073c6:	4a0d      	ldr	r2, [pc, #52]	@ (80073fc <HAL_I2C_MspInit+0xc0>)
 80073c8:	0019      	movs	r1, r3
 80073ca:	0010      	movs	r0, r2
 80073cc:	f001 f8c8 	bl	8008560 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80073d0:	4b09      	ldr	r3, [pc, #36]	@ (80073f8 <HAL_I2C_MspInit+0xbc>)
 80073d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073d4:	4b08      	ldr	r3, [pc, #32]	@ (80073f8 <HAL_I2C_MspInit+0xbc>)
 80073d6:	2180      	movs	r1, #128	@ 0x80
 80073d8:	03c9      	lsls	r1, r1, #15
 80073da:	430a      	orrs	r2, r1
 80073dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80073de:	4b06      	ldr	r3, [pc, #24]	@ (80073f8 <HAL_I2C_MspInit+0xbc>)
 80073e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073e2:	2380      	movs	r3, #128	@ 0x80
 80073e4:	03db      	lsls	r3, r3, #15
 80073e6:	4013      	ands	r3, r2
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80073ec:	46c0      	nop			@ (mov r8, r8)
 80073ee:	46bd      	mov	sp, r7
 80073f0:	b01f      	add	sp, #124	@ 0x7c
 80073f2:	bd90      	pop	{r4, r7, pc}
 80073f4:	40005800 	.word	0x40005800
 80073f8:	40021000 	.word	0x40021000
 80073fc:	50000400 	.word	0x50000400

08007400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007404:	f000 ff3c 	bl	8008280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007408:	f000 f814 	bl	8007434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800740c:	f7ff fe7e 	bl	800710c <MX_GPIO_Init>
  MX_DMA_Init();
 8007410:	f7ff fe50 	bl	80070b4 <MX_DMA_Init>
  MX_I2C2_Init();
 8007414:	f7ff ff52 	bl	80072bc <MX_I2C2_Init>
  MX_TIM3_Init();
 8007418:	f000 f9dc 	bl	80077d4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800741c:	f000 fa3e 	bl	800789c <MX_TIM4_Init>
  MX_UCPD1_Init();
 8007420:	f000 fd28 	bl	8007e74 <MX_UCPD1_Init>
  MX_UCPD2_Init();
 8007424:	f000 fdcc 	bl	8007fc0 <MX_UCPD2_Init>
  /* Call PreOsInit function */
  USBPD_PreInitOs();
 8007428:	f015 f9cc 	bl	801c7c4 <USBPD_PreInitOs>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 800742c:	f7ff fdb3 	bl	8006f96 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007430:	46c0      	nop			@ (mov r8, r8)
 8007432:	e7fd      	b.n	8007430 <main+0x30>

08007434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007434:	b590      	push	{r4, r7, lr}
 8007436:	b09b      	sub	sp, #108	@ 0x6c
 8007438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800743a:	242c      	movs	r4, #44	@ 0x2c
 800743c:	193b      	adds	r3, r7, r4
 800743e:	0018      	movs	r0, r3
 8007440:	233c      	movs	r3, #60	@ 0x3c
 8007442:	001a      	movs	r2, r3
 8007444:	2100      	movs	r1, #0
 8007446:	f016 feb9 	bl	801e1bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800744a:	231c      	movs	r3, #28
 800744c:	18fb      	adds	r3, r7, r3
 800744e:	0018      	movs	r0, r3
 8007450:	2310      	movs	r3, #16
 8007452:	001a      	movs	r2, r3
 8007454:	2100      	movs	r1, #0
 8007456:	f016 feb1 	bl	801e1bc <memset>
  RCC_CRSInitTypeDef pInit = {0};
 800745a:	1d3b      	adds	r3, r7, #4
 800745c:	0018      	movs	r0, r3
 800745e:	2318      	movs	r3, #24
 8007460:	001a      	movs	r2, r3
 8007462:	2100      	movs	r1, #0
 8007464:	f016 feaa 	bl	801e1bc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007468:	2380      	movs	r3, #128	@ 0x80
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	0018      	movs	r0, r3
 800746e:	f003 fd05 	bl	800ae7c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007472:	193b      	adds	r3, r7, r4
 8007474:	2222      	movs	r2, #34	@ 0x22
 8007476:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007478:	193b      	adds	r3, r7, r4
 800747a:	2280      	movs	r2, #128	@ 0x80
 800747c:	0052      	lsls	r2, r2, #1
 800747e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007480:	193b      	adds	r3, r7, r4
 8007482:	2280      	movs	r2, #128	@ 0x80
 8007484:	03d2      	lsls	r2, r2, #15
 8007486:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8007488:	0021      	movs	r1, r4
 800748a:	187b      	adds	r3, r7, r1
 800748c:	2200      	movs	r2, #0
 800748e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007490:	187b      	adds	r3, r7, r1
 8007492:	2240      	movs	r2, #64	@ 0x40
 8007494:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007496:	187b      	adds	r3, r7, r1
 8007498:	2202      	movs	r2, #2
 800749a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800749c:	187b      	adds	r3, r7, r1
 800749e:	2202      	movs	r2, #2
 80074a0:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80074a2:	187b      	adds	r3, r7, r1
 80074a4:	2200      	movs	r2, #0
 80074a6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80074a8:	187b      	adds	r3, r7, r1
 80074aa:	2208      	movs	r2, #8
 80074ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80074ae:	187b      	adds	r3, r7, r1
 80074b0:	2280      	movs	r2, #128	@ 0x80
 80074b2:	0292      	lsls	r2, r2, #10
 80074b4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80074b6:	187b      	adds	r3, r7, r1
 80074b8:	22c0      	movs	r2, #192	@ 0xc0
 80074ba:	04d2      	lsls	r2, r2, #19
 80074bc:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80074be:	187b      	adds	r3, r7, r1
 80074c0:	2280      	movs	r2, #128	@ 0x80
 80074c2:	0592      	lsls	r2, r2, #22
 80074c4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80074c6:	187b      	adds	r3, r7, r1
 80074c8:	0018      	movs	r0, r3
 80074ca:	f003 fd23 	bl	800af14 <HAL_RCC_OscConfig>
 80074ce:	1e03      	subs	r3, r0, #0
 80074d0:	d001      	beq.n	80074d6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80074d2:	f000 f855 	bl	8007580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80074d6:	211c      	movs	r1, #28
 80074d8:	187b      	adds	r3, r7, r1
 80074da:	2207      	movs	r2, #7
 80074dc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80074de:	187b      	adds	r3, r7, r1
 80074e0:	2202      	movs	r2, #2
 80074e2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80074e4:	187b      	adds	r3, r7, r1
 80074e6:	2200      	movs	r2, #0
 80074e8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80074ea:	187b      	adds	r3, r7, r1
 80074ec:	2200      	movs	r2, #0
 80074ee:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80074f0:	187b      	adds	r3, r7, r1
 80074f2:	2102      	movs	r1, #2
 80074f4:	0018      	movs	r0, r3
 80074f6:	f004 f86d 	bl	800b5d4 <HAL_RCC_ClockConfig>
 80074fa:	1e03      	subs	r3, r0, #0
 80074fc:	d001      	beq.n	8007502 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80074fe:	f000 f83f 	bl	8007580 <Error_Handler>
  }

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8007502:	4b14      	ldr	r3, [pc, #80]	@ (8007554 <SystemClock_Config+0x120>)
 8007504:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007506:	4b13      	ldr	r3, [pc, #76]	@ (8007554 <SystemClock_Config+0x120>)
 8007508:	2180      	movs	r1, #128	@ 0x80
 800750a:	0249      	lsls	r1, r1, #9
 800750c:	430a      	orrs	r2, r1
 800750e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007510:	4b10      	ldr	r3, [pc, #64]	@ (8007554 <SystemClock_Config+0x120>)
 8007512:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007514:	2380      	movs	r3, #128	@ 0x80
 8007516:	025b      	lsls	r3, r3, #9
 8007518:	4013      	ands	r3, r2
 800751a:	603b      	str	r3, [r7, #0]
 800751c:	683b      	ldr	r3, [r7, #0]

  /** Configures CRS
  */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 800751e:	1d3b      	adds	r3, r7, #4
 8007520:	2200      	movs	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
  pInit.Source = RCC_CRS_SYNC_SOURCE_USB;
 8007524:	1d3b      	adds	r3, r7, #4
 8007526:	2280      	movs	r2, #128	@ 0x80
 8007528:	0592      	lsls	r2, r2, #22
 800752a:	605a      	str	r2, [r3, #4]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800752c:	1d3b      	adds	r3, r7, #4
 800752e:	2200      	movs	r2, #0
 8007530:	609a      	str	r2, [r3, #8]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8007532:	1d3b      	adds	r3, r7, #4
 8007534:	4a08      	ldr	r2, [pc, #32]	@ (8007558 <SystemClock_Config+0x124>)
 8007536:	60da      	str	r2, [r3, #12]
  pInit.ErrorLimitValue = 34;
 8007538:	1d3b      	adds	r3, r7, #4
 800753a:	2222      	movs	r2, #34	@ 0x22
 800753c:	611a      	str	r2, [r3, #16]
  pInit.HSI48CalibrationValue = 32;
 800753e:	1d3b      	adds	r3, r7, #4
 8007540:	2220      	movs	r2, #32
 8007542:	615a      	str	r2, [r3, #20]

  HAL_RCCEx_CRSConfig(&pInit);
 8007544:	1d3b      	adds	r3, r7, #4
 8007546:	0018      	movs	r0, r3
 8007548:	f004 fc74 	bl	800be34 <HAL_RCCEx_CRSConfig>
}
 800754c:	46c0      	nop			@ (mov r8, r8)
 800754e:	46bd      	mov	sp, r7
 8007550:	b01b      	add	sp, #108	@ 0x6c
 8007552:	bd90      	pop	{r4, r7, pc}
 8007554:	40021000 	.word	0x40021000
 8007558:	0000bb7f 	.word	0x0000bb7f

0800755c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a04      	ldr	r2, [pc, #16]	@ (800757c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d101      	bne.n	8007572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800756e:	f000 fea7 	bl	80082c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007572:	46c0      	nop			@ (mov r8, r8)
 8007574:	46bd      	mov	sp, r7
 8007576:	b002      	add	sp, #8
 8007578:	bd80      	pop	{r7, pc}
 800757a:	46c0      	nop			@ (mov r8, r8)
 800757c:	40001000 	.word	0x40001000

08007580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007584:	b672      	cpsid	i
}
 8007586:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007588:	46c0      	nop			@ (mov r8, r8)
 800758a:	e7fd      	b.n	8007588 <Error_Handler+0x8>

0800758c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007592:	4b15      	ldr	r3, [pc, #84]	@ (80075e8 <HAL_MspInit+0x5c>)
 8007594:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007596:	4b14      	ldr	r3, [pc, #80]	@ (80075e8 <HAL_MspInit+0x5c>)
 8007598:	2101      	movs	r1, #1
 800759a:	430a      	orrs	r2, r1
 800759c:	641a      	str	r2, [r3, #64]	@ 0x40
 800759e:	4b12      	ldr	r3, [pc, #72]	@ (80075e8 <HAL_MspInit+0x5c>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075a2:	2201      	movs	r2, #1
 80075a4:	4013      	ands	r3, r2
 80075a6:	607b      	str	r3, [r7, #4]
 80075a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80075aa:	4b0f      	ldr	r3, [pc, #60]	@ (80075e8 <HAL_MspInit+0x5c>)
 80075ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <HAL_MspInit+0x5c>)
 80075b0:	2180      	movs	r1, #128	@ 0x80
 80075b2:	0549      	lsls	r1, r1, #21
 80075b4:	430a      	orrs	r2, r1
 80075b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80075b8:	4b0b      	ldr	r3, [pc, #44]	@ (80075e8 <HAL_MspInit+0x5c>)
 80075ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80075bc:	2380      	movs	r3, #128	@ 0x80
 80075be:	055b      	lsls	r3, r3, #21
 80075c0:	4013      	ands	r3, r2
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 80075c6:	2004      	movs	r0, #4
 80075c8:	f000 feba 	bl	8008340 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80075cc:	f000 fee0 	bl	8008390 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80075d0:	2000      	movs	r0, #0
 80075d2:	f000 fec9 	bl	8008368 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80075d6:	23c0      	movs	r3, #192	@ 0xc0
 80075d8:	00db      	lsls	r3, r3, #3
 80075da:	0018      	movs	r0, r3
 80075dc:	f000 fefc 	bl	80083d8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80075e0:	46c0      	nop			@ (mov r8, r8)
 80075e2:	46bd      	mov	sp, r7
 80075e4:	b002      	add	sp, #8
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40021000 	.word	0x40021000

080075ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075ec:	b5b0      	push	{r4, r5, r7, lr}
 80075ee:	b08c      	sub	sp, #48	@ 0x30
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80075f4:	232b      	movs	r3, #43	@ 0x2b
 80075f6:	18fb      	adds	r3, r7, r3
 80075f8:	2200      	movs	r2, #0
 80075fa:	701a      	strb	r2, [r3, #0]

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80075fc:	4b37      	ldr	r3, [pc, #220]	@ (80076dc <HAL_InitTick+0xf0>)
 80075fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007600:	4b36      	ldr	r3, [pc, #216]	@ (80076dc <HAL_InitTick+0xf0>)
 8007602:	2110      	movs	r1, #16
 8007604:	430a      	orrs	r2, r1
 8007606:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007608:	4b34      	ldr	r3, [pc, #208]	@ (80076dc <HAL_InitTick+0xf0>)
 800760a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800760c:	2210      	movs	r2, #16
 800760e:	4013      	ands	r3, r2
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007614:	230c      	movs	r3, #12
 8007616:	18fa      	adds	r2, r7, r3
 8007618:	2410      	movs	r4, #16
 800761a:	193b      	adds	r3, r7, r4
 800761c:	0011      	movs	r1, r2
 800761e:	0018      	movs	r0, r3
 8007620:	f004 f982 	bl	800b928 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8007624:	193b      	adds	r3, r7, r4
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800762a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8007630:	f004 f964 	bl	800b8fc <HAL_RCC_GetPCLK1Freq>
 8007634:	0003      	movs	r3, r0
 8007636:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007638:	e004      	b.n	8007644 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800763a:	f004 f95f 	bl	800b8fc <HAL_RCC_GetPCLK1Freq>
 800763e:	0003      	movs	r3, r0
 8007640:	005b      	lsls	r3, r3, #1
 8007642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007646:	4926      	ldr	r1, [pc, #152]	@ (80076e0 <HAL_InitTick+0xf4>)
 8007648:	0018      	movs	r0, r3
 800764a:	f7fe fefb 	bl	8006444 <__udivsi3>
 800764e:	0003      	movs	r3, r0
 8007650:	3b01      	subs	r3, #1
 8007652:	623b      	str	r3, [r7, #32]

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8007654:	4b23      	ldr	r3, [pc, #140]	@ (80076e4 <HAL_InitTick+0xf8>)
 8007656:	4a24      	ldr	r2, [pc, #144]	@ (80076e8 <HAL_InitTick+0xfc>)
 8007658:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800765a:	4b22      	ldr	r3, [pc, #136]	@ (80076e4 <HAL_InitTick+0xf8>)
 800765c:	4a23      	ldr	r2, [pc, #140]	@ (80076ec <HAL_InitTick+0x100>)
 800765e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8007660:	4b20      	ldr	r3, [pc, #128]	@ (80076e4 <HAL_InitTick+0xf8>)
 8007662:	6a3a      	ldr	r2, [r7, #32]
 8007664:	605a      	str	r2, [r3, #4]
  htim6.Init.ClockDivision = 0;
 8007666:	4b1f      	ldr	r3, [pc, #124]	@ (80076e4 <HAL_InitTick+0xf8>)
 8007668:	2200      	movs	r2, #0
 800766a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800766c:	4b1d      	ldr	r3, [pc, #116]	@ (80076e4 <HAL_InitTick+0xf8>)
 800766e:	2200      	movs	r2, #0
 8007670:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007672:	4b1c      	ldr	r3, [pc, #112]	@ (80076e4 <HAL_InitTick+0xf8>)
 8007674:	2200      	movs	r2, #0
 8007676:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8007678:	252b      	movs	r5, #43	@ 0x2b
 800767a:	197c      	adds	r4, r7, r5
 800767c:	4b19      	ldr	r3, [pc, #100]	@ (80076e4 <HAL_InitTick+0xf8>)
 800767e:	0018      	movs	r0, r3
 8007680:	f004 fc1e 	bl	800bec0 <HAL_TIM_Base_Init>
 8007684:	0003      	movs	r3, r0
 8007686:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8007688:	197b      	adds	r3, r7, r5
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d11e      	bne.n	80076ce <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8007690:	197c      	adds	r4, r7, r5
 8007692:	4b14      	ldr	r3, [pc, #80]	@ (80076e4 <HAL_InitTick+0xf8>)
 8007694:	0018      	movs	r0, r3
 8007696:	f004 fc73 	bl	800bf80 <HAL_TIM_Base_Start_IT>
 800769a:	0003      	movs	r3, r0
 800769c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 800769e:	197b      	adds	r3, r7, r5
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d113      	bne.n	80076ce <HAL_InitTick+0xe2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_LPTIM1_IRQn);
 80076a6:	2011      	movs	r0, #17
 80076a8:	f000 ff49 	bl	800853e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2b03      	cmp	r3, #3
 80076b0:	d809      	bhi.n	80076c6 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_LPTIM1_IRQn, TickPriority, 0U);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	0019      	movs	r1, r3
 80076b8:	2011      	movs	r0, #17
 80076ba:	f000 ff2b 	bl	8008514 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80076be:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <HAL_InitTick+0x104>)
 80076c0:	687a      	ldr	r2, [r7, #4]
 80076c2:	601a      	str	r2, [r3, #0]
 80076c4:	e003      	b.n	80076ce <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80076c6:	232b      	movs	r3, #43	@ 0x2b
 80076c8:	18fb      	adds	r3, r7, r3
 80076ca:	2201      	movs	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80076ce:	232b      	movs	r3, #43	@ 0x2b
 80076d0:	18fb      	adds	r3, r7, r3
 80076d2:	781b      	ldrb	r3, [r3, #0]
}
 80076d4:	0018      	movs	r0, r3
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b00c      	add	sp, #48	@ 0x30
 80076da:	bdb0      	pop	{r4, r5, r7, pc}
 80076dc:	40021000 	.word	0x40021000
 80076e0:	000f4240 	.word	0x000f4240
 80076e4:	20010be4 	.word	0x20010be4
 80076e8:	40001000 	.word	0x40001000
 80076ec:	000003e7 	.word	0x000003e7
 80076f0:	20000008 	.word	0x20000008

080076f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80076f8:	46c0      	nop			@ (mov r8, r8)
 80076fa:	e7fd      	b.n	80076f8 <NMI_Handler+0x4>

080076fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007700:	46c0      	nop			@ (mov r8, r8)
 8007702:	e7fd      	b.n	8007700 <HardFault_Handler+0x4>

08007704 <USB_UCPD1_2_IRQHandler>:

/**
  * @brief This function handles USB, UCPD1 and UCPD2 global interrupts.
  */
void USB_UCPD1_2_IRQHandler(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_UCPD1_2_IRQn 0 */

  /* USER CODE END USB_UCPD1_2_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_DRD_FS);
 8007708:	4b05      	ldr	r3, [pc, #20]	@ (8007720 <USB_UCPD1_2_IRQHandler+0x1c>)
 800770a:	0018      	movs	r0, r3
 800770c:	f001 ff32 	bl	8009574 <HAL_PCD_IRQHandler>
  USBPD_PORT0_IRQHandler();
 8007710:	f00d fd37 	bl	8015182 <USBPD_PORT0_IRQHandler>
  USBPD_PORT1_IRQHandler();
 8007714:	f00d fd3d 	bl	8015192 <USBPD_PORT1_IRQHandler>

  /* USER CODE BEGIN USB_UCPD1_2_IRQn 1 */

  /* USER CODE END USB_UCPD1_2_IRQn 1 */
}
 8007718:	46c0      	nop			@ (mov r8, r8)
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	46c0      	nop			@ (mov r8, r8)
 8007720:	20010ccc 	.word	0x20010ccc

08007724 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007728:	46c0      	nop			@ (mov r8, r8)
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_3_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007732:	46c0      	nop			@ (mov r8, r8)
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMA1 Ch4 to Ch7, DMA2 Ch1 to Ch5 and DMAMUX1 Overrun Interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQHandler(void)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 0 */

  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch1_5_DMAMUX1_OVR_IRQn 1 */
}
 800773c:	46c0      	nop			@ (mov r8, r8)
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
	...

08007744 <TIM6_DAC_LPTIM1_IRQHandler>:

/**
  * @brief This function handles TIM6, DAC and LPTIM1 global Interrupts.
  */
void TIM6_DAC_LPTIM1_IRQHandler(void)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 0 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007748:	4b03      	ldr	r3, [pc, #12]	@ (8007758 <TIM6_DAC_LPTIM1_IRQHandler+0x14>)
 800774a:	0018      	movs	r0, r3
 800774c:	f004 fd7a 	bl	800c244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_LPTIM1_IRQn 1 */

  /* USER CODE END TIM6_DAC_LPTIM1_IRQn 1 */
}
 8007750:	46c0      	nop			@ (mov r8, r8)
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	46c0      	nop			@ (mov r8, r8)
 8007758:	20010be4 	.word	0x20010be4

0800775c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b086      	sub	sp, #24
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007764:	4a14      	ldr	r2, [pc, #80]	@ (80077b8 <_sbrk+0x5c>)
 8007766:	4b15      	ldr	r3, [pc, #84]	@ (80077bc <_sbrk+0x60>)
 8007768:	1ad3      	subs	r3, r2, r3
 800776a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007770:	4b13      	ldr	r3, [pc, #76]	@ (80077c0 <_sbrk+0x64>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d102      	bne.n	800777e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007778:	4b11      	ldr	r3, [pc, #68]	@ (80077c0 <_sbrk+0x64>)
 800777a:	4a12      	ldr	r2, [pc, #72]	@ (80077c4 <_sbrk+0x68>)
 800777c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800777e:	4b10      	ldr	r3, [pc, #64]	@ (80077c0 <_sbrk+0x64>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	18d3      	adds	r3, r2, r3
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	429a      	cmp	r2, r3
 800778a:	d207      	bcs.n	800779c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800778c:	f016 fd30 	bl	801e1f0 <__errno>
 8007790:	0003      	movs	r3, r0
 8007792:	220c      	movs	r2, #12
 8007794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007796:	2301      	movs	r3, #1
 8007798:	425b      	negs	r3, r3
 800779a:	e009      	b.n	80077b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800779c:	4b08      	ldr	r3, [pc, #32]	@ (80077c0 <_sbrk+0x64>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80077a2:	4b07      	ldr	r3, [pc, #28]	@ (80077c0 <_sbrk+0x64>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	18d2      	adds	r2, r2, r3
 80077aa:	4b05      	ldr	r3, [pc, #20]	@ (80077c0 <_sbrk+0x64>)
 80077ac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80077ae:	68fb      	ldr	r3, [r7, #12]
}
 80077b0:	0018      	movs	r0, r3
 80077b2:	46bd      	mov	sp, r7
 80077b4:	b006      	add	sp, #24
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20024000 	.word	0x20024000
 80077bc:	00000400 	.word	0x00000400
 80077c0:	20010c30 	.word	0x20010c30
 80077c4:	20011f00 	.word	0x20011f00

080077c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80077cc:	46c0      	nop			@ (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
	...

080077d4 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80077d4:	b590      	push	{r4, r7, lr}
 80077d6:	b08d      	sub	sp, #52	@ 0x34
 80077d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80077da:	240c      	movs	r4, #12
 80077dc:	193b      	adds	r3, r7, r4
 80077de:	0018      	movs	r0, r3
 80077e0:	2324      	movs	r3, #36	@ 0x24
 80077e2:	001a      	movs	r2, r3
 80077e4:	2100      	movs	r1, #0
 80077e6:	f016 fce9 	bl	801e1bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077ea:	003b      	movs	r3, r7
 80077ec:	0018      	movs	r0, r3
 80077ee:	230c      	movs	r3, #12
 80077f0:	001a      	movs	r2, r3
 80077f2:	2100      	movs	r1, #0
 80077f4:	f016 fce2 	bl	801e1bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80077f8:	4b25      	ldr	r3, [pc, #148]	@ (8007890 <MX_TIM3_Init+0xbc>)
 80077fa:	4a26      	ldr	r2, [pc, #152]	@ (8007894 <MX_TIM3_Init+0xc0>)
 80077fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80077fe:	4b24      	ldr	r3, [pc, #144]	@ (8007890 <MX_TIM3_Init+0xbc>)
 8007800:	2200      	movs	r2, #0
 8007802:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007804:	4b22      	ldr	r3, [pc, #136]	@ (8007890 <MX_TIM3_Init+0xbc>)
 8007806:	2200      	movs	r2, #0
 8007808:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800780a:	4b21      	ldr	r3, [pc, #132]	@ (8007890 <MX_TIM3_Init+0xbc>)
 800780c:	4a22      	ldr	r2, [pc, #136]	@ (8007898 <MX_TIM3_Init+0xc4>)
 800780e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007810:	4b1f      	ldr	r3, [pc, #124]	@ (8007890 <MX_TIM3_Init+0xbc>)
 8007812:	2200      	movs	r2, #0
 8007814:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007816:	4b1e      	ldr	r3, [pc, #120]	@ (8007890 <MX_TIM3_Init+0xbc>)
 8007818:	2200      	movs	r2, #0
 800781a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800781c:	0021      	movs	r1, r4
 800781e:	187b      	adds	r3, r7, r1
 8007820:	2203      	movs	r2, #3
 8007822:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007824:	187b      	adds	r3, r7, r1
 8007826:	2200      	movs	r2, #0
 8007828:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800782a:	187b      	adds	r3, r7, r1
 800782c:	2201      	movs	r2, #1
 800782e:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007830:	187b      	adds	r3, r7, r1
 8007832:	2200      	movs	r2, #0
 8007834:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8007836:	187b      	adds	r3, r7, r1
 8007838:	2200      	movs	r2, #0
 800783a:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800783c:	187b      	adds	r3, r7, r1
 800783e:	2200      	movs	r2, #0
 8007840:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007842:	187b      	adds	r3, r7, r1
 8007844:	2201      	movs	r2, #1
 8007846:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007848:	187b      	adds	r3, r7, r1
 800784a:	2200      	movs	r2, #0
 800784c:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800784e:	187b      	adds	r3, r7, r1
 8007850:	2200      	movs	r2, #0
 8007852:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8007854:	187a      	adds	r2, r7, r1
 8007856:	4b0e      	ldr	r3, [pc, #56]	@ (8007890 <MX_TIM3_Init+0xbc>)
 8007858:	0011      	movs	r1, r2
 800785a:	0018      	movs	r0, r3
 800785c:	f004 fc4a 	bl	800c0f4 <HAL_TIM_Encoder_Init>
 8007860:	1e03      	subs	r3, r0, #0
 8007862:	d001      	beq.n	8007868 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8007864:	f7ff fe8c 	bl	8007580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007868:	003b      	movs	r3, r7
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800786e:	003b      	movs	r3, r7
 8007870:	2200      	movs	r2, #0
 8007872:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007874:	003a      	movs	r2, r7
 8007876:	4b06      	ldr	r3, [pc, #24]	@ (8007890 <MX_TIM3_Init+0xbc>)
 8007878:	0011      	movs	r1, r2
 800787a:	0018      	movs	r0, r3
 800787c:	f005 fa66 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 8007880:	1e03      	subs	r3, r0, #0
 8007882:	d001      	beq.n	8007888 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8007884:	f7ff fe7c 	bl	8007580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007888:	46c0      	nop			@ (mov r8, r8)
 800788a:	46bd      	mov	sp, r7
 800788c:	b00d      	add	sp, #52	@ 0x34
 800788e:	bd90      	pop	{r4, r7, pc}
 8007890:	20010c34 	.word	0x20010c34
 8007894:	40000400 	.word	0x40000400
 8007898:	0000ffff 	.word	0x0000ffff

0800789c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b08a      	sub	sp, #40	@ 0x28
 80078a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078a2:	231c      	movs	r3, #28
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	0018      	movs	r0, r3
 80078a8:	230c      	movs	r3, #12
 80078aa:	001a      	movs	r2, r3
 80078ac:	2100      	movs	r1, #0
 80078ae:	f016 fc85 	bl	801e1bc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80078b2:	003b      	movs	r3, r7
 80078b4:	0018      	movs	r0, r3
 80078b6:	231c      	movs	r3, #28
 80078b8:	001a      	movs	r2, r3
 80078ba:	2100      	movs	r1, #0
 80078bc:	f016 fc7e 	bl	801e1bc <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80078c0:	4b24      	ldr	r3, [pc, #144]	@ (8007954 <MX_TIM4_Init+0xb8>)
 80078c2:	4a25      	ldr	r2, [pc, #148]	@ (8007958 <MX_TIM4_Init+0xbc>)
 80078c4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80078c6:	4b23      	ldr	r3, [pc, #140]	@ (8007954 <MX_TIM4_Init+0xb8>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078cc:	4b21      	ldr	r3, [pc, #132]	@ (8007954 <MX_TIM4_Init+0xb8>)
 80078ce:	2200      	movs	r2, #0
 80078d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80078d2:	4b20      	ldr	r3, [pc, #128]	@ (8007954 <MX_TIM4_Init+0xb8>)
 80078d4:	4a21      	ldr	r2, [pc, #132]	@ (800795c <MX_TIM4_Init+0xc0>)
 80078d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078d8:	4b1e      	ldr	r3, [pc, #120]	@ (8007954 <MX_TIM4_Init+0xb8>)
 80078da:	2200      	movs	r2, #0
 80078dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078de:	4b1d      	ldr	r3, [pc, #116]	@ (8007954 <MX_TIM4_Init+0xb8>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80078e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007954 <MX_TIM4_Init+0xb8>)
 80078e6:	0018      	movs	r0, r3
 80078e8:	f004 fbac 	bl	800c044 <HAL_TIM_PWM_Init>
 80078ec:	1e03      	subs	r3, r0, #0
 80078ee:	d001      	beq.n	80078f4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80078f0:	f7ff fe46 	bl	8007580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078f4:	211c      	movs	r1, #28
 80078f6:	187b      	adds	r3, r7, r1
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078fc:	187b      	adds	r3, r7, r1
 80078fe:	2200      	movs	r2, #0
 8007900:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007902:	187a      	adds	r2, r7, r1
 8007904:	4b13      	ldr	r3, [pc, #76]	@ (8007954 <MX_TIM4_Init+0xb8>)
 8007906:	0011      	movs	r1, r2
 8007908:	0018      	movs	r0, r3
 800790a:	f005 fa1f 	bl	800cd4c <HAL_TIMEx_MasterConfigSynchronization>
 800790e:	1e03      	subs	r3, r0, #0
 8007910:	d001      	beq.n	8007916 <MX_TIM4_Init+0x7a>
  {
    Error_Handler();
 8007912:	f7ff fe35 	bl	8007580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007916:	003b      	movs	r3, r7
 8007918:	2260      	movs	r2, #96	@ 0x60
 800791a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800791c:	003b      	movs	r3, r7
 800791e:	2200      	movs	r2, #0
 8007920:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007922:	003b      	movs	r3, r7
 8007924:	2200      	movs	r2, #0
 8007926:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007928:	003b      	movs	r3, r7
 800792a:	2200      	movs	r2, #0
 800792c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800792e:	0039      	movs	r1, r7
 8007930:	4b08      	ldr	r3, [pc, #32]	@ (8007954 <MX_TIM4_Init+0xb8>)
 8007932:	2204      	movs	r2, #4
 8007934:	0018      	movs	r0, r3
 8007936:	f004 fd8d 	bl	800c454 <HAL_TIM_PWM_ConfigChannel>
 800793a:	1e03      	subs	r3, r0, #0
 800793c:	d001      	beq.n	8007942 <MX_TIM4_Init+0xa6>
  {
    Error_Handler();
 800793e:	f7ff fe1f 	bl	8007580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007942:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <MX_TIM4_Init+0xb8>)
 8007944:	0018      	movs	r0, r3
 8007946:	f000 f873 	bl	8007a30 <HAL_TIM_MspPostInit>

}
 800794a:	46c0      	nop			@ (mov r8, r8)
 800794c:	46bd      	mov	sp, r7
 800794e:	b00a      	add	sp, #40	@ 0x28
 8007950:	bd80      	pop	{r7, pc}
 8007952:	46c0      	nop			@ (mov r8, r8)
 8007954:	20010c80 	.word	0x20010c80
 8007958:	40000800 	.word	0x40000800
 800795c:	0000ffff 	.word	0x0000ffff

08007960 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007960:	b590      	push	{r4, r7, lr}
 8007962:	b08b      	sub	sp, #44	@ 0x2c
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007968:	2414      	movs	r4, #20
 800796a:	193b      	adds	r3, r7, r4
 800796c:	0018      	movs	r0, r3
 800796e:	2314      	movs	r3, #20
 8007970:	001a      	movs	r2, r3
 8007972:	2100      	movs	r1, #0
 8007974:	f016 fc22 	bl	801e1bc <memset>
  if(tim_encoderHandle->Instance==TIM3)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a1a      	ldr	r2, [pc, #104]	@ (80079e8 <HAL_TIM_Encoder_MspInit+0x88>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d12d      	bne.n	80079de <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007982:	4b1a      	ldr	r3, [pc, #104]	@ (80079ec <HAL_TIM_Encoder_MspInit+0x8c>)
 8007984:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007986:	4b19      	ldr	r3, [pc, #100]	@ (80079ec <HAL_TIM_Encoder_MspInit+0x8c>)
 8007988:	2102      	movs	r1, #2
 800798a:	430a      	orrs	r2, r1
 800798c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800798e:	4b17      	ldr	r3, [pc, #92]	@ (80079ec <HAL_TIM_Encoder_MspInit+0x8c>)
 8007990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007992:	2202      	movs	r2, #2
 8007994:	4013      	ands	r3, r2
 8007996:	613b      	str	r3, [r7, #16]
 8007998:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800799a:	4b14      	ldr	r3, [pc, #80]	@ (80079ec <HAL_TIM_Encoder_MspInit+0x8c>)
 800799c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800799e:	4b13      	ldr	r3, [pc, #76]	@ (80079ec <HAL_TIM_Encoder_MspInit+0x8c>)
 80079a0:	2102      	movs	r1, #2
 80079a2:	430a      	orrs	r2, r1
 80079a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80079a6:	4b11      	ldr	r3, [pc, #68]	@ (80079ec <HAL_TIM_Encoder_MspInit+0x8c>)
 80079a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079aa:	2202      	movs	r2, #2
 80079ac:	4013      	ands	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
 80079b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 80079b2:	0021      	movs	r1, r4
 80079b4:	187b      	adds	r3, r7, r1
 80079b6:	2230      	movs	r2, #48	@ 0x30
 80079b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079ba:	187b      	adds	r3, r7, r1
 80079bc:	2202      	movs	r2, #2
 80079be:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079c0:	187b      	adds	r3, r7, r1
 80079c2:	2200      	movs	r2, #0
 80079c4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079c6:	187b      	adds	r3, r7, r1
 80079c8:	2200      	movs	r2, #0
 80079ca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80079cc:	187b      	adds	r3, r7, r1
 80079ce:	2201      	movs	r2, #1
 80079d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80079d2:	187b      	adds	r3, r7, r1
 80079d4:	4a06      	ldr	r2, [pc, #24]	@ (80079f0 <HAL_TIM_Encoder_MspInit+0x90>)
 80079d6:	0019      	movs	r1, r3
 80079d8:	0010      	movs	r0, r2
 80079da:	f000 fdc1 	bl	8008560 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80079de:	46c0      	nop			@ (mov r8, r8)
 80079e0:	46bd      	mov	sp, r7
 80079e2:	b00b      	add	sp, #44	@ 0x2c
 80079e4:	bd90      	pop	{r4, r7, pc}
 80079e6:	46c0      	nop			@ (mov r8, r8)
 80079e8:	40000400 	.word	0x40000400
 80079ec:	40021000 	.word	0x40021000
 80079f0:	50000400 	.word	0x50000400

080079f4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a09      	ldr	r2, [pc, #36]	@ (8007a28 <HAL_TIM_PWM_MspInit+0x34>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d10b      	bne.n	8007a1e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007a06:	4b09      	ldr	r3, [pc, #36]	@ (8007a2c <HAL_TIM_PWM_MspInit+0x38>)
 8007a08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a0a:	4b08      	ldr	r3, [pc, #32]	@ (8007a2c <HAL_TIM_PWM_MspInit+0x38>)
 8007a0c:	2104      	movs	r1, #4
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8007a12:	4b06      	ldr	r3, [pc, #24]	@ (8007a2c <HAL_TIM_PWM_MspInit+0x38>)
 8007a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a16:	2204      	movs	r2, #4
 8007a18:	4013      	ands	r3, r2
 8007a1a:	60fb      	str	r3, [r7, #12]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007a1e:	46c0      	nop			@ (mov r8, r8)
 8007a20:	46bd      	mov	sp, r7
 8007a22:	b004      	add	sp, #16
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	46c0      	nop			@ (mov r8, r8)
 8007a28:	40000800 	.word	0x40000800
 8007a2c:	40021000 	.word	0x40021000

08007a30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007a30:	b590      	push	{r4, r7, lr}
 8007a32:	b089      	sub	sp, #36	@ 0x24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a38:	240c      	movs	r4, #12
 8007a3a:	193b      	adds	r3, r7, r4
 8007a3c:	0018      	movs	r0, r3
 8007a3e:	2314      	movs	r3, #20
 8007a40:	001a      	movs	r2, r3
 8007a42:	2100      	movs	r1, #0
 8007a44:	f016 fbba 	bl	801e1bc <memset>
  if(timHandle->Instance==TIM4)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a14      	ldr	r2, [pc, #80]	@ (8007aa0 <HAL_TIM_MspPostInit+0x70>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d121      	bne.n	8007a96 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a52:	4b14      	ldr	r3, [pc, #80]	@ (8007aa4 <HAL_TIM_MspPostInit+0x74>)
 8007a54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a56:	4b13      	ldr	r3, [pc, #76]	@ (8007aa4 <HAL_TIM_MspPostInit+0x74>)
 8007a58:	2102      	movs	r1, #2
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8007a5e:	4b11      	ldr	r3, [pc, #68]	@ (8007aa4 <HAL_TIM_MspPostInit+0x74>)
 8007a60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a62:	2202      	movs	r2, #2
 8007a64:	4013      	ands	r3, r2
 8007a66:	60bb      	str	r3, [r7, #8]
 8007a68:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = NEOPIXEL_Pin;
 8007a6a:	0021      	movs	r1, r4
 8007a6c:	187b      	adds	r3, r7, r1
 8007a6e:	2280      	movs	r2, #128	@ 0x80
 8007a70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a72:	187b      	adds	r3, r7, r1
 8007a74:	2202      	movs	r2, #2
 8007a76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a78:	187b      	adds	r3, r7, r1
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a7e:	187b      	adds	r3, r7, r1
 8007a80:	2200      	movs	r2, #0
 8007a82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM4;
 8007a84:	187b      	adds	r3, r7, r1
 8007a86:	2209      	movs	r2, #9
 8007a88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(NEOPIXEL_GPIO_Port, &GPIO_InitStruct);
 8007a8a:	187b      	adds	r3, r7, r1
 8007a8c:	4a06      	ldr	r2, [pc, #24]	@ (8007aa8 <HAL_TIM_MspPostInit+0x78>)
 8007a8e:	0019      	movs	r1, r3
 8007a90:	0010      	movs	r0, r2
 8007a92:	f000 fd65 	bl	8008560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8007a96:	46c0      	nop			@ (mov r8, r8)
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	b009      	add	sp, #36	@ 0x24
 8007a9c:	bd90      	pop	{r4, r7, pc}
 8007a9e:	46c0      	nop			@ (mov r8, r8)
 8007aa0:	40000800 	.word	0x40000800
 8007aa4:	40021000 	.word	0x40021000
 8007aa8:	50000400 	.word	0x50000400

08007aac <__NVIC_EnableIRQ>:
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	0002      	movs	r2, r0
 8007ab4:	1dfb      	adds	r3, r7, #7
 8007ab6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007ab8:	1dfb      	adds	r3, r7, #7
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b7f      	cmp	r3, #127	@ 0x7f
 8007abe:	d809      	bhi.n	8007ad4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ac0:	1dfb      	adds	r3, r7, #7
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	231f      	movs	r3, #31
 8007ac8:	401a      	ands	r2, r3
 8007aca:	4b04      	ldr	r3, [pc, #16]	@ (8007adc <__NVIC_EnableIRQ+0x30>)
 8007acc:	2101      	movs	r1, #1
 8007ace:	4091      	lsls	r1, r2
 8007ad0:	000a      	movs	r2, r1
 8007ad2:	601a      	str	r2, [r3, #0]
}
 8007ad4:	46c0      	nop			@ (mov r8, r8)
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	b002      	add	sp, #8
 8007ada:	bd80      	pop	{r7, pc}
 8007adc:	e000e100 	.word	0xe000e100

08007ae0 <__NVIC_SetPriority>:
{
 8007ae0:	b590      	push	{r4, r7, lr}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	0002      	movs	r2, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	1dfb      	adds	r3, r7, #7
 8007aec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8007aee:	1dfb      	adds	r3, r7, #7
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007af4:	d828      	bhi.n	8007b48 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007af6:	4a2f      	ldr	r2, [pc, #188]	@ (8007bb4 <__NVIC_SetPriority+0xd4>)
 8007af8:	1dfb      	adds	r3, r7, #7
 8007afa:	781b      	ldrb	r3, [r3, #0]
 8007afc:	b25b      	sxtb	r3, r3
 8007afe:	089b      	lsrs	r3, r3, #2
 8007b00:	33c0      	adds	r3, #192	@ 0xc0
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	589b      	ldr	r3, [r3, r2]
 8007b06:	1dfa      	adds	r2, r7, #7
 8007b08:	7812      	ldrb	r2, [r2, #0]
 8007b0a:	0011      	movs	r1, r2
 8007b0c:	2203      	movs	r2, #3
 8007b0e:	400a      	ands	r2, r1
 8007b10:	00d2      	lsls	r2, r2, #3
 8007b12:	21ff      	movs	r1, #255	@ 0xff
 8007b14:	4091      	lsls	r1, r2
 8007b16:	000a      	movs	r2, r1
 8007b18:	43d2      	mvns	r2, r2
 8007b1a:	401a      	ands	r2, r3
 8007b1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	019b      	lsls	r3, r3, #6
 8007b22:	22ff      	movs	r2, #255	@ 0xff
 8007b24:	401a      	ands	r2, r3
 8007b26:	1dfb      	adds	r3, r7, #7
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	0018      	movs	r0, r3
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	4003      	ands	r3, r0
 8007b30:	00db      	lsls	r3, r3, #3
 8007b32:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b34:	481f      	ldr	r0, [pc, #124]	@ (8007bb4 <__NVIC_SetPriority+0xd4>)
 8007b36:	1dfb      	adds	r3, r7, #7
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	b25b      	sxtb	r3, r3
 8007b3c:	089b      	lsrs	r3, r3, #2
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	33c0      	adds	r3, #192	@ 0xc0
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	501a      	str	r2, [r3, r0]
}
 8007b46:	e031      	b.n	8007bac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b48:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb8 <__NVIC_SetPriority+0xd8>)
 8007b4a:	1dfb      	adds	r3, r7, #7
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	0019      	movs	r1, r3
 8007b50:	230f      	movs	r3, #15
 8007b52:	400b      	ands	r3, r1
 8007b54:	3b08      	subs	r3, #8
 8007b56:	089b      	lsrs	r3, r3, #2
 8007b58:	3306      	adds	r3, #6
 8007b5a:	009b      	lsls	r3, r3, #2
 8007b5c:	18d3      	adds	r3, r2, r3
 8007b5e:	3304      	adds	r3, #4
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	1dfa      	adds	r2, r7, #7
 8007b64:	7812      	ldrb	r2, [r2, #0]
 8007b66:	0011      	movs	r1, r2
 8007b68:	2203      	movs	r2, #3
 8007b6a:	400a      	ands	r2, r1
 8007b6c:	00d2      	lsls	r2, r2, #3
 8007b6e:	21ff      	movs	r1, #255	@ 0xff
 8007b70:	4091      	lsls	r1, r2
 8007b72:	000a      	movs	r2, r1
 8007b74:	43d2      	mvns	r2, r2
 8007b76:	401a      	ands	r2, r3
 8007b78:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	019b      	lsls	r3, r3, #6
 8007b7e:	22ff      	movs	r2, #255	@ 0xff
 8007b80:	401a      	ands	r2, r3
 8007b82:	1dfb      	adds	r3, r7, #7
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	0018      	movs	r0, r3
 8007b88:	2303      	movs	r3, #3
 8007b8a:	4003      	ands	r3, r0
 8007b8c:	00db      	lsls	r3, r3, #3
 8007b8e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8007b90:	4809      	ldr	r0, [pc, #36]	@ (8007bb8 <__NVIC_SetPriority+0xd8>)
 8007b92:	1dfb      	adds	r3, r7, #7
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	001c      	movs	r4, r3
 8007b98:	230f      	movs	r3, #15
 8007b9a:	4023      	ands	r3, r4
 8007b9c:	3b08      	subs	r3, #8
 8007b9e:	089b      	lsrs	r3, r3, #2
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	3306      	adds	r3, #6
 8007ba4:	009b      	lsls	r3, r3, #2
 8007ba6:	18c3      	adds	r3, r0, r3
 8007ba8:	3304      	adds	r3, #4
 8007baa:	601a      	str	r2, [r3, #0]
}
 8007bac:	46c0      	nop			@ (mov r8, r8)
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	b003      	add	sp, #12
 8007bb2:	bd90      	pop	{r4, r7, pc}
 8007bb4:	e000e100 	.word	0xe000e100
 8007bb8:	e000ed00 	.word	0xe000ed00

08007bbc <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 8007bcc:	4a0c      	ldr	r2, [pc, #48]	@ (8007c00 <LL_DMA_SetDataTransferDirection+0x44>)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	18d3      	adds	r3, r2, r3
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	001a      	movs	r2, r3
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	18d3      	adds	r3, r2, r3
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a09      	ldr	r2, [pc, #36]	@ (8007c04 <LL_DMA_SetDataTransferDirection+0x48>)
 8007bde:	4013      	ands	r3, r2
 8007be0:	0019      	movs	r1, r3
 8007be2:	4a07      	ldr	r2, [pc, #28]	@ (8007c00 <LL_DMA_SetDataTransferDirection+0x44>)
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	18d3      	adds	r3, r2, r3
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	001a      	movs	r2, r3
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	18d3      	adds	r3, r2, r3
 8007bf0:	687a      	ldr	r2, [r7, #4]
 8007bf2:	430a      	orrs	r2, r1
 8007bf4:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 8007bf6:	46c0      	nop			@ (mov r8, r8)
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b006      	add	sp, #24
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	46c0      	nop			@ (mov r8, r8)
 8007c00:	0801e4a4 	.word	0x0801e4a4
 8007c04:	ffffbfef 	.word	0xffffbfef

08007c08 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_CIRC,
 8007c18:	4a0c      	ldr	r2, [pc, #48]	@ (8007c4c <LL_DMA_SetMode+0x44>)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	18d3      	adds	r3, r2, r3
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	001a      	movs	r2, r3
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	18d3      	adds	r3, r2, r3
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	4393      	bics	r3, r2
 8007c2c:	0019      	movs	r1, r3
 8007c2e:	4a07      	ldr	r2, [pc, #28]	@ (8007c4c <LL_DMA_SetMode+0x44>)
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	18d3      	adds	r3, r2, r3
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	001a      	movs	r2, r3
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	18d3      	adds	r3, r2, r3
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	601a      	str	r2, [r3, #0]
             Mode);
}
 8007c42:	46c0      	nop			@ (mov r8, r8)
 8007c44:	46bd      	mov	sp, r7
 8007c46:	b006      	add	sp, #24
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	46c0      	nop			@ (mov r8, r8)
 8007c4c:	0801e4a4 	.word	0x0801e4a4

08007c50 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PINC,
 8007c60:	4a0c      	ldr	r2, [pc, #48]	@ (8007c94 <LL_DMA_SetPeriphIncMode+0x44>)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	18d3      	adds	r3, r2, r3
 8007c66:	781b      	ldrb	r3, [r3, #0]
 8007c68:	001a      	movs	r2, r3
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	18d3      	adds	r3, r2, r3
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2240      	movs	r2, #64	@ 0x40
 8007c72:	4393      	bics	r3, r2
 8007c74:	0019      	movs	r1, r3
 8007c76:	4a07      	ldr	r2, [pc, #28]	@ (8007c94 <LL_DMA_SetPeriphIncMode+0x44>)
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	18d3      	adds	r3, r2, r3
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	001a      	movs	r2, r3
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	18d3      	adds	r3, r2, r3
 8007c84:	687a      	ldr	r2, [r7, #4]
 8007c86:	430a      	orrs	r2, r1
 8007c88:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 8007c8a:	46c0      	nop			@ (mov r8, r8)
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b006      	add	sp, #24
 8007c90:	bd80      	pop	{r7, pc}
 8007c92:	46c0      	nop			@ (mov r8, r8)
 8007c94:	0801e4a4 	.word	0x0801e4a4

08007c98 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b086      	sub	sp, #24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MINC,
 8007ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8007cdc <LL_DMA_SetMemoryIncMode+0x44>)
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	18d3      	adds	r3, r2, r3
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	001a      	movs	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	18d3      	adds	r3, r2, r3
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2280      	movs	r2, #128	@ 0x80
 8007cba:	4393      	bics	r3, r2
 8007cbc:	0019      	movs	r1, r3
 8007cbe:	4a07      	ldr	r2, [pc, #28]	@ (8007cdc <LL_DMA_SetMemoryIncMode+0x44>)
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	18d3      	adds	r3, r2, r3
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	001a      	movs	r2, r3
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	18d3      	adds	r3, r2, r3
 8007ccc:	687a      	ldr	r2, [r7, #4]
 8007cce:	430a      	orrs	r2, r1
 8007cd0:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 8007cd2:	46c0      	nop			@ (mov r8, r8)
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	b006      	add	sp, #24
 8007cd8:	bd80      	pop	{r7, pc}
 8007cda:	46c0      	nop			@ (mov r8, r8)
 8007cdc:	0801e4a4 	.word	0x0801e4a4

08007ce0 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PSIZE,
 8007cf0:	4a0c      	ldr	r2, [pc, #48]	@ (8007d24 <LL_DMA_SetPeriphSize+0x44>)
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	18d3      	adds	r3, r2, r3
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	001a      	movs	r2, r3
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	18d3      	adds	r3, r2, r3
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a09      	ldr	r2, [pc, #36]	@ (8007d28 <LL_DMA_SetPeriphSize+0x48>)
 8007d02:	4013      	ands	r3, r2
 8007d04:	0019      	movs	r1, r3
 8007d06:	4a07      	ldr	r2, [pc, #28]	@ (8007d24 <LL_DMA_SetPeriphSize+0x44>)
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	18d3      	adds	r3, r2, r3
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	001a      	movs	r2, r3
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	18d3      	adds	r3, r2, r3
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	430a      	orrs	r2, r1
 8007d18:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 8007d1a:	46c0      	nop			@ (mov r8, r8)
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	b006      	add	sp, #24
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	46c0      	nop			@ (mov r8, r8)
 8007d24:	0801e4a4 	.word	0x0801e4a4
 8007d28:	fffffcff 	.word	0xfffffcff

08007d2c <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b086      	sub	sp, #24
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_MSIZE,
 8007d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8007d70 <LL_DMA_SetMemorySize+0x44>)
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	18d3      	adds	r3, r2, r3
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	001a      	movs	r2, r3
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	18d3      	adds	r3, r2, r3
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a09      	ldr	r2, [pc, #36]	@ (8007d74 <LL_DMA_SetMemorySize+0x48>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	0019      	movs	r1, r3
 8007d52:	4a07      	ldr	r2, [pc, #28]	@ (8007d70 <LL_DMA_SetMemorySize+0x44>)
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	18d3      	adds	r3, r2, r3
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	001a      	movs	r2, r3
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	18d3      	adds	r3, r2, r3
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 8007d66:	46c0      	nop			@ (mov r8, r8)
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	b006      	add	sp, #24
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	46c0      	nop			@ (mov r8, r8)
 8007d70:	0801e4a4 	.word	0x0801e4a4
 8007d74:	fffff3ff 	.word	0xfffff3ff

08007d78 <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	60b9      	str	r1, [r7, #8]
 8007d82:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR, DMA_CCR_PL,
 8007d88:	4a0c      	ldr	r2, [pc, #48]	@ (8007dbc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	18d3      	adds	r3, r2, r3
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	001a      	movs	r2, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	18d3      	adds	r3, r2, r3
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a09      	ldr	r2, [pc, #36]	@ (8007dc0 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8007d9a:	4013      	ands	r3, r2
 8007d9c:	0019      	movs	r1, r3
 8007d9e:	4a07      	ldr	r2, [pc, #28]	@ (8007dbc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	18d3      	adds	r3, r2, r3
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	001a      	movs	r2, r3
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	18d3      	adds	r3, r2, r3
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	430a      	orrs	r2, r1
 8007db0:	601a      	str	r2, [r3, #0]
             Priority);
}
 8007db2:	46c0      	nop			@ (mov r8, r8)
 8007db4:	46bd      	mov	sp, r7
 8007db6:	b006      	add	sp, #24
 8007db8:	bd80      	pop	{r7, pc}
 8007dba:	46c0      	nop			@ (mov r8, r8)
 8007dbc:	0801e4a4 	.word	0x0801e4a4
 8007dc0:	ffffcfff 	.word	0xffffcfff

08007dc4 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_RX
  *         @arg @ref LL_DMAMUX_REQ_UCPD2_TX
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(const DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Request)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b086      	sub	sp, #24
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	60b9      	str	r1, [r7, #8]
 8007dce:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	0a9b      	lsrs	r3, r3, #10
 8007dd4:	4a0f      	ldr	r2, [pc, #60]	@ (8007e14 <LL_DMA_SetPeriphRequest+0x50>)
 8007dd6:	405a      	eors	r2, r3
 8007dd8:	0013      	movs	r3, r2
 8007dda:	00db      	lsls	r3, r3, #3
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8007de0:	68ba      	ldr	r2, [r7, #8]
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	18d3      	adds	r3, r2, r3
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4a0b      	ldr	r2, [pc, #44]	@ (8007e18 <LL_DMA_SetPeriphRequest+0x54>)
 8007dea:	4694      	mov	ip, r2
 8007dec:	4463      	add	r3, ip
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	227f      	movs	r2, #127	@ 0x7f
 8007df2:	4393      	bics	r3, r2
 8007df4:	0019      	movs	r1, r3
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	18d3      	adds	r3, r2, r3
 8007dfc:	009b      	lsls	r3, r3, #2
 8007dfe:	4a06      	ldr	r2, [pc, #24]	@ (8007e18 <LL_DMA_SetPeriphRequest+0x54>)
 8007e00:	4694      	mov	ip, r2
 8007e02:	4463      	add	r3, ip
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	601a      	str	r2, [r3, #0]
}
 8007e0a:	46c0      	nop			@ (mov r8, r8)
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	b006      	add	sp, #24
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	46c0      	nop			@ (mov r8, r8)
 8007e14:	00100080 	.word	0x00100080
 8007e18:	40020800 	.word	0x40020800

08007e1c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 8007e24:	4b07      	ldr	r3, [pc, #28]	@ (8007e44 <LL_APB1_GRP1_EnableClock+0x28>)
 8007e26:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007e28:	4b06      	ldr	r3, [pc, #24]	@ (8007e44 <LL_APB1_GRP1_EnableClock+0x28>)
 8007e2a:	687a      	ldr	r2, [r7, #4]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8007e30:	4b04      	ldr	r3, [pc, #16]	@ (8007e44 <LL_APB1_GRP1_EnableClock+0x28>)
 8007e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	4013      	ands	r3, r2
 8007e38:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
}
 8007e3c:	46c0      	nop			@ (mov r8, r8)
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	b004      	add	sp, #16
 8007e42:	bd80      	pop	{r7, pc}
 8007e44:	40021000 	.word	0x40021000

08007e48 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8007e50:	4b07      	ldr	r3, [pc, #28]	@ (8007e70 <LL_IOP_GRP1_EnableClock+0x28>)
 8007e52:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007e54:	4b06      	ldr	r3, [pc, #24]	@ (8007e70 <LL_IOP_GRP1_EnableClock+0x28>)
 8007e56:	687a      	ldr	r2, [r7, #4]
 8007e58:	430a      	orrs	r2, r1
 8007e5a:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8007e5c:	4b04      	ldr	r3, [pc, #16]	@ (8007e70 <LL_IOP_GRP1_EnableClock+0x28>)
 8007e5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	4013      	ands	r3, r2
 8007e64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007e66:	68fb      	ldr	r3, [r7, #12]
}
 8007e68:	46c0      	nop			@ (mov r8, r8)
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	b004      	add	sp, #16
 8007e6e:	bd80      	pop	{r7, pc}
 8007e70:	40021000 	.word	0x40021000

08007e74 <MX_UCPD1_Init>:

/* USER CODE END 0 */

/* UCPD1 init function */
void MX_UCPD1_Init(void)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e7a:	003b      	movs	r3, r7
 8007e7c:	0018      	movs	r0, r3
 8007e7e:	2318      	movs	r3, #24
 8007e80:	001a      	movs	r2, r3
 8007e82:	2100      	movs	r1, #0
 8007e84:	f016 f99a 	bl	801e1bc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 8007e88:	2380      	movs	r3, #128	@ 0x80
 8007e8a:	049b      	lsls	r3, r3, #18
 8007e8c:	0018      	movs	r0, r3
 8007e8e:	f7ff ffc5 	bl	8007e1c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8007e92:	2002      	movs	r0, #2
 8007e94:	f7ff ffd8 	bl	8007e48 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8007e98:	2001      	movs	r0, #1
 8007e9a:	f7ff ffd5 	bl	8007e48 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8007e9e:	003b      	movs	r3, r7
 8007ea0:	2280      	movs	r2, #128	@ 0x80
 8007ea2:	0212      	lsls	r2, r2, #8
 8007ea4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007ea6:	003b      	movs	r3, r7
 8007ea8:	2203      	movs	r2, #3
 8007eaa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007eac:	003b      	movs	r3, r7
 8007eae:	2200      	movs	r2, #0
 8007eb0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007eb2:	003b      	movs	r3, r7
 8007eb4:	4a40      	ldr	r2, [pc, #256]	@ (8007fb8 <MX_UCPD1_Init+0x144>)
 8007eb6:	0019      	movs	r1, r3
 8007eb8:	0010      	movs	r0, r2
 8007eba:	f005 f99b 	bl	800d1f4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8007ebe:	003b      	movs	r3, r7
 8007ec0:	2280      	movs	r2, #128	@ 0x80
 8007ec2:	0052      	lsls	r2, r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007ec6:	003b      	movs	r3, r7
 8007ec8:	2203      	movs	r2, #3
 8007eca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ecc:	003b      	movs	r3, r7
 8007ece:	2200      	movs	r2, #0
 8007ed0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ed2:	003a      	movs	r2, r7
 8007ed4:	23a0      	movs	r3, #160	@ 0xa0
 8007ed6:	05db      	lsls	r3, r3, #23
 8007ed8:	0011      	movs	r1, r2
 8007eda:	0018      	movs	r0, r3
 8007edc:	f005 f98a 	bl	800d1f4 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_UCPD1_RX);
 8007ee0:	4b36      	ldr	r3, [pc, #216]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007ee2:	223a      	movs	r2, #58	@ 0x3a
 8007ee4:	2100      	movs	r1, #0
 8007ee6:	0018      	movs	r0, r3
 8007ee8:	f7ff ff6c 	bl	8007dc4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8007eec:	4b33      	ldr	r3, [pc, #204]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2100      	movs	r1, #0
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f7ff fe62 	bl	8007bbc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 8007ef8:	4b30      	ldr	r3, [pc, #192]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007efa:	2200      	movs	r2, #0
 8007efc:	2100      	movs	r1, #0
 8007efe:	0018      	movs	r0, r3
 8007f00:	f7ff ff3a 	bl	8007d78 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 8007f04:	4b2d      	ldr	r3, [pc, #180]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f06:	2200      	movs	r2, #0
 8007f08:	2100      	movs	r1, #0
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f7ff fe7c 	bl	8007c08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8007f10:	4b2a      	ldr	r3, [pc, #168]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	2100      	movs	r1, #0
 8007f16:	0018      	movs	r0, r3
 8007f18:	f7ff fe9a 	bl	8007c50 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8007f1c:	4b27      	ldr	r3, [pc, #156]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f1e:	2280      	movs	r2, #128	@ 0x80
 8007f20:	2100      	movs	r1, #0
 8007f22:	0018      	movs	r0, r3
 8007f24:	f7ff feb8 	bl	8007c98 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 8007f28:	4b24      	ldr	r3, [pc, #144]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	0018      	movs	r0, r3
 8007f30:	f7ff fed6 	bl	8007ce0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 8007f34:	4b21      	ldr	r3, [pc, #132]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f36:	2200      	movs	r2, #0
 8007f38:	2100      	movs	r1, #0
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f7ff fef6 	bl	8007d2c <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8007f40:	4b1e      	ldr	r3, [pc, #120]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f42:	223b      	movs	r2, #59	@ 0x3b
 8007f44:	2101      	movs	r1, #1
 8007f46:	0018      	movs	r0, r3
 8007f48:	f7ff ff3c 	bl	8007dc4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8007f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f4e:	2210      	movs	r2, #16
 8007f50:	2101      	movs	r1, #1
 8007f52:	0018      	movs	r0, r3
 8007f54:	f7ff fe32 	bl	8007bbc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8007f58:	4b18      	ldr	r3, [pc, #96]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	0018      	movs	r0, r3
 8007f60:	f7ff ff0a 	bl	8007d78 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8007f64:	4b15      	ldr	r3, [pc, #84]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f66:	2200      	movs	r2, #0
 8007f68:	2101      	movs	r1, #1
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	f7ff fe4c 	bl	8007c08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 8007f70:	4b12      	ldr	r3, [pc, #72]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	2101      	movs	r1, #1
 8007f76:	0018      	movs	r0, r3
 8007f78:	f7ff fe6a 	bl	8007c50 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8007f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f7e:	2280      	movs	r2, #128	@ 0x80
 8007f80:	2101      	movs	r1, #1
 8007f82:	0018      	movs	r0, r3
 8007f84:	f7ff fe88 	bl	8007c98 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8007f88:	4b0c      	ldr	r3, [pc, #48]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2101      	movs	r1, #1
 8007f8e:	0018      	movs	r0, r3
 8007f90:	f7ff fea6 	bl	8007ce0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 8007f94:	4b09      	ldr	r3, [pc, #36]	@ (8007fbc <MX_UCPD1_Init+0x148>)
 8007f96:	2200      	movs	r2, #0
 8007f98:	2101      	movs	r1, #1
 8007f9a:	0018      	movs	r0, r3
 8007f9c:	f7ff fec6 	bl	8007d2c <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 8007fa0:	2100      	movs	r1, #0
 8007fa2:	2008      	movs	r0, #8
 8007fa4:	f7ff fd9c 	bl	8007ae0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8007fa8:	2008      	movs	r0, #8
 8007faa:	f7ff fd7f 	bl	8007aac <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8007fae:	46c0      	nop			@ (mov r8, r8)
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	b006      	add	sp, #24
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	46c0      	nop			@ (mov r8, r8)
 8007fb8:	50000400 	.word	0x50000400
 8007fbc:	40020000 	.word	0x40020000

08007fc0 <MX_UCPD2_Init>:
/* UCPD2 init function */
void MX_UCPD2_Init(void)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD2_Init 0 */

  /* USER CODE END UCPD2_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fc6:	003b      	movs	r3, r7
 8007fc8:	0018      	movs	r0, r3
 8007fca:	2318      	movs	r3, #24
 8007fcc:	001a      	movs	r2, r3
 8007fce:	2100      	movs	r1, #0
 8007fd0:	f016 f8f4 	bl	801e1bc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8007fd4:	2380      	movs	r3, #128	@ 0x80
 8007fd6:	04db      	lsls	r3, r3, #19
 8007fd8:	0018      	movs	r0, r3
 8007fda:	f7ff ff1f 	bl	8007e1c <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 8007fde:	2008      	movs	r0, #8
 8007fe0:	f7ff ff32 	bl	8007e48 <LL_IOP_GRP1_EnableClock>
  /**UCPD2 GPIO Configuration
  PD0   ------> UCPD2_CC1
  PD2   ------> UCPD2_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8007fe4:	003b      	movs	r3, r7
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8007fea:	003b      	movs	r3, r7
 8007fec:	2203      	movs	r2, #3
 8007fee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007ff0:	003b      	movs	r3, r7
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007ff6:	003b      	movs	r3, r7
 8007ff8:	4a3f      	ldr	r2, [pc, #252]	@ (80080f8 <MX_UCPD2_Init+0x138>)
 8007ffa:	0019      	movs	r1, r3
 8007ffc:	0010      	movs	r0, r2
 8007ffe:	f005 f8f9 	bl	800d1f4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8008002:	003b      	movs	r3, r7
 8008004:	2204      	movs	r2, #4
 8008006:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8008008:	003b      	movs	r3, r7
 800800a:	2203      	movs	r2, #3
 800800c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800800e:	003b      	movs	r3, r7
 8008010:	2200      	movs	r2, #0
 8008012:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008014:	003b      	movs	r3, r7
 8008016:	4a38      	ldr	r2, [pc, #224]	@ (80080f8 <MX_UCPD2_Init+0x138>)
 8008018:	0019      	movs	r1, r3
 800801a:	0010      	movs	r0, r2
 800801c:	f005 f8ea 	bl	800d1f4 <LL_GPIO_Init>

  /* UCPD2 DMA Init */

  /* UCPD2_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_3, LL_DMAMUX_REQ_UCPD2_RX);
 8008020:	4b36      	ldr	r3, [pc, #216]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 8008022:	223c      	movs	r2, #60	@ 0x3c
 8008024:	2102      	movs	r1, #2
 8008026:	0018      	movs	r0, r3
 8008028:	f7ff fecc 	bl	8007dc4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_3, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 800802c:	4b33      	ldr	r3, [pc, #204]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 800802e:	2200      	movs	r2, #0
 8008030:	2102      	movs	r1, #2
 8008032:	0018      	movs	r0, r3
 8008034:	f7ff fdc2 	bl	8007bbc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PRIORITY_LOW);
 8008038:	4b30      	ldr	r3, [pc, #192]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 800803a:	2200      	movs	r2, #0
 800803c:	2102      	movs	r1, #2
 800803e:	0018      	movs	r0, r3
 8008040:	f7ff fe9a 	bl	8007d78 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MODE_NORMAL);
 8008044:	4b2d      	ldr	r3, [pc, #180]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 8008046:	2200      	movs	r2, #0
 8008048:	2102      	movs	r1, #2
 800804a:	0018      	movs	r0, r3
 800804c:	f7ff fddc 	bl	8007c08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PERIPH_NOINCREMENT);
 8008050:	4b2a      	ldr	r3, [pc, #168]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 8008052:	2200      	movs	r2, #0
 8008054:	2102      	movs	r1, #2
 8008056:	0018      	movs	r0, r3
 8008058:	f7ff fdfa 	bl	8007c50 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MEMORY_INCREMENT);
 800805c:	4b27      	ldr	r3, [pc, #156]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 800805e:	2280      	movs	r2, #128	@ 0x80
 8008060:	2102      	movs	r1, #2
 8008062:	0018      	movs	r0, r3
 8008064:	f7ff fe18 	bl	8007c98 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_PDATAALIGN_BYTE);
 8008068:	4b24      	ldr	r3, [pc, #144]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 800806a:	2200      	movs	r2, #0
 800806c:	2102      	movs	r1, #2
 800806e:	0018      	movs	r0, r3
 8008070:	f7ff fe36 	bl	8007ce0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_3, LL_DMA_MDATAALIGN_BYTE);
 8008074:	4b21      	ldr	r3, [pc, #132]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 8008076:	2200      	movs	r2, #0
 8008078:	2102      	movs	r1, #2
 800807a:	0018      	movs	r0, r3
 800807c:	f7ff fe56 	bl	8007d2c <LL_DMA_SetMemorySize>

  /* UCPD2_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD2_TX);
 8008080:	4b1e      	ldr	r3, [pc, #120]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 8008082:	223d      	movs	r2, #61	@ 0x3d
 8008084:	2103      	movs	r1, #3
 8008086:	0018      	movs	r0, r3
 8008088:	f7ff fe9c 	bl	8007dc4 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800808c:	4b1b      	ldr	r3, [pc, #108]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 800808e:	2210      	movs	r2, #16
 8008090:	2103      	movs	r1, #3
 8008092:	0018      	movs	r0, r3
 8008094:	f7ff fd92 	bl	8007bbc <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 8008098:	4b18      	ldr	r3, [pc, #96]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 800809a:	2200      	movs	r2, #0
 800809c:	2103      	movs	r1, #3
 800809e:	0018      	movs	r0, r3
 80080a0:	f7ff fe6a 	bl	8007d78 <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80080a4:	4b15      	ldr	r3, [pc, #84]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	2103      	movs	r1, #3
 80080aa:	0018      	movs	r0, r3
 80080ac:	f7ff fdac 	bl	8007c08 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80080b0:	4b12      	ldr	r3, [pc, #72]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	2103      	movs	r1, #3
 80080b6:	0018      	movs	r0, r3
 80080b8:	f7ff fdca 	bl	8007c50 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80080bc:	4b0f      	ldr	r3, [pc, #60]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 80080be:	2280      	movs	r2, #128	@ 0x80
 80080c0:	2103      	movs	r1, #3
 80080c2:	0018      	movs	r0, r3
 80080c4:	f7ff fde8 	bl	8007c98 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 80080c8:	4b0c      	ldr	r3, [pc, #48]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	2103      	movs	r1, #3
 80080ce:	0018      	movs	r0, r3
 80080d0:	f7ff fe06 	bl	8007ce0 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 80080d4:	4b09      	ldr	r3, [pc, #36]	@ (80080fc <MX_UCPD2_Init+0x13c>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	2103      	movs	r1, #3
 80080da:	0018      	movs	r0, r3
 80080dc:	f7ff fe26 	bl	8007d2c <LL_DMA_SetMemorySize>

  /* UCPD2 interrupt Init */
  NVIC_SetPriority(USB_UCPD1_2_IRQn, 0);
 80080e0:	2100      	movs	r1, #0
 80080e2:	2008      	movs	r0, #8
 80080e4:	f7ff fcfc 	bl	8007ae0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 80080e8:	2008      	movs	r0, #8
 80080ea:	f7ff fcdf 	bl	8007aac <__NVIC_EnableIRQ>
  /* USER CODE END UCPD2_Init 1 */
  /* USER CODE BEGIN UCPD2_Init 2 */

  /* USER CODE END UCPD2_Init 2 */

}
 80080ee:	46c0      	nop			@ (mov r8, r8)
 80080f0:	46bd      	mov	sp, r7
 80080f2:	b006      	add	sp, #24
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	46c0      	nop			@ (mov r8, r8)
 80080f8:	50000c00 	.word	0x50000c00
 80080fc:	40020000 	.word	0x40020000

08008100 <MX_USB_DRD_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_DRD_FS;

/* USB_DRD_FS init function */

void MX_USB_DRD_FS_PCD_Init(void)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	af00      	add	r7, sp, #0
  /* USER CODE END USB_DRD_FS_Init 0 */

  /* USER CODE BEGIN USB_DRD_FS_Init 1 */

  /* USER CODE END USB_DRD_FS_Init 1 */
  hpcd_USB_DRD_FS.Instance = USB_DRD_FS;
 8008104:	4b17      	ldr	r3, [pc, #92]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008106:	4a18      	ldr	r2, [pc, #96]	@ (8008168 <MX_USB_DRD_FS_PCD_Init+0x68>)
 8008108:	601a      	str	r2, [r3, #0]
  hpcd_USB_DRD_FS.Init.dev_endpoints = 8;
 800810a:	4b16      	ldr	r3, [pc, #88]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800810c:	2208      	movs	r2, #8
 800810e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_DRD_FS.Init.Host_channels = 8;
 8008110:	4b14      	ldr	r3, [pc, #80]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008112:	2208      	movs	r2, #8
 8008114:	715a      	strb	r2, [r3, #5]
  hpcd_USB_DRD_FS.Init.speed = PCD_SPEED_FULL;
 8008116:	4b13      	ldr	r3, [pc, #76]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008118:	2202      	movs	r2, #2
 800811a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_DRD_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800811c:	4b11      	ldr	r3, [pc, #68]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800811e:	2202      	movs	r2, #2
 8008120:	725a      	strb	r2, [r3, #9]
  hpcd_USB_DRD_FS.Init.Sof_enable = DISABLE;
 8008122:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008124:	2200      	movs	r2, #0
 8008126:	729a      	strb	r2, [r3, #10]
  hpcd_USB_DRD_FS.Init.low_power_enable = DISABLE;
 8008128:	4b0e      	ldr	r3, [pc, #56]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800812a:	2200      	movs	r2, #0
 800812c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_DRD_FS.Init.lpm_enable = DISABLE;
 800812e:	4b0d      	ldr	r3, [pc, #52]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008130:	2200      	movs	r2, #0
 8008132:	731a      	strb	r2, [r3, #12]
  hpcd_USB_DRD_FS.Init.battery_charging_enable = DISABLE;
 8008134:	4b0b      	ldr	r3, [pc, #44]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008136:	2200      	movs	r2, #0
 8008138:	735a      	strb	r2, [r3, #13]
  hpcd_USB_DRD_FS.Init.vbus_sensing_enable = DISABLE;
 800813a:	4b0a      	ldr	r3, [pc, #40]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800813c:	2200      	movs	r2, #0
 800813e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_DRD_FS.Init.bulk_doublebuffer_enable = DISABLE;
 8008140:	4b08      	ldr	r3, [pc, #32]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008142:	2200      	movs	r2, #0
 8008144:	73da      	strb	r2, [r3, #15]
  hpcd_USB_DRD_FS.Init.iso_singlebuffer_enable = DISABLE;
 8008146:	4b07      	ldr	r3, [pc, #28]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 8008148:	2200      	movs	r2, #0
 800814a:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_DRD_FS) != HAL_OK)
 800814c:	4b05      	ldr	r3, [pc, #20]	@ (8008164 <MX_USB_DRD_FS_PCD_Init+0x64>)
 800814e:	0018      	movs	r0, r3
 8008150:	f001 f8cc 	bl	80092ec <HAL_PCD_Init>
 8008154:	1e03      	subs	r3, r0, #0
 8008156:	d001      	beq.n	800815c <MX_USB_DRD_FS_PCD_Init+0x5c>
  {
    Error_Handler();
 8008158:	f7ff fa12 	bl	8007580 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DRD_FS_Init 2 */

  /* USER CODE END USB_DRD_FS_Init 2 */

}
 800815c:	46c0      	nop			@ (mov r8, r8)
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}
 8008162:	46c0      	nop			@ (mov r8, r8)
 8008164:	20010ccc 	.word	0x20010ccc
 8008168:	40005c00 	.word	0x40005c00

0800816c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800816c:	b590      	push	{r4, r7, lr}
 800816e:	b099      	sub	sp, #100	@ 0x64
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008174:	2410      	movs	r4, #16
 8008176:	193b      	adds	r3, r7, r4
 8008178:	0018      	movs	r0, r3
 800817a:	2350      	movs	r3, #80	@ 0x50
 800817c:	001a      	movs	r2, r3
 800817e:	2100      	movs	r1, #0
 8008180:	f016 f81c 	bl	801e1bc <memset>
  if(pcdHandle->Instance==USB_DRD_FS)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a25      	ldr	r2, [pc, #148]	@ (8008220 <HAL_PCD_MspInit+0xb4>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d143      	bne.n	8008216 <HAL_PCD_MspInit+0xaa>

  /* USER CODE END USB_DRD_FS_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800818e:	193b      	adds	r3, r7, r4
 8008190:	2280      	movs	r2, #128	@ 0x80
 8008192:	0452      	lsls	r2, r2, #17
 8008194:	601a      	str	r2, [r3, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8008196:	193b      	adds	r3, r7, r4
 8008198:	2200      	movs	r2, #0
 800819a:	649a      	str	r2, [r3, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800819c:	193b      	adds	r3, r7, r4
 800819e:	0018      	movs	r0, r3
 80081a0:	f003 fbec 	bl	800b97c <HAL_RCCEx_PeriphCLKConfig>
 80081a4:	1e03      	subs	r3, r0, #0
 80081a6:	d001      	beq.n	80081ac <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 80081a8:	f7ff f9ea 	bl	8007580 <Error_Handler>
    }

    /* USB_DRD_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80081ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081b0:	4b1c      	ldr	r3, [pc, #112]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081b2:	2180      	movs	r1, #128	@ 0x80
 80081b4:	0189      	lsls	r1, r1, #6
 80081b6:	430a      	orrs	r2, r1
 80081b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80081ba:	4b1a      	ldr	r3, [pc, #104]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081be:	2380      	movs	r3, #128	@ 0x80
 80081c0:	019b      	lsls	r3, r3, #6
 80081c2:	4013      	ands	r3, r2
 80081c4:	60fb      	str	r3, [r7, #12]
 80081c6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081c8:	4b16      	ldr	r3, [pc, #88]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081cc:	2380      	movs	r3, #128	@ 0x80
 80081ce:	055b      	lsls	r3, r3, #21
 80081d0:	4013      	ands	r3, r2
 80081d2:	d116      	bne.n	8008202 <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081d4:	4b13      	ldr	r3, [pc, #76]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081d8:	4b12      	ldr	r3, [pc, #72]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081da:	2180      	movs	r1, #128	@ 0x80
 80081dc:	0549      	lsls	r1, r1, #21
 80081de:	430a      	orrs	r2, r1
 80081e0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80081e2:	4b10      	ldr	r3, [pc, #64]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081e6:	2380      	movs	r3, #128	@ 0x80
 80081e8:	055b      	lsls	r3, r3, #21
 80081ea:	4013      	ands	r3, r2
 80081ec:	60bb      	str	r3, [r7, #8]
 80081ee:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80081f0:	f002 fe36 	bl	800ae60 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80081f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80081f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008224 <HAL_PCD_MspInit+0xb8>)
 80081fa:	490b      	ldr	r1, [pc, #44]	@ (8008228 <HAL_PCD_MspInit+0xbc>)
 80081fc:	400a      	ands	r2, r1
 80081fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8008200:	e001      	b.n	8008206 <HAL_PCD_MspInit+0x9a>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008202:	f002 fe2d 	bl	800ae60 <HAL_PWREx_EnableVddUSB>
    }

    /* USB_DRD_FS interrupt Init */
    HAL_NVIC_SetPriority(USB_UCPD1_2_IRQn, 0, 0);
 8008206:	2200      	movs	r2, #0
 8008208:	2100      	movs	r1, #0
 800820a:	2008      	movs	r0, #8
 800820c:	f000 f982 	bl	8008514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_UCPD1_2_IRQn);
 8008210:	2008      	movs	r0, #8
 8008212:	f000 f994 	bl	800853e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_DRD_FS_MspInit 1 */

  /* USER CODE END USB_DRD_FS_MspInit 1 */
  }
}
 8008216:	46c0      	nop			@ (mov r8, r8)
 8008218:	46bd      	mov	sp, r7
 800821a:	b019      	add	sp, #100	@ 0x64
 800821c:	bd90      	pop	{r4, r7, pc}
 800821e:	46c0      	nop			@ (mov r8, r8)
 8008220:	40005c00 	.word	0x40005c00
 8008224:	40021000 	.word	0x40021000
 8008228:	efffffff 	.word	0xefffffff

0800822c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800822c:	480d      	ldr	r0, [pc, #52]	@ (8008264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800822e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008230:	f7ff faca 	bl	80077c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008234:	480c      	ldr	r0, [pc, #48]	@ (8008268 <LoopForever+0x6>)
  ldr r1, =_edata
 8008236:	490d      	ldr	r1, [pc, #52]	@ (800826c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008238:	4a0d      	ldr	r2, [pc, #52]	@ (8008270 <LoopForever+0xe>)
  movs r3, #0
 800823a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800823c:	e002      	b.n	8008244 <LoopCopyDataInit>

0800823e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800823e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008242:	3304      	adds	r3, #4

08008244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008248:	d3f9      	bcc.n	800823e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800824a:	4a0a      	ldr	r2, [pc, #40]	@ (8008274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800824c:	4c0a      	ldr	r4, [pc, #40]	@ (8008278 <LoopForever+0x16>)
  movs r3, #0
 800824e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008250:	e001      	b.n	8008256 <LoopFillZerobss>

08008252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008254:	3204      	adds	r2, #4

08008256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008258:	d3fb      	bcc.n	8008252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800825a:	f015 ffcf 	bl	801e1fc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800825e:	f7ff f8cf 	bl	8007400 <main>

08008262 <LoopForever>:

LoopForever:
  b LoopForever
 8008262:	e7fe      	b.n	8008262 <LoopForever>
  ldr   r0, =_estack
 8008264:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8008268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800826c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8008270:	0801e84c 	.word	0x0801e84c
  ldr r2, =_sbss
 8008274:	200002c4 	.word	0x200002c4
  ldr r4, =_ebss
 8008278:	20011efc 	.word	0x20011efc

0800827c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800827c:	e7fe      	b.n	800827c <ADC1_COMP_IRQHandler>
	...

08008280 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b082      	sub	sp, #8
 8008284:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008286:	1dfb      	adds	r3, r7, #7
 8008288:	2200      	movs	r2, #0
 800828a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800828c:	4b0b      	ldr	r3, [pc, #44]	@ (80082bc <HAL_Init+0x3c>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <HAL_Init+0x3c>)
 8008292:	2180      	movs	r1, #128	@ 0x80
 8008294:	0049      	lsls	r1, r1, #1
 8008296:	430a      	orrs	r2, r1
 8008298:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800829a:	2003      	movs	r0, #3
 800829c:	f7ff f9a6 	bl	80075ec <HAL_InitTick>
 80082a0:	1e03      	subs	r3, r0, #0
 80082a2:	d003      	beq.n	80082ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80082a4:	1dfb      	adds	r3, r7, #7
 80082a6:	2201      	movs	r2, #1
 80082a8:	701a      	strb	r2, [r3, #0]
 80082aa:	e001      	b.n	80082b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80082ac:	f7ff f96e 	bl	800758c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80082b0:	1dfb      	adds	r3, r7, #7
 80082b2:	781b      	ldrb	r3, [r3, #0]
}
 80082b4:	0018      	movs	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b002      	add	sp, #8
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40022000 	.word	0x40022000

080082c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80082c4:	4b05      	ldr	r3, [pc, #20]	@ (80082dc <HAL_IncTick+0x1c>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	001a      	movs	r2, r3
 80082ca:	4b05      	ldr	r3, [pc, #20]	@ (80082e0 <HAL_IncTick+0x20>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	18d2      	adds	r2, r2, r3
 80082d0:	4b03      	ldr	r3, [pc, #12]	@ (80082e0 <HAL_IncTick+0x20>)
 80082d2:	601a      	str	r2, [r3, #0]
}
 80082d4:	46c0      	nop			@ (mov r8, r8)
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			@ (mov r8, r8)
 80082dc:	2000000c 	.word	0x2000000c
 80082e0:	20010fac 	.word	0x20010fac

080082e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  return uwTick;
 80082e8:	4b02      	ldr	r3, [pc, #8]	@ (80082f4 <HAL_GetTick+0x10>)
 80082ea:	681b      	ldr	r3, [r3, #0]
}
 80082ec:	0018      	movs	r0, r3
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	46c0      	nop			@ (mov r8, r8)
 80082f4:	20010fac 	.word	0x20010fac

080082f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008300:	f7ff fff0 	bl	80082e4 <HAL_GetTick>
 8008304:	0003      	movs	r3, r0
 8008306:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3301      	adds	r3, #1
 8008310:	d005      	beq.n	800831e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008312:	4b0a      	ldr	r3, [pc, #40]	@ (800833c <HAL_Delay+0x44>)
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	001a      	movs	r2, r3
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	189b      	adds	r3, r3, r2
 800831c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800831e:	46c0      	nop			@ (mov r8, r8)
 8008320:	f7ff ffe0 	bl	80082e4 <HAL_GetTick>
 8008324:	0002      	movs	r2, r0
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	68fa      	ldr	r2, [r7, #12]
 800832c:	429a      	cmp	r2, r3
 800832e:	d8f7      	bhi.n	8008320 <HAL_Delay+0x28>
  {
  }
}
 8008330:	46c0      	nop			@ (mov r8, r8)
 8008332:	46c0      	nop			@ (mov r8, r8)
 8008334:	46bd      	mov	sp, r7
 8008336:	b004      	add	sp, #16
 8008338:	bd80      	pop	{r7, pc}
 800833a:	46c0      	nop			@ (mov r8, r8)
 800833c:	2000000c 	.word	0x2000000c

08008340 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *         This parameter can be one of the following values:
  *         @arg @ref SYSCFG_VREFBUF_VoltageScale
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8008348:	4b06      	ldr	r3, [pc, #24]	@ (8008364 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2204      	movs	r2, #4
 800834e:	4393      	bics	r3, r2
 8008350:	0019      	movs	r1, r3
 8008352:	4b04      	ldr	r3, [pc, #16]	@ (8008364 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8008354:	687a      	ldr	r2, [r7, #4]
 8008356:	430a      	orrs	r2, r1
 8008358:	601a      	str	r2, [r3, #0]
}
 800835a:	46c0      	nop			@ (mov r8, r8)
 800835c:	46bd      	mov	sp, r7
 800835e:	b002      	add	sp, #8
 8008360:	bd80      	pop	{r7, pc}
 8008362:	46c0      	nop			@ (mov r8, r8)
 8008364:	40010030 	.word	0x40010030

08008368 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8008370:	4b06      	ldr	r3, [pc, #24]	@ (800838c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	2202      	movs	r2, #2
 8008376:	4393      	bics	r3, r2
 8008378:	0019      	movs	r1, r3
 800837a:	4b04      	ldr	r3, [pc, #16]	@ (800838c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 800837c:	687a      	ldr	r2, [r7, #4]
 800837e:	430a      	orrs	r2, r1
 8008380:	601a      	str	r2, [r3, #0]
}
 8008382:	46c0      	nop			@ (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b002      	add	sp, #8
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	40010030 	.word	0x40010030

08008390 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8008396:	4b0f      	ldr	r3, [pc, #60]	@ (80083d4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	4b0e      	ldr	r3, [pc, #56]	@ (80083d4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800839c:	2101      	movs	r1, #1
 800839e:	430a      	orrs	r2, r1
 80083a0:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80083a2:	f7ff ff9f 	bl	80082e4 <HAL_GetTick>
 80083a6:	0003      	movs	r3, r0
 80083a8:	607b      	str	r3, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80083aa:	e008      	b.n	80083be <HAL_SYSCFG_EnableVREFBUF+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 80083ac:	f7ff ff9a 	bl	80082e4 <HAL_GetTick>
 80083b0:	0002      	movs	r2, r0
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	1ad3      	subs	r3, r2, r3
 80083b6:	2b0a      	cmp	r3, #10
 80083b8:	d901      	bls.n	80083be <HAL_SYSCFG_EnableVREFBUF+0x2e>
    {
      return HAL_TIMEOUT;
 80083ba:	2303      	movs	r3, #3
 80083bc:	e005      	b.n	80083ca <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 80083be:	4b05      	ldr	r3, [pc, #20]	@ (80083d4 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	2208      	movs	r2, #8
 80083c4:	4013      	ands	r3, r2
 80083c6:	d0f1      	beq.n	80083ac <HAL_SYSCFG_EnableVREFBUF+0x1c>
    }
  }

  return HAL_OK;
 80083c8:	2300      	movs	r3, #0
}
 80083ca:	0018      	movs	r0, r3
 80083cc:	46bd      	mov	sp, r7
 80083ce:	b002      	add	sp, #8
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	46c0      	nop			@ (mov r8, r8)
 80083d4:	40010030 	.word	0x40010030

080083d8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80083e0:	4b06      	ldr	r3, [pc, #24]	@ (80083fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a06      	ldr	r2, [pc, #24]	@ (8008400 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80083e6:	4013      	ands	r3, r2
 80083e8:	0019      	movs	r1, r3
 80083ea:	4b04      	ldr	r3, [pc, #16]	@ (80083fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80083ec:	687a      	ldr	r2, [r7, #4]
 80083ee:	430a      	orrs	r2, r1
 80083f0:	601a      	str	r2, [r3, #0]
}
 80083f2:	46c0      	nop			@ (mov r8, r8)
 80083f4:	46bd      	mov	sp, r7
 80083f6:	b002      	add	sp, #8
 80083f8:	bd80      	pop	{r7, pc}
 80083fa:	46c0      	nop			@ (mov r8, r8)
 80083fc:	40010000 	.word	0x40010000
 8008400:	fffff9ff 	.word	0xfffff9ff

08008404 <__NVIC_EnableIRQ>:
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b082      	sub	sp, #8
 8008408:	af00      	add	r7, sp, #0
 800840a:	0002      	movs	r2, r0
 800840c:	1dfb      	adds	r3, r7, #7
 800840e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008410:	1dfb      	adds	r3, r7, #7
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b7f      	cmp	r3, #127	@ 0x7f
 8008416:	d809      	bhi.n	800842c <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008418:	1dfb      	adds	r3, r7, #7
 800841a:	781b      	ldrb	r3, [r3, #0]
 800841c:	001a      	movs	r2, r3
 800841e:	231f      	movs	r3, #31
 8008420:	401a      	ands	r2, r3
 8008422:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__NVIC_EnableIRQ+0x30>)
 8008424:	2101      	movs	r1, #1
 8008426:	4091      	lsls	r1, r2
 8008428:	000a      	movs	r2, r1
 800842a:	601a      	str	r2, [r3, #0]
}
 800842c:	46c0      	nop			@ (mov r8, r8)
 800842e:	46bd      	mov	sp, r7
 8008430:	b002      	add	sp, #8
 8008432:	bd80      	pop	{r7, pc}
 8008434:	e000e100 	.word	0xe000e100

08008438 <__NVIC_SetPriority>:
{
 8008438:	b590      	push	{r4, r7, lr}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	0002      	movs	r2, r0
 8008440:	6039      	str	r1, [r7, #0]
 8008442:	1dfb      	adds	r3, r7, #7
 8008444:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008446:	1dfb      	adds	r3, r7, #7
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b7f      	cmp	r3, #127	@ 0x7f
 800844c:	d828      	bhi.n	80084a0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800844e:	4a2f      	ldr	r2, [pc, #188]	@ (800850c <__NVIC_SetPriority+0xd4>)
 8008450:	1dfb      	adds	r3, r7, #7
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	b25b      	sxtb	r3, r3
 8008456:	089b      	lsrs	r3, r3, #2
 8008458:	33c0      	adds	r3, #192	@ 0xc0
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	589b      	ldr	r3, [r3, r2]
 800845e:	1dfa      	adds	r2, r7, #7
 8008460:	7812      	ldrb	r2, [r2, #0]
 8008462:	0011      	movs	r1, r2
 8008464:	2203      	movs	r2, #3
 8008466:	400a      	ands	r2, r1
 8008468:	00d2      	lsls	r2, r2, #3
 800846a:	21ff      	movs	r1, #255	@ 0xff
 800846c:	4091      	lsls	r1, r2
 800846e:	000a      	movs	r2, r1
 8008470:	43d2      	mvns	r2, r2
 8008472:	401a      	ands	r2, r3
 8008474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	019b      	lsls	r3, r3, #6
 800847a:	22ff      	movs	r2, #255	@ 0xff
 800847c:	401a      	ands	r2, r3
 800847e:	1dfb      	adds	r3, r7, #7
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	0018      	movs	r0, r3
 8008484:	2303      	movs	r3, #3
 8008486:	4003      	ands	r3, r0
 8008488:	00db      	lsls	r3, r3, #3
 800848a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800848c:	481f      	ldr	r0, [pc, #124]	@ (800850c <__NVIC_SetPriority+0xd4>)
 800848e:	1dfb      	adds	r3, r7, #7
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	b25b      	sxtb	r3, r3
 8008494:	089b      	lsrs	r3, r3, #2
 8008496:	430a      	orrs	r2, r1
 8008498:	33c0      	adds	r3, #192	@ 0xc0
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	501a      	str	r2, [r3, r0]
}
 800849e:	e031      	b.n	8008504 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80084a0:	4a1b      	ldr	r2, [pc, #108]	@ (8008510 <__NVIC_SetPriority+0xd8>)
 80084a2:	1dfb      	adds	r3, r7, #7
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	0019      	movs	r1, r3
 80084a8:	230f      	movs	r3, #15
 80084aa:	400b      	ands	r3, r1
 80084ac:	3b08      	subs	r3, #8
 80084ae:	089b      	lsrs	r3, r3, #2
 80084b0:	3306      	adds	r3, #6
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	18d3      	adds	r3, r2, r3
 80084b6:	3304      	adds	r3, #4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	1dfa      	adds	r2, r7, #7
 80084bc:	7812      	ldrb	r2, [r2, #0]
 80084be:	0011      	movs	r1, r2
 80084c0:	2203      	movs	r2, #3
 80084c2:	400a      	ands	r2, r1
 80084c4:	00d2      	lsls	r2, r2, #3
 80084c6:	21ff      	movs	r1, #255	@ 0xff
 80084c8:	4091      	lsls	r1, r2
 80084ca:	000a      	movs	r2, r1
 80084cc:	43d2      	mvns	r2, r2
 80084ce:	401a      	ands	r2, r3
 80084d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	019b      	lsls	r3, r3, #6
 80084d6:	22ff      	movs	r2, #255	@ 0xff
 80084d8:	401a      	ands	r2, r3
 80084da:	1dfb      	adds	r3, r7, #7
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	0018      	movs	r0, r3
 80084e0:	2303      	movs	r3, #3
 80084e2:	4003      	ands	r3, r0
 80084e4:	00db      	lsls	r3, r3, #3
 80084e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80084e8:	4809      	ldr	r0, [pc, #36]	@ (8008510 <__NVIC_SetPriority+0xd8>)
 80084ea:	1dfb      	adds	r3, r7, #7
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	001c      	movs	r4, r3
 80084f0:	230f      	movs	r3, #15
 80084f2:	4023      	ands	r3, r4
 80084f4:	3b08      	subs	r3, #8
 80084f6:	089b      	lsrs	r3, r3, #2
 80084f8:	430a      	orrs	r2, r1
 80084fa:	3306      	adds	r3, #6
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	18c3      	adds	r3, r0, r3
 8008500:	3304      	adds	r3, #4
 8008502:	601a      	str	r2, [r3, #0]
}
 8008504:	46c0      	nop			@ (mov r8, r8)
 8008506:	46bd      	mov	sp, r7
 8008508:	b003      	add	sp, #12
 800850a:	bd90      	pop	{r4, r7, pc}
 800850c:	e000e100 	.word	0xe000e100
 8008510:	e000ed00 	.word	0xe000ed00

08008514 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b084      	sub	sp, #16
 8008518:	af00      	add	r7, sp, #0
 800851a:	60b9      	str	r1, [r7, #8]
 800851c:	607a      	str	r2, [r7, #4]
 800851e:	210f      	movs	r1, #15
 8008520:	187b      	adds	r3, r7, r1
 8008522:	1c02      	adds	r2, r0, #0
 8008524:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	187b      	adds	r3, r7, r1
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	b25b      	sxtb	r3, r3
 800852e:	0011      	movs	r1, r2
 8008530:	0018      	movs	r0, r3
 8008532:	f7ff ff81 	bl	8008438 <__NVIC_SetPriority>
}
 8008536:	46c0      	nop			@ (mov r8, r8)
 8008538:	46bd      	mov	sp, r7
 800853a:	b004      	add	sp, #16
 800853c:	bd80      	pop	{r7, pc}

0800853e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b082      	sub	sp, #8
 8008542:	af00      	add	r7, sp, #0
 8008544:	0002      	movs	r2, r0
 8008546:	1dfb      	adds	r3, r7, #7
 8008548:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800854a:	1dfb      	adds	r3, r7, #7
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	b25b      	sxtb	r3, r3
 8008550:	0018      	movs	r0, r3
 8008552:	f7ff ff57 	bl	8008404 <__NVIC_EnableIRQ>
}
 8008556:	46c0      	nop			@ (mov r8, r8)
 8008558:	46bd      	mov	sp, r7
 800855a:	b002      	add	sp, #8
 800855c:	bd80      	pop	{r7, pc}
	...

08008560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b086      	sub	sp, #24
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800856a:	2300      	movs	r3, #0
 800856c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800856e:	e14d      	b.n	800880c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2101      	movs	r1, #1
 8008576:	697a      	ldr	r2, [r7, #20]
 8008578:	4091      	lsls	r1, r2
 800857a:	000a      	movs	r2, r1
 800857c:	4013      	ands	r3, r2
 800857e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d100      	bne.n	8008588 <HAL_GPIO_Init+0x28>
 8008586:	e13e      	b.n	8008806 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	2203      	movs	r2, #3
 800858e:	4013      	ands	r3, r2
 8008590:	2b01      	cmp	r3, #1
 8008592:	d005      	beq.n	80085a0 <HAL_GPIO_Init+0x40>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2203      	movs	r2, #3
 800859a:	4013      	ands	r3, r2
 800859c:	2b02      	cmp	r3, #2
 800859e:	d130      	bne.n	8008602 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	005b      	lsls	r3, r3, #1
 80085aa:	2203      	movs	r2, #3
 80085ac:	409a      	lsls	r2, r3
 80085ae:	0013      	movs	r3, r2
 80085b0:	43da      	mvns	r2, r3
 80085b2:	693b      	ldr	r3, [r7, #16]
 80085b4:	4013      	ands	r3, r2
 80085b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	005b      	lsls	r3, r3, #1
 80085c0:	409a      	lsls	r2, r3
 80085c2:	0013      	movs	r3, r2
 80085c4:	693a      	ldr	r2, [r7, #16]
 80085c6:	4313      	orrs	r3, r2
 80085c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	693a      	ldr	r2, [r7, #16]
 80085ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80085d6:	2201      	movs	r2, #1
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	409a      	lsls	r2, r3
 80085dc:	0013      	movs	r3, r2
 80085de:	43da      	mvns	r2, r3
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	4013      	ands	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80085e6:	683b      	ldr	r3, [r7, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	091b      	lsrs	r3, r3, #4
 80085ec:	2201      	movs	r2, #1
 80085ee:	401a      	ands	r2, r3
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	409a      	lsls	r2, r3
 80085f4:	0013      	movs	r3, r2
 80085f6:	693a      	ldr	r2, [r7, #16]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	693a      	ldr	r2, [r7, #16]
 8008600:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	2203      	movs	r2, #3
 8008608:	4013      	ands	r3, r2
 800860a:	2b03      	cmp	r3, #3
 800860c:	d017      	beq.n	800863e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	005b      	lsls	r3, r3, #1
 8008618:	2203      	movs	r2, #3
 800861a:	409a      	lsls	r2, r3
 800861c:	0013      	movs	r3, r2
 800861e:	43da      	mvns	r2, r3
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4013      	ands	r3, r2
 8008624:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	005b      	lsls	r3, r3, #1
 800862e:	409a      	lsls	r2, r3
 8008630:	0013      	movs	r3, r2
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	4313      	orrs	r3, r2
 8008636:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	693a      	ldr	r2, [r7, #16]
 800863c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	2203      	movs	r2, #3
 8008644:	4013      	ands	r3, r2
 8008646:	2b02      	cmp	r3, #2
 8008648:	d123      	bne.n	8008692 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	08da      	lsrs	r2, r3, #3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3208      	adds	r2, #8
 8008652:	0092      	lsls	r2, r2, #2
 8008654:	58d3      	ldr	r3, [r2, r3]
 8008656:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	2207      	movs	r2, #7
 800865c:	4013      	ands	r3, r2
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	220f      	movs	r2, #15
 8008662:	409a      	lsls	r2, r3
 8008664:	0013      	movs	r3, r2
 8008666:	43da      	mvns	r2, r3
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	4013      	ands	r3, r2
 800866c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	691a      	ldr	r2, [r3, #16]
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	2107      	movs	r1, #7
 8008676:	400b      	ands	r3, r1
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	409a      	lsls	r2, r3
 800867c:	0013      	movs	r3, r2
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	08da      	lsrs	r2, r3, #3
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	3208      	adds	r2, #8
 800868c:	0092      	lsls	r2, r2, #2
 800868e:	6939      	ldr	r1, [r7, #16]
 8008690:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	005b      	lsls	r3, r3, #1
 800869c:	2203      	movs	r2, #3
 800869e:	409a      	lsls	r2, r3
 80086a0:	0013      	movs	r3, r2
 80086a2:	43da      	mvns	r2, r3
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	4013      	ands	r3, r2
 80086a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	2203      	movs	r2, #3
 80086b0:	401a      	ands	r2, r3
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	409a      	lsls	r2, r3
 80086b8:	0013      	movs	r3, r2
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	4313      	orrs	r3, r2
 80086be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	23c0      	movs	r3, #192	@ 0xc0
 80086cc:	029b      	lsls	r3, r3, #10
 80086ce:	4013      	ands	r3, r2
 80086d0:	d100      	bne.n	80086d4 <HAL_GPIO_Init+0x174>
 80086d2:	e098      	b.n	8008806 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80086d4:	4a53      	ldr	r2, [pc, #332]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	3318      	adds	r3, #24
 80086dc:	009b      	lsls	r3, r3, #2
 80086de:	589b      	ldr	r3, [r3, r2]
 80086e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2203      	movs	r2, #3
 80086e6:	4013      	ands	r3, r2
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	220f      	movs	r2, #15
 80086ec:	409a      	lsls	r2, r3
 80086ee:	0013      	movs	r3, r2
 80086f0:	43da      	mvns	r2, r3
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	4013      	ands	r3, r2
 80086f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	23a0      	movs	r3, #160	@ 0xa0
 80086fc:	05db      	lsls	r3, r3, #23
 80086fe:	429a      	cmp	r2, r3
 8008700:	d019      	beq.n	8008736 <HAL_GPIO_Init+0x1d6>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	4a48      	ldr	r2, [pc, #288]	@ (8008828 <HAL_GPIO_Init+0x2c8>)
 8008706:	4293      	cmp	r3, r2
 8008708:	d013      	beq.n	8008732 <HAL_GPIO_Init+0x1d2>
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4a47      	ldr	r2, [pc, #284]	@ (800882c <HAL_GPIO_Init+0x2cc>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00d      	beq.n	800872e <HAL_GPIO_Init+0x1ce>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a46      	ldr	r2, [pc, #280]	@ (8008830 <HAL_GPIO_Init+0x2d0>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d007      	beq.n	800872a <HAL_GPIO_Init+0x1ca>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a45      	ldr	r2, [pc, #276]	@ (8008834 <HAL_GPIO_Init+0x2d4>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d101      	bne.n	8008726 <HAL_GPIO_Init+0x1c6>
 8008722:	2304      	movs	r3, #4
 8008724:	e008      	b.n	8008738 <HAL_GPIO_Init+0x1d8>
 8008726:	2305      	movs	r3, #5
 8008728:	e006      	b.n	8008738 <HAL_GPIO_Init+0x1d8>
 800872a:	2303      	movs	r3, #3
 800872c:	e004      	b.n	8008738 <HAL_GPIO_Init+0x1d8>
 800872e:	2302      	movs	r3, #2
 8008730:	e002      	b.n	8008738 <HAL_GPIO_Init+0x1d8>
 8008732:	2301      	movs	r3, #1
 8008734:	e000      	b.n	8008738 <HAL_GPIO_Init+0x1d8>
 8008736:	2300      	movs	r3, #0
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	2103      	movs	r1, #3
 800873c:	400a      	ands	r2, r1
 800873e:	00d2      	lsls	r2, r2, #3
 8008740:	4093      	lsls	r3, r2
 8008742:	693a      	ldr	r2, [r7, #16]
 8008744:	4313      	orrs	r3, r2
 8008746:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8008748:	4936      	ldr	r1, [pc, #216]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	089b      	lsrs	r3, r3, #2
 800874e:	3318      	adds	r3, #24
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	693a      	ldr	r2, [r7, #16]
 8008754:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008756:	4b33      	ldr	r3, [pc, #204]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	43da      	mvns	r2, r3
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4013      	ands	r3, r2
 8008764:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685a      	ldr	r2, [r3, #4]
 800876a:	2380      	movs	r3, #128	@ 0x80
 800876c:	035b      	lsls	r3, r3, #13
 800876e:	4013      	ands	r3, r2
 8008770:	d003      	beq.n	800877a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800877a:	4b2a      	ldr	r3, [pc, #168]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8008780:	4b28      	ldr	r3, [pc, #160]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	43da      	mvns	r2, r3
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	4013      	ands	r3, r2
 800878e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	2380      	movs	r3, #128	@ 0x80
 8008796:	039b      	lsls	r3, r3, #14
 8008798:	4013      	ands	r3, r2
 800879a:	d003      	beq.n	80087a4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80087a4:	4b1f      	ldr	r3, [pc, #124]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80087aa:	4a1e      	ldr	r2, [pc, #120]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 80087ac:	2384      	movs	r3, #132	@ 0x84
 80087ae:	58d3      	ldr	r3, [r2, r3]
 80087b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	43da      	mvns	r2, r3
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	4013      	ands	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	2380      	movs	r3, #128	@ 0x80
 80087c2:	029b      	lsls	r3, r3, #10
 80087c4:	4013      	ands	r3, r2
 80087c6:	d003      	beq.n	80087d0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80087d0:	4914      	ldr	r1, [pc, #80]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 80087d2:	2284      	movs	r2, #132	@ 0x84
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80087d8:	4a12      	ldr	r2, [pc, #72]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 80087da:	2380      	movs	r3, #128	@ 0x80
 80087dc:	58d3      	ldr	r3, [r2, r3]
 80087de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	43da      	mvns	r2, r3
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4013      	ands	r3, r2
 80087e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	2380      	movs	r3, #128	@ 0x80
 80087f0:	025b      	lsls	r3, r3, #9
 80087f2:	4013      	ands	r3, r2
 80087f4:	d003      	beq.n	80087fe <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4313      	orrs	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80087fe:	4909      	ldr	r1, [pc, #36]	@ (8008824 <HAL_GPIO_Init+0x2c4>)
 8008800:	2280      	movs	r2, #128	@ 0x80
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	3301      	adds	r3, #1
 800880a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	40da      	lsrs	r2, r3
 8008814:	1e13      	subs	r3, r2, #0
 8008816:	d000      	beq.n	800881a <HAL_GPIO_Init+0x2ba>
 8008818:	e6aa      	b.n	8008570 <HAL_GPIO_Init+0x10>
  }
}
 800881a:	46c0      	nop			@ (mov r8, r8)
 800881c:	46c0      	nop			@ (mov r8, r8)
 800881e:	46bd      	mov	sp, r7
 8008820:	b006      	add	sp, #24
 8008822:	bd80      	pop	{r7, pc}
 8008824:	40021800 	.word	0x40021800
 8008828:	50000400 	.word	0x50000400
 800882c:	50000800 	.word	0x50000800
 8008830:	50000c00 	.word	0x50000c00
 8008834:	50001000 	.word	0x50001000

08008838 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	000a      	movs	r2, r1
 8008842:	1cbb      	adds	r3, r7, #2
 8008844:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	691b      	ldr	r3, [r3, #16]
 800884a:	1cba      	adds	r2, r7, #2
 800884c:	8812      	ldrh	r2, [r2, #0]
 800884e:	4013      	ands	r3, r2
 8008850:	d004      	beq.n	800885c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8008852:	230f      	movs	r3, #15
 8008854:	18fb      	adds	r3, r7, r3
 8008856:	2201      	movs	r2, #1
 8008858:	701a      	strb	r2, [r3, #0]
 800885a:	e003      	b.n	8008864 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800885c:	230f      	movs	r3, #15
 800885e:	18fb      	adds	r3, r7, r3
 8008860:	2200      	movs	r2, #0
 8008862:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8008864:	230f      	movs	r3, #15
 8008866:	18fb      	adds	r3, r7, r3
 8008868:	781b      	ldrb	r3, [r3, #0]
}
 800886a:	0018      	movs	r0, r3
 800886c:	46bd      	mov	sp, r7
 800886e:	b004      	add	sp, #16
 8008870:	bd80      	pop	{r7, pc}

08008872 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b082      	sub	sp, #8
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
 800887a:	0008      	movs	r0, r1
 800887c:	0011      	movs	r1, r2
 800887e:	1cbb      	adds	r3, r7, #2
 8008880:	1c02      	adds	r2, r0, #0
 8008882:	801a      	strh	r2, [r3, #0]
 8008884:	1c7b      	adds	r3, r7, #1
 8008886:	1c0a      	adds	r2, r1, #0
 8008888:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800888a:	1c7b      	adds	r3, r7, #1
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d004      	beq.n	800889c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008892:	1cbb      	adds	r3, r7, #2
 8008894:	881a      	ldrh	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800889a:	e003      	b.n	80088a4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800889c:	1cbb      	adds	r3, r7, #2
 800889e:	881a      	ldrh	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80088a4:	46c0      	nop			@ (mov r8, r8)
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b002      	add	sp, #8
 80088aa:	bd80      	pop	{r7, pc}

080088ac <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b084      	sub	sp, #16
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	000a      	movs	r2, r1
 80088b6:	1cbb      	adds	r3, r7, #2
 80088b8:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80088c0:	1cbb      	adds	r3, r7, #2
 80088c2:	881b      	ldrh	r3, [r3, #0]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	4013      	ands	r3, r2
 80088c8:	041a      	lsls	r2, r3, #16
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	43db      	mvns	r3, r3
 80088ce:	1cb9      	adds	r1, r7, #2
 80088d0:	8809      	ldrh	r1, [r1, #0]
 80088d2:	400b      	ands	r3, r1
 80088d4:	431a      	orrs	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	619a      	str	r2, [r3, #24]
}
 80088da:	46c0      	nop			@ (mov r8, r8)
 80088dc:	46bd      	mov	sp, r7
 80088de:	b004      	add	sp, #16
 80088e0:	bd80      	pop	{r7, pc}
	...

080088e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d101      	bne.n	80088f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e08f      	b.n	8008a16 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2241      	movs	r2, #65	@ 0x41
 80088fa:	5c9b      	ldrb	r3, [r3, r2]
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d107      	bne.n	8008912 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2240      	movs	r2, #64	@ 0x40
 8008906:	2100      	movs	r1, #0
 8008908:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	0018      	movs	r0, r3
 800890e:	f7fe fd15 	bl	800733c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2241      	movs	r2, #65	@ 0x41
 8008916:	2124      	movs	r1, #36	@ 0x24
 8008918:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	681a      	ldr	r2, [r3, #0]
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2101      	movs	r1, #1
 8008926:	438a      	bics	r2, r1
 8008928:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685a      	ldr	r2, [r3, #4]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	493b      	ldr	r1, [pc, #236]	@ (8008a20 <HAL_I2C_Init+0x13c>)
 8008934:	400a      	ands	r2, r1
 8008936:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	689a      	ldr	r2, [r3, #8]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4938      	ldr	r1, [pc, #224]	@ (8008a24 <HAL_I2C_Init+0x140>)
 8008944:	400a      	ands	r2, r1
 8008946:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	2b01      	cmp	r3, #1
 800894e:	d108      	bne.n	8008962 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	689a      	ldr	r2, [r3, #8]
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2180      	movs	r1, #128	@ 0x80
 800895a:	0209      	lsls	r1, r1, #8
 800895c:	430a      	orrs	r2, r1
 800895e:	609a      	str	r2, [r3, #8]
 8008960:	e007      	b.n	8008972 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	689a      	ldr	r2, [r3, #8]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	2184      	movs	r1, #132	@ 0x84
 800896c:	0209      	lsls	r1, r1, #8
 800896e:	430a      	orrs	r2, r1
 8008970:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	2b02      	cmp	r3, #2
 8008978:	d109      	bne.n	800898e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2180      	movs	r1, #128	@ 0x80
 8008986:	0109      	lsls	r1, r1, #4
 8008988:	430a      	orrs	r2, r1
 800898a:	605a      	str	r2, [r3, #4]
 800898c:	e007      	b.n	800899e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4923      	ldr	r1, [pc, #140]	@ (8008a28 <HAL_I2C_Init+0x144>)
 800899a:	400a      	ands	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4920      	ldr	r1, [pc, #128]	@ (8008a2c <HAL_I2C_Init+0x148>)
 80089aa:	430a      	orrs	r2, r1
 80089ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68da      	ldr	r2, [r3, #12]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	491a      	ldr	r1, [pc, #104]	@ (8008a24 <HAL_I2C_Init+0x140>)
 80089ba:	400a      	ands	r2, r1
 80089bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691a      	ldr	r2, [r3, #16]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	695b      	ldr	r3, [r3, #20]
 80089c6:	431a      	orrs	r2, r3
 80089c8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	430a      	orrs	r2, r1
 80089d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	69d9      	ldr	r1, [r3, #28]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6a1a      	ldr	r2, [r3, #32]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	430a      	orrs	r2, r1
 80089e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2101      	movs	r1, #1
 80089f4:	430a      	orrs	r2, r1
 80089f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2241      	movs	r2, #65	@ 0x41
 8008a02:	2120      	movs	r1, #32
 8008a04:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	2200      	movs	r2, #0
 8008a0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2242      	movs	r2, #66	@ 0x42
 8008a10:	2100      	movs	r1, #0
 8008a12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	0018      	movs	r0, r3
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	b002      	add	sp, #8
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	46c0      	nop			@ (mov r8, r8)
 8008a20:	f0ffffff 	.word	0xf0ffffff
 8008a24:	ffff7fff 	.word	0xffff7fff
 8008a28:	fffff7ff 	.word	0xfffff7ff
 8008a2c:	02008000 	.word	0x02008000

08008a30 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008a30:	b590      	push	{r4, r7, lr}
 8008a32:	b089      	sub	sp, #36	@ 0x24
 8008a34:	af02      	add	r7, sp, #8
 8008a36:	60f8      	str	r0, [r7, #12]
 8008a38:	0008      	movs	r0, r1
 8008a3a:	607a      	str	r2, [r7, #4]
 8008a3c:	0019      	movs	r1, r3
 8008a3e:	230a      	movs	r3, #10
 8008a40:	18fb      	adds	r3, r7, r3
 8008a42:	1c02      	adds	r2, r0, #0
 8008a44:	801a      	strh	r2, [r3, #0]
 8008a46:	2308      	movs	r3, #8
 8008a48:	18fb      	adds	r3, r7, r3
 8008a4a:	1c0a      	adds	r2, r1, #0
 8008a4c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2241      	movs	r2, #65	@ 0x41
 8008a52:	5c9b      	ldrb	r3, [r3, r2]
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b20      	cmp	r3, #32
 8008a58:	d000      	beq.n	8008a5c <HAL_I2C_Master_Transmit+0x2c>
 8008a5a:	e10a      	b.n	8008c72 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2240      	movs	r2, #64	@ 0x40
 8008a60:	5c9b      	ldrb	r3, [r3, r2]
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d101      	bne.n	8008a6a <HAL_I2C_Master_Transmit+0x3a>
 8008a66:	2302      	movs	r3, #2
 8008a68:	e104      	b.n	8008c74 <HAL_I2C_Master_Transmit+0x244>
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2240      	movs	r2, #64	@ 0x40
 8008a6e:	2101      	movs	r1, #1
 8008a70:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a72:	f7ff fc37 	bl	80082e4 <HAL_GetTick>
 8008a76:	0003      	movs	r3, r0
 8008a78:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a7a:	2380      	movs	r3, #128	@ 0x80
 8008a7c:	0219      	lsls	r1, r3, #8
 8008a7e:	68f8      	ldr	r0, [r7, #12]
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	9300      	str	r3, [sp, #0]
 8008a84:	2319      	movs	r3, #25
 8008a86:	2201      	movs	r2, #1
 8008a88:	f000 f91e 	bl	8008cc8 <I2C_WaitOnFlagUntilTimeout>
 8008a8c:	1e03      	subs	r3, r0, #0
 8008a8e:	d001      	beq.n	8008a94 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8008a90:	2301      	movs	r3, #1
 8008a92:	e0ef      	b.n	8008c74 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2241      	movs	r2, #65	@ 0x41
 8008a98:	2121      	movs	r1, #33	@ 0x21
 8008a9a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2242      	movs	r2, #66	@ 0x42
 8008aa0:	2110      	movs	r1, #16
 8008aa2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2208      	movs	r2, #8
 8008ab4:	18ba      	adds	r2, r7, r2
 8008ab6:	8812      	ldrh	r2, [r2, #0]
 8008ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2200      	movs	r2, #0
 8008abe:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ac4:	b29b      	uxth	r3, r3
 8008ac6:	2bff      	cmp	r3, #255	@ 0xff
 8008ac8:	d906      	bls.n	8008ad8 <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	22ff      	movs	r2, #255	@ 0xff
 8008ace:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008ad0:	2380      	movs	r3, #128	@ 0x80
 8008ad2:	045b      	lsls	r3, r3, #17
 8008ad4:	617b      	str	r3, [r7, #20]
 8008ad6:	e007      	b.n	8008ae8 <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008ae2:	2380      	movs	r3, #128	@ 0x80
 8008ae4:	049b      	lsls	r3, r3, #18
 8008ae6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d027      	beq.n	8008b40 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af4:	781a      	ldrb	r2, [r3, #0]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b00:	1c5a      	adds	r2, r3, #1
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	b29a      	uxth	r2, r3
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	3301      	adds	r3, #1
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	697c      	ldr	r4, [r7, #20]
 8008b2c:	230a      	movs	r3, #10
 8008b2e:	18fb      	adds	r3, r7, r3
 8008b30:	8819      	ldrh	r1, [r3, #0]
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	4b51      	ldr	r3, [pc, #324]	@ (8008c7c <HAL_I2C_Master_Transmit+0x24c>)
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	0023      	movs	r3, r4
 8008b3a:	f000 fa9f 	bl	800907c <I2C_TransferConfig>
 8008b3e:	e06f      	b.n	8008c20 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b44:	b2da      	uxtb	r2, r3
 8008b46:	697c      	ldr	r4, [r7, #20]
 8008b48:	230a      	movs	r3, #10
 8008b4a:	18fb      	adds	r3, r7, r3
 8008b4c:	8819      	ldrh	r1, [r3, #0]
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	4b4a      	ldr	r3, [pc, #296]	@ (8008c7c <HAL_I2C_Master_Transmit+0x24c>)
 8008b52:	9300      	str	r3, [sp, #0]
 8008b54:	0023      	movs	r3, r4
 8008b56:	f000 fa91 	bl	800907c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008b5a:	e061      	b.n	8008c20 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 f908 	bl	8008d78 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b68:	1e03      	subs	r3, r0, #0
 8008b6a:	d001      	beq.n	8008b70 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e081      	b.n	8008c74 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b74:	781a      	ldrb	r2, [r3, #0]
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b80:	1c5a      	adds	r2, r3, #1
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d03a      	beq.n	8008c20 <HAL_I2C_Master_Transmit+0x1f0>
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d136      	bne.n	8008c20 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008bb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	0013      	movs	r3, r2
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2180      	movs	r1, #128	@ 0x80
 8008bc0:	f000 f882 	bl	8008cc8 <I2C_WaitOnFlagUntilTimeout>
 8008bc4:	1e03      	subs	r3, r0, #0
 8008bc6:	d001      	beq.n	8008bcc <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e053      	b.n	8008c74 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	2bff      	cmp	r3, #255	@ 0xff
 8008bd4:	d911      	bls.n	8008bfa <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	22ff      	movs	r2, #255	@ 0xff
 8008bda:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	2380      	movs	r3, #128	@ 0x80
 8008be4:	045c      	lsls	r4, r3, #17
 8008be6:	230a      	movs	r3, #10
 8008be8:	18fb      	adds	r3, r7, r3
 8008bea:	8819      	ldrh	r1, [r3, #0]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	2300      	movs	r3, #0
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	0023      	movs	r3, r4
 8008bf4:	f000 fa42 	bl	800907c <I2C_TransferConfig>
 8008bf8:	e012      	b.n	8008c20 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008bfe:	b29a      	uxth	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	2380      	movs	r3, #128	@ 0x80
 8008c0c:	049c      	lsls	r4, r3, #18
 8008c0e:	230a      	movs	r3, #10
 8008c10:	18fb      	adds	r3, r7, r3
 8008c12:	8819      	ldrh	r1, [r3, #0]
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	2300      	movs	r3, #0
 8008c18:	9300      	str	r3, [sp, #0]
 8008c1a:	0023      	movs	r3, r4
 8008c1c:	f000 fa2e 	bl	800907c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d198      	bne.n	8008b5c <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	0018      	movs	r0, r3
 8008c32:	f000 f8e7 	bl	8008e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008c36:	1e03      	subs	r3, r0, #0
 8008c38:	d001      	beq.n	8008c3e <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e01a      	b.n	8008c74 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2220      	movs	r2, #32
 8008c44:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	490b      	ldr	r1, [pc, #44]	@ (8008c80 <HAL_I2C_Master_Transmit+0x250>)
 8008c52:	400a      	ands	r2, r1
 8008c54:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2241      	movs	r2, #65	@ 0x41
 8008c5a:	2120      	movs	r1, #32
 8008c5c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2242      	movs	r2, #66	@ 0x42
 8008c62:	2100      	movs	r1, #0
 8008c64:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2240      	movs	r2, #64	@ 0x40
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e000      	b.n	8008c74 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8008c72:	2302      	movs	r3, #2
  }
}
 8008c74:	0018      	movs	r0, r3
 8008c76:	46bd      	mov	sp, r7
 8008c78:	b007      	add	sp, #28
 8008c7a:	bd90      	pop	{r4, r7, pc}
 8008c7c:	80002000 	.word	0x80002000
 8008c80:	fe00e800 	.word	0xfe00e800

08008c84 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b082      	sub	sp, #8
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2202      	movs	r2, #2
 8008c94:	4013      	ands	r3, r2
 8008c96:	2b02      	cmp	r3, #2
 8008c98:	d103      	bne.n	8008ca2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	699b      	ldr	r3, [r3, #24]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	4013      	ands	r3, r2
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d007      	beq.n	8008cc0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	699a      	ldr	r2, [r3, #24]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	2101      	movs	r1, #1
 8008cbc:	430a      	orrs	r2, r1
 8008cbe:	619a      	str	r2, [r3, #24]
  }
}
 8008cc0:	46c0      	nop			@ (mov r8, r8)
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	b002      	add	sp, #8
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	603b      	str	r3, [r7, #0]
 8008cd4:	1dfb      	adds	r3, r7, #7
 8008cd6:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cd8:	e03a      	b.n	8008d50 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	0018      	movs	r0, r3
 8008ce2:	f000 f8d3 	bl	8008e8c <I2C_IsErrorOccurred>
 8008ce6:	1e03      	subs	r3, r0, #0
 8008ce8:	d001      	beq.n	8008cee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e040      	b.n	8008d70 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	d02d      	beq.n	8008d50 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf4:	f7ff faf6 	bl	80082e4 <HAL_GetTick>
 8008cf8:	0002      	movs	r2, r0
 8008cfa:	69bb      	ldr	r3, [r7, #24]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	683a      	ldr	r2, [r7, #0]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d302      	bcc.n	8008d0a <I2C_WaitOnFlagUntilTimeout+0x42>
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d122      	bne.n	8008d50 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	699b      	ldr	r3, [r3, #24]
 8008d10:	68ba      	ldr	r2, [r7, #8]
 8008d12:	4013      	ands	r3, r2
 8008d14:	68ba      	ldr	r2, [r7, #8]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	425a      	negs	r2, r3
 8008d1a:	4153      	adcs	r3, r2
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	001a      	movs	r2, r3
 8008d20:	1dfb      	adds	r3, r7, #7
 8008d22:	781b      	ldrb	r3, [r3, #0]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d113      	bne.n	8008d50 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2c:	2220      	movs	r2, #32
 8008d2e:	431a      	orrs	r2, r3
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2241      	movs	r2, #65	@ 0x41
 8008d38:	2120      	movs	r1, #32
 8008d3a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	2242      	movs	r2, #66	@ 0x42
 8008d40:	2100      	movs	r1, #0
 8008d42:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	2240      	movs	r2, #64	@ 0x40
 8008d48:	2100      	movs	r1, #0
 8008d4a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	e00f      	b.n	8008d70 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	68ba      	ldr	r2, [r7, #8]
 8008d58:	4013      	ands	r3, r2
 8008d5a:	68ba      	ldr	r2, [r7, #8]
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	425a      	negs	r2, r3
 8008d60:	4153      	adcs	r3, r2
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	001a      	movs	r2, r3
 8008d66:	1dfb      	adds	r3, r7, #7
 8008d68:	781b      	ldrb	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d0b5      	beq.n	8008cda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d6e:	2300      	movs	r3, #0
}
 8008d70:	0018      	movs	r0, r3
 8008d72:	46bd      	mov	sp, r7
 8008d74:	b004      	add	sp, #16
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d84:	e032      	b.n	8008dec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	68b9      	ldr	r1, [r7, #8]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	0018      	movs	r0, r3
 8008d8e:	f000 f87d 	bl	8008e8c <I2C_IsErrorOccurred>
 8008d92:	1e03      	subs	r3, r0, #0
 8008d94:	d001      	beq.n	8008d9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d96:	2301      	movs	r3, #1
 8008d98:	e030      	b.n	8008dfc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	d025      	beq.n	8008dec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da0:	f7ff faa0 	bl	80082e4 <HAL_GetTick>
 8008da4:	0002      	movs	r2, r0
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d11a      	bne.n	8008dec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2202      	movs	r2, #2
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d013      	beq.n	8008dec <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc8:	2220      	movs	r2, #32
 8008dca:	431a      	orrs	r2, r3
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2241      	movs	r2, #65	@ 0x41
 8008dd4:	2120      	movs	r1, #32
 8008dd6:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2242      	movs	r2, #66	@ 0x42
 8008ddc:	2100      	movs	r1, #0
 8008dde:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2240      	movs	r2, #64	@ 0x40
 8008de4:	2100      	movs	r1, #0
 8008de6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e007      	b.n	8008dfc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	2202      	movs	r2, #2
 8008df4:	4013      	ands	r3, r2
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d1c5      	bne.n	8008d86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	0018      	movs	r0, r3
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	b004      	add	sp, #16
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e10:	e02f      	b.n	8008e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	0018      	movs	r0, r3
 8008e1a:	f000 f837 	bl	8008e8c <I2C_IsErrorOccurred>
 8008e1e:	1e03      	subs	r3, r0, #0
 8008e20:	d001      	beq.n	8008e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e02d      	b.n	8008e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e26:	f7ff fa5d 	bl	80082e4 <HAL_GetTick>
 8008e2a:	0002      	movs	r2, r0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d302      	bcc.n	8008e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11a      	bne.n	8008e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	2220      	movs	r2, #32
 8008e44:	4013      	ands	r3, r2
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d013      	beq.n	8008e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4e:	2220      	movs	r2, #32
 8008e50:	431a      	orrs	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2241      	movs	r2, #65	@ 0x41
 8008e5a:	2120      	movs	r1, #32
 8008e5c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2242      	movs	r2, #66	@ 0x42
 8008e62:	2100      	movs	r1, #0
 8008e64:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2240      	movs	r2, #64	@ 0x40
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e007      	b.n	8008e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	2b20      	cmp	r3, #32
 8008e7e:	d1c8      	bne.n	8008e12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	0018      	movs	r0, r3
 8008e84:	46bd      	mov	sp, r7
 8008e86:	b004      	add	sp, #16
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b08a      	sub	sp, #40	@ 0x28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e98:	2327      	movs	r3, #39	@ 0x27
 8008e9a:	18fb      	adds	r3, r7, r3
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	699b      	ldr	r3, [r3, #24]
 8008ea6:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	2210      	movs	r2, #16
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	d100      	bne.n	8008eba <I2C_IsErrorOccurred+0x2e>
 8008eb8:	e079      	b.n	8008fae <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008ec2:	e057      	b.n	8008f74 <I2C_IsErrorOccurred+0xe8>
 8008ec4:	2227      	movs	r2, #39	@ 0x27
 8008ec6:	18bb      	adds	r3, r7, r2
 8008ec8:	18ba      	adds	r2, r7, r2
 8008eca:	7812      	ldrb	r2, [r2, #0]
 8008ecc:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	d04f      	beq.n	8008f74 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008ed4:	f7ff fa06 	bl	80082e4 <HAL_GetTick>
 8008ed8:	0002      	movs	r2, r0
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	68ba      	ldr	r2, [r7, #8]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d302      	bcc.n	8008eea <I2C_IsErrorOccurred+0x5e>
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d144      	bne.n	8008f74 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685a      	ldr	r2, [r3, #4]
 8008ef0:	2380      	movs	r3, #128	@ 0x80
 8008ef2:	01db      	lsls	r3, r3, #7
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008ef8:	2013      	movs	r0, #19
 8008efa:	183b      	adds	r3, r7, r0
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	2142      	movs	r1, #66	@ 0x42
 8008f00:	5c52      	ldrb	r2, [r2, r1]
 8008f02:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	699a      	ldr	r2, [r3, #24]
 8008f0a:	2380      	movs	r3, #128	@ 0x80
 8008f0c:	021b      	lsls	r3, r3, #8
 8008f0e:	401a      	ands	r2, r3
 8008f10:	2380      	movs	r3, #128	@ 0x80
 8008f12:	021b      	lsls	r3, r3, #8
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d126      	bne.n	8008f66 <I2C_IsErrorOccurred+0xda>
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	2380      	movs	r3, #128	@ 0x80
 8008f1c:	01db      	lsls	r3, r3, #7
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d021      	beq.n	8008f66 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8008f22:	183b      	adds	r3, r7, r0
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b20      	cmp	r3, #32
 8008f28:	d01d      	beq.n	8008f66 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2180      	movs	r1, #128	@ 0x80
 8008f36:	01c9      	lsls	r1, r1, #7
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008f3c:	f7ff f9d2 	bl	80082e4 <HAL_GetTick>
 8008f40:	0003      	movs	r3, r0
 8008f42:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f44:	e00f      	b.n	8008f66 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008f46:	f7ff f9cd 	bl	80082e4 <HAL_GetTick>
 8008f4a:	0002      	movs	r2, r0
 8008f4c:	69fb      	ldr	r3, [r7, #28]
 8008f4e:	1ad3      	subs	r3, r2, r3
 8008f50:	2b19      	cmp	r3, #25
 8008f52:	d908      	bls.n	8008f66 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008f54:	6a3b      	ldr	r3, [r7, #32]
 8008f56:	2220      	movs	r2, #32
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008f5c:	2327      	movs	r3, #39	@ 0x27
 8008f5e:	18fb      	adds	r3, r7, r3
 8008f60:	2201      	movs	r2, #1
 8008f62:	701a      	strb	r2, [r3, #0]

              break;
 8008f64:	e006      	b.n	8008f74 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	2220      	movs	r2, #32
 8008f6e:	4013      	ands	r3, r2
 8008f70:	2b20      	cmp	r3, #32
 8008f72:	d1e8      	bne.n	8008f46 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	2220      	movs	r2, #32
 8008f7c:	4013      	ands	r3, r2
 8008f7e:	2b20      	cmp	r3, #32
 8008f80:	d004      	beq.n	8008f8c <I2C_IsErrorOccurred+0x100>
 8008f82:	2327      	movs	r3, #39	@ 0x27
 8008f84:	18fb      	adds	r3, r7, r3
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d09b      	beq.n	8008ec4 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008f8c:	2327      	movs	r3, #39	@ 0x27
 8008f8e:	18fb      	adds	r3, r7, r3
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d103      	bne.n	8008f9e <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2220      	movs	r2, #32
 8008f9c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008f9e:	6a3b      	ldr	r3, [r7, #32]
 8008fa0:	2204      	movs	r2, #4
 8008fa2:	4313      	orrs	r3, r2
 8008fa4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008fa6:	2327      	movs	r3, #39	@ 0x27
 8008fa8:	18fb      	adds	r3, r7, r3
 8008faa:	2201      	movs	r2, #1
 8008fac:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	699b      	ldr	r3, [r3, #24]
 8008fb4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008fb6:	69ba      	ldr	r2, [r7, #24]
 8008fb8:	2380      	movs	r3, #128	@ 0x80
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	4013      	ands	r3, r2
 8008fbe:	d00c      	beq.n	8008fda <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008fc0:	6a3b      	ldr	r3, [r7, #32]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2280      	movs	r2, #128	@ 0x80
 8008fce:	0052      	lsls	r2, r2, #1
 8008fd0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008fd2:	2327      	movs	r3, #39	@ 0x27
 8008fd4:	18fb      	adds	r3, r7, r3
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	2380      	movs	r3, #128	@ 0x80
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	4013      	ands	r3, r2
 8008fe2:	d00c      	beq.n	8008ffe <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	2208      	movs	r2, #8
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2280      	movs	r2, #128	@ 0x80
 8008ff2:	00d2      	lsls	r2, r2, #3
 8008ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ff6:	2327      	movs	r3, #39	@ 0x27
 8008ff8:	18fb      	adds	r3, r7, r3
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008ffe:	69ba      	ldr	r2, [r7, #24]
 8009000:	2380      	movs	r3, #128	@ 0x80
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	4013      	ands	r3, r2
 8009006:	d00c      	beq.n	8009022 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	2202      	movs	r2, #2
 800900c:	4313      	orrs	r3, r2
 800900e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2280      	movs	r2, #128	@ 0x80
 8009016:	0092      	lsls	r2, r2, #2
 8009018:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800901a:	2327      	movs	r3, #39	@ 0x27
 800901c:	18fb      	adds	r3, r7, r3
 800901e:	2201      	movs	r2, #1
 8009020:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8009022:	2327      	movs	r3, #39	@ 0x27
 8009024:	18fb      	adds	r3, r7, r3
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01d      	beq.n	8009068 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	0018      	movs	r0, r3
 8009030:	f7ff fe28 	bl	8008c84 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	685a      	ldr	r2, [r3, #4]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	490e      	ldr	r1, [pc, #56]	@ (8009078 <I2C_IsErrorOccurred+0x1ec>)
 8009040:	400a      	ands	r2, r1
 8009042:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	431a      	orrs	r2, r3
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2241      	movs	r2, #65	@ 0x41
 8009054:	2120      	movs	r1, #32
 8009056:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2242      	movs	r2, #66	@ 0x42
 800905c:	2100      	movs	r1, #0
 800905e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2240      	movs	r2, #64	@ 0x40
 8009064:	2100      	movs	r1, #0
 8009066:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8009068:	2327      	movs	r3, #39	@ 0x27
 800906a:	18fb      	adds	r3, r7, r3
 800906c:	781b      	ldrb	r3, [r3, #0]
}
 800906e:	0018      	movs	r0, r3
 8009070:	46bd      	mov	sp, r7
 8009072:	b00a      	add	sp, #40	@ 0x28
 8009074:	bd80      	pop	{r7, pc}
 8009076:	46c0      	nop			@ (mov r8, r8)
 8009078:	fe00e800 	.word	0xfe00e800

0800907c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800907c:	b590      	push	{r4, r7, lr}
 800907e:	b087      	sub	sp, #28
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	0008      	movs	r0, r1
 8009086:	0011      	movs	r1, r2
 8009088:	607b      	str	r3, [r7, #4]
 800908a:	240a      	movs	r4, #10
 800908c:	193b      	adds	r3, r7, r4
 800908e:	1c02      	adds	r2, r0, #0
 8009090:	801a      	strh	r2, [r3, #0]
 8009092:	2009      	movs	r0, #9
 8009094:	183b      	adds	r3, r7, r0
 8009096:	1c0a      	adds	r2, r1, #0
 8009098:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800909a:	193b      	adds	r3, r7, r4
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	059b      	lsls	r3, r3, #22
 80090a0:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090a2:	183b      	adds	r3, r7, r0
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	0419      	lsls	r1, r3, #16
 80090a8:	23ff      	movs	r3, #255	@ 0xff
 80090aa:	041b      	lsls	r3, r3, #16
 80090ac:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090ae:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80090b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b6:	4313      	orrs	r3, r2
 80090b8:	005b      	lsls	r3, r3, #1
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090c6:	0d51      	lsrs	r1, r2, #21
 80090c8:	2280      	movs	r2, #128	@ 0x80
 80090ca:	00d2      	lsls	r2, r2, #3
 80090cc:	400a      	ands	r2, r1
 80090ce:	4907      	ldr	r1, [pc, #28]	@ (80090ec <I2C_TransferConfig+0x70>)
 80090d0:	430a      	orrs	r2, r1
 80090d2:	43d2      	mvns	r2, r2
 80090d4:	401a      	ands	r2, r3
 80090d6:	0011      	movs	r1, r2
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	697a      	ldr	r2, [r7, #20]
 80090de:	430a      	orrs	r2, r1
 80090e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80090e2:	46c0      	nop			@ (mov r8, r8)
 80090e4:	46bd      	mov	sp, r7
 80090e6:	b007      	add	sp, #28
 80090e8:	bd90      	pop	{r4, r7, pc}
 80090ea:	46c0      	nop			@ (mov r8, r8)
 80090ec:	03ff63ff 	.word	0x03ff63ff

080090f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2241      	movs	r2, #65	@ 0x41
 80090fe:	5c9b      	ldrb	r3, [r3, r2]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b20      	cmp	r3, #32
 8009104:	d138      	bne.n	8009178 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2240      	movs	r2, #64	@ 0x40
 800910a:	5c9b      	ldrb	r3, [r3, r2]
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009110:	2302      	movs	r3, #2
 8009112:	e032      	b.n	800917a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2240      	movs	r2, #64	@ 0x40
 8009118:	2101      	movs	r1, #1
 800911a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2241      	movs	r2, #65	@ 0x41
 8009120:	2124      	movs	r1, #36	@ 0x24
 8009122:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	2101      	movs	r1, #1
 8009130:	438a      	bics	r2, r1
 8009132:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4911      	ldr	r1, [pc, #68]	@ (8009184 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8009140:	400a      	ands	r2, r1
 8009142:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6819      	ldr	r1, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	430a      	orrs	r2, r1
 8009152:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2101      	movs	r1, #1
 8009160:	430a      	orrs	r2, r1
 8009162:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2241      	movs	r2, #65	@ 0x41
 8009168:	2120      	movs	r1, #32
 800916a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2240      	movs	r2, #64	@ 0x40
 8009170:	2100      	movs	r1, #0
 8009172:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8009174:	2300      	movs	r3, #0
 8009176:	e000      	b.n	800917a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009178:	2302      	movs	r3, #2
  }
}
 800917a:	0018      	movs	r0, r3
 800917c:	46bd      	mov	sp, r7
 800917e:	b002      	add	sp, #8
 8009180:	bd80      	pop	{r7, pc}
 8009182:	46c0      	nop			@ (mov r8, r8)
 8009184:	ffffefff 	.word	0xffffefff

08009188 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2241      	movs	r2, #65	@ 0x41
 8009196:	5c9b      	ldrb	r3, [r3, r2]
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b20      	cmp	r3, #32
 800919c:	d139      	bne.n	8009212 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2240      	movs	r2, #64	@ 0x40
 80091a2:	5c9b      	ldrb	r3, [r3, r2]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d101      	bne.n	80091ac <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80091a8:	2302      	movs	r3, #2
 80091aa:	e033      	b.n	8009214 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	2240      	movs	r2, #64	@ 0x40
 80091b0:	2101      	movs	r1, #1
 80091b2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2241      	movs	r2, #65	@ 0x41
 80091b8:	2124      	movs	r1, #36	@ 0x24
 80091ba:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2101      	movs	r1, #1
 80091c8:	438a      	bics	r2, r1
 80091ca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4a11      	ldr	r2, [pc, #68]	@ (800921c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80091d8:	4013      	ands	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	021b      	lsls	r3, r3, #8
 80091e0:	68fa      	ldr	r2, [r7, #12]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2101      	movs	r1, #1
 80091fa:	430a      	orrs	r2, r1
 80091fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2241      	movs	r2, #65	@ 0x41
 8009202:	2120      	movs	r1, #32
 8009204:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2240      	movs	r2, #64	@ 0x40
 800920a:	2100      	movs	r1, #0
 800920c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800920e:	2300      	movs	r3, #0
 8009210:	e000      	b.n	8009214 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009212:	2302      	movs	r3, #2
  }
}
 8009214:	0018      	movs	r0, r3
 8009216:	46bd      	mov	sp, r7
 8009218:	b004      	add	sp, #16
 800921a:	bd80      	pop	{r7, pc}
 800921c:	fffff0ff 	.word	0xfffff0ff

08009220 <PCD_GET_EP_RX_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_RX_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	000a      	movs	r2, r1
 800922a:	1cbb      	adds	r3, r7, #2
 800922c:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 800922e:	230a      	movs	r3, #10
 8009230:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8009232:	e002      	b.n	800923a <PCD_GET_EP_RX_CNT+0x1a>
  {
    count--;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	3b01      	subs	r3, #1
 8009238:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f9      	bne.n	8009234 <PCD_GET_EP_RX_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_RX_CNT((Instance), (bEpNum));
 8009240:	1cbb      	adds	r3, r7, #2
 8009242:	881b      	ldrh	r3, [r3, #0]
 8009244:	00db      	lsls	r3, r3, #3
 8009246:	4a06      	ldr	r2, [pc, #24]	@ (8009260 <PCD_GET_EP_RX_CNT+0x40>)
 8009248:	4694      	mov	ip, r2
 800924a:	4463      	add	r3, ip
 800924c:	685b      	ldr	r3, [r3, #4]
 800924e:	0c1b      	lsrs	r3, r3, #16
 8009250:	b29b      	uxth	r3, r3
 8009252:	059b      	lsls	r3, r3, #22
 8009254:	0d9b      	lsrs	r3, r3, #22
 8009256:	b29b      	uxth	r3, r3
}
 8009258:	0018      	movs	r0, r3
 800925a:	46bd      	mov	sp, r7
 800925c:	b004      	add	sp, #16
 800925e:	bd80      	pop	{r7, pc}
 8009260:	40009800 	.word	0x40009800

08009264 <PCD_GET_EP_DBUF0_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF0_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	000a      	movs	r2, r1
 800926e:	1cbb      	adds	r3, r7, #2
 8009270:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 8009272:	230a      	movs	r3, #10
 8009274:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 8009276:	e002      	b.n	800927e <PCD_GET_EP_DBUF0_CNT+0x1a>
  {
    count--;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	3b01      	subs	r3, #1
 800927c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f9      	bne.n	8009278 <PCD_GET_EP_DBUF0_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF0_CNT((Instance), (bEpNum));
 8009284:	1cbb      	adds	r3, r7, #2
 8009286:	881b      	ldrh	r3, [r3, #0]
 8009288:	00db      	lsls	r3, r3, #3
 800928a:	4a06      	ldr	r2, [pc, #24]	@ (80092a4 <PCD_GET_EP_DBUF0_CNT+0x40>)
 800928c:	4694      	mov	ip, r2
 800928e:	4463      	add	r3, ip
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	0c1b      	lsrs	r3, r3, #16
 8009294:	b29b      	uxth	r3, r3
 8009296:	059b      	lsls	r3, r3, #22
 8009298:	0d9b      	lsrs	r3, r3, #22
 800929a:	b29b      	uxth	r3, r3
}
 800929c:	0018      	movs	r0, r3
 800929e:	46bd      	mov	sp, r7
 80092a0:	b004      	add	sp, #16
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	40009800 	.word	0x40009800

080092a8 <PCD_GET_EP_DBUF1_CNT>:
  * @param  Instance USB peripheral instance register address.
  * @param  bEpNum channel Number.
  * @retval Counter value
  */
__STATIC_INLINE uint16_t PCD_GET_EP_DBUF1_CNT(const PCD_TypeDef *Instance, uint16_t bEpNum)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b084      	sub	sp, #16
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	000a      	movs	r2, r1
 80092b2:	1cbb      	adds	r3, r7, #2
 80092b4:	801a      	strh	r2, [r3, #0]
  UNUSED(Instance);
  __IO uint32_t count = PCD_RX_PMA_CNT;
 80092b6:	230a      	movs	r3, #10
 80092b8:	60fb      	str	r3, [r7, #12]

  /* WA: few cycles for RX PMA descriptor to update */
  while (count > 0U)
 80092ba:	e002      	b.n	80092c2 <PCD_GET_EP_DBUF1_CNT+0x1a>
  {
    count--;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3b01      	subs	r3, #1
 80092c0:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1f9      	bne.n	80092bc <PCD_GET_EP_DBUF1_CNT+0x14>
  }

  return (uint16_t)USB_DRD_GET_CHEP_DBUF1_CNT((Instance), (bEpNum));
 80092c8:	1cbb      	adds	r3, r7, #2
 80092ca:	881b      	ldrh	r3, [r3, #0]
 80092cc:	00db      	lsls	r3, r3, #3
 80092ce:	4a06      	ldr	r2, [pc, #24]	@ (80092e8 <PCD_GET_EP_DBUF1_CNT+0x40>)
 80092d0:	4694      	mov	ip, r2
 80092d2:	4463      	add	r3, ip
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	0c1b      	lsrs	r3, r3, #16
 80092d8:	b29b      	uxth	r3, r3
 80092da:	059b      	lsls	r3, r3, #22
 80092dc:	0d9b      	lsrs	r3, r3, #22
 80092de:	b29b      	uxth	r3, r3
}
 80092e0:	0018      	movs	r0, r3
 80092e2:	46bd      	mov	sp, r7
 80092e4:	b004      	add	sp, #16
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	40009800 	.word	0x40009800

080092ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092ec:	b590      	push	{r4, r7, lr}
 80092ee:	b087      	sub	sp, #28
 80092f0:	af02      	add	r7, sp, #8
 80092f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d101      	bne.n	80092fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80092fa:	2301      	movs	r3, #1
 80092fc:	e0ea      	b.n	80094d4 <HAL_PCD_Init+0x1e8>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a76      	ldr	r2, [pc, #472]	@ (80094dc <HAL_PCD_Init+0x1f0>)
 8009302:	5c9b      	ldrb	r3, [r3, r2]
 8009304:	b2db      	uxtb	r3, r3
 8009306:	2b00      	cmp	r3, #0
 8009308:	d108      	bne.n	800931c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	23a5      	movs	r3, #165	@ 0xa5
 800930e:	009b      	lsls	r3, r3, #2
 8009310:	2100      	movs	r1, #0
 8009312:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	0018      	movs	r0, r3
 8009318:	f7fe ff28 	bl	800816c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	4a6f      	ldr	r2, [pc, #444]	@ (80094dc <HAL_PCD_Init+0x1f0>)
 8009320:	2103      	movs	r1, #3
 8009322:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	0018      	movs	r0, r3
 800932a:	f004 f847 	bl	800d3bc <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800932e:	230f      	movs	r3, #15
 8009330:	18fb      	adds	r3, r7, r3
 8009332:	2200      	movs	r2, #0
 8009334:	701a      	strb	r2, [r3, #0]
 8009336:	e049      	b.n	80093cc <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009338:	200f      	movs	r0, #15
 800933a:	183b      	adds	r3, r7, r0
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	6879      	ldr	r1, [r7, #4]
 8009340:	0013      	movs	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	189b      	adds	r3, r3, r2
 8009346:	00db      	lsls	r3, r3, #3
 8009348:	18cb      	adds	r3, r1, r3
 800934a:	3315      	adds	r3, #21
 800934c:	2201      	movs	r2, #1
 800934e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009350:	183b      	adds	r3, r7, r0
 8009352:	781a      	ldrb	r2, [r3, #0]
 8009354:	6879      	ldr	r1, [r7, #4]
 8009356:	0013      	movs	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	189b      	adds	r3, r3, r2
 800935c:	00db      	lsls	r3, r3, #3
 800935e:	18cb      	adds	r3, r1, r3
 8009360:	3314      	adds	r3, #20
 8009362:	183a      	adds	r2, r7, r0
 8009364:	7812      	ldrb	r2, [r2, #0]
 8009366:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009368:	183b      	adds	r3, r7, r0
 800936a:	781a      	ldrb	r2, [r3, #0]
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	0013      	movs	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	189b      	adds	r3, r3, r2
 8009374:	00db      	lsls	r3, r3, #3
 8009376:	18cb      	adds	r3, r1, r3
 8009378:	3317      	adds	r3, #23
 800937a:	2200      	movs	r2, #0
 800937c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800937e:	183b      	adds	r3, r7, r0
 8009380:	781a      	ldrb	r2, [r3, #0]
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	0013      	movs	r3, r2
 8009386:	009b      	lsls	r3, r3, #2
 8009388:	189b      	adds	r3, r3, r2
 800938a:	00db      	lsls	r3, r3, #3
 800938c:	18cb      	adds	r3, r1, r3
 800938e:	3324      	adds	r3, #36	@ 0x24
 8009390:	2200      	movs	r2, #0
 8009392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009394:	183b      	adds	r3, r7, r0
 8009396:	781a      	ldrb	r2, [r3, #0]
 8009398:	6879      	ldr	r1, [r7, #4]
 800939a:	0013      	movs	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	189b      	adds	r3, r3, r2
 80093a0:	00db      	lsls	r3, r3, #3
 80093a2:	18cb      	adds	r3, r1, r3
 80093a4:	3328      	adds	r3, #40	@ 0x28
 80093a6:	2200      	movs	r2, #0
 80093a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80093aa:	183b      	adds	r3, r7, r0
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	0013      	movs	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	189b      	adds	r3, r3, r2
 80093b8:	00db      	lsls	r3, r3, #3
 80093ba:	18cb      	adds	r3, r1, r3
 80093bc:	3304      	adds	r3, #4
 80093be:	2200      	movs	r2, #0
 80093c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093c2:	183b      	adds	r3, r7, r0
 80093c4:	781a      	ldrb	r2, [r3, #0]
 80093c6:	183b      	adds	r3, r7, r0
 80093c8:	3201      	adds	r2, #1
 80093ca:	701a      	strb	r2, [r3, #0]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	791b      	ldrb	r3, [r3, #4]
 80093d0:	210f      	movs	r1, #15
 80093d2:	187a      	adds	r2, r7, r1
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d3ae      	bcc.n	8009338 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093da:	187b      	adds	r3, r7, r1
 80093dc:	2200      	movs	r2, #0
 80093de:	701a      	strb	r2, [r3, #0]
 80093e0:	e056      	b.n	8009490 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80093e2:	240f      	movs	r4, #15
 80093e4:	193b      	adds	r3, r7, r4
 80093e6:	781a      	ldrb	r2, [r3, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	2356      	movs	r3, #86	@ 0x56
 80093ec:	33ff      	adds	r3, #255	@ 0xff
 80093ee:	0019      	movs	r1, r3
 80093f0:	0013      	movs	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	189b      	adds	r3, r3, r2
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	18c3      	adds	r3, r0, r3
 80093fa:	185b      	adds	r3, r3, r1
 80093fc:	2200      	movs	r2, #0
 80093fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009400:	193b      	adds	r3, r7, r4
 8009402:	781a      	ldrb	r2, [r3, #0]
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	23aa      	movs	r3, #170	@ 0xaa
 8009408:	0059      	lsls	r1, r3, #1
 800940a:	0013      	movs	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	189b      	adds	r3, r3, r2
 8009410:	00db      	lsls	r3, r3, #3
 8009412:	18c3      	adds	r3, r0, r3
 8009414:	185b      	adds	r3, r3, r1
 8009416:	193a      	adds	r2, r7, r4
 8009418:	7812      	ldrb	r2, [r2, #0]
 800941a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800941c:	193b      	adds	r3, r7, r4
 800941e:	781a      	ldrb	r2, [r3, #0]
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	2358      	movs	r3, #88	@ 0x58
 8009424:	33ff      	adds	r3, #255	@ 0xff
 8009426:	0019      	movs	r1, r3
 8009428:	0013      	movs	r3, r2
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	189b      	adds	r3, r3, r2
 800942e:	00db      	lsls	r3, r3, #3
 8009430:	18c3      	adds	r3, r0, r3
 8009432:	185b      	adds	r3, r3, r1
 8009434:	2200      	movs	r2, #0
 8009436:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009438:	193b      	adds	r3, r7, r4
 800943a:	781a      	ldrb	r2, [r3, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	23b2      	movs	r3, #178	@ 0xb2
 8009440:	0059      	lsls	r1, r3, #1
 8009442:	0013      	movs	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	189b      	adds	r3, r3, r2
 8009448:	00db      	lsls	r3, r3, #3
 800944a:	18c3      	adds	r3, r0, r3
 800944c:	185b      	adds	r3, r3, r1
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009452:	193b      	adds	r3, r7, r4
 8009454:	781a      	ldrb	r2, [r3, #0]
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	23b4      	movs	r3, #180	@ 0xb4
 800945a:	0059      	lsls	r1, r3, #1
 800945c:	0013      	movs	r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	189b      	adds	r3, r3, r2
 8009462:	00db      	lsls	r3, r3, #3
 8009464:	18c3      	adds	r3, r0, r3
 8009466:	185b      	adds	r3, r3, r1
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800946c:	193b      	adds	r3, r7, r4
 800946e:	781a      	ldrb	r2, [r3, #0]
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	23b6      	movs	r3, #182	@ 0xb6
 8009474:	0059      	lsls	r1, r3, #1
 8009476:	0013      	movs	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	189b      	adds	r3, r3, r2
 800947c:	00db      	lsls	r3, r3, #3
 800947e:	18c3      	adds	r3, r0, r3
 8009480:	185b      	adds	r3, r3, r1
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009486:	193b      	adds	r3, r7, r4
 8009488:	781a      	ldrb	r2, [r3, #0]
 800948a:	193b      	adds	r3, r7, r4
 800948c:	3201      	adds	r2, #1
 800948e:	701a      	strb	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	791b      	ldrb	r3, [r3, #4]
 8009494:	220f      	movs	r2, #15
 8009496:	18ba      	adds	r2, r7, r2
 8009498:	7812      	ldrb	r2, [r2, #0]
 800949a:	429a      	cmp	r2, r3
 800949c:	d3a1      	bcc.n	80093e2 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6818      	ldr	r0, [r3, #0]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	466a      	mov	r2, sp
 80094a6:	7c19      	ldrb	r1, [r3, #16]
 80094a8:	7011      	strb	r1, [r2, #0]
 80094aa:	6859      	ldr	r1, [r3, #4]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f003 ffbd 	bl	800d42e <USB_DevInit>

  hpcd->USB_Address = 0U;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2200      	movs	r2, #0
 80094b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	4a07      	ldr	r2, [pc, #28]	@ (80094dc <HAL_PCD_Init+0x1f0>)
 80094be:	2101      	movs	r1, #1
 80094c0:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	7b1b      	ldrb	r3, [r3, #12]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d103      	bne.n	80094d2 <HAL_PCD_Init+0x1e6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	0018      	movs	r0, r3
 80094ce:	f001 fc99 	bl	800ae04 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	0018      	movs	r0, r3
 80094d6:	46bd      	mov	sp, r7
 80094d8:	b005      	add	sp, #20
 80094da:	bd90      	pop	{r4, r7, pc}
 80094dc:	00000295 	.word	0x00000295

080094e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	23a5      	movs	r3, #165	@ 0xa5
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	5cd3      	ldrb	r3, [r2, r3]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_PCD_Start+0x18>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e014      	b.n	8009522 <HAL_PCD_Start+0x42>
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	23a5      	movs	r3, #165	@ 0xa5
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	2101      	movs	r1, #1
 8009500:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	0018      	movs	r0, r3
 8009508:	f003 ff44 	bl	800d394 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	0018      	movs	r0, r3
 8009512:	f005 fdda 	bl	800f0ca <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	23a5      	movs	r3, #165	@ 0xa5
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	2100      	movs	r1, #0
 800951e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009520:	2300      	movs	r3, #0
}
 8009522:	0018      	movs	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	b002      	add	sp, #8
 8009528:	bd80      	pop	{r7, pc}

0800952a <HAL_PCD_Stop>:
  * @brief  Stop the USB device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Stop(PCD_HandleTypeDef *hpcd)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b082      	sub	sp, #8
 800952e:	af00      	add	r7, sp, #0
 8009530:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	23a5      	movs	r3, #165	@ 0xa5
 8009536:	009b      	lsls	r3, r3, #2
 8009538:	5cd3      	ldrb	r3, [r2, r3]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_PCD_Stop+0x18>
 800953e:	2302      	movs	r3, #2
 8009540:	e014      	b.n	800956c <HAL_PCD_Stop+0x42>
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	23a5      	movs	r3, #165	@ 0xa5
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	2101      	movs	r1, #1
 800954a:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_DISABLE(hpcd);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	0018      	movs	r0, r3
 8009552:	f003 ff33 	bl	800d3bc <USB_DisableGlobalInt>
  (void)USB_DevDisconnect(hpcd->Instance);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	0018      	movs	r0, r3
 800955c:	f005 fdc6 	bl	800f0ec <USB_DevDisconnect>
  __HAL_UNLOCK(hpcd);
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	23a5      	movs	r3, #165	@ 0xa5
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	2100      	movs	r1, #0
 8009568:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800956a:	2300      	movs	r3, #0
}
 800956c:	0018      	movs	r0, r3
 800956e:	46bd      	mov	sp, r7
 8009570:	b002      	add	sp, #8
 8009572:	bd80      	pop	{r7, pc}

08009574 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	0018      	movs	r0, r3
 8009582:	f005 fdc5 	bl	800f110 <USB_ReadInterrupts>
 8009586:	0003      	movs	r3, r0
 8009588:	60fb      	str	r3, [r7, #12]

  /* check if this is an USB pending IT */
  if ((SYSCFG->IT_LINE_SR[8] & (0x1U << 2)) == 0U)
 800958a:	4a7c      	ldr	r2, [pc, #496]	@ (800977c <HAL_PCD_IRQHandler+0x208>)
 800958c:	23a0      	movs	r3, #160	@ 0xa0
 800958e:	58d3      	ldr	r3, [r2, r3]
 8009590:	2204      	movs	r2, #4
 8009592:	4013      	ands	r3, r2
 8009594:	d100      	bne.n	8009598 <HAL_PCD_IRQHandler+0x24>
 8009596:	e0ed      	b.n	8009774 <HAL_PCD_IRQHandler+0x200>
  {
    return;
  }

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	2380      	movs	r3, #128	@ 0x80
 800959c:	021b      	lsls	r3, r3, #8
 800959e:	4013      	ands	r3, r2
 80095a0:	d004      	beq.n	80095ac <HAL_PCD_IRQHandler+0x38>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	0018      	movs	r0, r3
 80095a6:	f000 fbb9 	bl	8009d1c <PCD_EP_ISR_Handler>

    return;
 80095aa:	e0e4      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80095ac:	68fa      	ldr	r2, [r7, #12]
 80095ae:	2380      	movs	r3, #128	@ 0x80
 80095b0:	00db      	lsls	r3, r3, #3
 80095b2:	4013      	ands	r3, r2
 80095b4:	d011      	beq.n	80095da <HAL_PCD_IRQHandler+0x66>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	496f      	ldr	r1, [pc, #444]	@ (8009780 <HAL_PCD_IRQHandler+0x20c>)
 80095c2:	400a      	ands	r2, r1
 80095c4:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	0018      	movs	r0, r3
 80095ca:	f010 fe21 	bl	801a210 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2100      	movs	r1, #0
 80095d2:	0018      	movs	r0, r3
 80095d4:	f000 f8fc 	bl	80097d0 <HAL_PCD_SetAddress>

    return;
 80095d8:	e0cd      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	2380      	movs	r3, #128	@ 0x80
 80095de:	01db      	lsls	r3, r3, #7
 80095e0:	4013      	ands	r3, r2
 80095e2:	d008      	beq.n	80095f6 <HAL_PCD_IRQHandler+0x82>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4965      	ldr	r1, [pc, #404]	@ (8009784 <HAL_PCD_IRQHandler+0x210>)
 80095f0:	400a      	ands	r2, r1
 80095f2:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 80095f4:	e0bf      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	2380      	movs	r3, #128	@ 0x80
 80095fa:	019b      	lsls	r3, r3, #6
 80095fc:	4013      	ands	r3, r2
 80095fe:	d008      	beq.n	8009612 <HAL_PCD_IRQHandler+0x9e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	495f      	ldr	r1, [pc, #380]	@ (8009788 <HAL_PCD_IRQHandler+0x214>)
 800960c:	400a      	ands	r2, r1
 800960e:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009610:	e0b1      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	2380      	movs	r3, #128	@ 0x80
 8009616:	015b      	lsls	r3, r3, #5
 8009618:	4013      	ands	r3, r2
 800961a:	d02c      	beq.n	8009676 <HAL_PCD_IRQHandler+0x102>
  {
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPRDY);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2104      	movs	r1, #4
 8009628:	438a      	bics	r2, r1
 800962a:	641a      	str	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_SUSPEN);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2108      	movs	r1, #8
 8009638:	438a      	bics	r2, r1
 800963a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	23b3      	movs	r3, #179	@ 0xb3
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	5cd3      	ldrb	r3, [r2, r3]
 8009644:	2b01      	cmp	r3, #1
 8009646:	d109      	bne.n	800965c <HAL_PCD_IRQHandler+0xe8>
    {
      hpcd->LPM_State = LPM_L0;
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	23b3      	movs	r3, #179	@ 0xb3
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	2100      	movs	r1, #0
 8009650:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2100      	movs	r1, #0
 8009656:	0018      	movs	r0, r3
 8009658:	f001 fbf6 	bl	800ae48 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	0018      	movs	r0, r3
 8009660:	f000 f8ae 	bl	80097c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4947      	ldr	r1, [pc, #284]	@ (800978c <HAL_PCD_IRQHandler+0x218>)
 8009670:	400a      	ands	r2, r1
 8009672:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009674:	e07f      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	2380      	movs	r3, #128	@ 0x80
 800967a:	011b      	lsls	r3, r3, #4
 800967c:	4013      	ands	r3, r2
 800967e:	d01c      	beq.n	80096ba <HAL_PCD_IRQHandler+0x146>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2108      	movs	r1, #8
 800968c:	430a      	orrs	r2, r1
 800968e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	493d      	ldr	r1, [pc, #244]	@ (8009790 <HAL_PCD_IRQHandler+0x21c>)
 800969c:	400a      	ands	r2, r1
 800969e:	645a      	str	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2104      	movs	r1, #4
 80096ac:	430a      	orrs	r2, r1
 80096ae:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	0018      	movs	r0, r3
 80096b4:	f000 f87c 	bl	80097b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80096b8:	e05d      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2280      	movs	r2, #128	@ 0x80
 80096be:	4013      	ands	r3, r2
 80096c0:	d038      	beq.n	8009734 <HAL_PCD_IRQHandler+0x1c0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4931      	ldr	r1, [pc, #196]	@ (8009794 <HAL_PCD_IRQHandler+0x220>)
 80096ce:	400a      	ands	r2, r1
 80096d0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	23b3      	movs	r3, #179	@ 0xb3
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	5cd3      	ldrb	r3, [r2, r3]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d125      	bne.n	800972a <HAL_PCD_IRQHandler+0x1b6>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= USB_CNTR_SUSPRDY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	2104      	movs	r1, #4
 80096ea:	430a      	orrs	r2, r1
 80096ec:	641a      	str	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= USB_CNTR_SUSPEN;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	2108      	movs	r1, #8
 80096fa:	430a      	orrs	r2, r1
 80096fc:	641a      	str	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	23b3      	movs	r3, #179	@ 0xb3
 8009702:	009b      	lsls	r3, r3, #2
 8009704:	2101      	movs	r1, #1
 8009706:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800970e:	089b      	lsrs	r3, r3, #2
 8009710:	223c      	movs	r2, #60	@ 0x3c
 8009712:	4013      	ands	r3, r2
 8009714:	0019      	movs	r1, r3
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	23b4      	movs	r3, #180	@ 0xb4
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2101      	movs	r1, #1
 8009722:	0018      	movs	r0, r3
 8009724:	f001 fb90 	bl	800ae48 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8009728:	e025      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
      HAL_PCD_SuspendCallback(hpcd);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	0018      	movs	r0, r3
 800972e:	f000 f83f 	bl	80097b0 <HAL_PCD_SuspendCallback>
    return;
 8009732:	e020      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	2380      	movs	r3, #128	@ 0x80
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4013      	ands	r3, r2
 800973c:	d00c      	beq.n	8009758 <HAL_PCD_IRQHandler+0x1e4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4913      	ldr	r1, [pc, #76]	@ (8009798 <HAL_PCD_IRQHandler+0x224>)
 800974a:	400a      	ands	r2, r1
 800974c:	645a      	str	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	0018      	movs	r0, r3
 8009752:	f000 f825 	bl	80097a0 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009756:	e00e      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	2380      	movs	r3, #128	@ 0x80
 800975c:	005b      	lsls	r3, r3, #1
 800975e:	4013      	ands	r3, r2
 8009760:	d009      	beq.n	8009776 <HAL_PCD_IRQHandler+0x202>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	490b      	ldr	r1, [pc, #44]	@ (800979c <HAL_PCD_IRQHandler+0x228>)
 800976e:	400a      	ands	r2, r1
 8009770:	645a      	str	r2, [r3, #68]	@ 0x44

    return;
 8009772:	e000      	b.n	8009776 <HAL_PCD_IRQHandler+0x202>
    return;
 8009774:	46c0      	nop			@ (mov r8, r8)
  }
}
 8009776:	46bd      	mov	sp, r7
 8009778:	b004      	add	sp, #16
 800977a:	bd80      	pop	{r7, pc}
 800977c:	40010000 	.word	0x40010000
 8009780:	0000fbff 	.word	0x0000fbff
 8009784:	0000bfff 	.word	0x0000bfff
 8009788:	0000dfff 	.word	0x0000dfff
 800978c:	0000efff 	.word	0x0000efff
 8009790:	0000f7ff 	.word	0x0000f7ff
 8009794:	0000ff7f 	.word	0x0000ff7f
 8009798:	0000fdff 	.word	0x0000fdff
 800979c:	0000feff 	.word	0x0000feff

080097a0 <HAL_PCD_SOFCallback>:
  * @brief  USB Start Of Frame callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SOFCallback could be implemented in the user file
   */
}
 80097a8:	46c0      	nop			@ (mov r8, r8)
 80097aa:	46bd      	mov	sp, r7
 80097ac:	b002      	add	sp, #8
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_PCD_SuspendCallback>:
  * @brief  Suspend event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b082      	sub	sp, #8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_SuspendCallback could be implemented in the user file
   */
}
 80097b8:	46c0      	nop			@ (mov r8, r8)
 80097ba:	46bd      	mov	sp, r7
 80097bc:	b002      	add	sp, #8
 80097be:	bd80      	pop	{r7, pc}

080097c0 <HAL_PCD_ResumeCallback>:
  * @brief  Resume event callback.
  * @param  hpcd PCD handle
  * @retval None
  */
__weak void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  UNUSED(hpcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCD_ResumeCallback could be implemented in the user file
   */
}
 80097c8:	46c0      	nop			@ (mov r8, r8)
 80097ca:	46bd      	mov	sp, r7
 80097cc:	b002      	add	sp, #8
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	000a      	movs	r2, r1
 80097da:	1cfb      	adds	r3, r7, #3
 80097dc:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	23a5      	movs	r3, #165	@ 0xa5
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	5cd3      	ldrb	r3, [r2, r3]
 80097e6:	2b01      	cmp	r3, #1
 80097e8:	d101      	bne.n	80097ee <HAL_PCD_SetAddress+0x1e>
 80097ea:	2302      	movs	r3, #2
 80097ec:	e016      	b.n	800981c <HAL_PCD_SetAddress+0x4c>
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	23a5      	movs	r3, #165	@ 0xa5
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	2101      	movs	r1, #1
 80097f6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	1cfa      	adds	r2, r7, #3
 80097fc:	7812      	ldrb	r2, [r2, #0]
 80097fe:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	1cfb      	adds	r3, r7, #3
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	0019      	movs	r1, r3
 800980a:	0010      	movs	r0, r2
 800980c:	f005 fc4a 	bl	800f0a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	23a5      	movs	r3, #165	@ 0xa5
 8009814:	009b      	lsls	r3, r3, #2
 8009816:	2100      	movs	r1, #0
 8009818:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	0018      	movs	r0, r3
 800981e:	46bd      	mov	sp, r7
 8009820:	b002      	add	sp, #8
 8009822:	bd80      	pop	{r7, pc}

08009824 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009824:	b590      	push	{r4, r7, lr}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
 800982c:	000c      	movs	r4, r1
 800982e:	0010      	movs	r0, r2
 8009830:	0019      	movs	r1, r3
 8009832:	1cfb      	adds	r3, r7, #3
 8009834:	1c22      	adds	r2, r4, #0
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	003b      	movs	r3, r7
 800983a:	1c02      	adds	r2, r0, #0
 800983c:	801a      	strh	r2, [r3, #0]
 800983e:	1cbb      	adds	r3, r7, #2
 8009840:	1c0a      	adds	r2, r1, #0
 8009842:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009844:	230b      	movs	r3, #11
 8009846:	18fb      	adds	r3, r7, r3
 8009848:	2200      	movs	r2, #0
 800984a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800984c:	1cfb      	adds	r3, r7, #3
 800984e:	781b      	ldrb	r3, [r3, #0]
 8009850:	b25b      	sxtb	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	da10      	bge.n	8009878 <HAL_PCD_EP_Open+0x54>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009856:	1cfb      	adds	r3, r7, #3
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	2207      	movs	r2, #7
 800985c:	401a      	ands	r2, r3
 800985e:	0013      	movs	r3, r2
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	189b      	adds	r3, r3, r2
 8009864:	00db      	lsls	r3, r3, #3
 8009866:	3310      	adds	r3, #16
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	18d3      	adds	r3, r2, r3
 800986c:	3304      	adds	r3, #4
 800986e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2201      	movs	r2, #1
 8009874:	705a      	strb	r2, [r3, #1]
 8009876:	e010      	b.n	800989a <HAL_PCD_EP_Open+0x76>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009878:	1cfb      	adds	r3, r7, #3
 800987a:	781b      	ldrb	r3, [r3, #0]
 800987c:	2207      	movs	r2, #7
 800987e:	401a      	ands	r2, r3
 8009880:	0013      	movs	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	189b      	adds	r3, r3, r2
 8009886:	00db      	lsls	r3, r3, #3
 8009888:	3351      	adds	r3, #81	@ 0x51
 800988a:	33ff      	adds	r3, #255	@ 0xff
 800988c:	687a      	ldr	r2, [r7, #4]
 800988e:	18d3      	adds	r3, r2, r3
 8009890:	3304      	adds	r3, #4
 8009892:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2200      	movs	r2, #0
 8009898:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800989a:	1cfb      	adds	r3, r7, #3
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	2207      	movs	r2, #7
 80098a0:	4013      	ands	r3, r2
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80098a8:	003b      	movs	r3, r7
 80098aa:	881a      	ldrh	r2, [r3, #0]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	1cba      	adds	r2, r7, #2
 80098b4:	7812      	ldrb	r2, [r2, #0]
 80098b6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80098b8:	1cbb      	adds	r3, r7, #2
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	2b02      	cmp	r3, #2
 80098be:	d102      	bne.n	80098c6 <HAL_PCD_EP_Open+0xa2>
  {
    ep->data_pid_start = 0U;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	2200      	movs	r2, #0
 80098c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	23a5      	movs	r3, #165	@ 0xa5
 80098ca:	009b      	lsls	r3, r3, #2
 80098cc:	5cd3      	ldrb	r3, [r2, r3]
 80098ce:	2b01      	cmp	r3, #1
 80098d0:	d101      	bne.n	80098d6 <HAL_PCD_EP_Open+0xb2>
 80098d2:	2302      	movs	r3, #2
 80098d4:	e013      	b.n	80098fe <HAL_PCD_EP_Open+0xda>
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	23a5      	movs	r3, #165	@ 0xa5
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	2101      	movs	r1, #1
 80098de:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	0011      	movs	r1, r2
 80098e8:	0018      	movs	r0, r3
 80098ea:	f003 fddf 	bl	800d4ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	23a5      	movs	r3, #165	@ 0xa5
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	2100      	movs	r1, #0
 80098f6:	54d1      	strb	r1, [r2, r3]

  return ret;
 80098f8:	230b      	movs	r3, #11
 80098fa:	18fb      	adds	r3, r7, r3
 80098fc:	781b      	ldrb	r3, [r3, #0]
}
 80098fe:	0018      	movs	r0, r3
 8009900:	46bd      	mov	sp, r7
 8009902:	b005      	add	sp, #20
 8009904:	bd90      	pop	{r4, r7, pc}

08009906 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b084      	sub	sp, #16
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	000a      	movs	r2, r1
 8009910:	1cfb      	adds	r3, r7, #3
 8009912:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009914:	1cfb      	adds	r3, r7, #3
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	b25b      	sxtb	r3, r3
 800991a:	2b00      	cmp	r3, #0
 800991c:	da10      	bge.n	8009940 <HAL_PCD_EP_Close+0x3a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800991e:	1cfb      	adds	r3, r7, #3
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	2207      	movs	r2, #7
 8009924:	401a      	ands	r2, r3
 8009926:	0013      	movs	r3, r2
 8009928:	009b      	lsls	r3, r3, #2
 800992a:	189b      	adds	r3, r3, r2
 800992c:	00db      	lsls	r3, r3, #3
 800992e:	3310      	adds	r3, #16
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	18d3      	adds	r3, r2, r3
 8009934:	3304      	adds	r3, #4
 8009936:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	2201      	movs	r2, #1
 800993c:	705a      	strb	r2, [r3, #1]
 800993e:	e010      	b.n	8009962 <HAL_PCD_EP_Close+0x5c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009940:	1cfb      	adds	r3, r7, #3
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2207      	movs	r2, #7
 8009946:	401a      	ands	r2, r3
 8009948:	0013      	movs	r3, r2
 800994a:	009b      	lsls	r3, r3, #2
 800994c:	189b      	adds	r3, r3, r2
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	3351      	adds	r3, #81	@ 0x51
 8009952:	33ff      	adds	r3, #255	@ 0xff
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	18d3      	adds	r3, r2, r3
 8009958:	3304      	adds	r3, #4
 800995a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2200      	movs	r2, #0
 8009960:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009962:	1cfb      	adds	r3, r7, #3
 8009964:	781b      	ldrb	r3, [r3, #0]
 8009966:	2207      	movs	r2, #7
 8009968:	4013      	ands	r3, r2
 800996a:	b2da      	uxtb	r2, r3
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	23a5      	movs	r3, #165	@ 0xa5
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	5cd3      	ldrb	r3, [r2, r3]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d101      	bne.n	8009980 <HAL_PCD_EP_Close+0x7a>
 800997c:	2302      	movs	r3, #2
 800997e:	e011      	b.n	80099a4 <HAL_PCD_EP_Close+0x9e>
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	23a5      	movs	r3, #165	@ 0xa5
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	2101      	movs	r1, #1
 8009988:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	0011      	movs	r1, r2
 8009992:	0018      	movs	r0, r3
 8009994:	f004 f8be 	bl	800db14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	23a5      	movs	r3, #165	@ 0xa5
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	2100      	movs	r1, #0
 80099a0:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	0018      	movs	r0, r3
 80099a6:	46bd      	mov	sp, r7
 80099a8:	b004      	add	sp, #16
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b086      	sub	sp, #24
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	607a      	str	r2, [r7, #4]
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	200b      	movs	r0, #11
 80099ba:	183b      	adds	r3, r7, r0
 80099bc:	1c0a      	adds	r2, r1, #0
 80099be:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099c0:	0001      	movs	r1, r0
 80099c2:	187b      	adds	r3, r7, r1
 80099c4:	781b      	ldrb	r3, [r3, #0]
 80099c6:	2207      	movs	r2, #7
 80099c8:	401a      	ands	r2, r3
 80099ca:	0013      	movs	r3, r2
 80099cc:	009b      	lsls	r3, r3, #2
 80099ce:	189b      	adds	r3, r3, r2
 80099d0:	00db      	lsls	r3, r3, #3
 80099d2:	3351      	adds	r3, #81	@ 0x51
 80099d4:	33ff      	adds	r3, #255	@ 0xff
 80099d6:	68fa      	ldr	r2, [r7, #12]
 80099d8:	18d3      	adds	r3, r2, r3
 80099da:	3304      	adds	r3, #4
 80099dc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	683a      	ldr	r2, [r7, #0]
 80099e8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	2200      	movs	r2, #0
 80099ee:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	2200      	movs	r2, #0
 80099f4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80099f6:	187b      	adds	r3, r7, r1
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2207      	movs	r2, #7
 80099fc:	4013      	ands	r3, r2
 80099fe:	b2da      	uxtb	r2, r3
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	0011      	movs	r1, r2
 8009a0c:	0018      	movs	r0, r3
 8009a0e:	f004 f9e7 	bl	800dde0 <USB_EPStartXfer>

  return HAL_OK;
 8009a12:	2300      	movs	r3, #0
}
 8009a14:	0018      	movs	r0, r3
 8009a16:	46bd      	mov	sp, r7
 8009a18:	b006      	add	sp, #24
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	000a      	movs	r2, r1
 8009a26:	1cfb      	adds	r3, r7, #3
 8009a28:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009a2a:	1cfb      	adds	r3, r7, #3
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	2207      	movs	r2, #7
 8009a30:	401a      	ands	r2, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	23b8      	movs	r3, #184	@ 0xb8
 8009a36:	0059      	lsls	r1, r3, #1
 8009a38:	0013      	movs	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	189b      	adds	r3, r3, r2
 8009a3e:	00db      	lsls	r3, r3, #3
 8009a40:	18c3      	adds	r3, r0, r3
 8009a42:	185b      	adds	r3, r3, r1
 8009a44:	681b      	ldr	r3, [r3, #0]
}
 8009a46:	0018      	movs	r0, r3
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	b002      	add	sp, #8
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b086      	sub	sp, #24
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	60f8      	str	r0, [r7, #12]
 8009a56:	607a      	str	r2, [r7, #4]
 8009a58:	603b      	str	r3, [r7, #0]
 8009a5a:	200b      	movs	r0, #11
 8009a5c:	183b      	adds	r3, r7, r0
 8009a5e:	1c0a      	adds	r2, r1, #0
 8009a60:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a62:	183b      	adds	r3, r7, r0
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2207      	movs	r2, #7
 8009a68:	401a      	ands	r2, r3
 8009a6a:	0013      	movs	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	189b      	adds	r3, r3, r2
 8009a70:	00db      	lsls	r3, r3, #3
 8009a72:	3310      	adds	r3, #16
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	18d3      	adds	r3, r2, r3
 8009a78:	3304      	adds	r3, #4
 8009a7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	683a      	ldr	r2, [r7, #0]
 8009a86:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2224      	movs	r2, #36	@ 0x24
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8009a90:	697b      	ldr	r3, [r7, #20]
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009aa2:	183b      	adds	r3, r7, r0
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	2207      	movs	r2, #7
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	b2da      	uxtb	r2, r3
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	0011      	movs	r1, r2
 8009ab8:	0018      	movs	r0, r3
 8009aba:	f004 f991 	bl	800dde0 <USB_EPStartXfer>

  return HAL_OK;
 8009abe:	2300      	movs	r3, #0
}
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	b006      	add	sp, #24
 8009ac6:	bd80      	pop	{r7, pc}

08009ac8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b084      	sub	sp, #16
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
 8009ad0:	000a      	movs	r2, r1
 8009ad2:	1cfb      	adds	r3, r7, #3
 8009ad4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009ad6:	1cfb      	adds	r3, r7, #3
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	2207      	movs	r2, #7
 8009adc:	4013      	ands	r3, r2
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	7912      	ldrb	r2, [r2, #4]
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d901      	bls.n	8009aea <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e048      	b.n	8009b7c <HAL_PCD_EP_SetStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009aea:	1cfb      	adds	r3, r7, #3
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	b25b      	sxtb	r3, r3
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da10      	bge.n	8009b16 <HAL_PCD_EP_SetStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009af4:	1cfb      	adds	r3, r7, #3
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	2207      	movs	r2, #7
 8009afa:	401a      	ands	r2, r3
 8009afc:	0013      	movs	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	189b      	adds	r3, r3, r2
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	3310      	adds	r3, #16
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	18d3      	adds	r3, r2, r3
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2201      	movs	r2, #1
 8009b12:	705a      	strb	r2, [r3, #1]
 8009b14:	e00e      	b.n	8009b34 <HAL_PCD_EP_SetStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009b16:	1cfb      	adds	r3, r7, #3
 8009b18:	781a      	ldrb	r2, [r3, #0]
 8009b1a:	0013      	movs	r3, r2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	189b      	adds	r3, r3, r2
 8009b20:	00db      	lsls	r3, r3, #3
 8009b22:	3351      	adds	r3, #81	@ 0x51
 8009b24:	33ff      	adds	r3, #255	@ 0xff
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	18d3      	adds	r3, r2, r3
 8009b2a:	3304      	adds	r3, #4
 8009b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2201      	movs	r2, #1
 8009b38:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009b3a:	1cfb      	adds	r3, r7, #3
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	2207      	movs	r2, #7
 8009b40:	4013      	ands	r3, r2
 8009b42:	b2da      	uxtb	r2, r3
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	23a5      	movs	r3, #165	@ 0xa5
 8009b4c:	009b      	lsls	r3, r3, #2
 8009b4e:	5cd3      	ldrb	r3, [r2, r3]
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	d101      	bne.n	8009b58 <HAL_PCD_EP_SetStall+0x90>
 8009b54:	2302      	movs	r3, #2
 8009b56:	e011      	b.n	8009b7c <HAL_PCD_EP_SetStall+0xb4>
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	23a5      	movs	r3, #165	@ 0xa5
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	2101      	movs	r1, #1
 8009b60:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	0011      	movs	r1, r2
 8009b6a:	0018      	movs	r0, r3
 8009b6c:	f005 f94e 	bl	800ee0c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	23a5      	movs	r3, #165	@ 0xa5
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	2100      	movs	r1, #0
 8009b78:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
}
 8009b7c:	0018      	movs	r0, r3
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	b004      	add	sp, #16
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	000a      	movs	r2, r1
 8009b8e:	1cfb      	adds	r3, r7, #3
 8009b90:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009b92:	1cfb      	adds	r3, r7, #3
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	220f      	movs	r2, #15
 8009b98:	4013      	ands	r3, r2
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	7912      	ldrb	r2, [r2, #4]
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e04a      	b.n	8009c3c <HAL_PCD_EP_ClrStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009ba6:	1cfb      	adds	r3, r7, #3
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	b25b      	sxtb	r3, r3
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	da10      	bge.n	8009bd2 <HAL_PCD_EP_ClrStall+0x4e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009bb0:	1cfb      	adds	r3, r7, #3
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	2207      	movs	r2, #7
 8009bb6:	401a      	ands	r2, r3
 8009bb8:	0013      	movs	r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	189b      	adds	r3, r3, r2
 8009bbe:	00db      	lsls	r3, r3, #3
 8009bc0:	3310      	adds	r3, #16
 8009bc2:	687a      	ldr	r2, [r7, #4]
 8009bc4:	18d3      	adds	r3, r2, r3
 8009bc6:	3304      	adds	r3, #4
 8009bc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	705a      	strb	r2, [r3, #1]
 8009bd0:	e010      	b.n	8009bf4 <HAL_PCD_EP_ClrStall+0x70>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009bd2:	1cfb      	adds	r3, r7, #3
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	2207      	movs	r2, #7
 8009bd8:	401a      	ands	r2, r3
 8009bda:	0013      	movs	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	189b      	adds	r3, r3, r2
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	3351      	adds	r3, #81	@ 0x51
 8009be4:	33ff      	adds	r3, #255	@ 0xff
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	18d3      	adds	r3, r2, r3
 8009bea:	3304      	adds	r3, #4
 8009bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009bfa:	1cfb      	adds	r3, r7, #3
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	2207      	movs	r2, #7
 8009c00:	4013      	ands	r3, r2
 8009c02:	b2da      	uxtb	r2, r3
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c08:	687a      	ldr	r2, [r7, #4]
 8009c0a:	23a5      	movs	r3, #165	@ 0xa5
 8009c0c:	009b      	lsls	r3, r3, #2
 8009c0e:	5cd3      	ldrb	r3, [r2, r3]
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d101      	bne.n	8009c18 <HAL_PCD_EP_ClrStall+0x94>
 8009c14:	2302      	movs	r3, #2
 8009c16:	e011      	b.n	8009c3c <HAL_PCD_EP_ClrStall+0xb8>
 8009c18:	687a      	ldr	r2, [r7, #4]
 8009c1a:	23a5      	movs	r3, #165	@ 0xa5
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	2101      	movs	r1, #1
 8009c20:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	68fa      	ldr	r2, [r7, #12]
 8009c28:	0011      	movs	r1, r2
 8009c2a:	0018      	movs	r0, r3
 8009c2c:	f005 f930 	bl	800ee90 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	23a5      	movs	r3, #165	@ 0xa5
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	2100      	movs	r1, #0
 8009c38:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	0018      	movs	r0, r3
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	b004      	add	sp, #16
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c44:	b5b0      	push	{r4, r5, r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	000a      	movs	r2, r1
 8009c4e:	1cfb      	adds	r3, r7, #3
 8009c50:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009c52:	1cfb      	adds	r3, r7, #3
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	b25b      	sxtb	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da0d      	bge.n	8009c78 <HAL_PCD_EP_Abort+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c5c:	1cfb      	adds	r3, r7, #3
 8009c5e:	781b      	ldrb	r3, [r3, #0]
 8009c60:	2207      	movs	r2, #7
 8009c62:	401a      	ands	r2, r3
 8009c64:	0013      	movs	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	189b      	adds	r3, r3, r2
 8009c6a:	00db      	lsls	r3, r3, #3
 8009c6c:	3310      	adds	r3, #16
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	18d3      	adds	r3, r2, r3
 8009c72:	3304      	adds	r3, #4
 8009c74:	60fb      	str	r3, [r7, #12]
 8009c76:	e00d      	b.n	8009c94 <HAL_PCD_EP_Abort+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c78:	1cfb      	adds	r3, r7, #3
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2207      	movs	r2, #7
 8009c7e:	401a      	ands	r2, r3
 8009c80:	0013      	movs	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	189b      	adds	r3, r3, r2
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	3351      	adds	r3, #81	@ 0x51
 8009c8a:	33ff      	adds	r3, #255	@ 0xff
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	18d3      	adds	r3, r2, r3
 8009c90:	3304      	adds	r3, #4
 8009c92:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	250b      	movs	r5, #11
 8009c9a:	197c      	adds	r4, r7, r5
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	0011      	movs	r1, r2
 8009ca0:	0018      	movs	r0, r3
 8009ca2:	f005 f987 	bl	800efb4 <USB_EPStopXfer>
 8009ca6:	0003      	movs	r3, r0
 8009ca8:	7023      	strb	r3, [r4, #0]

  return ret;
 8009caa:	197b      	adds	r3, r7, r5
 8009cac:	781b      	ldrb	r3, [r3, #0]
}
 8009cae:	0018      	movs	r0, r3
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	b004      	add	sp, #16
 8009cb4:	bdb0      	pop	{r4, r5, r7, pc}

08009cb6 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	000a      	movs	r2, r1
 8009cc0:	1cfb      	adds	r3, r7, #3
 8009cc2:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8009cc4:	687a      	ldr	r2, [r7, #4]
 8009cc6:	23a5      	movs	r3, #165	@ 0xa5
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	5cd3      	ldrb	r3, [r2, r3]
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d101      	bne.n	8009cd4 <HAL_PCD_EP_Flush+0x1e>
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	e01f      	b.n	8009d14 <HAL_PCD_EP_Flush+0x5e>
 8009cd4:	687a      	ldr	r2, [r7, #4]
 8009cd6:	23a5      	movs	r3, #165	@ 0xa5
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	2101      	movs	r1, #1
 8009cdc:	54d1      	strb	r1, [r2, r3]

  if ((ep_addr & 0x80U) == 0x80U)
 8009cde:	1cfb      	adds	r3, r7, #3
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	b25b      	sxtb	r3, r3
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	da0a      	bge.n	8009cfe <HAL_PCD_EP_Flush+0x48>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	1cfb      	adds	r3, r7, #3
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	2107      	movs	r1, #7
 8009cf2:	400b      	ands	r3, r1
 8009cf4:	0019      	movs	r1, r3
 8009cf6:	0010      	movs	r0, r2
 8009cf8:	f003 fbc4 	bl	800d484 <USB_FlushTxFifo>
 8009cfc:	e004      	b.n	8009d08 <HAL_PCD_EP_Flush+0x52>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	0018      	movs	r0, r3
 8009d04:	f003 fbc8 	bl	800d498 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	23a5      	movs	r3, #165	@ 0xa5
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	2100      	movs	r1, #0
 8009d10:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	0018      	movs	r0, r3
 8009d16:	46bd      	mov	sp, r7
 8009d18:	b002      	add	sp, #8
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009d1c:	b5b0      	push	{r4, r5, r7, lr}
 8009d1e:	b08e      	sub	sp, #56	@ 0x38
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009d24:	e355      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
  {
    wIstr = (uint16_t)hpcd->Instance->ISTR;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d2c:	2022      	movs	r0, #34	@ 0x22
 8009d2e:	183b      	adds	r3, r7, r0
 8009d30:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_IDN);
 8009d32:	183b      	adds	r3, r7, r0
 8009d34:	881b      	ldrh	r3, [r3, #0]
 8009d36:	b2da      	uxtb	r2, r3
 8009d38:	2421      	movs	r4, #33	@ 0x21
 8009d3a:	193b      	adds	r3, r7, r4
 8009d3c:	210f      	movs	r1, #15
 8009d3e:	400a      	ands	r2, r1
 8009d40:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8009d42:	193b      	adds	r3, r7, r4
 8009d44:	781b      	ldrb	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d000      	beq.n	8009d4c <PCD_EP_ISR_Handler+0x30>
 8009d4a:	e12b      	b.n	8009fa4 <PCD_EP_ISR_Handler+0x288>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009d4c:	183b      	adds	r3, r7, r0
 8009d4e:	881b      	ldrh	r3, [r3, #0]
 8009d50:	2210      	movs	r2, #16
 8009d52:	4013      	ands	r3, r2
 8009d54:	d140      	bne.n	8009dd8 <PCD_EP_ISR_Handler+0xbc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4ac5      	ldr	r2, [pc, #788]	@ (800a074 <PCD_EP_ISR_Handler+0x358>)
 8009d5e:	4013      	ands	r3, r2
 8009d60:	60bb      	str	r3, [r7, #8]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	2180      	movs	r1, #128	@ 0x80
 8009d6a:	0209      	lsls	r1, r1, #8
 8009d6c:	430a      	orrs	r2, r1
 8009d6e:	601a      	str	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	3314      	adds	r3, #20
 8009d74:	637b      	str	r3, [r7, #52]	@ 0x34

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	00db      	lsls	r3, r3, #3
 8009d7c:	4abe      	ldr	r2, [pc, #760]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009d7e:	4694      	mov	ip, r2
 8009d80:	4463      	add	r3, ip
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	0c1b      	lsrs	r3, r3, #16
 8009d86:	059b      	lsls	r3, r3, #22
 8009d88:	0d9a      	lsrs	r2, r3, #22
 8009d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d8c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8009d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d90:	695a      	ldr	r2, [r3, #20]
 8009d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d94:	69db      	ldr	r3, [r3, #28]
 8009d96:	18d2      	adds	r2, r2, r3
 8009d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d9a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2100      	movs	r1, #0
 8009da0:	0018      	movs	r0, r3
 8009da2:	f010 f915 	bl	8019fd0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7c5b      	ldrb	r3, [r3, #17]
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d100      	bne.n	8009db2 <PCD_EP_ISR_Handler+0x96>
 8009db0:	e30f      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
 8009db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d000      	beq.n	8009dbc <PCD_EP_ISR_Handler+0xa0>
 8009dba:	e30a      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	7c5b      	ldrb	r3, [r3, #17]
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2280      	movs	r2, #128	@ 0x80
 8009dc4:	4252      	negs	r2, r2
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	b2da      	uxtb	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	64da      	str	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	745a      	strb	r2, [r3, #17]
 8009dd6:	e2fc      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	3355      	adds	r3, #85	@ 0x55
 8009ddc:	33ff      	adds	r3, #255	@ 0xff
 8009dde:	637b      	str	r3, [r7, #52]	@ 0x34
        wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	2132      	movs	r1, #50	@ 0x32
 8009de8:	187b      	adds	r3, r7, r1
 8009dea:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009dec:	187b      	adds	r3, r7, r1
 8009dee:	881a      	ldrh	r2, [r3, #0]
 8009df0:	2380      	movs	r3, #128	@ 0x80
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	4013      	ands	r3, r2
 8009df6:	d029      	beq.n	8009e4c <PCD_EP_ISR_Handler+0x130>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	0019      	movs	r1, r3
 8009e02:	0010      	movs	r0, r2
 8009e04:	f7ff fa0c 	bl	8009220 <PCD_GET_EP_RX_CNT>
 8009e08:	0003      	movs	r3, r0
 8009e0a:	001a      	movs	r2, r3
 8009e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6818      	ldr	r0, [r3, #0]
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	22a7      	movs	r2, #167	@ 0xa7
 8009e18:	0092      	lsls	r2, r2, #2
 8009e1a:	1899      	adds	r1, r3, r2
 8009e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e1e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8009e20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e22:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	f005 f9f5 	bl	800f214 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	4a92      	ldr	r2, [pc, #584]	@ (800a07c <PCD_EP_ISR_Handler+0x360>)
 8009e32:	4013      	ands	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	2180      	movs	r1, #128	@ 0x80
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	601a      	str	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	0018      	movs	r0, r3
 8009e46:	f010 f83f 	bl	8019ec8 <HAL_PCD_SetupStageCallback>
 8009e4a:	e2c2      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_VTRX) != 0U)
 8009e4c:	2332      	movs	r3, #50	@ 0x32
 8009e4e:	18fb      	adds	r3, r7, r3
 8009e50:	2200      	movs	r2, #0
 8009e52:	5e9b      	ldrsh	r3, [r3, r2]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	db00      	blt.n	8009e5a <PCD_EP_ISR_Handler+0x13e>
 8009e58:	e2bb      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a86      	ldr	r2, [pc, #536]	@ (800a07c <PCD_EP_ISR_Handler+0x360>)
 8009e62:	4013      	ands	r3, r2
 8009e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009e6c:	2180      	movs	r1, #128	@ 0x80
 8009e6e:	430a      	orrs	r2, r1
 8009e70:	601a      	str	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e78:	781b      	ldrb	r3, [r3, #0]
 8009e7a:	0019      	movs	r1, r3
 8009e7c:	0010      	movs	r0, r2
 8009e7e:	f7ff f9cf 	bl	8009220 <PCD_GET_EP_RX_CNT>
 8009e82:	0003      	movs	r3, r0
 8009e84:	001a      	movs	r2, r3
 8009e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e88:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8009e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e8c:	69db      	ldr	r3, [r3, #28]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d01a      	beq.n	8009ec8 <PCD_EP_ISR_Handler+0x1ac>
 8009e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d016      	beq.n	8009ec8 <PCD_EP_ISR_Handler+0x1ac>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6818      	ldr	r0, [r3, #0]
 8009e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea0:	6959      	ldr	r1, [r3, #20]
 8009ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8009ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	f005 f9b2 	bl	800f214 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb2:	695a      	ldr	r2, [r3, #20]
 8009eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	18d2      	adds	r2, r2, r3
 8009eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ebc:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2100      	movs	r1, #0
 8009ec2:	0018      	movs	r0, r3
 8009ec4:	f010 f91a 	bl	801a0fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	2132      	movs	r1, #50	@ 0x32
 8009ed0:	187b      	adds	r3, r7, r1
 8009ed2:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009ed4:	187b      	adds	r3, r7, r1
 8009ed6:	881a      	ldrh	r2, [r3, #0]
 8009ed8:	2380      	movs	r3, #128	@ 0x80
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	4013      	ands	r3, r2
 8009ede:	d000      	beq.n	8009ee2 <PCD_EP_ISR_Handler+0x1c6>
 8009ee0:	e277      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
 8009ee2:	187b      	adds	r3, r7, r1
 8009ee4:	881a      	ldrh	r2, [r3, #0]
 8009ee6:	23c0      	movs	r3, #192	@ 0xc0
 8009ee8:	019b      	lsls	r3, r3, #6
 8009eea:	401a      	ands	r2, r3
 8009eec:	23c0      	movs	r3, #192	@ 0xc0
 8009eee:	019b      	lsls	r3, r3, #6
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d100      	bne.n	8009ef6 <PCD_EP_ISR_Handler+0x1da>
 8009ef4:	e26d      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8009ef6:	4b60      	ldr	r3, [pc, #384]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	4b5f      	ldr	r3, [pc, #380]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009efc:	0192      	lsls	r2, r2, #6
 8009efe:	0992      	lsrs	r2, r2, #6
 8009f00:	605a      	str	r2, [r3, #4]
 8009f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	2b3e      	cmp	r3, #62	@ 0x3e
 8009f08:	d916      	bls.n	8009f38 <PCD_EP_ISR_Handler+0x21c>
 8009f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f0c:	691b      	ldr	r3, [r3, #16]
 8009f0e:	095b      	lsrs	r3, r3, #5
 8009f10:	617b      	str	r3, [r7, #20]
 8009f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f14:	691b      	ldr	r3, [r3, #16]
 8009f16:	221f      	movs	r2, #31
 8009f18:	4013      	ands	r3, r2
 8009f1a:	d102      	bne.n	8009f22 <PCD_EP_ISR_Handler+0x206>
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	3b01      	subs	r3, #1
 8009f20:	617b      	str	r3, [r7, #20]
 8009f22:	4b55      	ldr	r3, [pc, #340]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009f24:	685a      	ldr	r2, [r3, #4]
 8009f26:	697b      	ldr	r3, [r7, #20]
 8009f28:	069b      	lsls	r3, r3, #26
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	4b52      	ldr	r3, [pc, #328]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009f2e:	2180      	movs	r1, #128	@ 0x80
 8009f30:	0609      	lsls	r1, r1, #24
 8009f32:	430a      	orrs	r2, r1
 8009f34:	605a      	str	r2, [r3, #4]
 8009f36:	e01e      	b.n	8009f76 <PCD_EP_ISR_Handler+0x25a>
 8009f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d107      	bne.n	8009f50 <PCD_EP_ISR_Handler+0x234>
 8009f40:	4b4d      	ldr	r3, [pc, #308]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009f42:	685a      	ldr	r2, [r3, #4]
 8009f44:	4b4c      	ldr	r3, [pc, #304]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009f46:	2180      	movs	r1, #128	@ 0x80
 8009f48:	0609      	lsls	r1, r1, #24
 8009f4a:	430a      	orrs	r2, r1
 8009f4c:	605a      	str	r2, [r3, #4]
 8009f4e:	e012      	b.n	8009f76 <PCD_EP_ISR_Handler+0x25a>
 8009f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	085b      	lsrs	r3, r3, #1
 8009f56:	617b      	str	r3, [r7, #20]
 8009f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5a:	691b      	ldr	r3, [r3, #16]
 8009f5c:	2201      	movs	r2, #1
 8009f5e:	4013      	ands	r3, r2
 8009f60:	d002      	beq.n	8009f68 <PCD_EP_ISR_Handler+0x24c>
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	3301      	adds	r3, #1
 8009f66:	617b      	str	r3, [r7, #20]
 8009f68:	4b43      	ldr	r3, [pc, #268]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009f6a:	6859      	ldr	r1, [r3, #4]
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	069a      	lsls	r2, r3, #26
 8009f70:	4b41      	ldr	r3, [pc, #260]	@ (800a078 <PCD_EP_ISR_Handler+0x35c>)
 8009f72:	430a      	orrs	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	4a40      	ldr	r2, [pc, #256]	@ (800a080 <PCD_EP_ISR_Handler+0x364>)
 8009f7e:	4013      	ands	r3, r2
 8009f80:	613b      	str	r3, [r7, #16]
 8009f82:	693b      	ldr	r3, [r7, #16]
 8009f84:	2280      	movs	r2, #128	@ 0x80
 8009f86:	0152      	lsls	r2, r2, #5
 8009f88:	4053      	eors	r3, r2
 8009f8a:	613b      	str	r3, [r7, #16]
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	2280      	movs	r2, #128	@ 0x80
 8009f90:	0192      	lsls	r2, r2, #6
 8009f92:	4053      	eors	r3, r2
 8009f94:	613b      	str	r3, [r7, #16]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	693a      	ldr	r2, [r7, #16]
 8009f9c:	4939      	ldr	r1, [pc, #228]	@ (800a084 <PCD_EP_ISR_Handler+0x368>)
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	e216      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	001a      	movs	r2, r3
 8009faa:	2121      	movs	r1, #33	@ 0x21
 8009fac:	187b      	adds	r3, r7, r1
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	18d3      	adds	r3, r2, r3
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	2032      	movs	r0, #50	@ 0x32
 8009fb8:	183b      	adds	r3, r7, r0
 8009fba:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_VTRX) != 0U)
 8009fbc:	183b      	adds	r3, r7, r0
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	5e9b      	ldrsh	r3, [r3, r2]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	db00      	blt.n	8009fc8 <PCD_EP_ISR_Handler+0x2ac>
 8009fc6:	e0e0      	b.n	800a18a <PCD_EP_ISR_Handler+0x46e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	001a      	movs	r2, r3
 8009fce:	187b      	adds	r3, r7, r1
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	18d3      	adds	r3, r2, r3
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	4a28      	ldr	r2, [pc, #160]	@ (800a07c <PCD_EP_ISR_Handler+0x360>)
 8009fda:	4013      	ands	r3, r2
 8009fdc:	61fb      	str	r3, [r7, #28]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	001a      	movs	r2, r3
 8009fe4:	0008      	movs	r0, r1
 8009fe6:	187b      	adds	r3, r7, r1
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	18d3      	adds	r3, r2, r3
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	2180      	movs	r1, #128	@ 0x80
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	601a      	str	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009ff6:	183b      	adds	r3, r7, r0
 8009ff8:	781a      	ldrb	r2, [r3, #0]
 8009ffa:	0013      	movs	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	189b      	adds	r3, r3, r2
 800a000:	00db      	lsls	r3, r3, #3
 800a002:	3351      	adds	r3, #81	@ 0x51
 800a004:	33ff      	adds	r3, #255	@ 0xff
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	18d3      	adds	r3, r2, r3
 800a00a:	3304      	adds	r3, #4
 800a00c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a00e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a010:	7b1b      	ldrb	r3, [r3, #12]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d11c      	bne.n	800a050 <PCD_EP_ISR_Handler+0x334>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2524      	movs	r5, #36	@ 0x24
 800a020:	197c      	adds	r4, r7, r5
 800a022:	0019      	movs	r1, r3
 800a024:	0010      	movs	r0, r2
 800a026:	f7ff f8fb 	bl	8009220 <PCD_GET_EP_RX_CNT>
 800a02a:	0003      	movs	r3, r0
 800a02c:	8023      	strh	r3, [r4, #0]

          if (count != 0U)
 800a02e:	002c      	movs	r4, r5
 800a030:	193b      	adds	r3, r7, r4
 800a032:	881b      	ldrh	r3, [r3, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d100      	bne.n	800a03a <PCD_EP_ISR_Handler+0x31e>
 800a038:	e07f      	b.n	800a13a <PCD_EP_ISR_Handler+0x41e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	6818      	ldr	r0, [r3, #0]
 800a03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a040:	6959      	ldr	r1, [r3, #20]
 800a042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a044:	88da      	ldrh	r2, [r3, #6]
 800a046:	193b      	adds	r3, r7, r4
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	f005 f8e3 	bl	800f214 <USB_ReadPMA>
 800a04e:	e074      	b.n	800a13a <PCD_EP_ISR_Handler+0x41e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a052:	78db      	ldrb	r3, [r3, #3]
 800a054:	2b02      	cmp	r3, #2
 800a056:	d117      	bne.n	800a088 <PCD_EP_ISR_Handler+0x36c>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a058:	2324      	movs	r3, #36	@ 0x24
 800a05a:	18fc      	adds	r4, r7, r3
 800a05c:	2332      	movs	r3, #50	@ 0x32
 800a05e:	18fb      	adds	r3, r7, r3
 800a060:	881a      	ldrh	r2, [r3, #0]
 800a062:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	0018      	movs	r0, r3
 800a068:	f000 f9c8 	bl	800a3fc <HAL_PCD_EP_DB_Receive>
 800a06c:	0003      	movs	r3, r0
 800a06e:	8023      	strh	r3, [r4, #0]
 800a070:	e063      	b.n	800a13a <PCD_EP_ISR_Handler+0x41e>
 800a072:	46c0      	nop			@ (mov r8, r8)
 800a074:	07ff8f0f 	.word	0x07ff8f0f
 800a078:	40009800 	.word	0x40009800
 800a07c:	07ff0f8f 	.word	0x07ff0f8f
 800a080:	07ffbf8f 	.word	0x07ffbf8f
 800a084:	00008080 	.word	0x00008080
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	001a      	movs	r2, r3
 800a08e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	18d3      	adds	r3, r2, r3
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4ad4      	ldr	r2, [pc, #848]	@ (800a3ec <PCD_EP_ISR_Handler+0x6d0>)
 800a09a:	4013      	ands	r3, r2
 800a09c:	61bb      	str	r3, [r7, #24]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	001a      	movs	r2, r3
 800a0a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0a6:	781b      	ldrb	r3, [r3, #0]
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	18d3      	adds	r3, r2, r3
 800a0ac:	69ba      	ldr	r2, [r7, #24]
 800a0ae:	49d0      	ldr	r1, [pc, #832]	@ (800a3f0 <PCD_EP_ISR_Handler+0x6d4>)
 800a0b0:	430a      	orrs	r2, r1
 800a0b2:	601a      	str	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	001a      	movs	r2, r3
 800a0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	009b      	lsls	r3, r3, #2
 800a0c0:	18d3      	adds	r3, r2, r3
 800a0c2:	681a      	ldr	r2, [r3, #0]
 800a0c4:	2380      	movs	r3, #128	@ 0x80
 800a0c6:	01db      	lsls	r3, r3, #7
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	d01b      	beq.n	800a104 <PCD_EP_ISR_Handler+0x3e8>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681a      	ldr	r2, [r3, #0]
 800a0d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	2524      	movs	r5, #36	@ 0x24
 800a0d6:	197c      	adds	r4, r7, r5
 800a0d8:	0019      	movs	r1, r3
 800a0da:	0010      	movs	r0, r2
 800a0dc:	f7ff f8c2 	bl	8009264 <PCD_GET_EP_DBUF0_CNT>
 800a0e0:	0003      	movs	r3, r0
 800a0e2:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800a0e4:	002c      	movs	r4, r5
 800a0e6:	193b      	adds	r3, r7, r4
 800a0e8:	881b      	ldrh	r3, [r3, #0]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d025      	beq.n	800a13a <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6818      	ldr	r0, [r3, #0]
 800a0f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f4:	6959      	ldr	r1, [r3, #20]
 800a0f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0f8:	891a      	ldrh	r2, [r3, #8]
 800a0fa:	193b      	adds	r3, r7, r4
 800a0fc:	881b      	ldrh	r3, [r3, #0]
 800a0fe:	f005 f889 	bl	800f214 <USB_ReadPMA>
 800a102:	e01a      	b.n	800a13a <PCD_EP_ISR_Handler+0x41e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	2524      	movs	r5, #36	@ 0x24
 800a10e:	197c      	adds	r4, r7, r5
 800a110:	0019      	movs	r1, r3
 800a112:	0010      	movs	r0, r2
 800a114:	f7ff f8c8 	bl	80092a8 <PCD_GET_EP_DBUF1_CNT>
 800a118:	0003      	movs	r3, r0
 800a11a:	8023      	strh	r3, [r4, #0]

              if (count != 0U)
 800a11c:	002c      	movs	r4, r5
 800a11e:	193b      	adds	r3, r7, r4
 800a120:	881b      	ldrh	r3, [r3, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d009      	beq.n	800a13a <PCD_EP_ISR_Handler+0x41e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6818      	ldr	r0, [r3, #0]
 800a12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a12c:	6959      	ldr	r1, [r3, #20]
 800a12e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a130:	895a      	ldrh	r2, [r3, #10]
 800a132:	193b      	adds	r3, r7, r4
 800a134:	881b      	ldrh	r3, [r3, #0]
 800a136:	f005 f86d 	bl	800f214 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a13a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a13c:	69da      	ldr	r2, [r3, #28]
 800a13e:	2124      	movs	r1, #36	@ 0x24
 800a140:	187b      	adds	r3, r7, r1
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	18d2      	adds	r2, r2, r3
 800a146:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a148:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a14a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a14c:	695a      	ldr	r2, [r3, #20]
 800a14e:	187b      	adds	r3, r7, r1
 800a150:	881b      	ldrh	r3, [r3, #0]
 800a152:	18d2      	adds	r2, r2, r3
 800a154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a156:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a158:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a15a:	699b      	ldr	r3, [r3, #24]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d005      	beq.n	800a16c <PCD_EP_ISR_Handler+0x450>
 800a160:	187b      	adds	r3, r7, r1
 800a162:	881a      	ldrh	r2, [r3, #0]
 800a164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	429a      	cmp	r2, r3
 800a16a:	d207      	bcs.n	800a17c <PCD_EP_ISR_Handler+0x460>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a16e:	781a      	ldrb	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	0011      	movs	r1, r2
 800a174:	0018      	movs	r0, r3
 800a176:	f00f ffc1 	bl	801a0fc <HAL_PCD_DataOutStageCallback>
 800a17a:	e006      	b.n	800a18a <PCD_EP_ISR_Handler+0x46e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a182:	0011      	movs	r1, r2
 800a184:	0018      	movs	r0, r3
 800a186:	f003 fe2b 	bl	800dde0 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_VTTX) != 0U)
 800a18a:	2032      	movs	r0, #50	@ 0x32
 800a18c:	183b      	adds	r3, r7, r0
 800a18e:	881b      	ldrh	r3, [r3, #0]
 800a190:	2280      	movs	r2, #128	@ 0x80
 800a192:	4013      	ands	r3, r2
 800a194:	d100      	bne.n	800a198 <PCD_EP_ISR_Handler+0x47c>
 800a196:	e11c      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
      {
        ep = &hpcd->IN_ep[epindex];
 800a198:	2121      	movs	r1, #33	@ 0x21
 800a19a:	187b      	adds	r3, r7, r1
 800a19c:	781a      	ldrb	r2, [r3, #0]
 800a19e:	0013      	movs	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	189b      	adds	r3, r3, r2
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	3310      	adds	r3, #16
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	18d3      	adds	r3, r2, r3
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	637b      	str	r3, [r7, #52]	@ 0x34

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	001a      	movs	r2, r3
 800a1b6:	187b      	adds	r3, r7, r1
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	18d3      	adds	r3, r2, r3
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	4a8c      	ldr	r2, [pc, #560]	@ (800a3f4 <PCD_EP_ISR_Handler+0x6d8>)
 800a1c2:	4013      	ands	r3, r2
 800a1c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	001a      	movs	r2, r3
 800a1cc:	187b      	adds	r3, r7, r1
 800a1ce:	781b      	ldrb	r3, [r3, #0]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	18d3      	adds	r3, r2, r3
 800a1d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a1d6:	2180      	movs	r1, #128	@ 0x80
 800a1d8:	0209      	lsls	r1, r1, #8
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	601a      	str	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a1de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e0:	78db      	ldrb	r3, [r3, #3]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d000      	beq.n	800a1e8 <PCD_EP_ISR_Handler+0x4cc>
 800a1e6:	e0a3      	b.n	800a330 <PCD_EP_ISR_Handler+0x614>
        {
          ep->xfer_len = 0U;
 800a1e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a1ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f0:	7b1b      	ldrb	r3, [r3, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d100      	bne.n	800a1f8 <PCD_EP_ISR_Handler+0x4dc>
 800a1f6:	e093      	b.n	800a320 <PCD_EP_ISR_Handler+0x604>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a1f8:	183b      	adds	r3, r7, r0
 800a1fa:	881b      	ldrh	r3, [r3, #0]
 800a1fc:	2240      	movs	r2, #64	@ 0x40
 800a1fe:	4013      	ands	r3, r2
 800a200:	d047      	beq.n	800a292 <PCD_EP_ISR_Handler+0x576>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a204:	785b      	ldrb	r3, [r3, #1]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d121      	bne.n	800a24e <PCD_EP_ISR_Handler+0x532>
 800a20a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	00db      	lsls	r3, r3, #3
 800a210:	4a79      	ldr	r2, [pc, #484]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a212:	4694      	mov	ip, r2
 800a214:	4463      	add	r3, ip
 800a216:	681a      	ldr	r2, [r3, #0]
 800a218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	00db      	lsls	r3, r3, #3
 800a21e:	4976      	ldr	r1, [pc, #472]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a220:	468c      	mov	ip, r1
 800a222:	4463      	add	r3, ip
 800a224:	0192      	lsls	r2, r2, #6
 800a226:	0992      	lsrs	r2, r2, #6
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	00db      	lsls	r3, r3, #3
 800a230:	4a71      	ldr	r2, [pc, #452]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a232:	4694      	mov	ip, r2
 800a234:	4463      	add	r3, ip
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	00db      	lsls	r3, r3, #3
 800a23e:	496e      	ldr	r1, [pc, #440]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a240:	468c      	mov	ip, r1
 800a242:	4463      	add	r3, ip
 800a244:	2180      	movs	r1, #128	@ 0x80
 800a246:	0609      	lsls	r1, r1, #24
 800a248:	430a      	orrs	r2, r1
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	e068      	b.n	800a320 <PCD_EP_ISR_Handler+0x604>
 800a24e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a250:	785b      	ldrb	r3, [r3, #1]
 800a252:	2b01      	cmp	r3, #1
 800a254:	d164      	bne.n	800a320 <PCD_EP_ISR_Handler+0x604>
 800a256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	4a66      	ldr	r2, [pc, #408]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a25e:	4694      	mov	ip, r2
 800a260:	4463      	add	r3, ip
 800a262:	681a      	ldr	r2, [r3, #0]
 800a264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	00db      	lsls	r3, r3, #3
 800a26a:	4963      	ldr	r1, [pc, #396]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a26c:	468c      	mov	ip, r1
 800a26e:	4463      	add	r3, ip
 800a270:	0412      	lsls	r2, r2, #16
 800a272:	0c12      	lsrs	r2, r2, #16
 800a274:	601a      	str	r2, [r3, #0]
 800a276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	00db      	lsls	r3, r3, #3
 800a27c:	4a5e      	ldr	r2, [pc, #376]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a27e:	189a      	adds	r2, r3, r2
 800a280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a282:	781b      	ldrb	r3, [r3, #0]
 800a284:	00db      	lsls	r3, r3, #3
 800a286:	495c      	ldr	r1, [pc, #368]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a288:	468c      	mov	ip, r1
 800a28a:	4463      	add	r3, ip
 800a28c:	6812      	ldr	r2, [r2, #0]
 800a28e:	601a      	str	r2, [r3, #0]
 800a290:	e046      	b.n	800a320 <PCD_EP_ISR_Handler+0x604>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a294:	785b      	ldrb	r3, [r3, #1]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d121      	bne.n	800a2de <PCD_EP_ISR_Handler+0x5c2>
 800a29a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	4a55      	ldr	r2, [pc, #340]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a2a2:	4694      	mov	ip, r2
 800a2a4:	4463      	add	r3, ip
 800a2a6:	685a      	ldr	r2, [r3, #4]
 800a2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	00db      	lsls	r3, r3, #3
 800a2ae:	4952      	ldr	r1, [pc, #328]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a2b0:	468c      	mov	ip, r1
 800a2b2:	4463      	add	r3, ip
 800a2b4:	0192      	lsls	r2, r2, #6
 800a2b6:	0992      	lsrs	r2, r2, #6
 800a2b8:	605a      	str	r2, [r3, #4]
 800a2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	00db      	lsls	r3, r3, #3
 800a2c0:	4a4d      	ldr	r2, [pc, #308]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a2c2:	4694      	mov	ip, r2
 800a2c4:	4463      	add	r3, ip
 800a2c6:	685a      	ldr	r2, [r3, #4]
 800a2c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	00db      	lsls	r3, r3, #3
 800a2ce:	494a      	ldr	r1, [pc, #296]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a2d0:	468c      	mov	ip, r1
 800a2d2:	4463      	add	r3, ip
 800a2d4:	2180      	movs	r1, #128	@ 0x80
 800a2d6:	0609      	lsls	r1, r1, #24
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	605a      	str	r2, [r3, #4]
 800a2dc:	e020      	b.n	800a320 <PCD_EP_ISR_Handler+0x604>
 800a2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d11c      	bne.n	800a320 <PCD_EP_ISR_Handler+0x604>
 800a2e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	00db      	lsls	r3, r3, #3
 800a2ec:	4a42      	ldr	r2, [pc, #264]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a2ee:	4694      	mov	ip, r2
 800a2f0:	4463      	add	r3, ip
 800a2f2:	685a      	ldr	r2, [r3, #4]
 800a2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	00db      	lsls	r3, r3, #3
 800a2fa:	493f      	ldr	r1, [pc, #252]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a2fc:	468c      	mov	ip, r1
 800a2fe:	4463      	add	r3, ip
 800a300:	0412      	lsls	r2, r2, #16
 800a302:	0c12      	lsrs	r2, r2, #16
 800a304:	605a      	str	r2, [r3, #4]
 800a306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	00db      	lsls	r3, r3, #3
 800a30c:	4a3a      	ldr	r2, [pc, #232]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a30e:	189a      	adds	r2, r3, r2
 800a310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a312:	781b      	ldrb	r3, [r3, #0]
 800a314:	00db      	lsls	r3, r3, #3
 800a316:	4938      	ldr	r1, [pc, #224]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a318:	468c      	mov	ip, r1
 800a31a:	4463      	add	r3, ip
 800a31c:	6852      	ldr	r2, [r2, #4]
 800a31e:	605a      	str	r2, [r3, #4]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a320:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a322:	781a      	ldrb	r2, [r3, #0]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	0011      	movs	r1, r2
 800a328:	0018      	movs	r0, r3
 800a32a:	f00f fe51 	bl	8019fd0 <HAL_PCD_DataInStageCallback>
 800a32e:	e050      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800a330:	2332      	movs	r3, #50	@ 0x32
 800a332:	18fb      	adds	r3, r7, r3
 800a334:	881a      	ldrh	r2, [r3, #0]
 800a336:	2380      	movs	r3, #128	@ 0x80
 800a338:	005b      	lsls	r3, r3, #1
 800a33a:	4013      	ands	r3, r2
 800a33c:	d141      	bne.n	800a3c2 <PCD_EP_ISR_Handler+0x6a6>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a33e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a340:	781b      	ldrb	r3, [r3, #0]
 800a342:	00db      	lsls	r3, r3, #3
 800a344:	4a2c      	ldr	r2, [pc, #176]	@ (800a3f8 <PCD_EP_ISR_Handler+0x6dc>)
 800a346:	4694      	mov	ip, r2
 800a348:	4463      	add	r3, ip
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	0c1b      	lsrs	r3, r3, #16
 800a34e:	b29a      	uxth	r2, r3
 800a350:	2126      	movs	r1, #38	@ 0x26
 800a352:	187b      	adds	r3, r7, r1
 800a354:	0592      	lsls	r2, r2, #22
 800a356:	0d92      	lsrs	r2, r2, #22
 800a358:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800a35a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35c:	699a      	ldr	r2, [r3, #24]
 800a35e:	187b      	adds	r3, r7, r1
 800a360:	881b      	ldrh	r3, [r3, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d907      	bls.n	800a376 <PCD_EP_ISR_Handler+0x65a>
            {
              ep->xfer_len -= TxPctSize;
 800a366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a368:	699a      	ldr	r2, [r3, #24]
 800a36a:	187b      	adds	r3, r7, r1
 800a36c:	881b      	ldrh	r3, [r3, #0]
 800a36e:	1ad2      	subs	r2, r2, r3
 800a370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a372:	619a      	str	r2, [r3, #24]
 800a374:	e002      	b.n	800a37c <PCD_EP_ISR_Handler+0x660>
            }
            else
            {
              ep->xfer_len = 0U;
 800a376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a378:	2200      	movs	r2, #0
 800a37a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800a37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a37e:	699b      	ldr	r3, [r3, #24]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d107      	bne.n	800a394 <PCD_EP_ISR_Handler+0x678>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	0011      	movs	r1, r2
 800a38c:	0018      	movs	r0, r3
 800a38e:	f00f fe1f 	bl	8019fd0 <HAL_PCD_DataInStageCallback>
 800a392:	e01e      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800a394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a396:	695a      	ldr	r2, [r3, #20]
 800a398:	2126      	movs	r1, #38	@ 0x26
 800a39a:	187b      	adds	r3, r7, r1
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	18d2      	adds	r2, r2, r3
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800a3a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a6:	69da      	ldr	r2, [r3, #28]
 800a3a8:	187b      	adds	r3, r7, r1
 800a3aa:	881b      	ldrh	r3, [r3, #0]
 800a3ac:	18d2      	adds	r2, r2, r3
 800a3ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3b8:	0011      	movs	r1, r2
 800a3ba:	0018      	movs	r0, r3
 800a3bc:	f003 fd10 	bl	800dde0 <USB_EPStartXfer>
 800a3c0:	e007      	b.n	800a3d2 <PCD_EP_ISR_Handler+0x6b6>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800a3c2:	2332      	movs	r3, #50	@ 0x32
 800a3c4:	18fb      	adds	r3, r7, r3
 800a3c6:	881a      	ldrh	r2, [r3, #0]
 800a3c8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f000 f8ff 	bl	800a5d0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3d8:	2380      	movs	r3, #128	@ 0x80
 800a3da:	021b      	lsls	r3, r3, #8
 800a3dc:	4013      	ands	r3, r2
 800a3de:	d000      	beq.n	800a3e2 <PCD_EP_ISR_Handler+0x6c6>
 800a3e0:	e4a1      	b.n	8009d26 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	b00e      	add	sp, #56	@ 0x38
 800a3ea:	bdb0      	pop	{r4, r5, r7, pc}
 800a3ec:	07ff8f8f 	.word	0x07ff8f8f
 800a3f0:	000080c0 	.word	0x000080c0
 800a3f4:	07ff8f0f 	.word	0x07ff8f0f
 800a3f8:	40009800 	.word	0x40009800

0800a3fc <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a3fc:	b5b0      	push	{r4, r5, r7, lr}
 800a3fe:	b08a      	sub	sp, #40	@ 0x28
 800a400:	af00      	add	r7, sp, #0
 800a402:	60f8      	str	r0, [r7, #12]
 800a404:	60b9      	str	r1, [r7, #8]
 800a406:	1dbb      	adds	r3, r7, #6
 800a408:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a40a:	1dbb      	adds	r3, r7, #6
 800a40c:	881a      	ldrh	r2, [r3, #0]
 800a40e:	2380      	movs	r3, #128	@ 0x80
 800a410:	01db      	lsls	r3, r3, #7
 800a412:	4013      	ands	r3, r2
 800a414:	d067      	beq.n	800a4e6 <HAL_PCD_EP_DB_Receive+0xea>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	68bb      	ldr	r3, [r7, #8]
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	251e      	movs	r5, #30
 800a420:	197c      	adds	r4, r7, r5
 800a422:	0019      	movs	r1, r3
 800a424:	0010      	movs	r0, r2
 800a426:	f7fe ff1d 	bl	8009264 <PCD_GET_EP_DBUF0_CNT>
 800a42a:	0003      	movs	r3, r0
 800a42c:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	699a      	ldr	r2, [r3, #24]
 800a432:	197b      	adds	r3, r7, r5
 800a434:	881b      	ldrh	r3, [r3, #0]
 800a436:	429a      	cmp	r2, r3
 800a438:	d307      	bcc.n	800a44a <HAL_PCD_EP_DB_Receive+0x4e>
    {
      ep->xfer_len -= count;
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	699a      	ldr	r2, [r3, #24]
 800a43e:	197b      	adds	r3, r7, r5
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	1ad2      	subs	r2, r2, r3
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	619a      	str	r2, [r3, #24]
 800a448:	e002      	b.n	800a450 <HAL_PCD_EP_DB_Receive+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2200      	movs	r2, #0
 800a44e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d11a      	bne.n	800a48e <HAL_PCD_EP_DB_Receive+0x92>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	001a      	movs	r2, r3
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	18d3      	adds	r3, r2, r3
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	4a55      	ldr	r2, [pc, #340]	@ (800a5c0 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800a46a:	4013      	ands	r3, r2
 800a46c:	61bb      	str	r3, [r7, #24]
 800a46e:	69bb      	ldr	r3, [r7, #24]
 800a470:	2280      	movs	r2, #128	@ 0x80
 800a472:	0192      	lsls	r2, r2, #6
 800a474:	4053      	eors	r3, r2
 800a476:	61bb      	str	r3, [r7, #24]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	001a      	movs	r2, r3
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	18d3      	adds	r3, r2, r3
 800a486:	69ba      	ldr	r2, [r7, #24]
 800a488:	494e      	ldr	r1, [pc, #312]	@ (800a5c4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800a48a:	430a      	orrs	r2, r1
 800a48c:	601a      	str	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a48e:	1dbb      	adds	r3, r7, #6
 800a490:	881b      	ldrh	r3, [r3, #0]
 800a492:	2240      	movs	r2, #64	@ 0x40
 800a494:	4013      	ands	r3, r2
 800a496:	d015      	beq.n	800a4c4 <HAL_PCD_EP_DB_Receive+0xc8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	001a      	movs	r2, r3
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	18d3      	adds	r3, r2, r3
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	4a47      	ldr	r2, [pc, #284]	@ (800a5c8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800a4aa:	4013      	ands	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	001a      	movs	r2, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	18d3      	adds	r3, r2, r3
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	4943      	ldr	r1, [pc, #268]	@ (800a5cc <HAL_PCD_EP_DB_Receive+0x1d0>)
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800a4c4:	241e      	movs	r4, #30
 800a4c6:	193b      	adds	r3, r7, r4
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d100      	bne.n	800a4d0 <HAL_PCD_EP_DB_Receive+0xd4>
 800a4ce:	e070      	b.n	800a5b2 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	6959      	ldr	r1, [r3, #20]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	891a      	ldrh	r2, [r3, #8]
 800a4dc:	193b      	adds	r3, r7, r4
 800a4de:	881b      	ldrh	r3, [r3, #0]
 800a4e0:	f004 fe98 	bl	800f214 <USB_ReadPMA>
 800a4e4:	e065      	b.n	800a5b2 <HAL_PCD_EP_DB_Receive+0x1b6>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681a      	ldr	r2, [r3, #0]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	251e      	movs	r5, #30
 800a4f0:	197c      	adds	r4, r7, r5
 800a4f2:	0019      	movs	r1, r3
 800a4f4:	0010      	movs	r0, r2
 800a4f6:	f7fe fed7 	bl	80092a8 <PCD_GET_EP_DBUF1_CNT>
 800a4fa:	0003      	movs	r3, r0
 800a4fc:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= count)
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	699a      	ldr	r2, [r3, #24]
 800a502:	197b      	adds	r3, r7, r5
 800a504:	881b      	ldrh	r3, [r3, #0]
 800a506:	429a      	cmp	r2, r3
 800a508:	d307      	bcc.n	800a51a <HAL_PCD_EP_DB_Receive+0x11e>
    {
      ep->xfer_len -= count;
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	699a      	ldr	r2, [r3, #24]
 800a50e:	197b      	adds	r3, r7, r5
 800a510:	881b      	ldrh	r3, [r3, #0]
 800a512:	1ad2      	subs	r2, r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	619a      	str	r2, [r3, #24]
 800a518:	e002      	b.n	800a520 <HAL_PCD_EP_DB_Receive+0x124>
    }
    else
    {
      ep->xfer_len = 0U;
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2200      	movs	r2, #0
 800a51e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	699b      	ldr	r3, [r3, #24]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d11a      	bne.n	800a55e <HAL_PCD_EP_DB_Receive+0x162>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	001a      	movs	r2, r3
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	18d3      	adds	r3, r2, r3
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a21      	ldr	r2, [pc, #132]	@ (800a5c0 <HAL_PCD_EP_DB_Receive+0x1c4>)
 800a53a:	4013      	ands	r3, r2
 800a53c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a540:	2280      	movs	r2, #128	@ 0x80
 800a542:	0192      	lsls	r2, r2, #6
 800a544:	4053      	eors	r3, r2
 800a546:	627b      	str	r3, [r7, #36]	@ 0x24
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	001a      	movs	r2, r3
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	781b      	ldrb	r3, [r3, #0]
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	18d3      	adds	r3, r2, r3
 800a556:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a558:	491a      	ldr	r1, [pc, #104]	@ (800a5c4 <HAL_PCD_EP_DB_Receive+0x1c8>)
 800a55a:	430a      	orrs	r2, r1
 800a55c:	601a      	str	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800a55e:	1dbb      	adds	r3, r7, #6
 800a560:	881b      	ldrh	r3, [r3, #0]
 800a562:	2240      	movs	r2, #64	@ 0x40
 800a564:	4013      	ands	r3, r2
 800a566:	d115      	bne.n	800a594 <HAL_PCD_EP_DB_Receive+0x198>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	001a      	movs	r2, r3
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	18d3      	adds	r3, r2, r3
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a13      	ldr	r2, [pc, #76]	@ (800a5c8 <HAL_PCD_EP_DB_Receive+0x1cc>)
 800a57a:	4013      	ands	r3, r2
 800a57c:	623b      	str	r3, [r7, #32]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	001a      	movs	r2, r3
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	009b      	lsls	r3, r3, #2
 800a58a:	18d3      	adds	r3, r2, r3
 800a58c:	6a3a      	ldr	r2, [r7, #32]
 800a58e:	490f      	ldr	r1, [pc, #60]	@ (800a5cc <HAL_PCD_EP_DB_Receive+0x1d0>)
 800a590:	430a      	orrs	r2, r1
 800a592:	601a      	str	r2, [r3, #0]
    }

    if (count != 0U)
 800a594:	241e      	movs	r4, #30
 800a596:	193b      	adds	r3, r7, r4
 800a598:	881b      	ldrh	r3, [r3, #0]
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d009      	beq.n	800a5b2 <HAL_PCD_EP_DB_Receive+0x1b6>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	6818      	ldr	r0, [r3, #0]
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	6959      	ldr	r1, [r3, #20]
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	895a      	ldrh	r2, [r3, #10]
 800a5aa:	193b      	adds	r3, r7, r4
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	f004 fe31 	bl	800f214 <USB_ReadPMA>
    }
  }

  return count;
 800a5b2:	231e      	movs	r3, #30
 800a5b4:	18fb      	adds	r3, r7, r3
 800a5b6:	881b      	ldrh	r3, [r3, #0]
}
 800a5b8:	0018      	movs	r0, r3
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	b00a      	add	sp, #40	@ 0x28
 800a5be:	bdb0      	pop	{r4, r5, r7, pc}
 800a5c0:	07ffbf8f 	.word	0x07ffbf8f
 800a5c4:	00008080 	.word	0x00008080
 800a5c8:	07ff8f8f 	.word	0x07ff8f8f
 800a5cc:	000080c0 	.word	0x000080c0

0800a5d0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800a5d0:	b5b0      	push	{r4, r5, r7, lr}
 800a5d2:	b08e      	sub	sp, #56	@ 0x38
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	60f8      	str	r0, [r7, #12]
 800a5d8:	60b9      	str	r1, [r7, #8]
 800a5da:	1dbb      	adds	r3, r7, #6
 800a5dc:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a5de:	1dbb      	adds	r3, r7, #6
 800a5e0:	881b      	ldrh	r3, [r3, #0]
 800a5e2:	2240      	movs	r2, #64	@ 0x40
 800a5e4:	4013      	ands	r3, r2
 800a5e6:	d100      	bne.n	800a5ea <HAL_PCD_EP_DB_Transmit+0x1a>
 800a5e8:	e1c3      	b.n	800a972 <HAL_PCD_EP_DB_Transmit+0x3a2>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	251e      	movs	r5, #30
 800a5f4:	197c      	adds	r4, r7, r5
 800a5f6:	0019      	movs	r1, r3
 800a5f8:	0010      	movs	r0, r2
 800a5fa:	f7fe fe33 	bl	8009264 <PCD_GET_EP_DBUF0_CNT>
 800a5fe:	0003      	movs	r3, r0
 800a600:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len > TxPctSize)
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	699a      	ldr	r2, [r3, #24]
 800a606:	197b      	adds	r3, r7, r5
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d907      	bls.n	800a61e <HAL_PCD_EP_DB_Transmit+0x4e>
    {
      ep->xfer_len -= TxPctSize;
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	699a      	ldr	r2, [r3, #24]
 800a612:	197b      	adds	r3, r7, r5
 800a614:	881b      	ldrh	r3, [r3, #0]
 800a616:	1ad2      	subs	r2, r2, r3
 800a618:	68bb      	ldr	r3, [r7, #8]
 800a61a:	619a      	str	r2, [r3, #24]
 800a61c:	e002      	b.n	800a624 <HAL_PCD_EP_DB_Transmit+0x54>
    }
    else
    {
      ep->xfer_len = 0U;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	2200      	movs	r2, #0
 800a622:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	699b      	ldr	r3, [r3, #24]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d000      	beq.n	800a62e <HAL_PCD_EP_DB_Transmit+0x5e>
 800a62c:	e0b2      	b.n	800a794 <HAL_PCD_EP_DB_Transmit+0x1c4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	785b      	ldrb	r3, [r3, #1]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d121      	bne.n	800a67a <HAL_PCD_EP_DB_Transmit+0xaa>
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	781b      	ldrb	r3, [r3, #0]
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	4ada      	ldr	r2, [pc, #872]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a63e:	4694      	mov	ip, r2
 800a640:	4463      	add	r3, ip
 800a642:	681a      	ldr	r2, [r3, #0]
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	00db      	lsls	r3, r3, #3
 800a64a:	49d7      	ldr	r1, [pc, #860]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a64c:	468c      	mov	ip, r1
 800a64e:	4463      	add	r3, ip
 800a650:	0192      	lsls	r2, r2, #6
 800a652:	0992      	lsrs	r2, r2, #6
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	00db      	lsls	r3, r3, #3
 800a65c:	4ad2      	ldr	r2, [pc, #840]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a65e:	4694      	mov	ip, r2
 800a660:	4463      	add	r3, ip
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	781b      	ldrb	r3, [r3, #0]
 800a668:	00db      	lsls	r3, r3, #3
 800a66a:	49cf      	ldr	r1, [pc, #828]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a66c:	468c      	mov	ip, r1
 800a66e:	4463      	add	r3, ip
 800a670:	2180      	movs	r1, #128	@ 0x80
 800a672:	0609      	lsls	r1, r1, #24
 800a674:	430a      	orrs	r2, r1
 800a676:	601a      	str	r2, [r3, #0]
 800a678:	e020      	b.n	800a6bc <HAL_PCD_EP_DB_Transmit+0xec>
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	785b      	ldrb	r3, [r3, #1]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d11c      	bne.n	800a6bc <HAL_PCD_EP_DB_Transmit+0xec>
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	781b      	ldrb	r3, [r3, #0]
 800a686:	00db      	lsls	r3, r3, #3
 800a688:	4ac7      	ldr	r2, [pc, #796]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a68a:	4694      	mov	ip, r2
 800a68c:	4463      	add	r3, ip
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	00db      	lsls	r3, r3, #3
 800a696:	49c4      	ldr	r1, [pc, #784]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a698:	468c      	mov	ip, r1
 800a69a:	4463      	add	r3, ip
 800a69c:	0412      	lsls	r2, r2, #16
 800a69e:	0c12      	lsrs	r2, r2, #16
 800a6a0:	601a      	str	r2, [r3, #0]
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	00db      	lsls	r3, r3, #3
 800a6a8:	4abf      	ldr	r2, [pc, #764]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a6aa:	189a      	adds	r2, r3, r2
 800a6ac:	68bb      	ldr	r3, [r7, #8]
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	00db      	lsls	r3, r3, #3
 800a6b2:	49bd      	ldr	r1, [pc, #756]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a6b4:	468c      	mov	ip, r1
 800a6b6:	4463      	add	r3, ip
 800a6b8:	6812      	ldr	r2, [r2, #0]
 800a6ba:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	785b      	ldrb	r3, [r3, #1]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d121      	bne.n	800a708 <HAL_PCD_EP_DB_Transmit+0x138>
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	00db      	lsls	r3, r3, #3
 800a6ca:	4ab7      	ldr	r2, [pc, #732]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a6cc:	4694      	mov	ip, r2
 800a6ce:	4463      	add	r3, ip
 800a6d0:	685a      	ldr	r2, [r3, #4]
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	49b3      	ldr	r1, [pc, #716]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a6da:	468c      	mov	ip, r1
 800a6dc:	4463      	add	r3, ip
 800a6de:	0192      	lsls	r2, r2, #6
 800a6e0:	0992      	lsrs	r2, r2, #6
 800a6e2:	605a      	str	r2, [r3, #4]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	00db      	lsls	r3, r3, #3
 800a6ea:	4aaf      	ldr	r2, [pc, #700]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a6ec:	4694      	mov	ip, r2
 800a6ee:	4463      	add	r3, ip
 800a6f0:	685a      	ldr	r2, [r3, #4]
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	00db      	lsls	r3, r3, #3
 800a6f8:	49ab      	ldr	r1, [pc, #684]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a6fa:	468c      	mov	ip, r1
 800a6fc:	4463      	add	r3, ip
 800a6fe:	2180      	movs	r1, #128	@ 0x80
 800a700:	0609      	lsls	r1, r1, #24
 800a702:	430a      	orrs	r2, r1
 800a704:	605a      	str	r2, [r3, #4]
 800a706:	e020      	b.n	800a74a <HAL_PCD_EP_DB_Transmit+0x17a>
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	785b      	ldrb	r3, [r3, #1]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d11c      	bne.n	800a74a <HAL_PCD_EP_DB_Transmit+0x17a>
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	00db      	lsls	r3, r3, #3
 800a716:	4aa4      	ldr	r2, [pc, #656]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a718:	4694      	mov	ip, r2
 800a71a:	4463      	add	r3, ip
 800a71c:	685a      	ldr	r2, [r3, #4]
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	00db      	lsls	r3, r3, #3
 800a724:	49a0      	ldr	r1, [pc, #640]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a726:	468c      	mov	ip, r1
 800a728:	4463      	add	r3, ip
 800a72a:	0412      	lsls	r2, r2, #16
 800a72c:	0c12      	lsrs	r2, r2, #16
 800a72e:	605a      	str	r2, [r3, #4]
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	781b      	ldrb	r3, [r3, #0]
 800a734:	00db      	lsls	r3, r3, #3
 800a736:	4a9c      	ldr	r2, [pc, #624]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a738:	189a      	adds	r2, r3, r2
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	00db      	lsls	r3, r3, #3
 800a740:	4999      	ldr	r1, [pc, #612]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a742:	468c      	mov	ip, r1
 800a744:	4463      	add	r3, ip
 800a746:	6852      	ldr	r2, [r2, #4]
 800a748:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	781a      	ldrb	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	0011      	movs	r1, r2
 800a752:	0018      	movs	r0, r3
 800a754:	f00f fc3c 	bl	8019fd0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a758:	1dbb      	adds	r3, r7, #6
 800a75a:	881a      	ldrh	r2, [r3, #0]
 800a75c:	2380      	movs	r3, #128	@ 0x80
 800a75e:	01db      	lsls	r3, r3, #7
 800a760:	4013      	ands	r3, r2
 800a762:	d100      	bne.n	800a766 <HAL_PCD_EP_DB_Transmit+0x196>
 800a764:	e2d5      	b.n	800ad12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	001a      	movs	r2, r3
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	18d3      	adds	r3, r2, r3
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a8d      	ldr	r2, [pc, #564]	@ (800a9ac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800a778:	4013      	ands	r3, r2
 800a77a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	001a      	movs	r2, r3
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	18d3      	adds	r3, r2, r3
 800a78a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a78c:	4988      	ldr	r1, [pc, #544]	@ (800a9b0 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800a78e:	430a      	orrs	r2, r1
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	e2be      	b.n	800ad12 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800a794:	1dbb      	adds	r3, r7, #6
 800a796:	881a      	ldrh	r2, [r3, #0]
 800a798:	2380      	movs	r3, #128	@ 0x80
 800a79a:	01db      	lsls	r3, r3, #7
 800a79c:	4013      	ands	r3, r2
 800a79e:	d015      	beq.n	800a7cc <HAL_PCD_EP_DB_Transmit+0x1fc>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	001a      	movs	r2, r3
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	781b      	ldrb	r3, [r3, #0]
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	18d3      	adds	r3, r2, r3
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a7e      	ldr	r2, [pc, #504]	@ (800a9ac <HAL_PCD_EP_DB_Transmit+0x3dc>)
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	001a      	movs	r2, r3
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	781b      	ldrb	r3, [r3, #0]
 800a7c0:	009b      	lsls	r3, r3, #2
 800a7c2:	18d3      	adds	r3, r2, r3
 800a7c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7c6:	497a      	ldr	r1, [pc, #488]	@ (800a9b0 <HAL_PCD_EP_DB_Transmit+0x3e0>)
 800a7c8:	430a      	orrs	r2, r1
 800a7ca:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2224      	movs	r2, #36	@ 0x24
 800a7d0:	5c9b      	ldrb	r3, [r3, r2]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d000      	beq.n	800a7d8 <HAL_PCD_EP_DB_Transmit+0x208>
 800a7d6:	e29c      	b.n	800ad12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	695a      	ldr	r2, [r3, #20]
 800a7dc:	211e      	movs	r1, #30
 800a7de:	187b      	adds	r3, r7, r1
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	18d2      	adds	r2, r2, r3
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	69da      	ldr	r2, [r3, #28]
 800a7ec:	187b      	adds	r3, r7, r1
 800a7ee:	881b      	ldrh	r3, [r3, #0]
 800a7f0:	18d2      	adds	r2, r2, r3
 800a7f2:	68bb      	ldr	r3, [r7, #8]
 800a7f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a7f6:	68bb      	ldr	r3, [r7, #8]
 800a7f8:	6a1a      	ldr	r2, [r3, #32]
 800a7fa:	68bb      	ldr	r3, [r7, #8]
 800a7fc:	691b      	ldr	r3, [r3, #16]
 800a7fe:	429a      	cmp	r2, r3
 800a800:	d309      	bcc.n	800a816 <HAL_PCD_EP_DB_Transmit+0x246>
        {
          len = ep->maxpacket;
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	6a1a      	ldr	r2, [r3, #32]
 800a80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a80e:	1ad2      	subs	r2, r2, r3
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	621a      	str	r2, [r3, #32]
 800a814:	e016      	b.n	800a844 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else if (ep->xfer_len_db == 0U)
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	6a1b      	ldr	r3, [r3, #32]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d108      	bne.n	800a830 <HAL_PCD_EP_DB_Transmit+0x260>
        {
          len = TxPctSize;
 800a81e:	231e      	movs	r3, #30
 800a820:	18fb      	adds	r3, r7, r3
 800a822:	881b      	ldrh	r3, [r3, #0]
 800a824:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2224      	movs	r2, #36	@ 0x24
 800a82a:	2100      	movs	r1, #0
 800a82c:	5499      	strb	r1, [r3, r2]
 800a82e:	e009      	b.n	800a844 <HAL_PCD_EP_DB_Transmit+0x274>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2224      	movs	r2, #36	@ 0x24
 800a834:	2100      	movs	r1, #0
 800a836:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800a838:	68bb      	ldr	r3, [r7, #8]
 800a83a:	6a1b      	ldr	r3, [r3, #32]
 800a83c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2200      	movs	r2, #0
 800a842:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	785b      	ldrb	r3, [r3, #1]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d162      	bne.n	800a912 <HAL_PCD_EP_DB_Transmit+0x342>
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	781b      	ldrb	r3, [r3, #0]
 800a850:	00db      	lsls	r3, r3, #3
 800a852:	4a55      	ldr	r2, [pc, #340]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a854:	4694      	mov	ip, r2
 800a856:	4463      	add	r3, ip
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	00db      	lsls	r3, r3, #3
 800a860:	4951      	ldr	r1, [pc, #324]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a862:	468c      	mov	ip, r1
 800a864:	4463      	add	r3, ip
 800a866:	0192      	lsls	r2, r2, #6
 800a868:	0992      	lsrs	r2, r2, #6
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a870:	d91e      	bls.n	800a8b0 <HAL_PCD_EP_DB_Transmit+0x2e0>
 800a872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a874:	095b      	lsrs	r3, r3, #5
 800a876:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a87a:	221f      	movs	r2, #31
 800a87c:	4013      	ands	r3, r2
 800a87e:	d102      	bne.n	800a886 <HAL_PCD_EP_DB_Transmit+0x2b6>
 800a880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a882:	3b01      	subs	r3, #1
 800a884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	00db      	lsls	r3, r3, #3
 800a88c:	4a46      	ldr	r2, [pc, #280]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a88e:	4694      	mov	ip, r2
 800a890:	4463      	add	r3, ip
 800a892:	681a      	ldr	r2, [r3, #0]
 800a894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a896:	069b      	lsls	r3, r3, #26
 800a898:	431a      	orrs	r2, r3
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	781b      	ldrb	r3, [r3, #0]
 800a89e:	00db      	lsls	r3, r3, #3
 800a8a0:	4941      	ldr	r1, [pc, #260]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a8a2:	468c      	mov	ip, r1
 800a8a4:	4463      	add	r3, ip
 800a8a6:	2180      	movs	r1, #128	@ 0x80
 800a8a8:	0609      	lsls	r1, r1, #24
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	601a      	str	r2, [r3, #0]
 800a8ae:	e055      	b.n	800a95c <HAL_PCD_EP_DB_Transmit+0x38c>
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d111      	bne.n	800a8da <HAL_PCD_EP_DB_Transmit+0x30a>
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	00db      	lsls	r3, r3, #3
 800a8bc:	4a3a      	ldr	r2, [pc, #232]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a8be:	4694      	mov	ip, r2
 800a8c0:	4463      	add	r3, ip
 800a8c2:	681a      	ldr	r2, [r3, #0]
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	00db      	lsls	r3, r3, #3
 800a8ca:	4937      	ldr	r1, [pc, #220]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a8cc:	468c      	mov	ip, r1
 800a8ce:	4463      	add	r3, ip
 800a8d0:	2180      	movs	r1, #128	@ 0x80
 800a8d2:	0609      	lsls	r1, r1, #24
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	601a      	str	r2, [r3, #0]
 800a8d8:	e040      	b.n	800a95c <HAL_PCD_EP_DB_Transmit+0x38c>
 800a8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8dc:	085b      	lsrs	r3, r3, #1
 800a8de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8e2:	2201      	movs	r2, #1
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	d002      	beq.n	800a8ee <HAL_PCD_EP_DB_Transmit+0x31e>
 800a8e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	4a2c      	ldr	r2, [pc, #176]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a8f6:	4694      	mov	ip, r2
 800a8f8:	4463      	add	r3, ip
 800a8fa:	6819      	ldr	r1, [r3, #0]
 800a8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8fe:	069a      	lsls	r2, r3, #26
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	781b      	ldrb	r3, [r3, #0]
 800a904:	00db      	lsls	r3, r3, #3
 800a906:	4828      	ldr	r0, [pc, #160]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a908:	4684      	mov	ip, r0
 800a90a:	4463      	add	r3, ip
 800a90c:	430a      	orrs	r2, r1
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	e024      	b.n	800a95c <HAL_PCD_EP_DB_Transmit+0x38c>
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	785b      	ldrb	r3, [r3, #1]
 800a916:	2b01      	cmp	r3, #1
 800a918:	d120      	bne.n	800a95c <HAL_PCD_EP_DB_Transmit+0x38c>
 800a91a:	68bb      	ldr	r3, [r7, #8]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	00db      	lsls	r3, r3, #3
 800a920:	4a21      	ldr	r2, [pc, #132]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a922:	4694      	mov	ip, r2
 800a924:	4463      	add	r3, ip
 800a926:	681a      	ldr	r2, [r3, #0]
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	00db      	lsls	r3, r3, #3
 800a92e:	491e      	ldr	r1, [pc, #120]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a930:	468c      	mov	ip, r1
 800a932:	4463      	add	r3, ip
 800a934:	0412      	lsls	r2, r2, #16
 800a936:	0c12      	lsrs	r2, r2, #16
 800a938:	601a      	str	r2, [r3, #0]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	4a19      	ldr	r2, [pc, #100]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a942:	4694      	mov	ip, r2
 800a944:	4463      	add	r3, ip
 800a946:	6819      	ldr	r1, [r3, #0]
 800a948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94a:	041a      	lsls	r2, r3, #16
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	781b      	ldrb	r3, [r3, #0]
 800a950:	00db      	lsls	r3, r3, #3
 800a952:	4815      	ldr	r0, [pc, #84]	@ (800a9a8 <HAL_PCD_EP_DB_Transmit+0x3d8>)
 800a954:	4684      	mov	ip, r0
 800a956:	4463      	add	r3, ip
 800a958:	430a      	orrs	r2, r1
 800a95a:	601a      	str	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6818      	ldr	r0, [r3, #0]
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	6959      	ldr	r1, [r3, #20]
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	891a      	ldrh	r2, [r3, #8]
 800a968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a96a:	b29b      	uxth	r3, r3
 800a96c:	f004 fbdc 	bl	800f128 <USB_WritePMA>
 800a970:	e1cf      	b.n	800ad12 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	781b      	ldrb	r3, [r3, #0]
 800a97a:	251e      	movs	r5, #30
 800a97c:	197c      	adds	r4, r7, r5
 800a97e:	0019      	movs	r1, r3
 800a980:	0010      	movs	r0, r2
 800a982:	f7fe fc91 	bl	80092a8 <PCD_GET_EP_DBUF1_CNT>
 800a986:	0003      	movs	r3, r0
 800a988:	8023      	strh	r3, [r4, #0]

    if (ep->xfer_len >= TxPctSize)
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	699a      	ldr	r2, [r3, #24]
 800a98e:	197b      	adds	r3, r7, r5
 800a990:	881b      	ldrh	r3, [r3, #0]
 800a992:	429a      	cmp	r2, r3
 800a994:	d30e      	bcc.n	800a9b4 <HAL_PCD_EP_DB_Transmit+0x3e4>
    {
      ep->xfer_len -= TxPctSize;
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	699a      	ldr	r2, [r3, #24]
 800a99a:	197b      	adds	r3, r7, r5
 800a99c:	881b      	ldrh	r3, [r3, #0]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	619a      	str	r2, [r3, #24]
 800a9a4:	e009      	b.n	800a9ba <HAL_PCD_EP_DB_Transmit+0x3ea>
 800a9a6:	46c0      	nop			@ (mov r8, r8)
 800a9a8:	40009800 	.word	0x40009800
 800a9ac:	07ff8f8f 	.word	0x07ff8f8f
 800a9b0:	0000c080 	.word	0x0000c080
    }
    else
    {
      ep->xfer_len = 0U;
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	699b      	ldr	r3, [r3, #24]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d000      	beq.n	800a9c4 <HAL_PCD_EP_DB_Transmit+0x3f4>
 800a9c2:	e0b2      	b.n	800ab2a <HAL_PCD_EP_DB_Transmit+0x55a>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	785b      	ldrb	r3, [r3, #1]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d121      	bne.n	800aa10 <HAL_PCD_EP_DB_Transmit+0x440>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	00db      	lsls	r3, r3, #3
 800a9d2:	4ab5      	ldr	r2, [pc, #724]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800a9d4:	4694      	mov	ip, r2
 800a9d6:	4463      	add	r3, ip
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	00db      	lsls	r3, r3, #3
 800a9e0:	49b1      	ldr	r1, [pc, #708]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800a9e2:	468c      	mov	ip, r1
 800a9e4:	4463      	add	r3, ip
 800a9e6:	0192      	lsls	r2, r2, #6
 800a9e8:	0992      	lsrs	r2, r2, #6
 800a9ea:	601a      	str	r2, [r3, #0]
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	781b      	ldrb	r3, [r3, #0]
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	4aad      	ldr	r2, [pc, #692]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800a9f4:	4694      	mov	ip, r2
 800a9f6:	4463      	add	r3, ip
 800a9f8:	681a      	ldr	r2, [r3, #0]
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	00db      	lsls	r3, r3, #3
 800aa00:	49a9      	ldr	r1, [pc, #676]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa02:	468c      	mov	ip, r1
 800aa04:	4463      	add	r3, ip
 800aa06:	2180      	movs	r1, #128	@ 0x80
 800aa08:	0609      	lsls	r1, r1, #24
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	e020      	b.n	800aa52 <HAL_PCD_EP_DB_Transmit+0x482>
 800aa10:	68bb      	ldr	r3, [r7, #8]
 800aa12:	785b      	ldrb	r3, [r3, #1]
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d11c      	bne.n	800aa52 <HAL_PCD_EP_DB_Transmit+0x482>
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	00db      	lsls	r3, r3, #3
 800aa1e:	4aa2      	ldr	r2, [pc, #648]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa20:	4694      	mov	ip, r2
 800aa22:	4463      	add	r3, ip
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	00db      	lsls	r3, r3, #3
 800aa2c:	499e      	ldr	r1, [pc, #632]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa2e:	468c      	mov	ip, r1
 800aa30:	4463      	add	r3, ip
 800aa32:	0412      	lsls	r2, r2, #16
 800aa34:	0c12      	lsrs	r2, r2, #16
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	00db      	lsls	r3, r3, #3
 800aa3e:	4a9a      	ldr	r2, [pc, #616]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa40:	189a      	adds	r2, r3, r2
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	781b      	ldrb	r3, [r3, #0]
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	4997      	ldr	r1, [pc, #604]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa4a:	468c      	mov	ip, r1
 800aa4c:	4463      	add	r3, ip
 800aa4e:	6812      	ldr	r2, [r2, #0]
 800aa50:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	785b      	ldrb	r3, [r3, #1]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d121      	bne.n	800aa9e <HAL_PCD_EP_DB_Transmit+0x4ce>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	00db      	lsls	r3, r3, #3
 800aa60:	4a91      	ldr	r2, [pc, #580]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa62:	4694      	mov	ip, r2
 800aa64:	4463      	add	r3, ip
 800aa66:	685a      	ldr	r2, [r3, #4]
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	781b      	ldrb	r3, [r3, #0]
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	498e      	ldr	r1, [pc, #568]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa70:	468c      	mov	ip, r1
 800aa72:	4463      	add	r3, ip
 800aa74:	0192      	lsls	r2, r2, #6
 800aa76:	0992      	lsrs	r2, r2, #6
 800aa78:	605a      	str	r2, [r3, #4]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	00db      	lsls	r3, r3, #3
 800aa80:	4a89      	ldr	r2, [pc, #548]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa82:	4694      	mov	ip, r2
 800aa84:	4463      	add	r3, ip
 800aa86:	685a      	ldr	r2, [r3, #4]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	781b      	ldrb	r3, [r3, #0]
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	4986      	ldr	r1, [pc, #536]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aa90:	468c      	mov	ip, r1
 800aa92:	4463      	add	r3, ip
 800aa94:	2180      	movs	r1, #128	@ 0x80
 800aa96:	0609      	lsls	r1, r1, #24
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	605a      	str	r2, [r3, #4]
 800aa9c:	e020      	b.n	800aae0 <HAL_PCD_EP_DB_Transmit+0x510>
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	785b      	ldrb	r3, [r3, #1]
 800aaa2:	2b01      	cmp	r3, #1
 800aaa4:	d11c      	bne.n	800aae0 <HAL_PCD_EP_DB_Transmit+0x510>
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	781b      	ldrb	r3, [r3, #0]
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	4a7e      	ldr	r2, [pc, #504]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aaae:	4694      	mov	ip, r2
 800aab0:	4463      	add	r3, ip
 800aab2:	685a      	ldr	r2, [r3, #4]
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	781b      	ldrb	r3, [r3, #0]
 800aab8:	00db      	lsls	r3, r3, #3
 800aaba:	497b      	ldr	r1, [pc, #492]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aabc:	468c      	mov	ip, r1
 800aabe:	4463      	add	r3, ip
 800aac0:	0412      	lsls	r2, r2, #16
 800aac2:	0c12      	lsrs	r2, r2, #16
 800aac4:	605a      	str	r2, [r3, #4]
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	781b      	ldrb	r3, [r3, #0]
 800aaca:	00db      	lsls	r3, r3, #3
 800aacc:	4a76      	ldr	r2, [pc, #472]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aace:	189a      	adds	r2, r3, r2
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	00db      	lsls	r3, r3, #3
 800aad6:	4974      	ldr	r1, [pc, #464]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800aad8:	468c      	mov	ip, r1
 800aada:	4463      	add	r3, ip
 800aadc:	6852      	ldr	r2, [r2, #4]
 800aade:	605a      	str	r2, [r3, #4]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	781a      	ldrb	r2, [r3, #0]
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	0011      	movs	r1, r2
 800aae8:	0018      	movs	r0, r3
 800aaea:	f00f fa71 	bl	8019fd0 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800aaee:	1dbb      	adds	r3, r7, #6
 800aaf0:	881a      	ldrh	r2, [r3, #0]
 800aaf2:	2380      	movs	r3, #128	@ 0x80
 800aaf4:	01db      	lsls	r3, r3, #7
 800aaf6:	4013      	ands	r3, r2
 800aaf8:	d000      	beq.n	800aafc <HAL_PCD_EP_DB_Transmit+0x52c>
 800aafa:	e10a      	b.n	800ad12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	001a      	movs	r2, r3
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	18d3      	adds	r3, r2, r3
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a67      	ldr	r2, [pc, #412]	@ (800acac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800ab0e:	4013      	ands	r3, r2
 800ab10:	623b      	str	r3, [r7, #32]
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	001a      	movs	r2, r3
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	18d3      	adds	r3, r2, r3
 800ab20:	6a3a      	ldr	r2, [r7, #32]
 800ab22:	4963      	ldr	r1, [pc, #396]	@ (800acb0 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800ab24:	430a      	orrs	r2, r1
 800ab26:	601a      	str	r2, [r3, #0]
 800ab28:	e0f3      	b.n	800ad12 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800ab2a:	1dbb      	adds	r3, r7, #6
 800ab2c:	881a      	ldrh	r2, [r3, #0]
 800ab2e:	2380      	movs	r3, #128	@ 0x80
 800ab30:	01db      	lsls	r3, r3, #7
 800ab32:	4013      	ands	r3, r2
 800ab34:	d115      	bne.n	800ab62 <HAL_PCD_EP_DB_Transmit+0x592>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	001a      	movs	r2, r3
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	781b      	ldrb	r3, [r3, #0]
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	18d3      	adds	r3, r2, r3
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	4a59      	ldr	r2, [pc, #356]	@ (800acac <HAL_PCD_EP_DB_Transmit+0x6dc>)
 800ab48:	4013      	ands	r3, r2
 800ab4a:	617b      	str	r3, [r7, #20]
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	001a      	movs	r2, r3
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	781b      	ldrb	r3, [r3, #0]
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	18d3      	adds	r3, r2, r3
 800ab5a:	697a      	ldr	r2, [r7, #20]
 800ab5c:	4954      	ldr	r1, [pc, #336]	@ (800acb0 <HAL_PCD_EP_DB_Transmit+0x6e0>)
 800ab5e:	430a      	orrs	r2, r1
 800ab60:	601a      	str	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	2224      	movs	r2, #36	@ 0x24
 800ab66:	5c9b      	ldrb	r3, [r3, r2]
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d000      	beq.n	800ab6e <HAL_PCD_EP_DB_Transmit+0x59e>
 800ab6c:	e0d1      	b.n	800ad12 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	695a      	ldr	r2, [r3, #20]
 800ab72:	211e      	movs	r1, #30
 800ab74:	187b      	adds	r3, r7, r1
 800ab76:	881b      	ldrh	r3, [r3, #0]
 800ab78:	18d2      	adds	r2, r2, r3
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	69da      	ldr	r2, [r3, #28]
 800ab82:	187b      	adds	r3, r7, r1
 800ab84:	881b      	ldrh	r3, [r3, #0]
 800ab86:	18d2      	adds	r2, r2, r3
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	6a1a      	ldr	r2, [r3, #32]
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	691b      	ldr	r3, [r3, #16]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d309      	bcc.n	800abac <HAL_PCD_EP_DB_Transmit+0x5dc>
        {
          len = ep->maxpacket;
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db -= len;
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	6a1a      	ldr	r2, [r3, #32]
 800aba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aba4:	1ad2      	subs	r2, r2, r3
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	621a      	str	r2, [r3, #32]
 800abaa:	e016      	b.n	800abda <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else if (ep->xfer_len_db == 0U)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	6a1b      	ldr	r3, [r3, #32]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d108      	bne.n	800abc6 <HAL_PCD_EP_DB_Transmit+0x5f6>
        {
          len = TxPctSize;
 800abb4:	231e      	movs	r3, #30
 800abb6:	18fb      	adds	r3, r7, r3
 800abb8:	881b      	ldrh	r3, [r3, #0]
 800abba:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_fill_db = 0U;
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2224      	movs	r2, #36	@ 0x24
 800abc0:	2100      	movs	r1, #0
 800abc2:	5499      	strb	r1, [r3, r2]
 800abc4:	e009      	b.n	800abda <HAL_PCD_EP_DB_Transmit+0x60a>
        }
        else
        {
          len = ep->xfer_len_db;
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	627b      	str	r3, [r7, #36]	@ 0x24
          ep->xfer_len_db = 0U;
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2200      	movs	r2, #0
 800abd0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	2224      	movs	r2, #36	@ 0x24
 800abd6:	2100      	movs	r1, #0
 800abd8:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	785b      	ldrb	r3, [r3, #1]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d168      	bne.n	800acb4 <HAL_PCD_EP_DB_Transmit+0x6e4>
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	00db      	lsls	r3, r3, #3
 800abe8:	4a2f      	ldr	r2, [pc, #188]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800abea:	4694      	mov	ip, r2
 800abec:	4463      	add	r3, ip
 800abee:	685a      	ldr	r2, [r3, #4]
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	00db      	lsls	r3, r3, #3
 800abf6:	492c      	ldr	r1, [pc, #176]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800abf8:	468c      	mov	ip, r1
 800abfa:	4463      	add	r3, ip
 800abfc:	0192      	lsls	r2, r2, #6
 800abfe:	0992      	lsrs	r2, r2, #6
 800ac00:	605a      	str	r2, [r3, #4]
 800ac02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac04:	2b3e      	cmp	r3, #62	@ 0x3e
 800ac06:	d91e      	bls.n	800ac46 <HAL_PCD_EP_DB_Transmit+0x676>
 800ac08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac0a:	095b      	lsrs	r3, r3, #5
 800ac0c:	61bb      	str	r3, [r7, #24]
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	221f      	movs	r2, #31
 800ac12:	4013      	ands	r3, r2
 800ac14:	d102      	bne.n	800ac1c <HAL_PCD_EP_DB_Transmit+0x64c>
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	61bb      	str	r3, [r7, #24]
 800ac1c:	68bb      	ldr	r3, [r7, #8]
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	00db      	lsls	r3, r3, #3
 800ac22:	4a21      	ldr	r2, [pc, #132]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ac24:	4694      	mov	ip, r2
 800ac26:	4463      	add	r3, ip
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	069b      	lsls	r3, r3, #26
 800ac2e:	431a      	orrs	r2, r3
 800ac30:	68bb      	ldr	r3, [r7, #8]
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	00db      	lsls	r3, r3, #3
 800ac36:	491c      	ldr	r1, [pc, #112]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ac38:	468c      	mov	ip, r1
 800ac3a:	4463      	add	r3, ip
 800ac3c:	2180      	movs	r1, #128	@ 0x80
 800ac3e:	0609      	lsls	r1, r1, #24
 800ac40:	430a      	orrs	r2, r1
 800ac42:	605a      	str	r2, [r3, #4]
 800ac44:	e05b      	b.n	800acfe <HAL_PCD_EP_DB_Transmit+0x72e>
 800ac46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d111      	bne.n	800ac70 <HAL_PCD_EP_DB_Transmit+0x6a0>
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	781b      	ldrb	r3, [r3, #0]
 800ac50:	00db      	lsls	r3, r3, #3
 800ac52:	4a15      	ldr	r2, [pc, #84]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ac54:	4694      	mov	ip, r2
 800ac56:	4463      	add	r3, ip
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	00db      	lsls	r3, r3, #3
 800ac60:	4911      	ldr	r1, [pc, #68]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ac62:	468c      	mov	ip, r1
 800ac64:	4463      	add	r3, ip
 800ac66:	2180      	movs	r1, #128	@ 0x80
 800ac68:	0609      	lsls	r1, r1, #24
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	605a      	str	r2, [r3, #4]
 800ac6e:	e046      	b.n	800acfe <HAL_PCD_EP_DB_Transmit+0x72e>
 800ac70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	61bb      	str	r3, [r7, #24]
 800ac76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac78:	2201      	movs	r2, #1
 800ac7a:	4013      	ands	r3, r2
 800ac7c:	d002      	beq.n	800ac84 <HAL_PCD_EP_DB_Transmit+0x6b4>
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	3301      	adds	r3, #1
 800ac82:	61bb      	str	r3, [r7, #24]
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	00db      	lsls	r3, r3, #3
 800ac8a:	4a07      	ldr	r2, [pc, #28]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ac8c:	4694      	mov	ip, r2
 800ac8e:	4463      	add	r3, ip
 800ac90:	6859      	ldr	r1, [r3, #4]
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	069a      	lsls	r2, r3, #26
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	781b      	ldrb	r3, [r3, #0]
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	4802      	ldr	r0, [pc, #8]	@ (800aca8 <HAL_PCD_EP_DB_Transmit+0x6d8>)
 800ac9e:	4684      	mov	ip, r0
 800aca0:	4463      	add	r3, ip
 800aca2:	430a      	orrs	r2, r1
 800aca4:	605a      	str	r2, [r3, #4]
 800aca6:	e02a      	b.n	800acfe <HAL_PCD_EP_DB_Transmit+0x72e>
 800aca8:	40009800 	.word	0x40009800
 800acac:	07ff8f8f 	.word	0x07ff8f8f
 800acb0:	0000c080 	.word	0x0000c080
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d120      	bne.n	800acfe <HAL_PCD_EP_DB_Transmit+0x72e>
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	00db      	lsls	r3, r3, #3
 800acc2:	4a25      	ldr	r2, [pc, #148]	@ (800ad58 <HAL_PCD_EP_DB_Transmit+0x788>)
 800acc4:	4694      	mov	ip, r2
 800acc6:	4463      	add	r3, ip
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	4921      	ldr	r1, [pc, #132]	@ (800ad58 <HAL_PCD_EP_DB_Transmit+0x788>)
 800acd2:	468c      	mov	ip, r1
 800acd4:	4463      	add	r3, ip
 800acd6:	0412      	lsls	r2, r2, #16
 800acd8:	0c12      	lsrs	r2, r2, #16
 800acda:	605a      	str	r2, [r3, #4]
 800acdc:	68bb      	ldr	r3, [r7, #8]
 800acde:	781b      	ldrb	r3, [r3, #0]
 800ace0:	00db      	lsls	r3, r3, #3
 800ace2:	4a1d      	ldr	r2, [pc, #116]	@ (800ad58 <HAL_PCD_EP_DB_Transmit+0x788>)
 800ace4:	4694      	mov	ip, r2
 800ace6:	4463      	add	r3, ip
 800ace8:	6859      	ldr	r1, [r3, #4]
 800acea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acec:	041a      	lsls	r2, r3, #16
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	00db      	lsls	r3, r3, #3
 800acf4:	4818      	ldr	r0, [pc, #96]	@ (800ad58 <HAL_PCD_EP_DB_Transmit+0x788>)
 800acf6:	4684      	mov	ip, r0
 800acf8:	4463      	add	r3, ip
 800acfa:	430a      	orrs	r2, r1
 800acfc:	605a      	str	r2, [r3, #4]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	6818      	ldr	r0, [r3, #0]
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	6959      	ldr	r1, [r3, #20]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	895a      	ldrh	r2, [r3, #10]
 800ad0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	f004 fa0b 	bl	800f128 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	001a      	movs	r2, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	781b      	ldrb	r3, [r3, #0]
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	18d3      	adds	r3, r2, r3
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a0e      	ldr	r2, [pc, #56]	@ (800ad5c <HAL_PCD_EP_DB_Transmit+0x78c>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad2a:	2210      	movs	r2, #16
 800ad2c:	4053      	eors	r3, r2
 800ad2e:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad32:	2220      	movs	r2, #32
 800ad34:	4053      	eors	r3, r2
 800ad36:	633b      	str	r3, [r7, #48]	@ 0x30
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	001a      	movs	r2, r3
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	781b      	ldrb	r3, [r3, #0]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	18d3      	adds	r3, r2, r3
 800ad46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad48:	4905      	ldr	r1, [pc, #20]	@ (800ad60 <HAL_PCD_EP_DB_Transmit+0x790>)
 800ad4a:	430a      	orrs	r2, r1
 800ad4c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ad4e:	2300      	movs	r3, #0
}
 800ad50:	0018      	movs	r0, r3
 800ad52:	46bd      	mov	sp, r7
 800ad54:	b00e      	add	sp, #56	@ 0x38
 800ad56:	bdb0      	pop	{r4, r5, r7, pc}
 800ad58:	40009800 	.word	0x40009800
 800ad5c:	07ff8fbf 	.word	0x07ff8fbf
 800ad60:	00008080 	.word	0x00008080

0800ad64 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800ad64:	b590      	push	{r4, r7, lr}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	0008      	movs	r0, r1
 800ad6e:	0011      	movs	r1, r2
 800ad70:	607b      	str	r3, [r7, #4]
 800ad72:	240a      	movs	r4, #10
 800ad74:	193b      	adds	r3, r7, r4
 800ad76:	1c02      	adds	r2, r0, #0
 800ad78:	801a      	strh	r2, [r3, #0]
 800ad7a:	2308      	movs	r3, #8
 800ad7c:	18fb      	adds	r3, r7, r3
 800ad7e:	1c0a      	adds	r2, r1, #0
 800ad80:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800ad82:	0021      	movs	r1, r4
 800ad84:	187b      	adds	r3, r7, r1
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	2280      	movs	r2, #128	@ 0x80
 800ad8a:	4013      	ands	r3, r2
 800ad8c:	b29b      	uxth	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00d      	beq.n	800adae <HAL_PCDEx_PMAConfig+0x4a>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad92:	187b      	adds	r3, r7, r1
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	2207      	movs	r2, #7
 800ad98:	401a      	ands	r2, r3
 800ad9a:	0013      	movs	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	189b      	adds	r3, r3, r2
 800ada0:	00db      	lsls	r3, r3, #3
 800ada2:	3310      	adds	r3, #16
 800ada4:	68fa      	ldr	r2, [r7, #12]
 800ada6:	18d3      	adds	r3, r2, r3
 800ada8:	3304      	adds	r3, #4
 800adaa:	617b      	str	r3, [r7, #20]
 800adac:	e00c      	b.n	800adc8 <HAL_PCDEx_PMAConfig+0x64>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800adae:	230a      	movs	r3, #10
 800adb0:	18fb      	adds	r3, r7, r3
 800adb2:	881a      	ldrh	r2, [r3, #0]
 800adb4:	0013      	movs	r3, r2
 800adb6:	009b      	lsls	r3, r3, #2
 800adb8:	189b      	adds	r3, r3, r2
 800adba:	00db      	lsls	r3, r3, #3
 800adbc:	3351      	adds	r3, #81	@ 0x51
 800adbe:	33ff      	adds	r3, #255	@ 0xff
 800adc0:	68fa      	ldr	r2, [r7, #12]
 800adc2:	18d3      	adds	r3, r2, r3
 800adc4:	3304      	adds	r3, #4
 800adc6:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800adc8:	2308      	movs	r3, #8
 800adca:	18fb      	adds	r3, r7, r3
 800adcc:	881b      	ldrh	r3, [r3, #0]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d107      	bne.n	800ade2 <HAL_PCDEx_PMAConfig+0x7e>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2200      	movs	r2, #0
 800add6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	b29a      	uxth	r2, r3
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	80da      	strh	r2, [r3, #6]
 800ade0:	e00b      	b.n	800adfa <HAL_PCDEx_PMAConfig+0x96>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	2201      	movs	r2, #1
 800ade6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	b29a      	uxth	r2, r3
 800adec:	697b      	ldr	r3, [r7, #20]
 800adee:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	0c1b      	lsrs	r3, r3, #16
 800adf4:	b29a      	uxth	r2, r3
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	0018      	movs	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b007      	add	sp, #28
 800ae02:	bd90      	pop	{r4, r7, pc}

0800ae04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b084      	sub	sp, #16
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]

  USB_DRD_TypeDef *USBx = hpcd->Instance;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	23b5      	movs	r3, #181	@ 0xb5
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	2101      	movs	r1, #1
 800ae1a:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	23b3      	movs	r3, #179	@ 0xb3
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	2100      	movs	r1, #0
 800ae24:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae2a:	2201      	movs	r2, #1
 800ae2c:	431a      	orrs	r2, r3
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	655a      	str	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae36:	2202      	movs	r2, #2
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	655a      	str	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800ae3e:	2300      	movs	r3, #0
}
 800ae40:	0018      	movs	r0, r3
 800ae42:	46bd      	mov	sp, r7
 800ae44:	b004      	add	sp, #16
 800ae46:	bd80      	pop	{r7, pc}

0800ae48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b082      	sub	sp, #8
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	000a      	movs	r2, r1
 800ae52:	1cfb      	adds	r3, r7, #3
 800ae54:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800ae56:	46c0      	nop			@ (mov r8, r8)
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	b002      	add	sp, #8
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800ae64:	4b04      	ldr	r3, [pc, #16]	@ (800ae78 <HAL_PWREx_EnableVddUSB+0x18>)
 800ae66:	685a      	ldr	r2, [r3, #4]
 800ae68:	4b03      	ldr	r3, [pc, #12]	@ (800ae78 <HAL_PWREx_EnableVddUSB+0x18>)
 800ae6a:	2180      	movs	r1, #128	@ 0x80
 800ae6c:	00c9      	lsls	r1, r1, #3
 800ae6e:	430a      	orrs	r2, r1
 800ae70:	605a      	str	r2, [r3, #4]
}
 800ae72:	46c0      	nop			@ (mov r8, r8)
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	40007000 	.word	0x40007000

0800ae7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b084      	sub	sp, #16
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800ae84:	4b19      	ldr	r3, [pc, #100]	@ (800aeec <HAL_PWREx_ControlVoltageScaling+0x70>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a19      	ldr	r2, [pc, #100]	@ (800aef0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	0019      	movs	r1, r3
 800ae8e:	4b17      	ldr	r3, [pc, #92]	@ (800aeec <HAL_PWREx_ControlVoltageScaling+0x70>)
 800ae90:	687a      	ldr	r2, [r7, #4]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	2380      	movs	r3, #128	@ 0x80
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d11f      	bne.n	800aee0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800aea0:	4b14      	ldr	r3, [pc, #80]	@ (800aef4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	0013      	movs	r3, r2
 800aea6:	005b      	lsls	r3, r3, #1
 800aea8:	189b      	adds	r3, r3, r2
 800aeaa:	005b      	lsls	r3, r3, #1
 800aeac:	4912      	ldr	r1, [pc, #72]	@ (800aef8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800aeae:	0018      	movs	r0, r3
 800aeb0:	f7fb fac8 	bl	8006444 <__udivsi3>
 800aeb4:	0003      	movs	r3, r0
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aeba:	e008      	b.n	800aece <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d003      	beq.n	800aeca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3b01      	subs	r3, #1
 800aec6:	60fb      	str	r3, [r7, #12]
 800aec8:	e001      	b.n	800aece <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800aeca:	2303      	movs	r3, #3
 800aecc:	e009      	b.n	800aee2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800aece:	4b07      	ldr	r3, [pc, #28]	@ (800aeec <HAL_PWREx_ControlVoltageScaling+0x70>)
 800aed0:	695a      	ldr	r2, [r3, #20]
 800aed2:	2380      	movs	r3, #128	@ 0x80
 800aed4:	00db      	lsls	r3, r3, #3
 800aed6:	401a      	ands	r2, r3
 800aed8:	2380      	movs	r3, #128	@ 0x80
 800aeda:	00db      	lsls	r3, r3, #3
 800aedc:	429a      	cmp	r2, r3
 800aede:	d0ed      	beq.n	800aebc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800aee0:	2300      	movs	r3, #0
}
 800aee2:	0018      	movs	r0, r3
 800aee4:	46bd      	mov	sp, r7
 800aee6:	b004      	add	sp, #16
 800aee8:	bd80      	pop	{r7, pc}
 800aeea:	46c0      	nop			@ (mov r8, r8)
 800aeec:	40007000 	.word	0x40007000
 800aef0:	fffff9ff 	.word	0xfffff9ff
 800aef4:	20000004 	.word	0x20000004
 800aef8:	000f4240 	.word	0x000f4240

0800aefc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800af00:	4b03      	ldr	r3, [pc, #12]	@ (800af10 <LL_RCC_GetAPB1Prescaler+0x14>)
 800af02:	689a      	ldr	r2, [r3, #8]
 800af04:	23e0      	movs	r3, #224	@ 0xe0
 800af06:	01db      	lsls	r3, r3, #7
 800af08:	4013      	ands	r3, r2
}
 800af0a:	0018      	movs	r0, r3
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}
 800af10:	40021000 	.word	0x40021000

0800af14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b088      	sub	sp, #32
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d102      	bne.n	800af28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800af22:	2301      	movs	r3, #1
 800af24:	f000 fb50 	bl	800b5c8 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2201      	movs	r2, #1
 800af2e:	4013      	ands	r3, r2
 800af30:	d100      	bne.n	800af34 <HAL_RCC_OscConfig+0x20>
 800af32:	e07c      	b.n	800b02e <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af34:	4bc3      	ldr	r3, [pc, #780]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	2238      	movs	r2, #56	@ 0x38
 800af3a:	4013      	ands	r3, r2
 800af3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af3e:	4bc1      	ldr	r3, [pc, #772]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	2203      	movs	r2, #3
 800af44:	4013      	ands	r3, r2
 800af46:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	2b10      	cmp	r3, #16
 800af4c:	d102      	bne.n	800af54 <HAL_RCC_OscConfig+0x40>
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	2b03      	cmp	r3, #3
 800af52:	d002      	beq.n	800af5a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	2b08      	cmp	r3, #8
 800af58:	d10b      	bne.n	800af72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af5a:	4bba      	ldr	r3, [pc, #744]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	2380      	movs	r3, #128	@ 0x80
 800af60:	029b      	lsls	r3, r3, #10
 800af62:	4013      	ands	r3, r2
 800af64:	d062      	beq.n	800b02c <HAL_RCC_OscConfig+0x118>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d15e      	bne.n	800b02c <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 800af6e:	2301      	movs	r3, #1
 800af70:	e32a      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	685a      	ldr	r2, [r3, #4]
 800af76:	2380      	movs	r3, #128	@ 0x80
 800af78:	025b      	lsls	r3, r3, #9
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d107      	bne.n	800af8e <HAL_RCC_OscConfig+0x7a>
 800af7e:	4bb1      	ldr	r3, [pc, #708]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800af80:	681a      	ldr	r2, [r3, #0]
 800af82:	4bb0      	ldr	r3, [pc, #704]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800af84:	2180      	movs	r1, #128	@ 0x80
 800af86:	0249      	lsls	r1, r1, #9
 800af88:	430a      	orrs	r2, r1
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	e020      	b.n	800afd0 <HAL_RCC_OscConfig+0xbc>
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	23a0      	movs	r3, #160	@ 0xa0
 800af94:	02db      	lsls	r3, r3, #11
 800af96:	429a      	cmp	r2, r3
 800af98:	d10e      	bne.n	800afb8 <HAL_RCC_OscConfig+0xa4>
 800af9a:	4baa      	ldr	r3, [pc, #680]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	4ba9      	ldr	r3, [pc, #676]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800afa0:	2180      	movs	r1, #128	@ 0x80
 800afa2:	02c9      	lsls	r1, r1, #11
 800afa4:	430a      	orrs	r2, r1
 800afa6:	601a      	str	r2, [r3, #0]
 800afa8:	4ba6      	ldr	r3, [pc, #664]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	4ba5      	ldr	r3, [pc, #660]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800afae:	2180      	movs	r1, #128	@ 0x80
 800afb0:	0249      	lsls	r1, r1, #9
 800afb2:	430a      	orrs	r2, r1
 800afb4:	601a      	str	r2, [r3, #0]
 800afb6:	e00b      	b.n	800afd0 <HAL_RCC_OscConfig+0xbc>
 800afb8:	4ba2      	ldr	r3, [pc, #648]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	4ba1      	ldr	r3, [pc, #644]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800afbe:	49a2      	ldr	r1, [pc, #648]	@ (800b248 <HAL_RCC_OscConfig+0x334>)
 800afc0:	400a      	ands	r2, r1
 800afc2:	601a      	str	r2, [r3, #0]
 800afc4:	4b9f      	ldr	r3, [pc, #636]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800afc6:	681a      	ldr	r2, [r3, #0]
 800afc8:	4b9e      	ldr	r3, [pc, #632]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800afca:	49a0      	ldr	r1, [pc, #640]	@ (800b24c <HAL_RCC_OscConfig+0x338>)
 800afcc:	400a      	ands	r2, r1
 800afce:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	685b      	ldr	r3, [r3, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d014      	beq.n	800b002 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afd8:	f7fd f984 	bl	80082e4 <HAL_GetTick>
 800afdc:	0003      	movs	r3, r0
 800afde:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800afe0:	e008      	b.n	800aff4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afe2:	f7fd f97f 	bl	80082e4 <HAL_GetTick>
 800afe6:	0002      	movs	r2, r0
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	1ad3      	subs	r3, r2, r3
 800afec:	2b64      	cmp	r3, #100	@ 0x64
 800afee:	d901      	bls.n	800aff4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 800aff0:	2303      	movs	r3, #3
 800aff2:	e2e9      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800aff4:	4b93      	ldr	r3, [pc, #588]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	2380      	movs	r3, #128	@ 0x80
 800affa:	029b      	lsls	r3, r3, #10
 800affc:	4013      	ands	r3, r2
 800affe:	d0f0      	beq.n	800afe2 <HAL_RCC_OscConfig+0xce>
 800b000:	e015      	b.n	800b02e <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b002:	f7fd f96f 	bl	80082e4 <HAL_GetTick>
 800b006:	0003      	movs	r3, r0
 800b008:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b00a:	e008      	b.n	800b01e <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b00c:	f7fd f96a 	bl	80082e4 <HAL_GetTick>
 800b010:	0002      	movs	r2, r0
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	1ad3      	subs	r3, r2, r3
 800b016:	2b64      	cmp	r3, #100	@ 0x64
 800b018:	d901      	bls.n	800b01e <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e2d4      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b01e:	4b89      	ldr	r3, [pc, #548]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b020:	681a      	ldr	r2, [r3, #0]
 800b022:	2380      	movs	r3, #128	@ 0x80
 800b024:	029b      	lsls	r3, r3, #10
 800b026:	4013      	ands	r3, r2
 800b028:	d1f0      	bne.n	800b00c <HAL_RCC_OscConfig+0xf8>
 800b02a:	e000      	b.n	800b02e <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b02c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2202      	movs	r2, #2
 800b034:	4013      	ands	r3, r2
 800b036:	d100      	bne.n	800b03a <HAL_RCC_OscConfig+0x126>
 800b038:	e099      	b.n	800b16e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b03a:	4b82      	ldr	r3, [pc, #520]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	2238      	movs	r2, #56	@ 0x38
 800b040:	4013      	ands	r3, r2
 800b042:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b044:	4b7f      	ldr	r3, [pc, #508]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	2203      	movs	r2, #3
 800b04a:	4013      	ands	r3, r2
 800b04c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800b04e:	69bb      	ldr	r3, [r7, #24]
 800b050:	2b10      	cmp	r3, #16
 800b052:	d102      	bne.n	800b05a <HAL_RCC_OscConfig+0x146>
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	2b02      	cmp	r3, #2
 800b058:	d002      	beq.n	800b060 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d135      	bne.n	800b0cc <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b060:	4b78      	ldr	r3, [pc, #480]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	2380      	movs	r3, #128	@ 0x80
 800b066:	00db      	lsls	r3, r3, #3
 800b068:	4013      	ands	r3, r2
 800b06a:	d005      	beq.n	800b078 <HAL_RCC_OscConfig+0x164>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	68db      	ldr	r3, [r3, #12]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d101      	bne.n	800b078 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800b074:	2301      	movs	r3, #1
 800b076:	e2a7      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b078:	4b72      	ldr	r3, [pc, #456]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	4a74      	ldr	r2, [pc, #464]	@ (800b250 <HAL_RCC_OscConfig+0x33c>)
 800b07e:	4013      	ands	r3, r2
 800b080:	0019      	movs	r1, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	695b      	ldr	r3, [r3, #20]
 800b086:	021a      	lsls	r2, r3, #8
 800b088:	4b6e      	ldr	r3, [pc, #440]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b08a:	430a      	orrs	r2, r1
 800b08c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d112      	bne.n	800b0ba <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b094:	4b6b      	ldr	r3, [pc, #428]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a6e      	ldr	r2, [pc, #440]	@ (800b254 <HAL_RCC_OscConfig+0x340>)
 800b09a:	4013      	ands	r3, r2
 800b09c:	0019      	movs	r1, r3
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	691a      	ldr	r2, [r3, #16]
 800b0a2:	4b68      	ldr	r3, [pc, #416]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800b0a8:	4b66      	ldr	r3, [pc, #408]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	0adb      	lsrs	r3, r3, #11
 800b0ae:	2207      	movs	r2, #7
 800b0b0:	4013      	ands	r3, r2
 800b0b2:	4a69      	ldr	r2, [pc, #420]	@ (800b258 <HAL_RCC_OscConfig+0x344>)
 800b0b4:	40da      	lsrs	r2, r3
 800b0b6:	4b69      	ldr	r3, [pc, #420]	@ (800b25c <HAL_RCC_OscConfig+0x348>)
 800b0b8:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b0ba:	4b69      	ldr	r3, [pc, #420]	@ (800b260 <HAL_RCC_OscConfig+0x34c>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	0018      	movs	r0, r3
 800b0c0:	f7fc fa94 	bl	80075ec <HAL_InitTick>
 800b0c4:	1e03      	subs	r3, r0, #0
 800b0c6:	d051      	beq.n	800b16c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e27d      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d030      	beq.n	800b136 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800b0d4:	4b5b      	ldr	r3, [pc, #364]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a5e      	ldr	r2, [pc, #376]	@ (800b254 <HAL_RCC_OscConfig+0x340>)
 800b0da:	4013      	ands	r3, r2
 800b0dc:	0019      	movs	r1, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	691a      	ldr	r2, [r3, #16]
 800b0e2:	4b58      	ldr	r3, [pc, #352]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b0e4:	430a      	orrs	r2, r1
 800b0e6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800b0e8:	4b56      	ldr	r3, [pc, #344]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b0ea:	681a      	ldr	r2, [r3, #0]
 800b0ec:	4b55      	ldr	r3, [pc, #340]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b0ee:	2180      	movs	r1, #128	@ 0x80
 800b0f0:	0049      	lsls	r1, r1, #1
 800b0f2:	430a      	orrs	r2, r1
 800b0f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0f6:	f7fd f8f5 	bl	80082e4 <HAL_GetTick>
 800b0fa:	0003      	movs	r3, r0
 800b0fc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b0fe:	e008      	b.n	800b112 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b100:	f7fd f8f0 	bl	80082e4 <HAL_GetTick>
 800b104:	0002      	movs	r2, r0
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d901      	bls.n	800b112 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e25a      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b112:	4b4c      	ldr	r3, [pc, #304]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b114:	681a      	ldr	r2, [r3, #0]
 800b116:	2380      	movs	r3, #128	@ 0x80
 800b118:	00db      	lsls	r3, r3, #3
 800b11a:	4013      	ands	r3, r2
 800b11c:	d0f0      	beq.n	800b100 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b11e:	4b49      	ldr	r3, [pc, #292]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	4a4b      	ldr	r2, [pc, #300]	@ (800b250 <HAL_RCC_OscConfig+0x33c>)
 800b124:	4013      	ands	r3, r2
 800b126:	0019      	movs	r1, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	695b      	ldr	r3, [r3, #20]
 800b12c:	021a      	lsls	r2, r3, #8
 800b12e:	4b45      	ldr	r3, [pc, #276]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b130:	430a      	orrs	r2, r1
 800b132:	605a      	str	r2, [r3, #4]
 800b134:	e01b      	b.n	800b16e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800b136:	4b43      	ldr	r3, [pc, #268]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	4b42      	ldr	r3, [pc, #264]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b13c:	4949      	ldr	r1, [pc, #292]	@ (800b264 <HAL_RCC_OscConfig+0x350>)
 800b13e:	400a      	ands	r2, r1
 800b140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b142:	f7fd f8cf 	bl	80082e4 <HAL_GetTick>
 800b146:	0003      	movs	r3, r0
 800b148:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b14a:	e008      	b.n	800b15e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b14c:	f7fd f8ca 	bl	80082e4 <HAL_GetTick>
 800b150:	0002      	movs	r2, r0
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	1ad3      	subs	r3, r2, r3
 800b156:	2b02      	cmp	r3, #2
 800b158:	d901      	bls.n	800b15e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 800b15a:	2303      	movs	r3, #3
 800b15c:	e234      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b15e:	4b39      	ldr	r3, [pc, #228]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	2380      	movs	r3, #128	@ 0x80
 800b164:	00db      	lsls	r3, r3, #3
 800b166:	4013      	ands	r3, r2
 800b168:	d1f0      	bne.n	800b14c <HAL_RCC_OscConfig+0x238>
 800b16a:	e000      	b.n	800b16e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b16c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2208      	movs	r2, #8
 800b174:	4013      	ands	r3, r2
 800b176:	d047      	beq.n	800b208 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b178:	4b32      	ldr	r3, [pc, #200]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	2238      	movs	r2, #56	@ 0x38
 800b17e:	4013      	ands	r3, r2
 800b180:	2b18      	cmp	r3, #24
 800b182:	d10a      	bne.n	800b19a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800b184:	4b2f      	ldr	r3, [pc, #188]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b188:	2202      	movs	r2, #2
 800b18a:	4013      	ands	r3, r2
 800b18c:	d03c      	beq.n	800b208 <HAL_RCC_OscConfig+0x2f4>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d138      	bne.n	800b208 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e216      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	699b      	ldr	r3, [r3, #24]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d019      	beq.n	800b1d6 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800b1a2:	4b28      	ldr	r3, [pc, #160]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b1a4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b1a6:	4b27      	ldr	r3, [pc, #156]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b1a8:	2101      	movs	r1, #1
 800b1aa:	430a      	orrs	r2, r1
 800b1ac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ae:	f7fd f899 	bl	80082e4 <HAL_GetTick>
 800b1b2:	0003      	movs	r3, r0
 800b1b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b1b6:	e008      	b.n	800b1ca <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1b8:	f7fd f894 	bl	80082e4 <HAL_GetTick>
 800b1bc:	0002      	movs	r2, r0
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	1ad3      	subs	r3, r2, r3
 800b1c2:	2b02      	cmp	r3, #2
 800b1c4:	d901      	bls.n	800b1ca <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	e1fe      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b1ca:	4b1e      	ldr	r3, [pc, #120]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b1cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1ce:	2202      	movs	r2, #2
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	d0f1      	beq.n	800b1b8 <HAL_RCC_OscConfig+0x2a4>
 800b1d4:	e018      	b.n	800b208 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800b1d6:	4b1b      	ldr	r3, [pc, #108]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b1d8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b1da:	4b1a      	ldr	r3, [pc, #104]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b1dc:	2101      	movs	r1, #1
 800b1de:	438a      	bics	r2, r1
 800b1e0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1e2:	f7fd f87f 	bl	80082e4 <HAL_GetTick>
 800b1e6:	0003      	movs	r3, r0
 800b1e8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b1ea:	e008      	b.n	800b1fe <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1ec:	f7fd f87a 	bl	80082e4 <HAL_GetTick>
 800b1f0:	0002      	movs	r2, r0
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	2b02      	cmp	r3, #2
 800b1f8:	d901      	bls.n	800b1fe <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800b1fa:	2303      	movs	r3, #3
 800b1fc:	e1e4      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b1fe:	4b11      	ldr	r3, [pc, #68]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b200:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b202:	2202      	movs	r2, #2
 800b204:	4013      	ands	r3, r2
 800b206:	d1f1      	bne.n	800b1ec <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2204      	movs	r2, #4
 800b20e:	4013      	ands	r3, r2
 800b210:	d100      	bne.n	800b214 <HAL_RCC_OscConfig+0x300>
 800b212:	e0c7      	b.n	800b3a4 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b214:	231f      	movs	r3, #31
 800b216:	18fb      	adds	r3, r7, r3
 800b218:	2200      	movs	r2, #0
 800b21a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b21c:	4b09      	ldr	r3, [pc, #36]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b21e:	689b      	ldr	r3, [r3, #8]
 800b220:	2238      	movs	r2, #56	@ 0x38
 800b222:	4013      	ands	r3, r2
 800b224:	2b20      	cmp	r3, #32
 800b226:	d11f      	bne.n	800b268 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800b228:	4b06      	ldr	r3, [pc, #24]	@ (800b244 <HAL_RCC_OscConfig+0x330>)
 800b22a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b22c:	2202      	movs	r2, #2
 800b22e:	4013      	ands	r3, r2
 800b230:	d100      	bne.n	800b234 <HAL_RCC_OscConfig+0x320>
 800b232:	e0b7      	b.n	800b3a4 <HAL_RCC_OscConfig+0x490>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d000      	beq.n	800b23e <HAL_RCC_OscConfig+0x32a>
 800b23c:	e0b2      	b.n	800b3a4 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 800b23e:	2301      	movs	r3, #1
 800b240:	e1c2      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
 800b242:	46c0      	nop			@ (mov r8, r8)
 800b244:	40021000 	.word	0x40021000
 800b248:	fffeffff 	.word	0xfffeffff
 800b24c:	fffbffff 	.word	0xfffbffff
 800b250:	ffff80ff 	.word	0xffff80ff
 800b254:	ffffc7ff 	.word	0xffffc7ff
 800b258:	00f42400 	.word	0x00f42400
 800b25c:	20000004 	.word	0x20000004
 800b260:	20000008 	.word	0x20000008
 800b264:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b268:	4bb5      	ldr	r3, [pc, #724]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b26a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b26c:	2380      	movs	r3, #128	@ 0x80
 800b26e:	055b      	lsls	r3, r3, #21
 800b270:	4013      	ands	r3, r2
 800b272:	d101      	bne.n	800b278 <HAL_RCC_OscConfig+0x364>
 800b274:	2301      	movs	r3, #1
 800b276:	e000      	b.n	800b27a <HAL_RCC_OscConfig+0x366>
 800b278:	2300      	movs	r3, #0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d011      	beq.n	800b2a2 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800b27e:	4bb0      	ldr	r3, [pc, #704]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b280:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b282:	4baf      	ldr	r3, [pc, #700]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b284:	2180      	movs	r1, #128	@ 0x80
 800b286:	0549      	lsls	r1, r1, #21
 800b288:	430a      	orrs	r2, r1
 800b28a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b28c:	4bac      	ldr	r3, [pc, #688]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b28e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b290:	2380      	movs	r3, #128	@ 0x80
 800b292:	055b      	lsls	r3, r3, #21
 800b294:	4013      	ands	r3, r2
 800b296:	60fb      	str	r3, [r7, #12]
 800b298:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800b29a:	231f      	movs	r3, #31
 800b29c:	18fb      	adds	r3, r7, r3
 800b29e:	2201      	movs	r2, #1
 800b2a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2a2:	4ba8      	ldr	r3, [pc, #672]	@ (800b544 <HAL_RCC_OscConfig+0x630>)
 800b2a4:	681a      	ldr	r2, [r3, #0]
 800b2a6:	2380      	movs	r3, #128	@ 0x80
 800b2a8:	005b      	lsls	r3, r3, #1
 800b2aa:	4013      	ands	r3, r2
 800b2ac:	d11a      	bne.n	800b2e4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2ae:	4ba5      	ldr	r3, [pc, #660]	@ (800b544 <HAL_RCC_OscConfig+0x630>)
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	4ba4      	ldr	r3, [pc, #656]	@ (800b544 <HAL_RCC_OscConfig+0x630>)
 800b2b4:	2180      	movs	r1, #128	@ 0x80
 800b2b6:	0049      	lsls	r1, r1, #1
 800b2b8:	430a      	orrs	r2, r1
 800b2ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800b2bc:	f7fd f812 	bl	80082e4 <HAL_GetTick>
 800b2c0:	0003      	movs	r3, r0
 800b2c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2c4:	e008      	b.n	800b2d8 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2c6:	f7fd f80d 	bl	80082e4 <HAL_GetTick>
 800b2ca:	0002      	movs	r2, r0
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	1ad3      	subs	r3, r2, r3
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	d901      	bls.n	800b2d8 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800b2d4:	2303      	movs	r3, #3
 800b2d6:	e177      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2d8:	4b9a      	ldr	r3, [pc, #616]	@ (800b544 <HAL_RCC_OscConfig+0x630>)
 800b2da:	681a      	ldr	r2, [r3, #0]
 800b2dc:	2380      	movs	r3, #128	@ 0x80
 800b2de:	005b      	lsls	r3, r3, #1
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	d0f0      	beq.n	800b2c6 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	689b      	ldr	r3, [r3, #8]
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d106      	bne.n	800b2fa <HAL_RCC_OscConfig+0x3e6>
 800b2ec:	4b94      	ldr	r3, [pc, #592]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b2ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b2f0:	4b93      	ldr	r3, [pc, #588]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b2f8:	e01c      	b.n	800b334 <HAL_RCC_OscConfig+0x420>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	689b      	ldr	r3, [r3, #8]
 800b2fe:	2b05      	cmp	r3, #5
 800b300:	d10c      	bne.n	800b31c <HAL_RCC_OscConfig+0x408>
 800b302:	4b8f      	ldr	r3, [pc, #572]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b304:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b306:	4b8e      	ldr	r3, [pc, #568]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b308:	2104      	movs	r1, #4
 800b30a:	430a      	orrs	r2, r1
 800b30c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b30e:	4b8c      	ldr	r3, [pc, #560]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b310:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b312:	4b8b      	ldr	r3, [pc, #556]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b314:	2101      	movs	r1, #1
 800b316:	430a      	orrs	r2, r1
 800b318:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b31a:	e00b      	b.n	800b334 <HAL_RCC_OscConfig+0x420>
 800b31c:	4b88      	ldr	r3, [pc, #544]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b31e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b320:	4b87      	ldr	r3, [pc, #540]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b322:	2101      	movs	r1, #1
 800b324:	438a      	bics	r2, r1
 800b326:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b328:	4b85      	ldr	r3, [pc, #532]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b32a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b32c:	4b84      	ldr	r3, [pc, #528]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b32e:	2104      	movs	r1, #4
 800b330:	438a      	bics	r2, r1
 800b332:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d014      	beq.n	800b366 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b33c:	f7fc ffd2 	bl	80082e4 <HAL_GetTick>
 800b340:	0003      	movs	r3, r0
 800b342:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b344:	e009      	b.n	800b35a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b346:	f7fc ffcd 	bl	80082e4 <HAL_GetTick>
 800b34a:	0002      	movs	r2, r0
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	1ad3      	subs	r3, r2, r3
 800b350:	4a7d      	ldr	r2, [pc, #500]	@ (800b548 <HAL_RCC_OscConfig+0x634>)
 800b352:	4293      	cmp	r3, r2
 800b354:	d901      	bls.n	800b35a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800b356:	2303      	movs	r3, #3
 800b358:	e136      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b35a:	4b79      	ldr	r3, [pc, #484]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b35c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b35e:	2202      	movs	r2, #2
 800b360:	4013      	ands	r3, r2
 800b362:	d0f0      	beq.n	800b346 <HAL_RCC_OscConfig+0x432>
 800b364:	e013      	b.n	800b38e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b366:	f7fc ffbd 	bl	80082e4 <HAL_GetTick>
 800b36a:	0003      	movs	r3, r0
 800b36c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b36e:	e009      	b.n	800b384 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b370:	f7fc ffb8 	bl	80082e4 <HAL_GetTick>
 800b374:	0002      	movs	r2, r0
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	1ad3      	subs	r3, r2, r3
 800b37a:	4a73      	ldr	r2, [pc, #460]	@ (800b548 <HAL_RCC_OscConfig+0x634>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d901      	bls.n	800b384 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 800b380:	2303      	movs	r3, #3
 800b382:	e121      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b384:	4b6e      	ldr	r3, [pc, #440]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b388:	2202      	movs	r2, #2
 800b38a:	4013      	ands	r3, r2
 800b38c:	d1f0      	bne.n	800b370 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800b38e:	231f      	movs	r3, #31
 800b390:	18fb      	adds	r3, r7, r3
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d105      	bne.n	800b3a4 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800b398:	4b69      	ldr	r3, [pc, #420]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b39a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b39c:	4b68      	ldr	r3, [pc, #416]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b39e:	496b      	ldr	r1, [pc, #428]	@ (800b54c <HAL_RCC_OscConfig+0x638>)
 800b3a0:	400a      	ands	r2, r1
 800b3a2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2220      	movs	r2, #32
 800b3aa:	4013      	ands	r3, r2
 800b3ac:	d039      	beq.n	800b422 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	69db      	ldr	r3, [r3, #28]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d01b      	beq.n	800b3ee <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b3b6:	4b62      	ldr	r3, [pc, #392]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	4b61      	ldr	r3, [pc, #388]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b3bc:	2180      	movs	r1, #128	@ 0x80
 800b3be:	03c9      	lsls	r1, r1, #15
 800b3c0:	430a      	orrs	r2, r1
 800b3c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3c4:	f7fc ff8e 	bl	80082e4 <HAL_GetTick>
 800b3c8:	0003      	movs	r3, r0
 800b3ca:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b3cc:	e008      	b.n	800b3e0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3ce:	f7fc ff89 	bl	80082e4 <HAL_GetTick>
 800b3d2:	0002      	movs	r2, r0
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	1ad3      	subs	r3, r2, r3
 800b3d8:	2b02      	cmp	r3, #2
 800b3da:	d901      	bls.n	800b3e0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e0f3      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800b3e0:	4b57      	ldr	r3, [pc, #348]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	2380      	movs	r3, #128	@ 0x80
 800b3e6:	041b      	lsls	r3, r3, #16
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	d0f0      	beq.n	800b3ce <HAL_RCC_OscConfig+0x4ba>
 800b3ec:	e019      	b.n	800b422 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b3ee:	4b54      	ldr	r3, [pc, #336]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	4b53      	ldr	r3, [pc, #332]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b3f4:	4956      	ldr	r1, [pc, #344]	@ (800b550 <HAL_RCC_OscConfig+0x63c>)
 800b3f6:	400a      	ands	r2, r1
 800b3f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3fa:	f7fc ff73 	bl	80082e4 <HAL_GetTick>
 800b3fe:	0003      	movs	r3, r0
 800b400:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b402:	e008      	b.n	800b416 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b404:	f7fc ff6e 	bl	80082e4 <HAL_GetTick>
 800b408:	0002      	movs	r2, r0
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	1ad3      	subs	r3, r2, r3
 800b40e:	2b02      	cmp	r3, #2
 800b410:	d901      	bls.n	800b416 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 800b412:	2303      	movs	r3, #3
 800b414:	e0d8      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800b416:	4b4a      	ldr	r3, [pc, #296]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b418:	681a      	ldr	r2, [r3, #0]
 800b41a:	2380      	movs	r3, #128	@ 0x80
 800b41c:	041b      	lsls	r3, r3, #16
 800b41e:	4013      	ands	r3, r2
 800b420:	d1f0      	bne.n	800b404 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d100      	bne.n	800b42c <HAL_RCC_OscConfig+0x518>
 800b42a:	e0cc      	b.n	800b5c6 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b42c:	4b44      	ldr	r3, [pc, #272]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b42e:	689b      	ldr	r3, [r3, #8]
 800b430:	2238      	movs	r2, #56	@ 0x38
 800b432:	4013      	ands	r3, r2
 800b434:	2b10      	cmp	r3, #16
 800b436:	d100      	bne.n	800b43a <HAL_RCC_OscConfig+0x526>
 800b438:	e07b      	b.n	800b532 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6a1b      	ldr	r3, [r3, #32]
 800b43e:	2b02      	cmp	r3, #2
 800b440:	d156      	bne.n	800b4f0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b442:	4b3f      	ldr	r3, [pc, #252]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b444:	681a      	ldr	r2, [r3, #0]
 800b446:	4b3e      	ldr	r3, [pc, #248]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b448:	4942      	ldr	r1, [pc, #264]	@ (800b554 <HAL_RCC_OscConfig+0x640>)
 800b44a:	400a      	ands	r2, r1
 800b44c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b44e:	f7fc ff49 	bl	80082e4 <HAL_GetTick>
 800b452:	0003      	movs	r3, r0
 800b454:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b456:	e008      	b.n	800b46a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b458:	f7fc ff44 	bl	80082e4 <HAL_GetTick>
 800b45c:	0002      	movs	r2, r0
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	2b02      	cmp	r3, #2
 800b464:	d901      	bls.n	800b46a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800b466:	2303      	movs	r3, #3
 800b468:	e0ae      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b46a:	4b35      	ldr	r3, [pc, #212]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b46c:	681a      	ldr	r2, [r3, #0]
 800b46e:	2380      	movs	r3, #128	@ 0x80
 800b470:	049b      	lsls	r3, r3, #18
 800b472:	4013      	ands	r3, r2
 800b474:	d1f0      	bne.n	800b458 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b476:	4b32      	ldr	r3, [pc, #200]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b478:	68db      	ldr	r3, [r3, #12]
 800b47a:	4a37      	ldr	r2, [pc, #220]	@ (800b558 <HAL_RCC_OscConfig+0x644>)
 800b47c:	4013      	ands	r3, r2
 800b47e:	0019      	movs	r1, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b488:	431a      	orrs	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b48e:	021b      	lsls	r3, r3, #8
 800b490:	431a      	orrs	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b496:	431a      	orrs	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b49c:	431a      	orrs	r2, r3
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	4b26      	ldr	r3, [pc, #152]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b4a6:	430a      	orrs	r2, r1
 800b4a8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4aa:	4b25      	ldr	r3, [pc, #148]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b4ac:	681a      	ldr	r2, [r3, #0]
 800b4ae:	4b24      	ldr	r3, [pc, #144]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b4b0:	2180      	movs	r1, #128	@ 0x80
 800b4b2:	0449      	lsls	r1, r1, #17
 800b4b4:	430a      	orrs	r2, r1
 800b4b6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800b4b8:	4b21      	ldr	r3, [pc, #132]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b4ba:	68da      	ldr	r2, [r3, #12]
 800b4bc:	4b20      	ldr	r3, [pc, #128]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b4be:	2180      	movs	r1, #128	@ 0x80
 800b4c0:	0549      	lsls	r1, r1, #21
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4c6:	f7fc ff0d 	bl	80082e4 <HAL_GetTick>
 800b4ca:	0003      	movs	r3, r0
 800b4cc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4ce:	e008      	b.n	800b4e2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4d0:	f7fc ff08 	bl	80082e4 <HAL_GetTick>
 800b4d4:	0002      	movs	r2, r0
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d901      	bls.n	800b4e2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800b4de:	2303      	movs	r3, #3
 800b4e0:	e072      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b4e2:	4b17      	ldr	r3, [pc, #92]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b4e4:	681a      	ldr	r2, [r3, #0]
 800b4e6:	2380      	movs	r3, #128	@ 0x80
 800b4e8:	049b      	lsls	r3, r3, #18
 800b4ea:	4013      	ands	r3, r2
 800b4ec:	d0f0      	beq.n	800b4d0 <HAL_RCC_OscConfig+0x5bc>
 800b4ee:	e06a      	b.n	800b5c6 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4f0:	4b13      	ldr	r3, [pc, #76]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	4b12      	ldr	r3, [pc, #72]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b4f6:	4917      	ldr	r1, [pc, #92]	@ (800b554 <HAL_RCC_OscConfig+0x640>)
 800b4f8:	400a      	ands	r2, r1
 800b4fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4fc:	f7fc fef2 	bl	80082e4 <HAL_GetTick>
 800b500:	0003      	movs	r3, r0
 800b502:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b504:	e008      	b.n	800b518 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b506:	f7fc feed 	bl	80082e4 <HAL_GetTick>
 800b50a:	0002      	movs	r2, r0
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b02      	cmp	r3, #2
 800b512:	d901      	bls.n	800b518 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	e057      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b518:	4b09      	ldr	r3, [pc, #36]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	2380      	movs	r3, #128	@ 0x80
 800b51e:	049b      	lsls	r3, r3, #18
 800b520:	4013      	ands	r3, r2
 800b522:	d1f0      	bne.n	800b506 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 800b524:	4b06      	ldr	r3, [pc, #24]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b526:	68da      	ldr	r2, [r3, #12]
 800b528:	4b05      	ldr	r3, [pc, #20]	@ (800b540 <HAL_RCC_OscConfig+0x62c>)
 800b52a:	490c      	ldr	r1, [pc, #48]	@ (800b55c <HAL_RCC_OscConfig+0x648>)
 800b52c:	400a      	ands	r2, r1
 800b52e:	60da      	str	r2, [r3, #12]
 800b530:	e049      	b.n	800b5c6 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6a1b      	ldr	r3, [r3, #32]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d112      	bne.n	800b560 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e044      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
 800b53e:	46c0      	nop			@ (mov r8, r8)
 800b540:	40021000 	.word	0x40021000
 800b544:	40007000 	.word	0x40007000
 800b548:	00001388 	.word	0x00001388
 800b54c:	efffffff 	.word	0xefffffff
 800b550:	ffbfffff 	.word	0xffbfffff
 800b554:	feffffff 	.word	0xfeffffff
 800b558:	11c1808c 	.word	0x11c1808c
 800b55c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800b560:	4b1b      	ldr	r3, [pc, #108]	@ (800b5d0 <HAL_RCC_OscConfig+0x6bc>)
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b566:	697b      	ldr	r3, [r7, #20]
 800b568:	2203      	movs	r2, #3
 800b56a:	401a      	ands	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b570:	429a      	cmp	r2, r3
 800b572:	d126      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	2270      	movs	r2, #112	@ 0x70
 800b578:	401a      	ands	r2, r3
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b57e:	429a      	cmp	r2, r3
 800b580:	d11f      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b582:	697a      	ldr	r2, [r7, #20]
 800b584:	23fe      	movs	r3, #254	@ 0xfe
 800b586:	01db      	lsls	r3, r3, #7
 800b588:	401a      	ands	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b590:	429a      	cmp	r2, r3
 800b592:	d116      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	23f8      	movs	r3, #248	@ 0xf8
 800b598:	039b      	lsls	r3, r3, #14
 800b59a:	401a      	ands	r2, r3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d10e      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	23e0      	movs	r3, #224	@ 0xe0
 800b5a8:	051b      	lsls	r3, r3, #20
 800b5aa:	401a      	ands	r2, r3
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b5b0:	429a      	cmp	r2, r3
 800b5b2:	d106      	bne.n	800b5c2 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	0f5b      	lsrs	r3, r3, #29
 800b5b8:	075a      	lsls	r2, r3, #29
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d001      	beq.n	800b5c6 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e000      	b.n	800b5c8 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	0018      	movs	r0, r3
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	b008      	add	sp, #32
 800b5ce:	bd80      	pop	{r7, pc}
 800b5d0:	40021000 	.word	0x40021000

0800b5d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e0e9      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b5e8:	4b76      	ldr	r3, [pc, #472]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f0>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2207      	movs	r2, #7
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	683a      	ldr	r2, [r7, #0]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d91e      	bls.n	800b634 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5f6:	4b73      	ldr	r3, [pc, #460]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2207      	movs	r2, #7
 800b5fc:	4393      	bics	r3, r2
 800b5fe:	0019      	movs	r1, r3
 800b600:	4b70      	ldr	r3, [pc, #448]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f0>)
 800b602:	683a      	ldr	r2, [r7, #0]
 800b604:	430a      	orrs	r2, r1
 800b606:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b608:	f7fc fe6c 	bl	80082e4 <HAL_GetTick>
 800b60c:	0003      	movs	r3, r0
 800b60e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b610:	e009      	b.n	800b626 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b612:	f7fc fe67 	bl	80082e4 <HAL_GetTick>
 800b616:	0002      	movs	r2, r0
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	1ad3      	subs	r3, r2, r3
 800b61c:	4a6a      	ldr	r2, [pc, #424]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1f4>)
 800b61e:	4293      	cmp	r3, r2
 800b620:	d901      	bls.n	800b626 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e0ca      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b626:	4b67      	ldr	r3, [pc, #412]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f0>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	2207      	movs	r2, #7
 800b62c:	4013      	ands	r3, r2
 800b62e:	683a      	ldr	r2, [r7, #0]
 800b630:	429a      	cmp	r2, r3
 800b632:	d1ee      	bne.n	800b612 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2202      	movs	r2, #2
 800b63a:	4013      	ands	r3, r2
 800b63c:	d015      	beq.n	800b66a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	2204      	movs	r2, #4
 800b644:	4013      	ands	r3, r2
 800b646:	d006      	beq.n	800b656 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800b648:	4b60      	ldr	r3, [pc, #384]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b64a:	689a      	ldr	r2, [r3, #8]
 800b64c:	4b5f      	ldr	r3, [pc, #380]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b64e:	21e0      	movs	r1, #224	@ 0xe0
 800b650:	01c9      	lsls	r1, r1, #7
 800b652:	430a      	orrs	r2, r1
 800b654:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b656:	4b5d      	ldr	r3, [pc, #372]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	4a5d      	ldr	r2, [pc, #372]	@ (800b7d0 <HAL_RCC_ClockConfig+0x1fc>)
 800b65c:	4013      	ands	r3, r2
 800b65e:	0019      	movs	r1, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	4b59      	ldr	r3, [pc, #356]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b666:	430a      	orrs	r2, r1
 800b668:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	2201      	movs	r2, #1
 800b670:	4013      	ands	r3, r2
 800b672:	d057      	beq.n	800b724 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	2b01      	cmp	r3, #1
 800b67a:	d107      	bne.n	800b68c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b67c:	4b53      	ldr	r3, [pc, #332]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b67e:	681a      	ldr	r2, [r3, #0]
 800b680:	2380      	movs	r3, #128	@ 0x80
 800b682:	029b      	lsls	r3, r3, #10
 800b684:	4013      	ands	r3, r2
 800b686:	d12b      	bne.n	800b6e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b688:	2301      	movs	r3, #1
 800b68a:	e097      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	2b02      	cmp	r3, #2
 800b692:	d107      	bne.n	800b6a4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b694:	4b4d      	ldr	r3, [pc, #308]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	2380      	movs	r3, #128	@ 0x80
 800b69a:	049b      	lsls	r3, r3, #18
 800b69c:	4013      	ands	r3, r2
 800b69e:	d11f      	bne.n	800b6e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	e08b      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	685b      	ldr	r3, [r3, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d107      	bne.n	800b6bc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b6ac:	4b47      	ldr	r3, [pc, #284]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	2380      	movs	r3, #128	@ 0x80
 800b6b2:	00db      	lsls	r3, r3, #3
 800b6b4:	4013      	ands	r3, r2
 800b6b6:	d113      	bne.n	800b6e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e07f      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2b03      	cmp	r3, #3
 800b6c2:	d106      	bne.n	800b6d2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b6c4:	4b41      	ldr	r3, [pc, #260]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b6c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b6c8:	2202      	movs	r2, #2
 800b6ca:	4013      	ands	r3, r2
 800b6cc:	d108      	bne.n	800b6e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e074      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b6d2:	4b3e      	ldr	r3, [pc, #248]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b6d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6d6:	2202      	movs	r2, #2
 800b6d8:	4013      	ands	r3, r2
 800b6da:	d101      	bne.n	800b6e0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e06d      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b6e0:	4b3a      	ldr	r3, [pc, #232]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b6e2:	689b      	ldr	r3, [r3, #8]
 800b6e4:	2207      	movs	r2, #7
 800b6e6:	4393      	bics	r3, r2
 800b6e8:	0019      	movs	r1, r3
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	685a      	ldr	r2, [r3, #4]
 800b6ee:	4b37      	ldr	r3, [pc, #220]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b6f0:	430a      	orrs	r2, r1
 800b6f2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6f4:	f7fc fdf6 	bl	80082e4 <HAL_GetTick>
 800b6f8:	0003      	movs	r3, r0
 800b6fa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6fc:	e009      	b.n	800b712 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6fe:	f7fc fdf1 	bl	80082e4 <HAL_GetTick>
 800b702:	0002      	movs	r2, r0
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	1ad3      	subs	r3, r2, r3
 800b708:	4a2f      	ldr	r2, [pc, #188]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1f4>)
 800b70a:	4293      	cmp	r3, r2
 800b70c:	d901      	bls.n	800b712 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800b70e:	2303      	movs	r3, #3
 800b710:	e054      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b712:	4b2e      	ldr	r3, [pc, #184]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b714:	689b      	ldr	r3, [r3, #8]
 800b716:	2238      	movs	r2, #56	@ 0x38
 800b718:	401a      	ands	r2, r3
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	429a      	cmp	r2, r3
 800b722:	d1ec      	bne.n	800b6fe <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b724:	4b27      	ldr	r3, [pc, #156]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f0>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	2207      	movs	r2, #7
 800b72a:	4013      	ands	r3, r2
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	429a      	cmp	r2, r3
 800b730:	d21e      	bcs.n	800b770 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b732:	4b24      	ldr	r3, [pc, #144]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f0>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2207      	movs	r2, #7
 800b738:	4393      	bics	r3, r2
 800b73a:	0019      	movs	r1, r3
 800b73c:	4b21      	ldr	r3, [pc, #132]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f0>)
 800b73e:	683a      	ldr	r2, [r7, #0]
 800b740:	430a      	orrs	r2, r1
 800b742:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b744:	f7fc fdce 	bl	80082e4 <HAL_GetTick>
 800b748:	0003      	movs	r3, r0
 800b74a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b74c:	e009      	b.n	800b762 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b74e:	f7fc fdc9 	bl	80082e4 <HAL_GetTick>
 800b752:	0002      	movs	r2, r0
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	4a1b      	ldr	r2, [pc, #108]	@ (800b7c8 <HAL_RCC_ClockConfig+0x1f4>)
 800b75a:	4293      	cmp	r3, r2
 800b75c:	d901      	bls.n	800b762 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800b75e:	2303      	movs	r3, #3
 800b760:	e02c      	b.n	800b7bc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800b762:	4b18      	ldr	r3, [pc, #96]	@ (800b7c4 <HAL_RCC_ClockConfig+0x1f0>)
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	2207      	movs	r2, #7
 800b768:	4013      	ands	r3, r2
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d1ee      	bne.n	800b74e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	2204      	movs	r2, #4
 800b776:	4013      	ands	r3, r2
 800b778:	d009      	beq.n	800b78e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800b77a:	4b14      	ldr	r3, [pc, #80]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	4a15      	ldr	r2, [pc, #84]	@ (800b7d4 <HAL_RCC_ClockConfig+0x200>)
 800b780:	4013      	ands	r3, r2
 800b782:	0019      	movs	r1, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	68da      	ldr	r2, [r3, #12]
 800b788:	4b10      	ldr	r3, [pc, #64]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b78a:	430a      	orrs	r2, r1
 800b78c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800b78e:	f000 f829 	bl	800b7e4 <HAL_RCC_GetSysClockFreq>
 800b792:	0001      	movs	r1, r0
 800b794:	4b0d      	ldr	r3, [pc, #52]	@ (800b7cc <HAL_RCC_ClockConfig+0x1f8>)
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	0a1b      	lsrs	r3, r3, #8
 800b79a:	220f      	movs	r2, #15
 800b79c:	401a      	ands	r2, r3
 800b79e:	4b0e      	ldr	r3, [pc, #56]	@ (800b7d8 <HAL_RCC_ClockConfig+0x204>)
 800b7a0:	0092      	lsls	r2, r2, #2
 800b7a2:	58d3      	ldr	r3, [r2, r3]
 800b7a4:	221f      	movs	r2, #31
 800b7a6:	4013      	ands	r3, r2
 800b7a8:	000a      	movs	r2, r1
 800b7aa:	40da      	lsrs	r2, r3
 800b7ac:	4b0b      	ldr	r3, [pc, #44]	@ (800b7dc <HAL_RCC_ClockConfig+0x208>)
 800b7ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b7b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b7e0 <HAL_RCC_ClockConfig+0x20c>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	0018      	movs	r0, r3
 800b7b6:	f7fb ff19 	bl	80075ec <HAL_InitTick>
 800b7ba:	0003      	movs	r3, r0
}
 800b7bc:	0018      	movs	r0, r3
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	b004      	add	sp, #16
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	40022000 	.word	0x40022000
 800b7c8:	00001388 	.word	0x00001388
 800b7cc:	40021000 	.word	0x40021000
 800b7d0:	fffff0ff 	.word	0xfffff0ff
 800b7d4:	ffff8fff 	.word	0xffff8fff
 800b7d8:	0801e444 	.word	0x0801e444
 800b7dc:	20000004 	.word	0x20000004
 800b7e0:	20000008 	.word	0x20000008

0800b7e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b7ea:	4b3c      	ldr	r3, [pc, #240]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b7ec:	689b      	ldr	r3, [r3, #8]
 800b7ee:	2238      	movs	r2, #56	@ 0x38
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	d10f      	bne.n	800b814 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800b7f4:	4b39      	ldr	r3, [pc, #228]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	0adb      	lsrs	r3, r3, #11
 800b7fa:	2207      	movs	r2, #7
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	2201      	movs	r2, #1
 800b800:	409a      	lsls	r2, r3
 800b802:	0013      	movs	r3, r2
 800b804:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	4835      	ldr	r0, [pc, #212]	@ (800b8e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800b80a:	f7fa fe1b 	bl	8006444 <__udivsi3>
 800b80e:	0003      	movs	r3, r0
 800b810:	613b      	str	r3, [r7, #16]
 800b812:	e05d      	b.n	800b8d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b814:	4b31      	ldr	r3, [pc, #196]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	2238      	movs	r2, #56	@ 0x38
 800b81a:	4013      	ands	r3, r2
 800b81c:	2b08      	cmp	r3, #8
 800b81e:	d102      	bne.n	800b826 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b820:	4b30      	ldr	r3, [pc, #192]	@ (800b8e4 <HAL_RCC_GetSysClockFreq+0x100>)
 800b822:	613b      	str	r3, [r7, #16]
 800b824:	e054      	b.n	800b8d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b826:	4b2d      	ldr	r3, [pc, #180]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	2238      	movs	r2, #56	@ 0x38
 800b82c:	4013      	ands	r3, r2
 800b82e:	2b10      	cmp	r3, #16
 800b830:	d138      	bne.n	800b8a4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800b832:	4b2a      	ldr	r3, [pc, #168]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	2203      	movs	r2, #3
 800b838:	4013      	ands	r3, r2
 800b83a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b83c:	4b27      	ldr	r3, [pc, #156]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	091b      	lsrs	r3, r3, #4
 800b842:	2207      	movs	r2, #7
 800b844:	4013      	ands	r3, r2
 800b846:	3301      	adds	r3, #1
 800b848:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d10d      	bne.n	800b86c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b850:	68b9      	ldr	r1, [r7, #8]
 800b852:	4824      	ldr	r0, [pc, #144]	@ (800b8e4 <HAL_RCC_GetSysClockFreq+0x100>)
 800b854:	f7fa fdf6 	bl	8006444 <__udivsi3>
 800b858:	0003      	movs	r3, r0
 800b85a:	0019      	movs	r1, r3
 800b85c:	4b1f      	ldr	r3, [pc, #124]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	0a1b      	lsrs	r3, r3, #8
 800b862:	227f      	movs	r2, #127	@ 0x7f
 800b864:	4013      	ands	r3, r2
 800b866:	434b      	muls	r3, r1
 800b868:	617b      	str	r3, [r7, #20]
        break;
 800b86a:	e00d      	b.n	800b888 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800b86c:	68b9      	ldr	r1, [r7, #8]
 800b86e:	481c      	ldr	r0, [pc, #112]	@ (800b8e0 <HAL_RCC_GetSysClockFreq+0xfc>)
 800b870:	f7fa fde8 	bl	8006444 <__udivsi3>
 800b874:	0003      	movs	r3, r0
 800b876:	0019      	movs	r1, r3
 800b878:	4b18      	ldr	r3, [pc, #96]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b87a:	68db      	ldr	r3, [r3, #12]
 800b87c:	0a1b      	lsrs	r3, r3, #8
 800b87e:	227f      	movs	r2, #127	@ 0x7f
 800b880:	4013      	ands	r3, r2
 800b882:	434b      	muls	r3, r1
 800b884:	617b      	str	r3, [r7, #20]
        break;
 800b886:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800b888:	4b14      	ldr	r3, [pc, #80]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b88a:	68db      	ldr	r3, [r3, #12]
 800b88c:	0f5b      	lsrs	r3, r3, #29
 800b88e:	2207      	movs	r2, #7
 800b890:	4013      	ands	r3, r2
 800b892:	3301      	adds	r3, #1
 800b894:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800b896:	6879      	ldr	r1, [r7, #4]
 800b898:	6978      	ldr	r0, [r7, #20]
 800b89a:	f7fa fdd3 	bl	8006444 <__udivsi3>
 800b89e:	0003      	movs	r3, r0
 800b8a0:	613b      	str	r3, [r7, #16]
 800b8a2:	e015      	b.n	800b8d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800b8a4:	4b0d      	ldr	r3, [pc, #52]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b8a6:	689b      	ldr	r3, [r3, #8]
 800b8a8:	2238      	movs	r2, #56	@ 0x38
 800b8aa:	4013      	ands	r3, r2
 800b8ac:	2b20      	cmp	r3, #32
 800b8ae:	d103      	bne.n	800b8b8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800b8b0:	2380      	movs	r3, #128	@ 0x80
 800b8b2:	021b      	lsls	r3, r3, #8
 800b8b4:	613b      	str	r3, [r7, #16]
 800b8b6:	e00b      	b.n	800b8d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800b8b8:	4b08      	ldr	r3, [pc, #32]	@ (800b8dc <HAL_RCC_GetSysClockFreq+0xf8>)
 800b8ba:	689b      	ldr	r3, [r3, #8]
 800b8bc:	2238      	movs	r2, #56	@ 0x38
 800b8be:	4013      	ands	r3, r2
 800b8c0:	2b18      	cmp	r3, #24
 800b8c2:	d103      	bne.n	800b8cc <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800b8c4:	23fa      	movs	r3, #250	@ 0xfa
 800b8c6:	01db      	lsls	r3, r3, #7
 800b8c8:	613b      	str	r3, [r7, #16]
 800b8ca:	e001      	b.n	800b8d0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b8d0:	693b      	ldr	r3, [r7, #16]
}
 800b8d2:	0018      	movs	r0, r3
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	b006      	add	sp, #24
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	46c0      	nop			@ (mov r8, r8)
 800b8dc:	40021000 	.word	0x40021000
 800b8e0:	00f42400 	.word	0x00f42400
 800b8e4:	007a1200 	.word	0x007a1200

0800b8e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8ec:	4b02      	ldr	r3, [pc, #8]	@ (800b8f8 <HAL_RCC_GetHCLKFreq+0x10>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
}
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	46c0      	nop			@ (mov r8, r8)
 800b8f8:	20000004 	.word	0x20000004

0800b8fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8fc:	b5b0      	push	{r4, r5, r7, lr}
 800b8fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b900:	f7ff fff2 	bl	800b8e8 <HAL_RCC_GetHCLKFreq>
 800b904:	0004      	movs	r4, r0
 800b906:	f7ff faf9 	bl	800aefc <LL_RCC_GetAPB1Prescaler>
 800b90a:	0003      	movs	r3, r0
 800b90c:	0b1a      	lsrs	r2, r3, #12
 800b90e:	4b05      	ldr	r3, [pc, #20]	@ (800b924 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b910:	0092      	lsls	r2, r2, #2
 800b912:	58d3      	ldr	r3, [r2, r3]
 800b914:	221f      	movs	r2, #31
 800b916:	4013      	ands	r3, r2
 800b918:	40dc      	lsrs	r4, r3
 800b91a:	0023      	movs	r3, r4
}
 800b91c:	0018      	movs	r0, r3
 800b91e:	46bd      	mov	sp, r7
 800b920:	bdb0      	pop	{r4, r5, r7, pc}
 800b922:	46c0      	nop			@ (mov r8, r8)
 800b924:	0801e484 	.word	0x0801e484

0800b928 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2207      	movs	r2, #7
 800b936:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b938:	4b0e      	ldr	r3, [pc, #56]	@ (800b974 <HAL_RCC_GetClockConfig+0x4c>)
 800b93a:	689b      	ldr	r3, [r3, #8]
 800b93c:	2207      	movs	r2, #7
 800b93e:	401a      	ands	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b944:	4b0b      	ldr	r3, [pc, #44]	@ (800b974 <HAL_RCC_GetClockConfig+0x4c>)
 800b946:	689a      	ldr	r2, [r3, #8]
 800b948:	23f0      	movs	r3, #240	@ 0xf0
 800b94a:	011b      	lsls	r3, r3, #4
 800b94c:	401a      	ands	r2, r3
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800b952:	4b08      	ldr	r3, [pc, #32]	@ (800b974 <HAL_RCC_GetClockConfig+0x4c>)
 800b954:	689a      	ldr	r2, [r3, #8]
 800b956:	23e0      	movs	r3, #224	@ 0xe0
 800b958:	01db      	lsls	r3, r3, #7
 800b95a:	401a      	ands	r2, r3
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b960:	4b05      	ldr	r3, [pc, #20]	@ (800b978 <HAL_RCC_GetClockConfig+0x50>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	2207      	movs	r2, #7
 800b966:	401a      	ands	r2, r3
 800b968:	683b      	ldr	r3, [r7, #0]
 800b96a:	601a      	str	r2, [r3, #0]
}
 800b96c:	46c0      	nop			@ (mov r8, r8)
 800b96e:	46bd      	mov	sp, r7
 800b970:	b002      	add	sp, #8
 800b972:	bd80      	pop	{r7, pc}
 800b974:	40021000 	.word	0x40021000
 800b978:	40022000 	.word	0x40022000

0800b97c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800b984:	2313      	movs	r3, #19
 800b986:	18fb      	adds	r3, r7, r3
 800b988:	2200      	movs	r2, #0
 800b98a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b98c:	2312      	movs	r3, #18
 800b98e:	18fb      	adds	r3, r7, r3
 800b990:	2200      	movs	r2, #0
 800b992:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	2380      	movs	r3, #128	@ 0x80
 800b99a:	029b      	lsls	r3, r3, #10
 800b99c:	4013      	ands	r3, r2
 800b99e:	d100      	bne.n	800b9a2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 800b9a0:	e0ad      	b.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9a2:	2011      	movs	r0, #17
 800b9a4:	183b      	adds	r3, r7, r0
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9aa:	4b47      	ldr	r3, [pc, #284]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b9ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9ae:	2380      	movs	r3, #128	@ 0x80
 800b9b0:	055b      	lsls	r3, r3, #21
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	d110      	bne.n	800b9d8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9b6:	4b44      	ldr	r3, [pc, #272]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b9b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9ba:	4b43      	ldr	r3, [pc, #268]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b9bc:	2180      	movs	r1, #128	@ 0x80
 800b9be:	0549      	lsls	r1, r1, #21
 800b9c0:	430a      	orrs	r2, r1
 800b9c2:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b9c4:	4b40      	ldr	r3, [pc, #256]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800b9c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9c8:	2380      	movs	r3, #128	@ 0x80
 800b9ca:	055b      	lsls	r3, r3, #21
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	60bb      	str	r3, [r7, #8]
 800b9d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b9d2:	183b      	adds	r3, r7, r0
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b9d8:	4b3c      	ldr	r3, [pc, #240]	@ (800bacc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	4b3b      	ldr	r3, [pc, #236]	@ (800bacc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800b9de:	2180      	movs	r1, #128	@ 0x80
 800b9e0:	0049      	lsls	r1, r1, #1
 800b9e2:	430a      	orrs	r2, r1
 800b9e4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b9e6:	f7fc fc7d 	bl	80082e4 <HAL_GetTick>
 800b9ea:	0003      	movs	r3, r0
 800b9ec:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b9ee:	e00b      	b.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b9f0:	f7fc fc78 	bl	80082e4 <HAL_GetTick>
 800b9f4:	0002      	movs	r2, r0
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	1ad3      	subs	r3, r2, r3
 800b9fa:	2b02      	cmp	r3, #2
 800b9fc:	d904      	bls.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800b9fe:	2313      	movs	r3, #19
 800ba00:	18fb      	adds	r3, r7, r3
 800ba02:	2203      	movs	r2, #3
 800ba04:	701a      	strb	r2, [r3, #0]
        break;
 800ba06:	e005      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba08:	4b30      	ldr	r3, [pc, #192]	@ (800bacc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	2380      	movs	r3, #128	@ 0x80
 800ba0e:	005b      	lsls	r3, r3, #1
 800ba10:	4013      	ands	r3, r2
 800ba12:	d0ed      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800ba14:	2313      	movs	r3, #19
 800ba16:	18fb      	adds	r3, r7, r3
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d15e      	bne.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ba1e:	4b2a      	ldr	r3, [pc, #168]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ba20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba22:	23c0      	movs	r3, #192	@ 0xc0
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4013      	ands	r3, r2
 800ba28:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d019      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba34:	697a      	ldr	r2, [r7, #20]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d014      	beq.n	800ba64 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ba3a:	4b23      	ldr	r3, [pc, #140]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ba3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba3e:	4a24      	ldr	r2, [pc, #144]	@ (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800ba40:	4013      	ands	r3, r2
 800ba42:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba44:	4b20      	ldr	r3, [pc, #128]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ba46:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba48:	4b1f      	ldr	r3, [pc, #124]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ba4a:	2180      	movs	r1, #128	@ 0x80
 800ba4c:	0249      	lsls	r1, r1, #9
 800ba4e:	430a      	orrs	r2, r1
 800ba50:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ba52:	4b1d      	ldr	r3, [pc, #116]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ba54:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800ba56:	4b1c      	ldr	r3, [pc, #112]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ba58:	491e      	ldr	r1, [pc, #120]	@ (800bad4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 800ba5a:	400a      	ands	r2, r1
 800ba5c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800ba5e:	4b1a      	ldr	r3, [pc, #104]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ba60:	697a      	ldr	r2, [r7, #20]
 800ba62:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800ba64:	697b      	ldr	r3, [r7, #20]
 800ba66:	2201      	movs	r2, #1
 800ba68:	4013      	ands	r3, r2
 800ba6a:	d016      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba6c:	f7fc fc3a 	bl	80082e4 <HAL_GetTick>
 800ba70:	0003      	movs	r3, r0
 800ba72:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba74:	e00c      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ba76:	f7fc fc35 	bl	80082e4 <HAL_GetTick>
 800ba7a:	0002      	movs	r2, r0
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	4a15      	ldr	r2, [pc, #84]	@ (800bad8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d904      	bls.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800ba86:	2313      	movs	r3, #19
 800ba88:	18fb      	adds	r3, r7, r3
 800ba8a:	2203      	movs	r2, #3
 800ba8c:	701a      	strb	r2, [r3, #0]
            break;
 800ba8e:	e004      	b.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ba90:	4b0d      	ldr	r3, [pc, #52]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800ba92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba94:	2202      	movs	r2, #2
 800ba96:	4013      	ands	r3, r2
 800ba98:	d0ed      	beq.n	800ba76 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800ba9a:	2313      	movs	r3, #19
 800ba9c:	18fb      	adds	r3, r7, r3
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d10a      	bne.n	800baba <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800baa4:	4b08      	ldr	r3, [pc, #32]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800baa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800baa8:	4a09      	ldr	r2, [pc, #36]	@ (800bad0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800baaa:	4013      	ands	r3, r2
 800baac:	0019      	movs	r1, r3
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bab2:	4b05      	ldr	r3, [pc, #20]	@ (800bac8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800bab4:	430a      	orrs	r2, r1
 800bab6:	65da      	str	r2, [r3, #92]	@ 0x5c
 800bab8:	e016      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800baba:	2312      	movs	r3, #18
 800babc:	18fb      	adds	r3, r7, r3
 800babe:	2213      	movs	r2, #19
 800bac0:	18ba      	adds	r2, r7, r2
 800bac2:	7812      	ldrb	r2, [r2, #0]
 800bac4:	701a      	strb	r2, [r3, #0]
 800bac6:	e00f      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800bac8:	40021000 	.word	0x40021000
 800bacc:	40007000 	.word	0x40007000
 800bad0:	fffffcff 	.word	0xfffffcff
 800bad4:	fffeffff 	.word	0xfffeffff
 800bad8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800badc:	2312      	movs	r3, #18
 800bade:	18fb      	adds	r3, r7, r3
 800bae0:	2213      	movs	r2, #19
 800bae2:	18ba      	adds	r2, r7, r2
 800bae4:	7812      	ldrb	r2, [r2, #0]
 800bae6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bae8:	2311      	movs	r3, #17
 800baea:	18fb      	adds	r3, r7, r3
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d105      	bne.n	800bafe <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800baf2:	4bc5      	ldr	r3, [pc, #788]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800baf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800baf6:	4bc4      	ldr	r3, [pc, #784]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800baf8:	49c4      	ldr	r1, [pc, #784]	@ (800be0c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800bafa:	400a      	ands	r2, r1
 800bafc:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2201      	movs	r2, #1
 800bb04:	4013      	ands	r3, r2
 800bb06:	d009      	beq.n	800bb1c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb08:	4bbf      	ldr	r3, [pc, #764]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb0c:	2203      	movs	r2, #3
 800bb0e:	4393      	bics	r3, r2
 800bb10:	0019      	movs	r1, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	685a      	ldr	r2, [r3, #4]
 800bb16:	4bbc      	ldr	r3, [pc, #752]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb18:	430a      	orrs	r2, r1
 800bb1a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2202      	movs	r2, #2
 800bb22:	4013      	ands	r3, r2
 800bb24:	d009      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb26:	4bb8      	ldr	r3, [pc, #736]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb2a:	220c      	movs	r2, #12
 800bb2c:	4393      	bics	r3, r2
 800bb2e:	0019      	movs	r1, r3
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	689a      	ldr	r2, [r3, #8]
 800bb34:	4bb4      	ldr	r3, [pc, #720]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb36:	430a      	orrs	r2, r1
 800bb38:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	2204      	movs	r2, #4
 800bb40:	4013      	ands	r3, r2
 800bb42:	d009      	beq.n	800bb58 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bb44:	4bb0      	ldr	r3, [pc, #704]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb48:	2230      	movs	r2, #48	@ 0x30
 800bb4a:	4393      	bics	r3, r2
 800bb4c:	0019      	movs	r1, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	68da      	ldr	r2, [r3, #12]
 800bb52:	4bad      	ldr	r3, [pc, #692]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb54:	430a      	orrs	r2, r1
 800bb56:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	2210      	movs	r2, #16
 800bb5e:	4013      	ands	r3, r2
 800bb60:	d009      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb62:	4ba9      	ldr	r3, [pc, #676]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb66:	4aaa      	ldr	r2, [pc, #680]	@ (800be10 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800bb68:	4013      	ands	r3, r2
 800bb6a:	0019      	movs	r1, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	691a      	ldr	r2, [r3, #16]
 800bb70:	4ba5      	ldr	r3, [pc, #660]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb72:	430a      	orrs	r2, r1
 800bb74:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681a      	ldr	r2, [r3, #0]
 800bb7a:	2380      	movs	r3, #128	@ 0x80
 800bb7c:	015b      	lsls	r3, r3, #5
 800bb7e:	4013      	ands	r3, r2
 800bb80:	d009      	beq.n	800bb96 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 800bb82:	4ba1      	ldr	r3, [pc, #644]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bb86:	4aa3      	ldr	r2, [pc, #652]	@ (800be14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bb88:	4013      	ands	r3, r2
 800bb8a:	0019      	movs	r1, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	695a      	ldr	r2, [r3, #20]
 800bb90:	4b9d      	ldr	r3, [pc, #628]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bb92:	430a      	orrs	r2, r1
 800bb94:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681a      	ldr	r2, [r3, #0]
 800bb9a:	2380      	movs	r3, #128	@ 0x80
 800bb9c:	009b      	lsls	r3, r3, #2
 800bb9e:	4013      	ands	r3, r2
 800bba0:	d009      	beq.n	800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bba2:	4b99      	ldr	r3, [pc, #612]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bba4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bba6:	4a9c      	ldr	r2, [pc, #624]	@ (800be18 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 800bba8:	4013      	ands	r3, r2
 800bbaa:	0019      	movs	r1, r3
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bbb0:	4b95      	ldr	r3, [pc, #596]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bbb2:	430a      	orrs	r2, r1
 800bbb4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681a      	ldr	r2, [r3, #0]
 800bbba:	2380      	movs	r3, #128	@ 0x80
 800bbbc:	00db      	lsls	r3, r3, #3
 800bbbe:	4013      	ands	r3, r2
 800bbc0:	d009      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bbc2:	4b91      	ldr	r3, [pc, #580]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bbc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbc6:	4a95      	ldr	r2, [pc, #596]	@ (800be1c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800bbc8:	4013      	ands	r3, r2
 800bbca:	0019      	movs	r1, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbd0:	4b8d      	ldr	r3, [pc, #564]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bbd2:	430a      	orrs	r2, r1
 800bbd4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2220      	movs	r2, #32
 800bbdc:	4013      	ands	r3, r2
 800bbde:	d009      	beq.n	800bbf4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bbe0:	4b89      	ldr	r3, [pc, #548]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bbe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbe4:	4a8e      	ldr	r2, [pc, #568]	@ (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	0019      	movs	r1, r3
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	699a      	ldr	r2, [r3, #24]
 800bbee:	4b86      	ldr	r3, [pc, #536]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bbf0:	430a      	orrs	r2, r1
 800bbf2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2240      	movs	r2, #64	@ 0x40
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	d009      	beq.n	800bc12 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bbfe:	4b82      	ldr	r3, [pc, #520]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc02:	4a88      	ldr	r2, [pc, #544]	@ (800be24 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 800bc04:	4013      	ands	r3, r2
 800bc06:	0019      	movs	r1, r3
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	69da      	ldr	r2, [r3, #28]
 800bc0c:	4b7e      	ldr	r3, [pc, #504]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc0e:	430a      	orrs	r2, r1
 800bc10:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	2380      	movs	r3, #128	@ 0x80
 800bc18:	02db      	lsls	r3, r3, #11
 800bc1a:	4013      	ands	r3, r2
 800bc1c:	d016      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc1e:	4b7a      	ldr	r3, [pc, #488]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc22:	4a81      	ldr	r2, [pc, #516]	@ (800be28 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800bc24:	4013      	ands	r3, r2
 800bc26:	0019      	movs	r1, r3
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc2c:	4b76      	ldr	r3, [pc, #472]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc2e:	430a      	orrs	r2, r1
 800bc30:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bc36:	23c0      	movs	r3, #192	@ 0xc0
 800bc38:	051b      	lsls	r3, r3, #20
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d106      	bne.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bc3e:	4b72      	ldr	r3, [pc, #456]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc40:	68da      	ldr	r2, [r3, #12]
 800bc42:	4b71      	ldr	r3, [pc, #452]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc44:	2180      	movs	r1, #128	@ 0x80
 800bc46:	0449      	lsls	r1, r1, #17
 800bc48:	430a      	orrs	r2, r1
 800bc4a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681a      	ldr	r2, [r3, #0]
 800bc50:	2380      	movs	r3, #128	@ 0x80
 800bc52:	01db      	lsls	r3, r3, #7
 800bc54:	4013      	ands	r3, r2
 800bc56:	d015      	beq.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x308>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc58:	4b6b      	ldr	r3, [pc, #428]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	0899      	lsrs	r1, r3, #2
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc64:	4b68      	ldr	r3, [pc, #416]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc66:	430a      	orrs	r2, r1
 800bc68:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bc6e:	2380      	movs	r3, #128	@ 0x80
 800bc70:	05db      	lsls	r3, r3, #23
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d106      	bne.n	800bc84 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bc76:	4b64      	ldr	r3, [pc, #400]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc78:	68da      	ldr	r2, [r3, #12]
 800bc7a:	4b63      	ldr	r3, [pc, #396]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc7c:	2180      	movs	r1, #128	@ 0x80
 800bc7e:	0249      	lsls	r1, r1, #9
 800bc80:	430a      	orrs	r2, r1
 800bc82:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	2380      	movs	r3, #128	@ 0x80
 800bc8a:	031b      	lsls	r3, r3, #12
 800bc8c:	4013      	ands	r3, r2
 800bc8e:	d009      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc90:	4b5d      	ldr	r3, [pc, #372]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bc92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc94:	2240      	movs	r2, #64	@ 0x40
 800bc96:	4393      	bics	r3, r2
 800bc98:	0019      	movs	r1, r3
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bc9e:	4b5a      	ldr	r3, [pc, #360]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bca0:	430a      	orrs	r2, r1
 800bca2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681a      	ldr	r2, [r3, #0]
 800bca8:	2380      	movs	r3, #128	@ 0x80
 800bcaa:	039b      	lsls	r3, r3, #14
 800bcac:	4013      	ands	r3, r2
 800bcae:	d016      	beq.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800bcb0:	4b55      	ldr	r3, [pc, #340]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bcb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcb4:	4a5d      	ldr	r2, [pc, #372]	@ (800be2c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	0019      	movs	r1, r3
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcbe:	4b52      	ldr	r3, [pc, #328]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bcc0:	430a      	orrs	r2, r1
 800bcc2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bcc8:	2380      	movs	r3, #128	@ 0x80
 800bcca:	03db      	lsls	r3, r3, #15
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d106      	bne.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bcd0:	4b4d      	ldr	r3, [pc, #308]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bcd2:	68da      	ldr	r2, [r3, #12]
 800bcd4:	4b4c      	ldr	r3, [pc, #304]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bcd6:	2180      	movs	r1, #128	@ 0x80
 800bcd8:	0449      	lsls	r1, r1, #17
 800bcda:	430a      	orrs	r2, r1
 800bcdc:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	2380      	movs	r3, #128	@ 0x80
 800bce4:	03db      	lsls	r3, r3, #15
 800bce6:	4013      	ands	r3, r2
 800bce8:	d016      	beq.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800bcea:	4b47      	ldr	r3, [pc, #284]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bcec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcee:	4a50      	ldr	r2, [pc, #320]	@ (800be30 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 800bcf0:	4013      	ands	r3, r2
 800bcf2:	0019      	movs	r1, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bcf8:	4b43      	ldr	r3, [pc, #268]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bcfa:	430a      	orrs	r2, r1
 800bcfc:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800bd02:	2380      	movs	r3, #128	@ 0x80
 800bd04:	045b      	lsls	r3, r3, #17
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d106      	bne.n	800bd18 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bd0a:	4b3f      	ldr	r3, [pc, #252]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd0c:	68da      	ldr	r2, [r3, #12]
 800bd0e:	4b3e      	ldr	r3, [pc, #248]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd10:	2180      	movs	r1, #128	@ 0x80
 800bd12:	0449      	lsls	r1, r1, #17
 800bd14:	430a      	orrs	r2, r1
 800bd16:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	2380      	movs	r3, #128	@ 0x80
 800bd1e:	011b      	lsls	r3, r3, #4
 800bd20:	4013      	ands	r3, r2
 800bd22:	d014      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800bd24:	4b38      	ldr	r3, [pc, #224]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd28:	2203      	movs	r2, #3
 800bd2a:	4393      	bics	r3, r2
 800bd2c:	0019      	movs	r1, r3
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	6a1a      	ldr	r2, [r3, #32]
 800bd32:	4b35      	ldr	r3, [pc, #212]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd34:	430a      	orrs	r2, r1
 800bd36:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6a1b      	ldr	r3, [r3, #32]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d106      	bne.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bd40:	4b31      	ldr	r3, [pc, #196]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd42:	68da      	ldr	r2, [r3, #12]
 800bd44:	4b30      	ldr	r3, [pc, #192]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd46:	2180      	movs	r1, #128	@ 0x80
 800bd48:	0249      	lsls	r1, r1, #9
 800bd4a:	430a      	orrs	r2, r1
 800bd4c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681a      	ldr	r2, [r3, #0]
 800bd52:	2380      	movs	r3, #128	@ 0x80
 800bd54:	019b      	lsls	r3, r3, #6
 800bd56:	4013      	ands	r3, r2
 800bd58:	d014      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800bd5a:	4b2b      	ldr	r3, [pc, #172]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd5e:	220c      	movs	r2, #12
 800bd60:	4393      	bics	r3, r2
 800bd62:	0019      	movs	r1, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bd68:	4b27      	ldr	r3, [pc, #156]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd6a:	430a      	orrs	r2, r1
 800bd6c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd72:	2b04      	cmp	r3, #4
 800bd74:	d106      	bne.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800bd76:	4b24      	ldr	r3, [pc, #144]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd78:	68da      	ldr	r2, [r3, #12]
 800bd7a:	4b23      	ldr	r3, [pc, #140]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd7c:	2180      	movs	r1, #128	@ 0x80
 800bd7e:	0249      	lsls	r1, r1, #9
 800bd80:	430a      	orrs	r2, r1
 800bd82:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	2380      	movs	r3, #128	@ 0x80
 800bd8a:	045b      	lsls	r3, r3, #17
 800bd8c:	4013      	ands	r3, r2
 800bd8e:	d016      	beq.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd90:	4b1d      	ldr	r3, [pc, #116]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bd92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd94:	4a22      	ldr	r2, [pc, #136]	@ (800be20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800bd96:	4013      	ands	r3, r2
 800bd98:	0019      	movs	r1, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bd9e:	4b1a      	ldr	r3, [pc, #104]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bda0:	430a      	orrs	r2, r1
 800bda2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800bda8:	2380      	movs	r3, #128	@ 0x80
 800bdaa:	019b      	lsls	r3, r3, #6
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d106      	bne.n	800bdbe <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bdb0:	4b15      	ldr	r3, [pc, #84]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bdb2:	68da      	ldr	r2, [r3, #12]
 800bdb4:	4b14      	ldr	r3, [pc, #80]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bdb6:	2180      	movs	r1, #128	@ 0x80
 800bdb8:	0449      	lsls	r1, r1, #17
 800bdba:	430a      	orrs	r2, r1
 800bdbc:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681a      	ldr	r2, [r3, #0]
 800bdc2:	2380      	movs	r3, #128	@ 0x80
 800bdc4:	049b      	lsls	r3, r3, #18
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	d016      	beq.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bdca:	4b0f      	ldr	r3, [pc, #60]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bdcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bdce:	4a11      	ldr	r2, [pc, #68]	@ (800be14 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800bdd0:	4013      	ands	r3, r2
 800bdd2:	0019      	movs	r1, r3
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bdd8:	4b0b      	ldr	r3, [pc, #44]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bdda:	430a      	orrs	r2, r1
 800bddc:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bde2:	2380      	movs	r3, #128	@ 0x80
 800bde4:	005b      	lsls	r3, r3, #1
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d106      	bne.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800bdea:	4b07      	ldr	r3, [pc, #28]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bdec:	68da      	ldr	r2, [r3, #12]
 800bdee:	4b06      	ldr	r3, [pc, #24]	@ (800be08 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 800bdf0:	2180      	movs	r1, #128	@ 0x80
 800bdf2:	0449      	lsls	r1, r1, #17
 800bdf4:	430a      	orrs	r2, r1
 800bdf6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800bdf8:	2312      	movs	r3, #18
 800bdfa:	18fb      	adds	r3, r7, r3
 800bdfc:	781b      	ldrb	r3, [r3, #0]
}
 800bdfe:	0018      	movs	r0, r3
 800be00:	46bd      	mov	sp, r7
 800be02:	b006      	add	sp, #24
 800be04:	bd80      	pop	{r7, pc}
 800be06:	46c0      	nop			@ (mov r8, r8)
 800be08:	40021000 	.word	0x40021000
 800be0c:	efffffff 	.word	0xefffffff
 800be10:	fffff3ff 	.word	0xfffff3ff
 800be14:	fffffcff 	.word	0xfffffcff
 800be18:	fff3ffff 	.word	0xfff3ffff
 800be1c:	ffcfffff 	.word	0xffcfffff
 800be20:	ffffcfff 	.word	0xffffcfff
 800be24:	ffff3fff 	.word	0xffff3fff
 800be28:	f3ffffff 	.word	0xf3ffffff
 800be2c:	ffbfffff 	.word	0xffbfffff
 800be30:	feffffff 	.word	0xfeffffff

0800be34 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800be3c:	4b1c      	ldr	r3, [pc, #112]	@ (800beb0 <HAL_RCCEx_CRSConfig+0x7c>)
 800be3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be40:	4b1b      	ldr	r3, [pc, #108]	@ (800beb0 <HAL_RCCEx_CRSConfig+0x7c>)
 800be42:	2180      	movs	r1, #128	@ 0x80
 800be44:	0249      	lsls	r1, r1, #9
 800be46:	430a      	orrs	r2, r1
 800be48:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_RCC_CRS_RELEASE_RESET();
 800be4a:	4b19      	ldr	r3, [pc, #100]	@ (800beb0 <HAL_RCCEx_CRSConfig+0x7c>)
 800be4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be4e:	4b18      	ldr	r3, [pc, #96]	@ (800beb0 <HAL_RCCEx_CRSConfig+0x7c>)
 800be50:	4918      	ldr	r1, [pc, #96]	@ (800beb4 <HAL_RCCEx_CRSConfig+0x80>)
 800be52:	400a      	ands	r2, r1
 800be54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681a      	ldr	r2, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	431a      	orrs	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	689b      	ldr	r3, [r3, #8]
 800be64:	4313      	orrs	r3, r2
 800be66:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	4313      	orrs	r3, r2
 800be70:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	691b      	ldr	r3, [r3, #16]
 800be76:	041b      	lsls	r3, r3, #16
 800be78:	68fa      	ldr	r2, [r7, #12]
 800be7a:	4313      	orrs	r3, r2
 800be7c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800be7e:	4b0e      	ldr	r3, [pc, #56]	@ (800beb8 <HAL_RCCEx_CRSConfig+0x84>)
 800be80:	68fa      	ldr	r2, [r7, #12]
 800be82:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800be84:	4b0c      	ldr	r3, [pc, #48]	@ (800beb8 <HAL_RCCEx_CRSConfig+0x84>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	4a0c      	ldr	r2, [pc, #48]	@ (800bebc <HAL_RCCEx_CRSConfig+0x88>)
 800be8a:	4013      	ands	r3, r2
 800be8c:	0019      	movs	r1, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	695b      	ldr	r3, [r3, #20]
 800be92:	021a      	lsls	r2, r3, #8
 800be94:	4b08      	ldr	r3, [pc, #32]	@ (800beb8 <HAL_RCCEx_CRSConfig+0x84>)
 800be96:	430a      	orrs	r2, r1
 800be98:	601a      	str	r2, [r3, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800be9a:	4b07      	ldr	r3, [pc, #28]	@ (800beb8 <HAL_RCCEx_CRSConfig+0x84>)
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	4b06      	ldr	r3, [pc, #24]	@ (800beb8 <HAL_RCCEx_CRSConfig+0x84>)
 800bea0:	2160      	movs	r1, #96	@ 0x60
 800bea2:	430a      	orrs	r2, r1
 800bea4:	601a      	str	r2, [r3, #0]
}
 800bea6:	46c0      	nop			@ (mov r8, r8)
 800bea8:	46bd      	mov	sp, r7
 800beaa:	b004      	add	sp, #16
 800beac:	bd80      	pop	{r7, pc}
 800beae:	46c0      	nop			@ (mov r8, r8)
 800beb0:	40021000 	.word	0x40021000
 800beb4:	fffeffff 	.word	0xfffeffff
 800beb8:	40006c00 	.word	0x40006c00
 800bebc:	ffff80ff 	.word	0xffff80ff

0800bec0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d101      	bne.n	800bed2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	e04a      	b.n	800bf68 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	223d      	movs	r2, #61	@ 0x3d
 800bed6:	5c9b      	ldrb	r3, [r3, r2]
 800bed8:	b2db      	uxtb	r3, r3
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d107      	bne.n	800beee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	223c      	movs	r2, #60	@ 0x3c
 800bee2:	2100      	movs	r1, #0
 800bee4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	0018      	movs	r0, r3
 800beea:	f000 f841 	bl	800bf70 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	223d      	movs	r2, #61	@ 0x3d
 800bef2:	2102      	movs	r1, #2
 800bef4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681a      	ldr	r2, [r3, #0]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	3304      	adds	r3, #4
 800befe:	0019      	movs	r1, r3
 800bf00:	0010      	movs	r0, r2
 800bf02:	f000 fbc7 	bl	800c694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2248      	movs	r2, #72	@ 0x48
 800bf0a:	2101      	movs	r1, #1
 800bf0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	223e      	movs	r2, #62	@ 0x3e
 800bf12:	2101      	movs	r1, #1
 800bf14:	5499      	strb	r1, [r3, r2]
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	223f      	movs	r2, #63	@ 0x3f
 800bf1a:	2101      	movs	r1, #1
 800bf1c:	5499      	strb	r1, [r3, r2]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2240      	movs	r2, #64	@ 0x40
 800bf22:	2101      	movs	r1, #1
 800bf24:	5499      	strb	r1, [r3, r2]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2241      	movs	r2, #65	@ 0x41
 800bf2a:	2101      	movs	r1, #1
 800bf2c:	5499      	strb	r1, [r3, r2]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2242      	movs	r2, #66	@ 0x42
 800bf32:	2101      	movs	r1, #1
 800bf34:	5499      	strb	r1, [r3, r2]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	2243      	movs	r2, #67	@ 0x43
 800bf3a:	2101      	movs	r1, #1
 800bf3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2244      	movs	r2, #68	@ 0x44
 800bf42:	2101      	movs	r1, #1
 800bf44:	5499      	strb	r1, [r3, r2]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2245      	movs	r2, #69	@ 0x45
 800bf4a:	2101      	movs	r1, #1
 800bf4c:	5499      	strb	r1, [r3, r2]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2246      	movs	r2, #70	@ 0x46
 800bf52:	2101      	movs	r1, #1
 800bf54:	5499      	strb	r1, [r3, r2]
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2247      	movs	r2, #71	@ 0x47
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	223d      	movs	r2, #61	@ 0x3d
 800bf62:	2101      	movs	r1, #1
 800bf64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	0018      	movs	r0, r3
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	b002      	add	sp, #8
 800bf6e:	bd80      	pop	{r7, pc}

0800bf70 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bf78:	46c0      	nop			@ (mov r8, r8)
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	b002      	add	sp, #8
 800bf7e:	bd80      	pop	{r7, pc}

0800bf80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b084      	sub	sp, #16
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	223d      	movs	r2, #61	@ 0x3d
 800bf8c:	5c9b      	ldrb	r3, [r3, r2]
 800bf8e:	b2db      	uxtb	r3, r3
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d001      	beq.n	800bf98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf94:	2301      	movs	r3, #1
 800bf96:	e047      	b.n	800c028 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	223d      	movs	r2, #61	@ 0x3d
 800bf9c:	2102      	movs	r1, #2
 800bf9e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	68da      	ldr	r2, [r3, #12]
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2101      	movs	r1, #1
 800bfac:	430a      	orrs	r2, r1
 800bfae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a1e      	ldr	r2, [pc, #120]	@ (800c030 <HAL_TIM_Base_Start_IT+0xb0>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d014      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x64>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681a      	ldr	r2, [r3, #0]
 800bfbe:	2380      	movs	r3, #128	@ 0x80
 800bfc0:	05db      	lsls	r3, r3, #23
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d00e      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x64>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a1a      	ldr	r2, [pc, #104]	@ (800c034 <HAL_TIM_Base_Start_IT+0xb4>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d009      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x64>
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a18      	ldr	r2, [pc, #96]	@ (800c038 <HAL_TIM_Base_Start_IT+0xb8>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d004      	beq.n	800bfe4 <HAL_TIM_Base_Start_IT+0x64>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	4a17      	ldr	r2, [pc, #92]	@ (800c03c <HAL_TIM_Base_Start_IT+0xbc>)
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d116      	bne.n	800c012 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	4a15      	ldr	r2, [pc, #84]	@ (800c040 <HAL_TIM_Base_Start_IT+0xc0>)
 800bfec:	4013      	ands	r3, r2
 800bfee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b06      	cmp	r3, #6
 800bff4:	d016      	beq.n	800c024 <HAL_TIM_Base_Start_IT+0xa4>
 800bff6:	68fa      	ldr	r2, [r7, #12]
 800bff8:	2380      	movs	r3, #128	@ 0x80
 800bffa:	025b      	lsls	r3, r3, #9
 800bffc:	429a      	cmp	r2, r3
 800bffe:	d011      	beq.n	800c024 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	681a      	ldr	r2, [r3, #0]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	2101      	movs	r1, #1
 800c00c:	430a      	orrs	r2, r1
 800c00e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c010:	e008      	b.n	800c024 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	681a      	ldr	r2, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2101      	movs	r1, #1
 800c01e:	430a      	orrs	r2, r1
 800c020:	601a      	str	r2, [r3, #0]
 800c022:	e000      	b.n	800c026 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c024:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	0018      	movs	r0, r3
 800c02a:	46bd      	mov	sp, r7
 800c02c:	b004      	add	sp, #16
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	40012c00 	.word	0x40012c00
 800c034:	40000400 	.word	0x40000400
 800c038:	40000800 	.word	0x40000800
 800c03c:	40014000 	.word	0x40014000
 800c040:	00010007 	.word	0x00010007

0800c044 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e04a      	b.n	800c0ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	223d      	movs	r2, #61	@ 0x3d
 800c05a:	5c9b      	ldrb	r3, [r3, r2]
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d107      	bne.n	800c072 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	223c      	movs	r2, #60	@ 0x3c
 800c066:	2100      	movs	r1, #0
 800c068:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	0018      	movs	r0, r3
 800c06e:	f7fb fcc1 	bl	80079f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	223d      	movs	r2, #61	@ 0x3d
 800c076:	2102      	movs	r1, #2
 800c078:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681a      	ldr	r2, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	3304      	adds	r3, #4
 800c082:	0019      	movs	r1, r3
 800c084:	0010      	movs	r0, r2
 800c086:	f000 fb05 	bl	800c694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2248      	movs	r2, #72	@ 0x48
 800c08e:	2101      	movs	r1, #1
 800c090:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	223e      	movs	r2, #62	@ 0x3e
 800c096:	2101      	movs	r1, #1
 800c098:	5499      	strb	r1, [r3, r2]
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	223f      	movs	r2, #63	@ 0x3f
 800c09e:	2101      	movs	r1, #1
 800c0a0:	5499      	strb	r1, [r3, r2]
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2240      	movs	r2, #64	@ 0x40
 800c0a6:	2101      	movs	r1, #1
 800c0a8:	5499      	strb	r1, [r3, r2]
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2241      	movs	r2, #65	@ 0x41
 800c0ae:	2101      	movs	r1, #1
 800c0b0:	5499      	strb	r1, [r3, r2]
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2242      	movs	r2, #66	@ 0x42
 800c0b6:	2101      	movs	r1, #1
 800c0b8:	5499      	strb	r1, [r3, r2]
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2243      	movs	r2, #67	@ 0x43
 800c0be:	2101      	movs	r1, #1
 800c0c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2244      	movs	r2, #68	@ 0x44
 800c0c6:	2101      	movs	r1, #1
 800c0c8:	5499      	strb	r1, [r3, r2]
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2245      	movs	r2, #69	@ 0x45
 800c0ce:	2101      	movs	r1, #1
 800c0d0:	5499      	strb	r1, [r3, r2]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2246      	movs	r2, #70	@ 0x46
 800c0d6:	2101      	movs	r1, #1
 800c0d8:	5499      	strb	r1, [r3, r2]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2247      	movs	r2, #71	@ 0x47
 800c0de:	2101      	movs	r1, #1
 800c0e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	223d      	movs	r2, #61	@ 0x3d
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
}
 800c0ec:	0018      	movs	r0, r3
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	b002      	add	sp, #8
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c104:	2301      	movs	r3, #1
 800c106:	e090      	b.n	800c22a <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	223d      	movs	r2, #61	@ 0x3d
 800c10c:	5c9b      	ldrb	r3, [r3, r2]
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	2b00      	cmp	r3, #0
 800c112:	d107      	bne.n	800c124 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	223c      	movs	r2, #60	@ 0x3c
 800c118:	2100      	movs	r1, #0
 800c11a:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	0018      	movs	r0, r3
 800c120:	f7fb fc1e 	bl	8007960 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	223d      	movs	r2, #61	@ 0x3d
 800c128:	2102      	movs	r1, #2
 800c12a:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	689a      	ldr	r2, [r3, #8]
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	493f      	ldr	r1, [pc, #252]	@ (800c234 <HAL_TIM_Encoder_Init+0x140>)
 800c138:	400a      	ands	r2, r1
 800c13a:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	3304      	adds	r3, #4
 800c144:	0019      	movs	r1, r3
 800c146:	0010      	movs	r0, r2
 800c148:	f000 faa4 	bl	800c694 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	689b      	ldr	r3, [r3, #8]
 800c152:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	699b      	ldr	r3, [r3, #24]
 800c15a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	6a1b      	ldr	r3, [r3, #32]
 800c162:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	4313      	orrs	r3, r2
 800c16c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c16e:	693b      	ldr	r3, [r7, #16]
 800c170:	4a31      	ldr	r2, [pc, #196]	@ (800c238 <HAL_TIM_Encoder_Init+0x144>)
 800c172:	4013      	ands	r3, r2
 800c174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	689a      	ldr	r2, [r3, #8]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	021b      	lsls	r3, r3, #8
 800c180:	4313      	orrs	r3, r2
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	4313      	orrs	r3, r2
 800c186:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	4a2c      	ldr	r2, [pc, #176]	@ (800c23c <HAL_TIM_Encoder_Init+0x148>)
 800c18c:	4013      	ands	r3, r2
 800c18e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	4a2b      	ldr	r2, [pc, #172]	@ (800c240 <HAL_TIM_Encoder_Init+0x14c>)
 800c194:	4013      	ands	r3, r2
 800c196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	68da      	ldr	r2, [r3, #12]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	69db      	ldr	r3, [r3, #28]
 800c1a0:	021b      	lsls	r3, r3, #8
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	691b      	ldr	r3, [r3, #16]
 800c1ae:	011a      	lsls	r2, r3, #4
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	6a1b      	ldr	r3, [r3, #32]
 800c1b4:	031b      	lsls	r3, r3, #12
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	693a      	ldr	r2, [r7, #16]
 800c1ba:	4313      	orrs	r3, r2
 800c1bc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2222      	movs	r2, #34	@ 0x22
 800c1c2:	4393      	bics	r3, r2
 800c1c4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	2288      	movs	r2, #136	@ 0x88
 800c1ca:	4393      	bics	r3, r2
 800c1cc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	695b      	ldr	r3, [r3, #20]
 800c1d6:	011b      	lsls	r3, r3, #4
 800c1d8:	4313      	orrs	r3, r2
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	697a      	ldr	r2, [r7, #20]
 800c1e6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	68fa      	ldr	r2, [r7, #12]
 800c1f6:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2248      	movs	r2, #72	@ 0x48
 800c1fc:	2101      	movs	r1, #1
 800c1fe:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	223e      	movs	r2, #62	@ 0x3e
 800c204:	2101      	movs	r1, #1
 800c206:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	223f      	movs	r2, #63	@ 0x3f
 800c20c:	2101      	movs	r1, #1
 800c20e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2244      	movs	r2, #68	@ 0x44
 800c214:	2101      	movs	r1, #1
 800c216:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	2245      	movs	r2, #69	@ 0x45
 800c21c:	2101      	movs	r1, #1
 800c21e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	223d      	movs	r2, #61	@ 0x3d
 800c224:	2101      	movs	r1, #1
 800c226:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c228:	2300      	movs	r3, #0
}
 800c22a:	0018      	movs	r0, r3
 800c22c:	46bd      	mov	sp, r7
 800c22e:	b006      	add	sp, #24
 800c230:	bd80      	pop	{r7, pc}
 800c232:	46c0      	nop			@ (mov r8, r8)
 800c234:	fffebff8 	.word	0xfffebff8
 800c238:	fffffcfc 	.word	0xfffffcfc
 800c23c:	fffff3f3 	.word	0xfffff3f3
 800c240:	ffff0f0f 	.word	0xffff0f0f

0800c244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b084      	sub	sp, #16
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68db      	ldr	r3, [r3, #12]
 800c252:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2202      	movs	r2, #2
 800c260:	4013      	ands	r3, r2
 800c262:	d021      	beq.n	800c2a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2202      	movs	r2, #2
 800c268:	4013      	ands	r3, r2
 800c26a:	d01d      	beq.n	800c2a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2203      	movs	r2, #3
 800c272:	4252      	negs	r2, r2
 800c274:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	699b      	ldr	r3, [r3, #24]
 800c282:	2203      	movs	r2, #3
 800c284:	4013      	ands	r3, r2
 800c286:	d004      	beq.n	800c292 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	0018      	movs	r0, r3
 800c28c:	f000 f9ea 	bl	800c664 <HAL_TIM_IC_CaptureCallback>
 800c290:	e007      	b.n	800c2a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	0018      	movs	r0, r3
 800c296:	f000 f9dd 	bl	800c654 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	0018      	movs	r0, r3
 800c29e:	f000 f9e9 	bl	800c674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	4013      	ands	r3, r2
 800c2ae:	d022      	beq.n	800c2f6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2204      	movs	r2, #4
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	d01e      	beq.n	800c2f6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	2205      	movs	r2, #5
 800c2be:	4252      	negs	r2, r2
 800c2c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	2202      	movs	r2, #2
 800c2c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	699a      	ldr	r2, [r3, #24]
 800c2ce:	23c0      	movs	r3, #192	@ 0xc0
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4013      	ands	r3, r2
 800c2d4:	d004      	beq.n	800c2e0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	0018      	movs	r0, r3
 800c2da:	f000 f9c3 	bl	800c664 <HAL_TIM_IC_CaptureCallback>
 800c2de:	e007      	b.n	800c2f0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	0018      	movs	r0, r3
 800c2e4:	f000 f9b6 	bl	800c654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	0018      	movs	r0, r3
 800c2ec:	f000 f9c2 	bl	800c674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	2208      	movs	r2, #8
 800c2fa:	4013      	ands	r3, r2
 800c2fc:	d021      	beq.n	800c342 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	2208      	movs	r2, #8
 800c302:	4013      	ands	r3, r2
 800c304:	d01d      	beq.n	800c342 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	2209      	movs	r2, #9
 800c30c:	4252      	negs	r2, r2
 800c30e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2204      	movs	r2, #4
 800c314:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	69db      	ldr	r3, [r3, #28]
 800c31c:	2203      	movs	r2, #3
 800c31e:	4013      	ands	r3, r2
 800c320:	d004      	beq.n	800c32c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	0018      	movs	r0, r3
 800c326:	f000 f99d 	bl	800c664 <HAL_TIM_IC_CaptureCallback>
 800c32a:	e007      	b.n	800c33c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	0018      	movs	r0, r3
 800c330:	f000 f990 	bl	800c654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	0018      	movs	r0, r3
 800c338:	f000 f99c 	bl	800c674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	2210      	movs	r2, #16
 800c346:	4013      	ands	r3, r2
 800c348:	d022      	beq.n	800c390 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2210      	movs	r2, #16
 800c34e:	4013      	ands	r3, r2
 800c350:	d01e      	beq.n	800c390 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	2211      	movs	r2, #17
 800c358:	4252      	negs	r2, r2
 800c35a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2208      	movs	r2, #8
 800c360:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	69da      	ldr	r2, [r3, #28]
 800c368:	23c0      	movs	r3, #192	@ 0xc0
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4013      	ands	r3, r2
 800c36e:	d004      	beq.n	800c37a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	0018      	movs	r0, r3
 800c374:	f000 f976 	bl	800c664 <HAL_TIM_IC_CaptureCallback>
 800c378:	e007      	b.n	800c38a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	0018      	movs	r0, r3
 800c37e:	f000 f969 	bl	800c654 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	0018      	movs	r0, r3
 800c386:	f000 f975 	bl	800c674 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	2200      	movs	r2, #0
 800c38e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	2201      	movs	r2, #1
 800c394:	4013      	ands	r3, r2
 800c396:	d00c      	beq.n	800c3b2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2201      	movs	r2, #1
 800c39c:	4013      	ands	r3, r2
 800c39e:	d008      	beq.n	800c3b2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	2202      	movs	r2, #2
 800c3a6:	4252      	negs	r2, r2
 800c3a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	0018      	movs	r0, r3
 800c3ae:	f7fb f8d5 	bl	800755c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	2280      	movs	r2, #128	@ 0x80
 800c3b6:	4013      	ands	r3, r2
 800c3b8:	d104      	bne.n	800c3c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c3ba:	68ba      	ldr	r2, [r7, #8]
 800c3bc:	2380      	movs	r3, #128	@ 0x80
 800c3be:	019b      	lsls	r3, r3, #6
 800c3c0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c3c2:	d00b      	beq.n	800c3dc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2280      	movs	r2, #128	@ 0x80
 800c3c8:	4013      	ands	r3, r2
 800c3ca:	d007      	beq.n	800c3dc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	4a1e      	ldr	r2, [pc, #120]	@ (800c44c <HAL_TIM_IRQHandler+0x208>)
 800c3d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	0018      	movs	r0, r3
 800c3d8:	f000 fd36 	bl	800ce48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c3dc:	68ba      	ldr	r2, [r7, #8]
 800c3de:	2380      	movs	r3, #128	@ 0x80
 800c3e0:	005b      	lsls	r3, r3, #1
 800c3e2:	4013      	ands	r3, r2
 800c3e4:	d00b      	beq.n	800c3fe <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	2280      	movs	r2, #128	@ 0x80
 800c3ea:	4013      	ands	r3, r2
 800c3ec:	d007      	beq.n	800c3fe <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a17      	ldr	r2, [pc, #92]	@ (800c450 <HAL_TIM_IRQHandler+0x20c>)
 800c3f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	0018      	movs	r0, r3
 800c3fa:	f000 fd2d 	bl	800ce58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	2240      	movs	r2, #64	@ 0x40
 800c402:	4013      	ands	r3, r2
 800c404:	d00c      	beq.n	800c420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	2240      	movs	r2, #64	@ 0x40
 800c40a:	4013      	ands	r3, r2
 800c40c:	d008      	beq.n	800c420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	2241      	movs	r2, #65	@ 0x41
 800c414:	4252      	negs	r2, r2
 800c416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	0018      	movs	r0, r3
 800c41c:	f000 f932 	bl	800c684 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	2220      	movs	r2, #32
 800c424:	4013      	ands	r3, r2
 800c426:	d00c      	beq.n	800c442 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2220      	movs	r2, #32
 800c42c:	4013      	ands	r3, r2
 800c42e:	d008      	beq.n	800c442 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2221      	movs	r2, #33	@ 0x21
 800c436:	4252      	negs	r2, r2
 800c438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	0018      	movs	r0, r3
 800c43e:	f000 fcfb 	bl	800ce38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c442:	46c0      	nop			@ (mov r8, r8)
 800c444:	46bd      	mov	sp, r7
 800c446:	b004      	add	sp, #16
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	46c0      	nop			@ (mov r8, r8)
 800c44c:	ffffdf7f 	.word	0xffffdf7f
 800c450:	fffffeff 	.word	0xfffffeff

0800c454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b086      	sub	sp, #24
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c460:	2317      	movs	r3, #23
 800c462:	18fb      	adds	r3, r7, r3
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	223c      	movs	r2, #60	@ 0x3c
 800c46c:	5c9b      	ldrb	r3, [r3, r2]
 800c46e:	2b01      	cmp	r3, #1
 800c470:	d101      	bne.n	800c476 <HAL_TIM_PWM_ConfigChannel+0x22>
 800c472:	2302      	movs	r3, #2
 800c474:	e0e5      	b.n	800c642 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	223c      	movs	r2, #60	@ 0x3c
 800c47a:	2101      	movs	r1, #1
 800c47c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2b14      	cmp	r3, #20
 800c482:	d900      	bls.n	800c486 <HAL_TIM_PWM_ConfigChannel+0x32>
 800c484:	e0d1      	b.n	800c62a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	009a      	lsls	r2, r3, #2
 800c48a:	4b70      	ldr	r3, [pc, #448]	@ (800c64c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800c48c:	18d3      	adds	r3, r2, r3
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	0011      	movs	r1, r2
 800c49a:	0018      	movs	r0, r3
 800c49c:	f000 f992 	bl	800c7c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	699a      	ldr	r2, [r3, #24]
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	2108      	movs	r1, #8
 800c4ac:	430a      	orrs	r2, r1
 800c4ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	699a      	ldr	r2, [r3, #24]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	2104      	movs	r1, #4
 800c4bc:	438a      	bics	r2, r1
 800c4be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	6999      	ldr	r1, [r3, #24]
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	691a      	ldr	r2, [r3, #16]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	430a      	orrs	r2, r1
 800c4d0:	619a      	str	r2, [r3, #24]
      break;
 800c4d2:	e0af      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	68ba      	ldr	r2, [r7, #8]
 800c4da:	0011      	movs	r1, r2
 800c4dc:	0018      	movs	r0, r3
 800c4de:	f000 f9fb 	bl	800c8d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	699a      	ldr	r2, [r3, #24]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2180      	movs	r1, #128	@ 0x80
 800c4ee:	0109      	lsls	r1, r1, #4
 800c4f0:	430a      	orrs	r2, r1
 800c4f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	699a      	ldr	r2, [r3, #24]
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	4954      	ldr	r1, [pc, #336]	@ (800c650 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c500:	400a      	ands	r2, r1
 800c502:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6999      	ldr	r1, [r3, #24]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	691b      	ldr	r3, [r3, #16]
 800c50e:	021a      	lsls	r2, r3, #8
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	430a      	orrs	r2, r1
 800c516:	619a      	str	r2, [r3, #24]
      break;
 800c518:	e08c      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68ba      	ldr	r2, [r7, #8]
 800c520:	0011      	movs	r1, r2
 800c522:	0018      	movs	r0, r3
 800c524:	f000 fa5c 	bl	800c9e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	69da      	ldr	r2, [r3, #28]
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2108      	movs	r1, #8
 800c534:	430a      	orrs	r2, r1
 800c536:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	69da      	ldr	r2, [r3, #28]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2104      	movs	r1, #4
 800c544:	438a      	bics	r2, r1
 800c546:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	69d9      	ldr	r1, [r3, #28]
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	691a      	ldr	r2, [r3, #16]
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	430a      	orrs	r2, r1
 800c558:	61da      	str	r2, [r3, #28]
      break;
 800c55a:	e06b      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	0011      	movs	r1, r2
 800c564:	0018      	movs	r0, r3
 800c566:	f000 fac3 	bl	800caf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	69da      	ldr	r2, [r3, #28]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	2180      	movs	r1, #128	@ 0x80
 800c576:	0109      	lsls	r1, r1, #4
 800c578:	430a      	orrs	r2, r1
 800c57a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	69da      	ldr	r2, [r3, #28]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4932      	ldr	r1, [pc, #200]	@ (800c650 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c588:	400a      	ands	r2, r1
 800c58a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	69d9      	ldr	r1, [r3, #28]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	691b      	ldr	r3, [r3, #16]
 800c596:	021a      	lsls	r2, r3, #8
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	430a      	orrs	r2, r1
 800c59e:	61da      	str	r2, [r3, #28]
      break;
 800c5a0:	e048      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68ba      	ldr	r2, [r7, #8]
 800c5a8:	0011      	movs	r1, r2
 800c5aa:	0018      	movs	r0, r3
 800c5ac:	f000 fb0a 	bl	800cbc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	2108      	movs	r1, #8
 800c5bc:	430a      	orrs	r2, r1
 800c5be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2104      	movs	r1, #4
 800c5cc:	438a      	bics	r2, r1
 800c5ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	691a      	ldr	r2, [r3, #16]
 800c5da:	68fb      	ldr	r3, [r7, #12]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	430a      	orrs	r2, r1
 800c5e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c5e2:	e027      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68ba      	ldr	r2, [r7, #8]
 800c5ea:	0011      	movs	r1, r2
 800c5ec:	0018      	movs	r0, r3
 800c5ee:	f000 fb49 	bl	800cc84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2180      	movs	r1, #128	@ 0x80
 800c5fe:	0109      	lsls	r1, r1, #4
 800c600:	430a      	orrs	r2, r1
 800c602:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	4910      	ldr	r1, [pc, #64]	@ (800c650 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800c610:	400a      	ands	r2, r1
 800c612:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	021a      	lsls	r2, r3, #8
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	430a      	orrs	r2, r1
 800c626:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c628:	e004      	b.n	800c634 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800c62a:	2317      	movs	r3, #23
 800c62c:	18fb      	adds	r3, r7, r3
 800c62e:	2201      	movs	r2, #1
 800c630:	701a      	strb	r2, [r3, #0]
      break;
 800c632:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	223c      	movs	r2, #60	@ 0x3c
 800c638:	2100      	movs	r1, #0
 800c63a:	5499      	strb	r1, [r3, r2]

  return status;
 800c63c:	2317      	movs	r3, #23
 800c63e:	18fb      	adds	r3, r7, r3
 800c640:	781b      	ldrb	r3, [r3, #0]
}
 800c642:	0018      	movs	r0, r3
 800c644:	46bd      	mov	sp, r7
 800c646:	b006      	add	sp, #24
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	46c0      	nop			@ (mov r8, r8)
 800c64c:	0801e4ac 	.word	0x0801e4ac
 800c650:	fffffbff 	.word	0xfffffbff

0800c654 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b082      	sub	sp, #8
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c65c:	46c0      	nop			@ (mov r8, r8)
 800c65e:	46bd      	mov	sp, r7
 800c660:	b002      	add	sp, #8
 800c662:	bd80      	pop	{r7, pc}

0800c664 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c66c:	46c0      	nop			@ (mov r8, r8)
 800c66e:	46bd      	mov	sp, r7
 800c670:	b002      	add	sp, #8
 800c672:	bd80      	pop	{r7, pc}

0800c674 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c67c:	46c0      	nop			@ (mov r8, r8)
 800c67e:	46bd      	mov	sp, r7
 800c680:	b002      	add	sp, #8
 800c682:	bd80      	pop	{r7, pc}

0800c684 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c68c:	46c0      	nop			@ (mov r8, r8)
 800c68e:	46bd      	mov	sp, r7
 800c690:	b002      	add	sp, #8
 800c692:	bd80      	pop	{r7, pc}

0800c694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b084      	sub	sp, #16
 800c698:	af00      	add	r7, sp, #0
 800c69a:	6078      	str	r0, [r7, #4]
 800c69c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	4a3f      	ldr	r2, [pc, #252]	@ (800c7a4 <TIM_Base_SetConfig+0x110>)
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d00c      	beq.n	800c6c6 <TIM_Base_SetConfig+0x32>
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	2380      	movs	r3, #128	@ 0x80
 800c6b0:	05db      	lsls	r3, r3, #23
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	d007      	beq.n	800c6c6 <TIM_Base_SetConfig+0x32>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	4a3b      	ldr	r2, [pc, #236]	@ (800c7a8 <TIM_Base_SetConfig+0x114>)
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d003      	beq.n	800c6c6 <TIM_Base_SetConfig+0x32>
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4a3a      	ldr	r2, [pc, #232]	@ (800c7ac <TIM_Base_SetConfig+0x118>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d108      	bne.n	800c6d8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2270      	movs	r2, #112	@ 0x70
 800c6ca:	4393      	bics	r3, r2
 800c6cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6ce:	683b      	ldr	r3, [r7, #0]
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	4a32      	ldr	r2, [pc, #200]	@ (800c7a4 <TIM_Base_SetConfig+0x110>)
 800c6dc:	4293      	cmp	r3, r2
 800c6de:	d01c      	beq.n	800c71a <TIM_Base_SetConfig+0x86>
 800c6e0:	687a      	ldr	r2, [r7, #4]
 800c6e2:	2380      	movs	r3, #128	@ 0x80
 800c6e4:	05db      	lsls	r3, r3, #23
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d017      	beq.n	800c71a <TIM_Base_SetConfig+0x86>
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	4a2e      	ldr	r2, [pc, #184]	@ (800c7a8 <TIM_Base_SetConfig+0x114>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d013      	beq.n	800c71a <TIM_Base_SetConfig+0x86>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	4a2d      	ldr	r2, [pc, #180]	@ (800c7ac <TIM_Base_SetConfig+0x118>)
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d00f      	beq.n	800c71a <TIM_Base_SetConfig+0x86>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	4a2c      	ldr	r2, [pc, #176]	@ (800c7b0 <TIM_Base_SetConfig+0x11c>)
 800c6fe:	4293      	cmp	r3, r2
 800c700:	d00b      	beq.n	800c71a <TIM_Base_SetConfig+0x86>
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	4a2b      	ldr	r2, [pc, #172]	@ (800c7b4 <TIM_Base_SetConfig+0x120>)
 800c706:	4293      	cmp	r3, r2
 800c708:	d007      	beq.n	800c71a <TIM_Base_SetConfig+0x86>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	4a2a      	ldr	r2, [pc, #168]	@ (800c7b8 <TIM_Base_SetConfig+0x124>)
 800c70e:	4293      	cmp	r3, r2
 800c710:	d003      	beq.n	800c71a <TIM_Base_SetConfig+0x86>
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	4a29      	ldr	r2, [pc, #164]	@ (800c7bc <TIM_Base_SetConfig+0x128>)
 800c716:	4293      	cmp	r3, r2
 800c718:	d108      	bne.n	800c72c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	4a28      	ldr	r2, [pc, #160]	@ (800c7c0 <TIM_Base_SetConfig+0x12c>)
 800c71e:	4013      	ands	r3, r2
 800c720:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	68db      	ldr	r3, [r3, #12]
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	4313      	orrs	r3, r2
 800c72a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2280      	movs	r2, #128	@ 0x80
 800c730:	4393      	bics	r3, r2
 800c732:	001a      	movs	r2, r3
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	695b      	ldr	r3, [r3, #20]
 800c738:	4313      	orrs	r3, r2
 800c73a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	689a      	ldr	r2, [r3, #8]
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	681a      	ldr	r2, [r3, #0]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	4a13      	ldr	r2, [pc, #76]	@ (800c7a4 <TIM_Base_SetConfig+0x110>)
 800c756:	4293      	cmp	r3, r2
 800c758:	d00b      	beq.n	800c772 <TIM_Base_SetConfig+0xde>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	4a15      	ldr	r2, [pc, #84]	@ (800c7b4 <TIM_Base_SetConfig+0x120>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d007      	beq.n	800c772 <TIM_Base_SetConfig+0xde>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	4a14      	ldr	r2, [pc, #80]	@ (800c7b8 <TIM_Base_SetConfig+0x124>)
 800c766:	4293      	cmp	r3, r2
 800c768:	d003      	beq.n	800c772 <TIM_Base_SetConfig+0xde>
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a13      	ldr	r2, [pc, #76]	@ (800c7bc <TIM_Base_SetConfig+0x128>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d103      	bne.n	800c77a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	691a      	ldr	r2, [r3, #16]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2201      	movs	r2, #1
 800c77e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	691b      	ldr	r3, [r3, #16]
 800c784:	2201      	movs	r2, #1
 800c786:	4013      	ands	r3, r2
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d106      	bne.n	800c79a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	691b      	ldr	r3, [r3, #16]
 800c790:	2201      	movs	r2, #1
 800c792:	4393      	bics	r3, r2
 800c794:	001a      	movs	r2, r3
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	611a      	str	r2, [r3, #16]
  }
}
 800c79a:	46c0      	nop			@ (mov r8, r8)
 800c79c:	46bd      	mov	sp, r7
 800c79e:	b004      	add	sp, #16
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	46c0      	nop			@ (mov r8, r8)
 800c7a4:	40012c00 	.word	0x40012c00
 800c7a8:	40000400 	.word	0x40000400
 800c7ac:	40000800 	.word	0x40000800
 800c7b0:	40002000 	.word	0x40002000
 800c7b4:	40014000 	.word	0x40014000
 800c7b8:	40014400 	.word	0x40014400
 800c7bc:	40014800 	.word	0x40014800
 800c7c0:	fffffcff 	.word	0xfffffcff

0800c7c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	6a1b      	ldr	r3, [r3, #32]
 800c7d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6a1b      	ldr	r3, [r3, #32]
 800c7d8:	2201      	movs	r2, #1
 800c7da:	4393      	bics	r3, r2
 800c7dc:	001a      	movs	r2, r3
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	685b      	ldr	r3, [r3, #4]
 800c7e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	4a32      	ldr	r2, [pc, #200]	@ (800c8bc <TIM_OC1_SetConfig+0xf8>)
 800c7f2:	4013      	ands	r3, r2
 800c7f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	2203      	movs	r2, #3
 800c7fa:	4393      	bics	r3, r2
 800c7fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	68fa      	ldr	r2, [r7, #12]
 800c804:	4313      	orrs	r3, r2
 800c806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	2202      	movs	r2, #2
 800c80c:	4393      	bics	r3, r2
 800c80e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	4313      	orrs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	4a28      	ldr	r2, [pc, #160]	@ (800c8c0 <TIM_OC1_SetConfig+0xfc>)
 800c81e:	4293      	cmp	r3, r2
 800c820:	d00b      	beq.n	800c83a <TIM_OC1_SetConfig+0x76>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	4a27      	ldr	r2, [pc, #156]	@ (800c8c4 <TIM_OC1_SetConfig+0x100>)
 800c826:	4293      	cmp	r3, r2
 800c828:	d007      	beq.n	800c83a <TIM_OC1_SetConfig+0x76>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	4a26      	ldr	r2, [pc, #152]	@ (800c8c8 <TIM_OC1_SetConfig+0x104>)
 800c82e:	4293      	cmp	r3, r2
 800c830:	d003      	beq.n	800c83a <TIM_OC1_SetConfig+0x76>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a25      	ldr	r2, [pc, #148]	@ (800c8cc <TIM_OC1_SetConfig+0x108>)
 800c836:	4293      	cmp	r3, r2
 800c838:	d10c      	bne.n	800c854 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	2208      	movs	r2, #8
 800c83e:	4393      	bics	r3, r2
 800c840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	68db      	ldr	r3, [r3, #12]
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	4313      	orrs	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	2204      	movs	r2, #4
 800c850:	4393      	bics	r3, r2
 800c852:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a1a      	ldr	r2, [pc, #104]	@ (800c8c0 <TIM_OC1_SetConfig+0xfc>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d00b      	beq.n	800c874 <TIM_OC1_SetConfig+0xb0>
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4a19      	ldr	r2, [pc, #100]	@ (800c8c4 <TIM_OC1_SetConfig+0x100>)
 800c860:	4293      	cmp	r3, r2
 800c862:	d007      	beq.n	800c874 <TIM_OC1_SetConfig+0xb0>
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	4a18      	ldr	r2, [pc, #96]	@ (800c8c8 <TIM_OC1_SetConfig+0x104>)
 800c868:	4293      	cmp	r3, r2
 800c86a:	d003      	beq.n	800c874 <TIM_OC1_SetConfig+0xb0>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	4a17      	ldr	r2, [pc, #92]	@ (800c8cc <TIM_OC1_SetConfig+0x108>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d111      	bne.n	800c898 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	4a16      	ldr	r2, [pc, #88]	@ (800c8d0 <TIM_OC1_SetConfig+0x10c>)
 800c878:	4013      	ands	r3, r2
 800c87a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	4a15      	ldr	r2, [pc, #84]	@ (800c8d4 <TIM_OC1_SetConfig+0x110>)
 800c880:	4013      	ands	r3, r2
 800c882:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	695b      	ldr	r3, [r3, #20]
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	699b      	ldr	r3, [r3, #24]
 800c892:	693a      	ldr	r2, [r7, #16]
 800c894:	4313      	orrs	r3, r2
 800c896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	693a      	ldr	r2, [r7, #16]
 800c89c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	685a      	ldr	r2, [r3, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	621a      	str	r2, [r3, #32]
}
 800c8b2:	46c0      	nop			@ (mov r8, r8)
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	b006      	add	sp, #24
 800c8b8:	bd80      	pop	{r7, pc}
 800c8ba:	46c0      	nop			@ (mov r8, r8)
 800c8bc:	fffeff8f 	.word	0xfffeff8f
 800c8c0:	40012c00 	.word	0x40012c00
 800c8c4:	40014000 	.word	0x40014000
 800c8c8:	40014400 	.word	0x40014400
 800c8cc:	40014800 	.word	0x40014800
 800c8d0:	fffffeff 	.word	0xfffffeff
 800c8d4:	fffffdff 	.word	0xfffffdff

0800c8d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b086      	sub	sp, #24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
 800c8e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6a1b      	ldr	r3, [r3, #32]
 800c8ec:	2210      	movs	r2, #16
 800c8ee:	4393      	bics	r3, r2
 800c8f0:	001a      	movs	r2, r3
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	699b      	ldr	r3, [r3, #24]
 800c900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	4a2e      	ldr	r2, [pc, #184]	@ (800c9c0 <TIM_OC2_SetConfig+0xe8>)
 800c906:	4013      	ands	r3, r2
 800c908:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	4a2d      	ldr	r2, [pc, #180]	@ (800c9c4 <TIM_OC2_SetConfig+0xec>)
 800c90e:	4013      	ands	r3, r2
 800c910:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	021b      	lsls	r3, r3, #8
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	4313      	orrs	r3, r2
 800c91c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2220      	movs	r2, #32
 800c922:	4393      	bics	r3, r2
 800c924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	011b      	lsls	r3, r3, #4
 800c92c:	697a      	ldr	r2, [r7, #20]
 800c92e:	4313      	orrs	r3, r2
 800c930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	4a24      	ldr	r2, [pc, #144]	@ (800c9c8 <TIM_OC2_SetConfig+0xf0>)
 800c936:	4293      	cmp	r3, r2
 800c938:	d10d      	bne.n	800c956 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	2280      	movs	r2, #128	@ 0x80
 800c93e:	4393      	bics	r3, r2
 800c940:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	011b      	lsls	r3, r3, #4
 800c948:	697a      	ldr	r2, [r7, #20]
 800c94a:	4313      	orrs	r3, r2
 800c94c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c94e:	697b      	ldr	r3, [r7, #20]
 800c950:	2240      	movs	r2, #64	@ 0x40
 800c952:	4393      	bics	r3, r2
 800c954:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a1b      	ldr	r2, [pc, #108]	@ (800c9c8 <TIM_OC2_SetConfig+0xf0>)
 800c95a:	4293      	cmp	r3, r2
 800c95c:	d00b      	beq.n	800c976 <TIM_OC2_SetConfig+0x9e>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	4a1a      	ldr	r2, [pc, #104]	@ (800c9cc <TIM_OC2_SetConfig+0xf4>)
 800c962:	4293      	cmp	r3, r2
 800c964:	d007      	beq.n	800c976 <TIM_OC2_SetConfig+0x9e>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a19      	ldr	r2, [pc, #100]	@ (800c9d0 <TIM_OC2_SetConfig+0xf8>)
 800c96a:	4293      	cmp	r3, r2
 800c96c:	d003      	beq.n	800c976 <TIM_OC2_SetConfig+0x9e>
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	4a18      	ldr	r2, [pc, #96]	@ (800c9d4 <TIM_OC2_SetConfig+0xfc>)
 800c972:	4293      	cmp	r3, r2
 800c974:	d113      	bne.n	800c99e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	4a17      	ldr	r2, [pc, #92]	@ (800c9d8 <TIM_OC2_SetConfig+0x100>)
 800c97a:	4013      	ands	r3, r2
 800c97c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	4a16      	ldr	r2, [pc, #88]	@ (800c9dc <TIM_OC2_SetConfig+0x104>)
 800c982:	4013      	ands	r3, r2
 800c984:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	009b      	lsls	r3, r3, #2
 800c98c:	693a      	ldr	r2, [r7, #16]
 800c98e:	4313      	orrs	r3, r2
 800c990:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	699b      	ldr	r3, [r3, #24]
 800c996:	009b      	lsls	r3, r3, #2
 800c998:	693a      	ldr	r2, [r7, #16]
 800c99a:	4313      	orrs	r3, r2
 800c99c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	693a      	ldr	r2, [r7, #16]
 800c9a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	685a      	ldr	r2, [r3, #4]
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	697a      	ldr	r2, [r7, #20]
 800c9b6:	621a      	str	r2, [r3, #32]
}
 800c9b8:	46c0      	nop			@ (mov r8, r8)
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	b006      	add	sp, #24
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	feff8fff 	.word	0xfeff8fff
 800c9c4:	fffffcff 	.word	0xfffffcff
 800c9c8:	40012c00 	.word	0x40012c00
 800c9cc:	40014000 	.word	0x40014000
 800c9d0:	40014400 	.word	0x40014400
 800c9d4:	40014800 	.word	0x40014800
 800c9d8:	fffffbff 	.word	0xfffffbff
 800c9dc:	fffff7ff 	.word	0xfffff7ff

0800c9e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b086      	sub	sp, #24
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
 800c9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6a1b      	ldr	r3, [r3, #32]
 800c9ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	4a33      	ldr	r2, [pc, #204]	@ (800cac4 <TIM_OC3_SetConfig+0xe4>)
 800c9f6:	401a      	ands	r2, r3
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	685b      	ldr	r3, [r3, #4]
 800ca00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	69db      	ldr	r3, [r3, #28]
 800ca06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4a2f      	ldr	r2, [pc, #188]	@ (800cac8 <TIM_OC3_SetConfig+0xe8>)
 800ca0c:	4013      	ands	r3, r2
 800ca0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2203      	movs	r2, #3
 800ca14:	4393      	bics	r3, r2
 800ca16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	68fa      	ldr	r2, [r7, #12]
 800ca1e:	4313      	orrs	r3, r2
 800ca20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	4a29      	ldr	r2, [pc, #164]	@ (800cacc <TIM_OC3_SetConfig+0xec>)
 800ca26:	4013      	ands	r3, r2
 800ca28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	689b      	ldr	r3, [r3, #8]
 800ca2e:	021b      	lsls	r3, r3, #8
 800ca30:	697a      	ldr	r2, [r7, #20]
 800ca32:	4313      	orrs	r3, r2
 800ca34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4a25      	ldr	r2, [pc, #148]	@ (800cad0 <TIM_OC3_SetConfig+0xf0>)
 800ca3a:	4293      	cmp	r3, r2
 800ca3c:	d10d      	bne.n	800ca5a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	4a24      	ldr	r2, [pc, #144]	@ (800cad4 <TIM_OC3_SetConfig+0xf4>)
 800ca42:	4013      	ands	r3, r2
 800ca44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	021b      	lsls	r3, r3, #8
 800ca4c:	697a      	ldr	r2, [r7, #20]
 800ca4e:	4313      	orrs	r3, r2
 800ca50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	4a20      	ldr	r2, [pc, #128]	@ (800cad8 <TIM_OC3_SetConfig+0xf8>)
 800ca56:	4013      	ands	r3, r2
 800ca58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	4a1c      	ldr	r2, [pc, #112]	@ (800cad0 <TIM_OC3_SetConfig+0xf0>)
 800ca5e:	4293      	cmp	r3, r2
 800ca60:	d00b      	beq.n	800ca7a <TIM_OC3_SetConfig+0x9a>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a1d      	ldr	r2, [pc, #116]	@ (800cadc <TIM_OC3_SetConfig+0xfc>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d007      	beq.n	800ca7a <TIM_OC3_SetConfig+0x9a>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a1c      	ldr	r2, [pc, #112]	@ (800cae0 <TIM_OC3_SetConfig+0x100>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d003      	beq.n	800ca7a <TIM_OC3_SetConfig+0x9a>
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	4a1b      	ldr	r2, [pc, #108]	@ (800cae4 <TIM_OC3_SetConfig+0x104>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d113      	bne.n	800caa2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ca7a:	693b      	ldr	r3, [r7, #16]
 800ca7c:	4a1a      	ldr	r2, [pc, #104]	@ (800cae8 <TIM_OC3_SetConfig+0x108>)
 800ca7e:	4013      	ands	r3, r2
 800ca80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	4a19      	ldr	r2, [pc, #100]	@ (800caec <TIM_OC3_SetConfig+0x10c>)
 800ca86:	4013      	ands	r3, r2
 800ca88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	695b      	ldr	r3, [r3, #20]
 800ca8e:	011b      	lsls	r3, r3, #4
 800ca90:	693a      	ldr	r2, [r7, #16]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	699b      	ldr	r3, [r3, #24]
 800ca9a:	011b      	lsls	r3, r3, #4
 800ca9c:	693a      	ldr	r2, [r7, #16]
 800ca9e:	4313      	orrs	r3, r2
 800caa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	693a      	ldr	r2, [r7, #16]
 800caa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68fa      	ldr	r2, [r7, #12]
 800caac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	697a      	ldr	r2, [r7, #20]
 800caba:	621a      	str	r2, [r3, #32]
}
 800cabc:	46c0      	nop			@ (mov r8, r8)
 800cabe:	46bd      	mov	sp, r7
 800cac0:	b006      	add	sp, #24
 800cac2:	bd80      	pop	{r7, pc}
 800cac4:	fffffeff 	.word	0xfffffeff
 800cac8:	fffeff8f 	.word	0xfffeff8f
 800cacc:	fffffdff 	.word	0xfffffdff
 800cad0:	40012c00 	.word	0x40012c00
 800cad4:	fffff7ff 	.word	0xfffff7ff
 800cad8:	fffffbff 	.word	0xfffffbff
 800cadc:	40014000 	.word	0x40014000
 800cae0:	40014400 	.word	0x40014400
 800cae4:	40014800 	.word	0x40014800
 800cae8:	ffffefff 	.word	0xffffefff
 800caec:	ffffdfff 	.word	0xffffdfff

0800caf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	6a1b      	ldr	r3, [r3, #32]
 800cafe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	4a26      	ldr	r2, [pc, #152]	@ (800cba0 <TIM_OC4_SetConfig+0xb0>)
 800cb06:	401a      	ands	r2, r3
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	685b      	ldr	r3, [r3, #4]
 800cb10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	69db      	ldr	r3, [r3, #28]
 800cb16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	4a22      	ldr	r2, [pc, #136]	@ (800cba4 <TIM_OC4_SetConfig+0xb4>)
 800cb1c:	4013      	ands	r3, r2
 800cb1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	4a21      	ldr	r2, [pc, #132]	@ (800cba8 <TIM_OC4_SetConfig+0xb8>)
 800cb24:	4013      	ands	r3, r2
 800cb26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	021b      	lsls	r3, r3, #8
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	4313      	orrs	r3, r2
 800cb32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	4a1d      	ldr	r2, [pc, #116]	@ (800cbac <TIM_OC4_SetConfig+0xbc>)
 800cb38:	4013      	ands	r3, r2
 800cb3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	031b      	lsls	r3, r3, #12
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	4313      	orrs	r3, r2
 800cb46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	4a19      	ldr	r2, [pc, #100]	@ (800cbb0 <TIM_OC4_SetConfig+0xc0>)
 800cb4c:	4293      	cmp	r3, r2
 800cb4e:	d00b      	beq.n	800cb68 <TIM_OC4_SetConfig+0x78>
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	4a18      	ldr	r2, [pc, #96]	@ (800cbb4 <TIM_OC4_SetConfig+0xc4>)
 800cb54:	4293      	cmp	r3, r2
 800cb56:	d007      	beq.n	800cb68 <TIM_OC4_SetConfig+0x78>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	4a17      	ldr	r2, [pc, #92]	@ (800cbb8 <TIM_OC4_SetConfig+0xc8>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d003      	beq.n	800cb68 <TIM_OC4_SetConfig+0x78>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	4a16      	ldr	r2, [pc, #88]	@ (800cbbc <TIM_OC4_SetConfig+0xcc>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d109      	bne.n	800cb7c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	4a15      	ldr	r2, [pc, #84]	@ (800cbc0 <TIM_OC4_SetConfig+0xd0>)
 800cb6c:	4013      	ands	r3, r2
 800cb6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	695b      	ldr	r3, [r3, #20]
 800cb74:	019b      	lsls	r3, r3, #6
 800cb76:	697a      	ldr	r2, [r7, #20]
 800cb78:	4313      	orrs	r3, r2
 800cb7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	68fa      	ldr	r2, [r7, #12]
 800cb86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	685a      	ldr	r2, [r3, #4]
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	621a      	str	r2, [r3, #32]
}
 800cb96:	46c0      	nop			@ (mov r8, r8)
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	b006      	add	sp, #24
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	46c0      	nop			@ (mov r8, r8)
 800cba0:	ffffefff 	.word	0xffffefff
 800cba4:	feff8fff 	.word	0xfeff8fff
 800cba8:	fffffcff 	.word	0xfffffcff
 800cbac:	ffffdfff 	.word	0xffffdfff
 800cbb0:	40012c00 	.word	0x40012c00
 800cbb4:	40014000 	.word	0x40014000
 800cbb8:	40014400 	.word	0x40014400
 800cbbc:	40014800 	.word	0x40014800
 800cbc0:	ffffbfff 	.word	0xffffbfff

0800cbc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a1b      	ldr	r3, [r3, #32]
 800cbd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	4a23      	ldr	r2, [pc, #140]	@ (800cc68 <TIM_OC5_SetConfig+0xa4>)
 800cbda:	401a      	ands	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	685b      	ldr	r3, [r3, #4]
 800cbe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cbea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	4a1f      	ldr	r2, [pc, #124]	@ (800cc6c <TIM_OC5_SetConfig+0xa8>)
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	4a1b      	ldr	r2, [pc, #108]	@ (800cc70 <TIM_OC5_SetConfig+0xac>)
 800cc02:	4013      	ands	r3, r2
 800cc04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc06:	683b      	ldr	r3, [r7, #0]
 800cc08:	689b      	ldr	r3, [r3, #8]
 800cc0a:	041b      	lsls	r3, r3, #16
 800cc0c:	693a      	ldr	r2, [r7, #16]
 800cc0e:	4313      	orrs	r3, r2
 800cc10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	4a17      	ldr	r2, [pc, #92]	@ (800cc74 <TIM_OC5_SetConfig+0xb0>)
 800cc16:	4293      	cmp	r3, r2
 800cc18:	d00b      	beq.n	800cc32 <TIM_OC5_SetConfig+0x6e>
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4a16      	ldr	r2, [pc, #88]	@ (800cc78 <TIM_OC5_SetConfig+0xb4>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d007      	beq.n	800cc32 <TIM_OC5_SetConfig+0x6e>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4a15      	ldr	r2, [pc, #84]	@ (800cc7c <TIM_OC5_SetConfig+0xb8>)
 800cc26:	4293      	cmp	r3, r2
 800cc28:	d003      	beq.n	800cc32 <TIM_OC5_SetConfig+0x6e>
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	4a14      	ldr	r2, [pc, #80]	@ (800cc80 <TIM_OC5_SetConfig+0xbc>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d109      	bne.n	800cc46 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	4a0c      	ldr	r2, [pc, #48]	@ (800cc68 <TIM_OC5_SetConfig+0xa4>)
 800cc36:	4013      	ands	r3, r2
 800cc38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	695b      	ldr	r3, [r3, #20]
 800cc3e:	021b      	lsls	r3, r3, #8
 800cc40:	697a      	ldr	r2, [r7, #20]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	68fa      	ldr	r2, [r7, #12]
 800cc50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	685a      	ldr	r2, [r3, #4]
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	693a      	ldr	r2, [r7, #16]
 800cc5e:	621a      	str	r2, [r3, #32]
}
 800cc60:	46c0      	nop			@ (mov r8, r8)
 800cc62:	46bd      	mov	sp, r7
 800cc64:	b006      	add	sp, #24
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	fffeffff 	.word	0xfffeffff
 800cc6c:	fffeff8f 	.word	0xfffeff8f
 800cc70:	fffdffff 	.word	0xfffdffff
 800cc74:	40012c00 	.word	0x40012c00
 800cc78:	40014000 	.word	0x40014000
 800cc7c:	40014400 	.word	0x40014400
 800cc80:	40014800 	.word	0x40014800

0800cc84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b086      	sub	sp, #24
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a1b      	ldr	r3, [r3, #32]
 800cc92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	4a24      	ldr	r2, [pc, #144]	@ (800cd2c <TIM_OC6_SetConfig+0xa8>)
 800cc9a:	401a      	ands	r2, r3
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	4a20      	ldr	r2, [pc, #128]	@ (800cd30 <TIM_OC6_SetConfig+0xac>)
 800ccb0:	4013      	ands	r3, r2
 800ccb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccb4:	683b      	ldr	r3, [r7, #0]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	021b      	lsls	r3, r3, #8
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	4a1c      	ldr	r2, [pc, #112]	@ (800cd34 <TIM_OC6_SetConfig+0xb0>)
 800ccc4:	4013      	ands	r3, r2
 800ccc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ccc8:	683b      	ldr	r3, [r7, #0]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	051b      	lsls	r3, r3, #20
 800ccce:	693a      	ldr	r2, [r7, #16]
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	4a18      	ldr	r2, [pc, #96]	@ (800cd38 <TIM_OC6_SetConfig+0xb4>)
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d00b      	beq.n	800ccf4 <TIM_OC6_SetConfig+0x70>
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	4a17      	ldr	r2, [pc, #92]	@ (800cd3c <TIM_OC6_SetConfig+0xb8>)
 800cce0:	4293      	cmp	r3, r2
 800cce2:	d007      	beq.n	800ccf4 <TIM_OC6_SetConfig+0x70>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	4a16      	ldr	r2, [pc, #88]	@ (800cd40 <TIM_OC6_SetConfig+0xbc>)
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d003      	beq.n	800ccf4 <TIM_OC6_SetConfig+0x70>
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	4a15      	ldr	r2, [pc, #84]	@ (800cd44 <TIM_OC6_SetConfig+0xc0>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d109      	bne.n	800cd08 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	4a14      	ldr	r2, [pc, #80]	@ (800cd48 <TIM_OC6_SetConfig+0xc4>)
 800ccf8:	4013      	ands	r3, r2
 800ccfa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	695b      	ldr	r3, [r3, #20]
 800cd00:	029b      	lsls	r3, r3, #10
 800cd02:	697a      	ldr	r2, [r7, #20]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	697a      	ldr	r2, [r7, #20]
 800cd0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	68fa      	ldr	r2, [r7, #12]
 800cd12:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	685a      	ldr	r2, [r3, #4]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	693a      	ldr	r2, [r7, #16]
 800cd20:	621a      	str	r2, [r3, #32]
}
 800cd22:	46c0      	nop			@ (mov r8, r8)
 800cd24:	46bd      	mov	sp, r7
 800cd26:	b006      	add	sp, #24
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	46c0      	nop			@ (mov r8, r8)
 800cd2c:	ffefffff 	.word	0xffefffff
 800cd30:	feff8fff 	.word	0xfeff8fff
 800cd34:	ffdfffff 	.word	0xffdfffff
 800cd38:	40012c00 	.word	0x40012c00
 800cd3c:	40014000 	.word	0x40014000
 800cd40:	40014400 	.word	0x40014400
 800cd44:	40014800 	.word	0x40014800
 800cd48:	fffbffff 	.word	0xfffbffff

0800cd4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	223c      	movs	r2, #60	@ 0x3c
 800cd5a:	5c9b      	ldrb	r3, [r3, r2]
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d101      	bne.n	800cd64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd60:	2302      	movs	r3, #2
 800cd62:	e05a      	b.n	800ce1a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	223c      	movs	r2, #60	@ 0x3c
 800cd68:	2101      	movs	r1, #1
 800cd6a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	223d      	movs	r2, #61	@ 0x3d
 800cd70:	2102      	movs	r1, #2
 800cd72:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	685b      	ldr	r3, [r3, #4]
 800cd7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	689b      	ldr	r3, [r3, #8]
 800cd82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	4a26      	ldr	r2, [pc, #152]	@ (800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cd8a:	4293      	cmp	r3, r2
 800cd8c:	d108      	bne.n	800cda0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	4a25      	ldr	r2, [pc, #148]	@ (800ce28 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800cd92:	4013      	ands	r3, r2
 800cd94:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	685b      	ldr	r3, [r3, #4]
 800cd9a:	68fa      	ldr	r2, [r7, #12]
 800cd9c:	4313      	orrs	r3, r2
 800cd9e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2270      	movs	r2, #112	@ 0x70
 800cda4:	4393      	bics	r3, r2
 800cda6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	68fa      	ldr	r2, [r7, #12]
 800cdae:	4313      	orrs	r3, r2
 800cdb0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	4a19      	ldr	r2, [pc, #100]	@ (800ce24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d014      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681a      	ldr	r2, [r3, #0]
 800cdc8:	2380      	movs	r3, #128	@ 0x80
 800cdca:	05db      	lsls	r3, r3, #23
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d00e      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	4a15      	ldr	r2, [pc, #84]	@ (800ce2c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800cdd6:	4293      	cmp	r3, r2
 800cdd8:	d009      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4a14      	ldr	r2, [pc, #80]	@ (800ce30 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800cde0:	4293      	cmp	r3, r2
 800cde2:	d004      	beq.n	800cdee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a12      	ldr	r2, [pc, #72]	@ (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d10c      	bne.n	800ce08 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	2280      	movs	r2, #128	@ 0x80
 800cdf2:	4393      	bics	r3, r2
 800cdf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cdf6:	683b      	ldr	r3, [r7, #0]
 800cdf8:	689b      	ldr	r3, [r3, #8]
 800cdfa:	68ba      	ldr	r2, [r7, #8]
 800cdfc:	4313      	orrs	r3, r2
 800cdfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	223d      	movs	r2, #61	@ 0x3d
 800ce0c:	2101      	movs	r1, #1
 800ce0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	223c      	movs	r2, #60	@ 0x3c
 800ce14:	2100      	movs	r1, #0
 800ce16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	0018      	movs	r0, r3
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	b004      	add	sp, #16
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	46c0      	nop			@ (mov r8, r8)
 800ce24:	40012c00 	.word	0x40012c00
 800ce28:	ff0fffff 	.word	0xff0fffff
 800ce2c:	40000400 	.word	0x40000400
 800ce30:	40000800 	.word	0x40000800
 800ce34:	40014000 	.word	0x40014000

0800ce38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ce40:	46c0      	nop			@ (mov r8, r8)
 800ce42:	46bd      	mov	sp, r7
 800ce44:	b002      	add	sp, #8
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ce50:	46c0      	nop			@ (mov r8, r8)
 800ce52:	46bd      	mov	sp, r7
 800ce54:	b002      	add	sp, #8
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ce60:	46c0      	nop			@ (mov r8, r8)
 800ce62:	46bd      	mov	sp, r7
 800ce64:	b002      	add	sp, #8
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <LL_DMA_ConfigTransfer>:
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b086      	sub	sp, #24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CCR,
 800ce78:	4a0c      	ldr	r2, [pc, #48]	@ (800ceac <LL_DMA_ConfigTransfer+0x44>)
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	18d3      	adds	r3, r2, r3
 800ce7e:	781b      	ldrb	r3, [r3, #0]
 800ce80:	001a      	movs	r2, r3
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	18d3      	adds	r3, r2, r3
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	4a09      	ldr	r2, [pc, #36]	@ (800ceb0 <LL_DMA_ConfigTransfer+0x48>)
 800ce8a:	4013      	ands	r3, r2
 800ce8c:	0019      	movs	r1, r3
 800ce8e:	4a07      	ldr	r2, [pc, #28]	@ (800ceac <LL_DMA_ConfigTransfer+0x44>)
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	18d3      	adds	r3, r2, r3
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	001a      	movs	r2, r3
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	18d3      	adds	r3, r2, r3
 800ce9c:	687a      	ldr	r2, [r7, #4]
 800ce9e:	430a      	orrs	r2, r1
 800cea0:	601a      	str	r2, [r3, #0]
}
 800cea2:	46c0      	nop			@ (mov r8, r8)
 800cea4:	46bd      	mov	sp, r7
 800cea6:	b006      	add	sp, #24
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	46c0      	nop			@ (mov r8, r8)
 800ceac:	0801e500 	.word	0x0801e500
 800ceb0:	ffff800f 	.word	0xffff800f

0800ceb4 <LL_DMA_SetDataLength>:
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CNDTR,
 800cec4:	4a0b      	ldr	r2, [pc, #44]	@ (800cef4 <LL_DMA_SetDataLength+0x40>)
 800cec6:	68bb      	ldr	r3, [r7, #8]
 800cec8:	18d3      	adds	r3, r2, r3
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	001a      	movs	r2, r3
 800cece:	697b      	ldr	r3, [r7, #20]
 800ced0:	18d3      	adds	r3, r2, r3
 800ced2:	685b      	ldr	r3, [r3, #4]
 800ced4:	0c1b      	lsrs	r3, r3, #16
 800ced6:	0419      	lsls	r1, r3, #16
 800ced8:	4a06      	ldr	r2, [pc, #24]	@ (800cef4 <LL_DMA_SetDataLength+0x40>)
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	18d3      	adds	r3, r2, r3
 800cede:	781b      	ldrb	r3, [r3, #0]
 800cee0:	001a      	movs	r2, r3
 800cee2:	697b      	ldr	r3, [r7, #20]
 800cee4:	18d3      	adds	r3, r2, r3
 800cee6:	687a      	ldr	r2, [r7, #4]
 800cee8:	430a      	orrs	r2, r1
 800ceea:	605a      	str	r2, [r3, #4]
}
 800ceec:	46c0      	nop			@ (mov r8, r8)
 800ceee:	46bd      	mov	sp, r7
 800cef0:	b006      	add	sp, #24
 800cef2:	bd80      	pop	{r7, pc}
 800cef4:	0801e500 	.word	0x0801e500

0800cef8 <LL_DMA_SetMemoryAddress>:
{
 800cef8:	b580      	push	{r7, lr}
 800cefa:	b086      	sub	sp, #24
 800cefc:	af00      	add	r7, sp, #0
 800cefe:	60f8      	str	r0, [r7, #12]
 800cf00:	60b9      	str	r1, [r7, #8]
 800cf02:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CMAR, MemoryAddress);
 800cf08:	4a06      	ldr	r2, [pc, #24]	@ (800cf24 <LL_DMA_SetMemoryAddress+0x2c>)
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	18d3      	adds	r3, r2, r3
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	001a      	movs	r2, r3
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	18d3      	adds	r3, r2, r3
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	60da      	str	r2, [r3, #12]
}
 800cf1a:	46c0      	nop			@ (mov r8, r8)
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	b006      	add	sp, #24
 800cf20:	bd80      	pop	{r7, pc}
 800cf22:	46c0      	nop			@ (mov r8, r8)
 800cf24:	0801e500 	.word	0x0801e500

0800cf28 <LL_DMA_SetPeriphAddress>:
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b086      	sub	sp, #24
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel]))->CPAR, PeriphAddress);
 800cf38:	4a06      	ldr	r2, [pc, #24]	@ (800cf54 <LL_DMA_SetPeriphAddress+0x2c>)
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	18d3      	adds	r3, r2, r3
 800cf3e:	781b      	ldrb	r3, [r3, #0]
 800cf40:	001a      	movs	r2, r3
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	18d3      	adds	r3, r2, r3
 800cf46:	687a      	ldr	r2, [r7, #4]
 800cf48:	609a      	str	r2, [r3, #8]
}
 800cf4a:	46c0      	nop			@ (mov r8, r8)
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	b006      	add	sp, #24
 800cf50:	bd80      	pop	{r7, pc}
 800cf52:	46c0      	nop			@ (mov r8, r8)
 800cf54:	0801e500 	.word	0x0801e500

0800cf58 <LL_DMA_SetPeriphRequest>:
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b086      	sub	sp, #24
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 7U);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	0a9b      	lsrs	r3, r3, #10
 800cf68:	4a0f      	ldr	r2, [pc, #60]	@ (800cfa8 <LL_DMA_SetPeriphRequest+0x50>)
 800cf6a:	405a      	eors	r2, r3
 800cf6c:	0013      	movs	r3, r2
 800cf6e:	00db      	lsls	r3, r3, #3
 800cf70:	1a9b      	subs	r3, r3, r2
 800cf72:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 800cf74:	68ba      	ldr	r2, [r7, #8]
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	18d3      	adds	r3, r2, r3
 800cf7a:	009b      	lsls	r3, r3, #2
 800cf7c:	4a0b      	ldr	r2, [pc, #44]	@ (800cfac <LL_DMA_SetPeriphRequest+0x54>)
 800cf7e:	4694      	mov	ip, r2
 800cf80:	4463      	add	r3, ip
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	227f      	movs	r2, #127	@ 0x7f
 800cf86:	4393      	bics	r3, r2
 800cf88:	0019      	movs	r1, r3
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	697b      	ldr	r3, [r7, #20]
 800cf8e:	18d3      	adds	r3, r2, r3
 800cf90:	009b      	lsls	r3, r3, #2
 800cf92:	4a06      	ldr	r2, [pc, #24]	@ (800cfac <LL_DMA_SetPeriphRequest+0x54>)
 800cf94:	4694      	mov	ip, r2
 800cf96:	4463      	add	r3, ip
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	430a      	orrs	r2, r1
 800cf9c:	601a      	str	r2, [r3, #0]
}
 800cf9e:	46c0      	nop			@ (mov r8, r8)
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	b006      	add	sp, #24
 800cfa4:	bd80      	pop	{r7, pc}
 800cfa6:	46c0      	nop			@ (mov r8, r8)
 800cfa8:	00100080 	.word	0x00100080
 800cfac:	40020800 	.word	0x40020800

0800cfb0 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
ErrorStatus LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800cfc4:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800cfca:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800cfd0:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800cfd6:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800cfdc:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800cfe2:	431a      	orrs	r2, r3
 800cfe4:	68b9      	ldr	r1, [r7, #8]
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	0018      	movs	r0, r3
 800cfea:	f7ff ff3d 	bl	800ce68 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	685a      	ldr	r2, [r3, #4]
 800cff2:	68b9      	ldr	r1, [r7, #8]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	0018      	movs	r0, r3
 800cff8:	f7ff ff7e 	bl	800cef8 <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	68b9      	ldr	r1, [r7, #8]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	0018      	movs	r0, r3
 800d006:	f7ff ff8f 	bl	800cf28 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6a1a      	ldr	r2, [r3, #32]
 800d00e:	68b9      	ldr	r1, [r7, #8]
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	0018      	movs	r0, r3
 800d014:	f7ff ff4e 	bl	800ceb4 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d01c:	68b9      	ldr	r1, [r7, #8]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	0018      	movs	r0, r3
 800d022:	f7ff ff99 	bl	800cf58 <LL_DMA_SetPeriphRequest>

  return SUCCESS;
 800d026:	2300      	movs	r3, #0
}
 800d028:	0018      	movs	r0, r3
 800d02a:	46bd      	mov	sp, r7
 800d02c:	b004      	add	sp, #16
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = 0x00000000U;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2200      	movs	r2, #0
 800d03c:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = 0x00000000U;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2200      	movs	r2, #0
 800d042:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2200      	movs	r2, #0
 800d04e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	2200      	movs	r2, #0
 800d054:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2200      	movs	r2, #0
 800d05a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2200      	movs	r2, #0
 800d060:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2200      	movs	r2, #0
 800d066:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = 0x00000000U;
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2200      	movs	r2, #0
 800d06c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2200      	movs	r2, #0
 800d072:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d07a:	46c0      	nop			@ (mov r8, r8)
 800d07c:	46bd      	mov	sp, r7
 800d07e:	b002      	add	sp, #8
 800d080:	bd80      	pop	{r7, pc}

0800d082 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	60b9      	str	r1, [r7, #8]
 800d08c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	6819      	ldr	r1, [r3, #0]
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	435b      	muls	r3, r3
 800d096:	001a      	movs	r2, r3
 800d098:	0013      	movs	r3, r2
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	189b      	adds	r3, r3, r2
 800d09e:	43db      	mvns	r3, r3
 800d0a0:	400b      	ands	r3, r1
 800d0a2:	001a      	movs	r2, r3
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	435b      	muls	r3, r3
 800d0a8:	6879      	ldr	r1, [r7, #4]
 800d0aa:	434b      	muls	r3, r1
 800d0ac:	431a      	orrs	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	601a      	str	r2, [r3, #0]
}
 800d0b2:	46c0      	nop			@ (mov r8, r8)
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	b004      	add	sp, #16
 800d0b8:	bd80      	pop	{r7, pc}

0800d0ba <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800d0ba:	b580      	push	{r7, lr}
 800d0bc:	b084      	sub	sp, #16
 800d0be:	af00      	add	r7, sp, #0
 800d0c0:	60f8      	str	r0, [r7, #12]
 800d0c2:	60b9      	str	r1, [r7, #8]
 800d0c4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	685b      	ldr	r3, [r3, #4]
 800d0ca:	68ba      	ldr	r2, [r7, #8]
 800d0cc:	43d2      	mvns	r2, r2
 800d0ce:	401a      	ands	r2, r3
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	6879      	ldr	r1, [r7, #4]
 800d0d4:	434b      	muls	r3, r1
 800d0d6:	431a      	orrs	r2, r3
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	605a      	str	r2, [r3, #4]
}
 800d0dc:	46c0      	nop			@ (mov r8, r8)
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	b004      	add	sp, #16
 800d0e2:	bd80      	pop	{r7, pc}

0800d0e4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6899      	ldr	r1, [r3, #8]
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	435b      	muls	r3, r3
 800d0f8:	001a      	movs	r2, r3
 800d0fa:	0013      	movs	r3, r2
 800d0fc:	005b      	lsls	r3, r3, #1
 800d0fe:	189b      	adds	r3, r3, r2
 800d100:	43db      	mvns	r3, r3
 800d102:	400b      	ands	r3, r1
 800d104:	001a      	movs	r2, r3
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	435b      	muls	r3, r3
 800d10a:	6879      	ldr	r1, [r7, #4]
 800d10c:	434b      	muls	r3, r1
 800d10e:	431a      	orrs	r2, r3
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	609a      	str	r2, [r3, #8]
}
 800d114:	46c0      	nop			@ (mov r8, r8)
 800d116:	46bd      	mov	sp, r7
 800d118:	b004      	add	sp, #16
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	60f8      	str	r0, [r7, #12]
 800d124:	60b9      	str	r1, [r7, #8]
 800d126:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	68d9      	ldr	r1, [r3, #12]
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	435b      	muls	r3, r3
 800d130:	001a      	movs	r2, r3
 800d132:	0013      	movs	r3, r2
 800d134:	005b      	lsls	r3, r3, #1
 800d136:	189b      	adds	r3, r3, r2
 800d138:	43db      	mvns	r3, r3
 800d13a:	400b      	ands	r3, r1
 800d13c:	001a      	movs	r2, r3
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	435b      	muls	r3, r3
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	434b      	muls	r3, r1
 800d146:	431a      	orrs	r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	60da      	str	r2, [r3, #12]
}
 800d14c:	46c0      	nop			@ (mov r8, r8)
 800d14e:	46bd      	mov	sp, r7
 800d150:	b004      	add	sp, #16
 800d152:	bd80      	pop	{r7, pc}

0800d154 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b084      	sub	sp, #16
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	6a19      	ldr	r1, [r3, #32]
 800d164:	68bb      	ldr	r3, [r7, #8]
 800d166:	435b      	muls	r3, r3
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	4353      	muls	r3, r2
 800d16c:	68ba      	ldr	r2, [r7, #8]
 800d16e:	435a      	muls	r2, r3
 800d170:	0013      	movs	r3, r2
 800d172:	011b      	lsls	r3, r3, #4
 800d174:	1a9b      	subs	r3, r3, r2
 800d176:	43db      	mvns	r3, r3
 800d178:	400b      	ands	r3, r1
 800d17a:	001a      	movs	r2, r3
 800d17c:	68bb      	ldr	r3, [r7, #8]
 800d17e:	435b      	muls	r3, r3
 800d180:	68b9      	ldr	r1, [r7, #8]
 800d182:	434b      	muls	r3, r1
 800d184:	68b9      	ldr	r1, [r7, #8]
 800d186:	434b      	muls	r3, r1
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	434b      	muls	r3, r1
 800d18c:	431a      	orrs	r2, r3
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 800d192:	46c0      	nop			@ (mov r8, r8)
 800d194:	46bd      	mov	sp, r7
 800d196:	b004      	add	sp, #16
 800d198:	bd80      	pop	{r7, pc}

0800d19a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800d19a:	b580      	push	{r7, lr}
 800d19c:	b084      	sub	sp, #16
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	60f8      	str	r0, [r7, #12]
 800d1a2:	60b9      	str	r1, [r7, #8]
 800d1a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	0a1b      	lsrs	r3, r3, #8
 800d1ae:	68ba      	ldr	r2, [r7, #8]
 800d1b0:	0a12      	lsrs	r2, r2, #8
 800d1b2:	4353      	muls	r3, r2
 800d1b4:	68ba      	ldr	r2, [r7, #8]
 800d1b6:	0a12      	lsrs	r2, r2, #8
 800d1b8:	4353      	muls	r3, r2
 800d1ba:	68ba      	ldr	r2, [r7, #8]
 800d1bc:	0a12      	lsrs	r2, r2, #8
 800d1be:	435a      	muls	r2, r3
 800d1c0:	0013      	movs	r3, r2
 800d1c2:	011b      	lsls	r3, r3, #4
 800d1c4:	1a9b      	subs	r3, r3, r2
 800d1c6:	43db      	mvns	r3, r3
 800d1c8:	400b      	ands	r3, r1
 800d1ca:	001a      	movs	r2, r3
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	0a1b      	lsrs	r3, r3, #8
 800d1d0:	68b9      	ldr	r1, [r7, #8]
 800d1d2:	0a09      	lsrs	r1, r1, #8
 800d1d4:	434b      	muls	r3, r1
 800d1d6:	68b9      	ldr	r1, [r7, #8]
 800d1d8:	0a09      	lsrs	r1, r1, #8
 800d1da:	434b      	muls	r3, r1
 800d1dc:	68b9      	ldr	r1, [r7, #8]
 800d1de:	0a09      	lsrs	r1, r1, #8
 800d1e0:	434b      	muls	r3, r1
 800d1e2:	6879      	ldr	r1, [r7, #4]
 800d1e4:	434b      	muls	r3, r1
 800d1e6:	431a      	orrs	r2, r3
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 800d1ec:	46c0      	nop			@ (mov r8, r8)
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	b004      	add	sp, #16
 800d1f2:	bd80      	pop	{r7, pc}

0800d1f4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d1f4:	b580      	push	{r7, lr}
 800d1f6:	b084      	sub	sp, #16
 800d1f8:	af00      	add	r7, sp, #0
 800d1fa:	6078      	str	r0, [r7, #4]
 800d1fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d202:	e047      	b.n	800d294 <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	2101      	movs	r1, #1
 800d20a:	68fa      	ldr	r2, [r7, #12]
 800d20c:	4091      	lsls	r1, r2
 800d20e:	000a      	movs	r2, r1
 800d210:	4013      	ands	r3, r2
 800d212:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800d214:	68bb      	ldr	r3, [r7, #8]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d039      	beq.n	800d28e <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	685b      	ldr	r3, [r3, #4]
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d003      	beq.n	800d22a <LL_GPIO_Init+0x36>
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	2b02      	cmp	r3, #2
 800d228:	d10d      	bne.n	800d246 <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	689a      	ldr	r2, [r3, #8]
 800d22e:	68b9      	ldr	r1, [r7, #8]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	0018      	movs	r0, r3
 800d234:	f7ff ff56 	bl	800d0e4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	68da      	ldr	r2, [r3, #12]
 800d23c:	68b9      	ldr	r1, [r7, #8]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	0018      	movs	r0, r3
 800d242:	f7ff ff3a 	bl	800d0ba <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	691a      	ldr	r2, [r3, #16]
 800d24a:	68b9      	ldr	r1, [r7, #8]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	0018      	movs	r0, r3
 800d250:	f7ff ff64 	bl	800d11c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d254:	683b      	ldr	r3, [r7, #0]
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	2b02      	cmp	r3, #2
 800d25a:	d111      	bne.n	800d280 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	2bff      	cmp	r3, #255	@ 0xff
 800d260:	d807      	bhi.n	800d272 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	695a      	ldr	r2, [r3, #20]
 800d266:	68b9      	ldr	r1, [r7, #8]
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	0018      	movs	r0, r3
 800d26c:	f7ff ff72 	bl	800d154 <LL_GPIO_SetAFPin_0_7>
 800d270:	e006      	b.n	800d280 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	695a      	ldr	r2, [r3, #20]
 800d276:	68b9      	ldr	r1, [r7, #8]
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	0018      	movs	r0, r3
 800d27c:	f7ff ff8d 	bl	800d19a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	68b9      	ldr	r1, [r7, #8]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	0018      	movs	r0, r3
 800d28a:	f7ff fefa 	bl	800d082 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3301      	adds	r3, #1
 800d292:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	681a      	ldr	r2, [r3, #0]
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	40da      	lsrs	r2, r3
 800d29c:	1e13      	subs	r3, r2, #0
 800d29e:	d1b1      	bne.n	800d204 <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 800d2a0:	2300      	movs	r3, #0
}
 800d2a2:	0018      	movs	r0, r3
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	b004      	add	sp, #16
 800d2a8:	bd80      	pop	{r7, pc}

0800d2aa <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800d2aa:	b580      	push	{r7, lr}
 800d2ac:	b082      	sub	sp, #8
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	005b      	lsls	r3, r3, #1
 800d2b8:	085a      	lsrs	r2, r3, #1
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	601a      	str	r2, [r3, #0]
}
 800d2be:	46c0      	nop			@ (mov r8, r8)
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	b002      	add	sp, #8
 800d2c4:	bd80      	pop	{r7, pc}
	...

0800d2c8 <LL_APB1_GRP1_EnableClock>:
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b084      	sub	sp, #16
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 800d2d0:	4b07      	ldr	r3, [pc, #28]	@ (800d2f0 <LL_APB1_GRP1_EnableClock+0x28>)
 800d2d2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d2d4:	4b06      	ldr	r3, [pc, #24]	@ (800d2f0 <LL_APB1_GRP1_EnableClock+0x28>)
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	430a      	orrs	r2, r1
 800d2da:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 800d2dc:	4b04      	ldr	r3, [pc, #16]	@ (800d2f0 <LL_APB1_GRP1_EnableClock+0x28>)
 800d2de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d2e0:	687a      	ldr	r2, [r7, #4]
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
}
 800d2e8:	46c0      	nop			@ (mov r8, r8)
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	b004      	add	sp, #16
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	40021000 	.word	0x40021000

0800d2f4 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4a16      	ldr	r2, [pc, #88]	@ (800d35c <LL_UCPD_Init+0x68>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d104      	bne.n	800d310 <LL_UCPD_Init+0x1c>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 800d306:	2380      	movs	r3, #128	@ 0x80
 800d308:	049b      	lsls	r3, r3, #18
 800d30a:	0018      	movs	r0, r3
 800d30c:	f7ff ffdc 	bl	800d2c8 <LL_APB1_GRP1_EnableClock>
  }

  if (UCPD2 == UCPDx)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	4a13      	ldr	r2, [pc, #76]	@ (800d360 <LL_UCPD_Init+0x6c>)
 800d314:	4293      	cmp	r3, r2
 800d316:	d104      	bne.n	800d322 <LL_UCPD_Init+0x2e>
  {
    LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 800d318:	2380      	movs	r3, #128	@ 0x80
 800d31a:	04db      	lsls	r3, r3, #19
 800d31c:	0018      	movs	r0, r3
 800d31e:	f7ff ffd3 	bl	800d2c8 <LL_APB1_GRP1_EnableClock>
  }

  LL_UCPD_Disable(UCPDx);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	0018      	movs	r0, r3
 800d326:	f7ff ffc0 	bl	800d2aa <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	4a0d      	ldr	r2, [pc, #52]	@ (800d364 <LL_UCPD_Init+0x70>)
 800d330:	401a      	ands	r2, r3
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	6819      	ldr	r1, [r3, #0]
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	02db      	lsls	r3, r3, #11
 800d33c:	4319      	orrs	r1, r3
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	689b      	ldr	r3, [r3, #8]
 800d342:	019b      	lsls	r3, r3, #6
 800d344:	4319      	orrs	r1, r3
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	430b      	orrs	r3, r1
 800d34c:	431a      	orrs	r2, r3
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800d352:	2300      	movs	r3, #0
}
 800d354:	0018      	movs	r0, r3
 800d356:	46bd      	mov	sp, r7
 800d358:	b002      	add	sp, #8
 800d35a:	bd80      	pop	{r7, pc}
 800d35c:	4000a000 	.word	0x4000a000
 800d360:	4000a400 	.word	0x4000a400
 800d364:	fff10000 	.word	0xfff10000

0800d368 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2280      	movs	r2, #128	@ 0x80
 800d374:	0292      	lsls	r2, r2, #10
 800d376:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2207      	movs	r2, #7
 800d37c:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2210      	movs	r2, #16
 800d382:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	220d      	movs	r2, #13
 800d388:	60da      	str	r2, [r3, #12]
}
 800d38a:	46c0      	nop			@ (mov r8, r8)
 800d38c:	46bd      	mov	sp, r7
 800d38e:	b002      	add	sp, #8
 800d390:	bd80      	pop	{r7, pc}
	...

0800d394 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b084      	sub	sp, #16
 800d398:	af00      	add	r7, sp, #0
 800d39a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d3a2:	4b05      	ldr	r3, [pc, #20]	@ (800d3b8 <USB_EnableGlobalInt+0x24>)
 800d3a4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = winterruptmask;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	68fa      	ldr	r2, [r7, #12]
 800d3aa:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	0018      	movs	r0, r3
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	b004      	add	sp, #16
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	46c0      	nop			@ (mov r8, r8)
 800d3b8:	0000bf80 	.word	0x0000bf80

0800d3bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_DRD_TypeDef *USBx)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d3c4:	4b06      	ldr	r3, [pc, #24]	@ (800d3e0 <USB_DisableGlobalInt+0x24>)
 800d3c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	43d2      	mvns	r2, r2
 800d3d0:	401a      	ands	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	641a      	str	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	0018      	movs	r0, r3
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	b004      	add	sp, #16
 800d3de:	bd80      	pop	{r7, pc}
 800d3e0:	0000bf80 	.word	0x0000bf80

0800d3e4 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_DRD_TypeDef *USBx, USB_DRD_ModeTypeDef mode)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b082      	sub	sp, #8
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	6078      	str	r0, [r7, #4]
 800d3ec:	000a      	movs	r2, r1
 800d3ee:	1cfb      	adds	r3, r7, #3
 800d3f0:	701a      	strb	r2, [r3, #0]
  if (mode == USB_DEVICE_MODE)
 800d3f2:	1cfb      	adds	r3, r7, #3
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d106      	bne.n	800d408 <USB_SetCurrentMode+0x24>
  {
    USBx->CNTR &= ~USB_CNTR_HOST;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d3fe:	005b      	lsls	r3, r3, #1
 800d400:	085a      	lsrs	r2, r3, #1
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	641a      	str	r2, [r3, #64]	@ 0x40
 800d406:	e00d      	b.n	800d424 <USB_SetCurrentMode+0x40>
  }
  else if (mode == USB_HOST_MODE)
 800d408:	1cfb      	adds	r3, r7, #3
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d107      	bne.n	800d420 <USB_SetCurrentMode+0x3c>
  {
    USBx->CNTR |= USB_CNTR_HOST;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d414:	2280      	movs	r2, #128	@ 0x80
 800d416:	0612      	lsls	r2, r2, #24
 800d418:	431a      	orrs	r2, r3
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	641a      	str	r2, [r3, #64]	@ 0x40
 800d41e:	e001      	b.n	800d424 <USB_SetCurrentMode+0x40>
  }
  else
  {
    return HAL_ERROR;
 800d420:	2301      	movs	r3, #1
 800d422:	e000      	b.n	800d426 <USB_SetCurrentMode+0x42>
  }

  return HAL_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	0018      	movs	r0, r3
 800d428:	46bd      	mov	sp, r7
 800d42a:	b002      	add	sp, #8
 800d42c:	bd80      	pop	{r7, pc}

0800d42e <USB_DevInit>:
  * @param  cfg  pointer to a USB_DRD_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_DRD_TypeDef *USBx, USB_DRD_CfgTypeDef cfg)
{
 800d42e:	b084      	sub	sp, #16
 800d430:	b5b0      	push	{r4, r5, r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	2004      	movs	r0, #4
 800d43a:	2420      	movs	r4, #32
 800d43c:	1900      	adds	r0, r0, r4
 800d43e:	19c0      	adds	r0, r0, r7
 800d440:	6001      	str	r1, [r0, #0]
 800d442:	6042      	str	r2, [r0, #4]
 800d444:	6083      	str	r3, [r0, #8]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Force Reset */
  USBx->CNTR = USB_CNTR_USBRST;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2201      	movs	r2, #1
 800d44a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Release Reset */
  USBx->CNTR &= ~USB_CNTR_USBRST;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d450:	2201      	movs	r2, #1
 800d452:	4393      	bics	r3, r2
 800d454:	001a      	movs	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the Device Mode */
  ret = USB_SetCurrentMode(USBx, USB_DEVICE_MODE);
 800d45a:	250f      	movs	r5, #15
 800d45c:	197c      	adds	r4, r7, r5
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2100      	movs	r1, #0
 800d462:	0018      	movs	r0, r3
 800d464:	f7ff ffbe 	bl	800d3e4 <USB_SetCurrentMode>
 800d468:	0003      	movs	r3, r0
 800d46a:	7023      	strb	r3, [r4, #0]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	645a      	str	r2, [r3, #68]	@ 0x44

  return ret;
 800d472:	197b      	adds	r3, r7, r5
 800d474:	781b      	ldrb	r3, [r3, #0]
}
 800d476:	0018      	movs	r0, r3
 800d478:	46bd      	mov	sp, r7
 800d47a:	b004      	add	sp, #16
 800d47c:	bcb0      	pop	{r4, r5, r7}
 800d47e:	bc08      	pop	{r3}
 800d480:	b004      	add	sp, #16
 800d482:	4718      	bx	r3

0800d484 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_DRD_TypeDef const *USBx, uint32_t num)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	b082      	sub	sp, #8
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
 800d48c:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d48e:	2300      	movs	r3, #0
}
 800d490:	0018      	movs	r0, r3
 800d492:	46bd      	mov	sp, r7
 800d494:	b002      	add	sp, #8
 800d496:	bd80      	pop	{r7, pc}

0800d498 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_DRD_TypeDef const *USBx)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	0018      	movs	r0, r3
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	b002      	add	sp, #8
 800d4a8:	bd80      	pop	{r7, pc}
	...

0800d4ac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b09e      	sub	sp, #120	@ 0x78
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d4b6:	2377      	movs	r3, #119	@ 0x77
 800d4b8:	18fb      	adds	r3, r7, r3
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	701a      	strb	r2, [r3, #0]
  uint32_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	18d3      	adds	r3, r2, r3
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	4adc      	ldr	r2, [pc, #880]	@ (800d83c <USB_ActivateEndpoint+0x390>)
 800d4cc:	4013      	ands	r3, r2
 800d4ce:	673b      	str	r3, [r7, #112]	@ 0x70

  /* initialize Endpoint */
  switch (ep->type)
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	78db      	ldrb	r3, [r3, #3]
 800d4d4:	2b03      	cmp	r3, #3
 800d4d6:	d00e      	beq.n	800d4f6 <USB_ActivateEndpoint+0x4a>
 800d4d8:	dc19      	bgt.n	800d50e <USB_ActivateEndpoint+0x62>
 800d4da:	2b02      	cmp	r3, #2
 800d4dc:	d01c      	beq.n	800d518 <USB_ActivateEndpoint+0x6c>
 800d4de:	dc16      	bgt.n	800d50e <USB_ActivateEndpoint+0x62>
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d002      	beq.n	800d4ea <USB_ActivateEndpoint+0x3e>
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d00c      	beq.n	800d502 <USB_ActivateEndpoint+0x56>
 800d4e8:	e011      	b.n	800d50e <USB_ActivateEndpoint+0x62>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d4ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4ec:	2280      	movs	r2, #128	@ 0x80
 800d4ee:	0092      	lsls	r2, r2, #2
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d4f4:	e011      	b.n	800d51a <USB_ActivateEndpoint+0x6e>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d4f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d4f8:	22c0      	movs	r2, #192	@ 0xc0
 800d4fa:	00d2      	lsls	r2, r2, #3
 800d4fc:	4313      	orrs	r3, r2
 800d4fe:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d500:	e00b      	b.n	800d51a <USB_ActivateEndpoint+0x6e>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d502:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d504:	2280      	movs	r2, #128	@ 0x80
 800d506:	00d2      	lsls	r2, r2, #3
 800d508:	4313      	orrs	r3, r2
 800d50a:	673b      	str	r3, [r7, #112]	@ 0x70
      break;
 800d50c:	e005      	b.n	800d51a <USB_ActivateEndpoint+0x6e>

    default:
      ret = HAL_ERROR;
 800d50e:	2377      	movs	r3, #119	@ 0x77
 800d510:	18fb      	adds	r3, r7, r3
 800d512:	2201      	movs	r2, #1
 800d514:	701a      	strb	r2, [r3, #0]
      break;
 800d516:	e000      	b.n	800d51a <USB_ActivateEndpoint+0x6e>
      break;
 800d518:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_VTRX | USB_EP_VTTX));
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	18d3      	adds	r3, r2, r3
 800d524:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800d526:	49c6      	ldr	r1, [pc, #792]	@ (800d840 <USB_ActivateEndpoint+0x394>)
 800d528:	430a      	orrs	r2, r1
 800d52a:	601a      	str	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d52c:	687a      	ldr	r2, [r7, #4]
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	009b      	lsls	r3, r3, #2
 800d534:	18d3      	adds	r3, r2, r3
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4ac2      	ldr	r2, [pc, #776]	@ (800d844 <USB_ActivateEndpoint+0x398>)
 800d53a:	4013      	ands	r3, r2
 800d53c:	683a      	ldr	r2, [r7, #0]
 800d53e:	7812      	ldrb	r2, [r2, #0]
 800d540:	4313      	orrs	r3, r2
 800d542:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	009b      	lsls	r3, r3, #2
 800d54c:	18d3      	adds	r3, r2, r3
 800d54e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d550:	49bb      	ldr	r1, [pc, #748]	@ (800d840 <USB_ActivateEndpoint+0x394>)
 800d552:	430a      	orrs	r2, r1
 800d554:	601a      	str	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800d556:	683b      	ldr	r3, [r7, #0]
 800d558:	7b1b      	ldrb	r3, [r3, #12]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d000      	beq.n	800d560 <USB_ActivateEndpoint+0xb4>
 800d55e:	e155      	b.n	800d80c <USB_ActivateEndpoint+0x360>
  {
    if (ep->is_in != 0U)
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	785b      	ldrb	r3, [r3, #1]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d06e      	beq.n	800d646 <USB_ActivateEndpoint+0x19a>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	00db      	lsls	r3, r3, #3
 800d56e:	4ab6      	ldr	r2, [pc, #728]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d570:	4694      	mov	ip, r2
 800d572:	4463      	add	r3, ip
 800d574:	681a      	ldr	r2, [r3, #0]
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	00db      	lsls	r3, r3, #3
 800d57c:	49b2      	ldr	r1, [pc, #712]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d57e:	468c      	mov	ip, r1
 800d580:	4463      	add	r3, ip
 800d582:	0c12      	lsrs	r2, r2, #16
 800d584:	0412      	lsls	r2, r2, #16
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	781b      	ldrb	r3, [r3, #0]
 800d58c:	00db      	lsls	r3, r3, #3
 800d58e:	4aae      	ldr	r2, [pc, #696]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d590:	4694      	mov	ip, r2
 800d592:	4463      	add	r3, ip
 800d594:	6819      	ldr	r1, [r3, #0]
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	88db      	ldrh	r3, [r3, #6]
 800d59a:	089b      	lsrs	r3, r3, #2
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	009a      	lsls	r2, r3, #2
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	781b      	ldrb	r3, [r3, #0]
 800d5a4:	00db      	lsls	r3, r3, #3
 800d5a6:	48a8      	ldr	r0, [pc, #672]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d5a8:	4684      	mov	ip, r0
 800d5aa:	4463      	add	r3, ip
 800d5ac:	430a      	orrs	r2, r1
 800d5ae:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	781b      	ldrb	r3, [r3, #0]
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	18d3      	adds	r3, r2, r3
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	61bb      	str	r3, [r7, #24]
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	2240      	movs	r2, #64	@ 0x40
 800d5c2:	4013      	ands	r3, r2
 800d5c4:	d011      	beq.n	800d5ea <USB_ActivateEndpoint+0x13e>
 800d5c6:	687a      	ldr	r2, [r7, #4]
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	781b      	ldrb	r3, [r3, #0]
 800d5cc:	009b      	lsls	r3, r3, #2
 800d5ce:	18d3      	adds	r3, r2, r3
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	4a9c      	ldr	r2, [pc, #624]	@ (800d844 <USB_ActivateEndpoint+0x398>)
 800d5d4:	4013      	ands	r3, r2
 800d5d6:	617b      	str	r3, [r7, #20]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	18d3      	adds	r3, r2, r3
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	4999      	ldr	r1, [pc, #612]	@ (800d84c <USB_ActivateEndpoint+0x3a0>)
 800d5e6:	430a      	orrs	r2, r1
 800d5e8:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d5ea:	683b      	ldr	r3, [r7, #0]
 800d5ec:	78db      	ldrb	r3, [r3, #3]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	d016      	beq.n	800d620 <USB_ActivateEndpoint+0x174>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	683b      	ldr	r3, [r7, #0]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	18d3      	adds	r3, r2, r3
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a94      	ldr	r2, [pc, #592]	@ (800d850 <USB_ActivateEndpoint+0x3a4>)
 800d600:	4013      	ands	r3, r2
 800d602:	60fb      	str	r3, [r7, #12]
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	2220      	movs	r2, #32
 800d608:	4053      	eors	r3, r2
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	18d3      	adds	r3, r2, r3
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	4989      	ldr	r1, [pc, #548]	@ (800d840 <USB_ActivateEndpoint+0x394>)
 800d61a:	430a      	orrs	r2, r1
 800d61c:	601a      	str	r2, [r3, #0]
 800d61e:	e261      	b.n	800dae4 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	009b      	lsls	r3, r3, #2
 800d628:	18d3      	adds	r3, r2, r3
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	4a88      	ldr	r2, [pc, #544]	@ (800d850 <USB_ActivateEndpoint+0x3a4>)
 800d62e:	4013      	ands	r3, r2
 800d630:	613b      	str	r3, [r7, #16]
 800d632:	687a      	ldr	r2, [r7, #4]
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	18d3      	adds	r3, r2, r3
 800d63c:	693a      	ldr	r2, [r7, #16]
 800d63e:	4980      	ldr	r1, [pc, #512]	@ (800d840 <USB_ActivateEndpoint+0x394>)
 800d640:	430a      	orrs	r2, r1
 800d642:	601a      	str	r2, [r3, #0]
 800d644:	e24e      	b.n	800dae4 <USB_ActivateEndpoint+0x638>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	781b      	ldrb	r3, [r3, #0]
 800d64a:	00db      	lsls	r3, r3, #3
 800d64c:	4a7e      	ldr	r2, [pc, #504]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d64e:	4694      	mov	ip, r2
 800d650:	4463      	add	r3, ip
 800d652:	685a      	ldr	r2, [r3, #4]
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	781b      	ldrb	r3, [r3, #0]
 800d658:	00db      	lsls	r3, r3, #3
 800d65a:	497b      	ldr	r1, [pc, #492]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d65c:	468c      	mov	ip, r1
 800d65e:	4463      	add	r3, ip
 800d660:	0c12      	lsrs	r2, r2, #16
 800d662:	0412      	lsls	r2, r2, #16
 800d664:	605a      	str	r2, [r3, #4]
 800d666:	683b      	ldr	r3, [r7, #0]
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	00db      	lsls	r3, r3, #3
 800d66c:	4a76      	ldr	r2, [pc, #472]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d66e:	4694      	mov	ip, r2
 800d670:	4463      	add	r3, ip
 800d672:	6859      	ldr	r1, [r3, #4]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	88db      	ldrh	r3, [r3, #6]
 800d678:	089b      	lsrs	r3, r3, #2
 800d67a:	b29b      	uxth	r3, r3
 800d67c:	009a      	lsls	r2, r3, #2
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	00db      	lsls	r3, r3, #3
 800d684:	4870      	ldr	r0, [pc, #448]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d686:	4684      	mov	ip, r0
 800d688:	4463      	add	r3, ip
 800d68a:	430a      	orrs	r2, r1
 800d68c:	605a      	str	r2, [r3, #4]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d68e:	683b      	ldr	r3, [r7, #0]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	00db      	lsls	r3, r3, #3
 800d694:	4a6c      	ldr	r2, [pc, #432]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d696:	4694      	mov	ip, r2
 800d698:	4463      	add	r3, ip
 800d69a:	685a      	ldr	r2, [r3, #4]
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	00db      	lsls	r3, r3, #3
 800d6a2:	4969      	ldr	r1, [pc, #420]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d6a4:	468c      	mov	ip, r1
 800d6a6:	4463      	add	r3, ip
 800d6a8:	0192      	lsls	r2, r2, #6
 800d6aa:	0992      	lsrs	r2, r2, #6
 800d6ac:	605a      	str	r2, [r3, #4]
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	691b      	ldr	r3, [r3, #16]
 800d6b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800d6b4:	d920      	bls.n	800d6f8 <USB_ActivateEndpoint+0x24c>
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	691b      	ldr	r3, [r3, #16]
 800d6ba:	095b      	lsrs	r3, r3, #5
 800d6bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	221f      	movs	r2, #31
 800d6c4:	4013      	ands	r3, r2
 800d6c6:	d102      	bne.n	800d6ce <USB_ActivateEndpoint+0x222>
 800d6c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d6ce:	683b      	ldr	r3, [r7, #0]
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	00db      	lsls	r3, r3, #3
 800d6d4:	4a5c      	ldr	r2, [pc, #368]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d6d6:	4694      	mov	ip, r2
 800d6d8:	4463      	add	r3, ip
 800d6da:	685a      	ldr	r2, [r3, #4]
 800d6dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d6de:	069b      	lsls	r3, r3, #26
 800d6e0:	431a      	orrs	r2, r3
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	00db      	lsls	r3, r3, #3
 800d6e8:	4957      	ldr	r1, [pc, #348]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d6ea:	468c      	mov	ip, r1
 800d6ec:	4463      	add	r3, ip
 800d6ee:	2180      	movs	r1, #128	@ 0x80
 800d6f0:	0609      	lsls	r1, r1, #24
 800d6f2:	430a      	orrs	r2, r1
 800d6f4:	605a      	str	r2, [r3, #4]
 800d6f6:	e032      	b.n	800d75e <USB_ActivateEndpoint+0x2b2>
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	691b      	ldr	r3, [r3, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d111      	bne.n	800d724 <USB_ActivateEndpoint+0x278>
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	00db      	lsls	r3, r3, #3
 800d706:	4a50      	ldr	r2, [pc, #320]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d708:	4694      	mov	ip, r2
 800d70a:	4463      	add	r3, ip
 800d70c:	685a      	ldr	r2, [r3, #4]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	494c      	ldr	r1, [pc, #304]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d716:	468c      	mov	ip, r1
 800d718:	4463      	add	r3, ip
 800d71a:	2180      	movs	r1, #128	@ 0x80
 800d71c:	0609      	lsls	r1, r1, #24
 800d71e:	430a      	orrs	r2, r1
 800d720:	605a      	str	r2, [r3, #4]
 800d722:	e01c      	b.n	800d75e <USB_ActivateEndpoint+0x2b2>
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	691b      	ldr	r3, [r3, #16]
 800d728:	085b      	lsrs	r3, r3, #1
 800d72a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d72c:	683b      	ldr	r3, [r7, #0]
 800d72e:	691b      	ldr	r3, [r3, #16]
 800d730:	2201      	movs	r2, #1
 800d732:	4013      	ands	r3, r2
 800d734:	d002      	beq.n	800d73c <USB_ActivateEndpoint+0x290>
 800d736:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d738:	3301      	adds	r3, #1
 800d73a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d73c:	683b      	ldr	r3, [r7, #0]
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	00db      	lsls	r3, r3, #3
 800d742:	4a41      	ldr	r2, [pc, #260]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d744:	4694      	mov	ip, r2
 800d746:	4463      	add	r3, ip
 800d748:	6859      	ldr	r1, [r3, #4]
 800d74a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d74c:	069a      	lsls	r2, r3, #26
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	00db      	lsls	r3, r3, #3
 800d754:	483c      	ldr	r0, [pc, #240]	@ (800d848 <USB_ActivateEndpoint+0x39c>)
 800d756:	4684      	mov	ip, r0
 800d758:	4463      	add	r3, ip
 800d75a:	430a      	orrs	r2, r1
 800d75c:	605a      	str	r2, [r3, #4]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d75e:	687a      	ldr	r2, [r7, #4]
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	781b      	ldrb	r3, [r3, #0]
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	18d3      	adds	r3, r2, r3
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d76c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d76e:	2380      	movs	r3, #128	@ 0x80
 800d770:	01db      	lsls	r3, r3, #7
 800d772:	4013      	ands	r3, r2
 800d774:	d011      	beq.n	800d79a <USB_ActivateEndpoint+0x2ee>
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	781b      	ldrb	r3, [r3, #0]
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	18d3      	adds	r3, r2, r3
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	4a30      	ldr	r2, [pc, #192]	@ (800d844 <USB_ActivateEndpoint+0x398>)
 800d784:	4013      	ands	r3, r2
 800d786:	627b      	str	r3, [r7, #36]	@ 0x24
 800d788:	687a      	ldr	r2, [r7, #4]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	009b      	lsls	r3, r3, #2
 800d790:	18d3      	adds	r3, r2, r3
 800d792:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d794:	492f      	ldr	r1, [pc, #188]	@ (800d854 <USB_ActivateEndpoint+0x3a8>)
 800d796:	430a      	orrs	r2, r1
 800d798:	601a      	str	r2, [r3, #0]

      if (ep->num == 0U)
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d11c      	bne.n	800d7dc <USB_ActivateEndpoint+0x330>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	781b      	ldrb	r3, [r3, #0]
 800d7a8:	009b      	lsls	r3, r3, #2
 800d7aa:	18d3      	adds	r3, r2, r3
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	4a2a      	ldr	r2, [pc, #168]	@ (800d858 <USB_ActivateEndpoint+0x3ac>)
 800d7b0:	4013      	ands	r3, r2
 800d7b2:	61fb      	str	r3, [r7, #28]
 800d7b4:	69fb      	ldr	r3, [r7, #28]
 800d7b6:	2280      	movs	r2, #128	@ 0x80
 800d7b8:	0152      	lsls	r2, r2, #5
 800d7ba:	4053      	eors	r3, r2
 800d7bc:	61fb      	str	r3, [r7, #28]
 800d7be:	69fb      	ldr	r3, [r7, #28]
 800d7c0:	2280      	movs	r2, #128	@ 0x80
 800d7c2:	0192      	lsls	r2, r2, #6
 800d7c4:	4053      	eors	r3, r2
 800d7c6:	61fb      	str	r3, [r7, #28]
 800d7c8:	687a      	ldr	r2, [r7, #4]
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	781b      	ldrb	r3, [r3, #0]
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	18d3      	adds	r3, r2, r3
 800d7d2:	69fa      	ldr	r2, [r7, #28]
 800d7d4:	491a      	ldr	r1, [pc, #104]	@ (800d840 <USB_ActivateEndpoint+0x394>)
 800d7d6:	430a      	orrs	r2, r1
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	e183      	b.n	800dae4 <USB_ActivateEndpoint+0x638>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d7dc:	687a      	ldr	r2, [r7, #4]
 800d7de:	683b      	ldr	r3, [r7, #0]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	009b      	lsls	r3, r3, #2
 800d7e4:	18d3      	adds	r3, r2, r3
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a1b      	ldr	r2, [pc, #108]	@ (800d858 <USB_ActivateEndpoint+0x3ac>)
 800d7ea:	4013      	ands	r3, r2
 800d7ec:	623b      	str	r3, [r7, #32]
 800d7ee:	6a3b      	ldr	r3, [r7, #32]
 800d7f0:	2280      	movs	r2, #128	@ 0x80
 800d7f2:	0192      	lsls	r2, r2, #6
 800d7f4:	4053      	eors	r3, r2
 800d7f6:	623b      	str	r3, [r7, #32]
 800d7f8:	687a      	ldr	r2, [r7, #4]
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	781b      	ldrb	r3, [r3, #0]
 800d7fe:	009b      	lsls	r3, r3, #2
 800d800:	18d3      	adds	r3, r2, r3
 800d802:	6a3a      	ldr	r2, [r7, #32]
 800d804:	490e      	ldr	r1, [pc, #56]	@ (800d840 <USB_ActivateEndpoint+0x394>)
 800d806:	430a      	orrs	r2, r1
 800d808:	601a      	str	r2, [r3, #0]
 800d80a:	e16b      	b.n	800dae4 <USB_ActivateEndpoint+0x638>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	78db      	ldrb	r3, [r3, #3]
 800d810:	2b02      	cmp	r3, #2
 800d812:	d125      	bne.n	800d860 <USB_ActivateEndpoint+0x3b4>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	18d3      	adds	r3, r2, r3
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a08      	ldr	r2, [pc, #32]	@ (800d844 <USB_ActivateEndpoint+0x398>)
 800d822:	4013      	ands	r3, r2
 800d824:	663b      	str	r3, [r7, #96]	@ 0x60
 800d826:	687a      	ldr	r2, [r7, #4]
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	18d3      	adds	r3, r2, r3
 800d830:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d832:	490a      	ldr	r1, [pc, #40]	@ (800d85c <USB_ActivateEndpoint+0x3b0>)
 800d834:	430a      	orrs	r2, r1
 800d836:	601a      	str	r2, [r3, #0]
 800d838:	e024      	b.n	800d884 <USB_ActivateEndpoint+0x3d8>
 800d83a:	46c0      	nop			@ (mov r8, r8)
 800d83c:	07ff898f 	.word	0x07ff898f
 800d840:	00008080 	.word	0x00008080
 800d844:	07ff8f8f 	.word	0x07ff8f8f
 800d848:	40009800 	.word	0x40009800
 800d84c:	000080c0 	.word	0x000080c0
 800d850:	07ff8fbf 	.word	0x07ff8fbf
 800d854:	0000c080 	.word	0x0000c080
 800d858:	07ffbf8f 	.word	0x07ffbf8f
 800d85c:	00008180 	.word	0x00008180
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d860:	687a      	ldr	r2, [r7, #4]
 800d862:	683b      	ldr	r3, [r7, #0]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	18d3      	adds	r3, r2, r3
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4aa1      	ldr	r2, [pc, #644]	@ (800daf4 <USB_ActivateEndpoint+0x648>)
 800d86e:	4013      	ands	r3, r2
 800d870:	667b      	str	r3, [r7, #100]	@ 0x64
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	18d3      	adds	r3, r2, r3
 800d87c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d87e:	499e      	ldr	r1, [pc, #632]	@ (800daf8 <USB_ActivateEndpoint+0x64c>)
 800d880:	430a      	orrs	r2, r1
 800d882:	601a      	str	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	00db      	lsls	r3, r3, #3
 800d88a:	4a9c      	ldr	r2, [pc, #624]	@ (800dafc <USB_ActivateEndpoint+0x650>)
 800d88c:	4694      	mov	ip, r2
 800d88e:	4463      	add	r3, ip
 800d890:	681a      	ldr	r2, [r3, #0]
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	00db      	lsls	r3, r3, #3
 800d898:	4998      	ldr	r1, [pc, #608]	@ (800dafc <USB_ActivateEndpoint+0x650>)
 800d89a:	468c      	mov	ip, r1
 800d89c:	4463      	add	r3, ip
 800d89e:	0c12      	lsrs	r2, r2, #16
 800d8a0:	0412      	lsls	r2, r2, #16
 800d8a2:	601a      	str	r2, [r3, #0]
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	00db      	lsls	r3, r3, #3
 800d8aa:	4a94      	ldr	r2, [pc, #592]	@ (800dafc <USB_ActivateEndpoint+0x650>)
 800d8ac:	4694      	mov	ip, r2
 800d8ae:	4463      	add	r3, ip
 800d8b0:	6819      	ldr	r1, [r3, #0]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	891b      	ldrh	r3, [r3, #8]
 800d8b6:	089b      	lsrs	r3, r3, #2
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	009a      	lsls	r2, r3, #2
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	00db      	lsls	r3, r3, #3
 800d8c2:	488e      	ldr	r0, [pc, #568]	@ (800dafc <USB_ActivateEndpoint+0x650>)
 800d8c4:	4684      	mov	ip, r0
 800d8c6:	4463      	add	r3, ip
 800d8c8:	430a      	orrs	r2, r1
 800d8ca:	601a      	str	r2, [r3, #0]
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	00db      	lsls	r3, r3, #3
 800d8d2:	4a8a      	ldr	r2, [pc, #552]	@ (800dafc <USB_ActivateEndpoint+0x650>)
 800d8d4:	4694      	mov	ip, r2
 800d8d6:	4463      	add	r3, ip
 800d8d8:	685a      	ldr	r2, [r3, #4]
 800d8da:	683b      	ldr	r3, [r7, #0]
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	00db      	lsls	r3, r3, #3
 800d8e0:	4986      	ldr	r1, [pc, #536]	@ (800dafc <USB_ActivateEndpoint+0x650>)
 800d8e2:	468c      	mov	ip, r1
 800d8e4:	4463      	add	r3, ip
 800d8e6:	0c12      	lsrs	r2, r2, #16
 800d8e8:	0412      	lsls	r2, r2, #16
 800d8ea:	605a      	str	r2, [r3, #4]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	00db      	lsls	r3, r3, #3
 800d8f2:	4a82      	ldr	r2, [pc, #520]	@ (800dafc <USB_ActivateEndpoint+0x650>)
 800d8f4:	4694      	mov	ip, r2
 800d8f6:	4463      	add	r3, ip
 800d8f8:	6859      	ldr	r1, [r3, #4]
 800d8fa:	683b      	ldr	r3, [r7, #0]
 800d8fc:	895b      	ldrh	r3, [r3, #10]
 800d8fe:	089b      	lsrs	r3, r3, #2
 800d900:	b29b      	uxth	r3, r3
 800d902:	009a      	lsls	r2, r3, #2
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	487c      	ldr	r0, [pc, #496]	@ (800dafc <USB_ActivateEndpoint+0x650>)
 800d90c:	4684      	mov	ip, r0
 800d90e:	4463      	add	r3, ip
 800d910:	430a      	orrs	r2, r1
 800d912:	605a      	str	r2, [r3, #4]

    if (ep->is_in == 0U)
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	785b      	ldrb	r3, [r3, #1]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d169      	bne.n	800d9f0 <USB_ActivateEndpoint+0x544>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	18d3      	adds	r3, r2, r3
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	643b      	str	r3, [r7, #64]	@ 0x40
 800d92a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d92c:	2380      	movs	r3, #128	@ 0x80
 800d92e:	01db      	lsls	r3, r3, #7
 800d930:	4013      	ands	r3, r2
 800d932:	d011      	beq.n	800d958 <USB_ActivateEndpoint+0x4ac>
 800d934:	687a      	ldr	r2, [r7, #4]
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	009b      	lsls	r3, r3, #2
 800d93c:	18d3      	adds	r3, r2, r3
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a6f      	ldr	r2, [pc, #444]	@ (800db00 <USB_ActivateEndpoint+0x654>)
 800d942:	4013      	ands	r3, r2
 800d944:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d946:	687a      	ldr	r2, [r7, #4]
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	009b      	lsls	r3, r3, #2
 800d94e:	18d3      	adds	r3, r2, r3
 800d950:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800d952:	496c      	ldr	r1, [pc, #432]	@ (800db04 <USB_ActivateEndpoint+0x658>)
 800d954:	430a      	orrs	r2, r1
 800d956:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	18d3      	adds	r3, r2, r3
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d968:	2240      	movs	r2, #64	@ 0x40
 800d96a:	4013      	ands	r3, r2
 800d96c:	d011      	beq.n	800d992 <USB_ActivateEndpoint+0x4e6>
 800d96e:	687a      	ldr	r2, [r7, #4]
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	009b      	lsls	r3, r3, #2
 800d976:	18d3      	adds	r3, r2, r3
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	4a61      	ldr	r2, [pc, #388]	@ (800db00 <USB_ActivateEndpoint+0x654>)
 800d97c:	4013      	ands	r3, r2
 800d97e:	637b      	str	r3, [r7, #52]	@ 0x34
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	18d3      	adds	r3, r2, r3
 800d98a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d98c:	495e      	ldr	r1, [pc, #376]	@ (800db08 <USB_ActivateEndpoint+0x65c>)
 800d98e:	430a      	orrs	r2, r1
 800d990:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	683b      	ldr	r3, [r7, #0]
 800d996:	781b      	ldrb	r3, [r3, #0]
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	18d3      	adds	r3, r2, r3
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4a5b      	ldr	r2, [pc, #364]	@ (800db0c <USB_ActivateEndpoint+0x660>)
 800d9a0:	4013      	ands	r3, r2
 800d9a2:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9a6:	2280      	movs	r2, #128	@ 0x80
 800d9a8:	0152      	lsls	r2, r2, #5
 800d9aa:	4053      	eors	r3, r2
 800d9ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b0:	2280      	movs	r2, #128	@ 0x80
 800d9b2:	0192      	lsls	r2, r2, #6
 800d9b4:	4053      	eors	r3, r2
 800d9b6:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9b8:	687a      	ldr	r2, [r7, #4]
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	009b      	lsls	r3, r3, #2
 800d9c0:	18d3      	adds	r3, r2, r3
 800d9c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d9c4:	494c      	ldr	r1, [pc, #304]	@ (800daf8 <USB_ActivateEndpoint+0x64c>)
 800d9c6:	430a      	orrs	r2, r1
 800d9c8:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d9ca:	687a      	ldr	r2, [r7, #4]
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	18d3      	adds	r3, r2, r3
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	4a4e      	ldr	r2, [pc, #312]	@ (800db10 <USB_ActivateEndpoint+0x664>)
 800d9d8:	4013      	ands	r3, r2
 800d9da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	18d3      	adds	r3, r2, r3
 800d9e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d9e8:	4943      	ldr	r1, [pc, #268]	@ (800daf8 <USB_ActivateEndpoint+0x64c>)
 800d9ea:	430a      	orrs	r2, r1
 800d9ec:	601a      	str	r2, [r3, #0]
 800d9ee:	e079      	b.n	800dae4 <USB_ActivateEndpoint+0x638>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d9f0:	687a      	ldr	r2, [r7, #4]
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	18d3      	adds	r3, r2, r3
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d9fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800da00:	2380      	movs	r3, #128	@ 0x80
 800da02:	01db      	lsls	r3, r3, #7
 800da04:	4013      	ands	r3, r2
 800da06:	d011      	beq.n	800da2c <USB_ActivateEndpoint+0x580>
 800da08:	687a      	ldr	r2, [r7, #4]
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	781b      	ldrb	r3, [r3, #0]
 800da0e:	009b      	lsls	r3, r3, #2
 800da10:	18d3      	adds	r3, r2, r3
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	4a3a      	ldr	r2, [pc, #232]	@ (800db00 <USB_ActivateEndpoint+0x654>)
 800da16:	4013      	ands	r3, r2
 800da18:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da1a:	687a      	ldr	r2, [r7, #4]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	781b      	ldrb	r3, [r3, #0]
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	18d3      	adds	r3, r2, r3
 800da24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800da26:	4937      	ldr	r1, [pc, #220]	@ (800db04 <USB_ActivateEndpoint+0x658>)
 800da28:	430a      	orrs	r2, r1
 800da2a:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	781b      	ldrb	r3, [r3, #0]
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	18d3      	adds	r3, r2, r3
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	657b      	str	r3, [r7, #84]	@ 0x54
 800da3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da3c:	2240      	movs	r2, #64	@ 0x40
 800da3e:	4013      	ands	r3, r2
 800da40:	d011      	beq.n	800da66 <USB_ActivateEndpoint+0x5ba>
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	781b      	ldrb	r3, [r3, #0]
 800da48:	009b      	lsls	r3, r3, #2
 800da4a:	18d3      	adds	r3, r2, r3
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a2c      	ldr	r2, [pc, #176]	@ (800db00 <USB_ActivateEndpoint+0x654>)
 800da50:	4013      	ands	r3, r2
 800da52:	653b      	str	r3, [r7, #80]	@ 0x50
 800da54:	687a      	ldr	r2, [r7, #4]
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	18d3      	adds	r3, r2, r3
 800da5e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800da60:	4929      	ldr	r1, [pc, #164]	@ (800db08 <USB_ActivateEndpoint+0x65c>)
 800da62:	430a      	orrs	r2, r1
 800da64:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	78db      	ldrb	r3, [r3, #3]
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d016      	beq.n	800da9c <USB_ActivateEndpoint+0x5f0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800da6e:	687a      	ldr	r2, [r7, #4]
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	781b      	ldrb	r3, [r3, #0]
 800da74:	009b      	lsls	r3, r3, #2
 800da76:	18d3      	adds	r3, r2, r3
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a25      	ldr	r2, [pc, #148]	@ (800db10 <USB_ActivateEndpoint+0x664>)
 800da7c:	4013      	ands	r3, r2
 800da7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800da82:	2220      	movs	r2, #32
 800da84:	4053      	eors	r3, r2
 800da86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da88:	687a      	ldr	r2, [r7, #4]
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	009b      	lsls	r3, r3, #2
 800da90:	18d3      	adds	r3, r2, r3
 800da92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da94:	4918      	ldr	r1, [pc, #96]	@ (800daf8 <USB_ActivateEndpoint+0x64c>)
 800da96:	430a      	orrs	r2, r1
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	e011      	b.n	800dac0 <USB_ActivateEndpoint+0x614>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da9c:	687a      	ldr	r2, [r7, #4]
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	18d3      	adds	r3, r2, r3
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	4a19      	ldr	r2, [pc, #100]	@ (800db10 <USB_ActivateEndpoint+0x664>)
 800daaa:	4013      	ands	r3, r2
 800daac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	781b      	ldrb	r3, [r3, #0]
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	18d3      	adds	r3, r2, r3
 800dab8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800daba:	490f      	ldr	r1, [pc, #60]	@ (800daf8 <USB_ActivateEndpoint+0x64c>)
 800dabc:	430a      	orrs	r2, r1
 800dabe:	601a      	str	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dac0:	687a      	ldr	r2, [r7, #4]
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	009b      	lsls	r3, r3, #2
 800dac8:	18d3      	adds	r3, r2, r3
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a0f      	ldr	r2, [pc, #60]	@ (800db0c <USB_ActivateEndpoint+0x660>)
 800dace:	4013      	ands	r3, r2
 800dad0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	781b      	ldrb	r3, [r3, #0]
 800dad8:	009b      	lsls	r3, r3, #2
 800dada:	18d3      	adds	r3, r2, r3
 800dadc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dade:	4906      	ldr	r1, [pc, #24]	@ (800daf8 <USB_ActivateEndpoint+0x64c>)
 800dae0:	430a      	orrs	r2, r1
 800dae2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800dae4:	2377      	movs	r3, #119	@ 0x77
 800dae6:	18fb      	adds	r3, r7, r3
 800dae8:	781b      	ldrb	r3, [r3, #0]
}
 800daea:	0018      	movs	r0, r3
 800daec:	46bd      	mov	sp, r7
 800daee:	b01e      	add	sp, #120	@ 0x78
 800daf0:	bd80      	pop	{r7, pc}
 800daf2:	46c0      	nop			@ (mov r8, r8)
 800daf4:	07ff8e8f 	.word	0x07ff8e8f
 800daf8:	00008080 	.word	0x00008080
 800dafc:	40009800 	.word	0x40009800
 800db00:	07ff8f8f 	.word	0x07ff8f8f
 800db04:	0000c080 	.word	0x0000c080
 800db08:	000080c0 	.word	0x000080c0
 800db0c:	07ffbf8f 	.word	0x07ffbf8f
 800db10:	07ff8fbf 	.word	0x07ff8fbf

0800db14 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b096      	sub	sp, #88	@ 0x58
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
 800db1c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800db1e:	683b      	ldr	r3, [r7, #0]
 800db20:	7b1b      	ldrb	r3, [r3, #12]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d164      	bne.n	800dbf0 <USB_DeactivateEndpoint+0xdc>
  {
    if (ep->is_in != 0U)
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	785b      	ldrb	r3, [r3, #1]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d02f      	beq.n	800db8e <USB_DeactivateEndpoint+0x7a>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	18d3      	adds	r3, r2, r3
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	613b      	str	r3, [r7, #16]
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	2240      	movs	r2, #64	@ 0x40
 800db40:	4013      	ands	r3, r2
 800db42:	d011      	beq.n	800db68 <USB_DeactivateEndpoint+0x54>
 800db44:	687a      	ldr	r2, [r7, #4]
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	18d3      	adds	r3, r2, r3
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	4a9d      	ldr	r2, [pc, #628]	@ (800ddc8 <USB_DeactivateEndpoint+0x2b4>)
 800db52:	4013      	ands	r3, r2
 800db54:	60fb      	str	r3, [r7, #12]
 800db56:	687a      	ldr	r2, [r7, #4]
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	18d3      	adds	r3, r2, r3
 800db60:	68fa      	ldr	r2, [r7, #12]
 800db62:	499a      	ldr	r1, [pc, #616]	@ (800ddcc <USB_DeactivateEndpoint+0x2b8>)
 800db64:	430a      	orrs	r2, r1
 800db66:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	009b      	lsls	r3, r3, #2
 800db70:	18d3      	adds	r3, r2, r3
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	4a96      	ldr	r2, [pc, #600]	@ (800ddd0 <USB_DeactivateEndpoint+0x2bc>)
 800db76:	4013      	ands	r3, r2
 800db78:	60bb      	str	r3, [r7, #8]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	781b      	ldrb	r3, [r3, #0]
 800db80:	009b      	lsls	r3, r3, #2
 800db82:	18d3      	adds	r3, r2, r3
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	4993      	ldr	r1, [pc, #588]	@ (800ddd4 <USB_DeactivateEndpoint+0x2c0>)
 800db88:	430a      	orrs	r2, r1
 800db8a:	601a      	str	r2, [r3, #0]
 800db8c:	e117      	b.n	800ddbe <USB_DeactivateEndpoint+0x2aa>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800db8e:	687a      	ldr	r2, [r7, #4]
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	781b      	ldrb	r3, [r3, #0]
 800db94:	009b      	lsls	r3, r3, #2
 800db96:	18d3      	adds	r3, r2, r3
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	61fb      	str	r3, [r7, #28]
 800db9c:	69fa      	ldr	r2, [r7, #28]
 800db9e:	2380      	movs	r3, #128	@ 0x80
 800dba0:	01db      	lsls	r3, r3, #7
 800dba2:	4013      	ands	r3, r2
 800dba4:	d011      	beq.n	800dbca <USB_DeactivateEndpoint+0xb6>
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	781b      	ldrb	r3, [r3, #0]
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	18d3      	adds	r3, r2, r3
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	4a85      	ldr	r2, [pc, #532]	@ (800ddc8 <USB_DeactivateEndpoint+0x2b4>)
 800dbb4:	4013      	ands	r3, r2
 800dbb6:	61bb      	str	r3, [r7, #24]
 800dbb8:	687a      	ldr	r2, [r7, #4]
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	009b      	lsls	r3, r3, #2
 800dbc0:	18d3      	adds	r3, r2, r3
 800dbc2:	69ba      	ldr	r2, [r7, #24]
 800dbc4:	4984      	ldr	r1, [pc, #528]	@ (800ddd8 <USB_DeactivateEndpoint+0x2c4>)
 800dbc6:	430a      	orrs	r2, r1
 800dbc8:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dbca:	687a      	ldr	r2, [r7, #4]
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	781b      	ldrb	r3, [r3, #0]
 800dbd0:	009b      	lsls	r3, r3, #2
 800dbd2:	18d3      	adds	r3, r2, r3
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4a81      	ldr	r2, [pc, #516]	@ (800dddc <USB_DeactivateEndpoint+0x2c8>)
 800dbd8:	4013      	ands	r3, r2
 800dbda:	617b      	str	r3, [r7, #20]
 800dbdc:	687a      	ldr	r2, [r7, #4]
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	781b      	ldrb	r3, [r3, #0]
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	18d3      	adds	r3, r2, r3
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	497a      	ldr	r1, [pc, #488]	@ (800ddd4 <USB_DeactivateEndpoint+0x2c0>)
 800dbea:	430a      	orrs	r2, r1
 800dbec:	601a      	str	r2, [r3, #0]
 800dbee:	e0e6      	b.n	800ddbe <USB_DeactivateEndpoint+0x2aa>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	785b      	ldrb	r3, [r3, #1]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d171      	bne.n	800dcdc <USB_DeactivateEndpoint+0x1c8>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dbf8:	687a      	ldr	r2, [r7, #4]
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	781b      	ldrb	r3, [r3, #0]
 800dbfe:	009b      	lsls	r3, r3, #2
 800dc00:	18d3      	adds	r3, r2, r3
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dc08:	2380      	movs	r3, #128	@ 0x80
 800dc0a:	01db      	lsls	r3, r3, #7
 800dc0c:	4013      	ands	r3, r2
 800dc0e:	d011      	beq.n	800dc34 <USB_DeactivateEndpoint+0x120>
 800dc10:	687a      	ldr	r2, [r7, #4]
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	009b      	lsls	r3, r3, #2
 800dc18:	18d3      	adds	r3, r2, r3
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a6a      	ldr	r2, [pc, #424]	@ (800ddc8 <USB_DeactivateEndpoint+0x2b4>)
 800dc1e:	4013      	ands	r3, r2
 800dc20:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	683b      	ldr	r3, [r7, #0]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	009b      	lsls	r3, r3, #2
 800dc2a:	18d3      	adds	r3, r2, r3
 800dc2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc2e:	496a      	ldr	r1, [pc, #424]	@ (800ddd8 <USB_DeactivateEndpoint+0x2c4>)
 800dc30:	430a      	orrs	r2, r1
 800dc32:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc34:	687a      	ldr	r2, [r7, #4]
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	781b      	ldrb	r3, [r3, #0]
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	18d3      	adds	r3, r2, r3
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc44:	2240      	movs	r2, #64	@ 0x40
 800dc46:	4013      	ands	r3, r2
 800dc48:	d011      	beq.n	800dc6e <USB_DeactivateEndpoint+0x15a>
 800dc4a:	687a      	ldr	r2, [r7, #4]
 800dc4c:	683b      	ldr	r3, [r7, #0]
 800dc4e:	781b      	ldrb	r3, [r3, #0]
 800dc50:	009b      	lsls	r3, r3, #2
 800dc52:	18d3      	adds	r3, r2, r3
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	4a5c      	ldr	r2, [pc, #368]	@ (800ddc8 <USB_DeactivateEndpoint+0x2b4>)
 800dc58:	4013      	ands	r3, r2
 800dc5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800dc5c:	687a      	ldr	r2, [r7, #4]
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	781b      	ldrb	r3, [r3, #0]
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	18d3      	adds	r3, r2, r3
 800dc66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc68:	4958      	ldr	r1, [pc, #352]	@ (800ddcc <USB_DeactivateEndpoint+0x2b8>)
 800dc6a:	430a      	orrs	r2, r1
 800dc6c:	601a      	str	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	009b      	lsls	r3, r3, #2
 800dc76:	18d3      	adds	r3, r2, r3
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	4a53      	ldr	r2, [pc, #332]	@ (800ddc8 <USB_DeactivateEndpoint+0x2b4>)
 800dc7c:	4013      	ands	r3, r2
 800dc7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	009b      	lsls	r3, r3, #2
 800dc88:	18d3      	adds	r3, r2, r3
 800dc8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc8c:	494f      	ldr	r1, [pc, #316]	@ (800ddcc <USB_DeactivateEndpoint+0x2b8>)
 800dc8e:	430a      	orrs	r2, r1
 800dc90:	601a      	str	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dc92:	687a      	ldr	r2, [r7, #4]
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	009b      	lsls	r3, r3, #2
 800dc9a:	18d3      	adds	r3, r2, r3
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a4f      	ldr	r2, [pc, #316]	@ (800dddc <USB_DeactivateEndpoint+0x2c8>)
 800dca0:	4013      	ands	r3, r2
 800dca2:	627b      	str	r3, [r7, #36]	@ 0x24
 800dca4:	687a      	ldr	r2, [r7, #4]
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	18d3      	adds	r3, r2, r3
 800dcae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dcb0:	4948      	ldr	r1, [pc, #288]	@ (800ddd4 <USB_DeactivateEndpoint+0x2c0>)
 800dcb2:	430a      	orrs	r2, r1
 800dcb4:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	18d3      	adds	r3, r2, r3
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a43      	ldr	r2, [pc, #268]	@ (800ddd0 <USB_DeactivateEndpoint+0x2bc>)
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	623b      	str	r3, [r7, #32]
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	781b      	ldrb	r3, [r3, #0]
 800dcce:	009b      	lsls	r3, r3, #2
 800dcd0:	18d3      	adds	r3, r2, r3
 800dcd2:	6a3a      	ldr	r2, [r7, #32]
 800dcd4:	493f      	ldr	r1, [pc, #252]	@ (800ddd4 <USB_DeactivateEndpoint+0x2c0>)
 800dcd6:	430a      	orrs	r2, r1
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	e070      	b.n	800ddbe <USB_DeactivateEndpoint+0x2aa>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dcdc:	687a      	ldr	r2, [r7, #4]
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	18d3      	adds	r3, r2, r3
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	657b      	str	r3, [r7, #84]	@ 0x54
 800dcea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800dcec:	2380      	movs	r3, #128	@ 0x80
 800dcee:	01db      	lsls	r3, r3, #7
 800dcf0:	4013      	ands	r3, r2
 800dcf2:	d011      	beq.n	800dd18 <USB_DeactivateEndpoint+0x204>
 800dcf4:	687a      	ldr	r2, [r7, #4]
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	781b      	ldrb	r3, [r3, #0]
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	18d3      	adds	r3, r2, r3
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	4a31      	ldr	r2, [pc, #196]	@ (800ddc8 <USB_DeactivateEndpoint+0x2b4>)
 800dd02:	4013      	ands	r3, r2
 800dd04:	653b      	str	r3, [r7, #80]	@ 0x50
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	683b      	ldr	r3, [r7, #0]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	009b      	lsls	r3, r3, #2
 800dd0e:	18d3      	adds	r3, r2, r3
 800dd10:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dd12:	4931      	ldr	r1, [pc, #196]	@ (800ddd8 <USB_DeactivateEndpoint+0x2c4>)
 800dd14:	430a      	orrs	r2, r1
 800dd16:	601a      	str	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd18:	687a      	ldr	r2, [r7, #4]
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	781b      	ldrb	r3, [r3, #0]
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	18d3      	adds	r3, r2, r3
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd28:	2240      	movs	r2, #64	@ 0x40
 800dd2a:	4013      	ands	r3, r2
 800dd2c:	d011      	beq.n	800dd52 <USB_DeactivateEndpoint+0x23e>
 800dd2e:	687a      	ldr	r2, [r7, #4]
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	009b      	lsls	r3, r3, #2
 800dd36:	18d3      	adds	r3, r2, r3
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	4a23      	ldr	r2, [pc, #140]	@ (800ddc8 <USB_DeactivateEndpoint+0x2b4>)
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	781b      	ldrb	r3, [r3, #0]
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	18d3      	adds	r3, r2, r3
 800dd4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd4c:	491f      	ldr	r1, [pc, #124]	@ (800ddcc <USB_DeactivateEndpoint+0x2b8>)
 800dd4e:	430a      	orrs	r2, r1
 800dd50:	601a      	str	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800dd52:	687a      	ldr	r2, [r7, #4]
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	781b      	ldrb	r3, [r3, #0]
 800dd58:	009b      	lsls	r3, r3, #2
 800dd5a:	18d3      	adds	r3, r2, r3
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a1a      	ldr	r2, [pc, #104]	@ (800ddc8 <USB_DeactivateEndpoint+0x2b4>)
 800dd60:	4013      	ands	r3, r2
 800dd62:	647b      	str	r3, [r7, #68]	@ 0x44
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	781b      	ldrb	r3, [r3, #0]
 800dd6a:	009b      	lsls	r3, r3, #2
 800dd6c:	18d3      	adds	r3, r2, r3
 800dd6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dd70:	4919      	ldr	r1, [pc, #100]	@ (800ddd8 <USB_DeactivateEndpoint+0x2c4>)
 800dd72:	430a      	orrs	r2, r1
 800dd74:	601a      	str	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	781b      	ldrb	r3, [r3, #0]
 800dd7c:	009b      	lsls	r3, r3, #2
 800dd7e:	18d3      	adds	r3, r2, r3
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a13      	ldr	r2, [pc, #76]	@ (800ddd0 <USB_DeactivateEndpoint+0x2bc>)
 800dd84:	4013      	ands	r3, r2
 800dd86:	643b      	str	r3, [r7, #64]	@ 0x40
 800dd88:	687a      	ldr	r2, [r7, #4]
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	009b      	lsls	r3, r3, #2
 800dd90:	18d3      	adds	r3, r2, r3
 800dd92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dd94:	490f      	ldr	r1, [pc, #60]	@ (800ddd4 <USB_DeactivateEndpoint+0x2c0>)
 800dd96:	430a      	orrs	r2, r1
 800dd98:	601a      	str	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dd9a:	687a      	ldr	r2, [r7, #4]
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	009b      	lsls	r3, r3, #2
 800dda2:	18d3      	adds	r3, r2, r3
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a0d      	ldr	r2, [pc, #52]	@ (800dddc <USB_DeactivateEndpoint+0x2c8>)
 800dda8:	4013      	ands	r3, r2
 800ddaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ddac:	687a      	ldr	r2, [r7, #4]
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	18d3      	adds	r3, r2, r3
 800ddb6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ddb8:	4906      	ldr	r1, [pc, #24]	@ (800ddd4 <USB_DeactivateEndpoint+0x2c0>)
 800ddba:	430a      	orrs	r2, r1
 800ddbc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ddbe:	2300      	movs	r3, #0
}
 800ddc0:	0018      	movs	r0, r3
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	b016      	add	sp, #88	@ 0x58
 800ddc6:	bd80      	pop	{r7, pc}
 800ddc8:	07ff8f8f 	.word	0x07ff8f8f
 800ddcc:	000080c0 	.word	0x000080c0
 800ddd0:	07ff8fbf 	.word	0x07ff8fbf
 800ddd4:	00008080 	.word	0x00008080
 800ddd8:	0000c080 	.word	0x0000c080
 800dddc:	07ffbf8f 	.word	0x07ffbf8f

0800dde0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800dde0:	b590      	push	{r4, r7, lr}
 800dde2:	b097      	sub	sp, #92	@ 0x5c
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ddea:	683b      	ldr	r3, [r7, #0]
 800ddec:	785b      	ldrb	r3, [r3, #1]
 800ddee:	2b01      	cmp	r3, #1
 800ddf0:	d001      	beq.n	800ddf6 <USB_EPStartXfer+0x16>
 800ddf2:	f000 fcbf 	bl	800e774 <USB_EPStartXfer+0x994>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	699a      	ldr	r2, [r3, #24]
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	691b      	ldr	r3, [r3, #16]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d903      	bls.n	800de0a <USB_EPStartXfer+0x2a>
    {
      len = ep->maxpacket;
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	691b      	ldr	r3, [r3, #16]
 800de06:	657b      	str	r3, [r7, #84]	@ 0x54
 800de08:	e002      	b.n	800de10 <USB_EPStartXfer+0x30>
    }
    else
    {
      len = ep->xfer_len;
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	699b      	ldr	r3, [r3, #24]
 800de0e:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	7b1b      	ldrb	r3, [r3, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d12b      	bne.n	800de70 <USB_EPStartXfer+0x90>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	6959      	ldr	r1, [r3, #20]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	88da      	ldrh	r2, [r3, #6]
 800de20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de22:	b29b      	uxth	r3, r3
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f001 f97f 	bl	800f128 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	781b      	ldrb	r3, [r3, #0]
 800de2e:	00db      	lsls	r3, r3, #3
 800de30:	4ace      	ldr	r2, [pc, #824]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800de32:	4694      	mov	ip, r2
 800de34:	4463      	add	r3, ip
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	781b      	ldrb	r3, [r3, #0]
 800de3c:	00db      	lsls	r3, r3, #3
 800de3e:	49cb      	ldr	r1, [pc, #812]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800de40:	468c      	mov	ip, r1
 800de42:	4463      	add	r3, ip
 800de44:	0412      	lsls	r2, r2, #16
 800de46:	0c12      	lsrs	r2, r2, #16
 800de48:	601a      	str	r2, [r3, #0]
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	781b      	ldrb	r3, [r3, #0]
 800de4e:	00db      	lsls	r3, r3, #3
 800de50:	4ac6      	ldr	r2, [pc, #792]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800de52:	4694      	mov	ip, r2
 800de54:	4463      	add	r3, ip
 800de56:	6819      	ldr	r1, [r3, #0]
 800de58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de5a:	041a      	lsls	r2, r3, #16
 800de5c:	683b      	ldr	r3, [r7, #0]
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	00db      	lsls	r3, r3, #3
 800de62:	48c2      	ldr	r0, [pc, #776]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800de64:	4684      	mov	ip, r0
 800de66:	4463      	add	r3, ip
 800de68:	430a      	orrs	r2, r1
 800de6a:	601a      	str	r2, [r3, #0]
 800de6c:	f000 fc67 	bl	800e73e <USB_EPStartXfer+0x95e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800de70:	683b      	ldr	r3, [r7, #0]
 800de72:	78db      	ldrb	r3, [r3, #3]
 800de74:	2b02      	cmp	r3, #2
 800de76:	d000      	beq.n	800de7a <USB_EPStartXfer+0x9a>
 800de78:	e31a      	b.n	800e4b0 <USB_EPStartXfer+0x6d0>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	6a1a      	ldr	r2, [r3, #32]
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	691b      	ldr	r3, [r3, #16]
 800de82:	429a      	cmp	r2, r3
 800de84:	d800      	bhi.n	800de88 <USB_EPStartXfer+0xa8>
 800de86:	e2c7      	b.n	800e418 <USB_EPStartXfer+0x638>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	18d3      	adds	r3, r2, r3
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	4ab6      	ldr	r2, [pc, #728]	@ (800e170 <USB_EPStartXfer+0x390>)
 800de96:	4013      	ands	r3, r2
 800de98:	613b      	str	r3, [r7, #16]
 800de9a:	687a      	ldr	r2, [r7, #4]
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	009b      	lsls	r3, r3, #2
 800dea2:	18d3      	adds	r3, r2, r3
 800dea4:	693a      	ldr	r2, [r7, #16]
 800dea6:	49b3      	ldr	r1, [pc, #716]	@ (800e174 <USB_EPStartXfer+0x394>)
 800dea8:	430a      	orrs	r2, r1
 800deaa:	601a      	str	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	6a1a      	ldr	r2, [r3, #32]
 800deb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800deb2:	1ad2      	subs	r2, r2, r3
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	781b      	ldrb	r3, [r3, #0]
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	18d3      	adds	r3, r2, r3
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2240      	movs	r2, #64	@ 0x40
 800dec6:	4013      	ands	r3, r2
 800dec8:	d100      	bne.n	800decc <USB_EPStartXfer+0xec>
 800deca:	e155      	b.n	800e178 <USB_EPStartXfer+0x398>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	785b      	ldrb	r3, [r3, #1]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d162      	bne.n	800df9a <USB_EPStartXfer+0x1ba>
 800ded4:	683b      	ldr	r3, [r7, #0]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	00db      	lsls	r3, r3, #3
 800deda:	4aa4      	ldr	r2, [pc, #656]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800dedc:	4694      	mov	ip, r2
 800dede:	4463      	add	r3, ip
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	00db      	lsls	r3, r3, #3
 800dee8:	49a0      	ldr	r1, [pc, #640]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800deea:	468c      	mov	ip, r1
 800deec:	4463      	add	r3, ip
 800deee:	0192      	lsls	r2, r2, #6
 800def0:	0992      	lsrs	r2, r2, #6
 800def2:	605a      	str	r2, [r3, #4]
 800def4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800def6:	2b3e      	cmp	r3, #62	@ 0x3e
 800def8:	d91e      	bls.n	800df38 <USB_EPStartXfer+0x158>
 800defa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800defc:	095b      	lsrs	r3, r3, #5
 800defe:	653b      	str	r3, [r7, #80]	@ 0x50
 800df00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df02:	221f      	movs	r2, #31
 800df04:	4013      	ands	r3, r2
 800df06:	d102      	bne.n	800df0e <USB_EPStartXfer+0x12e>
 800df08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df0a:	3b01      	subs	r3, #1
 800df0c:	653b      	str	r3, [r7, #80]	@ 0x50
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	00db      	lsls	r3, r3, #3
 800df14:	4a95      	ldr	r2, [pc, #596]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800df16:	4694      	mov	ip, r2
 800df18:	4463      	add	r3, ip
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df1e:	069b      	lsls	r3, r3, #26
 800df20:	431a      	orrs	r2, r3
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	00db      	lsls	r3, r3, #3
 800df28:	4990      	ldr	r1, [pc, #576]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800df2a:	468c      	mov	ip, r1
 800df2c:	4463      	add	r3, ip
 800df2e:	2180      	movs	r1, #128	@ 0x80
 800df30:	0609      	lsls	r1, r1, #24
 800df32:	430a      	orrs	r2, r1
 800df34:	605a      	str	r2, [r3, #4]
 800df36:	e055      	b.n	800dfe4 <USB_EPStartXfer+0x204>
 800df38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d111      	bne.n	800df62 <USB_EPStartXfer+0x182>
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	781b      	ldrb	r3, [r3, #0]
 800df42:	00db      	lsls	r3, r3, #3
 800df44:	4a89      	ldr	r2, [pc, #548]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800df46:	4694      	mov	ip, r2
 800df48:	4463      	add	r3, ip
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	781b      	ldrb	r3, [r3, #0]
 800df50:	00db      	lsls	r3, r3, #3
 800df52:	4986      	ldr	r1, [pc, #536]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800df54:	468c      	mov	ip, r1
 800df56:	4463      	add	r3, ip
 800df58:	2180      	movs	r1, #128	@ 0x80
 800df5a:	0609      	lsls	r1, r1, #24
 800df5c:	430a      	orrs	r2, r1
 800df5e:	605a      	str	r2, [r3, #4]
 800df60:	e040      	b.n	800dfe4 <USB_EPStartXfer+0x204>
 800df62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df64:	085b      	lsrs	r3, r3, #1
 800df66:	653b      	str	r3, [r7, #80]	@ 0x50
 800df68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df6a:	2201      	movs	r2, #1
 800df6c:	4013      	ands	r3, r2
 800df6e:	d002      	beq.n	800df76 <USB_EPStartXfer+0x196>
 800df70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df72:	3301      	adds	r3, #1
 800df74:	653b      	str	r3, [r7, #80]	@ 0x50
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	4a7b      	ldr	r2, [pc, #492]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800df7e:	4694      	mov	ip, r2
 800df80:	4463      	add	r3, ip
 800df82:	6859      	ldr	r1, [r3, #4]
 800df84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df86:	069a      	lsls	r2, r3, #26
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	00db      	lsls	r3, r3, #3
 800df8e:	4877      	ldr	r0, [pc, #476]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800df90:	4684      	mov	ip, r0
 800df92:	4463      	add	r3, ip
 800df94:	430a      	orrs	r2, r1
 800df96:	605a      	str	r2, [r3, #4]
 800df98:	e024      	b.n	800dfe4 <USB_EPStartXfer+0x204>
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	785b      	ldrb	r3, [r3, #1]
 800df9e:	2b01      	cmp	r3, #1
 800dfa0:	d120      	bne.n	800dfe4 <USB_EPStartXfer+0x204>
 800dfa2:	683b      	ldr	r3, [r7, #0]
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	00db      	lsls	r3, r3, #3
 800dfa8:	4a70      	ldr	r2, [pc, #448]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800dfaa:	4694      	mov	ip, r2
 800dfac:	4463      	add	r3, ip
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	00db      	lsls	r3, r3, #3
 800dfb6:	496d      	ldr	r1, [pc, #436]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800dfb8:	468c      	mov	ip, r1
 800dfba:	4463      	add	r3, ip
 800dfbc:	0412      	lsls	r2, r2, #16
 800dfbe:	0c12      	lsrs	r2, r2, #16
 800dfc0:	605a      	str	r2, [r3, #4]
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	781b      	ldrb	r3, [r3, #0]
 800dfc6:	00db      	lsls	r3, r3, #3
 800dfc8:	4a68      	ldr	r2, [pc, #416]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800dfca:	4694      	mov	ip, r2
 800dfcc:	4463      	add	r3, ip
 800dfce:	6859      	ldr	r1, [r3, #4]
 800dfd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfd2:	041a      	lsls	r2, r3, #16
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	00db      	lsls	r3, r3, #3
 800dfda:	4864      	ldr	r0, [pc, #400]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800dfdc:	4684      	mov	ip, r0
 800dfde:	4463      	add	r3, ip
 800dfe0:	430a      	orrs	r2, r1
 800dfe2:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800dfe4:	201a      	movs	r0, #26
 800dfe6:	183b      	adds	r3, r7, r0
 800dfe8:	683a      	ldr	r2, [r7, #0]
 800dfea:	8952      	ldrh	r2, [r2, #10]
 800dfec:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	6959      	ldr	r1, [r3, #20]
 800dff2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dff4:	b29c      	uxth	r4, r3
 800dff6:	183b      	adds	r3, r7, r0
 800dff8:	881a      	ldrh	r2, [r3, #0]
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	0023      	movs	r3, r4
 800dffe:	f001 f893 	bl	800f128 <USB_WritePMA>
            ep->xfer_buff += len;
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	695a      	ldr	r2, [r3, #20]
 800e006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e008:	18d2      	adds	r2, r2, r3
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e00e:	683b      	ldr	r3, [r7, #0]
 800e010:	6a1a      	ldr	r2, [r3, #32]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	429a      	cmp	r2, r3
 800e018:	d906      	bls.n	800e028 <USB_EPStartXfer+0x248>
            {
              ep->xfer_len_db -= len;
 800e01a:	683b      	ldr	r3, [r7, #0]
 800e01c:	6a1a      	ldr	r2, [r3, #32]
 800e01e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e020:	1ad2      	subs	r2, r2, r3
 800e022:	683b      	ldr	r3, [r7, #0]
 800e024:	621a      	str	r2, [r3, #32]
 800e026:	e005      	b.n	800e034 <USB_EPStartXfer+0x254>
            }
            else
            {
              len = ep->xfer_len_db;
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	6a1b      	ldr	r3, [r3, #32]
 800e02c:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	2200      	movs	r2, #0
 800e032:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e034:	683b      	ldr	r3, [r7, #0]
 800e036:	785b      	ldrb	r3, [r3, #1]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d162      	bne.n	800e102 <USB_EPStartXfer+0x322>
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	781b      	ldrb	r3, [r3, #0]
 800e040:	00db      	lsls	r3, r3, #3
 800e042:	4a4a      	ldr	r2, [pc, #296]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e044:	4694      	mov	ip, r2
 800e046:	4463      	add	r3, ip
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	00db      	lsls	r3, r3, #3
 800e050:	4946      	ldr	r1, [pc, #280]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e052:	468c      	mov	ip, r1
 800e054:	4463      	add	r3, ip
 800e056:	0192      	lsls	r2, r2, #6
 800e058:	0992      	lsrs	r2, r2, #6
 800e05a:	601a      	str	r2, [r3, #0]
 800e05c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e05e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e060:	d91e      	bls.n	800e0a0 <USB_EPStartXfer+0x2c0>
 800e062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e064:	095b      	lsrs	r3, r3, #5
 800e066:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e06a:	221f      	movs	r2, #31
 800e06c:	4013      	ands	r3, r2
 800e06e:	d102      	bne.n	800e076 <USB_EPStartXfer+0x296>
 800e070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e072:	3b01      	subs	r3, #1
 800e074:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	00db      	lsls	r3, r3, #3
 800e07c:	4a3b      	ldr	r2, [pc, #236]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e07e:	4694      	mov	ip, r2
 800e080:	4463      	add	r3, ip
 800e082:	681a      	ldr	r2, [r3, #0]
 800e084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e086:	069b      	lsls	r3, r3, #26
 800e088:	431a      	orrs	r2, r3
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	00db      	lsls	r3, r3, #3
 800e090:	4936      	ldr	r1, [pc, #216]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e092:	468c      	mov	ip, r1
 800e094:	4463      	add	r3, ip
 800e096:	2180      	movs	r1, #128	@ 0x80
 800e098:	0609      	lsls	r1, r1, #24
 800e09a:	430a      	orrs	r2, r1
 800e09c:	601a      	str	r2, [r3, #0]
 800e09e:	e055      	b.n	800e14c <USB_EPStartXfer+0x36c>
 800e0a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d111      	bne.n	800e0ca <USB_EPStartXfer+0x2ea>
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	00db      	lsls	r3, r3, #3
 800e0ac:	4a2f      	ldr	r2, [pc, #188]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e0ae:	4694      	mov	ip, r2
 800e0b0:	4463      	add	r3, ip
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	00db      	lsls	r3, r3, #3
 800e0ba:	492c      	ldr	r1, [pc, #176]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e0bc:	468c      	mov	ip, r1
 800e0be:	4463      	add	r3, ip
 800e0c0:	2180      	movs	r1, #128	@ 0x80
 800e0c2:	0609      	lsls	r1, r1, #24
 800e0c4:	430a      	orrs	r2, r1
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	e040      	b.n	800e14c <USB_EPStartXfer+0x36c>
 800e0ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0cc:	085b      	lsrs	r3, r3, #1
 800e0ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	4013      	ands	r3, r2
 800e0d6:	d002      	beq.n	800e0de <USB_EPStartXfer+0x2fe>
 800e0d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0da:	3301      	adds	r3, #1
 800e0dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	781b      	ldrb	r3, [r3, #0]
 800e0e2:	00db      	lsls	r3, r3, #3
 800e0e4:	4a21      	ldr	r2, [pc, #132]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e0e6:	4694      	mov	ip, r2
 800e0e8:	4463      	add	r3, ip
 800e0ea:	6819      	ldr	r1, [r3, #0]
 800e0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0ee:	069a      	lsls	r2, r3, #26
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	00db      	lsls	r3, r3, #3
 800e0f6:	481d      	ldr	r0, [pc, #116]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e0f8:	4684      	mov	ip, r0
 800e0fa:	4463      	add	r3, ip
 800e0fc:	430a      	orrs	r2, r1
 800e0fe:	601a      	str	r2, [r3, #0]
 800e100:	e024      	b.n	800e14c <USB_EPStartXfer+0x36c>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	785b      	ldrb	r3, [r3, #1]
 800e106:	2b01      	cmp	r3, #1
 800e108:	d120      	bne.n	800e14c <USB_EPStartXfer+0x36c>
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	00db      	lsls	r3, r3, #3
 800e110:	4a16      	ldr	r2, [pc, #88]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e112:	4694      	mov	ip, r2
 800e114:	4463      	add	r3, ip
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	00db      	lsls	r3, r3, #3
 800e11e:	4913      	ldr	r1, [pc, #76]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e120:	468c      	mov	ip, r1
 800e122:	4463      	add	r3, ip
 800e124:	0412      	lsls	r2, r2, #16
 800e126:	0c12      	lsrs	r2, r2, #16
 800e128:	601a      	str	r2, [r3, #0]
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	781b      	ldrb	r3, [r3, #0]
 800e12e:	00db      	lsls	r3, r3, #3
 800e130:	4a0e      	ldr	r2, [pc, #56]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e132:	4694      	mov	ip, r2
 800e134:	4463      	add	r3, ip
 800e136:	6819      	ldr	r1, [r3, #0]
 800e138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e13a:	041a      	lsls	r2, r3, #16
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	00db      	lsls	r3, r3, #3
 800e142:	480a      	ldr	r0, [pc, #40]	@ (800e16c <USB_EPStartXfer+0x38c>)
 800e144:	4684      	mov	ip, r0
 800e146:	4463      	add	r3, ip
 800e148:	430a      	orrs	r2, r1
 800e14a:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e14c:	201a      	movs	r0, #26
 800e14e:	183b      	adds	r3, r7, r0
 800e150:	683a      	ldr	r2, [r7, #0]
 800e152:	8912      	ldrh	r2, [r2, #8]
 800e154:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	6959      	ldr	r1, [r3, #20]
 800e15a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e15c:	b29c      	uxth	r4, r3
 800e15e:	183b      	adds	r3, r7, r0
 800e160:	881a      	ldrh	r2, [r3, #0]
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	0023      	movs	r3, r4
 800e166:	f000 ffdf 	bl	800f128 <USB_WritePMA>
 800e16a:	e2e8      	b.n	800e73e <USB_EPStartXfer+0x95e>
 800e16c:	40009800 	.word	0x40009800
 800e170:	07ff8f8f 	.word	0x07ff8f8f
 800e174:	00008180 	.word	0x00008180
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	785b      	ldrb	r3, [r3, #1]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d162      	bne.n	800e246 <USB_EPStartXfer+0x466>
 800e180:	683b      	ldr	r3, [r7, #0]
 800e182:	781b      	ldrb	r3, [r3, #0]
 800e184:	00db      	lsls	r3, r3, #3
 800e186:	4ac7      	ldr	r2, [pc, #796]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e188:	4694      	mov	ip, r2
 800e18a:	4463      	add	r3, ip
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	781b      	ldrb	r3, [r3, #0]
 800e192:	00db      	lsls	r3, r3, #3
 800e194:	49c3      	ldr	r1, [pc, #780]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e196:	468c      	mov	ip, r1
 800e198:	4463      	add	r3, ip
 800e19a:	0192      	lsls	r2, r2, #6
 800e19c:	0992      	lsrs	r2, r2, #6
 800e19e:	601a      	str	r2, [r3, #0]
 800e1a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1a2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e1a4:	d91e      	bls.n	800e1e4 <USB_EPStartXfer+0x404>
 800e1a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1a8:	095b      	lsrs	r3, r3, #5
 800e1aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1ae:	221f      	movs	r2, #31
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	d102      	bne.n	800e1ba <USB_EPStartXfer+0x3da>
 800e1b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	00db      	lsls	r3, r3, #3
 800e1c0:	4ab8      	ldr	r2, [pc, #736]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e1c2:	4694      	mov	ip, r2
 800e1c4:	4463      	add	r3, ip
 800e1c6:	681a      	ldr	r2, [r3, #0]
 800e1c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1ca:	069b      	lsls	r3, r3, #26
 800e1cc:	431a      	orrs	r2, r3
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	00db      	lsls	r3, r3, #3
 800e1d4:	49b3      	ldr	r1, [pc, #716]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e1d6:	468c      	mov	ip, r1
 800e1d8:	4463      	add	r3, ip
 800e1da:	2180      	movs	r1, #128	@ 0x80
 800e1dc:	0609      	lsls	r1, r1, #24
 800e1de:	430a      	orrs	r2, r1
 800e1e0:	601a      	str	r2, [r3, #0]
 800e1e2:	e055      	b.n	800e290 <USB_EPStartXfer+0x4b0>
 800e1e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d111      	bne.n	800e20e <USB_EPStartXfer+0x42e>
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	00db      	lsls	r3, r3, #3
 800e1f0:	4aac      	ldr	r2, [pc, #688]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e1f2:	4694      	mov	ip, r2
 800e1f4:	4463      	add	r3, ip
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	00db      	lsls	r3, r3, #3
 800e1fe:	49a9      	ldr	r1, [pc, #676]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e200:	468c      	mov	ip, r1
 800e202:	4463      	add	r3, ip
 800e204:	2180      	movs	r1, #128	@ 0x80
 800e206:	0609      	lsls	r1, r1, #24
 800e208:	430a      	orrs	r2, r1
 800e20a:	601a      	str	r2, [r3, #0]
 800e20c:	e040      	b.n	800e290 <USB_EPStartXfer+0x4b0>
 800e20e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e210:	085b      	lsrs	r3, r3, #1
 800e212:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e216:	2201      	movs	r2, #1
 800e218:	4013      	ands	r3, r2
 800e21a:	d002      	beq.n	800e222 <USB_EPStartXfer+0x442>
 800e21c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e21e:	3301      	adds	r3, #1
 800e220:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e222:	683b      	ldr	r3, [r7, #0]
 800e224:	781b      	ldrb	r3, [r3, #0]
 800e226:	00db      	lsls	r3, r3, #3
 800e228:	4a9e      	ldr	r2, [pc, #632]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e22a:	4694      	mov	ip, r2
 800e22c:	4463      	add	r3, ip
 800e22e:	6819      	ldr	r1, [r3, #0]
 800e230:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e232:	069a      	lsls	r2, r3, #26
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	781b      	ldrb	r3, [r3, #0]
 800e238:	00db      	lsls	r3, r3, #3
 800e23a:	489a      	ldr	r0, [pc, #616]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e23c:	4684      	mov	ip, r0
 800e23e:	4463      	add	r3, ip
 800e240:	430a      	orrs	r2, r1
 800e242:	601a      	str	r2, [r3, #0]
 800e244:	e024      	b.n	800e290 <USB_EPStartXfer+0x4b0>
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	785b      	ldrb	r3, [r3, #1]
 800e24a:	2b01      	cmp	r3, #1
 800e24c:	d120      	bne.n	800e290 <USB_EPStartXfer+0x4b0>
 800e24e:	683b      	ldr	r3, [r7, #0]
 800e250:	781b      	ldrb	r3, [r3, #0]
 800e252:	00db      	lsls	r3, r3, #3
 800e254:	4a93      	ldr	r2, [pc, #588]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e256:	4694      	mov	ip, r2
 800e258:	4463      	add	r3, ip
 800e25a:	681a      	ldr	r2, [r3, #0]
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	781b      	ldrb	r3, [r3, #0]
 800e260:	00db      	lsls	r3, r3, #3
 800e262:	4990      	ldr	r1, [pc, #576]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e264:	468c      	mov	ip, r1
 800e266:	4463      	add	r3, ip
 800e268:	0412      	lsls	r2, r2, #16
 800e26a:	0c12      	lsrs	r2, r2, #16
 800e26c:	601a      	str	r2, [r3, #0]
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	00db      	lsls	r3, r3, #3
 800e274:	4a8b      	ldr	r2, [pc, #556]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e276:	4694      	mov	ip, r2
 800e278:	4463      	add	r3, ip
 800e27a:	6819      	ldr	r1, [r3, #0]
 800e27c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e27e:	041a      	lsls	r2, r3, #16
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	00db      	lsls	r3, r3, #3
 800e286:	4887      	ldr	r0, [pc, #540]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e288:	4684      	mov	ip, r0
 800e28a:	4463      	add	r3, ip
 800e28c:	430a      	orrs	r2, r1
 800e28e:	601a      	str	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e290:	201a      	movs	r0, #26
 800e292:	183b      	adds	r3, r7, r0
 800e294:	683a      	ldr	r2, [r7, #0]
 800e296:	8912      	ldrh	r2, [r2, #8]
 800e298:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	6959      	ldr	r1, [r3, #20]
 800e29e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2a0:	b29c      	uxth	r4, r3
 800e2a2:	183b      	adds	r3, r7, r0
 800e2a4:	881a      	ldrh	r2, [r3, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	0023      	movs	r3, r4
 800e2aa:	f000 ff3d 	bl	800f128 <USB_WritePMA>
            ep->xfer_buff += len;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	695a      	ldr	r2, [r3, #20]
 800e2b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2b4:	18d2      	adds	r2, r2, r3
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	6a1a      	ldr	r2, [r3, #32]
 800e2be:	683b      	ldr	r3, [r7, #0]
 800e2c0:	691b      	ldr	r3, [r3, #16]
 800e2c2:	429a      	cmp	r2, r3
 800e2c4:	d906      	bls.n	800e2d4 <USB_EPStartXfer+0x4f4>
            {
              ep->xfer_len_db -= len;
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	6a1a      	ldr	r2, [r3, #32]
 800e2ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e2cc:	1ad2      	subs	r2, r2, r3
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	621a      	str	r2, [r3, #32]
 800e2d2:	e005      	b.n	800e2e0 <USB_EPStartXfer+0x500>
            }
            else
            {
              len = ep->xfer_len_db;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	6a1b      	ldr	r3, [r3, #32]
 800e2d8:	657b      	str	r3, [r7, #84]	@ 0x54
              ep->xfer_len_db = 0U;
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	785b      	ldrb	r3, [r3, #1]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d162      	bne.n	800e3ae <USB_EPStartXfer+0x5ce>
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	00db      	lsls	r3, r3, #3
 800e2ee:	4a6d      	ldr	r2, [pc, #436]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e2f0:	4694      	mov	ip, r2
 800e2f2:	4463      	add	r3, ip
 800e2f4:	685a      	ldr	r2, [r3, #4]
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	4969      	ldr	r1, [pc, #420]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e2fe:	468c      	mov	ip, r1
 800e300:	4463      	add	r3, ip
 800e302:	0192      	lsls	r2, r2, #6
 800e304:	0992      	lsrs	r2, r2, #6
 800e306:	605a      	str	r2, [r3, #4]
 800e308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e30a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e30c:	d91e      	bls.n	800e34c <USB_EPStartXfer+0x56c>
 800e30e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e310:	095b      	lsrs	r3, r3, #5
 800e312:	647b      	str	r3, [r7, #68]	@ 0x44
 800e314:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e316:	221f      	movs	r2, #31
 800e318:	4013      	ands	r3, r2
 800e31a:	d102      	bne.n	800e322 <USB_EPStartXfer+0x542>
 800e31c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e31e:	3b01      	subs	r3, #1
 800e320:	647b      	str	r3, [r7, #68]	@ 0x44
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	781b      	ldrb	r3, [r3, #0]
 800e326:	00db      	lsls	r3, r3, #3
 800e328:	4a5e      	ldr	r2, [pc, #376]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e32a:	4694      	mov	ip, r2
 800e32c:	4463      	add	r3, ip
 800e32e:	685a      	ldr	r2, [r3, #4]
 800e330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e332:	069b      	lsls	r3, r3, #26
 800e334:	431a      	orrs	r2, r3
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	781b      	ldrb	r3, [r3, #0]
 800e33a:	00db      	lsls	r3, r3, #3
 800e33c:	4959      	ldr	r1, [pc, #356]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e33e:	468c      	mov	ip, r1
 800e340:	4463      	add	r3, ip
 800e342:	2180      	movs	r1, #128	@ 0x80
 800e344:	0609      	lsls	r1, r1, #24
 800e346:	430a      	orrs	r2, r1
 800e348:	605a      	str	r2, [r3, #4]
 800e34a:	e055      	b.n	800e3f8 <USB_EPStartXfer+0x618>
 800e34c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d111      	bne.n	800e376 <USB_EPStartXfer+0x596>
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	781b      	ldrb	r3, [r3, #0]
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	4a52      	ldr	r2, [pc, #328]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e35a:	4694      	mov	ip, r2
 800e35c:	4463      	add	r3, ip
 800e35e:	685a      	ldr	r2, [r3, #4]
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	00db      	lsls	r3, r3, #3
 800e366:	494f      	ldr	r1, [pc, #316]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e368:	468c      	mov	ip, r1
 800e36a:	4463      	add	r3, ip
 800e36c:	2180      	movs	r1, #128	@ 0x80
 800e36e:	0609      	lsls	r1, r1, #24
 800e370:	430a      	orrs	r2, r1
 800e372:	605a      	str	r2, [r3, #4]
 800e374:	e040      	b.n	800e3f8 <USB_EPStartXfer+0x618>
 800e376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e378:	085b      	lsrs	r3, r3, #1
 800e37a:	647b      	str	r3, [r7, #68]	@ 0x44
 800e37c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e37e:	2201      	movs	r2, #1
 800e380:	4013      	ands	r3, r2
 800e382:	d002      	beq.n	800e38a <USB_EPStartXfer+0x5aa>
 800e384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e386:	3301      	adds	r3, #1
 800e388:	647b      	str	r3, [r7, #68]	@ 0x44
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	4a44      	ldr	r2, [pc, #272]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e392:	4694      	mov	ip, r2
 800e394:	4463      	add	r3, ip
 800e396:	6859      	ldr	r1, [r3, #4]
 800e398:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e39a:	069a      	lsls	r2, r3, #26
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	00db      	lsls	r3, r3, #3
 800e3a2:	4840      	ldr	r0, [pc, #256]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e3a4:	4684      	mov	ip, r0
 800e3a6:	4463      	add	r3, ip
 800e3a8:	430a      	orrs	r2, r1
 800e3aa:	605a      	str	r2, [r3, #4]
 800e3ac:	e024      	b.n	800e3f8 <USB_EPStartXfer+0x618>
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	785b      	ldrb	r3, [r3, #1]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d120      	bne.n	800e3f8 <USB_EPStartXfer+0x618>
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	00db      	lsls	r3, r3, #3
 800e3bc:	4a39      	ldr	r2, [pc, #228]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e3be:	4694      	mov	ip, r2
 800e3c0:	4463      	add	r3, ip
 800e3c2:	685a      	ldr	r2, [r3, #4]
 800e3c4:	683b      	ldr	r3, [r7, #0]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	00db      	lsls	r3, r3, #3
 800e3ca:	4936      	ldr	r1, [pc, #216]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e3cc:	468c      	mov	ip, r1
 800e3ce:	4463      	add	r3, ip
 800e3d0:	0412      	lsls	r2, r2, #16
 800e3d2:	0c12      	lsrs	r2, r2, #16
 800e3d4:	605a      	str	r2, [r3, #4]
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	781b      	ldrb	r3, [r3, #0]
 800e3da:	00db      	lsls	r3, r3, #3
 800e3dc:	4a31      	ldr	r2, [pc, #196]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e3de:	4694      	mov	ip, r2
 800e3e0:	4463      	add	r3, ip
 800e3e2:	6859      	ldr	r1, [r3, #4]
 800e3e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3e6:	041a      	lsls	r2, r3, #16
 800e3e8:	683b      	ldr	r3, [r7, #0]
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	00db      	lsls	r3, r3, #3
 800e3ee:	482d      	ldr	r0, [pc, #180]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e3f0:	4684      	mov	ip, r0
 800e3f2:	4463      	add	r3, ip
 800e3f4:	430a      	orrs	r2, r1
 800e3f6:	605a      	str	r2, [r3, #4]
            pmabuffer = ep->pmaaddr1;
 800e3f8:	201a      	movs	r0, #26
 800e3fa:	183b      	adds	r3, r7, r0
 800e3fc:	683a      	ldr	r2, [r7, #0]
 800e3fe:	8952      	ldrh	r2, [r2, #10]
 800e400:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e402:	683b      	ldr	r3, [r7, #0]
 800e404:	6959      	ldr	r1, [r3, #20]
 800e406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e408:	b29c      	uxth	r4, r3
 800e40a:	183b      	adds	r3, r7, r0
 800e40c:	881a      	ldrh	r2, [r3, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	0023      	movs	r3, r4
 800e412:	f000 fe89 	bl	800f128 <USB_WritePMA>
 800e416:	e192      	b.n	800e73e <USB_EPStartXfer+0x95e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	6a1b      	ldr	r3, [r3, #32]
 800e41c:	657b      	str	r3, [r7, #84]	@ 0x54

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	781b      	ldrb	r3, [r3, #0]
 800e424:	009b      	lsls	r3, r3, #2
 800e426:	18d3      	adds	r3, r2, r3
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	4a1f      	ldr	r2, [pc, #124]	@ (800e4a8 <USB_EPStartXfer+0x6c8>)
 800e42c:	4013      	ands	r3, r2
 800e42e:	617b      	str	r3, [r7, #20]
 800e430:	687a      	ldr	r2, [r7, #4]
 800e432:	683b      	ldr	r3, [r7, #0]
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	18d3      	adds	r3, r2, r3
 800e43a:	697a      	ldr	r2, [r7, #20]
 800e43c:	491b      	ldr	r1, [pc, #108]	@ (800e4ac <USB_EPStartXfer+0x6cc>)
 800e43e:	430a      	orrs	r2, r1
 800e440:	601a      	str	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	4a16      	ldr	r2, [pc, #88]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e44a:	4694      	mov	ip, r2
 800e44c:	4463      	add	r3, ip
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	683b      	ldr	r3, [r7, #0]
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	00db      	lsls	r3, r3, #3
 800e456:	4913      	ldr	r1, [pc, #76]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e458:	468c      	mov	ip, r1
 800e45a:	4463      	add	r3, ip
 800e45c:	0412      	lsls	r2, r2, #16
 800e45e:	0c12      	lsrs	r2, r2, #16
 800e460:	601a      	str	r2, [r3, #0]
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	00db      	lsls	r3, r3, #3
 800e468:	4a0e      	ldr	r2, [pc, #56]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e46a:	4694      	mov	ip, r2
 800e46c:	4463      	add	r3, ip
 800e46e:	6819      	ldr	r1, [r3, #0]
 800e470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e472:	041a      	lsls	r2, r3, #16
 800e474:	683b      	ldr	r3, [r7, #0]
 800e476:	781b      	ldrb	r3, [r3, #0]
 800e478:	00db      	lsls	r3, r3, #3
 800e47a:	480a      	ldr	r0, [pc, #40]	@ (800e4a4 <USB_EPStartXfer+0x6c4>)
 800e47c:	4684      	mov	ip, r0
 800e47e:	4463      	add	r3, ip
 800e480:	430a      	orrs	r2, r1
 800e482:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e484:	201a      	movs	r0, #26
 800e486:	183b      	adds	r3, r7, r0
 800e488:	683a      	ldr	r2, [r7, #0]
 800e48a:	8912      	ldrh	r2, [r2, #8]
 800e48c:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e48e:	683b      	ldr	r3, [r7, #0]
 800e490:	6959      	ldr	r1, [r3, #20]
 800e492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e494:	b29c      	uxth	r4, r3
 800e496:	183b      	adds	r3, r7, r0
 800e498:	881a      	ldrh	r2, [r3, #0]
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	0023      	movs	r3, r4
 800e49e:	f000 fe43 	bl	800f128 <USB_WritePMA>
 800e4a2:	e14c      	b.n	800e73e <USB_EPStartXfer+0x95e>
 800e4a4:	40009800 	.word	0x40009800
 800e4a8:	07ff8e8f 	.word	0x07ff8e8f
 800e4ac:	00008080 	.word	0x00008080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	6a1a      	ldr	r2, [r3, #32]
 800e4b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4b6:	1ad2      	subs	r2, r2, r3
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e4bc:	687a      	ldr	r2, [r7, #4]
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
 800e4c2:	009b      	lsls	r3, r3, #2
 800e4c4:	18d3      	adds	r3, r2, r3
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	2240      	movs	r2, #64	@ 0x40
 800e4ca:	4013      	ands	r3, r2
 800e4cc:	d100      	bne.n	800e4d0 <USB_EPStartXfer+0x6f0>
 800e4ce:	e09b      	b.n	800e608 <USB_EPStartXfer+0x828>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	785b      	ldrb	r3, [r3, #1]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d162      	bne.n	800e59e <USB_EPStartXfer+0x7be>
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	781b      	ldrb	r3, [r3, #0]
 800e4dc:	00db      	lsls	r3, r3, #3
 800e4de:	4ad6      	ldr	r2, [pc, #856]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e4e0:	4694      	mov	ip, r2
 800e4e2:	4463      	add	r3, ip
 800e4e4:	685a      	ldr	r2, [r3, #4]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	781b      	ldrb	r3, [r3, #0]
 800e4ea:	00db      	lsls	r3, r3, #3
 800e4ec:	49d2      	ldr	r1, [pc, #840]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e4ee:	468c      	mov	ip, r1
 800e4f0:	4463      	add	r3, ip
 800e4f2:	0192      	lsls	r2, r2, #6
 800e4f4:	0992      	lsrs	r2, r2, #6
 800e4f6:	605a      	str	r2, [r3, #4]
 800e4f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e4fa:	2b3e      	cmp	r3, #62	@ 0x3e
 800e4fc:	d91e      	bls.n	800e53c <USB_EPStartXfer+0x75c>
 800e4fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e500:	095b      	lsrs	r3, r3, #5
 800e502:	643b      	str	r3, [r7, #64]	@ 0x40
 800e504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e506:	221f      	movs	r2, #31
 800e508:	4013      	ands	r3, r2
 800e50a:	d102      	bne.n	800e512 <USB_EPStartXfer+0x732>
 800e50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e50e:	3b01      	subs	r3, #1
 800e510:	643b      	str	r3, [r7, #64]	@ 0x40
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	781b      	ldrb	r3, [r3, #0]
 800e516:	00db      	lsls	r3, r3, #3
 800e518:	4ac7      	ldr	r2, [pc, #796]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e51a:	4694      	mov	ip, r2
 800e51c:	4463      	add	r3, ip
 800e51e:	685a      	ldr	r2, [r3, #4]
 800e520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e522:	069b      	lsls	r3, r3, #26
 800e524:	431a      	orrs	r2, r3
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	49c2      	ldr	r1, [pc, #776]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e52e:	468c      	mov	ip, r1
 800e530:	4463      	add	r3, ip
 800e532:	2180      	movs	r1, #128	@ 0x80
 800e534:	0609      	lsls	r1, r1, #24
 800e536:	430a      	orrs	r2, r1
 800e538:	605a      	str	r2, [r3, #4]
 800e53a:	e055      	b.n	800e5e8 <USB_EPStartXfer+0x808>
 800e53c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d111      	bne.n	800e566 <USB_EPStartXfer+0x786>
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	00db      	lsls	r3, r3, #3
 800e548:	4abb      	ldr	r2, [pc, #748]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e54a:	4694      	mov	ip, r2
 800e54c:	4463      	add	r3, ip
 800e54e:	685a      	ldr	r2, [r3, #4]
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	781b      	ldrb	r3, [r3, #0]
 800e554:	00db      	lsls	r3, r3, #3
 800e556:	49b8      	ldr	r1, [pc, #736]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e558:	468c      	mov	ip, r1
 800e55a:	4463      	add	r3, ip
 800e55c:	2180      	movs	r1, #128	@ 0x80
 800e55e:	0609      	lsls	r1, r1, #24
 800e560:	430a      	orrs	r2, r1
 800e562:	605a      	str	r2, [r3, #4]
 800e564:	e040      	b.n	800e5e8 <USB_EPStartXfer+0x808>
 800e566:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e568:	085b      	lsrs	r3, r3, #1
 800e56a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e56c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e56e:	2201      	movs	r2, #1
 800e570:	4013      	ands	r3, r2
 800e572:	d002      	beq.n	800e57a <USB_EPStartXfer+0x79a>
 800e574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e576:	3301      	adds	r3, #1
 800e578:	643b      	str	r3, [r7, #64]	@ 0x40
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	00db      	lsls	r3, r3, #3
 800e580:	4aad      	ldr	r2, [pc, #692]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e582:	4694      	mov	ip, r2
 800e584:	4463      	add	r3, ip
 800e586:	6859      	ldr	r1, [r3, #4]
 800e588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e58a:	069a      	lsls	r2, r3, #26
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	00db      	lsls	r3, r3, #3
 800e592:	48a9      	ldr	r0, [pc, #676]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e594:	4684      	mov	ip, r0
 800e596:	4463      	add	r3, ip
 800e598:	430a      	orrs	r2, r1
 800e59a:	605a      	str	r2, [r3, #4]
 800e59c:	e024      	b.n	800e5e8 <USB_EPStartXfer+0x808>
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	785b      	ldrb	r3, [r3, #1]
 800e5a2:	2b01      	cmp	r3, #1
 800e5a4:	d120      	bne.n	800e5e8 <USB_EPStartXfer+0x808>
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	00db      	lsls	r3, r3, #3
 800e5ac:	4aa2      	ldr	r2, [pc, #648]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e5ae:	4694      	mov	ip, r2
 800e5b0:	4463      	add	r3, ip
 800e5b2:	685a      	ldr	r2, [r3, #4]
 800e5b4:	683b      	ldr	r3, [r7, #0]
 800e5b6:	781b      	ldrb	r3, [r3, #0]
 800e5b8:	00db      	lsls	r3, r3, #3
 800e5ba:	499f      	ldr	r1, [pc, #636]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e5bc:	468c      	mov	ip, r1
 800e5be:	4463      	add	r3, ip
 800e5c0:	0412      	lsls	r2, r2, #16
 800e5c2:	0c12      	lsrs	r2, r2, #16
 800e5c4:	605a      	str	r2, [r3, #4]
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	00db      	lsls	r3, r3, #3
 800e5cc:	4a9a      	ldr	r2, [pc, #616]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e5ce:	4694      	mov	ip, r2
 800e5d0:	4463      	add	r3, ip
 800e5d2:	6859      	ldr	r1, [r3, #4]
 800e5d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5d6:	041a      	lsls	r2, r3, #16
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	00db      	lsls	r3, r3, #3
 800e5de:	4896      	ldr	r0, [pc, #600]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e5e0:	4684      	mov	ip, r0
 800e5e2:	4463      	add	r3, ip
 800e5e4:	430a      	orrs	r2, r1
 800e5e6:	605a      	str	r2, [r3, #4]
          pmabuffer = ep->pmaaddr1;
 800e5e8:	201a      	movs	r0, #26
 800e5ea:	183b      	adds	r3, r7, r0
 800e5ec:	683a      	ldr	r2, [r7, #0]
 800e5ee:	8952      	ldrh	r2, [r2, #10]
 800e5f0:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	6959      	ldr	r1, [r3, #20]
 800e5f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e5f8:	b29c      	uxth	r4, r3
 800e5fa:	183b      	adds	r3, r7, r0
 800e5fc:	881a      	ldrh	r2, [r3, #0]
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	0023      	movs	r3, r4
 800e602:	f000 fd91 	bl	800f128 <USB_WritePMA>
 800e606:	e09a      	b.n	800e73e <USB_EPStartXfer+0x95e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e608:	683b      	ldr	r3, [r7, #0]
 800e60a:	785b      	ldrb	r3, [r3, #1]
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d162      	bne.n	800e6d6 <USB_EPStartXfer+0x8f6>
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	781b      	ldrb	r3, [r3, #0]
 800e614:	00db      	lsls	r3, r3, #3
 800e616:	4a88      	ldr	r2, [pc, #544]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e618:	4694      	mov	ip, r2
 800e61a:	4463      	add	r3, ip
 800e61c:	681a      	ldr	r2, [r3, #0]
 800e61e:	683b      	ldr	r3, [r7, #0]
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	00db      	lsls	r3, r3, #3
 800e624:	4984      	ldr	r1, [pc, #528]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e626:	468c      	mov	ip, r1
 800e628:	4463      	add	r3, ip
 800e62a:	0192      	lsls	r2, r2, #6
 800e62c:	0992      	lsrs	r2, r2, #6
 800e62e:	601a      	str	r2, [r3, #0]
 800e630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e632:	2b3e      	cmp	r3, #62	@ 0x3e
 800e634:	d91e      	bls.n	800e674 <USB_EPStartXfer+0x894>
 800e636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e638:	095b      	lsrs	r3, r3, #5
 800e63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e63c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e63e:	221f      	movs	r2, #31
 800e640:	4013      	ands	r3, r2
 800e642:	d102      	bne.n	800e64a <USB_EPStartXfer+0x86a>
 800e644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e646:	3b01      	subs	r3, #1
 800e648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	00db      	lsls	r3, r3, #3
 800e650:	4a79      	ldr	r2, [pc, #484]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e652:	4694      	mov	ip, r2
 800e654:	4463      	add	r3, ip
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e65a:	069b      	lsls	r3, r3, #26
 800e65c:	431a      	orrs	r2, r3
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	781b      	ldrb	r3, [r3, #0]
 800e662:	00db      	lsls	r3, r3, #3
 800e664:	4974      	ldr	r1, [pc, #464]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e666:	468c      	mov	ip, r1
 800e668:	4463      	add	r3, ip
 800e66a:	2180      	movs	r1, #128	@ 0x80
 800e66c:	0609      	lsls	r1, r1, #24
 800e66e:	430a      	orrs	r2, r1
 800e670:	601a      	str	r2, [r3, #0]
 800e672:	e055      	b.n	800e720 <USB_EPStartXfer+0x940>
 800e674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e676:	2b00      	cmp	r3, #0
 800e678:	d111      	bne.n	800e69e <USB_EPStartXfer+0x8be>
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	00db      	lsls	r3, r3, #3
 800e680:	4a6d      	ldr	r2, [pc, #436]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e682:	4694      	mov	ip, r2
 800e684:	4463      	add	r3, ip
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	781b      	ldrb	r3, [r3, #0]
 800e68c:	00db      	lsls	r3, r3, #3
 800e68e:	496a      	ldr	r1, [pc, #424]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e690:	468c      	mov	ip, r1
 800e692:	4463      	add	r3, ip
 800e694:	2180      	movs	r1, #128	@ 0x80
 800e696:	0609      	lsls	r1, r1, #24
 800e698:	430a      	orrs	r2, r1
 800e69a:	601a      	str	r2, [r3, #0]
 800e69c:	e040      	b.n	800e720 <USB_EPStartXfer+0x940>
 800e69e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6a0:	085b      	lsrs	r3, r3, #1
 800e6a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e6a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	4013      	ands	r3, r2
 800e6aa:	d002      	beq.n	800e6b2 <USB_EPStartXfer+0x8d2>
 800e6ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e6b2:	683b      	ldr	r3, [r7, #0]
 800e6b4:	781b      	ldrb	r3, [r3, #0]
 800e6b6:	00db      	lsls	r3, r3, #3
 800e6b8:	4a5f      	ldr	r2, [pc, #380]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e6ba:	4694      	mov	ip, r2
 800e6bc:	4463      	add	r3, ip
 800e6be:	6819      	ldr	r1, [r3, #0]
 800e6c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e6c2:	069a      	lsls	r2, r3, #26
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	781b      	ldrb	r3, [r3, #0]
 800e6c8:	00db      	lsls	r3, r3, #3
 800e6ca:	485b      	ldr	r0, [pc, #364]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e6cc:	4684      	mov	ip, r0
 800e6ce:	4463      	add	r3, ip
 800e6d0:	430a      	orrs	r2, r1
 800e6d2:	601a      	str	r2, [r3, #0]
 800e6d4:	e024      	b.n	800e720 <USB_EPStartXfer+0x940>
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	785b      	ldrb	r3, [r3, #1]
 800e6da:	2b01      	cmp	r3, #1
 800e6dc:	d120      	bne.n	800e720 <USB_EPStartXfer+0x940>
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	00db      	lsls	r3, r3, #3
 800e6e4:	4a54      	ldr	r2, [pc, #336]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e6e6:	4694      	mov	ip, r2
 800e6e8:	4463      	add	r3, ip
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	781b      	ldrb	r3, [r3, #0]
 800e6f0:	00db      	lsls	r3, r3, #3
 800e6f2:	4951      	ldr	r1, [pc, #324]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e6f4:	468c      	mov	ip, r1
 800e6f6:	4463      	add	r3, ip
 800e6f8:	0412      	lsls	r2, r2, #16
 800e6fa:	0c12      	lsrs	r2, r2, #16
 800e6fc:	601a      	str	r2, [r3, #0]
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	781b      	ldrb	r3, [r3, #0]
 800e702:	00db      	lsls	r3, r3, #3
 800e704:	4a4c      	ldr	r2, [pc, #304]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e706:	4694      	mov	ip, r2
 800e708:	4463      	add	r3, ip
 800e70a:	6819      	ldr	r1, [r3, #0]
 800e70c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e70e:	041a      	lsls	r2, r3, #16
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	00db      	lsls	r3, r3, #3
 800e716:	4848      	ldr	r0, [pc, #288]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e718:	4684      	mov	ip, r0
 800e71a:	4463      	add	r3, ip
 800e71c:	430a      	orrs	r2, r1
 800e71e:	601a      	str	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e720:	201a      	movs	r0, #26
 800e722:	183b      	adds	r3, r7, r0
 800e724:	683a      	ldr	r2, [r7, #0]
 800e726:	8912      	ldrh	r2, [r2, #8]
 800e728:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e72a:	683b      	ldr	r3, [r7, #0]
 800e72c:	6959      	ldr	r1, [r3, #20]
 800e72e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e730:	b29c      	uxth	r4, r3
 800e732:	183b      	adds	r3, r7, r0
 800e734:	881a      	ldrh	r2, [r3, #0]
 800e736:	6878      	ldr	r0, [r7, #4]
 800e738:	0023      	movs	r3, r4
 800e73a:	f000 fcf5 	bl	800f128 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	683b      	ldr	r3, [r7, #0]
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	009b      	lsls	r3, r3, #2
 800e746:	18d3      	adds	r3, r2, r3
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	4a3c      	ldr	r2, [pc, #240]	@ (800e83c <USB_EPStartXfer+0xa5c>)
 800e74c:	4013      	ands	r3, r2
 800e74e:	60fb      	str	r3, [r7, #12]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	2210      	movs	r2, #16
 800e754:	4053      	eors	r3, r2
 800e756:	60fb      	str	r3, [r7, #12]
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2220      	movs	r2, #32
 800e75c:	4053      	eors	r3, r2
 800e75e:	60fb      	str	r3, [r7, #12]
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	009b      	lsls	r3, r3, #2
 800e768:	18d3      	adds	r3, r2, r3
 800e76a:	68fa      	ldr	r2, [r7, #12]
 800e76c:	4934      	ldr	r1, [pc, #208]	@ (800e840 <USB_EPStartXfer+0xa60>)
 800e76e:	430a      	orrs	r2, r1
 800e770:	601a      	str	r2, [r3, #0]
 800e772:	e340      	b.n	800edf6 <USB_EPStartXfer+0x1016>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	7b1b      	ldrb	r3, [r3, #12]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d000      	beq.n	800e77e <USB_EPStartXfer+0x99e>
 800e77c:	e07e      	b.n	800e87c <USB_EPStartXfer+0xa9c>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	699a      	ldr	r2, [r3, #24]
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	691b      	ldr	r3, [r3, #16]
 800e786:	429a      	cmp	r2, r3
 800e788:	d909      	bls.n	800e79e <USB_EPStartXfer+0x9be>
      {
        len = ep->maxpacket;
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	691b      	ldr	r3, [r3, #16]
 800e78e:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len -= len;
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	699a      	ldr	r2, [r3, #24]
 800e794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e796:	1ad2      	subs	r2, r2, r3
 800e798:	683b      	ldr	r3, [r7, #0]
 800e79a:	619a      	str	r2, [r3, #24]
 800e79c:	e005      	b.n	800e7aa <USB_EPStartXfer+0x9ca>
      }
      else
      {
        len = ep->xfer_len;
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	699b      	ldr	r3, [r3, #24]
 800e7a2:	657b      	str	r3, [r7, #84]	@ 0x54
        ep->xfer_len = 0U;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e7aa:	683b      	ldr	r3, [r7, #0]
 800e7ac:	781b      	ldrb	r3, [r3, #0]
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	4a21      	ldr	r2, [pc, #132]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e7b2:	4694      	mov	ip, r2
 800e7b4:	4463      	add	r3, ip
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	00db      	lsls	r3, r3, #3
 800e7be:	491e      	ldr	r1, [pc, #120]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e7c0:	468c      	mov	ip, r1
 800e7c2:	4463      	add	r3, ip
 800e7c4:	0192      	lsls	r2, r2, #6
 800e7c6:	0992      	lsrs	r2, r2, #6
 800e7c8:	605a      	str	r2, [r3, #4]
 800e7ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7cc:	2b3e      	cmp	r3, #62	@ 0x3e
 800e7ce:	d91e      	bls.n	800e80e <USB_EPStartXfer+0xa2e>
 800e7d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7d2:	095b      	lsrs	r3, r3, #5
 800e7d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7d8:	221f      	movs	r2, #31
 800e7da:	4013      	ands	r3, r2
 800e7dc:	d102      	bne.n	800e7e4 <USB_EPStartXfer+0xa04>
 800e7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e0:	3b01      	subs	r3, #1
 800e7e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	00db      	lsls	r3, r3, #3
 800e7ea:	4a13      	ldr	r2, [pc, #76]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e7ec:	4694      	mov	ip, r2
 800e7ee:	4463      	add	r3, ip
 800e7f0:	685a      	ldr	r2, [r3, #4]
 800e7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f4:	069b      	lsls	r3, r3, #26
 800e7f6:	431a      	orrs	r2, r3
 800e7f8:	683b      	ldr	r3, [r7, #0]
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	00db      	lsls	r3, r3, #3
 800e7fe:	490e      	ldr	r1, [pc, #56]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e800:	468c      	mov	ip, r1
 800e802:	4463      	add	r3, ip
 800e804:	2180      	movs	r1, #128	@ 0x80
 800e806:	0609      	lsls	r1, r1, #24
 800e808:	430a      	orrs	r2, r1
 800e80a:	605a      	str	r2, [r3, #4]
 800e80c:	e2d7      	b.n	800edbe <USB_EPStartXfer+0xfde>
 800e80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e810:	2b00      	cmp	r3, #0
 800e812:	d117      	bne.n	800e844 <USB_EPStartXfer+0xa64>
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	4a07      	ldr	r2, [pc, #28]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e81c:	4694      	mov	ip, r2
 800e81e:	4463      	add	r3, ip
 800e820:	685a      	ldr	r2, [r3, #4]
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	00db      	lsls	r3, r3, #3
 800e828:	4903      	ldr	r1, [pc, #12]	@ (800e838 <USB_EPStartXfer+0xa58>)
 800e82a:	468c      	mov	ip, r1
 800e82c:	4463      	add	r3, ip
 800e82e:	2180      	movs	r1, #128	@ 0x80
 800e830:	0609      	lsls	r1, r1, #24
 800e832:	430a      	orrs	r2, r1
 800e834:	605a      	str	r2, [r3, #4]
 800e836:	e2c2      	b.n	800edbe <USB_EPStartXfer+0xfde>
 800e838:	40009800 	.word	0x40009800
 800e83c:	07ff8fbf 	.word	0x07ff8fbf
 800e840:	00008080 	.word	0x00008080
 800e844:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e846:	085b      	lsrs	r3, r3, #1
 800e848:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e84a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e84c:	2201      	movs	r2, #1
 800e84e:	4013      	ands	r3, r2
 800e850:	d002      	beq.n	800e858 <USB_EPStartXfer+0xa78>
 800e852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e854:	3301      	adds	r3, #1
 800e856:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	00db      	lsls	r3, r3, #3
 800e85e:	4ac4      	ldr	r2, [pc, #784]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e860:	4694      	mov	ip, r2
 800e862:	4463      	add	r3, ip
 800e864:	6859      	ldr	r1, [r3, #4]
 800e866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e868:	069a      	lsls	r2, r3, #26
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	00db      	lsls	r3, r3, #3
 800e870:	48bf      	ldr	r0, [pc, #764]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e872:	4684      	mov	ip, r0
 800e874:	4463      	add	r3, ip
 800e876:	430a      	orrs	r2, r1
 800e878:	605a      	str	r2, [r3, #4]
 800e87a:	e2a0      	b.n	800edbe <USB_EPStartXfer+0xfde>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	78db      	ldrb	r3, [r3, #3]
 800e880:	2b02      	cmp	r3, #2
 800e882:	d000      	beq.n	800e886 <USB_EPStartXfer+0xaa6>
 800e884:	e15f      	b.n	800eb46 <USB_EPStartXfer+0xd66>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800e886:	683b      	ldr	r3, [r7, #0]
 800e888:	785b      	ldrb	r3, [r3, #1]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d168      	bne.n	800e960 <USB_EPStartXfer+0xb80>
 800e88e:	683b      	ldr	r3, [r7, #0]
 800e890:	781b      	ldrb	r3, [r3, #0]
 800e892:	00db      	lsls	r3, r3, #3
 800e894:	4ab6      	ldr	r2, [pc, #728]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e896:	4694      	mov	ip, r2
 800e898:	4463      	add	r3, ip
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	781b      	ldrb	r3, [r3, #0]
 800e8a0:	00db      	lsls	r3, r3, #3
 800e8a2:	49b3      	ldr	r1, [pc, #716]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e8a4:	468c      	mov	ip, r1
 800e8a6:	4463      	add	r3, ip
 800e8a8:	0192      	lsls	r2, r2, #6
 800e8aa:	0992      	lsrs	r2, r2, #6
 800e8ac:	601a      	str	r2, [r3, #0]
 800e8ae:	683b      	ldr	r3, [r7, #0]
 800e8b0:	691b      	ldr	r3, [r3, #16]
 800e8b2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e8b4:	d920      	bls.n	800e8f8 <USB_EPStartXfer+0xb18>
 800e8b6:	683b      	ldr	r3, [r7, #0]
 800e8b8:	691b      	ldr	r3, [r3, #16]
 800e8ba:	095b      	lsrs	r3, r3, #5
 800e8bc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8be:	683b      	ldr	r3, [r7, #0]
 800e8c0:	691b      	ldr	r3, [r3, #16]
 800e8c2:	221f      	movs	r2, #31
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	d102      	bne.n	800e8ce <USB_EPStartXfer+0xaee>
 800e8c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	781b      	ldrb	r3, [r3, #0]
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	4aa6      	ldr	r2, [pc, #664]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e8d6:	4694      	mov	ip, r2
 800e8d8:	4463      	add	r3, ip
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8de:	069b      	lsls	r3, r3, #26
 800e8e0:	431a      	orrs	r2, r3
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	781b      	ldrb	r3, [r3, #0]
 800e8e6:	00db      	lsls	r3, r3, #3
 800e8e8:	49a1      	ldr	r1, [pc, #644]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e8ea:	468c      	mov	ip, r1
 800e8ec:	4463      	add	r3, ip
 800e8ee:	2180      	movs	r1, #128	@ 0x80
 800e8f0:	0609      	lsls	r1, r1, #24
 800e8f2:	430a      	orrs	r2, r1
 800e8f4:	601a      	str	r2, [r3, #0]
 800e8f6:	e059      	b.n	800e9ac <USB_EPStartXfer+0xbcc>
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	691b      	ldr	r3, [r3, #16]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d111      	bne.n	800e924 <USB_EPStartXfer+0xb44>
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	00db      	lsls	r3, r3, #3
 800e906:	4a9a      	ldr	r2, [pc, #616]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e908:	4694      	mov	ip, r2
 800e90a:	4463      	add	r3, ip
 800e90c:	681a      	ldr	r2, [r3, #0]
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	00db      	lsls	r3, r3, #3
 800e914:	4996      	ldr	r1, [pc, #600]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e916:	468c      	mov	ip, r1
 800e918:	4463      	add	r3, ip
 800e91a:	2180      	movs	r1, #128	@ 0x80
 800e91c:	0609      	lsls	r1, r1, #24
 800e91e:	430a      	orrs	r2, r1
 800e920:	601a      	str	r2, [r3, #0]
 800e922:	e043      	b.n	800e9ac <USB_EPStartXfer+0xbcc>
 800e924:	683b      	ldr	r3, [r7, #0]
 800e926:	691b      	ldr	r3, [r3, #16]
 800e928:	085b      	lsrs	r3, r3, #1
 800e92a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e92c:	683b      	ldr	r3, [r7, #0]
 800e92e:	691b      	ldr	r3, [r3, #16]
 800e930:	2201      	movs	r2, #1
 800e932:	4013      	ands	r3, r2
 800e934:	d002      	beq.n	800e93c <USB_EPStartXfer+0xb5c>
 800e936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e938:	3301      	adds	r3, #1
 800e93a:	637b      	str	r3, [r7, #52]	@ 0x34
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	781b      	ldrb	r3, [r3, #0]
 800e940:	00db      	lsls	r3, r3, #3
 800e942:	4a8b      	ldr	r2, [pc, #556]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e944:	4694      	mov	ip, r2
 800e946:	4463      	add	r3, ip
 800e948:	6819      	ldr	r1, [r3, #0]
 800e94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e94c:	069a      	lsls	r2, r3, #26
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	00db      	lsls	r3, r3, #3
 800e954:	4886      	ldr	r0, [pc, #536]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e956:	4684      	mov	ip, r0
 800e958:	4463      	add	r3, ip
 800e95a:	430a      	orrs	r2, r1
 800e95c:	601a      	str	r2, [r3, #0]
 800e95e:	e025      	b.n	800e9ac <USB_EPStartXfer+0xbcc>
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	785b      	ldrb	r3, [r3, #1]
 800e964:	2b01      	cmp	r3, #1
 800e966:	d121      	bne.n	800e9ac <USB_EPStartXfer+0xbcc>
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	00db      	lsls	r3, r3, #3
 800e96e:	4a80      	ldr	r2, [pc, #512]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e970:	4694      	mov	ip, r2
 800e972:	4463      	add	r3, ip
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	00db      	lsls	r3, r3, #3
 800e97c:	497c      	ldr	r1, [pc, #496]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e97e:	468c      	mov	ip, r1
 800e980:	4463      	add	r3, ip
 800e982:	0412      	lsls	r2, r2, #16
 800e984:	0c12      	lsrs	r2, r2, #16
 800e986:	601a      	str	r2, [r3, #0]
 800e988:	683b      	ldr	r3, [r7, #0]
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	00db      	lsls	r3, r3, #3
 800e98e:	4a78      	ldr	r2, [pc, #480]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e990:	4694      	mov	ip, r2
 800e992:	4463      	add	r3, ip
 800e994:	6819      	ldr	r1, [r3, #0]
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	691b      	ldr	r3, [r3, #16]
 800e99a:	041a      	lsls	r2, r3, #16
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	00db      	lsls	r3, r3, #3
 800e9a2:	4873      	ldr	r0, [pc, #460]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e9a4:	4684      	mov	ip, r0
 800e9a6:	4463      	add	r3, ip
 800e9a8:	430a      	orrs	r2, r1
 800e9aa:	601a      	str	r2, [r3, #0]
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	785b      	ldrb	r3, [r3, #1]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d168      	bne.n	800ea86 <USB_EPStartXfer+0xca6>
 800e9b4:	683b      	ldr	r3, [r7, #0]
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	00db      	lsls	r3, r3, #3
 800e9ba:	4a6d      	ldr	r2, [pc, #436]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e9bc:	4694      	mov	ip, r2
 800e9be:	4463      	add	r3, ip
 800e9c0:	685a      	ldr	r2, [r3, #4]
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	00db      	lsls	r3, r3, #3
 800e9c8:	4969      	ldr	r1, [pc, #420]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e9ca:	468c      	mov	ip, r1
 800e9cc:	4463      	add	r3, ip
 800e9ce:	0192      	lsls	r2, r2, #6
 800e9d0:	0992      	lsrs	r2, r2, #6
 800e9d2:	605a      	str	r2, [r3, #4]
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	691b      	ldr	r3, [r3, #16]
 800e9d8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e9da:	d920      	bls.n	800ea1e <USB_EPStartXfer+0xc3e>
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	691b      	ldr	r3, [r3, #16]
 800e9e0:	095b      	lsrs	r3, r3, #5
 800e9e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9e4:	683b      	ldr	r3, [r7, #0]
 800e9e6:	691b      	ldr	r3, [r3, #16]
 800e9e8:	221f      	movs	r2, #31
 800e9ea:	4013      	ands	r3, r2
 800e9ec:	d102      	bne.n	800e9f4 <USB_EPStartXfer+0xc14>
 800e9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	633b      	str	r3, [r7, #48]	@ 0x30
 800e9f4:	683b      	ldr	r3, [r7, #0]
 800e9f6:	781b      	ldrb	r3, [r3, #0]
 800e9f8:	00db      	lsls	r3, r3, #3
 800e9fa:	4a5d      	ldr	r2, [pc, #372]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800e9fc:	4694      	mov	ip, r2
 800e9fe:	4463      	add	r3, ip
 800ea00:	685a      	ldr	r2, [r3, #4]
 800ea02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea04:	069b      	lsls	r3, r3, #26
 800ea06:	431a      	orrs	r2, r3
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	00db      	lsls	r3, r3, #3
 800ea0e:	4958      	ldr	r1, [pc, #352]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800ea10:	468c      	mov	ip, r1
 800ea12:	4463      	add	r3, ip
 800ea14:	2180      	movs	r1, #128	@ 0x80
 800ea16:	0609      	lsls	r1, r1, #24
 800ea18:	430a      	orrs	r2, r1
 800ea1a:	605a      	str	r2, [r3, #4]
 800ea1c:	e059      	b.n	800ead2 <USB_EPStartXfer+0xcf2>
 800ea1e:	683b      	ldr	r3, [r7, #0]
 800ea20:	691b      	ldr	r3, [r3, #16]
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d111      	bne.n	800ea4a <USB_EPStartXfer+0xc6a>
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	781b      	ldrb	r3, [r3, #0]
 800ea2a:	00db      	lsls	r3, r3, #3
 800ea2c:	4a50      	ldr	r2, [pc, #320]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800ea2e:	4694      	mov	ip, r2
 800ea30:	4463      	add	r3, ip
 800ea32:	685a      	ldr	r2, [r3, #4]
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	00db      	lsls	r3, r3, #3
 800ea3a:	494d      	ldr	r1, [pc, #308]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800ea3c:	468c      	mov	ip, r1
 800ea3e:	4463      	add	r3, ip
 800ea40:	2180      	movs	r1, #128	@ 0x80
 800ea42:	0609      	lsls	r1, r1, #24
 800ea44:	430a      	orrs	r2, r1
 800ea46:	605a      	str	r2, [r3, #4]
 800ea48:	e043      	b.n	800ead2 <USB_EPStartXfer+0xcf2>
 800ea4a:	683b      	ldr	r3, [r7, #0]
 800ea4c:	691b      	ldr	r3, [r3, #16]
 800ea4e:	085b      	lsrs	r3, r3, #1
 800ea50:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	2201      	movs	r2, #1
 800ea58:	4013      	ands	r3, r2
 800ea5a:	d002      	beq.n	800ea62 <USB_EPStartXfer+0xc82>
 800ea5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea5e:	3301      	adds	r3, #1
 800ea60:	633b      	str	r3, [r7, #48]	@ 0x30
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	00db      	lsls	r3, r3, #3
 800ea68:	4a41      	ldr	r2, [pc, #260]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800ea6a:	4694      	mov	ip, r2
 800ea6c:	4463      	add	r3, ip
 800ea6e:	6859      	ldr	r1, [r3, #4]
 800ea70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea72:	069a      	lsls	r2, r3, #26
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	00db      	lsls	r3, r3, #3
 800ea7a:	483d      	ldr	r0, [pc, #244]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800ea7c:	4684      	mov	ip, r0
 800ea7e:	4463      	add	r3, ip
 800ea80:	430a      	orrs	r2, r1
 800ea82:	605a      	str	r2, [r3, #4]
 800ea84:	e025      	b.n	800ead2 <USB_EPStartXfer+0xcf2>
 800ea86:	683b      	ldr	r3, [r7, #0]
 800ea88:	785b      	ldrb	r3, [r3, #1]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d121      	bne.n	800ead2 <USB_EPStartXfer+0xcf2>
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	781b      	ldrb	r3, [r3, #0]
 800ea92:	00db      	lsls	r3, r3, #3
 800ea94:	4a36      	ldr	r2, [pc, #216]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800ea96:	4694      	mov	ip, r2
 800ea98:	4463      	add	r3, ip
 800ea9a:	685a      	ldr	r2, [r3, #4]
 800ea9c:	683b      	ldr	r3, [r7, #0]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	00db      	lsls	r3, r3, #3
 800eaa2:	4933      	ldr	r1, [pc, #204]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800eaa4:	468c      	mov	ip, r1
 800eaa6:	4463      	add	r3, ip
 800eaa8:	0412      	lsls	r2, r2, #16
 800eaaa:	0c12      	lsrs	r2, r2, #16
 800eaac:	605a      	str	r2, [r3, #4]
 800eaae:	683b      	ldr	r3, [r7, #0]
 800eab0:	781b      	ldrb	r3, [r3, #0]
 800eab2:	00db      	lsls	r3, r3, #3
 800eab4:	4a2e      	ldr	r2, [pc, #184]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800eab6:	4694      	mov	ip, r2
 800eab8:	4463      	add	r3, ip
 800eaba:	6859      	ldr	r1, [r3, #4]
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	691b      	ldr	r3, [r3, #16]
 800eac0:	041a      	lsls	r2, r3, #16
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	781b      	ldrb	r3, [r3, #0]
 800eac6:	00db      	lsls	r3, r3, #3
 800eac8:	4829      	ldr	r0, [pc, #164]	@ (800eb70 <USB_EPStartXfer+0xd90>)
 800eaca:	4684      	mov	ip, r0
 800eacc:	4463      	add	r3, ip
 800eace:	430a      	orrs	r2, r1
 800ead0:	605a      	str	r2, [r3, #4]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ead2:	683b      	ldr	r3, [r7, #0]
 800ead4:	69db      	ldr	r3, [r3, #28]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d100      	bne.n	800eadc <USB_EPStartXfer+0xcfc>
 800eada:	e170      	b.n	800edbe <USB_EPStartXfer+0xfde>
        {
          /* update last value to check if there is blocking state */
          wEPVal = (uint16_t)PCD_GET_ENDPOINT(USBx, ep->num);
 800eadc:	687a      	ldr	r2, [r7, #4]
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	781b      	ldrb	r3, [r3, #0]
 800eae2:	009b      	lsls	r3, r3, #2
 800eae4:	18d3      	adds	r3, r2, r3
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	2126      	movs	r1, #38	@ 0x26
 800eaea:	187b      	adds	r3, r7, r1
 800eaec:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800eaee:	187b      	adds	r3, r7, r1
 800eaf0:	881a      	ldrh	r2, [r3, #0]
 800eaf2:	2380      	movs	r3, #128	@ 0x80
 800eaf4:	01db      	lsls	r3, r3, #7
 800eaf6:	4013      	ands	r3, r2
 800eaf8:	d004      	beq.n	800eb04 <USB_EPStartXfer+0xd24>
 800eafa:	187b      	adds	r3, r7, r1
 800eafc:	881b      	ldrh	r3, [r3, #0]
 800eafe:	2240      	movs	r2, #64	@ 0x40
 800eb00:	4013      	ands	r3, r2
 800eb02:	d10d      	bne.n	800eb20 <USB_EPStartXfer+0xd40>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800eb04:	2126      	movs	r1, #38	@ 0x26
 800eb06:	187b      	adds	r3, r7, r1
 800eb08:	881a      	ldrh	r2, [r3, #0]
 800eb0a:	2380      	movs	r3, #128	@ 0x80
 800eb0c:	01db      	lsls	r3, r3, #7
 800eb0e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800eb10:	d000      	beq.n	800eb14 <USB_EPStartXfer+0xd34>
 800eb12:	e154      	b.n	800edbe <USB_EPStartXfer+0xfde>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800eb14:	187b      	adds	r3, r7, r1
 800eb16:	881b      	ldrh	r3, [r3, #0]
 800eb18:	2240      	movs	r2, #64	@ 0x40
 800eb1a:	4013      	ands	r3, r2
 800eb1c:	d000      	beq.n	800eb20 <USB_EPStartXfer+0xd40>
 800eb1e:	e14e      	b.n	800edbe <USB_EPStartXfer+0xfde>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800eb20:	687a      	ldr	r2, [r7, #4]
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	009b      	lsls	r3, r3, #2
 800eb28:	18d3      	adds	r3, r2, r3
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	4a11      	ldr	r2, [pc, #68]	@ (800eb74 <USB_EPStartXfer+0xd94>)
 800eb2e:	4013      	ands	r3, r2
 800eb30:	623b      	str	r3, [r7, #32]
 800eb32:	687a      	ldr	r2, [r7, #4]
 800eb34:	683b      	ldr	r3, [r7, #0]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	18d3      	adds	r3, r2, r3
 800eb3c:	6a3a      	ldr	r2, [r7, #32]
 800eb3e:	490e      	ldr	r1, [pc, #56]	@ (800eb78 <USB_EPStartXfer+0xd98>)
 800eb40:	430a      	orrs	r2, r1
 800eb42:	601a      	str	r2, [r3, #0]
 800eb44:	e13b      	b.n	800edbe <USB_EPStartXfer+0xfde>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800eb46:	683b      	ldr	r3, [r7, #0]
 800eb48:	78db      	ldrb	r3, [r3, #3]
 800eb4a:	2b01      	cmp	r3, #1
 800eb4c:	d000      	beq.n	800eb50 <USB_EPStartXfer+0xd70>
 800eb4e:	e134      	b.n	800edba <USB_EPStartXfer+0xfda>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	699a      	ldr	r2, [r3, #24]
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	691b      	ldr	r3, [r3, #16]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d90f      	bls.n	800eb7c <USB_EPStartXfer+0xd9c>
        {
          len = ep->maxpacket;
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	691b      	ldr	r3, [r3, #16]
 800eb60:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len -= len;
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	699a      	ldr	r2, [r3, #24]
 800eb66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eb68:	1ad2      	subs	r2, r2, r3
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	619a      	str	r2, [r3, #24]
 800eb6e:	e00b      	b.n	800eb88 <USB_EPStartXfer+0xda8>
 800eb70:	40009800 	.word	0x40009800
 800eb74:	07ff8f8f 	.word	0x07ff8f8f
 800eb78:	000080c0 	.word	0x000080c0
        }
        else
        {
          len = ep->xfer_len;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	699b      	ldr	r3, [r3, #24]
 800eb80:	657b      	str	r3, [r7, #84]	@ 0x54
          ep->xfer_len = 0U;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2200      	movs	r2, #0
 800eb86:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	785b      	ldrb	r3, [r3, #1]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d162      	bne.n	800ec56 <USB_EPStartXfer+0xe76>
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	00db      	lsls	r3, r3, #3
 800eb96:	4a9a      	ldr	r2, [pc, #616]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800eb98:	4694      	mov	ip, r2
 800eb9a:	4463      	add	r3, ip
 800eb9c:	681a      	ldr	r2, [r3, #0]
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	00db      	lsls	r3, r3, #3
 800eba4:	4996      	ldr	r1, [pc, #600]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800eba6:	468c      	mov	ip, r1
 800eba8:	4463      	add	r3, ip
 800ebaa:	0192      	lsls	r2, r2, #6
 800ebac:	0992      	lsrs	r2, r2, #6
 800ebae:	601a      	str	r2, [r3, #0]
 800ebb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb2:	2b3e      	cmp	r3, #62	@ 0x3e
 800ebb4:	d91e      	bls.n	800ebf4 <USB_EPStartXfer+0xe14>
 800ebb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebb8:	095b      	lsrs	r3, r3, #5
 800ebba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ebbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebbe:	221f      	movs	r2, #31
 800ebc0:	4013      	ands	r3, r2
 800ebc2:	d102      	bne.n	800ebca <USB_EPStartXfer+0xdea>
 800ebc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebc6:	3b01      	subs	r3, #1
 800ebc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ebca:	683b      	ldr	r3, [r7, #0]
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	00db      	lsls	r3, r3, #3
 800ebd0:	4a8b      	ldr	r2, [pc, #556]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ebd2:	4694      	mov	ip, r2
 800ebd4:	4463      	add	r3, ip
 800ebd6:	681a      	ldr	r2, [r3, #0]
 800ebd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ebda:	069b      	lsls	r3, r3, #26
 800ebdc:	431a      	orrs	r2, r3
 800ebde:	683b      	ldr	r3, [r7, #0]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	00db      	lsls	r3, r3, #3
 800ebe4:	4986      	ldr	r1, [pc, #536]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ebe6:	468c      	mov	ip, r1
 800ebe8:	4463      	add	r3, ip
 800ebea:	2180      	movs	r1, #128	@ 0x80
 800ebec:	0609      	lsls	r1, r1, #24
 800ebee:	430a      	orrs	r2, r1
 800ebf0:	601a      	str	r2, [r3, #0]
 800ebf2:	e055      	b.n	800eca0 <USB_EPStartXfer+0xec0>
 800ebf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d111      	bne.n	800ec1e <USB_EPStartXfer+0xe3e>
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	781b      	ldrb	r3, [r3, #0]
 800ebfe:	00db      	lsls	r3, r3, #3
 800ec00:	4a7f      	ldr	r2, [pc, #508]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ec02:	4694      	mov	ip, r2
 800ec04:	4463      	add	r3, ip
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	00db      	lsls	r3, r3, #3
 800ec0e:	497c      	ldr	r1, [pc, #496]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ec10:	468c      	mov	ip, r1
 800ec12:	4463      	add	r3, ip
 800ec14:	2180      	movs	r1, #128	@ 0x80
 800ec16:	0609      	lsls	r1, r1, #24
 800ec18:	430a      	orrs	r2, r1
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	e040      	b.n	800eca0 <USB_EPStartXfer+0xec0>
 800ec1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec20:	085b      	lsrs	r3, r3, #1
 800ec22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec26:	2201      	movs	r2, #1
 800ec28:	4013      	ands	r3, r2
 800ec2a:	d002      	beq.n	800ec32 <USB_EPStartXfer+0xe52>
 800ec2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec2e:	3301      	adds	r3, #1
 800ec30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	4a71      	ldr	r2, [pc, #452]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ec3a:	4694      	mov	ip, r2
 800ec3c:	4463      	add	r3, ip
 800ec3e:	6819      	ldr	r1, [r3, #0]
 800ec40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ec42:	069a      	lsls	r2, r3, #26
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	00db      	lsls	r3, r3, #3
 800ec4a:	486d      	ldr	r0, [pc, #436]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ec4c:	4684      	mov	ip, r0
 800ec4e:	4463      	add	r3, ip
 800ec50:	430a      	orrs	r2, r1
 800ec52:	601a      	str	r2, [r3, #0]
 800ec54:	e024      	b.n	800eca0 <USB_EPStartXfer+0xec0>
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	785b      	ldrb	r3, [r3, #1]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d120      	bne.n	800eca0 <USB_EPStartXfer+0xec0>
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	00db      	lsls	r3, r3, #3
 800ec64:	4a66      	ldr	r2, [pc, #408]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ec66:	4694      	mov	ip, r2
 800ec68:	4463      	add	r3, ip
 800ec6a:	681a      	ldr	r2, [r3, #0]
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	781b      	ldrb	r3, [r3, #0]
 800ec70:	00db      	lsls	r3, r3, #3
 800ec72:	4963      	ldr	r1, [pc, #396]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ec74:	468c      	mov	ip, r1
 800ec76:	4463      	add	r3, ip
 800ec78:	0412      	lsls	r2, r2, #16
 800ec7a:	0c12      	lsrs	r2, r2, #16
 800ec7c:	601a      	str	r2, [r3, #0]
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	4a5e      	ldr	r2, [pc, #376]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ec86:	4694      	mov	ip, r2
 800ec88:	4463      	add	r3, ip
 800ec8a:	6819      	ldr	r1, [r3, #0]
 800ec8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec8e:	041a      	lsls	r2, r3, #16
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	781b      	ldrb	r3, [r3, #0]
 800ec94:	00db      	lsls	r3, r3, #3
 800ec96:	485a      	ldr	r0, [pc, #360]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ec98:	4684      	mov	ip, r0
 800ec9a:	4463      	add	r3, ip
 800ec9c:	430a      	orrs	r2, r1
 800ec9e:	601a      	str	r2, [r3, #0]
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	785b      	ldrb	r3, [r3, #1]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d162      	bne.n	800ed6e <USB_EPStartXfer+0xf8e>
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	781b      	ldrb	r3, [r3, #0]
 800ecac:	00db      	lsls	r3, r3, #3
 800ecae:	4a54      	ldr	r2, [pc, #336]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ecb0:	4694      	mov	ip, r2
 800ecb2:	4463      	add	r3, ip
 800ecb4:	685a      	ldr	r2, [r3, #4]
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	00db      	lsls	r3, r3, #3
 800ecbc:	4950      	ldr	r1, [pc, #320]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ecbe:	468c      	mov	ip, r1
 800ecc0:	4463      	add	r3, ip
 800ecc2:	0192      	lsls	r2, r2, #6
 800ecc4:	0992      	lsrs	r2, r2, #6
 800ecc6:	605a      	str	r2, [r3, #4]
 800ecc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecca:	2b3e      	cmp	r3, #62	@ 0x3e
 800eccc:	d91e      	bls.n	800ed0c <USB_EPStartXfer+0xf2c>
 800ecce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd0:	095b      	lsrs	r3, r3, #5
 800ecd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ecd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecd6:	221f      	movs	r2, #31
 800ecd8:	4013      	ands	r3, r2
 800ecda:	d102      	bne.n	800ece2 <USB_EPStartXfer+0xf02>
 800ecdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecde:	3b01      	subs	r3, #1
 800ece0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	781b      	ldrb	r3, [r3, #0]
 800ece6:	00db      	lsls	r3, r3, #3
 800ece8:	4a45      	ldr	r2, [pc, #276]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ecea:	4694      	mov	ip, r2
 800ecec:	4463      	add	r3, ip
 800ecee:	685a      	ldr	r2, [r3, #4]
 800ecf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf2:	069b      	lsls	r3, r3, #26
 800ecf4:	431a      	orrs	r2, r3
 800ecf6:	683b      	ldr	r3, [r7, #0]
 800ecf8:	781b      	ldrb	r3, [r3, #0]
 800ecfa:	00db      	lsls	r3, r3, #3
 800ecfc:	4940      	ldr	r1, [pc, #256]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ecfe:	468c      	mov	ip, r1
 800ed00:	4463      	add	r3, ip
 800ed02:	2180      	movs	r1, #128	@ 0x80
 800ed04:	0609      	lsls	r1, r1, #24
 800ed06:	430a      	orrs	r2, r1
 800ed08:	605a      	str	r2, [r3, #4]
 800ed0a:	e058      	b.n	800edbe <USB_EPStartXfer+0xfde>
 800ed0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d111      	bne.n	800ed36 <USB_EPStartXfer+0xf56>
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	00db      	lsls	r3, r3, #3
 800ed18:	4a39      	ldr	r2, [pc, #228]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ed1a:	4694      	mov	ip, r2
 800ed1c:	4463      	add	r3, ip
 800ed1e:	685a      	ldr	r2, [r3, #4]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	00db      	lsls	r3, r3, #3
 800ed26:	4936      	ldr	r1, [pc, #216]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ed28:	468c      	mov	ip, r1
 800ed2a:	4463      	add	r3, ip
 800ed2c:	2180      	movs	r1, #128	@ 0x80
 800ed2e:	0609      	lsls	r1, r1, #24
 800ed30:	430a      	orrs	r2, r1
 800ed32:	605a      	str	r2, [r3, #4]
 800ed34:	e043      	b.n	800edbe <USB_EPStartXfer+0xfde>
 800ed36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed38:	085b      	lsrs	r3, r3, #1
 800ed3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ed3e:	2201      	movs	r2, #1
 800ed40:	4013      	ands	r3, r2
 800ed42:	d002      	beq.n	800ed4a <USB_EPStartXfer+0xf6a>
 800ed44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed46:	3301      	adds	r3, #1
 800ed48:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ed4a:	683b      	ldr	r3, [r7, #0]
 800ed4c:	781b      	ldrb	r3, [r3, #0]
 800ed4e:	00db      	lsls	r3, r3, #3
 800ed50:	4a2b      	ldr	r2, [pc, #172]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ed52:	4694      	mov	ip, r2
 800ed54:	4463      	add	r3, ip
 800ed56:	6859      	ldr	r1, [r3, #4]
 800ed58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed5a:	069a      	lsls	r2, r3, #26
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	781b      	ldrb	r3, [r3, #0]
 800ed60:	00db      	lsls	r3, r3, #3
 800ed62:	4827      	ldr	r0, [pc, #156]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ed64:	4684      	mov	ip, r0
 800ed66:	4463      	add	r3, ip
 800ed68:	430a      	orrs	r2, r1
 800ed6a:	605a      	str	r2, [r3, #4]
 800ed6c:	e027      	b.n	800edbe <USB_EPStartXfer+0xfde>
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	785b      	ldrb	r3, [r3, #1]
 800ed72:	2b01      	cmp	r3, #1
 800ed74:	d123      	bne.n	800edbe <USB_EPStartXfer+0xfde>
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	781b      	ldrb	r3, [r3, #0]
 800ed7a:	00db      	lsls	r3, r3, #3
 800ed7c:	4a20      	ldr	r2, [pc, #128]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ed7e:	4694      	mov	ip, r2
 800ed80:	4463      	add	r3, ip
 800ed82:	685a      	ldr	r2, [r3, #4]
 800ed84:	683b      	ldr	r3, [r7, #0]
 800ed86:	781b      	ldrb	r3, [r3, #0]
 800ed88:	00db      	lsls	r3, r3, #3
 800ed8a:	491d      	ldr	r1, [pc, #116]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ed8c:	468c      	mov	ip, r1
 800ed8e:	4463      	add	r3, ip
 800ed90:	0412      	lsls	r2, r2, #16
 800ed92:	0c12      	lsrs	r2, r2, #16
 800ed94:	605a      	str	r2, [r3, #4]
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	00db      	lsls	r3, r3, #3
 800ed9c:	4a18      	ldr	r2, [pc, #96]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800ed9e:	4694      	mov	ip, r2
 800eda0:	4463      	add	r3, ip
 800eda2:	6859      	ldr	r1, [r3, #4]
 800eda4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800eda6:	041a      	lsls	r2, r3, #16
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	781b      	ldrb	r3, [r3, #0]
 800edac:	00db      	lsls	r3, r3, #3
 800edae:	4814      	ldr	r0, [pc, #80]	@ (800ee00 <USB_EPStartXfer+0x1020>)
 800edb0:	4684      	mov	ip, r0
 800edb2:	4463      	add	r3, ip
 800edb4:	430a      	orrs	r2, r1
 800edb6:	605a      	str	r2, [r3, #4]
 800edb8:	e001      	b.n	800edbe <USB_EPStartXfer+0xfde>
      }
      else
      {
        return HAL_ERROR;
 800edba:	2301      	movs	r3, #1
 800edbc:	e01c      	b.n	800edf8 <USB_EPStartXfer+0x1018>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	683b      	ldr	r3, [r7, #0]
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	009b      	lsls	r3, r3, #2
 800edc6:	18d3      	adds	r3, r2, r3
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	4a0e      	ldr	r2, [pc, #56]	@ (800ee04 <USB_EPStartXfer+0x1024>)
 800edcc:	4013      	ands	r3, r2
 800edce:	61fb      	str	r3, [r7, #28]
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	2280      	movs	r2, #128	@ 0x80
 800edd4:	0152      	lsls	r2, r2, #5
 800edd6:	4053      	eors	r3, r2
 800edd8:	61fb      	str	r3, [r7, #28]
 800edda:	69fb      	ldr	r3, [r7, #28]
 800eddc:	2280      	movs	r2, #128	@ 0x80
 800edde:	0192      	lsls	r2, r2, #6
 800ede0:	4053      	eors	r3, r2
 800ede2:	61fb      	str	r3, [r7, #28]
 800ede4:	687a      	ldr	r2, [r7, #4]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	781b      	ldrb	r3, [r3, #0]
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	18d3      	adds	r3, r2, r3
 800edee:	69fa      	ldr	r2, [r7, #28]
 800edf0:	4905      	ldr	r1, [pc, #20]	@ (800ee08 <USB_EPStartXfer+0x1028>)
 800edf2:	430a      	orrs	r2, r1
 800edf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800edf6:	2300      	movs	r3, #0
}
 800edf8:	0018      	movs	r0, r3
 800edfa:	46bd      	mov	sp, r7
 800edfc:	b017      	add	sp, #92	@ 0x5c
 800edfe:	bd90      	pop	{r4, r7, pc}
 800ee00:	40009800 	.word	0x40009800
 800ee04:	07ffbf8f 	.word	0x07ffbf8f
 800ee08:	00008080 	.word	0x00008080

0800ee0c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
 800ee14:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	785b      	ldrb	r3, [r3, #1]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d016      	beq.n	800ee4c <USB_EPSetStall+0x40>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	009b      	lsls	r3, r3, #2
 800ee26:	18d3      	adds	r3, r2, r3
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4a16      	ldr	r2, [pc, #88]	@ (800ee84 <USB_EPSetStall+0x78>)
 800ee2c:	4013      	ands	r3, r2
 800ee2e:	60bb      	str	r3, [r7, #8]
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	2210      	movs	r2, #16
 800ee34:	4053      	eors	r3, r2
 800ee36:	60bb      	str	r3, [r7, #8]
 800ee38:	687a      	ldr	r2, [r7, #4]
 800ee3a:	683b      	ldr	r3, [r7, #0]
 800ee3c:	781b      	ldrb	r3, [r3, #0]
 800ee3e:	009b      	lsls	r3, r3, #2
 800ee40:	18d3      	adds	r3, r2, r3
 800ee42:	68ba      	ldr	r2, [r7, #8]
 800ee44:	4910      	ldr	r1, [pc, #64]	@ (800ee88 <USB_EPSetStall+0x7c>)
 800ee46:	430a      	orrs	r2, r1
 800ee48:	601a      	str	r2, [r3, #0]
 800ee4a:	e016      	b.n	800ee7a <USB_EPSetStall+0x6e>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	18d3      	adds	r3, r2, r3
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	4a0c      	ldr	r2, [pc, #48]	@ (800ee8c <USB_EPSetStall+0x80>)
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	60fb      	str	r3, [r7, #12]
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	2280      	movs	r2, #128	@ 0x80
 800ee62:	0152      	lsls	r2, r2, #5
 800ee64:	4053      	eors	r3, r2
 800ee66:	60fb      	str	r3, [r7, #12]
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	683b      	ldr	r3, [r7, #0]
 800ee6c:	781b      	ldrb	r3, [r3, #0]
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	18d3      	adds	r3, r2, r3
 800ee72:	68fa      	ldr	r2, [r7, #12]
 800ee74:	4904      	ldr	r1, [pc, #16]	@ (800ee88 <USB_EPSetStall+0x7c>)
 800ee76:	430a      	orrs	r2, r1
 800ee78:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ee7a:	2300      	movs	r3, #0
}
 800ee7c:	0018      	movs	r0, r3
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	b004      	add	sp, #16
 800ee82:	bd80      	pop	{r7, pc}
 800ee84:	07ff8fbf 	.word	0x07ff8fbf
 800ee88:	00008080 	.word	0x00008080
 800ee8c:	07ffbf8f 	.word	0x07ffbf8f

0800ee90 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b088      	sub	sp, #32
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
 800ee98:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	7b1b      	ldrb	r3, [r3, #12]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d000      	beq.n	800eea4 <USB_EPClearStall+0x14>
 800eea2:	e075      	b.n	800ef90 <USB_EPClearStall+0x100>
  {
    if (ep->is_in != 0U)
 800eea4:	683b      	ldr	r3, [r7, #0]
 800eea6:	785b      	ldrb	r3, [r3, #1]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d037      	beq.n	800ef1c <USB_EPClearStall+0x8c>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	18d3      	adds	r3, r2, r3
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	613b      	str	r3, [r7, #16]
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	2240      	movs	r2, #64	@ 0x40
 800eebe:	4013      	ands	r3, r2
 800eec0:	d011      	beq.n	800eee6 <USB_EPClearStall+0x56>
 800eec2:	687a      	ldr	r2, [r7, #4]
 800eec4:	683b      	ldr	r3, [r7, #0]
 800eec6:	781b      	ldrb	r3, [r3, #0]
 800eec8:	009b      	lsls	r3, r3, #2
 800eeca:	18d3      	adds	r3, r2, r3
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	4a33      	ldr	r2, [pc, #204]	@ (800ef9c <USB_EPClearStall+0x10c>)
 800eed0:	4013      	ands	r3, r2
 800eed2:	60fb      	str	r3, [r7, #12]
 800eed4:	687a      	ldr	r2, [r7, #4]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	781b      	ldrb	r3, [r3, #0]
 800eeda:	009b      	lsls	r3, r3, #2
 800eedc:	18d3      	adds	r3, r2, r3
 800eede:	68fa      	ldr	r2, [r7, #12]
 800eee0:	492f      	ldr	r1, [pc, #188]	@ (800efa0 <USB_EPClearStall+0x110>)
 800eee2:	430a      	orrs	r2, r1
 800eee4:	601a      	str	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800eee6:	683b      	ldr	r3, [r7, #0]
 800eee8:	78db      	ldrb	r3, [r3, #3]
 800eeea:	2b01      	cmp	r3, #1
 800eeec:	d050      	beq.n	800ef90 <USB_EPClearStall+0x100>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800eeee:	687a      	ldr	r2, [r7, #4]
 800eef0:	683b      	ldr	r3, [r7, #0]
 800eef2:	781b      	ldrb	r3, [r3, #0]
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	18d3      	adds	r3, r2, r3
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	4a2a      	ldr	r2, [pc, #168]	@ (800efa4 <USB_EPClearStall+0x114>)
 800eefc:	4013      	ands	r3, r2
 800eefe:	60bb      	str	r3, [r7, #8]
 800ef00:	68bb      	ldr	r3, [r7, #8]
 800ef02:	2220      	movs	r2, #32
 800ef04:	4053      	eors	r3, r2
 800ef06:	60bb      	str	r3, [r7, #8]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	781b      	ldrb	r3, [r3, #0]
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	18d3      	adds	r3, r2, r3
 800ef12:	68ba      	ldr	r2, [r7, #8]
 800ef14:	4924      	ldr	r1, [pc, #144]	@ (800efa8 <USB_EPClearStall+0x118>)
 800ef16:	430a      	orrs	r2, r1
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	e039      	b.n	800ef90 <USB_EPClearStall+0x100>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ef1c:	687a      	ldr	r2, [r7, #4]
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	781b      	ldrb	r3, [r3, #0]
 800ef22:	009b      	lsls	r3, r3, #2
 800ef24:	18d3      	adds	r3, r2, r3
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	61fb      	str	r3, [r7, #28]
 800ef2a:	69fa      	ldr	r2, [r7, #28]
 800ef2c:	2380      	movs	r3, #128	@ 0x80
 800ef2e:	01db      	lsls	r3, r3, #7
 800ef30:	4013      	ands	r3, r2
 800ef32:	d011      	beq.n	800ef58 <USB_EPClearStall+0xc8>
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	009b      	lsls	r3, r3, #2
 800ef3c:	18d3      	adds	r3, r2, r3
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	4a16      	ldr	r2, [pc, #88]	@ (800ef9c <USB_EPClearStall+0x10c>)
 800ef42:	4013      	ands	r3, r2
 800ef44:	61bb      	str	r3, [r7, #24]
 800ef46:	687a      	ldr	r2, [r7, #4]
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	18d3      	adds	r3, r2, r3
 800ef50:	69ba      	ldr	r2, [r7, #24]
 800ef52:	4916      	ldr	r1, [pc, #88]	@ (800efac <USB_EPClearStall+0x11c>)
 800ef54:	430a      	orrs	r2, r1
 800ef56:	601a      	str	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ef58:	687a      	ldr	r2, [r7, #4]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	18d3      	adds	r3, r2, r3
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4a12      	ldr	r2, [pc, #72]	@ (800efb0 <USB_EPClearStall+0x120>)
 800ef66:	4013      	ands	r3, r2
 800ef68:	617b      	str	r3, [r7, #20]
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	2280      	movs	r2, #128	@ 0x80
 800ef6e:	0152      	lsls	r2, r2, #5
 800ef70:	4053      	eors	r3, r2
 800ef72:	617b      	str	r3, [r7, #20]
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	2280      	movs	r2, #128	@ 0x80
 800ef78:	0192      	lsls	r2, r2, #6
 800ef7a:	4053      	eors	r3, r2
 800ef7c:	617b      	str	r3, [r7, #20]
 800ef7e:	687a      	ldr	r2, [r7, #4]
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	009b      	lsls	r3, r3, #2
 800ef86:	18d3      	adds	r3, r2, r3
 800ef88:	697a      	ldr	r2, [r7, #20]
 800ef8a:	4907      	ldr	r1, [pc, #28]	@ (800efa8 <USB_EPClearStall+0x118>)
 800ef8c:	430a      	orrs	r2, r1
 800ef8e:	601a      	str	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800ef90:	2300      	movs	r3, #0
}
 800ef92:	0018      	movs	r0, r3
 800ef94:	46bd      	mov	sp, r7
 800ef96:	b008      	add	sp, #32
 800ef98:	bd80      	pop	{r7, pc}
 800ef9a:	46c0      	nop			@ (mov r8, r8)
 800ef9c:	07ff8f8f 	.word	0x07ff8f8f
 800efa0:	000080c0 	.word	0x000080c0
 800efa4:	07ff8fbf 	.word	0x07ff8fbf
 800efa8:	00008080 	.word	0x00008080
 800efac:	0000c080 	.word	0x0000c080
 800efb0:	07ffbf8f 	.word	0x07ffbf8f

0800efb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_DRD_TypeDef *USBx, USB_DRD_EPTypeDef *ep)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b086      	sub	sp, #24
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  /* IN endpoint */
  if (ep->is_in == 1U)
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	785b      	ldrb	r3, [r3, #1]
 800efc2:	2b01      	cmp	r3, #1
 800efc4:	d131      	bne.n	800f02a <USB_EPStopXfer+0x76>
  {
    if (ep->doublebuffer == 0U)
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	7b1b      	ldrb	r3, [r3, #12]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d15f      	bne.n	800f08e <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	78db      	ldrb	r3, [r3, #3]
 800efd2:	2b01      	cmp	r3, #1
 800efd4:	d016      	beq.n	800f004 <USB_EPStopXfer+0x50>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	683b      	ldr	r3, [r7, #0]
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	009b      	lsls	r3, r3, #2
 800efde:	18d3      	adds	r3, r2, r3
 800efe0:	681b      	ldr	r3, [r3, #0]
 800efe2:	4a2d      	ldr	r2, [pc, #180]	@ (800f098 <USB_EPStopXfer+0xe4>)
 800efe4:	4013      	ands	r3, r2
 800efe6:	60bb      	str	r3, [r7, #8]
 800efe8:	68bb      	ldr	r3, [r7, #8]
 800efea:	2220      	movs	r2, #32
 800efec:	4053      	eors	r3, r2
 800efee:	60bb      	str	r3, [r7, #8]
 800eff0:	687a      	ldr	r2, [r7, #4]
 800eff2:	683b      	ldr	r3, [r7, #0]
 800eff4:	781b      	ldrb	r3, [r3, #0]
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	18d3      	adds	r3, r2, r3
 800effa:	68ba      	ldr	r2, [r7, #8]
 800effc:	4927      	ldr	r1, [pc, #156]	@ (800f09c <USB_EPStopXfer+0xe8>)
 800effe:	430a      	orrs	r2, r1
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	e044      	b.n	800f08e <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	18d3      	adds	r3, r2, r3
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	4a21      	ldr	r2, [pc, #132]	@ (800f098 <USB_EPStopXfer+0xe4>)
 800f012:	4013      	ands	r3, r2
 800f014:	60fb      	str	r3, [r7, #12]
 800f016:	687a      	ldr	r2, [r7, #4]
 800f018:	683b      	ldr	r3, [r7, #0]
 800f01a:	781b      	ldrb	r3, [r3, #0]
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	18d3      	adds	r3, r2, r3
 800f020:	68fa      	ldr	r2, [r7, #12]
 800f022:	491e      	ldr	r1, [pc, #120]	@ (800f09c <USB_EPStopXfer+0xe8>)
 800f024:	430a      	orrs	r2, r1
 800f026:	601a      	str	r2, [r3, #0]
 800f028:	e031      	b.n	800f08e <USB_EPStopXfer+0xda>
      }
    }
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800f02a:	683b      	ldr	r3, [r7, #0]
 800f02c:	7b1b      	ldrb	r3, [r3, #12]
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d12d      	bne.n	800f08e <USB_EPStopXfer+0xda>
    {
      if (ep->type != EP_TYPE_ISOC)
 800f032:	683b      	ldr	r3, [r7, #0]
 800f034:	78db      	ldrb	r3, [r3, #3]
 800f036:	2b01      	cmp	r3, #1
 800f038:	d017      	beq.n	800f06a <USB_EPStopXfer+0xb6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800f03a:	687a      	ldr	r2, [r7, #4]
 800f03c:	683b      	ldr	r3, [r7, #0]
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	009b      	lsls	r3, r3, #2
 800f042:	18d3      	adds	r3, r2, r3
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4a16      	ldr	r2, [pc, #88]	@ (800f0a0 <USB_EPStopXfer+0xec>)
 800f048:	4013      	ands	r3, r2
 800f04a:	613b      	str	r3, [r7, #16]
 800f04c:	693b      	ldr	r3, [r7, #16]
 800f04e:	2280      	movs	r2, #128	@ 0x80
 800f050:	0192      	lsls	r2, r2, #6
 800f052:	4053      	eors	r3, r2
 800f054:	613b      	str	r3, [r7, #16]
 800f056:	687a      	ldr	r2, [r7, #4]
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	18d3      	adds	r3, r2, r3
 800f060:	693a      	ldr	r2, [r7, #16]
 800f062:	490e      	ldr	r1, [pc, #56]	@ (800f09c <USB_EPStopXfer+0xe8>)
 800f064:	430a      	orrs	r2, r1
 800f066:	601a      	str	r2, [r3, #0]
 800f068:	e011      	b.n	800f08e <USB_EPStopXfer+0xda>
      }
      else
      {
        /* Configure RX Endpoint to disabled state */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800f06a:	687a      	ldr	r2, [r7, #4]
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	18d3      	adds	r3, r2, r3
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a0a      	ldr	r2, [pc, #40]	@ (800f0a0 <USB_EPStopXfer+0xec>)
 800f078:	4013      	ands	r3, r2
 800f07a:	617b      	str	r3, [r7, #20]
 800f07c:	687a      	ldr	r2, [r7, #4]
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	18d3      	adds	r3, r2, r3
 800f086:	697a      	ldr	r2, [r7, #20]
 800f088:	4904      	ldr	r1, [pc, #16]	@ (800f09c <USB_EPStopXfer+0xe8>)
 800f08a:	430a      	orrs	r2, r1
 800f08c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  return HAL_OK;
 800f08e:	2300      	movs	r3, #0
}
 800f090:	0018      	movs	r0, r3
 800f092:	46bd      	mov	sp, r7
 800f094:	b006      	add	sp, #24
 800f096:	bd80      	pop	{r7, pc}
 800f098:	07ff8fbf 	.word	0x07ff8fbf
 800f09c:	00008080 	.word	0x00008080
 800f0a0:	07ffbf8f 	.word	0x07ffbf8f

0800f0a4 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_DRD_TypeDef *USBx, uint8_t address)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b082      	sub	sp, #8
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	000a      	movs	r2, r1
 800f0ae:	1cfb      	adds	r3, r7, #3
 800f0b0:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800f0b2:	1cfb      	adds	r3, r7, #3
 800f0b4:	781b      	ldrb	r3, [r3, #0]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d102      	bne.n	800f0c0 <USB_SetDevAddress+0x1c>
  {
    /* set device address and enable function */
    USBx->DADDR = USB_DADDR_EF;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2280      	movs	r2, #128	@ 0x80
 800f0be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f0c0:	2300      	movs	r3, #0
}
 800f0c2:	0018      	movs	r0, r3
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	b002      	add	sp, #8
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_DRD_TypeDef *USBx)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b082      	sub	sp, #8
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= USB_BCDR_DPPU;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0d6:	2280      	movs	r2, #128	@ 0x80
 800f0d8:	0212      	lsls	r2, r2, #8
 800f0da:	431a      	orrs	r2, r3
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	0018      	movs	r0, r3
 800f0e4:	46bd      	mov	sp, r7
 800f0e6:	b002      	add	sp, #8
 800f0e8:	bd80      	pop	{r7, pc}
	...

0800f0ec <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_DRD_TypeDef *USBx)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  /* Disable DP Pull-Up bit to disconnect the Internal PU resistor on USB DP line */
  USBx->BCDR &= ~(USB_BCDR_DPPU);
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f0f8:	4a04      	ldr	r2, [pc, #16]	@ (800f10c <USB_DevDisconnect+0x20>)
 800f0fa:	401a      	ands	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	659a      	str	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f100:	2300      	movs	r3, #0
}
 800f102:	0018      	movs	r0, r3
 800f104:	46bd      	mov	sp, r7
 800f106:	b002      	add	sp, #8
 800f108:	bd80      	pop	{r7, pc}
 800f10a:	46c0      	nop			@ (mov r8, r8)
 800f10c:	ffff7fff 	.word	0xffff7fff

0800f110 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_DRD_TypeDef const *USBx)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b084      	sub	sp, #16
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f11c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f11e:	68fb      	ldr	r3, [r7, #12]
}
 800f120:	0018      	movs	r0, r3
 800f122:	46bd      	mov	sp, r7
 800f124:	b004      	add	sp, #16
 800f126:	bd80      	pop	{r7, pc}

0800f128 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b08a      	sub	sp, #40	@ 0x28
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	0019      	movs	r1, r3
 800f134:	1dbb      	adds	r3, r7, #6
 800f136:	801a      	strh	r2, [r3, #0]
 800f138:	1d3b      	adds	r3, r7, #4
 800f13a:	1c0a      	adds	r2, r1, #0
 800f13c:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t WrVal;
  uint32_t count;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f13e:	1d3b      	adds	r3, r7, #4
 800f140:	881b      	ldrh	r3, [r3, #0]
 800f142:	3303      	adds	r3, #3
 800f144:	089b      	lsrs	r3, r3, #2
 800f146:	61bb      	str	r3, [r7, #24]
  /* Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f148:	2016      	movs	r0, #22
 800f14a:	183b      	adds	r3, r7, r0
 800f14c:	1d3a      	adds	r2, r7, #4
 800f14e:	8812      	ldrh	r2, [r2, #0]
 800f150:	2103      	movs	r1, #3
 800f152:	400a      	ands	r2, r1
 800f154:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	613b      	str	r3, [r7, #16]

  /* Check if there is a remaining byte */
  if (remaining_bytes != 0U)
 800f15a:	183b      	adds	r3, r7, r0
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d002      	beq.n	800f168 <USB_WritePMA+0x40>
  {
    NbWords--;
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	3b01      	subs	r3, #1
 800f166:	61bb      	str	r3, [r7, #24]
  }

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f168:	1dbb      	adds	r3, r7, #6
 800f16a:	881b      	ldrh	r3, [r3, #0]
 800f16c:	4a28      	ldr	r2, [pc, #160]	@ (800f210 <USB_WritePMA+0xe8>)
 800f16e:	4694      	mov	ip, r2
 800f170:	4463      	add	r3, ip
 800f172:	61fb      	str	r3, [r7, #28]

  /* Write the Calculated Word into the PMA related Buffer */
  for (count = NbWords; count != 0U; count--)
 800f174:	69bb      	ldr	r3, [r7, #24]
 800f176:	623b      	str	r3, [r7, #32]
 800f178:	e01f      	b.n	800f1ba <USB_WritePMA+0x92>
  {
    *pdwVal = __UNALIGNED_UINT32_READ(pBuf);
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	781a      	ldrb	r2, [r3, #0]
 800f17e:	7859      	ldrb	r1, [r3, #1]
 800f180:	0209      	lsls	r1, r1, #8
 800f182:	430a      	orrs	r2, r1
 800f184:	7899      	ldrb	r1, [r3, #2]
 800f186:	0409      	lsls	r1, r1, #16
 800f188:	430a      	orrs	r2, r1
 800f18a:	78db      	ldrb	r3, [r3, #3]
 800f18c:	061b      	lsls	r3, r3, #24
 800f18e:	4313      	orrs	r3, r2
 800f190:	001a      	movs	r2, r3
 800f192:	69fb      	ldr	r3, [r7, #28]
 800f194:	601a      	str	r2, [r3, #0]
    pdwVal++;
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	3304      	adds	r3, #4
 800f19a:	61fb      	str	r3, [r7, #28]
    /* Increment pBuf 4 Time as Word Increment */
    pBuf++;
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	3301      	adds	r3, #1
 800f1a0:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f1a2:	693b      	ldr	r3, [r7, #16]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f1a8:	693b      	ldr	r3, [r7, #16]
 800f1aa:	3301      	adds	r3, #1
 800f1ac:	613b      	str	r3, [r7, #16]
    pBuf++;
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	613b      	str	r3, [r7, #16]
  for (count = NbWords; count != 0U; count--)
 800f1b4:	6a3b      	ldr	r3, [r7, #32]
 800f1b6:	3b01      	subs	r3, #1
 800f1b8:	623b      	str	r3, [r7, #32]
 800f1ba:	6a3b      	ldr	r3, [r7, #32]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d1dc      	bne.n	800f17a <USB_WritePMA+0x52>
  }

  /* When Number of data is not word aligned, write the remaining Byte */
  if (remaining_bytes != 0U)
 800f1c0:	2316      	movs	r3, #22
 800f1c2:	18fb      	adds	r3, r7, r3
 800f1c4:	881b      	ldrh	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d01e      	beq.n	800f208 <USB_WritePMA+0xe0>
  {
    WrVal = 0U;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	627b      	str	r3, [r7, #36]	@ 0x24

    do
    {
      WrVal |= (uint32_t)(*(uint8_t *)pBuf) << (8U * count);
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	001a      	movs	r2, r3
 800f1d4:	6a3b      	ldr	r3, [r7, #32]
 800f1d6:	00db      	lsls	r3, r3, #3
 800f1d8:	409a      	lsls	r2, r3
 800f1da:	0013      	movs	r3, r2
 800f1dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	627b      	str	r3, [r7, #36]	@ 0x24
      count++;
 800f1e2:	6a3b      	ldr	r3, [r7, #32]
 800f1e4:	3301      	adds	r3, #1
 800f1e6:	623b      	str	r3, [r7, #32]
      pBuf++;
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	613b      	str	r3, [r7, #16]
      remaining_bytes--;
 800f1ee:	2116      	movs	r1, #22
 800f1f0:	187b      	adds	r3, r7, r1
 800f1f2:	881a      	ldrh	r2, [r3, #0]
 800f1f4:	187b      	adds	r3, r7, r1
 800f1f6:	3a01      	subs	r2, #1
 800f1f8:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800f1fa:	187b      	adds	r3, r7, r1
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d1e5      	bne.n	800f1ce <USB_WritePMA+0xa6>

    *pdwVal = WrVal;
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f206:	601a      	str	r2, [r3, #0]
  }
}
 800f208:	46c0      	nop			@ (mov r8, r8)
 800f20a:	46bd      	mov	sp, r7
 800f20c:	b00a      	add	sp, #40	@ 0x28
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	40009800 	.word	0x40009800

0800f214 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_DRD_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f214:	b590      	push	{r4, r7, lr}
 800f216:	b08b      	sub	sp, #44	@ 0x2c
 800f218:	af00      	add	r7, sp, #0
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	0019      	movs	r1, r3
 800f220:	1dbb      	adds	r3, r7, #6
 800f222:	801a      	strh	r2, [r3, #0]
 800f224:	1d3b      	adds	r3, r7, #4
 800f226:	1c0a      	adds	r2, r1, #0
 800f228:	801a      	strh	r2, [r3, #0]
  UNUSED(USBx);
  uint32_t count;
  uint32_t RdVal;
  __IO uint32_t *pdwVal;
  uint32_t NbWords = ((uint32_t)wNBytes + 3U) >> 2U;
 800f22a:	1d3b      	adds	r3, r7, #4
 800f22c:	881b      	ldrh	r3, [r3, #0]
 800f22e:	3303      	adds	r3, #3
 800f230:	089b      	lsrs	r3, r3, #2
 800f232:	61fb      	str	r3, [r7, #28]
  /*Due to the PMA access 32bit only so the last non word data should be processed alone */
  uint16_t remaining_bytes = wNBytes % 4U;
 800f234:	201a      	movs	r0, #26
 800f236:	183b      	adds	r3, r7, r0
 800f238:	1d3a      	adds	r2, r7, #4
 800f23a:	8812      	ldrh	r2, [r2, #0]
 800f23c:	2103      	movs	r1, #3
 800f23e:	400a      	ands	r2, r1
 800f240:	801a      	strh	r2, [r3, #0]
  uint8_t *pBuf = pbUsrBuf;
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	617b      	str	r3, [r7, #20]

  /* Get the PMA Buffer pointer */
  pdwVal = (__IO uint32_t *)(USB_DRD_PMAADDR + (uint32_t)wPMABufAddr);
 800f246:	1dbb      	adds	r3, r7, #6
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	4a39      	ldr	r2, [pc, #228]	@ (800f330 <USB_ReadPMA+0x11c>)
 800f24c:	4694      	mov	ip, r2
 800f24e:	4463      	add	r3, ip
 800f250:	623b      	str	r3, [r7, #32]

  /* if nbre of byte is not word aligned decrement the nbre of word*/
  if (remaining_bytes != 0U)
 800f252:	183b      	adds	r3, r7, r0
 800f254:	881b      	ldrh	r3, [r3, #0]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d002      	beq.n	800f260 <USB_ReadPMA+0x4c>
  {
    NbWords--;
 800f25a:	69fb      	ldr	r3, [r7, #28]
 800f25c:	3b01      	subs	r3, #1
 800f25e:	61fb      	str	r3, [r7, #28]
  }

  /*Read the Calculated Word From the PMA related Buffer*/
  for (count = NbWords; count != 0U; count--)
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	627b      	str	r3, [r7, #36]	@ 0x24
 800f264:	e03c      	b.n	800f2e0 <USB_ReadPMA+0xcc>
  {
    __UNALIGNED_UINT32_WRITE(pBuf, *pdwVal);
 800f266:	6a3b      	ldr	r3, [r7, #32]
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	21ff      	movs	r1, #255	@ 0xff
 800f26e:	4011      	ands	r1, r2
 800f270:	000c      	movs	r4, r1
 800f272:	7819      	ldrb	r1, [r3, #0]
 800f274:	2000      	movs	r0, #0
 800f276:	4001      	ands	r1, r0
 800f278:	1c08      	adds	r0, r1, #0
 800f27a:	1c21      	adds	r1, r4, #0
 800f27c:	4301      	orrs	r1, r0
 800f27e:	7019      	strb	r1, [r3, #0]
 800f280:	0a11      	lsrs	r1, r2, #8
 800f282:	20ff      	movs	r0, #255	@ 0xff
 800f284:	4001      	ands	r1, r0
 800f286:	000c      	movs	r4, r1
 800f288:	7859      	ldrb	r1, [r3, #1]
 800f28a:	2000      	movs	r0, #0
 800f28c:	4001      	ands	r1, r0
 800f28e:	1c08      	adds	r0, r1, #0
 800f290:	1c21      	adds	r1, r4, #0
 800f292:	4301      	orrs	r1, r0
 800f294:	7059      	strb	r1, [r3, #1]
 800f296:	0c11      	lsrs	r1, r2, #16
 800f298:	20ff      	movs	r0, #255	@ 0xff
 800f29a:	4001      	ands	r1, r0
 800f29c:	000c      	movs	r4, r1
 800f29e:	7899      	ldrb	r1, [r3, #2]
 800f2a0:	2000      	movs	r0, #0
 800f2a2:	4001      	ands	r1, r0
 800f2a4:	1c08      	adds	r0, r1, #0
 800f2a6:	1c21      	adds	r1, r4, #0
 800f2a8:	4301      	orrs	r1, r0
 800f2aa:	7099      	strb	r1, [r3, #2]
 800f2ac:	0e10      	lsrs	r0, r2, #24
 800f2ae:	78da      	ldrb	r2, [r3, #3]
 800f2b0:	2100      	movs	r1, #0
 800f2b2:	400a      	ands	r2, r1
 800f2b4:	1c11      	adds	r1, r2, #0
 800f2b6:	1c02      	adds	r2, r0, #0
 800f2b8:	430a      	orrs	r2, r1
 800f2ba:	70da      	strb	r2, [r3, #3]

    pdwVal++;
 800f2bc:	6a3b      	ldr	r3, [r7, #32]
 800f2be:	3304      	adds	r3, #4
 800f2c0:	623b      	str	r3, [r7, #32]
    pBuf++;
 800f2c2:	697b      	ldr	r3, [r7, #20]
 800f2c4:	3301      	adds	r3, #1
 800f2c6:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f2c8:	697b      	ldr	r3, [r7, #20]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f2ce:	697b      	ldr	r3, [r7, #20]
 800f2d0:	3301      	adds	r3, #1
 800f2d2:	617b      	str	r3, [r7, #20]
    pBuf++;
 800f2d4:	697b      	ldr	r3, [r7, #20]
 800f2d6:	3301      	adds	r3, #1
 800f2d8:	617b      	str	r3, [r7, #20]
  for (count = NbWords; count != 0U; count--)
 800f2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2dc:	3b01      	subs	r3, #1
 800f2de:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d1bf      	bne.n	800f266 <USB_ReadPMA+0x52>
  }

  /*When Number of data is not word aligned, read the remaining byte*/
  if (remaining_bytes != 0U)
 800f2e6:	231a      	movs	r3, #26
 800f2e8:	18fb      	adds	r3, r7, r3
 800f2ea:	881b      	ldrh	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d01b      	beq.n	800f328 <USB_ReadPMA+0x114>
  {
    RdVal = *(__IO uint32_t *)pdwVal;
 800f2f0:	6a3b      	ldr	r3, [r7, #32]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	613b      	str	r3, [r7, #16]

    do
    {
      *(uint8_t *)pBuf = (uint8_t)(RdVal >> (8U * (uint8_t)(count)));
 800f2f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2f8:	b2db      	uxtb	r3, r3
 800f2fa:	00db      	lsls	r3, r3, #3
 800f2fc:	693a      	ldr	r2, [r7, #16]
 800f2fe:	40da      	lsrs	r2, r3
 800f300:	0013      	movs	r3, r2
 800f302:	b2da      	uxtb	r2, r3
 800f304:	697b      	ldr	r3, [r7, #20]
 800f306:	701a      	strb	r2, [r3, #0]
      count++;
 800f308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f30a:	3301      	adds	r3, #1
 800f30c:	627b      	str	r3, [r7, #36]	@ 0x24
      pBuf++;
 800f30e:	697b      	ldr	r3, [r7, #20]
 800f310:	3301      	adds	r3, #1
 800f312:	617b      	str	r3, [r7, #20]
      remaining_bytes--;
 800f314:	211a      	movs	r1, #26
 800f316:	187b      	adds	r3, r7, r1
 800f318:	881a      	ldrh	r2, [r3, #0]
 800f31a:	187b      	adds	r3, r7, r1
 800f31c:	3a01      	subs	r2, #1
 800f31e:	801a      	strh	r2, [r3, #0]
    } while (remaining_bytes != 0U);
 800f320:	187b      	adds	r3, r7, r1
 800f322:	881b      	ldrh	r3, [r3, #0]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d1e6      	bne.n	800f2f6 <USB_ReadPMA+0xe2>
  }
}
 800f328:	46c0      	nop			@ (mov r8, r8)
 800f32a:	46bd      	mov	sp, r7
 800f32c:	b00b      	add	sp, #44	@ 0x2c
 800f32e:	bd90      	pop	{r4, r7, pc}
 800f330:	40009800 	.word	0x40009800

0800f334 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	b094      	sub	sp, #80	@ 0x50
 800f338:	af00      	add	r7, sp, #0
 800f33a:	60f8      	str	r0, [r7, #12]
 800f33c:	60b9      	str	r1, [r7, #8]
 800f33e:	607a      	str	r2, [r7, #4]
 800f340:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	3303      	adds	r3, #3
 800f346:	2203      	movs	r2, #3
 800f348:	4393      	bics	r3, r2
 800f34a:	607b      	str	r3, [r7, #4]
__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{

unsigned int  primask_value;

    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f34c:	f3ef 8310 	mrs	r3, PRIMASK
 800f350:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f352:	b672      	cpsid	i
    return(primask_value);
 800f354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    /* Disable interrupts.  */
    TX_DISABLE
 800f356:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800f358:	4b56      	ldr	r3, [pc, #344]	@ (800f4b4 <_tx_byte_allocate+0x180>)
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	643b      	str	r3, [r7, #64]	@ 0x40
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800f35e:	2300      	movs	r3, #0
 800f360:	647b      	str	r3, [r7, #68]	@ 0x44
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f366:	621a      	str	r2, [r3, #32]
 800f368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f36a:	627b      	str	r3, [r7, #36]	@ 0x24
}

__attribute__( ( always_inline ) ) static inline void __restore_interrupts(unsigned int primask_value)
{

    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f36c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f36e:	f383 8810 	msr	PRIMASK, r3
}
 800f372:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800f374:	687a      	ldr	r2, [r7, #4]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	0011      	movs	r1, r2
 800f37a:	0018      	movs	r0, r3
 800f37c:	f000 f9c0 	bl	800f700 <_tx_byte_pool_search>
 800f380:	0003      	movs	r3, r0
 800f382:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f384:	f3ef 8310 	mrs	r3, PRIMASK
 800f388:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f38a:	b672      	cpsid	i
    return(primask_value);
 800f38c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800f38e:	64fb      	str	r3, [r7, #76]	@ 0x4c

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800f390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f392:	2b00      	cmp	r3, #0
 800f394:	d002      	beq.n	800f39c <_tx_byte_allocate+0x68>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800f396:	2301      	movs	r3, #1
 800f398:	647b      	str	r3, [r7, #68]	@ 0x44
 800f39a:	e006      	b.n	800f3aa <_tx_byte_allocate+0x76>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	6a1b      	ldr	r3, [r3, #32]
 800f3a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d101      	bne.n	800f3aa <_tx_byte_allocate+0x76>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }

    } while (finished == TX_FALSE);
 800f3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d0d8      	beq.n	800f362 <_tx_byte_allocate+0x2e>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f3b4:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800f3b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d008      	beq.n	800f3ce <_tx_byte_allocate+0x9a>
 800f3bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3be:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f3c0:	6a3b      	ldr	r3, [r7, #32]
 800f3c2:	f383 8810 	msr	PRIMASK, r3
}
 800f3c6:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800f3c8:	2300      	movs	r3, #0
 800f3ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3cc:	e06d      	b.n	800f4aa <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800f3ce:	683b      	ldr	r3, [r7, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d062      	beq.n	800f49a <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800f3d4:	4b38      	ldr	r3, [pc, #224]	@ (800f4b8 <_tx_byte_allocate+0x184>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d007      	beq.n	800f3ec <_tx_byte_allocate+0xb8>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800f3dc:	2310      	movs	r3, #16
 800f3de:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f3e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f3e4:	69fb      	ldr	r3, [r7, #28]
 800f3e6:	f383 8810 	msr	PRIMASK, r3
}
 800f3ea:	e05e      	b.n	800f4aa <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800f3ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3ee:	4a33      	ldr	r2, [pc, #204]	@ (800f4bc <_tx_byte_allocate+0x188>)
 800f3f0:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800f3f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	66da      	str	r2, [r3, #108]	@ 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800f3f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800f3fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f400:	687a      	ldr	r2, [r7, #4]
 800f402:	679a      	str	r2, [r3, #120]	@ 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800f404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f406:	22ac      	movs	r2, #172	@ 0xac
 800f408:	589b      	ldr	r3, [r3, r2]
 800f40a:	1c5a      	adds	r2, r3, #1
 800f40c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f40e:	21ac      	movs	r1, #172	@ 0xac
 800f410:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f416:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f41c:	1c5a      	adds	r2, r3, #1
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800f422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f424:	2b00      	cmp	r3, #0
 800f426:	d109      	bne.n	800f43c <_tx_byte_allocate+0x108>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f42c:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800f42e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f430:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f432:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800f434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f438:	675a      	str	r2, [r3, #116]	@ 0x74
 800f43a:	e011      	b.n	800f460 <_tx_byte_allocate+0x12c>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f440:	637b      	str	r3, [r7, #52]	@ 0x34
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800f442:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f444:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f446:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800f448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f44a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f44c:	633b      	str	r3, [r7, #48]	@ 0x30
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800f44e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f450:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f452:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800f454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f456:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f458:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800f45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f45c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f45e:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800f460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f462:	2209      	movs	r2, #9
 800f464:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800f466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f468:	2201      	movs	r2, #1
 800f46a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800f46c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f46e:	683a      	ldr	r2, [r7, #0]
 800f470:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800f472:	4b11      	ldr	r3, [pc, #68]	@ (800f4b8 <_tx_byte_allocate+0x184>)
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	1c5a      	adds	r2, r3, #1
 800f478:	4b0f      	ldr	r3, [pc, #60]	@ (800f4b8 <_tx_byte_allocate+0x184>)
 800f47a:	601a      	str	r2, [r3, #0]
 800f47c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f47e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f480:	69bb      	ldr	r3, [r7, #24]
 800f482:	f383 8810 	msr	PRIMASK, r3
}
 800f486:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800f488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f48a:	0018      	movs	r0, r3
 800f48c:	f002 fdfc 	bl	8012088 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800f490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f492:	2284      	movs	r2, #132	@ 0x84
 800f494:	589b      	ldr	r3, [r3, r2]
 800f496:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f498:	e007      	b.n	800f4aa <_tx_byte_allocate+0x176>
 800f49a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f49c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	f383 8810 	msr	PRIMASK, r3
}
 800f4a4:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800f4a6:	2310      	movs	r3, #16
 800f4a8:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }

    /* Return completion status.  */
    return(status);
 800f4aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f4ac:	0018      	movs	r0, r3
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	b014      	add	sp, #80	@ 0x50
 800f4b2:	bd80      	pop	{r7, pc}
 800f4b4:	20010fe8 	.word	0x20010fe8
 800f4b8:	20011080 	.word	0x20011080
 800f4bc:	0800f4c1 	.word	0x0800f4c1

0800f4c0 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b08c      	sub	sp, #48	@ 0x30
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f4ca:	f3ef 8310 	mrs	r3, PRIMASK
 800f4ce:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f4d0:	b672      	cpsid	i
    return(primask_value);
 800f4d2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800f4d4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f4da:	4b32      	ldr	r3, [pc, #200]	@ (800f5a4 <_tx_byte_pool_cleanup+0xe4>)
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d157      	bne.n	800f590 <_tx_byte_pool_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	22ac      	movs	r2, #172	@ 0xac
 800f4e4:	589b      	ldr	r3, [r3, r2]
 800f4e6:	683a      	ldr	r2, [r7, #0]
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d151      	bne.n	800f590 <_tx_byte_pool_cleanup+0xd0>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f4f0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800f4f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d04b      	beq.n	800f590 <_tx_byte_pool_cleanup+0xd0>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800f4f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a2a      	ldr	r2, [pc, #168]	@ (800f5a8 <_tx_byte_pool_cleanup+0xe8>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d146      	bne.n	800f590 <_tx_byte_pool_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800f502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f506:	2b00      	cmp	r3, #0
 800f508:	d042      	beq.n	800f590 <_tx_byte_pool_cleanup+0xd0>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800f510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f514:	1e5a      	subs	r2, r3, #1
 800f516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f518:	629a      	str	r2, [r3, #40]	@ 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800f51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f51c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f51e:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800f520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f522:	2b00      	cmp	r3, #0
 800f524:	d103      	bne.n	800f52e <_tx_byte_pool_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800f526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f528:	2200      	movs	r2, #0
 800f52a:	625a      	str	r2, [r3, #36]	@ 0x24
 800f52c:	e013      	b.n	800f556 <_tx_byte_pool_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f532:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f538:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800f53a:	6a3b      	ldr	r3, [r7, #32]
 800f53c:	69fa      	ldr	r2, [r7, #28]
 800f53e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800f540:	69fb      	ldr	r3, [r7, #28]
 800f542:	6a3a      	ldr	r2, [r7, #32]
 800f544:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800f546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f54a:	687a      	ldr	r2, [r7, #4]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d102      	bne.n	800f556 <_tx_byte_pool_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800f550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f552:	6a3a      	ldr	r2, [r7, #32]
 800f554:	625a      	str	r2, [r3, #36]	@ 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f55a:	2b09      	cmp	r3, #9
 800f55c:	d118      	bne.n	800f590 <_tx_byte_pool_cleanup+0xd0>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	2284      	movs	r2, #132	@ 0x84
 800f562:	2110      	movs	r1, #16
 800f564:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f566:	4b11      	ldr	r3, [pc, #68]	@ (800f5ac <_tx_byte_pool_cleanup+0xec>)
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	1c5a      	adds	r2, r3, #1
 800f56c:	4b0f      	ldr	r3, [pc, #60]	@ (800f5ac <_tx_byte_pool_cleanup+0xec>)
 800f56e:	601a      	str	r2, [r3, #0]
 800f570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f572:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	f383 8810 	msr	PRIMASK, r3
}
 800f57a:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	0018      	movs	r0, r3
 800f580:	f002 fc82 	bl	8011e88 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f584:	f3ef 8310 	mrs	r3, PRIMASK
 800f588:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f58a:	b672      	cpsid	i
    return(primask_value);
 800f58c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f592:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f383 8810 	msr	PRIMASK, r3
}
 800f59a:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800f59c:	46c0      	nop			@ (mov r8, r8)
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	b00c      	add	sp, #48	@ 0x30
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	0800f4c1 	.word	0x0800f4c1
 800f5a8:	42595445 	.word	0x42595445
 800f5ac:	20011080 	.word	0x20011080

0800f5b0 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800f5b0:	b580      	push	{r7, lr}
 800f5b2:	b092      	sub	sp, #72	@ 0x48
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	60f8      	str	r0, [r7, #12]
 800f5b8:	60b9      	str	r1, [r7, #8]
 800f5ba:	607a      	str	r2, [r7, #4]
 800f5bc:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800f5c2:	233f      	movs	r3, #63	@ 0x3f
 800f5c4:	18fb      	adds	r3, r7, r3
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	701a      	strb	r2, [r3, #0]
 800f5ca:	2334      	movs	r3, #52	@ 0x34
 800f5cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5d2:	e009      	b.n	800f5e8 <_tx_byte_pool_create+0x38>
 800f5d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5d6:	1c5a      	adds	r2, r3, #1
 800f5d8:	647a      	str	r2, [r7, #68]	@ 0x44
 800f5da:	223f      	movs	r2, #63	@ 0x3f
 800f5dc:	18ba      	adds	r2, r7, r2
 800f5de:	7812      	ldrb	r2, [r2, #0]
 800f5e0:	701a      	strb	r2, [r3, #0]
 800f5e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5e4:	3301      	adds	r3, #1
 800f5e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ec:	429a      	cmp	r2, r3
 800f5ee:	d3f1      	bcc.n	800f5d4 <_tx_byte_pool_create+0x24>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	2203      	movs	r2, #3
 800f5f4:	4393      	bics	r3, r2
 800f5f6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	68ba      	ldr	r2, [r7, #8]
 800f5fc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	687a      	ldr	r2, [r7, #4]
 800f602:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	683a      	ldr	r2, [r7, #0]
 800f608:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	687a      	ldr	r2, [r7, #4]
 800f60e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f610:	68fb      	ldr	r3, [r7, #12]
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800f616:	683b      	ldr	r3, [r7, #0]
 800f618:	3b08      	subs	r3, #8
 800f61a:	001a      	movs	r2, r3
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800f620:	68fb      	ldr	r3, [r7, #12]
 800f622:	2202      	movs	r2, #2
 800f624:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800f62a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	18d3      	adds	r3, r2, r3
 800f630:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800f632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f634:	3b04      	subs	r3, #4
 800f636:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800f63c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f63e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 800f640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f642:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f644:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800f646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f648:	3b04      	subs	r3, #4
 800f64a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800f64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f64e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f652:	687a      	ldr	r2, [r7, #4]
 800f654:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800f65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f65c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800f65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f662:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800f668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f66a:	3304      	adds	r3, #4
 800f66c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800f66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f670:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800f672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f674:	4a1e      	ldr	r2, [pc, #120]	@ (800f6f0 <_tx_byte_pool_create+0x140>)
 800f676:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2200      	movs	r2, #0
 800f67c:	621a      	str	r2, [r3, #32]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f67e:	f3ef 8310 	mrs	r3, PRIMASK
 800f682:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f684:	b672      	cpsid	i
    return(primask_value);
 800f686:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800f688:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	4a19      	ldr	r2, [pc, #100]	@ (800f6f4 <_tx_byte_pool_create+0x144>)
 800f68e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800f690:	4b19      	ldr	r3, [pc, #100]	@ (800f6f8 <_tx_byte_pool_create+0x148>)
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d109      	bne.n	800f6ac <_tx_byte_pool_create+0xfc>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800f698:	4b18      	ldr	r3, [pc, #96]	@ (800f6fc <_tx_byte_pool_create+0x14c>)
 800f69a:	68fa      	ldr	r2, [r7, #12]
 800f69c:	601a      	str	r2, [r3, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	68fa      	ldr	r2, [r7, #12]
 800f6a2:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	68fa      	ldr	r2, [r7, #12]
 800f6a8:	631a      	str	r2, [r3, #48]	@ 0x30
 800f6aa:	e011      	b.n	800f6d0 <_tx_byte_pool_create+0x120>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800f6ac:	4b13      	ldr	r3, [pc, #76]	@ (800f6fc <_tx_byte_pool_create+0x14c>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800f6b2:	6a3b      	ldr	r3, [r7, #32]
 800f6b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6b6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800f6b8:	6a3b      	ldr	r3, [r7, #32]
 800f6ba:	68fa      	ldr	r2, [r7, #12]
 800f6bc:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800f6be:	69fb      	ldr	r3, [r7, #28]
 800f6c0:	68fa      	ldr	r2, [r7, #12]
 800f6c2:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	69fa      	ldr	r2, [r7, #28]
 800f6c8:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6a3a      	ldr	r2, [r7, #32]
 800f6ce:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800f6d0:	4b09      	ldr	r3, [pc, #36]	@ (800f6f8 <_tx_byte_pool_create+0x148>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	1c5a      	adds	r2, r3, #1
 800f6d6:	4b08      	ldr	r3, [pc, #32]	@ (800f6f8 <_tx_byte_pool_create+0x148>)
 800f6d8:	601a      	str	r2, [r3, #0]
 800f6da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6dc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f6de:	697b      	ldr	r3, [r7, #20]
 800f6e0:	f383 8810 	msr	PRIMASK, r3
}
 800f6e4:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800f6e6:	2300      	movs	r3, #0
}
 800f6e8:	0018      	movs	r0, r3
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	b012      	add	sp, #72	@ 0x48
 800f6ee:	bd80      	pop	{r7, pc}
 800f6f0:	ffffeeee 	.word	0xffffeeee
 800f6f4:	42595445 	.word	0x42595445
 800f6f8:	20010fdc 	.word	0x20010fdc
 800f6fc:	20010fd8 	.word	0x20010fd8

0800f700 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b094      	sub	sp, #80	@ 0x50
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800f70a:	2300      	movs	r3, #0
 800f70c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f70e:	f3ef 8310 	mrs	r3, PRIMASK
 800f712:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f714:	b672      	cpsid	i
    return(primask_value);
 800f716:	69fb      	ldr	r3, [r7, #28]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800f718:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	689a      	ldr	r2, [r3, #8]
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	68db      	ldr	r3, [r3, #12]
 800f722:	3b02      	subs	r3, #2
 800f724:	00db      	lsls	r3, r3, #3
 800f726:	18d3      	adds	r3, r2, r3
 800f728:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (memory_size >= total_theoretical_available)
 800f72a:	683a      	ldr	r2, [r7, #0]
 800f72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72e:	429a      	cmp	r2, r3
 800f730:	d308      	bcc.n	800f744 <_tx_byte_pool_search+0x44>
 800f732:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f734:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	f383 8810 	msr	PRIMASK, r3
}
 800f73c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800f73e:	2300      	movs	r3, #0
 800f740:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f742:	e0db      	b.n	800f8fc <_tx_byte_pool_search+0x1fc>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800f744:	4b70      	ldr	r3, [pc, #448]	@ (800f908 <_tx_byte_pool_search+0x208>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f74e:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	695b      	ldr	r3, [r3, #20]
 800f754:	64bb      	str	r3, [r7, #72]	@ 0x48
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	68db      	ldr	r3, [r3, #12]
 800f75a:	3301      	adds	r3, #1
 800f75c:	643b      	str	r3, [r7, #64]	@ 0x40
        available_bytes =  ((ULONG) 0);
 800f75e:	2300      	movs	r3, #0
 800f760:	647b      	str	r3, [r7, #68]	@ 0x44
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800f762:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f764:	3304      	adds	r3, #4
 800f766:	633b      	str	r3, [r7, #48]	@ 0x30
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f76a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800f76c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4a66      	ldr	r2, [pc, #408]	@ (800f90c <_tx_byte_pool_search+0x20c>)
 800f772:	4293      	cmp	r3, r2
 800f774:	d143      	bne.n	800f7fe <_tx_byte_pool_search+0xfe>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800f776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d104      	bne.n	800f786 <_tx_byte_pool_search+0x86>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f780:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800f782:	2301      	movs	r3, #1
 800f784:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f786:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f788:	62bb      	str	r3, [r7, #40]	@ 0x28
                next_ptr =             *this_block_link_ptr;
 800f78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800f790:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f792:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f794:	1ad3      	subs	r3, r2, r3
 800f796:	647b      	str	r3, [r7, #68]	@ 0x44
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800f798:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f79a:	3b08      	subs	r3, #8
 800f79c:	647b      	str	r3, [r7, #68]	@ 0x44

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800f79e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d255      	bcs.n	800f852 <_tx_byte_pool_search+0x152>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7ac:	3304      	adds	r3, #4
 800f7ae:	633b      	str	r3, [r7, #48]	@ 0x30
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800f7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f7b6:	681b      	ldr	r3, [r3, #0]
 800f7b8:	4a54      	ldr	r2, [pc, #336]	@ (800f90c <_tx_byte_pool_search+0x20c>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d113      	bne.n	800f7e6 <_tx_byte_pool_search+0xe6>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7c0:	623b      	str	r3, [r7, #32]
                        *this_block_link_ptr =  *next_block_link_ptr;
 800f7c2:	6a3b      	ldr	r3, [r7, #32]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c8:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	68db      	ldr	r3, [r3, #12]
 800f7ce:	1e5a      	subs	r2, r3, #1
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	695b      	ldr	r3, [r3, #20]
 800f7d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d114      	bne.n	800f808 <_tx_byte_pool_search+0x108>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f7e2:	615a      	str	r2, [r3, #20]
 800f7e4:	e010      	b.n	800f808 <_tx_byte_pool_search+0x108>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e8:	623b      	str	r3, [r7, #32]
                        current_ptr =  *next_block_link_ptr;
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	64bb      	str	r3, [r7, #72]	@ 0x48

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800f7f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d008      	beq.n	800f808 <_tx_byte_pool_search+0x108>
                        {
                            examine_blocks--;
 800f7f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f7f8:	3b01      	subs	r3, #1
 800f7fa:	643b      	str	r3, [r7, #64]	@ 0x40
 800f7fc:	e004      	b.n	800f808 <_tx_byte_pool_search+0x108>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f7fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f800:	62bb      	str	r3, [r7, #40]	@ 0x28
                current_ptr =  *this_block_link_ptr;
 800f802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800f808:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d002      	beq.n	800f814 <_tx_byte_pool_search+0x114>
            {

                examine_blocks--;
 800f80e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f810:	3b01      	subs	r3, #1
 800f812:	643b      	str	r3, [r7, #64]	@ 0x40
 800f814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f816:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	f383 8810 	msr	PRIMASK, r3
}
 800f81e:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f820:	f3ef 8310 	mrs	r3, PRIMASK
 800f824:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f826:	b672      	cpsid	i
    return(primask_value);
 800f828:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800f82a:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	6a1b      	ldr	r3, [r3, #32]
 800f830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f832:	429a      	cmp	r2, r3
 800f834:	d009      	beq.n	800f84a <_tx_byte_pool_search+0x14a>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	695b      	ldr	r3, [r3, #20]
 800f83a:	64bb      	str	r3, [r7, #72]	@ 0x48
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	68db      	ldr	r3, [r3, #12]
 800f840:	3301      	adds	r3, #1
 800f842:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f848:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800f84a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d188      	bne.n	800f762 <_tx_byte_pool_search+0x62>
 800f850:	e000      	b.n	800f854 <_tx_byte_pool_search+0x154>
                    break;
 800f852:	46c0      	nop			@ (mov r8, r8)

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800f854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f856:	2b00      	cmp	r3, #0
 800f858:	d048      	beq.n	800f8ec <_tx_byte_pool_search+0x1ec>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800f85a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	1ad3      	subs	r3, r2, r3
 800f860:	2b13      	cmp	r3, #19
 800f862:	d91e      	bls.n	800f8a2 <_tx_byte_pool_search+0x1a2>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800f864:	683b      	ldr	r3, [r7, #0]
 800f866:	3308      	adds	r3, #8
 800f868:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f86a:	18d3      	adds	r3, r2, r3
 800f86c:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800f86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f870:	623b      	str	r3, [r7, #32]
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f872:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f874:	62bb      	str	r3, [r7, #40]	@ 0x28
                *next_block_link_ptr =  *this_block_link_ptr;
 800f876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f878:	681a      	ldr	r2, [r3, #0]
 800f87a:	6a3b      	ldr	r3, [r7, #32]
 800f87c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800f87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f880:	3304      	adds	r3, #4
 800f882:	633b      	str	r3, [r7, #48]	@ 0x30
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800f884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f886:	62fb      	str	r3, [r7, #44]	@ 0x2c
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800f888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f88a:	4a20      	ldr	r2, [pc, #128]	@ (800f90c <_tx_byte_pool_search+0x20c>)
 800f88c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	68db      	ldr	r3, [r3, #12]
 800f892:	1c5a      	adds	r2, r3, #1
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800f898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f89a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f89c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800f89e:	683b      	ldr	r3, [r7, #0]
 800f8a0:	647b      	str	r3, [r7, #68]	@ 0x44
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800f8a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8a4:	3304      	adds	r3, #4
 800f8a6:	633b      	str	r3, [r7, #48]	@ 0x30
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800f8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f8aa:	62bb      	str	r3, [r7, #40]	@ 0x28
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800f8ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8ae:	687a      	ldr	r2, [r7, #4]
 800f8b0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	689a      	ldr	r2, [r3, #8]
 800f8b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f8b8:	1ad3      	subs	r3, r2, r3
 800f8ba:	3b08      	subs	r3, #8
 800f8bc:	001a      	movs	r2, r3
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	695b      	ldr	r3, [r3, #20]
 800f8c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f8c8:	429a      	cmp	r2, r3
 800f8ca:	d105      	bne.n	800f8d8 <_tx_byte_pool_search+0x1d8>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800f8cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800f8d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8d2:	681a      	ldr	r2, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	615a      	str	r2, [r3, #20]
 800f8d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8da:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	f383 8810 	msr	PRIMASK, r3
}
 800f8e2:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800f8e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8e6:	3308      	adds	r3, #8
 800f8e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800f8ea:	e007      	b.n	800f8fc <_tx_byte_pool_search+0x1fc>
 800f8ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f8ee:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f8f0:	68bb      	ldr	r3, [r7, #8]
 800f8f2:	f383 8810 	msr	PRIMASK, r3
}
 800f8f6:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800f8f8:	2300      	movs	r3, #0
 800f8fa:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800f8fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800f8fe:	0018      	movs	r0, r3
 800f900:	46bd      	mov	sp, r7
 800f902:	b014      	add	sp, #80	@ 0x50
 800f904:	bd80      	pop	{r7, pc}
 800f906:	46c0      	nop			@ (mov r8, r8)
 800f908:	20010fe8 	.word	0x20010fe8
 800f90c:	ffffeeee 	.word	0xffffeeee

0800f910 <_tx_event_flags_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_event_flags_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b08c      	sub	sp, #48	@ 0x30
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f91a:	f3ef 8310 	mrs	r3, PRIMASK
 800f91e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f920:	b672      	cpsid	i
    return(primask_value);
 800f922:	697b      	ldr	r3, [r7, #20]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the event flags group.  */
    TX_DISABLE
 800f924:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_event_flags_cleanup))
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800f92a:	4b37      	ldr	r3, [pc, #220]	@ (800fa08 <_tx_event_flags_cleanup+0xf8>)
 800f92c:	429a      	cmp	r2, r3
 800f92e:	d161      	bne.n	800f9f4 <_tx_event_flags_cleanup+0xe4>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	22ac      	movs	r2, #172	@ 0xac
 800f934:	589b      	ldr	r3, [r3, r2]
 800f936:	683a      	ldr	r2, [r7, #0]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d15b      	bne.n	800f9f4 <_tx_event_flags_cleanup+0xe4>
        {

            /* Setup pointer to event flags control block.  */
            group_ptr =  TX_VOID_TO_EVENT_FLAGS_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f940:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for a NULL event flags control block pointer.  */
            if (group_ptr != TX_NULL)
 800f942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f944:	2b00      	cmp	r3, #0
 800f946:	d055      	beq.n	800f9f4 <_tx_event_flags_cleanup+0xe4>
            {

                /* Is the group pointer ID valid?  */
                if (group_ptr -> tx_event_flags_group_id == TX_EVENT_FLAGS_ID)
 800f948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	4a2f      	ldr	r2, [pc, #188]	@ (800fa0c <_tx_event_flags_cleanup+0xfc>)
 800f94e:	4293      	cmp	r3, r2
 800f950:	d150      	bne.n	800f9f4 <_tx_event_flags_cleanup+0xe4>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800f952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f954:	695b      	ldr	r3, [r3, #20]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d04c      	beq.n	800f9f4 <_tx_event_flags_cleanup+0xe4>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2200      	movs	r2, #0
 800f95e:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Pickup the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800f960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f962:	695b      	ldr	r3, [r3, #20]
 800f964:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Pickup the suspension head.  */
                        suspension_head =  group_ptr -> tx_event_flags_group_suspension_list;
 800f966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f968:	691b      	ldr	r3, [r3, #16]
 800f96a:	623b      	str	r3, [r7, #32]

                        /* Determine if the cleanup is being done while a set operation was interrupted.  If the
                           suspended count is non-zero and the suspension head is NULL, the list is being processed
                           and cannot be touched from here. The suspension list removal will instead take place
                           inside the event flag set code.  */
                        if (suspension_head != TX_NULL)
 800f96c:	6a3b      	ldr	r3, [r7, #32]
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d020      	beq.n	800f9b4 <_tx_event_flags_cleanup+0xa4>
                        {

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the local suspension count.  */
                            suspended_count--;
 800f972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f974:	3b01      	subs	r3, #1
 800f976:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Store the updated suspended count.  */
                            group_ptr -> tx_event_flags_group_suspended_count =  suspended_count;
 800f978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f97a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f97c:	615a      	str	r2, [r3, #20]

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 800f97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f980:	2b00      	cmp	r3, #0
 800f982:	d103      	bne.n	800f98c <_tx_event_flags_cleanup+0x7c>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800f984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f986:	2200      	movs	r2, #0
 800f988:	611a      	str	r2, [r3, #16]
 800f98a:	e016      	b.n	800f9ba <_tx_event_flags_cleanup+0xaa>
                            {

                                /* At least one more thread is on the same suspension list.  */

                                /* Update the links of the adjacent threads.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800f990:	61fb      	str	r3, [r7, #28]
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f996:	61bb      	str	r3, [r7, #24]
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	69ba      	ldr	r2, [r7, #24]
 800f99c:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	69fa      	ldr	r2, [r7, #28]
 800f9a2:	671a      	str	r2, [r3, #112]	@ 0x70

                                /* Determine if we need to update the head pointer.  */
                                if (suspension_head == thread_ptr)
 800f9a4:	6a3a      	ldr	r2, [r7, #32]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d106      	bne.n	800f9ba <_tx_event_flags_cleanup+0xaa>
                                {

                                    /* Update the list head pointer.  */
                                    group_ptr -> tx_event_flags_group_suspension_list =  next_thread;
 800f9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9ae:	69fa      	ldr	r2, [r7, #28]
 800f9b0:	611a      	str	r2, [r3, #16]
 800f9b2:	e002      	b.n	800f9ba <_tx_event_flags_cleanup+0xaa>
                        }
                        else
                        {

                            /* In this case, the search pointer in an interrupted event flag set must be reset.  */
                            group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 800f9b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f9b6:	2201      	movs	r2, #1
 800f9b8:	60da      	str	r2, [r3, #12]
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9be:	2b07      	cmp	r3, #7
 800f9c0:	d118      	bne.n	800f9f4 <_tx_event_flags_cleanup+0xe4>
                            /* Increment the number of timeouts on this event flags group.  */
                            group_ptr -> tx_event_flags_group____performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_EVENTS;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	2284      	movs	r2, #132	@ 0x84
 800f9c6:	2107      	movs	r1, #7
 800f9c8:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                           /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800f9ca:	4b11      	ldr	r3, [pc, #68]	@ (800fa10 <_tx_event_flags_cleanup+0x100>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	1c5a      	adds	r2, r3, #1
 800f9d0:	4b0f      	ldr	r3, [pc, #60]	@ (800fa10 <_tx_event_flags_cleanup+0x100>)
 800f9d2:	601a      	str	r2, [r3, #0]
 800f9d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	f383 8810 	msr	PRIMASK, r3
}
 800f9de:	46c0      	nop			@ (mov r8, r8)
                            TX_RESTORE

                            /* Resume the thread!  Check for preemption even though we are executing
                               from the system timer thread right now which normally executes at the
                               highest priority.  */
                            _tx_thread_system_resume(thread_ptr);
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	0018      	movs	r0, r3
 800f9e4:	f002 fa50 	bl	8011e88 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800f9e8:	f3ef 8310 	mrs	r3, PRIMASK
 800f9ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800f9ee:	b672      	cpsid	i
    return(primask_value);
 800f9f0:	693b      	ldr	r3, [r7, #16]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800f9f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f9f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800f9f8:	68bb      	ldr	r3, [r7, #8]
 800f9fa:	f383 8810 	msr	PRIMASK, r3
}
 800f9fe:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800fa00:	46c0      	nop			@ (mov r8, r8)
 800fa02:	46bd      	mov	sp, r7
 800fa04:	b00c      	add	sp, #48	@ 0x30
 800fa06:	bd80      	pop	{r7, pc}
 800fa08:	0800f911 	.word	0x0800f911
 800fa0c:	4456444e 	.word	0x4456444e
 800fa10:	20011080 	.word	0x20011080

0800fa14 <_tx_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b08c      	sub	sp, #48	@ 0x30
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Initialize event flags control block to all zeros.  */
    TX_MEMSET(group_ptr, 0, (sizeof(TX_EVENT_FLAGS_GROUP)));
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fa22:	2327      	movs	r3, #39	@ 0x27
 800fa24:	18fb      	adds	r3, r7, r3
 800fa26:	2200      	movs	r2, #0
 800fa28:	701a      	strb	r2, [r3, #0]
 800fa2a:	2324      	movs	r3, #36	@ 0x24
 800fa2c:	623b      	str	r3, [r7, #32]
 800fa2e:	2300      	movs	r3, #0
 800fa30:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fa32:	e009      	b.n	800fa48 <_tx_event_flags_create+0x34>
 800fa34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fa36:	1c5a      	adds	r2, r3, #1
 800fa38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fa3a:	2227      	movs	r2, #39	@ 0x27
 800fa3c:	18ba      	adds	r2, r7, r2
 800fa3e:	7812      	ldrb	r2, [r2, #0]
 800fa40:	701a      	strb	r2, [r3, #0]
 800fa42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa44:	3301      	adds	r3, #1
 800fa46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fa48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fa4a:	6a3b      	ldr	r3, [r7, #32]
 800fa4c:	429a      	cmp	r2, r3
 800fa4e:	d3f1      	bcc.n	800fa34 <_tx_event_flags_create+0x20>

    /* Setup the basic event flags group fields.  */
    group_ptr -> tx_event_flags_group_name =             name_ptr;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	683a      	ldr	r2, [r7, #0]
 800fa54:	605a      	str	r2, [r3, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fa56:	f3ef 8310 	mrs	r3, PRIMASK
 800fa5a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fa5c:	b672      	cpsid	i
    return(primask_value);
 800fa5e:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts to put the event flags group on the created list.  */
    TX_DISABLE
 800fa60:	61fb      	str	r3, [r7, #28]

    /* Setup the event flags ID to make it valid.  */
    group_ptr -> tx_event_flags_group_id =  TX_EVENT_FLAGS_ID;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4a18      	ldr	r2, [pc, #96]	@ (800fac8 <_tx_event_flags_create+0xb4>)
 800fa66:	601a      	str	r2, [r3, #0]

    /* Place the group on the list of created event flag groups.  First,
       check for an empty list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800fa68:	4b18      	ldr	r3, [pc, #96]	@ (800facc <_tx_event_flags_create+0xb8>)
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d109      	bne.n	800fa84 <_tx_event_flags_create+0x70>
    {

        /* The created event flags list is empty.  Add event flag group to empty list.  */
        _tx_event_flags_created_ptr =                         group_ptr;
 800fa70:	4b17      	ldr	r3, [pc, #92]	@ (800fad0 <_tx_event_flags_create+0xbc>)
 800fa72:	687a      	ldr	r2, [r7, #4]
 800fa74:	601a      	str	r2, [r3, #0]
        group_ptr -> tx_event_flags_group_created_next =      group_ptr;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	687a      	ldr	r2, [r7, #4]
 800fa7a:	619a      	str	r2, [r3, #24]
        group_ptr -> tx_event_flags_group_created_previous =  group_ptr;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	687a      	ldr	r2, [r7, #4]
 800fa80:	61da      	str	r2, [r3, #28]
 800fa82:	e011      	b.n	800faa8 <_tx_event_flags_create+0x94>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_group =      _tx_event_flags_created_ptr;
 800fa84:	4b12      	ldr	r3, [pc, #72]	@ (800fad0 <_tx_event_flags_create+0xbc>)
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	61bb      	str	r3, [r7, #24]
        previous_group =  next_group -> tx_event_flags_group_created_previous;
 800fa8a:	69bb      	ldr	r3, [r7, #24]
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	617b      	str	r3, [r7, #20]

        /* Place the new event flag group in the list.  */
        next_group -> tx_event_flags_group_created_previous =  group_ptr;
 800fa90:	69bb      	ldr	r3, [r7, #24]
 800fa92:	687a      	ldr	r2, [r7, #4]
 800fa94:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  group_ptr;
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	619a      	str	r2, [r3, #24]

        /* Setup this group's created links.  */
        group_ptr -> tx_event_flags_group_created_previous =  previous_group;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	697a      	ldr	r2, [r7, #20]
 800faa0:	61da      	str	r2, [r3, #28]
        group_ptr -> tx_event_flags_group_created_next =      next_group;
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	69ba      	ldr	r2, [r7, #24]
 800faa6:	619a      	str	r2, [r3, #24]
    }

    /* Increment the number of created event flag groups.  */
    _tx_event_flags_created_count++;
 800faa8:	4b08      	ldr	r3, [pc, #32]	@ (800facc <_tx_event_flags_create+0xb8>)
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	1c5a      	adds	r2, r3, #1
 800faae:	4b07      	ldr	r3, [pc, #28]	@ (800facc <_tx_event_flags_create+0xb8>)
 800fab0:	601a      	str	r2, [r3, #0]
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	f383 8810 	msr	PRIMASK, r3
}
 800fabc:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800fabe:	2300      	movs	r3, #0
}
 800fac0:	0018      	movs	r0, r3
 800fac2:	46bd      	mov	sp, r7
 800fac4:	b00c      	add	sp, #48	@ 0x30
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	4456444e 	.word	0x4456444e
 800facc:	20010fc4 	.word	0x20010fc4
 800fad0:	20010fc0 	.word	0x20010fc0

0800fad4 <_tx_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b08e      	sub	sp, #56	@ 0x38
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fadc:	f3ef 8310 	mrs	r3, PRIMASK
 800fae0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fae2:	b672      	cpsid	i
    return(primask_value);
 800fae4:	69fb      	ldr	r3, [r7, #28]
TX_EVENT_FLAGS_GROUP    *next_group;
TX_EVENT_FLAGS_GROUP    *previous_group;


    /* Disable interrupts to remove the group from the created list.  */
    TX_DISABLE
 800fae6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_DELETE_INSERT

    /* Clear the event flag group ID to make it invalid.  */
    group_ptr -> tx_event_flags_group_id =  TX_CLEAR_ID;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created event flag groups.  */
    _tx_event_flags_created_count--;
 800faee:	4b3c      	ldr	r3, [pc, #240]	@ (800fbe0 <_tx_event_flags_delete+0x10c>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	1e5a      	subs	r2, r3, #1
 800faf4:	4b3a      	ldr	r3, [pc, #232]	@ (800fbe0 <_tx_event_flags_delete+0x10c>)
 800faf6:	601a      	str	r2, [r3, #0]

    /* See if this group is the only one on the list.  */
    if (_tx_event_flags_created_count == TX_EMPTY)
 800faf8:	4b39      	ldr	r3, [pc, #228]	@ (800fbe0 <_tx_event_flags_delete+0x10c>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d103      	bne.n	800fb08 <_tx_event_flags_delete+0x34>
    {

        /* Only created event flag group, just set the created list to NULL.  */
        _tx_event_flags_created_ptr =  TX_NULL;
 800fb00:	4b38      	ldr	r3, [pc, #224]	@ (800fbe4 <_tx_event_flags_delete+0x110>)
 800fb02:	2200      	movs	r2, #0
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	e013      	b.n	800fb30 <_tx_event_flags_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_group =                                           group_ptr -> tx_event_flags_group_created_next;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	699b      	ldr	r3, [r3, #24]
 800fb0c:	62bb      	str	r3, [r7, #40]	@ 0x28
        previous_group =                                       group_ptr -> tx_event_flags_group_created_previous;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	69db      	ldr	r3, [r3, #28]
 800fb12:	627b      	str	r3, [r7, #36]	@ 0x24
        next_group -> tx_event_flags_group_created_previous =  previous_group;
 800fb14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb18:	61da      	str	r2, [r3, #28]
        previous_group -> tx_event_flags_group_created_next =  next_group;
 800fb1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb1e:	619a      	str	r2, [r3, #24]

        /* See if we have to update the created list head pointer.  */
        if (_tx_event_flags_created_ptr == group_ptr)
 800fb20:	4b30      	ldr	r3, [pc, #192]	@ (800fbe4 <_tx_event_flags_delete+0x110>)
 800fb22:	681b      	ldr	r3, [r3, #0]
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d102      	bne.n	800fb30 <_tx_event_flags_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_event_flags_created_ptr =  next_group;
 800fb2a:	4b2e      	ldr	r3, [pc, #184]	@ (800fbe4 <_tx_event_flags_delete+0x110>)
 800fb2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fb2e:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800fb30:	4b2d      	ldr	r3, [pc, #180]	@ (800fbe8 <_tx_event_flags_delete+0x114>)
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	1c5a      	adds	r2, r3, #1
 800fb36:	4b2c      	ldr	r3, [pc, #176]	@ (800fbe8 <_tx_event_flags_delete+0x114>)
 800fb38:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                         group_ptr -> tx_event_flags_group_suspension_list;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	691b      	ldr	r3, [r3, #16]
 800fb3e:	637b      	str	r3, [r7, #52]	@ 0x34
    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2200      	movs	r2, #0
 800fb44:	611a      	str	r2, [r3, #16]
    suspended_count =                                    group_ptr -> tx_event_flags_group_suspended_count;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	695b      	ldr	r3, [r3, #20]
 800fb4a:	633b      	str	r3, [r7, #48]	@ 0x30
    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2200      	movs	r2, #0
 800fb50:	615a      	str	r2, [r3, #20]
 800fb52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb54:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	f383 8810 	msr	PRIMASK, r3
}
 800fb5c:	46c0      	nop			@ (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the event flag suspension list to resume any and all threads
       suspended on this group.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 800fb5e:	e023      	b.n	800fba8 <_tx_event_flags_delete+0xd4>
    {

        /* Decrement the number of suspended threads.  */
        suspended_count--;
 800fb60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb62:	3b01      	subs	r3, #1
 800fb64:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fb66:	f3ef 8310 	mrs	r3, PRIMASK
 800fb6a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fb6c:	b672      	cpsid	i
    return(primask_value);
 800fb6e:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 800fb70:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fb72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb74:	2200      	movs	r2, #0
 800fb76:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 800fb78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb7a:	2284      	movs	r2, #132	@ 0x84
 800fb7c:	2101      	movs	r1, #1
 800fb7e:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 800fb80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb84:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 800fb86:	4b18      	ldr	r3, [pc, #96]	@ (800fbe8 <_tx_event_flags_delete+0x114>)
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	1c5a      	adds	r2, r3, #1
 800fb8c:	4b16      	ldr	r3, [pc, #88]	@ (800fbe8 <_tx_event_flags_delete+0x114>)
 800fb8e:	601a      	str	r2, [r3, #0]
 800fb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb92:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	f383 8810 	msr	PRIMASK, r3
}
 800fb9a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 800fb9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fb9e:	0018      	movs	r0, r3
 800fba0:	f002 f972 	bl	8011e88 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 800fba4:	6a3b      	ldr	r3, [r7, #32]
 800fba6:	637b      	str	r3, [r7, #52]	@ 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 800fba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d1d8      	bne.n	800fb60 <_tx_event_flags_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fbae:	f3ef 8310 	mrs	r3, PRIMASK
 800fbb2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fbb4:	b672      	cpsid	i
    return(primask_value);
 800fbb6:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_EVENT_FLAGS_GROUP_DELETE_PORT_COMPLETION(group_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 800fbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 800fbba:	4b0b      	ldr	r3, [pc, #44]	@ (800fbe8 <_tx_event_flags_delete+0x114>)
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	1e5a      	subs	r2, r3, #1
 800fbc0:	4b09      	ldr	r3, [pc, #36]	@ (800fbe8 <_tx_event_flags_delete+0x114>)
 800fbc2:	601a      	str	r2, [r3, #0]
 800fbc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbc6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f383 8810 	msr	PRIMASK, r3
}
 800fbce:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 800fbd0:	f002 f922 	bl	8011e18 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800fbd4:	2300      	movs	r3, #0
}
 800fbd6:	0018      	movs	r0, r3
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	b00e      	add	sp, #56	@ 0x38
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	46c0      	nop			@ (mov r8, r8)
 800fbe0:	20010fc4 	.word	0x20010fc4
 800fbe4:	20010fc0 	.word	0x20010fc0
 800fbe8:	20011080 	.word	0x20011080

0800fbec <_tx_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b094      	sub	sp, #80	@ 0x50
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	60f8      	str	r0, [r7, #12]
 800fbf4:	60b9      	str	r1, [r7, #8]
 800fbf6:	607a      	str	r2, [r7, #4]
 800fbf8:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fbfa:	f3ef 8310 	mrs	r3, PRIMASK
 800fbfe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fc00:	b672      	cpsid	i
    return(primask_value);
 800fc02:	69fb      	ldr	r3, [r7, #28]
UINT            interrupted_set_request;
#endif


    /* Disable interrupts to examine the event flags group.  */
    TX_DISABLE
 800fc04:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_GET_INSERT

    /* Pickup current flags.  */
    current_flags =  group_ptr -> tx_event_flags_group_current;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Apply the event flag option mask.  */
    and_request =  (get_option & TX_AND);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2202      	movs	r2, #2
 800fc10:	4013      	ands	r3, r2
 800fc12:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

#else

    /* Pickup delayed clear flags.  */
    delayed_clear_flags =  group_ptr -> tx_event_flags_group_delayed_clear;
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	6a1b      	ldr	r3, [r3, #32]
 800fc18:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if there are any delayed clear operations pending.  */
    if (delayed_clear_flags != ((ULONG) 0))
 800fc1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d004      	beq.n	800fc2a <_tx_event_flags_get+0x3e>
    {

        /* Yes, apply them to the current flags.  */
        current_flags =  current_flags & (~delayed_clear_flags);
 800fc20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc22:	43da      	mvns	r2, r3
 800fc24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc26:	4013      	ands	r3, r2
 800fc28:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    /* Check for AND condition. All flags must be present to satisfy request.  */
    if (and_request == TX_AND)
 800fc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2c:	2b02      	cmp	r3, #2
 800fc2e:	d10a      	bne.n	800fc46 <_tx_event_flags_get+0x5a>
    {

        /* AND request is present.  */

        /* Calculate the flags present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800fc30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc32:	68ba      	ldr	r2, [r7, #8]
 800fc34:	4013      	ands	r3, r2
 800fc36:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Determine if they satisfy the AND request.  */
        if (flags_satisfied != requested_flags)
 800fc38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc3a:	68bb      	ldr	r3, [r7, #8]
 800fc3c:	429a      	cmp	r2, r3
 800fc3e:	d006      	beq.n	800fc4e <_tx_event_flags_get+0x62>
        {

            /* No, not all the requested flags are present. Clear the flags present variable.  */
            flags_satisfied =  ((ULONG) 0);
 800fc40:	2300      	movs	r3, #0
 800fc42:	643b      	str	r3, [r7, #64]	@ 0x40
 800fc44:	e003      	b.n	800fc4e <_tx_event_flags_get+0x62>
    else
    {

        /* OR request is present. Simply AND together the requested flags and the current flags
           to see if any are present.  */
        flags_satisfied =  (current_flags & requested_flags);
 800fc46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fc48:	68ba      	ldr	r2, [r7, #8]
 800fc4a:	4013      	ands	r3, r2
 800fc4c:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Determine if the request is satisfied.  */
    if (flags_satisfied != ((ULONG) 0))
 800fc4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	d029      	beq.n	800fca8 <_tx_event_flags_get+0xbc>
    {

        /* Yes, this request can be handled immediately.  */

        /* Return the actual event flags that satisfied the request.  */
        *actual_flags_ptr =  current_flags;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc58:	601a      	str	r2, [r3, #0]

        /* Pickup the clear bit.  */
        clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	2201      	movs	r2, #1
 800fc5e:	4013      	ands	r3, r2
 800fc60:	623b      	str	r3, [r7, #32]

        /* Determine whether or not clearing needs to take place.  */
        if (clear_request == TX_TRUE)
 800fc62:	6a3b      	ldr	r3, [r7, #32]
 800fc64:	2b01      	cmp	r3, #1
 800fc66:	d11c      	bne.n	800fca2 <_tx_event_flags_get+0xb6>
        {

            /* Set interrupted set request flag to false.  */
            interrupted_set_request =  TX_FALSE;
 800fc68:	2300      	movs	r3, #0
 800fc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Determine if the suspension list is being processed by an interrupted
               set request.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	695b      	ldr	r3, [r3, #20]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d005      	beq.n	800fc80 <_tx_event_flags_get+0x94>
            {

                if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	691b      	ldr	r3, [r3, #16]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d101      	bne.n	800fc80 <_tx_event_flags_get+0x94>
                {

                    /* Set the interrupted set request flag.  */
                    interrupted_set_request =  TX_TRUE;
 800fc7c:	2301      	movs	r3, #1
 800fc7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                }
            }

            /* Was a set request interrupted?  */
            if (interrupted_set_request == TX_TRUE)
 800fc80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc82:	2b01      	cmp	r3, #1
 800fc84:	d106      	bne.n	800fc94 <_tx_event_flags_get+0xa8>
                /* A previous set operation is was interrupted, we need to defer the
                   event clearing until the set operation is complete.  */

                /* Remember the events to clear.  */
                group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | requested_flags;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6a1a      	ldr	r2, [r3, #32]
 800fc8a:	68bb      	ldr	r3, [r7, #8]
 800fc8c:	431a      	orrs	r2, r3
                group_ptr -> tx_event_flags_group_delayed_clear =
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	621a      	str	r2, [r3, #32]
 800fc92:	e006      	b.n	800fca2 <_tx_event_flags_get+0xb6>
            else
            {

                /* Yes, clear the flags that satisfied this request.  */
                group_ptr -> tx_event_flags_group_current =
                                        group_ptr -> tx_event_flags_group_current & ~requested_flags;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	689b      	ldr	r3, [r3, #8]
 800fc98:	68ba      	ldr	r2, [r7, #8]
 800fc9a:	43d2      	mvns	r2, r2
 800fc9c:	401a      	ands	r2, r3
                group_ptr -> tx_event_flags_group_current =
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	609a      	str	r2, [r3, #8]
            }
        }

        /* Set status to success.  */
        status =  TX_SUCCESS;
 800fca2:	2300      	movs	r3, #0
 800fca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fca6:	e06f      	b.n	800fd88 <_tx_event_flags_get+0x19c>
#endif
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800fca8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d06a      	beq.n	800fd84 <_tx_event_flags_get+0x198>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800fcae:	4b3c      	ldr	r3, [pc, #240]	@ (800fda0 <_tx_event_flags_get+0x1b4>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d002      	beq.n	800fcbc <_tx_event_flags_get+0xd0>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point, return error completion.  */
                status =  TX_NO_EVENTS;
 800fcb6:	2307      	movs	r3, #7
 800fcb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fcba:	e065      	b.n	800fd88 <_tx_event_flags_get+0x19c>
                /* Increment the number of event flags suspensions on this semaphore.  */
                group_ptr -> tx_event_flags_group___performance_suspension_count++;
#endif

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(thread_ptr)
 800fcbc:	4b39      	ldr	r3, [pc, #228]	@ (800fda4 <_tx_event_flags_get+0x1b8>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	633b      	str	r3, [r7, #48]	@ 0x30

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_event_flags_cleanup);
 800fcc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcc4:	4a38      	ldr	r2, [pc, #224]	@ (800fda8 <_tx_event_flags_get+0x1bc>)
 800fcc6:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Remember which event flags we are looking for.  */
                thread_ptr -> tx_thread_suspend_info =  requested_flags;
 800fcc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcca:	68ba      	ldr	r2, [r7, #8]
 800fccc:	679a      	str	r2, [r3, #120]	@ 0x78

                /* Save the get option as well.  */
                thread_ptr -> tx_thread_suspend_option =  get_option;
 800fcce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd0:	2180      	movs	r1, #128	@ 0x80
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	505a      	str	r2, [r3, r1]

                /* Save the destination for the current events.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) actual_flags_ptr;
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd8:	683a      	ldr	r2, [r7, #0]
 800fcda:	67da      	str	r2, [r3, #124]	@ 0x7c

                /* Setup cleanup information, i.e. this event flags group control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) group_ptr;
 800fcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcde:	68fa      	ldr	r2, [r7, #12]
 800fce0:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800fce2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fce4:	22ac      	movs	r2, #172	@ 0xac
 800fce6:	589b      	ldr	r3, [r3, r2]
 800fce8:	1c5a      	adds	r2, r3, #1
 800fcea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcec:	21ac      	movs	r1, #172	@ 0xac
 800fcee:	505a      	str	r2, [r3, r1]
#endif

                /* Pickup the suspended count.  */
                suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	695b      	ldr	r3, [r3, #20]
 800fcf4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800fcf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d109      	bne.n	800fd10 <_tx_event_flags_get+0x124>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    group_ptr -> tx_event_flags_group_suspension_list =   thread_ptr;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd00:	611a      	str	r2, [r3, #16]
                    thread_ptr -> tx_thread_suspended_next =              thread_ptr;
 800fd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd06:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =          thread_ptr;
 800fd08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd0c:	675a      	str	r2, [r3, #116]	@ 0x74
 800fd0e:	e011      	b.n	800fd34 <_tx_event_flags_get+0x148>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   group_ptr -> tx_event_flags_group_suspension_list;
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	691b      	ldr	r3, [r3, #16]
 800fd14:	62bb      	str	r3, [r7, #40]	@ 0x28
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800fd16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fd1a:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800fd1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fd20:	627b      	str	r3, [r7, #36]	@ 0x24
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800fd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fd26:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800fd28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd2c:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800fd2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd32:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the number of threads suspended.  */
                group_ptr -> tx_event_flags_group_suspended_count++;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	695b      	ldr	r3, [r3, #20]
 800fd38:	1c5a      	adds	r2, r3, #1
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	615a      	str	r2, [r3, #20]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_EVENT_FLAG;
 800fd3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd40:	2207      	movs	r2, #7
 800fd42:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800fd44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd46:	2201      	movs	r2, #1
 800fd48:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800fd4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fd4e:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800fd50:	4b13      	ldr	r3, [pc, #76]	@ (800fda0 <_tx_event_flags_get+0x1b4>)
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	1c5a      	adds	r2, r3, #1
 800fd56:	4b12      	ldr	r3, [pc, #72]	@ (800fda0 <_tx_event_flags_get+0x1b4>)
 800fd58:	601a      	str	r2, [r3, #0]
 800fd5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd5c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd5e:	697b      	ldr	r3, [r7, #20]
 800fd60:	f383 8810 	msr	PRIMASK, r3
}
 800fd64:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800fd66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd68:	0018      	movs	r0, r3
 800fd6a:	f002 f98d 	bl	8012088 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fd6e:	f3ef 8310 	mrs	r3, PRIMASK
 800fd72:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fd74:	b672      	cpsid	i
    return(primask_value);
 800fd76:	69bb      	ldr	r3, [r7, #24]

                /* Disable interrupts.  */
                TX_DISABLE
 800fd78:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800fd7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd7c:	2284      	movs	r2, #132	@ 0x84
 800fd7e:	589b      	ldr	r3, [r3, r2]
 800fd80:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd82:	e001      	b.n	800fd88 <_tx_event_flags_get+0x19c>
        }
        else
        {

            /* Immediate return, return error completion.  */
            status =  TX_NO_EVENTS;
 800fd84:	2307      	movs	r3, #7
 800fd86:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fd88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd8a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fd8c:	693b      	ldr	r3, [r7, #16]
 800fd8e:	f383 8810 	msr	PRIMASK, r3
}
 800fd92:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(status);
 800fd94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800fd96:	0018      	movs	r0, r3
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	b014      	add	sp, #80	@ 0x50
 800fd9c:	bd80      	pop	{r7, pc}
 800fd9e:	46c0      	nop			@ (mov r8, r8)
 800fda0:	20011080 	.word	0x20011080
 800fda4:	20010fe8 	.word	0x20010fe8
 800fda8:	0800f911 	.word	0x0800f911

0800fdac <_tx_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 800fdac:	b590      	push	{r4, r7, lr}
 800fdae:	b0a3      	sub	sp, #140	@ 0x8c
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	60f8      	str	r0, [r7, #12]
 800fdb4:	60b9      	str	r1, [r7, #8]
 800fdb6:	607a      	str	r2, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800fdb8:	f3ef 8310 	mrs	r3, PRIMASK
 800fdbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800fdbe:	b672      	cpsid	i
    return(primask_value);
 800fdc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
VOID            (*events_set_notify)(struct TX_EVENT_FLAGS_GROUP_STRUCT *notify_group_ptr);
#endif


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 800fdc2:	2284      	movs	r2, #132	@ 0x84
 800fdc4:	18ba      	adds	r2, r7, r2
 800fdc6:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_EVENT_FLAGS_SET_INSERT

    /* Determine how to set this group's event flags.  */
    if ((set_option & TX_EVENT_FLAGS_AND_MASK) == TX_AND)
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2202      	movs	r2, #2
 800fdcc:	4013      	ands	r3, r2
 800fdce:	d024      	beq.n	800fe1a <_tx_event_flags_set+0x6e>
    {

#ifndef TX_NOT_INTERRUPTABLE

        /* Set interrupted set request flag to false.  */
        interrupted_set_request =  TX_FALSE;
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Determine if the suspension list is being processed by an interrupted
           set request.  */
        if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	695b      	ldr	r3, [r3, #20]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d005      	beq.n	800fde8 <_tx_event_flags_set+0x3c>
        {

            if (group_ptr -> tx_event_flags_group_suspension_list == TX_NULL)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	691b      	ldr	r3, [r3, #16]
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d101      	bne.n	800fde8 <_tx_event_flags_set+0x3c>
            {

                /* Set the interrupted set request flag.  */
                interrupted_set_request =  TX_TRUE;
 800fde4:	2301      	movs	r3, #1
 800fde6:	663b      	str	r3, [r7, #96]	@ 0x60
            }
        }

        /* Was a set request interrupted?  */
        if (interrupted_set_request == TX_TRUE)
 800fde8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fdea:	2b01      	cmp	r3, #1
 800fdec:	d107      	bne.n	800fdfe <_tx_event_flags_set+0x52>
            /* A previous set operation was interrupted, we need to defer the
               event clearing until the set operation is complete.  */

            /* Remember the events to clear.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear | ~flags_to_set;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	6a1a      	ldr	r2, [r3, #32]
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	43db      	mvns	r3, r3
 800fdf6:	431a      	orrs	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	621a      	str	r2, [r3, #32]
 800fdfc:	e005      	b.n	800fe0a <_tx_event_flags_set+0x5e>

            /* Previous set operation was not interrupted, simply clear the
               specified flags by "ANDing" the flags into the current events
               of the group.  */
            group_ptr -> tx_event_flags_group_current =
                group_ptr -> tx_event_flags_group_current & flags_to_set;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	68ba      	ldr	r2, [r7, #8]
 800fe04:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_current =
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	609a      	str	r2, [r3, #8]
 800fe0a:	2384      	movs	r3, #132	@ 0x84
 800fe0c:	18fb      	adds	r3, r7, r3
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800fe12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fe14:	f383 8810 	msr	PRIMASK, r3
}
 800fe18:	e1ce      	b.n	80101b8 <_tx_event_flags_set+0x40c>
        events_set_notify =  group_ptr -> tx_event_flags_group_set_notify;
#endif

        /* "OR" the flags into the current events of the group.  */
        group_ptr -> tx_event_flags_group_current =
            group_ptr -> tx_event_flags_group_current | flags_to_set;
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	689a      	ldr	r2, [r3, #8]
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	431a      	orrs	r2, r3
        group_ptr -> tx_event_flags_group_current =
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	609a      	str	r2, [r3, #8]

#ifndef TX_NOT_INTERRUPTABLE

        /* Determine if there are any delayed flags to clear.  */
        if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	6a1b      	ldr	r3, [r3, #32]
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d006      	beq.n	800fe3c <_tx_event_flags_set+0x90>
        {

            /* Yes, we need to neutralize the delayed clearing as well.  */
            group_ptr -> tx_event_flags_group_delayed_clear =
                                        group_ptr -> tx_event_flags_group_delayed_clear & ~flags_to_set;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6a1b      	ldr	r3, [r3, #32]
 800fe32:	68ba      	ldr	r2, [r7, #8]
 800fe34:	43d2      	mvns	r2, r2
 800fe36:	401a      	ands	r2, r3
            group_ptr -> tx_event_flags_group_delayed_clear =
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	621a      	str	r2, [r3, #32]
        }
#endif

        /* Clear the preempt check flag.  */
        preempt_check =  TX_FALSE;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Pickup the thread suspended count.  */
        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	695b      	ldr	r3, [r3, #20]
 800fe44:	673b      	str	r3, [r7, #112]	@ 0x70

        /* Determine if there are any threads suspended on the event flag group.  */
        if (group_ptr -> tx_event_flags_group_suspension_list != TX_NULL)
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	691b      	ldr	r3, [r3, #16]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d100      	bne.n	800fe50 <_tx_event_flags_set+0xa4>
 800fe4e:	e19f      	b.n	8010190 <_tx_event_flags_set+0x3e4>
        {

            /* Determine if there is just a single thread waiting on the event
               flag group.  */
            if (suspended_count == ((UINT) 1))
 800fe50:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800fe52:	2b01      	cmp	r3, #1
 800fe54:	d16c      	bne.n	800ff30 <_tx_event_flags_set+0x184>

                /* Single thread waiting for event flags.  Bypass the multiple thread
                   logic.  */

                /* Setup thread pointer.  */
                thread_ptr =  group_ptr -> tx_event_flags_group_suspension_list;
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	691b      	ldr	r3, [r3, #16]
 800fe5a:	2280      	movs	r2, #128	@ 0x80
 800fe5c:	18b9      	adds	r1, r7, r2
 800fe5e:	600b      	str	r3, [r1, #0]

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Pickup the suspend information.  */
                requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800fe66:	18bb      	adds	r3, r7, r2
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe6c:	65bb      	str	r3, [r7, #88]	@ 0x58

                /* Pickup the suspend option.  */
                get_option =  thread_ptr -> tx_thread_suspend_option;
 800fe6e:	18bb      	adds	r3, r7, r2
 800fe70:	681b      	ldr	r3, [r3, #0]
 800fe72:	2280      	movs	r2, #128	@ 0x80
 800fe74:	589b      	ldr	r3, [r3, r2]
 800fe76:	657b      	str	r3, [r7, #84]	@ 0x54

                /* Isolate the AND selection.  */
                and_request =  (get_option & TX_AND);
 800fe78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fe7a:	2202      	movs	r2, #2
 800fe7c:	4013      	ands	r3, r2
 800fe7e:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Check for AND condition. All flags must be present to satisfy request.  */
                if (and_request == TX_AND)
 800fe80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fe82:	2b02      	cmp	r3, #2
 800fe84:	d10a      	bne.n	800fe9c <_tx_event_flags_set+0xf0>
                {

                    /* AND request is present.  */

                    /* Calculate the flags present.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800fe86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fe8a:	4013      	ands	r3, r2
 800fe8c:	66bb      	str	r3, [r7, #104]	@ 0x68

                    /* Determine if they satisfy the AND request.  */
                    if (flags_satisfied != requested_flags)
 800fe8e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fe90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800fe92:	429a      	cmp	r2, r3
 800fe94:	d006      	beq.n	800fea4 <_tx_event_flags_set+0xf8>
                    {

                        /* No, not all the requested flags are present. Clear the flags present variable.  */
                        flags_satisfied =  ((ULONG) 0);
 800fe96:	2300      	movs	r3, #0
 800fe98:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fe9a:	e003      	b.n	800fea4 <_tx_event_flags_set+0xf8>
                }
                else
                {

                    /* OR request is present. Simply or the requested flags and the current flags.  */
                    flags_satisfied =  (current_event_flags & requested_flags);
 800fe9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fe9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fea0:	4013      	ands	r3, r2
 800fea2:	66bb      	str	r3, [r7, #104]	@ 0x68
                }

                /* Determine if the request is satisfied.  */
                if (flags_satisfied != ((ULONG) 0))
 800fea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d100      	bne.n	800feac <_tx_event_flags_set+0x100>
 800feaa:	e178      	b.n	801019e <_tx_event_flags_set+0x3f2>

                    /* Yes, resume the thread and apply any event flag
                       clearing.  */

                    /* Set the preempt check flag.  */
                    preempt_check =  TX_TRUE;
 800feac:	2301      	movs	r3, #1
 800feae:	667b      	str	r3, [r7, #100]	@ 0x64

                    /* Return the actual event flags that satisfied the request.  */
                    suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 800feb0:	2380      	movs	r3, #128	@ 0x80
 800feb2:	18fb      	adds	r3, r7, r3
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800feb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    *suspend_info_ptr =  current_event_flags;
 800feba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800febc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800febe:	601a      	str	r2, [r3, #0]

                    /* Pickup the clear bit.  */
                    clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 800fec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fec2:	2201      	movs	r2, #1
 800fec4:	4013      	ands	r3, r2
 800fec6:	64bb      	str	r3, [r7, #72]	@ 0x48

                    /* Determine whether or not clearing needs to take place.  */
                    if (clear_request == TX_TRUE)
 800fec8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800feca:	2b01      	cmp	r3, #1
 800fecc:	d106      	bne.n	800fedc <_tx_event_flags_set+0x130>
                    {

                        /* Yes, clear the flags that satisfied this request.  */
                        group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & (~requested_flags);
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	689b      	ldr	r3, [r3, #8]
 800fed2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fed4:	43d2      	mvns	r2, r2
 800fed6:	401a      	ands	r2, r3
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	609a      	str	r2, [r3, #8]
                    }

                    /* Clear the suspension information in the event flag group.  */
                    group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	2200      	movs	r2, #0
 800fee0:	611a      	str	r2, [r3, #16]
                    group_ptr -> tx_event_flags_group_suspended_count =  TX_NO_SUSPENSIONS;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2200      	movs	r2, #0
 800fee6:	615a      	str	r2, [r3, #20]

                    /* Clear cleanup routine to avoid timeout.  */
                    thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800fee8:	2080      	movs	r0, #128	@ 0x80
 800feea:	183b      	adds	r3, r7, r0
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	2200      	movs	r2, #0
 800fef0:	669a      	str	r2, [r3, #104]	@ 0x68

                    /* Put return status into the thread control block.  */
                    thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800fef2:	183b      	adds	r3, r7, r0
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	2284      	movs	r2, #132	@ 0x84
 800fef8:	2100      	movs	r1, #0
 800fefa:	5099      	str	r1, [r3, r2]
                    /* Resume the thread!  */
                    _tx_thread_system_ni_resume(thread_ptr);
#else

                    /* Temporarily disable preemption.  */
                    _tx_thread_preempt_disable++;
 800fefc:	4bb1      	ldr	r3, [pc, #708]	@ (80101c4 <_tx_event_flags_set+0x418>)
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	1c5a      	adds	r2, r3, #1
 800ff02:	4bb0      	ldr	r3, [pc, #704]	@ (80101c4 <_tx_event_flags_set+0x418>)
 800ff04:	601a      	str	r2, [r3, #0]
 800ff06:	2484      	movs	r4, #132	@ 0x84
 800ff08:	193b      	adds	r3, r7, r4
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ff0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff10:	f383 8810 	msr	PRIMASK, r3
}
 800ff14:	46c0      	nop			@ (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Resume thread.  */
                    _tx_thread_system_resume(thread_ptr);
 800ff16:	183b      	adds	r3, r7, r0
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	0018      	movs	r0, r3
 800ff1c:	f001 ffb4 	bl	8011e88 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ff20:	f3ef 8310 	mrs	r3, PRIMASK
 800ff24:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ff26:	b672      	cpsid	i
    return(primask_value);
 800ff28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

                    /* Disable interrupts to remove the semaphore from the created list.  */
                    TX_DISABLE
 800ff2a:	193a      	adds	r2, r7, r4
 800ff2c:	6013      	str	r3, [r2, #0]
 800ff2e:	e136      	b.n	801019e <_tx_event_flags_set+0x3f2>

                /* Otherwise, the event flag requests of multiple threads must be
                   examined.  */

                /* Setup thread pointer, keep a local copy of the head pointer.  */
                suspended_list =  group_ptr -> tx_event_flags_group_suspension_list;
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	691b      	ldr	r3, [r3, #16]
 800ff34:	677b      	str	r3, [r7, #116]	@ 0x74
                thread_ptr =      suspended_list;
 800ff36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff38:	2280      	movs	r2, #128	@ 0x80
 800ff3a:	18ba      	adds	r2, r7, r2
 800ff3c:	6013      	str	r3, [r2, #0]

                /* Clear the suspended list head pointer to thwart manipulation of
                   the list in ISR's while we are processing here.  */
                group_ptr -> tx_event_flags_group_suspension_list =  TX_NULL;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2200      	movs	r2, #0
 800ff42:	611a      	str	r2, [r3, #16]

                /* Setup the satisfied thread pointers.  */
                satisfied_list =  TX_NULL;
 800ff44:	2300      	movs	r3, #0
 800ff46:	67fb      	str	r3, [r7, #124]	@ 0x7c
                last_satisfied =  TX_NULL;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	67bb      	str	r3, [r7, #120]	@ 0x78

                /* Pickup the current event flags.  */
                current_event_flags =  group_ptr -> tx_event_flags_group_current;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	689b      	ldr	r3, [r3, #8]
 800ff50:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Disable preemption while we process the suspended list.  */
                _tx_thread_preempt_disable++;
 800ff52:	4b9c      	ldr	r3, [pc, #624]	@ (80101c4 <_tx_event_flags_set+0x418>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	1c5a      	adds	r2, r3, #1
 800ff58:	4b9a      	ldr	r3, [pc, #616]	@ (80101c4 <_tx_event_flags_set+0x418>)
 800ff5a:	601a      	str	r2, [r3, #0]
 800ff5c:	2284      	movs	r2, #132	@ 0x84
 800ff5e:	18bb      	adds	r3, r7, r2
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 800ff64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff66:	f383 8810 	msr	PRIMASK, r3
}
 800ff6a:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 800ff6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ff70:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 800ff72:	b672      	cpsid	i
    return(primask_value);
 800ff74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

                    /* Restore interrupts temporarily.  */
                    TX_RESTORE

                    /* Disable interrupts again.  */
                    TX_DISABLE
 800ff76:	18ba      	adds	r2, r7, r2
 800ff78:	6013      	str	r3, [r2, #0]
#endif

                    /* Determine if we need to reset the search.  */
                    if (group_ptr -> tx_event_flags_group_reset_search != TX_FALSE)
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d00e      	beq.n	800ffa0 <_tx_event_flags_set+0x1f4>
                    {

                        /* Clear the reset search flag.  */
                        group_ptr -> tx_event_flags_group_reset_search =  TX_FALSE;
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	2200      	movs	r2, #0
 800ff86:	60da      	str	r2, [r3, #12]

                        /* Move the thread pointer to the beginning of the search list.  */
                        thread_ptr =  suspended_list;
 800ff88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ff8a:	2280      	movs	r2, #128	@ 0x80
 800ff8c:	18ba      	adds	r2, r7, r2
 800ff8e:	6013      	str	r3, [r2, #0]

                        /* Reset the suspended count.  */
                        suspended_count =  group_ptr -> tx_event_flags_group_suspended_count;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	695b      	ldr	r3, [r3, #20]
 800ff94:	673b      	str	r3, [r7, #112]	@ 0x70

                        /* Update the current events with any new ones that might
                           have been set in a nested set events call from an ISR.  */
                        current_event_flags =  current_event_flags | group_ptr -> tx_event_flags_group_current;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	689b      	ldr	r3, [r3, #8]
 800ff9a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ff9c:	4313      	orrs	r3, r2
 800ff9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    }

                    /* Save next thread pointer.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 800ffa0:	2280      	movs	r2, #128	@ 0x80
 800ffa2:	18bb      	adds	r3, r7, r2
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffa8:	65fb      	str	r3, [r7, #92]	@ 0x5c

                    /* Pickup the suspend information.  */
                    requested_flags =  thread_ptr -> tx_thread_suspend_info;
 800ffaa:	18bb      	adds	r3, r7, r2
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ffb0:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Pickup this thread's suspension get option.  */
                    get_option =  thread_ptr -> tx_thread_suspend_option;
 800ffb2:	18bb      	adds	r3, r7, r2
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2280      	movs	r2, #128	@ 0x80
 800ffb8:	589b      	ldr	r3, [r3, r2]
 800ffba:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Isolate the AND selection.  */
                    and_request =  (get_option & TX_AND);
 800ffbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ffbe:	2202      	movs	r2, #2
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	653b      	str	r3, [r7, #80]	@ 0x50

                    /* Check for AND condition. All flags must be present to satisfy request.  */
                    if (and_request == TX_AND)
 800ffc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ffc6:	2b02      	cmp	r3, #2
 800ffc8:	d10a      	bne.n	800ffe0 <_tx_event_flags_set+0x234>
                    {

                        /* AND request is present.  */

                        /* Calculate the flags present.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800ffca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ffcc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ffce:	4013      	ands	r3, r2
 800ffd0:	66bb      	str	r3, [r7, #104]	@ 0x68

                        /* Determine if they satisfy the AND request.  */
                        if (flags_satisfied != requested_flags)
 800ffd2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800ffd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d006      	beq.n	800ffe8 <_tx_event_flags_set+0x23c>
                        {

                            /* No, not all the requested flags are present. Clear the flags present variable.  */
                            flags_satisfied =  ((ULONG) 0);
 800ffda:	2300      	movs	r3, #0
 800ffdc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ffde:	e003      	b.n	800ffe8 <_tx_event_flags_set+0x23c>
                    }
                    else
                    {

                        /* OR request is present. Simply or the requested flags and the current flags.  */
                        flags_satisfied =  (current_event_flags & requested_flags);
 800ffe0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ffe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ffe4:	4013      	ands	r3, r2
 800ffe6:	66bb      	str	r3, [r7, #104]	@ 0x68
                    }

                    /* Check to see if the thread had a timeout or wait abort during the event search processing.
                       If so, just set the flags satisfied to ensure the processing here removes the thread from
                       the suspension list.  */
                    if (thread_ptr -> tx_thread_state != TX_EVENT_FLAG)
 800ffe8:	2380      	movs	r3, #128	@ 0x80
 800ffea:	18fb      	adds	r3, r7, r3
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fff0:	2b07      	cmp	r3, #7
 800fff2:	d001      	beq.n	800fff8 <_tx_event_flags_set+0x24c>
                    {

                       /* Simply set the satisfied flags to 1 in order to remove the thread from the suspension list.  */
                        flags_satisfied =  ((ULONG) 1);
 800fff4:	2301      	movs	r3, #1
 800fff6:	66bb      	str	r3, [r7, #104]	@ 0x68
                    }

                    /* Determine if the request is satisfied.  */
                    if (flags_satisfied != ((ULONG) 0))
 800fff8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d069      	beq.n	80100d2 <_tx_event_flags_set+0x326>
                    {

                        /* Yes, this request can be handled now.  */

                        /* Set the preempt check flag.  */
                        preempt_check =  TX_TRUE;
 800fffe:	2301      	movs	r3, #1
 8010000:	667b      	str	r3, [r7, #100]	@ 0x64

                        /* Determine if the thread is still suspended on the event flag group. If not, a wait
                           abort must have been done from an ISR.  */
                        if (thread_ptr -> tx_thread_state == TX_EVENT_FLAG)
 8010002:	2280      	movs	r2, #128	@ 0x80
 8010004:	18bb      	adds	r3, r7, r2
 8010006:	681b      	ldr	r3, [r3, #0]
 8010008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801000a:	2b07      	cmp	r3, #7
 801000c:	d11e      	bne.n	801004c <_tx_event_flags_set+0x2a0>
                        {

                            /* Return the actual event flags that satisfied the request.  */
                            suspend_info_ptr =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 801000e:	18bb      	adds	r3, r7, r2
 8010010:	681b      	ldr	r3, [r3, #0]
 8010012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010014:	64fb      	str	r3, [r7, #76]	@ 0x4c
                            *suspend_info_ptr =  current_event_flags;
 8010016:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010018:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801001a:	601a      	str	r2, [r3, #0]

                            /* Pickup the clear bit.  */
                            clear_request =  (get_option & TX_EVENT_FLAGS_CLEAR_MASK);
 801001c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801001e:	2201      	movs	r2, #1
 8010020:	4013      	ands	r3, r2
 8010022:	64bb      	str	r3, [r7, #72]	@ 0x48

                            /* Determine whether or not clearing needs to take place.  */
                            if (clear_request == TX_TRUE)
 8010024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010026:	2b01      	cmp	r3, #1
 8010028:	d106      	bne.n	8010038 <_tx_event_flags_set+0x28c>
                            {

                                /* Yes, clear the flags that satisfied this request.  */
                                group_ptr -> tx_event_flags_group_current =  group_ptr -> tx_event_flags_group_current & ~requested_flags;
 801002a:	68fb      	ldr	r3, [r7, #12]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010030:	43d2      	mvns	r2, r2
 8010032:	401a      	ands	r2, r3
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	609a      	str	r2, [r3, #8]
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010038:	2180      	movs	r1, #128	@ 0x80
 801003a:	187b      	adds	r3, r7, r1
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	2200      	movs	r2, #0
 8010040:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010042:	187b      	adds	r3, r7, r1
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	2284      	movs	r2, #132	@ 0x84
 8010048:	2100      	movs	r1, #0
 801004a:	5099      	str	r1, [r3, r2]

                        /* We need to remove the thread from the suspension list and place it in the
                           expired list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (thread_ptr == thread_ptr -> tx_thread_suspended_next)
 801004c:	2280      	movs	r2, #128	@ 0x80
 801004e:	18bb      	adds	r3, r7, r2
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010054:	18ba      	adds	r2, r7, r2
 8010056:	6812      	ldr	r2, [r2, #0]
 8010058:	429a      	cmp	r2, r3
 801005a:	d102      	bne.n	8010062 <_tx_event_flags_set+0x2b6>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            suspended_list =  TX_NULL;
 801005c:	2300      	movs	r3, #0
 801005e:	677b      	str	r3, [r7, #116]	@ 0x74
 8010060:	e017      	b.n	8010092 <_tx_event_flags_set+0x2e6>
                        {

                            /* At least one more thread is on the same expiration list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8010062:	2180      	movs	r1, #128	@ 0x80
 8010064:	187b      	adds	r3, r7, r1
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801006a:	647b      	str	r3, [r7, #68]	@ 0x44
                            previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 801006c:	187b      	adds	r3, r7, r1
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010072:	643b      	str	r3, [r7, #64]	@ 0x40
                            next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010078:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =  next_thread;
 801007a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801007c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801007e:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Update the list head pointer, if removing the head of the
                               list.  */
                            if (suspended_list == thread_ptr)
 8010080:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010082:	187b      	adds	r3, r7, r1
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	429a      	cmp	r2, r3
 8010088:	d103      	bne.n	8010092 <_tx_event_flags_set+0x2e6>
                            {

                                /* Yes, head pointer needs to be updated.  */
                                suspended_list =  thread_ptr -> tx_thread_suspended_next;
 801008a:	187b      	adds	r3, r7, r1
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010090:	677b      	str	r3, [r7, #116]	@ 0x74
                            }
                        }

                        /* Decrement the suspension count.  */
                        group_ptr -> tx_event_flags_group_suspended_count--;
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	695b      	ldr	r3, [r3, #20]
 8010096:	1e5a      	subs	r2, r3, #1
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	615a      	str	r2, [r3, #20]

                        /* Place this thread on the expired list.  */
                        if (satisfied_list == TX_NULL)
 801009c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d10b      	bne.n	80100ba <_tx_event_flags_set+0x30e>
                        {

                            /* First thread on the satisfied list.  */
                            satisfied_list =  thread_ptr;
 80100a2:	2280      	movs	r2, #128	@ 0x80
 80100a4:	18bb      	adds	r3, r7, r2
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
                            last_satisfied =  thread_ptr;
 80100aa:	18bb      	adds	r3, r7, r2
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	67bb      	str	r3, [r7, #120]	@ 0x78

                            /* Setup initial next pointer.  */
                            thread_ptr -> tx_thread_suspended_next =  TX_NULL;
 80100b0:	18bb      	adds	r3, r7, r2
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2200      	movs	r2, #0
 80100b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80100b8:	e00b      	b.n	80100d2 <_tx_event_flags_set+0x326>
                        {

                            /* Not the first thread on the satisfied list.  */

                            /* Link it up at the end.  */
                            last_satisfied -> tx_thread_suspended_next =  thread_ptr;
 80100ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80100bc:	2180      	movs	r1, #128	@ 0x80
 80100be:	187a      	adds	r2, r7, r1
 80100c0:	6812      	ldr	r2, [r2, #0]
 80100c2:	671a      	str	r2, [r3, #112]	@ 0x70
                            thread_ptr -> tx_thread_suspended_next =      TX_NULL;
 80100c4:	187b      	adds	r3, r7, r1
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2200      	movs	r2, #0
 80100ca:	671a      	str	r2, [r3, #112]	@ 0x70
                            last_satisfied =                              thread_ptr;
 80100cc:	187b      	adds	r3, r7, r1
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	67bb      	str	r3, [r7, #120]	@ 0x78
                        }
                    }

                    /* Copy next thread pointer to working thread ptr.  */
                    thread_ptr =  next_thread_ptr;
 80100d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80100d4:	2280      	movs	r2, #128	@ 0x80
 80100d6:	18ba      	adds	r2, r7, r2
 80100d8:	6013      	str	r3, [r2, #0]

                    /* Decrement the suspension count.  */
                    suspended_count--;
 80100da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80100dc:	3b01      	subs	r3, #1
 80100de:	673b      	str	r3, [r7, #112]	@ 0x70

                } while (suspended_count != TX_NO_SUSPENSIONS);
 80100e0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d000      	beq.n	80100e8 <_tx_event_flags_set+0x33c>
 80100e6:	e739      	b.n	800ff5c <_tx_event_flags_set+0x1b0>

                /* Setup the group's suspension list head again.  */
                group_ptr -> tx_event_flags_group_suspension_list =  suspended_list;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80100ec:	611a      	str	r2, [r3, #16]

#ifndef TX_NOT_INTERRUPTABLE

                /* Determine if there is any delayed event clearing to perform.  */
                if (group_ptr -> tx_event_flags_group_delayed_clear != ((ULONG) 0))
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	6a1b      	ldr	r3, [r3, #32]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d00a      	beq.n	801010c <_tx_event_flags_set+0x360>
                {

                    /* Perform the delayed event clearing.  */
                    group_ptr -> tx_event_flags_group_current =
                        group_ptr -> tx_event_flags_group_current & ~(group_ptr -> tx_event_flags_group_delayed_clear);
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	689a      	ldr	r2, [r3, #8]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6a1b      	ldr	r3, [r3, #32]
 80100fe:	43db      	mvns	r3, r3
 8010100:	401a      	ands	r2, r3
                    group_ptr -> tx_event_flags_group_current =
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	609a      	str	r2, [r3, #8]

                    /* Clear the delayed event flag clear value.  */
                    group_ptr -> tx_event_flags_group_delayed_clear =  ((ULONG) 0);
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2200      	movs	r2, #0
 801010a:	621a      	str	r2, [r3, #32]
 801010c:	2384      	movs	r3, #132	@ 0x84
 801010e:	18fb      	adds	r3, r7, r3
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010116:	f383 8810 	msr	PRIMASK, r3
}
 801011a:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Walk through the satisfied list, setup initial thread pointer. */
                thread_ptr =  satisfied_list;
 801011c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801011e:	2280      	movs	r2, #128	@ 0x80
 8010120:	18ba      	adds	r2, r7, r2
 8010122:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 8010124:	e021      	b.n	801016a <_tx_event_flags_set+0x3be>
                {

                    /* Get next pointer first.  */
                    next_thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 8010126:	2180      	movs	r1, #128	@ 0x80
 8010128:	187b      	adds	r3, r7, r1
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801012e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010130:	f3ef 8310 	mrs	r3, PRIMASK
 8010134:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010136:	b672      	cpsid	i
    return(primask_value);
 8010138:	69fb      	ldr	r3, [r7, #28]

                    /* Disable interrupts.  */
                    TX_DISABLE
 801013a:	2084      	movs	r0, #132	@ 0x84
 801013c:	183a      	adds	r2, r7, r0
 801013e:	6013      	str	r3, [r2, #0]
                    /* Restore interrupts.  */
                    TX_RESTORE
#else

                    /* Disable preemption again.  */
                    _tx_thread_preempt_disable++;
 8010140:	4b20      	ldr	r3, [pc, #128]	@ (80101c4 <_tx_event_flags_set+0x418>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	1c5a      	adds	r2, r3, #1
 8010146:	4b1f      	ldr	r3, [pc, #124]	@ (80101c4 <_tx_event_flags_set+0x418>)
 8010148:	601a      	str	r2, [r3, #0]
 801014a:	183b      	adds	r3, r7, r0
 801014c:	681b      	ldr	r3, [r3, #0]
 801014e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010150:	6a3b      	ldr	r3, [r7, #32]
 8010152:	f383 8810 	msr	PRIMASK, r3
}
 8010156:	46c0      	nop			@ (mov r8, r8)

                    /* Restore interrupt posture.  */
                    TX_RESTORE

                    /* Resume the thread.  */
                    _tx_thread_system_resume(thread_ptr);
 8010158:	000c      	movs	r4, r1
 801015a:	187b      	adds	r3, r7, r1
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	0018      	movs	r0, r3
 8010160:	f001 fe92 	bl	8011e88 <_tx_thread_system_resume>
#endif

                    /* Move next thread to current.  */
                    thread_ptr =  next_thread_ptr;
 8010164:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010166:	193a      	adds	r2, r7, r4
 8010168:	6013      	str	r3, [r2, #0]
                while(thread_ptr != TX_NULL)
 801016a:	2380      	movs	r3, #128	@ 0x80
 801016c:	18fb      	adds	r3, r7, r3
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d1d8      	bne.n	8010126 <_tx_event_flags_set+0x37a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010174:	f3ef 8310 	mrs	r3, PRIMASK
 8010178:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801017a:	b672      	cpsid	i
    return(primask_value);
 801017c:	69bb      	ldr	r3, [r7, #24]
                }

                /* Disable interrupts.  */
                TX_DISABLE
 801017e:	2284      	movs	r2, #132	@ 0x84
 8010180:	18ba      	adds	r2, r7, r2
 8010182:	6013      	str	r3, [r2, #0]

                /* Release thread preemption disable.  */
                _tx_thread_preempt_disable--;
 8010184:	4b0f      	ldr	r3, [pc, #60]	@ (80101c4 <_tx_event_flags_set+0x418>)
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	1e5a      	subs	r2, r3, #1
 801018a:	4b0e      	ldr	r3, [pc, #56]	@ (80101c4 <_tx_event_flags_set+0x418>)
 801018c:	601a      	str	r2, [r3, #0]
 801018e:	e006      	b.n	801019e <_tx_event_flags_set+0x3f2>
        }
        else
        {

            /* Determine if we need to set the reset search field.  */
            if (group_ptr -> tx_event_flags_group_suspended_count != TX_NO_SUSPENSIONS)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	695b      	ldr	r3, [r3, #20]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d002      	beq.n	801019e <_tx_event_flags_set+0x3f2>
            {

                /* We interrupted a search of an event flag group suspension
                   list.  Make sure we reset the search.  */
                group_ptr -> tx_event_flags_group_reset_search =  TX_TRUE;
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	2201      	movs	r2, #1
 801019c:	60da      	str	r2, [r3, #12]
 801019e:	2384      	movs	r3, #132	@ 0x84
 80101a0:	18fb      	adds	r3, r7, r3
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80101a6:	697b      	ldr	r3, [r7, #20]
 80101a8:	f383 8810 	msr	PRIMASK, r3
}
 80101ac:	46c0      	nop			@ (mov r8, r8)
            (events_set_notify)(group_ptr);
        }
#endif

        /* Determine if a check for preemption is necessary.  */
        if (preempt_check == TX_TRUE)
 80101ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80101b0:	2b01      	cmp	r3, #1
 80101b2:	d101      	bne.n	80101b8 <_tx_event_flags_set+0x40c>
        {

            /* Yes, one or more threads were resumed, check for preemption.  */
            _tx_thread_system_preempt_check();
 80101b4:	f001 fe30 	bl	8011e18 <_tx_thread_system_preempt_check>
        }
    }

    /* Return completion status.  */
    return(TX_SUCCESS);
 80101b8:	2300      	movs	r3, #0
}
 80101ba:	0018      	movs	r0, r3
 80101bc:	46bd      	mov	sp, r7
 80101be:	b023      	add	sp, #140	@ 0x8c
 80101c0:	bd90      	pop	{r4, r7, pc}
 80101c2:	46c0      	nop			@ (mov r8, r8)
 80101c4:	20011080 	.word	0x20011080

080101c8 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 80101cc:	f001 fbd0 	bl	8011970 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 80101d0:	f002 fa38 	bl	8012644 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 80101d4:	4b13      	ldr	r3, [pc, #76]	@ (8010224 <_tx_initialize_high_level+0x5c>)
 80101d6:	2200      	movs	r2, #0
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	4b13      	ldr	r3, [pc, #76]	@ (8010228 <_tx_initialize_high_level+0x60>)
 80101dc:	2200      	movs	r2, #0
 80101de:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 80101e0:	4b12      	ldr	r3, [pc, #72]	@ (801022c <_tx_initialize_high_level+0x64>)
 80101e2:	2200      	movs	r2, #0
 80101e4:	601a      	str	r2, [r3, #0]
 80101e6:	4b12      	ldr	r3, [pc, #72]	@ (8010230 <_tx_initialize_high_level+0x68>)
 80101e8:	2200      	movs	r2, #0
 80101ea:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80101ec:	4b11      	ldr	r3, [pc, #68]	@ (8010234 <_tx_initialize_high_level+0x6c>)
 80101ee:	2200      	movs	r2, #0
 80101f0:	601a      	str	r2, [r3, #0]
 80101f2:	4b11      	ldr	r3, [pc, #68]	@ (8010238 <_tx_initialize_high_level+0x70>)
 80101f4:	2200      	movs	r2, #0
 80101f6:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80101f8:	4b10      	ldr	r3, [pc, #64]	@ (801023c <_tx_initialize_high_level+0x74>)
 80101fa:	2200      	movs	r2, #0
 80101fc:	601a      	str	r2, [r3, #0]
 80101fe:	4b10      	ldr	r3, [pc, #64]	@ (8010240 <_tx_initialize_high_level+0x78>)
 8010200:	2200      	movs	r2, #0
 8010202:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8010204:	4b0f      	ldr	r3, [pc, #60]	@ (8010244 <_tx_initialize_high_level+0x7c>)
 8010206:	2200      	movs	r2, #0
 8010208:	601a      	str	r2, [r3, #0]
 801020a:	4b0f      	ldr	r3, [pc, #60]	@ (8010248 <_tx_initialize_high_level+0x80>)
 801020c:	2200      	movs	r2, #0
 801020e:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 8010210:	4b0e      	ldr	r3, [pc, #56]	@ (801024c <_tx_initialize_high_level+0x84>)
 8010212:	2200      	movs	r2, #0
 8010214:	601a      	str	r2, [r3, #0]
 8010216:	4b0e      	ldr	r3, [pc, #56]	@ (8010250 <_tx_initialize_high_level+0x88>)
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]
#endif
}
 801021c:	46c0      	nop			@ (mov r8, r8)
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	46c0      	nop			@ (mov r8, r8)
 8010224:	20010fb0 	.word	0x20010fb0
 8010228:	20010fb4 	.word	0x20010fb4
 801022c:	20010fb8 	.word	0x20010fb8
 8010230:	20010fbc 	.word	0x20010fbc
 8010234:	20010fc0 	.word	0x20010fc0
 8010238:	20010fc4 	.word	0x20010fc4
 801023c:	20010fd0 	.word	0x20010fd0
 8010240:	20010fd4 	.word	0x20010fd4
 8010244:	20010fd8 	.word	0x20010fd8
 8010248:	20010fdc 	.word	0x20010fdc
 801024c:	20010fc8 	.word	0x20010fc8
 8010250:	20010fcc 	.word	0x20010fcc

08010254 <_tx_initialize_kernel_enter>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8010258:	4b10      	ldr	r3, [pc, #64]	@ (801029c <_tx_initialize_kernel_enter+0x48>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	4a10      	ldr	r2, [pc, #64]	@ (80102a0 <_tx_initialize_kernel_enter+0x4c>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d00b      	beq.n	801027a <_tx_initialize_kernel_enter+0x26>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8010262:	4b0e      	ldr	r3, [pc, #56]	@ (801029c <_tx_initialize_kernel_enter+0x48>)
 8010264:	4a0f      	ldr	r2, [pc, #60]	@ (80102a4 <_tx_initialize_kernel_enter+0x50>)
 8010266:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8010268:	f7ef ff52 	bl	8000110 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 801026c:	f7ff ffac 	bl	80101c8 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 8010270:	4b0d      	ldr	r3, [pc, #52]	@ (80102a8 <_tx_initialize_kernel_enter+0x54>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	1c5a      	adds	r2, r3, #1
 8010276:	4b0c      	ldr	r3, [pc, #48]	@ (80102a8 <_tx_initialize_kernel_enter+0x54>)
 8010278:	601a      	str	r2, [r3, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 801027a:	4b08      	ldr	r3, [pc, #32]	@ (801029c <_tx_initialize_kernel_enter+0x48>)
 801027c:	4a09      	ldr	r2, [pc, #36]	@ (80102a4 <_tx_initialize_kernel_enter+0x50>)
 801027e:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 8010280:	4b0a      	ldr	r3, [pc, #40]	@ (80102ac <_tx_initialize_kernel_enter+0x58>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	0018      	movs	r0, r3
 8010286:	f7f6 f969 	bl	800655c <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 801028a:	4b04      	ldr	r3, [pc, #16]	@ (801029c <_tx_initialize_kernel_enter+0x48>)
 801028c:	2200      	movs	r2, #0
 801028e:	601a      	str	r2, [r3, #0]

    /* Call any port specific pre-scheduler processing.  */
    TX_PORT_SPECIFIC_PRE_SCHEDULER_INITIALIZATION

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 8010290:	f7ef ff86 	bl	80001a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8010294:	46c0      	nop			@ (mov r8, r8)
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}
 801029a:	46c0      	nop			@ (mov r8, r8)
 801029c:	20000010 	.word	0x20000010
 80102a0:	f0f0f0f1 	.word	0xf0f0f0f1
 80102a4:	f0f0f0f0 	.word	0xf0f0f0f0
 80102a8:	20011080 	.word	0x20011080
 80102ac:	20010fe0 	.word	0x20010fe0

080102b0 <_tx_mutex_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b08c      	sub	sp, #48	@ 0x30
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80102ba:	f3ef 8310 	mrs	r3, PRIMASK
 80102be:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80102c0:	b672      	cpsid	i
    return(primask_value);
 80102c2:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the mutex.  */
    TX_DISABLE
 80102c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_mutex_cleanup))
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80102ca:	4b32      	ldr	r3, [pc, #200]	@ (8010394 <_tx_mutex_cleanup+0xe4>)
 80102cc:	429a      	cmp	r2, r3
 80102ce:	d157      	bne.n	8010380 <_tx_mutex_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	22ac      	movs	r2, #172	@ 0xac
 80102d4:	589b      	ldr	r3, [r3, r2]
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	429a      	cmp	r2, r3
 80102da:	d151      	bne.n	8010380 <_tx_mutex_cleanup+0xd0>
        {

            /* Setup pointer to mutex control block.  */
            mutex_ptr =  TX_VOID_TO_MUTEX_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102e0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for NULL mutex pointer.  */
            if (mutex_ptr != TX_NULL)
 80102e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d04b      	beq.n	8010380 <_tx_mutex_cleanup+0xd0>
            {

                /* Determine if the mutex ID is valid.  */
                if (mutex_ptr -> tx_mutex_id == TX_MUTEX_ID)
 80102e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	4a2a      	ldr	r2, [pc, #168]	@ (8010398 <_tx_mutex_cleanup+0xe8>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d146      	bne.n	8010380 <_tx_mutex_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 80102f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f4:	69db      	ldr	r3, [r3, #28]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d042      	beq.n	8010380 <_tx_mutex_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2200      	movs	r2, #0
 80102fe:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspension count.  */
                        mutex_ptr -> tx_mutex_suspended_count--;
 8010300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010302:	69db      	ldr	r3, [r3, #28]
 8010304:	1e5a      	subs	r2, r3, #1
 8010306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010308:	61da      	str	r2, [r3, #28]

                        /* Pickup the suspended count.  */
                        suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 801030a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801030c:	69db      	ldr	r3, [r3, #28]
 801030e:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010312:	2b00      	cmp	r3, #0
 8010314:	d103      	bne.n	801031e <_tx_mutex_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010318:	2200      	movs	r2, #0
 801031a:	619a      	str	r2, [r3, #24]
 801031c:	e013      	b.n	8010346 <_tx_mutex_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010322:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010328:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801032a:	6a3b      	ldr	r3, [r7, #32]
 801032c:	69fa      	ldr	r2, [r7, #28]
 801032e:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010330:	69fb      	ldr	r3, [r7, #28]
 8010332:	6a3a      	ldr	r2, [r7, #32]
 8010334:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (mutex_ptr -> tx_mutex_suspension_list == thread_ptr)
 8010336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010338:	699b      	ldr	r3, [r3, #24]
 801033a:	687a      	ldr	r2, [r7, #4]
 801033c:	429a      	cmp	r2, r3
 801033e:	d102      	bne.n	8010346 <_tx_mutex_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =         next_thread;
 8010340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010342:	6a3a      	ldr	r2, [r7, #32]
 8010344:	619a      	str	r2, [r3, #24]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_MUTEX_SUSP)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801034a:	2b0d      	cmp	r3, #13
 801034c:	d118      	bne.n	8010380 <_tx_mutex_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            mutex_ptr -> tx_mutex_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NOT_AVAILABLE;
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	2284      	movs	r2, #132	@ 0x84
 8010352:	211d      	movs	r1, #29
 8010354:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010356:	4b11      	ldr	r3, [pc, #68]	@ (801039c <_tx_mutex_cleanup+0xec>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	1c5a      	adds	r2, r3, #1
 801035c:	4b0f      	ldr	r3, [pc, #60]	@ (801039c <_tx_mutex_cleanup+0xec>)
 801035e:	601a      	str	r2, [r3, #0]
 8010360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010362:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	f383 8810 	msr	PRIMASK, r3
}
 801036a:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	0018      	movs	r0, r3
 8010370:	f001 fd8a 	bl	8011e88 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010374:	f3ef 8310 	mrs	r3, PRIMASK
 8010378:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801037a:	b672      	cpsid	i
    return(primask_value);
 801037c:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 801037e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010382:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f383 8810 	msr	PRIMASK, r3
}
 801038a:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 801038c:	46c0      	nop			@ (mov r8, r8)
 801038e:	46bd      	mov	sp, r7
 8010390:	b00c      	add	sp, #48	@ 0x30
 8010392:	bd80      	pop	{r7, pc}
 8010394:	080102b1 	.word	0x080102b1
 8010398:	4d555445 	.word	0x4d555445
 801039c:	20011080 	.word	0x20011080

080103a0 <_tx_mutex_thread_release>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_thread_release(TX_THREAD  *thread_ptr)
{
 80103a0:	b580      	push	{r7, lr}
 80103a2:	b088      	sub	sp, #32
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80103a8:	f3ef 8310 	mrs	r3, PRIMASK
 80103ac:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80103ae:	b672      	cpsid	i
    return(primask_value);
 80103b0:	697b      	ldr	r3, [r7, #20]
UINT        status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 80103b2:	61fb      	str	r3, [r7, #28]

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 80103b4:	4b1a      	ldr	r3, [pc, #104]	@ (8010420 <_tx_mutex_thread_release+0x80>)
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	1c5a      	adds	r2, r3, #1
 80103ba:	4b19      	ldr	r3, [pc, #100]	@ (8010420 <_tx_mutex_thread_release+0x80>)
 80103bc:	601a      	str	r2, [r3, #0]
    /* Loop to look at all the mutexes.  */
    do
    {

        /* Pickup the mutex head pointer.  */
        mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	22a4      	movs	r2, #164	@ 0xa4
 80103c2:	589b      	ldr	r3, [r3, r2]
 80103c4:	61bb      	str	r3, [r7, #24]

        /* Determine if there is a mutex.  */
        if (mutex_ptr != TX_NULL)
 80103c6:	69bb      	ldr	r3, [r7, #24]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d016      	beq.n	80103fa <_tx_mutex_thread_release+0x5a>
        {

            /* Yes, set the ownership count to 1.  */
            mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 80103cc:	69bb      	ldr	r3, [r7, #24]
 80103ce:	2201      	movs	r2, #1
 80103d0:	609a      	str	r2, [r3, #8]
 80103d2:	69fb      	ldr	r3, [r7, #28]
 80103d4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f383 8810 	msr	PRIMASK, r3
}
 80103dc:	46c0      	nop			@ (mov r8, r8)
            do
            {
                status =  _tx_mutex_put(mutex_ptr);
            } while (status != TX_SUCCESS);
#else
            _tx_mutex_put(mutex_ptr);
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	0018      	movs	r0, r3
 80103e2:	f000 fafb 	bl	80109dc <_tx_mutex_put>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80103e6:	f3ef 8310 	mrs	r3, PRIMASK
 80103ea:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80103ec:	b672      	cpsid	i
    return(primask_value);
 80103ee:	693b      	ldr	r3, [r7, #16]
#endif

            /* Disable interrupts.  */
            TX_DISABLE
 80103f0:	61fb      	str	r3, [r7, #28]

            /* Move to the next mutex.  */
            mutex_ptr =  thread_ptr -> tx_thread_owned_mutex_list;
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	22a4      	movs	r2, #164	@ 0xa4
 80103f6:	589b      	ldr	r3, [r3, r2]
 80103f8:	61bb      	str	r3, [r7, #24]
        }
    } while (mutex_ptr != TX_NULL);
 80103fa:	69bb      	ldr	r3, [r7, #24]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d1de      	bne.n	80103be <_tx_mutex_thread_release+0x1e>

    /* Restore preemption.  */
    _tx_thread_preempt_disable--;
 8010400:	4b07      	ldr	r3, [pc, #28]	@ (8010420 <_tx_mutex_thread_release+0x80>)
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	1e5a      	subs	r2, r3, #1
 8010406:	4b06      	ldr	r3, [pc, #24]	@ (8010420 <_tx_mutex_thread_release+0x80>)
 8010408:	601a      	str	r2, [r3, #0]
 801040a:	69fb      	ldr	r3, [r7, #28]
 801040c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801040e:	68bb      	ldr	r3, [r7, #8]
 8010410:	f383 8810 	msr	PRIMASK, r3
}
 8010414:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE
}
 8010416:	46c0      	nop			@ (mov r8, r8)
 8010418:	46bd      	mov	sp, r7
 801041a:	b008      	add	sp, #32
 801041c:	bd80      	pop	{r7, pc}
 801041e:	46c0      	nop			@ (mov r8, r8)
 8010420:	20011080 	.word	0x20011080

08010424 <_tx_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit)
{
 8010424:	b580      	push	{r7, lr}
 8010426:	b08e      	sub	sp, #56	@ 0x38
 8010428:	af00      	add	r7, sp, #0
 801042a:	60f8      	str	r0, [r7, #12]
 801042c:	60b9      	str	r1, [r7, #8]
 801042e:	607a      	str	r2, [r7, #4]
TX_MUTEX        *next_mutex;
TX_MUTEX        *previous_mutex;


    /* Initialize mutex control block to all zeros.  */
    TX_MEMSET(mutex_ptr, 0, (sizeof(TX_MUTEX)));
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	637b      	str	r3, [r7, #52]	@ 0x34
 8010434:	232f      	movs	r3, #47	@ 0x2f
 8010436:	18fb      	adds	r3, r7, r3
 8010438:	2200      	movs	r2, #0
 801043a:	701a      	strb	r2, [r3, #0]
 801043c:	2334      	movs	r3, #52	@ 0x34
 801043e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010440:	2300      	movs	r3, #0
 8010442:	633b      	str	r3, [r7, #48]	@ 0x30
 8010444:	e009      	b.n	801045a <_tx_mutex_create+0x36>
 8010446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010448:	1c5a      	adds	r2, r3, #1
 801044a:	637a      	str	r2, [r7, #52]	@ 0x34
 801044c:	222f      	movs	r2, #47	@ 0x2f
 801044e:	18ba      	adds	r2, r7, r2
 8010450:	7812      	ldrb	r2, [r2, #0]
 8010452:	701a      	strb	r2, [r3, #0]
 8010454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010456:	3301      	adds	r3, #1
 8010458:	633b      	str	r3, [r7, #48]	@ 0x30
 801045a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801045c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801045e:	429a      	cmp	r2, r3
 8010460:	d3f1      	bcc.n	8010446 <_tx_mutex_create+0x22>

    /* Setup the basic mutex fields.  */
    mutex_ptr -> tx_mutex_name =             name_ptr;
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	68ba      	ldr	r2, [r7, #8]
 8010466:	605a      	str	r2, [r3, #4]
    mutex_ptr -> tx_mutex_inherit =          inherit;
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	611a      	str	r2, [r3, #16]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801046e:	f3ef 8310 	mrs	r3, PRIMASK
 8010472:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010474:	b672      	cpsid	i
    return(primask_value);
 8010476:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the mutex on the created list.  */
    TX_DISABLE
 8010478:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the mutex ID to make it valid.  */
    mutex_ptr -> tx_mutex_id =  TX_MUTEX_ID;
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	4a1a      	ldr	r2, [pc, #104]	@ (80104e8 <_tx_mutex_create+0xc4>)
 801047e:	601a      	str	r2, [r3, #0]

    /* Setup the thread mutex release function pointer.  */
    _tx_thread_mutex_release =  &(_tx_mutex_thread_release);
 8010480:	4b1a      	ldr	r3, [pc, #104]	@ (80104ec <_tx_mutex_create+0xc8>)
 8010482:	4a1b      	ldr	r2, [pc, #108]	@ (80104f0 <_tx_mutex_create+0xcc>)
 8010484:	601a      	str	r2, [r3, #0]

    /* Place the mutex on the list of created mutexes.  First,
       check for an empty list.  */
    if (_tx_mutex_created_count == TX_EMPTY)
 8010486:	4b1b      	ldr	r3, [pc, #108]	@ (80104f4 <_tx_mutex_create+0xd0>)
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2b00      	cmp	r3, #0
 801048c:	d109      	bne.n	80104a2 <_tx_mutex_create+0x7e>
    {

        /* The created mutex list is empty.  Add mutex to empty list.  */
        _tx_mutex_created_ptr =                   mutex_ptr;
 801048e:	4b1a      	ldr	r3, [pc, #104]	@ (80104f8 <_tx_mutex_create+0xd4>)
 8010490:	68fa      	ldr	r2, [r7, #12]
 8010492:	601a      	str	r2, [r3, #0]
        mutex_ptr -> tx_mutex_created_next =      mutex_ptr;
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	68fa      	ldr	r2, [r7, #12]
 8010498:	621a      	str	r2, [r3, #32]
        mutex_ptr -> tx_mutex_created_previous =  mutex_ptr;
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	68fa      	ldr	r2, [r7, #12]
 801049e:	625a      	str	r2, [r3, #36]	@ 0x24
 80104a0:	e011      	b.n	80104c6 <_tx_mutex_create+0xa2>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_mutex =      _tx_mutex_created_ptr;
 80104a2:	4b15      	ldr	r3, [pc, #84]	@ (80104f8 <_tx_mutex_create+0xd4>)
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	623b      	str	r3, [r7, #32]
        previous_mutex =  next_mutex -> tx_mutex_created_previous;
 80104a8:	6a3b      	ldr	r3, [r7, #32]
 80104aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104ac:	61fb      	str	r3, [r7, #28]

        /* Place the new mutex in the list.  */
        next_mutex -> tx_mutex_created_previous =  mutex_ptr;
 80104ae:	6a3b      	ldr	r3, [r7, #32]
 80104b0:	68fa      	ldr	r2, [r7, #12]
 80104b2:	625a      	str	r2, [r3, #36]	@ 0x24
        previous_mutex -> tx_mutex_created_next =  mutex_ptr;
 80104b4:	69fb      	ldr	r3, [r7, #28]
 80104b6:	68fa      	ldr	r2, [r7, #12]
 80104b8:	621a      	str	r2, [r3, #32]

        /* Setup this mutex's next and previous created links.  */
        mutex_ptr -> tx_mutex_created_previous =  previous_mutex;
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	69fa      	ldr	r2, [r7, #28]
 80104be:	625a      	str	r2, [r3, #36]	@ 0x24
        mutex_ptr -> tx_mutex_created_next =      next_mutex;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6a3a      	ldr	r2, [r7, #32]
 80104c4:	621a      	str	r2, [r3, #32]
    }

    /* Increment the ownership count.  */
    _tx_mutex_created_count++;
 80104c6:	4b0b      	ldr	r3, [pc, #44]	@ (80104f4 <_tx_mutex_create+0xd0>)
 80104c8:	681b      	ldr	r3, [r3, #0]
 80104ca:	1c5a      	adds	r2, r3, #1
 80104cc:	4b09      	ldr	r3, [pc, #36]	@ (80104f4 <_tx_mutex_create+0xd0>)
 80104ce:	601a      	str	r2, [r3, #0]
 80104d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104d2:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	f383 8810 	msr	PRIMASK, r3
}
 80104da:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80104dc:	2300      	movs	r3, #0
}
 80104de:	0018      	movs	r0, r3
 80104e0:	46bd      	mov	sp, r7
 80104e2:	b00e      	add	sp, #56	@ 0x38
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	46c0      	nop			@ (mov r8, r8)
 80104e8:	4d555445 	.word	0x4d555445
 80104ec:	20011084 	.word	0x20011084
 80104f0:	080103a1 	.word	0x080103a1
 80104f4:	20010fcc 	.word	0x20010fcc
 80104f8:	20010fc8 	.word	0x20010fc8

080104fc <_tx_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b090      	sub	sp, #64	@ 0x40
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010506:	f3ef 8310 	mrs	r3, PRIMASK
 801050a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801050c:	b672      	cpsid	i
    return(primask_value);
 801050e:	69fb      	ldr	r3, [r7, #28]
TX_THREAD       *previous_thread;
UINT            status;


    /* Disable interrupts to get an instance from the mutex.  */
    TX_DISABLE
 8010510:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Log this kernel call.  */
    TX_EL_MUTEX_GET_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8010512:	4b7b      	ldr	r3, [pc, #492]	@ (8010700 <_tx_mutex_get+0x204>)
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Determine if this mutex is available.  */
    if (mutex_ptr -> tx_mutex_ownership_count == ((UINT) 0))
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	689b      	ldr	r3, [r3, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d144      	bne.n	80105aa <_tx_mutex_get+0xae>
    {

        /* Set the ownership count to 1.  */
        mutex_ptr -> tx_mutex_ownership_count =  ((UINT) 1);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	2201      	movs	r2, #1
 8010524:	609a      	str	r2, [r3, #8]

        /* Remember that the calling thread owns the mutex.  */
        mutex_ptr -> tx_mutex_owner =  thread_ptr;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801052a:	60da      	str	r2, [r3, #12]

        /* Determine if the thread pointer is valid.  */
        if (thread_ptr != TX_NULL)
 801052c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801052e:	2b00      	cmp	r3, #0
 8010530:	d032      	beq.n	8010598 <_tx_mutex_get+0x9c>
        {

            /* Determine if priority inheritance is required.  */
            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	691b      	ldr	r3, [r3, #16]
 8010536:	2b01      	cmp	r3, #1
 8010538:	d106      	bne.n	8010548 <_tx_mutex_get+0x4c>
            {

                /* Remember the current priority of thread.  */
                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 801053a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801053c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	615a      	str	r2, [r3, #20]

                /* Setup the highest priority waiting thread.  */
                mutex_ptr -> tx_mutex_highest_priority_waiting =  ((UINT) TX_MAX_PRIORITIES);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2220      	movs	r2, #32
 8010546:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            /* Pickup next mutex pointer, which is the head of the list.  */
            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801054a:	22a4      	movs	r2, #164	@ 0xa4
 801054c:	589b      	ldr	r3, [r3, r2]
 801054e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
            if (next_mutex != TX_NULL)
 8010550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010552:	2b00      	cmp	r3, #0
 8010554:	d00f      	beq.n	8010576 <_tx_mutex_get+0x7a>
            {

                /* Non-empty list. Link up the mutex.  */

                /* Pickup the next and previous mutex pointer.  */
                previous_mutex =  next_mutex -> tx_mutex_owned_previous;
 8010556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801055a:	623b      	str	r3, [r7, #32]

                /* Place the owned mutex in the list.  */
                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 801055c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801055e:	687a      	ldr	r2, [r7, #4]
 8010560:	631a      	str	r2, [r3, #48]	@ 0x30
                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8010562:	6a3b      	ldr	r3, [r7, #32]
 8010564:	687a      	ldr	r2, [r7, #4]
 8010566:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Setup this mutex's next and previous created links.  */
                mutex_ptr -> tx_mutex_owned_previous =  previous_mutex;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6a3a      	ldr	r2, [r7, #32]
 801056c:	631a      	str	r2, [r3, #48]	@ 0x30
                mutex_ptr -> tx_mutex_owned_next =      next_mutex;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010572:	62da      	str	r2, [r3, #44]	@ 0x2c
 8010574:	e009      	b.n	801058a <_tx_mutex_get+0x8e>
            }
            else
            {

                /* The owned mutex list is empty.  Add mutex to empty list.  */
                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8010576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010578:	21a4      	movs	r1, #164	@ 0xa4
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	505a      	str	r2, [r3, r1]
                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	687a      	ldr	r2, [r7, #4]
 8010582:	62da      	str	r2, [r3, #44]	@ 0x2c
                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	687a      	ldr	r2, [r7, #4]
 8010588:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            /* Increment the number of mutexes owned counter.  */
            thread_ptr -> tx_thread_owned_mutex_count++;
 801058a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801058c:	22a0      	movs	r2, #160	@ 0xa0
 801058e:	589b      	ldr	r3, [r3, r2]
 8010590:	1c5a      	adds	r2, r3, #1
 8010592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010594:	21a0      	movs	r1, #160	@ 0xa0
 8010596:	505a      	str	r2, [r3, r1]
 8010598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801059a:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801059c:	69bb      	ldr	r3, [r7, #24]
 801059e:	f383 8810 	msr	PRIMASK, r3
}
 80105a2:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80105a4:	2300      	movs	r3, #0
 80105a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105a8:	e0a4      	b.n	80106f4 <_tx_mutex_get+0x1f8>
    }

    /* Otherwise, see if the owning thread is trying to obtain the same mutex.  */
    else if (mutex_ptr -> tx_mutex_owner == thread_ptr)
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80105b0:	429a      	cmp	r2, r3
 80105b2:	d10d      	bne.n	80105d0 <_tx_mutex_get+0xd4>
    {

        /* The owning thread is requesting the mutex again, just
           increment the ownership count.  */
        mutex_ptr -> tx_mutex_ownership_count++;
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	689b      	ldr	r3, [r3, #8]
 80105b8:	1c5a      	adds	r2, r3, #1
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	609a      	str	r2, [r3, #8]
 80105be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	f383 8810 	msr	PRIMASK, r3
}
 80105c8:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success.  */
        status =  TX_SUCCESS;
 80105ca:	2300      	movs	r3, #0
 80105cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105ce:	e091      	b.n	80106f4 <_tx_mutex_get+0x1f8>
    }
    else
    {

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 80105d0:	683b      	ldr	r3, [r7, #0]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d100      	bne.n	80105d8 <_tx_mutex_get+0xdc>
 80105d6:	e085      	b.n	80106e4 <_tx_mutex_get+0x1e8>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 80105d8:	4b4a      	ldr	r3, [pc, #296]	@ (8010704 <_tx_mutex_get+0x208>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d008      	beq.n	80105f2 <_tx_mutex_get+0xf6>
 80105e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105e2:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	f383 8810 	msr	PRIMASK, r3
}
 80105ea:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NOT_AVAILABLE;
 80105ec:	231d      	movs	r3, #29
 80105ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80105f0:	e080      	b.n	80106f4 <_tx_mutex_get+0x1f8>
            {

                /* Prepare for suspension of this thread.  */

                /* Pickup the mutex owner.  */
                mutex_owner =  mutex_ptr -> tx_mutex_owner;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	633b      	str	r3, [r7, #48]	@ 0x30
#endif
                }
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_mutex_cleanup);
 80105f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105fa:	4a43      	ldr	r2, [pc, #268]	@ (8010708 <_tx_mutex_get+0x20c>)
 80105fc:	669a      	str	r2, [r3, #104]	@ 0x68

                /* Setup cleanup information, i.e. this mutex control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) mutex_ptr;
 80105fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 8010604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010606:	22ac      	movs	r2, #172	@ 0xac
 8010608:	589b      	ldr	r3, [r3, r2]
 801060a:	1c5a      	adds	r2, r3, #1
 801060c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801060e:	21ac      	movs	r1, #172	@ 0xac
 8010610:	505a      	str	r2, [r3, r1]
#endif

                /* Setup suspension list.  */
                if (mutex_ptr -> tx_mutex_suspended_count == TX_NO_SUSPENSIONS)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	69db      	ldr	r3, [r3, #28]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d109      	bne.n	801062e <_tx_mutex_get+0x132>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    mutex_ptr -> tx_mutex_suspension_list =         thread_ptr;
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801061e:	619a      	str	r2, [r3, #24]
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 8010620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010622:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010624:	671a      	str	r2, [r3, #112]	@ 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8010626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801062a:	675a      	str	r2, [r3, #116]	@ 0x74
 801062c:	e011      	b.n	8010652 <_tx_mutex_get+0x156>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   mutex_ptr -> tx_mutex_suspension_list;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	699b      	ldr	r3, [r3, #24]
 8010632:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 8010634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010636:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010638:	671a      	str	r2, [r3, #112]	@ 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 801063a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801063c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801063e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 8010640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010644:	675a      	str	r2, [r3, #116]	@ 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8010646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010648:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801064a:	671a      	str	r2, [r3, #112]	@ 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 801064c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801064e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010650:	675a      	str	r2, [r3, #116]	@ 0x74
                }

                /* Increment the suspension count.  */
                mutex_ptr -> tx_mutex_suspended_count++;
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	69db      	ldr	r3, [r3, #28]
 8010656:	1c5a      	adds	r2, r3, #1
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	61da      	str	r2, [r3, #28]

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =    TX_MUTEX_SUSP;
 801065c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801065e:	220d      	movs	r2, #13
 8010660:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8010662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010664:	2201      	movs	r2, #1
 8010666:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 8010668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	64da      	str	r2, [r3, #76]	@ 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 801066e:	4b25      	ldr	r3, [pc, #148]	@ (8010704 <_tx_mutex_get+0x208>)
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	1c5a      	adds	r2, r3, #1
 8010674:	4b23      	ldr	r3, [pc, #140]	@ (8010704 <_tx_mutex_get+0x208>)
 8010676:	601a      	str	r2, [r3, #0]
 8010678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801067a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	f383 8810 	msr	PRIMASK, r3
}
 8010682:	46c0      	nop			@ (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if we need to raise the priority of the thread
                   owning the mutex.  */
                if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	691b      	ldr	r3, [r3, #16]
 8010688:	2b01      	cmp	r3, #1
 801068a:	d122      	bne.n	80106d2 <_tx_mutex_get+0x1d6>
                {

                    /* Determine if this is the highest priority to raise for this mutex.  */
                    if (mutex_ptr -> tx_mutex_highest_priority_waiting > thread_ptr -> tx_thread_priority)
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010694:	429a      	cmp	r2, r3
 8010696:	d903      	bls.n	80106a0 <_tx_mutex_get+0x1a4>
                    {

                        /* Remember this priority.  */
                        mutex_ptr -> tx_mutex_highest_priority_waiting =  thread_ptr -> tx_thread_priority;
 8010698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801069a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	629a      	str	r2, [r3, #40]	@ 0x28
                    }

                    /* Determine if we have to update inherit priority level of the mutex owner.  */
                    if (thread_ptr -> tx_thread_priority < mutex_owner -> tx_thread_inherit_priority)
 80106a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106a6:	219c      	movs	r1, #156	@ 0x9c
 80106a8:	585b      	ldr	r3, [r3, r1]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d204      	bcs.n	80106b8 <_tx_mutex_get+0x1bc>
                    {

                        /* Remember the new priority inheritance priority.  */
                        mutex_owner -> tx_thread_inherit_priority =  thread_ptr -> tx_thread_priority;
 80106ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106b4:	219c      	movs	r1, #156	@ 0x9c
 80106b6:	505a      	str	r2, [r3, r1]
                    }

                    /* Priority inheritance is requested, check to see if the thread that owns the mutex is lower priority.  */
                    if (mutex_owner -> tx_thread_priority > thread_ptr -> tx_thread_priority)
 80106b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80106c0:	429a      	cmp	r2, r3
 80106c2:	d906      	bls.n	80106d2 <_tx_mutex_get+0x1d6>
                    {

                        /* Yes, raise the suspended, owning thread's priority to that
                           of the current thread.  */
                        _tx_mutex_priority_change(mutex_owner, thread_ptr -> tx_thread_priority);
 80106c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80106c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106ca:	0011      	movs	r1, r2
 80106cc:	0018      	movs	r0, r3
 80106ce:	f000 f8cb 	bl	8010868 <_tx_mutex_priority_change>
#endif
                    }
                }

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80106d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106d4:	0018      	movs	r0, r3
 80106d6:	f001 fcd7 	bl	8012088 <_tx_thread_system_suspend>
#endif
                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 80106da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106dc:	2284      	movs	r2, #132	@ 0x84
 80106de:	589b      	ldr	r3, [r3, r2]
 80106e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80106e2:	e007      	b.n	80106f4 <_tx_mutex_get+0x1f8>
 80106e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106e6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	f383 8810 	msr	PRIMASK, r3
}
 80106ee:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NOT_AVAILABLE;
 80106f0:	231d      	movs	r3, #29
 80106f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
    }

    /* Return completion status.  */
    return(status);
 80106f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80106f6:	0018      	movs	r0, r3
 80106f8:	46bd      	mov	sp, r7
 80106fa:	b010      	add	sp, #64	@ 0x40
 80106fc:	bd80      	pop	{r7, pc}
 80106fe:	46c0      	nop			@ (mov r8, r8)
 8010700:	20010fe8 	.word	0x20010fe8
 8010704:	20011080 	.word	0x20011080
 8010708:	080102b1 	.word	0x080102b1

0801070c <_tx_mutex_prioritize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_prioritize(TX_MUTEX *mutex_ptr)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b090      	sub	sp, #64	@ 0x40
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010714:	f3ef 8310 	mrs	r3, PRIMASK
 8010718:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801071a:	b672      	cpsid	i
    return(primask_value);
 801071c:	69fb      	ldr	r3, [r7, #28]
UINT            status;
#endif


    /* Disable interrupts.  */
    TX_DISABLE
 801071e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PRIORITIZE_INSERT

    /* Pickup the suspended count.  */
    suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	69db      	ldr	r3, [r3, #28]
 8010724:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if there are fewer than 2 suspended threads.  */
    if (suspended_count < ((UINT) 2))
 8010726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010728:	2b01      	cmp	r3, #1
 801072a:	d805      	bhi.n	8010738 <_tx_mutex_prioritize+0x2c>
 801072c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801072e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010730:	69bb      	ldr	r3, [r7, #24]
 8010732:	f383 8810 	msr	PRIMASK, r3
}
 8010736:	e090      	b.n	801085a <_tx_mutex_prioritize+0x14e>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if there how many threads are suspended on this mutex.  */
    else if (suspended_count == ((UINT) 2))
 8010738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801073a:	2b02      	cmp	r3, #2
 801073c:	d114      	bne.n	8010768 <_tx_mutex_prioritize+0x5c>
    {

        /* Pickup the head pointer and the next pointer.  */
        head_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	699b      	ldr	r3, [r3, #24]
 8010742:	633b      	str	r3, [r7, #48]	@ 0x30
        next_thread =  head_ptr -> tx_thread_suspended_next;
 8010744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010748:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Determine if the next suspended thread has a higher priority.  */
        if ((next_thread -> tx_thread_priority) < (head_ptr -> tx_thread_priority))
 801074a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801074c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801074e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010752:	429a      	cmp	r2, r3
 8010754:	d202      	bcs.n	801075c <_tx_mutex_prioritize+0x50>
        {

            /* Yes, move the list head to the next thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  next_thread;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801075a:	619a      	str	r2, [r3, #24]
 801075c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801075e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	f383 8810 	msr	PRIMASK, r3
}
 8010766:	e078      	b.n	801085a <_tx_mutex_prioritize+0x14e>
    }
    else
    {

        /* Remember the suspension count and head pointer.  */
        head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	699b      	ldr	r3, [r3, #24]
 801076c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Default the highest priority thread to the thread at the front of the list.  */
        priority_thread_ptr =  head_ptr;
 801076e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010770:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Setup search pointer.  */
        thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 8010772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010776:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 8010778:	4b3a      	ldr	r3, [pc, #232]	@ (8010864 <_tx_mutex_prioritize+0x158>)
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	1c5a      	adds	r2, r3, #1
 801077e:	4b39      	ldr	r3, [pc, #228]	@ (8010864 <_tx_mutex_prioritize+0x158>)
 8010780:	601a      	str	r2, [r3, #0]

        /* Set the list changed flag to false.  */
        list_changed =  TX_FALSE;
 8010782:	2300      	movs	r3, #0
 8010784:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Search through the list to find the highest priority thread.  */
        do
        {

            /* Is the current thread higher priority?  */
            if (thread_ptr -> tx_thread_priority < priority_thread_ptr -> tx_thread_priority)
 8010786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010788:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801078a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801078c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801078e:	429a      	cmp	r2, r3
 8010790:	d201      	bcs.n	8010796 <_tx_mutex_prioritize+0x8a>
            {

                /* Yes, remember that this thread is the highest priority.  */
                priority_thread_ptr =  thread_ptr;
 8010792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010794:	637b      	str	r3, [r7, #52]	@ 0x34
 8010796:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010798:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f383 8810 	msr	PRIMASK, r3
}
 80107a0:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80107a2:	f3ef 8310 	mrs	r3, PRIMASK
 80107a6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80107a8:	b672      	cpsid	i
    return(primask_value);
 80107aa:	693b      	ldr	r3, [r7, #16]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 80107ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Determine if any changes to the list have occurred while
               interrupts were enabled.  */

            /* Is the list head the same?  */
            if (head_ptr != mutex_ptr -> tx_mutex_suspension_list)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	699b      	ldr	r3, [r3, #24]
 80107b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80107b4:	429a      	cmp	r2, r3
 80107b6:	d002      	beq.n	80107be <_tx_mutex_prioritize+0xb2>
            {

                /* The list head has changed, set the list changed flag.  */
                list_changed =  TX_TRUE;
 80107b8:	2301      	movs	r3, #1
 80107ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80107bc:	e006      	b.n	80107cc <_tx_mutex_prioritize+0xc0>
            }
            else
            {

                /* Is the suspended count the same?  */
                if (suspended_count != mutex_ptr -> tx_mutex_suspended_count)
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	69db      	ldr	r3, [r3, #28]
 80107c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d001      	beq.n	80107cc <_tx_mutex_prioritize+0xc0>
                {

                    /* The list head has changed, set the list changed flag.  */
                    list_changed =  TX_TRUE;
 80107c8:	2301      	movs	r3, #1
 80107ca:	62bb      	str	r3, [r7, #40]	@ 0x28
                }
            }

            /* Determine if the list has changed.  */
            if (list_changed == TX_FALSE)
 80107cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d103      	bne.n	80107da <_tx_mutex_prioritize+0xce>
            {

                /* Move the thread pointer to the next thread.  */
                thread_ptr =  thread_ptr -> tx_thread_suspended_next;
 80107d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80107d8:	e00c      	b.n	80107f4 <_tx_mutex_prioritize+0xe8>
            }
            else
            {

                /* Remember the suspension count and head pointer.  */
                head_ptr =   mutex_ptr -> tx_mutex_suspension_list;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	699b      	ldr	r3, [r3, #24]
 80107de:	633b      	str	r3, [r7, #48]	@ 0x30
                suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	69db      	ldr	r3, [r3, #28]
 80107e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Default the highest priority thread to the thread at the front of the list.  */
                priority_thread_ptr =  head_ptr;
 80107e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107e8:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Setup search pointer.  */
                thread_ptr =  priority_thread_ptr -> tx_thread_suspended_next;
 80107ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80107ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80107ee:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Reset the list changed flag.  */
                list_changed =  TX_FALSE;
 80107f0:	2300      	movs	r3, #0
 80107f2:	62bb      	str	r3, [r7, #40]	@ 0x28
            }

        } while (thread_ptr != head_ptr);
 80107f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80107f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d1c4      	bne.n	8010786 <_tx_mutex_prioritize+0x7a>

        /* Release preemption.  */
        _tx_thread_preempt_disable--;
 80107fc:	4b19      	ldr	r3, [pc, #100]	@ (8010864 <_tx_mutex_prioritize+0x158>)
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	1e5a      	subs	r2, r3, #1
 8010802:	4b18      	ldr	r3, [pc, #96]	@ (8010864 <_tx_mutex_prioritize+0x158>)
 8010804:	601a      	str	r2, [r3, #0]

        /* Now determine if the highest priority thread is at the front
           of the list.  */
        if (priority_thread_ptr != head_ptr)
 8010806:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801080a:	429a      	cmp	r2, r3
 801080c:	d01d      	beq.n	801084a <_tx_mutex_prioritize+0x13e>
            /* No, we need to move the highest priority suspended thread to the
               front of the list.  */

            /* First, remove the highest priority thread by updating the
               adjacent suspended threads.  */
            next_thread =                                  priority_thread_ptr -> tx_thread_suspended_next;
 801080e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010812:	627b      	str	r3, [r7, #36]	@ 0x24
            previous_thread =                              priority_thread_ptr -> tx_thread_suspended_previous;
 8010814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010816:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010818:	623b      	str	r3, [r7, #32]
            next_thread -> tx_thread_suspended_previous =  previous_thread;
 801081a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801081c:	6a3a      	ldr	r2, [r7, #32]
 801081e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =  next_thread;
 8010820:	6a3b      	ldr	r3, [r7, #32]
 8010822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010824:	671a      	str	r2, [r3, #112]	@ 0x70

            /* Now, link the highest priority thread at the front of the list.  */
            previous_thread =                                      head_ptr -> tx_thread_suspended_previous;
 8010826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801082a:	623b      	str	r3, [r7, #32]
            priority_thread_ptr -> tx_thread_suspended_next =      head_ptr;
 801082c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801082e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010830:	671a      	str	r2, [r3, #112]	@ 0x70
            priority_thread_ptr -> tx_thread_suspended_previous =  previous_thread;
 8010832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010834:	6a3a      	ldr	r2, [r7, #32]
 8010836:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =          priority_thread_ptr;
 8010838:	6a3b      	ldr	r3, [r7, #32]
 801083a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801083c:	671a      	str	r2, [r3, #112]	@ 0x70
            head_ptr -> tx_thread_suspended_previous =             priority_thread_ptr;
 801083e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010840:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010842:	675a      	str	r2, [r3, #116]	@ 0x74

            /* Move the list head pointer to the highest priority suspended thread.  */
            mutex_ptr -> tx_mutex_suspension_list =  priority_thread_ptr;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010848:	619a      	str	r2, [r3, #24]
 801084a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801084c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	f383 8810 	msr	PRIMASK, r3
}
 8010854:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8010856:	f001 fadf 	bl	8011e18 <_tx_thread_system_preempt_check>
    /* Return completion status.  */
    return(status);
#else

    /* Return successful completion.  */
    return(TX_SUCCESS);
 801085a:	2300      	movs	r3, #0
#endif
}
 801085c:	0018      	movs	r0, r3
 801085e:	46bd      	mov	sp, r7
 8010860:	b010      	add	sp, #64	@ 0x40
 8010862:	bd80      	pop	{r7, pc}
 8010864:	20011080 	.word	0x20011080

08010868 <_tx_mutex_priority_change>:
/*                                            priority rather than next,  */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  _tx_mutex_priority_change(TX_THREAD *thread_ptr, UINT new_priority)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b08e      	sub	sp, #56	@ 0x38
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010872:	f3ef 8310 	mrs	r3, PRIMASK
 8010876:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010878:	b672      	cpsid	i
    return(primask_value);
 801087a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24


#ifndef TX_NOT_INTERRUPTABLE

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 801087c:	637b      	str	r3, [r7, #52]	@ 0x34
#endif

    /* Determine if this thread is currently ready.  */
    if (thread_ptr -> tx_thread_state != TX_READY)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010882:	2b00      	cmp	r3, #0
 8010884:	d017      	beq.n	80108b6 <_tx_mutex_priority_change+0x4e>
    {

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	683a      	ldr	r2, [r7, #0]
 801088a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2298      	movs	r2, #152	@ 0x98
 8010890:	589b      	ldr	r3, [r3, r2]
 8010892:	683a      	ldr	r2, [r7, #0]
 8010894:	429a      	cmp	r2, r3
 8010896:	d905      	bls.n	80108a4 <_tx_mutex_priority_change+0x3c>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	2298      	movs	r2, #152	@ 0x98
 801089c:	589a      	ldr	r2, [r3, r2]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80108a2:	e002      	b.n	80108aa <_tx_mutex_priority_change+0x42>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	683a      	ldr	r2, [r7, #0]
 80108a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80108aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108ac:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80108ae:	6a3b      	ldr	r3, [r7, #32]
 80108b0:	f383 8810 	msr	PRIMASK, r3
}
 80108b4:	e087      	b.n	80109c6 <_tx_mutex_priority_change+0x15e>
    }
    else
    {

        /* Pickup the next thread to execute.  */
        execute_ptr =  _tx_thread_execute_ptr;
 80108b6:	4b46      	ldr	r3, [pc, #280]	@ (80109d0 <_tx_mutex_priority_change+0x168>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Save the original priority.  */
        original_priority =  thread_ptr -> tx_thread_priority;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80108c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
#else

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable =  _tx_thread_preempt_disable + ((UINT) 2);
 80108c2:	4b44      	ldr	r3, [pc, #272]	@ (80109d4 <_tx_mutex_priority_change+0x16c>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	1c9a      	adds	r2, r3, #2
 80108c8:	4b42      	ldr	r3, [pc, #264]	@ (80109d4 <_tx_mutex_priority_change+0x16c>)
 80108ca:	601a      	str	r2, [r3, #0]

        /* Set the state to priority change.  */
        thread_ptr -> tx_thread_state =    TX_PRIORITY_CHANGE;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	220e      	movs	r2, #14
 80108d0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the suspending flag. */
        thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	2201      	movs	r2, #1
 80108d6:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Setup the timeout period.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	2200      	movs	r2, #0
 80108dc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80108de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80108e0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80108e2:	69bb      	ldr	r3, [r7, #24]
 80108e4:	f383 8810 	msr	PRIMASK, r3
}
 80108e8:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE

        /* The thread is ready and must first be removed from the list.  Call the
           system suspend function to accomplish this.  */
        _tx_thread_system_suspend(thread_ptr);
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	0018      	movs	r0, r3
 80108ee:	f001 fbcb 	bl	8012088 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80108f2:	f3ef 8310 	mrs	r3, PRIMASK
 80108f6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80108f8:	b672      	cpsid	i
    return(primask_value);
 80108fa:	69fb      	ldr	r3, [r7, #28]

        /* Disable interrupts.  */
        TX_DISABLE
 80108fc:	637b      	str	r3, [r7, #52]	@ 0x34

        /* At this point, the preempt disable flag is still set, so we still have
           protection against all preemption.  */

        /* Change thread priority to the new mutex priority-inheritance priority.  */
        thread_ptr -> tx_thread_priority =  new_priority;
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	683a      	ldr	r2, [r7, #0]
 8010902:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Determine how to setup the thread's preemption-threshold.  */
        if (thread_ptr -> tx_thread_user_preempt_threshold < new_priority)
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2298      	movs	r2, #152	@ 0x98
 8010908:	589b      	ldr	r3, [r3, r2]
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	429a      	cmp	r2, r3
 801090e:	d905      	bls.n	801091c <_tx_mutex_priority_change+0xb4>
        {

            /* Change thread preemption-threshold to the user's preemption-threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2298      	movs	r2, #152	@ 0x98
 8010914:	589a      	ldr	r2, [r3, r2]
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	63da      	str	r2, [r3, #60]	@ 0x3c
 801091a:	e002      	b.n	8010922 <_tx_mutex_priority_change+0xba>
        }
        else
        {

            /* Change the thread preemption-threshold to the new threshold.  */
            thread_ptr -> tx_thread_preempt_threshold =  new_priority;
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	683a      	ldr	r2, [r7, #0]
 8010920:	63da      	str	r2, [r3, #60]	@ 0x3c
 8010922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010924:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010926:	693b      	ldr	r3, [r7, #16]
 8010928:	f383 8810 	msr	PRIMASK, r3
}
 801092c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread with the new priority.  */
        _tx_thread_system_resume(thread_ptr);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	0018      	movs	r0, r3
 8010932:	f001 faa9 	bl	8011e88 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010936:	f3ef 8310 	mrs	r3, PRIMASK
 801093a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801093c:	b672      	cpsid	i
    return(primask_value);
 801093e:	697b      	ldr	r3, [r7, #20]
        TX_MUTEX_PRIORITY_CHANGE_EXTENSION

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 8010940:	637b      	str	r3, [r7, #52]	@ 0x34
#endif

        /* Pickup the next thread to execute.  */
        next_execute_ptr =  _tx_thread_execute_ptr;
 8010942:	4b23      	ldr	r3, [pc, #140]	@ (80109d0 <_tx_mutex_priority_change+0x168>)
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Determine if this thread is not the next thread to execute.  */
        if (thread_ptr != next_execute_ptr)
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801094c:	429a      	cmp	r2, r3
 801094e:	d034      	beq.n	80109ba <_tx_mutex_priority_change+0x152>
        {

            /* Make sure the thread is still ready.  */
            if (thread_ptr -> tx_thread_state == TX_READY)
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010954:	2b00      	cmp	r3, #0
 8010956:	d130      	bne.n	80109ba <_tx_mutex_priority_change+0x152>
            {

                /* Now check and see if this thread has an equal or higher priority.  */
                if (thread_ptr -> tx_thread_priority <= next_execute_ptr -> tx_thread_priority)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801095c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801095e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010960:	429a      	cmp	r2, r3
 8010962:	d811      	bhi.n	8010988 <_tx_mutex_priority_change+0x120>
                {

                    /* Now determine if this thread was the previously executing thread.  */
                    if (thread_ptr == execute_ptr)
 8010964:	687a      	ldr	r2, [r7, #4]
 8010966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010968:	429a      	cmp	r2, r3
 801096a:	d126      	bne.n	80109ba <_tx_mutex_priority_change+0x152>

                        /* Yes, this thread was previously executing before we temporarily suspended and resumed
                           it in order to change the priority. A lower or same priority thread cannot be the next thread
                           to execute in this case since this thread really didn't suspend.  Simply reset the execute
                           pointer to this thread.  */
                        _tx_thread_execute_ptr =  thread_ptr;
 801096c:	4b18      	ldr	r3, [pc, #96]	@ (80109d0 <_tx_mutex_priority_change+0x168>)
 801096e:	687a      	ldr	r2, [r7, #4]
 8010970:	601a      	str	r2, [r3, #0]

                        /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                        if (original_priority < new_priority)
 8010972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010974:	683b      	ldr	r3, [r7, #0]
 8010976:	429a      	cmp	r2, r3
 8010978:	d21f      	bcs.n	80109ba <_tx_mutex_priority_change+0x152>
                        {

                            /* Ensure that this thread is placed at the front of the priority list.  */
                            _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801097e:	4b16      	ldr	r3, [pc, #88]	@ (80109d8 <_tx_mutex_priority_change+0x170>)
 8010980:	0092      	lsls	r2, r2, #2
 8010982:	6879      	ldr	r1, [r7, #4]
 8010984:	50d1      	str	r1, [r2, r3]
 8010986:	e018      	b.n	80109ba <_tx_mutex_priority_change+0x152>
                }
                else
                {

                    /* Now determine if this thread's preemption-threshold needs to be enforced.  */
                    if (thread_ptr -> tx_thread_preempt_threshold < thread_ptr -> tx_thread_priority)
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010990:	429a      	cmp	r2, r3
 8010992:	d212      	bcs.n	80109ba <_tx_mutex_priority_change+0x152>
                    {

                        /* Yes, preemption-threshold is in force for this thread. */

                        /* Compare the next thread to execute thread's priority against the thread's preemption-threshold.  */
                        if (thread_ptr -> tx_thread_preempt_threshold <= next_execute_ptr -> tx_thread_priority)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801099a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801099c:	429a      	cmp	r2, r3
 801099e:	d80c      	bhi.n	80109ba <_tx_mutex_priority_change+0x152>
                        {

                            /* We must swap execute pointers to enforce the preemption-threshold of a thread coming out of
                               priority inheritance.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 80109a0:	4b0b      	ldr	r3, [pc, #44]	@ (80109d0 <_tx_mutex_priority_change+0x168>)
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	601a      	str	r2, [r3, #0]

                            /* Determine if we moved to a lower priority. If so, move the thread to the front of its priority list.  */
                            if (original_priority < new_priority)
 80109a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	429a      	cmp	r2, r3
 80109ac:	d205      	bcs.n	80109ba <_tx_mutex_priority_change+0x152>
                            {

                                /* Ensure that this thread is placed at the front of the priority list.  */
                                _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109b2:	4b09      	ldr	r3, [pc, #36]	@ (80109d8 <_tx_mutex_priority_change+0x170>)
 80109b4:	0092      	lsls	r2, r2, #2
 80109b6:	6879      	ldr	r1, [r7, #4]
 80109b8:	50d1      	str	r1, [r2, r3]
 80109ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80109bc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	f383 8810 	msr	PRIMASK, r3
}
 80109c4:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80109c6:	46c0      	nop			@ (mov r8, r8)
 80109c8:	46bd      	mov	sp, r7
 80109ca:	b00e      	add	sp, #56	@ 0x38
 80109cc:	bd80      	pop	{r7, pc}
 80109ce:	46c0      	nop			@ (mov r8, r8)
 80109d0:	20010fec 	.word	0x20010fec
 80109d4:	20011080 	.word	0x20011080
 80109d8:	20011000 	.word	0x20011000

080109dc <_tx_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_mutex_put(TX_MUTEX *mutex_ptr)
{
 80109dc:	b580      	push	{r7, lr}
 80109de:	b0a0      	sub	sp, #128	@ 0x80
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
TX_THREAD       *suspended_thread;
UINT            inheritance_priority;


    /* Setup status to indicate the processing is not complete.  */
    status =  TX_NOT_DONE;
 80109e4:	2320      	movs	r3, #32
 80109e6:	673b      	str	r3, [r7, #112]	@ 0x70
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80109e8:	f3ef 8310 	mrs	r3, PRIMASK
 80109ec:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 80109ee:	b672      	cpsid	i
    return(primask_value);
 80109f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

    /* Disable interrupts to put an instance back to the mutex.  */
    TX_DISABLE
 80109f2:	67fb      	str	r3, [r7, #124]	@ 0x7c

    /* Log this kernel call.  */
    TX_EL_MUTEX_PUT_INSERT

    /* Determine if this mutex is owned.  */
    if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	689b      	ldr	r3, [r3, #8]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d100      	bne.n	80109fe <_tx_mutex_put+0x22>
 80109fc:	e1c5      	b.n	8010d8a <_tx_mutex_put+0x3ae>
    {

        /* Pickup the owning thread pointer.  */
        thread_ptr =  mutex_ptr -> tx_mutex_owner;
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	68db      	ldr	r3, [r3, #12]
 8010a02:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8010a04:	4bb4      	ldr	r3, [pc, #720]	@ (8010cd8 <_tx_mutex_put+0x2fc>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	663b      	str	r3, [r7, #96]	@ 0x60

        /* Check to see if the mutex is owned by the calling thread.  */
        if (mutex_ptr -> tx_mutex_owner != current_thread)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d00b      	beq.n	8010a2c <_tx_mutex_put+0x50>
        {

            /* Determine if the preempt disable flag is set, indicating that
               the caller is not the application but from ThreadX. In such
               cases, the thread mutex owner does not need to match.  */
            if (_tx_thread_preempt_disable == ((UINT) 0))
 8010a14:	4bb1      	ldr	r3, [pc, #708]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d107      	bne.n	8010a2c <_tx_mutex_put+0x50>
 8010a1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010a1e:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a22:	f383 8810 	msr	PRIMASK, r3
}
 8010a26:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Caller does not own the mutex.  */
                status =  TX_NOT_OWNED;
 8010a28:	231e      	movs	r3, #30
 8010a2a:	673b      	str	r3, [r7, #112]	@ 0x70
            }
        }

        /* Determine if we should continue.  */
        if (status == TX_NOT_DONE)
 8010a2c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010a2e:	2b20      	cmp	r3, #32
 8010a30:	d000      	beq.n	8010a34 <_tx_mutex_put+0x58>
 8010a32:	e1b2      	b.n	8010d9a <_tx_mutex_put+0x3be>
        {

            /* Decrement the mutex ownership count.  */
            mutex_ptr -> tx_mutex_ownership_count--;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	689b      	ldr	r3, [r3, #8]
 8010a38:	1e5a      	subs	r2, r3, #1
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	609a      	str	r2, [r3, #8]

            /* Determine if the mutex is still owned by the current thread.  */
            if (mutex_ptr -> tx_mutex_ownership_count != ((UINT) 0))
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	689b      	ldr	r3, [r3, #8]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	d008      	beq.n	8010a58 <_tx_mutex_put+0x7c>
 8010a46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010a4c:	f383 8810 	msr	PRIMASK, r3
}
 8010a50:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Mutex is still owned, just return successful status.  */
                status =  TX_SUCCESS;
 8010a52:	2300      	movs	r3, #0
 8010a54:	673b      	str	r3, [r7, #112]	@ 0x70
 8010a56:	e1a0      	b.n	8010d9a <_tx_mutex_put+0x3be>
            }
            else
            {

                /* Check for a NULL thread pointer, which can only happen during initialization.   */
                if (thread_ptr == TX_NULL)
 8010a58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d108      	bne.n	8010a70 <_tx_mutex_put+0x94>
 8010a5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010a60:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a64:	f383 8810 	msr	PRIMASK, r3
}
 8010a68:	46c0      	nop			@ (mov r8, r8)

                    /* Restore interrupts.  */
                    TX_RESTORE

                    /* Mutex is now available, return successful status.  */
                    status =  TX_SUCCESS;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8010a6e:	e194      	b.n	8010d9a <_tx_mutex_put+0x3be>
                    /* The mutex is now available.   */

                    /* Remove this mutex from the owned mutex list.  */

                    /* Decrement the ownership count.  */
                    thread_ptr -> tx_thread_owned_mutex_count--;
 8010a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010a72:	22a0      	movs	r2, #160	@ 0xa0
 8010a74:	589b      	ldr	r3, [r3, r2]
 8010a76:	1e5a      	subs	r2, r3, #1
 8010a78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010a7a:	21a0      	movs	r1, #160	@ 0xa0
 8010a7c:	505a      	str	r2, [r3, r1]

                    /* Determine if this mutex was the only one on the list.  */
                    if (thread_ptr -> tx_thread_owned_mutex_count == ((UINT) 0))
 8010a7e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010a80:	22a0      	movs	r2, #160	@ 0xa0
 8010a82:	589b      	ldr	r3, [r3, r2]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d104      	bne.n	8010a92 <_tx_mutex_put+0xb6>
                    {

                        /* Yes, the list is empty.  Simply set the head pointer to NULL.  */
                        thread_ptr -> tx_thread_owned_mutex_list =  TX_NULL;
 8010a88:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010a8a:	22a4      	movs	r2, #164	@ 0xa4
 8010a8c:	2100      	movs	r1, #0
 8010a8e:	5099      	str	r1, [r3, r2]
 8010a90:	e015      	b.n	8010abe <_tx_mutex_put+0xe2>
                    {

                        /* No, there are more mutexes on the list.  */

                        /* Link-up the neighbors.  */
                        next_mutex =                             mutex_ptr -> tx_mutex_owned_next;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a96:	66fb      	str	r3, [r7, #108]	@ 0x6c
                        previous_mutex =                         mutex_ptr -> tx_mutex_owned_previous;
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010a9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        next_mutex -> tx_mutex_owned_previous =  previous_mutex;
 8010a9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010aa0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010aa2:	631a      	str	r2, [r3, #48]	@ 0x30
                        previous_mutex -> tx_mutex_owned_next =  next_mutex;
 8010aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010aa6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010aa8:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* See if we have to update the created list head pointer.  */
                        if (thread_ptr -> tx_thread_owned_mutex_list == mutex_ptr)
 8010aaa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010aac:	22a4      	movs	r2, #164	@ 0xa4
 8010aae:	589b      	ldr	r3, [r3, r2]
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	429a      	cmp	r2, r3
 8010ab4:	d103      	bne.n	8010abe <_tx_mutex_put+0xe2>
                        {

                            /* Yes, move the head pointer to the next link. */
                            thread_ptr -> tx_thread_owned_mutex_list =  next_mutex;
 8010ab6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ab8:	21a4      	movs	r1, #164	@ 0xa4
 8010aba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010abc:	505a      	str	r2, [r3, r1]
                        }
                    }

                    /* Determine if the simple, non-suspension, non-priority inheritance case is present.  */
                    if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d10e      	bne.n	8010ae4 <_tx_mutex_put+0x108>
                    {

                        /* Is this a priority inheritance mutex?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_FALSE)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	691b      	ldr	r3, [r3, #16]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d10a      	bne.n	8010ae4 <_tx_mutex_put+0x108>
                        {

                            /* Yes, we are done - set the mutex owner to NULL.   */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	60da      	str	r2, [r3, #12]
 8010ad4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010ad6:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010ad8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ada:	f383 8810 	msr	PRIMASK, r3
}
 8010ade:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Mutex is now available, return successful status.  */
                            status =  TX_SUCCESS;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	673b      	str	r3, [r7, #112]	@ 0x70
                        }
                    }

                    /* Determine if the processing is complete.  */
                    if (status == TX_NOT_DONE)
 8010ae4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010ae6:	2b20      	cmp	r3, #32
 8010ae8:	d000      	beq.n	8010aec <_tx_mutex_put+0x110>
 8010aea:	e156      	b.n	8010d9a <_tx_mutex_put+0x3be>
                    {

                        /* Initialize original owner and thread priority.  */
                        old_owner =      TX_NULL;
 8010aec:	2300      	movs	r3, #0
 8010aee:	67bb      	str	r3, [r7, #120]	@ 0x78
                        old_priority =   thread_ptr -> tx_thread_user_priority;
 8010af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010af2:	2294      	movs	r2, #148	@ 0x94
 8010af4:	589b      	ldr	r3, [r3, r2]
 8010af6:	677b      	str	r3, [r7, #116]	@ 0x74

                        /* Does this mutex support priority inheritance?  */
                        if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	691b      	ldr	r3, [r3, #16]
 8010afc:	2b01      	cmp	r3, #1
 8010afe:	d140      	bne.n	8010b82 <_tx_mutex_put+0x1a6>
                        {

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010b00:	4b76      	ldr	r3, [pc, #472]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	1c5a      	adds	r2, r3, #1
 8010b06:	4b75      	ldr	r3, [pc, #468]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010b08:	601a      	str	r2, [r3, #0]
 8010b0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010b0c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b10:	f383 8810 	msr	PRIMASK, r3
}
 8010b14:	46c0      	nop			@ (mov r8, r8)
                            /* Restore interrupts.  */
                            TX_RESTORE
#endif

                            /* Default the inheritance priority to disabled.  */
                            inheritance_priority =  ((UINT) TX_MAX_PRIORITIES);
 8010b16:	2320      	movs	r3, #32
 8010b18:	66bb      	str	r3, [r7, #104]	@ 0x68

                            /* Search the owned mutexes for this thread to determine the highest priority for this
                               former mutex owner to return to.  */
                            next_mutex =  thread_ptr -> tx_thread_owned_mutex_list;
 8010b1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b1c:	22a4      	movs	r2, #164	@ 0xa4
 8010b1e:	589b      	ldr	r3, [r3, r2]
 8010b20:	66fb      	str	r3, [r7, #108]	@ 0x6c
                            while (next_mutex != TX_NULL)
 8010b22:	e016      	b.n	8010b52 <_tx_mutex_put+0x176>
                            {

                                /* Does this mutex support priority inheritance?  */
                                if (next_mutex -> tx_mutex_inherit == TX_TRUE)
 8010b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b26:	691b      	ldr	r3, [r3, #16]
 8010b28:	2b01      	cmp	r3, #1
 8010b2a:	d107      	bne.n	8010b3c <_tx_mutex_put+0x160>
                                {

                                    /* Determine if highest priority field of the mutex is higher than the priority to
                                       restore.  */
                                    if (next_mutex -> tx_mutex_highest_priority_waiting < inheritance_priority)
 8010b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b30:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d902      	bls.n	8010b3c <_tx_mutex_put+0x160>
                                    {

                                        /* Use this priority to return releasing thread to.  */
                                        inheritance_priority =   next_mutex -> tx_mutex_highest_priority_waiting;
 8010b36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
                                    }
                                }

                                /* Move mutex pointer to the next mutex in the list.  */
                                next_mutex =  next_mutex -> tx_mutex_owned_next;
 8010b3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b40:	66fb      	str	r3, [r7, #108]	@ 0x6c

                                /* Are we at the end of the list?  */
                                if (next_mutex == thread_ptr -> tx_thread_owned_mutex_list)
 8010b42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b44:	22a4      	movs	r2, #164	@ 0xa4
 8010b46:	589b      	ldr	r3, [r3, r2]
 8010b48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010b4a:	429a      	cmp	r2, r3
 8010b4c:	d101      	bne.n	8010b52 <_tx_mutex_put+0x176>
                                {

                                    /* Yes, set the next mutex to NULL.  */
                                    next_mutex =  TX_NULL;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	66fb      	str	r3, [r7, #108]	@ 0x6c
                            while (next_mutex != TX_NULL)
 8010b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d1e5      	bne.n	8010b24 <_tx_mutex_put+0x148>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010b58:	f3ef 8310 	mrs	r3, PRIMASK
 8010b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010b5e:	b672      	cpsid	i
    return(primask_value);
 8010b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010b62:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Undo the temporarily preemption disable.  */
                            _tx_thread_preempt_disable--;
 8010b64:	4b5d      	ldr	r3, [pc, #372]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	1e5a      	subs	r2, r3, #1
 8010b6a:	4b5c      	ldr	r3, [pc, #368]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010b6c:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the inherit priority to that of the highest priority thread waiting on the mutex.  */
                            thread_ptr -> tx_thread_inherit_priority =  inheritance_priority;
 8010b6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010b70:	219c      	movs	r1, #156	@ 0x9c
 8010b72:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010b74:	505a      	str	r2, [r3, r1]

                            /* Determine if the inheritance priority is less than the default old priority.  */
                            if (inheritance_priority < old_priority)
 8010b76:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8010b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010b7a:	429a      	cmp	r2, r3
 8010b7c:	d201      	bcs.n	8010b82 <_tx_mutex_put+0x1a6>
                            {

                                /* Yes, update the old priority.  */
                                old_priority =  inheritance_priority;
 8010b7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010b80:	677b      	str	r3, [r7, #116]	@ 0x74
                            }
                        }

                        /* Determine if priority inheritance is in effect and there are one or more
                           threads suspended on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspended_count > ((UINT) 1))
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	69db      	ldr	r3, [r3, #28]
 8010b86:	2b01      	cmp	r3, #1
 8010b88:	d91d      	bls.n	8010bc6 <_tx_mutex_put+0x1ea>
                        {

                            /* Is priority inheritance in effect?  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	691b      	ldr	r3, [r3, #16]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d119      	bne.n	8010bc6 <_tx_mutex_put+0x1ea>
                                   at the front of the suspension list.  */

#ifndef TX_NOT_INTERRUPTABLE

                                /* Temporarily disable preemption.  */
                                _tx_thread_preempt_disable++;
 8010b92:	4b52      	ldr	r3, [pc, #328]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	1c5a      	adds	r2, r3, #1
 8010b98:	4b50      	ldr	r3, [pc, #320]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010b9a:	601a      	str	r2, [r3, #0]
 8010b9c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ba2:	f383 8810 	msr	PRIMASK, r3
}
 8010ba6:	46c0      	nop			@ (mov r8, r8)
                                do
                                {
                                    status =  _tx_mutex_prioritize(mutex_ptr);
                                } while (status != TX_SUCCESS);
#else
                                _tx_mutex_prioritize(mutex_ptr);
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	0018      	movs	r0, r3
 8010bac:	f7ff fdae 	bl	801070c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8010bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010bb6:	b672      	cpsid	i
    return(primask_value);
 8010bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
                                TX_MUTEX_PUT_EXTENSION_1

#ifndef TX_NOT_INTERRUPTABLE

                                /* Disable interrupts.  */
                                TX_DISABLE
 8010bba:	67fb      	str	r3, [r7, #124]	@ 0x7c

                                /* Back off the preemption disable.  */
                                _tx_thread_preempt_disable--;
 8010bbc:	4b47      	ldr	r3, [pc, #284]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	1e5a      	subs	r2, r3, #1
 8010bc2:	4b46      	ldr	r3, [pc, #280]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010bc4:	601a      	str	r2, [r3, #0]
#endif
                            }
                        }

                        /* Now determine if there are any threads still waiting on the mutex.  */
                        if (mutex_ptr -> tx_mutex_suspension_list == TX_NULL)
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	699b      	ldr	r3, [r3, #24]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d133      	bne.n	8010c36 <_tx_mutex_put+0x25a>
                            /* No, there are no longer any threads waiting on the mutex.  */

#ifndef TX_NOT_INTERRUPTABLE

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010bce:	4b43      	ldr	r3, [pc, #268]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	1c5a      	adds	r2, r3, #1
 8010bd4:	4b41      	ldr	r3, [pc, #260]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010bd6:	601a      	str	r2, [r3, #0]
 8010bd8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010bda:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010bdc:	6a3b      	ldr	r3, [r7, #32]
 8010bde:	f383 8810 	msr	PRIMASK, r3
}
 8010be2:	46c0      	nop			@ (mov r8, r8)
                            /* Mutex is not owned, but it is possible that a thread that
                               caused a priority inheritance to occur is no longer waiting
                               on the mutex.  */

                            /* Setup the highest priority waiting thread.  */
                            mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	2220      	movs	r2, #32
 8010be8:	629a      	str	r2, [r3, #40]	@ 0x28

                            /* Determine if we need to restore priority.  */
                            if ((mutex_ptr -> tx_mutex_owner) -> tx_thread_priority != old_priority)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bf0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010bf2:	429a      	cmp	r2, r3
 8010bf4:	d006      	beq.n	8010c04 <_tx_mutex_put+0x228>
                            {

                                /* Yes, restore the priority of thread.  */
                                _tx_mutex_priority_change(mutex_ptr -> tx_mutex_owner, old_priority);
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010bfc:	0011      	movs	r1, r2
 8010bfe:	0018      	movs	r0, r3
 8010c00:	f7ff fe32 	bl	8010868 <_tx_mutex_priority_change>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010c04:	f3ef 8310 	mrs	r3, PRIMASK
 8010c08:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010c0a:	b672      	cpsid	i
    return(primask_value);
 8010c0c:	69bb      	ldr	r3, [r7, #24]
                            }

#ifndef TX_NOT_INTERRUPTABLE

                            /* Disable interrupts again.  */
                            TX_DISABLE
 8010c0e:	67fb      	str	r3, [r7, #124]	@ 0x7c

                            /* Back off the preemption disable.  */
                            _tx_thread_preempt_disable--;
 8010c10:	4b32      	ldr	r3, [pc, #200]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	1e5a      	subs	r2, r3, #1
 8010c16:	4b31      	ldr	r3, [pc, #196]	@ (8010cdc <_tx_mutex_put+0x300>)
 8010c18:	601a      	str	r2, [r3, #0]
#endif

                            /* Set the mutex owner to NULL.  */
                            mutex_ptr -> tx_mutex_owner =  TX_NULL;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	2200      	movs	r2, #0
 8010c1e:	60da      	str	r2, [r3, #12]
 8010c20:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010c22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010c24:	69fb      	ldr	r3, [r7, #28]
 8010c26:	f383 8810 	msr	PRIMASK, r3
}
 8010c2a:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Check for preemption.  */
                            _tx_thread_system_preempt_check();
 8010c2c:	f001 f8f4 	bl	8011e18 <_tx_thread_system_preempt_check>

                            /* Set status to success.  */
                            status =  TX_SUCCESS;
 8010c30:	2300      	movs	r3, #0
 8010c32:	673b      	str	r3, [r7, #112]	@ 0x70
 8010c34:	e0b1      	b.n	8010d9a <_tx_mutex_put+0x3be>
                        }
                        else
                        {

                            /* Pickup the thread at the front of the suspension list.  */
                            thread_ptr =  mutex_ptr -> tx_mutex_suspension_list;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	699b      	ldr	r3, [r3, #24]
 8010c3a:	667b      	str	r3, [r7, #100]	@ 0x64

                            /* Save the previous ownership information, if inheritance is
                               in effect.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	691b      	ldr	r3, [r3, #16]
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	d109      	bne.n	8010c58 <_tx_mutex_put+0x27c>
                            {

                                /* Remember the old mutex owner.  */
                                old_owner =  mutex_ptr -> tx_mutex_owner;
 8010c44:	687b      	ldr	r3, [r7, #4]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	67bb      	str	r3, [r7, #120]	@ 0x78

                                /* Setup owner thread priority information.  */
                                mutex_ptr -> tx_mutex_original_priority =   thread_ptr -> tx_thread_priority;
 8010c4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	615a      	str	r2, [r3, #20]

                                /* Setup the highest priority waiting thread.  */
                                mutex_ptr -> tx_mutex_highest_priority_waiting =  (UINT) TX_MAX_PRIORITIES;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	2220      	movs	r2, #32
 8010c56:	629a      	str	r2, [r3, #40]	@ 0x28
                            }

                            /* Determine how many mutexes are owned by this thread.  */
                            owned_count =  thread_ptr -> tx_thread_owned_mutex_count;
 8010c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c5a:	22a0      	movs	r2, #160	@ 0xa0
 8010c5c:	589b      	ldr	r3, [r3, r2]
 8010c5e:	65bb      	str	r3, [r7, #88]	@ 0x58

                            /* Determine if this thread owns any other mutexes that have priority inheritance.  */
                            if (owned_count == ((UINT) 0))
 8010c60:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d10a      	bne.n	8010c7c <_tx_mutex_put+0x2a0>
                            {

                                /* The owned mutex list is empty.  Add mutex to empty list.  */
                                thread_ptr -> tx_thread_owned_mutex_list =     mutex_ptr;
 8010c66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c68:	21a4      	movs	r1, #164	@ 0xa4
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	505a      	str	r2, [r3, r1]
                                mutex_ptr -> tx_mutex_owned_next =             mutex_ptr;
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	687a      	ldr	r2, [r7, #4]
 8010c72:	62da      	str	r2, [r3, #44]	@ 0x2c
                                mutex_ptr -> tx_mutex_owned_previous =         mutex_ptr;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	687a      	ldr	r2, [r7, #4]
 8010c78:	631a      	str	r2, [r3, #48]	@ 0x30
 8010c7a:	e012      	b.n	8010ca2 <_tx_mutex_put+0x2c6>
                            {

                                /* Non-empty list. Link up the mutex.  */

                                /* Pickup tail pointer.  */
                                next_mutex =                            thread_ptr -> tx_thread_owned_mutex_list;
 8010c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010c7e:	22a4      	movs	r2, #164	@ 0xa4
 8010c80:	589b      	ldr	r3, [r3, r2]
 8010c82:	66fb      	str	r3, [r7, #108]	@ 0x6c
                                previous_mutex =                        next_mutex -> tx_mutex_owned_previous;
 8010c84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010c88:	65fb      	str	r3, [r7, #92]	@ 0x5c

                                /* Place the owned mutex in the list.  */
                                next_mutex -> tx_mutex_owned_previous =  mutex_ptr;
 8010c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	631a      	str	r2, [r3, #48]	@ 0x30
                                previous_mutex -> tx_mutex_owned_next =  mutex_ptr;
 8010c90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8010c92:	687a      	ldr	r2, [r7, #4]
 8010c94:	62da      	str	r2, [r3, #44]	@ 0x2c

                                /* Setup this mutex's next and previous created links.  */
                                mutex_ptr -> tx_mutex_owned_previous =   previous_mutex;
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010c9a:	631a      	str	r2, [r3, #48]	@ 0x30
                                mutex_ptr -> tx_mutex_owned_next =       next_mutex;
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8010ca0:	62da      	str	r2, [r3, #44]	@ 0x2c
                            }

                            /* Increment the number of mutexes owned counter.  */
                            thread_ptr -> tx_thread_owned_mutex_count =  owned_count + ((UINT) 1);
 8010ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8010ca4:	1c5a      	adds	r2, r3, #1
 8010ca6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ca8:	21a0      	movs	r1, #160	@ 0xa0
 8010caa:	505a      	str	r2, [r3, r1]

                            /* Mark the Mutex as owned and fill in the corresponding information.  */
                            mutex_ptr -> tx_mutex_ownership_count =  (UINT) 1;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2201      	movs	r2, #1
 8010cb0:	609a      	str	r2, [r3, #8]
                            mutex_ptr -> tx_mutex_owner =            thread_ptr;
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8010cb6:	60da      	str	r2, [r3, #12]

                            /* Remove the suspended thread from the list.  */

                            /* Decrement the suspension count.  */
                            mutex_ptr -> tx_mutex_suspended_count--;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	69db      	ldr	r3, [r3, #28]
 8010cbc:	1e5a      	subs	r2, r3, #1
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	61da      	str	r2, [r3, #28]

                            /* Pickup the suspended count.  */
                            suspended_count =  mutex_ptr -> tx_mutex_suspended_count;
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	69db      	ldr	r3, [r3, #28]
 8010cc6:	657b      	str	r3, [r7, #84]	@ 0x54

                            /* See if this is the only suspended thread on the list.  */
                            if (suspended_count == TX_NO_SUSPENSIONS)
 8010cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d108      	bne.n	8010ce0 <_tx_mutex_put+0x304>
                            {

                                /* Yes, the only suspended thread.  */

                                /* Update the head pointer.  */
                                mutex_ptr -> tx_mutex_suspension_list =  TX_NULL;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	619a      	str	r2, [r3, #24]
 8010cd4:	e013      	b.n	8010cfe <_tx_mutex_put+0x322>
 8010cd6:	46c0      	nop			@ (mov r8, r8)
 8010cd8:	20010fe8 	.word	0x20010fe8
 8010cdc:	20011080 	.word	0x20011080
                            {

                                /* At least one more thread is on the same expiration list.  */

                                /* Update the list head pointer.  */
                                next_thread =                                  thread_ptr -> tx_thread_suspended_next;
 8010ce0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ce4:	653b      	str	r3, [r7, #80]	@ 0x50
                                mutex_ptr -> tx_mutex_suspension_list =        next_thread;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cea:	619a      	str	r2, [r3, #24]

                                /* Update the links of the adjacent threads.  */
                                previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
 8010cec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                                next_thread -> tx_thread_suspended_previous =  previous_thread;
 8010cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010cf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010cf6:	675a      	str	r2, [r3, #116]	@ 0x74
                                previous_thread -> tx_thread_suspended_next =  next_thread;
 8010cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8010cfc:	671a      	str	r2, [r3, #112]	@ 0x70
                            }

                            /* Prepare for resumption of the first thread.  */

                            /* Clear cleanup routine to avoid timeout.  */
                            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010cfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010d00:	2200      	movs	r2, #0
 8010d02:	669a      	str	r2, [r3, #104]	@ 0x68

                            /* Put return status into the thread control block.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010d04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010d06:	2284      	movs	r2, #132	@ 0x84
 8010d08:	2100      	movs	r1, #0
 8010d0a:	5099      	str	r1, [r3, r2]
                            /* Restore interrupts.  */
                            TX_RESTORE
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010d0c:	4b25      	ldr	r3, [pc, #148]	@ (8010da4 <_tx_mutex_put+0x3c8>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	1c5a      	adds	r2, r3, #1
 8010d12:	4b24      	ldr	r3, [pc, #144]	@ (8010da4 <_tx_mutex_put+0x3c8>)
 8010d14:	601a      	str	r2, [r3, #0]
 8010d16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010d18:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	f383 8810 	msr	PRIMASK, r3
}
 8010d20:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Determine if priority inheritance is enabled for this mutex.  */
                            if (mutex_ptr -> tx_mutex_inherit == TX_TRUE)
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	691b      	ldr	r3, [r3, #16]
 8010d26:	2b01      	cmp	r3, #1
 8010d28:	d128      	bne.n	8010d7c <_tx_mutex_put+0x3a0>
                            {

                                /* Yes, priority inheritance is requested.  */

                                /* Determine if there are any more threads still suspended on the mutex.  */
                                if (mutex_ptr -> tx_mutex_suspended_count != TX_NO_SUSPENSIONS)
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	69db      	ldr	r3, [r3, #28]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d019      	beq.n	8010d66 <_tx_mutex_put+0x38a>
                                    do
                                    {
                                        status =  _tx_mutex_prioritize(mutex_ptr);
                                    } while (status != TX_SUCCESS);
#else
                                    _tx_mutex_prioritize(mutex_ptr);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	0018      	movs	r0, r3
 8010d36:	f7ff fce9 	bl	801070c <_tx_mutex_prioritize>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010d3a:	f3ef 8310 	mrs	r3, PRIMASK
 8010d3e:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010d40:	b672      	cpsid	i
    return(primask_value);
 8010d42:	693b      	ldr	r3, [r7, #16]

                                    /* Optional processing extension.  */
                                    TX_MUTEX_PUT_EXTENSION_2

                                    /* Disable interrupts.  */
                                    TX_DISABLE
 8010d44:	67fb      	str	r3, [r7, #124]	@ 0x7c

                                    /* Determine if there still are threads suspended for this mutex.  */
                                    suspended_thread =  mutex_ptr -> tx_mutex_suspension_list;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	699b      	ldr	r3, [r3, #24]
 8010d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
                                    if (suspended_thread != TX_NULL)
 8010d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d003      	beq.n	8010d5a <_tx_mutex_put+0x37e>
                                    {

                                        /* Setup the highest priority thread waiting on this mutex.  */
                                        mutex_ptr -> tx_mutex_highest_priority_waiting =  suspended_thread -> tx_thread_priority;
 8010d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	629a      	str	r2, [r3, #40]	@ 0x28
 8010d5a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010d5c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	f383 8810 	msr	PRIMASK, r3
}
 8010d64:	46c0      	nop			@ (mov r8, r8)

                                /* Restore previous priority needs to be restored after priority
                                   inheritance.  */

                                /* Is the priority different?  */
                                if (old_owner -> tx_thread_priority != old_priority)
 8010d66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d6a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d005      	beq.n	8010d7c <_tx_mutex_put+0x3a0>
                                {

                                    /* Restore the priority of thread.  */
                                    _tx_mutex_priority_change(old_owner, old_priority);
 8010d70:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8010d72:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8010d74:	0011      	movs	r1, r2
 8010d76:	0018      	movs	r0, r3
 8010d78:	f7ff fd76 	bl	8010868 <_tx_mutex_priority_change>
                                }
                            }

                            /* Resume thread.  */
                            _tx_thread_system_resume(thread_ptr);
 8010d7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010d7e:	0018      	movs	r0, r3
 8010d80:	f001 f882 	bl	8011e88 <_tx_thread_system_resume>
#endif

                            /* Return a successful status.  */
                            status =  TX_SUCCESS;
 8010d84:	2300      	movs	r3, #0
 8010d86:	673b      	str	r3, [r7, #112]	@ 0x70
 8010d88:	e007      	b.n	8010d9a <_tx_mutex_put+0x3be>
 8010d8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8010d8c:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010d8e:	68bb      	ldr	r3, [r7, #8]
 8010d90:	f383 8810 	msr	PRIMASK, r3
}
 8010d94:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Caller does not own the mutex.  */
        status =  TX_NOT_OWNED;
 8010d96:	231e      	movs	r3, #30
 8010d98:	673b      	str	r3, [r7, #112]	@ 0x70
    }

    /* Return the completion status.  */
    return(status);
 8010d9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
}
 8010d9c:	0018      	movs	r0, r3
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	b020      	add	sp, #128	@ 0x80
 8010da2:	bd80      	pop	{r7, pc}
 8010da4:	20011080 	.word	0x20011080

08010da8 <_tx_queue_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_queue_cleanup(TX_THREAD  *thread_ptr, ULONG suspension_sequence)
{
 8010da8:	b580      	push	{r7, lr}
 8010daa:	b08c      	sub	sp, #48	@ 0x30
 8010dac:	af00      	add	r7, sp, #0
 8010dae:	6078      	str	r0, [r7, #4]
 8010db0:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010db2:	f3ef 8310 	mrs	r3, PRIMASK
 8010db6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010db8:	b672      	cpsid	i
    return(primask_value);
 8010dba:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the queue.  */
    TX_DISABLE
 8010dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_queue_cleanup))
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8010dc2:	4b37      	ldr	r3, [pc, #220]	@ (8010ea0 <_tx_queue_cleanup+0xf8>)
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d160      	bne.n	8010e8a <_tx_queue_cleanup+0xe2>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	22ac      	movs	r2, #172	@ 0xac
 8010dcc:	589b      	ldr	r3, [r3, r2]
 8010dce:	683a      	ldr	r2, [r7, #0]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d15a      	bne.n	8010e8a <_tx_queue_cleanup+0xe2>
        {

            /* Setup pointer to queue control block.  */
            queue_ptr =  TX_VOID_TO_QUEUE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010dd8:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for NULL queue pointer.  */
            if (queue_ptr != TX_NULL)
 8010dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d054      	beq.n	8010e8a <_tx_queue_cleanup+0xe2>
            {

                /* Is the queue ID valid?  */
                if (queue_ptr -> tx_queue_id == TX_QUEUE_ID)
 8010de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	4a2f      	ldr	r2, [pc, #188]	@ (8010ea4 <_tx_queue_cleanup+0xfc>)
 8010de6:	4293      	cmp	r3, r2
 8010de8:	d14f      	bne.n	8010e8a <_tx_queue_cleanup+0xe2>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (queue_ptr -> tx_queue_suspended_count != TX_NO_SUSPENSIONS)
 8010dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d04b      	beq.n	8010e8a <_tx_queue_cleanup+0xe2>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2200      	movs	r2, #0
 8010df6:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        queue_ptr -> tx_queue_suspended_count--;
 8010df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dfc:	1e5a      	subs	r2, r3, #1
 8010dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e00:	62da      	str	r2, [r3, #44]	@ 0x2c

                        /* Pickup the suspended count.  */
                        suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8010e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010e06:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8010e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d103      	bne.n	8010e16 <_tx_queue_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8010e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e10:	2200      	movs	r2, #0
 8010e12:	629a      	str	r2, [r3, #40]	@ 0x28
 8010e14:	e013      	b.n	8010e3e <_tx_queue_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010e1a:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010e20:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010e22:	6a3b      	ldr	r3, [r7, #32]
 8010e24:	69fa      	ldr	r2, [r7, #28]
 8010e26:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8010e28:	69fb      	ldr	r3, [r7, #28]
 8010e2a:	6a3a      	ldr	r2, [r7, #32]
 8010e2c:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (queue_ptr -> tx_queue_suspension_list == thread_ptr)
 8010e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010e32:	687a      	ldr	r2, [r7, #4]
 8010e34:	429a      	cmp	r2, r3
 8010e36:	d102      	bne.n	8010e3e <_tx_queue_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                queue_ptr -> tx_queue_suspension_list =         next_thread;
 8010e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e3a:	6a3a      	ldr	r2, [r7, #32]
 8010e3c:	629a      	str	r2, [r3, #40]	@ 0x28
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_QUEUE_SUSP)
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010e42:	2b05      	cmp	r3, #5
 8010e44:	d121      	bne.n	8010e8a <_tx_queue_cleanup+0xe2>
                            /* Increment the number of timeouts on this queue.  */
                            queue_ptr -> tx_queue_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            if (queue_ptr -> tx_queue_enqueued != TX_NO_MESSAGES)
 8010e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e48:	691b      	ldr	r3, [r3, #16]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d004      	beq.n	8010e58 <_tx_queue_cleanup+0xb0>
                            {

                                /* Queue full timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_FULL;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2284      	movs	r2, #132	@ 0x84
 8010e52:	210b      	movs	r1, #11
 8010e54:	5099      	str	r1, [r3, r2]
 8010e56:	e003      	b.n	8010e60 <_tx_queue_cleanup+0xb8>
                            }
                            else
                            {

                                /* Queue empty timeout!  */
                                thread_ptr -> tx_thread_suspend_status =  TX_QUEUE_EMPTY;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2284      	movs	r2, #132	@ 0x84
 8010e5c:	210a      	movs	r1, #10
 8010e5e:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 8010e60:	4b11      	ldr	r3, [pc, #68]	@ (8010ea8 <_tx_queue_cleanup+0x100>)
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	1c5a      	adds	r2, r3, #1
 8010e66:	4b10      	ldr	r3, [pc, #64]	@ (8010ea8 <_tx_queue_cleanup+0x100>)
 8010e68:	601a      	str	r2, [r3, #0]
 8010e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e6e:	693b      	ldr	r3, [r7, #16]
 8010e70:	f383 8810 	msr	PRIMASK, r3
}
 8010e74:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	0018      	movs	r0, r3
 8010e7a:	f001 f805 	bl	8011e88 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8010e82:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010e84:	b672      	cpsid	i
    return(primask_value);
 8010e86:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 8010e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e8c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	f383 8810 	msr	PRIMASK, r3
}
 8010e94:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8010e96:	46c0      	nop			@ (mov r8, r8)
 8010e98:	46bd      	mov	sp, r7
 8010e9a:	b00c      	add	sp, #48	@ 0x30
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	46c0      	nop			@ (mov r8, r8)
 8010ea0:	08010da9 	.word	0x08010da9
 8010ea4:	51554555 	.word	0x51554555
 8010ea8:	20011080 	.word	0x20011080

08010eac <_tx_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b094      	sub	sp, #80	@ 0x50
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	607a      	str	r2, [r7, #4]
VOID            (*queue_send_notify)(struct TX_QUEUE_STRUCT *notify_queue_ptr);
#endif


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8010ebc:	f3ef 8310 	mrs	r3, PRIMASK
 8010ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8010ec2:	b672      	cpsid	i
    return(primask_value);
 8010ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Disable interrupts to place message in the queue.  */
    TX_DISABLE
 8010ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Log this kernel call.  */
    TX_EL_QUEUE_SEND_INSERT

    /* Pickup the thread suspension count.  */
    suspended_count =  queue_ptr -> tx_queue_suspended_count;
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ecc:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Determine if there is room in the queue.  */
    if (queue_ptr -> tx_queue_available_storage != TX_NO_MESSAGES)
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	695b      	ldr	r3, [r3, #20]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d100      	bne.n	8010ed8 <_tx_queue_send+0x2c>
 8010ed6:	e09b      	b.n	8011010 <_tx_queue_send+0x164>
    {

        /* There is room for the message in the queue.  */

        /* Determine if there are suspended on this queue.  */
        if (suspended_count == TX_NO_SUSPENSIONS)
 8010ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d13c      	bne.n	8010f58 <_tx_queue_send+0xac>
        {

            /* No suspended threads, simply place the message in the queue.  */

            /* Reduce the amount of available storage.  */
            queue_ptr -> tx_queue_available_storage--;
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	695b      	ldr	r3, [r3, #20]
 8010ee2:	1e5a      	subs	r2, r3, #1
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	615a      	str	r2, [r3, #20]

            /* Increase the enqueued count.  */
            queue_ptr -> tx_queue_enqueued++;
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	691b      	ldr	r3, [r3, #16]
 8010eec:	1c5a      	adds	r2, r3, #1
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	611a      	str	r2, [r3, #16]

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  queue_ptr -> tx_queue_write;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010efa:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	689b      	ldr	r3, [r3, #8]
 8010f00:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010f02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010f04:	1d13      	adds	r3, r2, #4
 8010f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f0a:	1d19      	adds	r1, r3, #4
 8010f0c:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010f0e:	6812      	ldr	r2, [r2, #0]
 8010f10:	601a      	str	r2, [r3, #0]
 8010f12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f14:	2b01      	cmp	r3, #1
 8010f16:	d90e      	bls.n	8010f36 <_tx_queue_send+0x8a>
 8010f18:	e007      	b.n	8010f2a <_tx_queue_send+0x7e>
 8010f1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010f1c:	1d13      	adds	r3, r2, #4
 8010f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010f20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010f22:	1d19      	adds	r1, r3, #4
 8010f24:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010f26:	6812      	ldr	r2, [r2, #0]
 8010f28:	601a      	str	r2, [r3, #0]
 8010f2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d1f1      	bne.n	8010f1a <_tx_queue_send+0x6e>

            /* Determine if we are at the end.  */
            if (destination == queue_ptr -> tx_queue_end)
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	69db      	ldr	r3, [r3, #28]
 8010f3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d102      	bne.n	8010f46 <_tx_queue_send+0x9a>
            {

                /* Yes, wrap around to the beginning.  */
                destination =  queue_ptr -> tx_queue_start;
 8010f40:	68fb      	ldr	r3, [r7, #12]
 8010f42:	699b      	ldr	r3, [r3, #24]
 8010f44:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Adjust the write pointer.  */
            queue_ptr -> tx_queue_write =  destination;
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8010f4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f52:	f383 8810 	msr	PRIMASK, r3
}
 8010f56:	e0ca      	b.n	80110ee <_tx_queue_send+0x242>
            /* There is a thread suspended on an empty queue. Simply
               copy the message to the suspended thread's destination
               pointer.  */

            /* Pickup the head of the suspension list.  */
            thread_ptr =  queue_ptr -> tx_queue_suspension_list;
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f5c:	637b      	str	r3, [r7, #52]	@ 0x34

            /* See if this is the only suspended thread on the list.  */
            suspended_count--;
 8010f5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f60:	3b01      	subs	r3, #1
 8010f62:	63bb      	str	r3, [r7, #56]	@ 0x38
            if (suspended_count == TX_NO_SUSPENSIONS)
 8010f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d103      	bne.n	8010f72 <_tx_queue_send+0xc6>
            {

                /* Yes, the only suspended thread.  */

                /* Update the head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  TX_NULL;
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2200      	movs	r2, #0
 8010f6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8010f70:	e012      	b.n	8010f98 <_tx_queue_send+0xec>
            {

                /* At least one more thread is on the same expiration list.  */

                /* Update the list head pointer.  */
                queue_ptr -> tx_queue_suspension_list =  thread_ptr -> tx_thread_suspended_next;
 8010f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f74:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                next_thread =                            thread_ptr -> tx_thread_suspended_next;
 8010f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f7e:	633b      	str	r3, [r7, #48]	@ 0x30
                queue_ptr -> tx_queue_suspension_list =  next_thread;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f84:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Update the links of the adjacent threads.  */
                previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8010f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010f8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                next_thread -> tx_thread_suspended_previous =   previous_thread;
 8010f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010f90:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   next_thread;
 8010f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f96:	671a      	str	r2, [r3, #112]	@ 0x70
            }

            /* Decrement the suspension count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count;
 8010f98:	68fb      	ldr	r3, [r7, #12]
 8010f9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010f9c:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Prepare for resumption of the thread.  */

            /* Clear cleanup routine to avoid timeout.  */
            thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 8010f9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fa0:	2200      	movs	r2, #0
 8010fa2:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup source and destination pointers.  */
            source =       TX_VOID_TO_ULONG_POINTER_CONVERT(source_ptr);
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            destination =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
 8010fa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010faa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010fac:	64bb      	str	r3, [r7, #72]	@ 0x48
            size =         queue_ptr -> tx_queue_message_size;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Copy message. Note that the source and destination pointers are
               incremented by the macro.  */
            TX_QUEUE_MESSAGE_COPY(source, destination, size)
 8010fb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010fb6:	1d13      	adds	r3, r2, #4
 8010fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010fba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010fbc:	1d19      	adds	r1, r3, #4
 8010fbe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010fc0:	6812      	ldr	r2, [r2, #0]
 8010fc2:	601a      	str	r2, [r3, #0]
 8010fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d90e      	bls.n	8010fe8 <_tx_queue_send+0x13c>
 8010fca:	e007      	b.n	8010fdc <_tx_queue_send+0x130>
 8010fcc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010fce:	1d13      	adds	r3, r2, #4
 8010fd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010fd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010fd4:	1d19      	adds	r1, r3, #4
 8010fd6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010fd8:	6812      	ldr	r2, [r2, #0]
 8010fda:	601a      	str	r2, [r3, #0]
 8010fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fde:	3b01      	subs	r3, #1
 8010fe0:	647b      	str	r3, [r7, #68]	@ 0x44
 8010fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d1f1      	bne.n	8010fcc <_tx_queue_send+0x120>

            /* Put return status into the thread control block.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8010fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010fea:	2284      	movs	r2, #132	@ 0x84
 8010fec:	2100      	movs	r1, #0
 8010fee:	5099      	str	r1, [r3, r2]
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8010ff0:	4b41      	ldr	r3, [pc, #260]	@ (80110f8 <_tx_queue_send+0x24c>)
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	1c5a      	adds	r2, r3, #1
 8010ff6:	4b40      	ldr	r3, [pc, #256]	@ (80110f8 <_tx_queue_send+0x24c>)
 8010ff8:	601a      	str	r2, [r3, #0]
 8010ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ffc:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8010ffe:	6a3b      	ldr	r3, [r7, #32]
 8011000:	f383 8810 	msr	PRIMASK, r3
}
 8011004:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Resume thread.  */
            _tx_thread_system_resume(thread_ptr);
 8011006:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011008:	0018      	movs	r0, r3
 801100a:	f000 ff3d 	bl	8011e88 <_tx_thread_system_resume>
 801100e:	e06e      	b.n	80110ee <_tx_queue_send+0x242>
#endif
        }
    }

    /* At this point, the queue is full. Determine if suspension is requested.  */
    else if (wait_option != TX_NO_WAIT)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d063      	beq.n	80110de <_tx_queue_send+0x232>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011016:	4b38      	ldr	r3, [pc, #224]	@ (80110f8 <_tx_queue_send+0x24c>)
 8011018:	681b      	ldr	r3, [r3, #0]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d008      	beq.n	8011030 <_tx_queue_send+0x184>
 801101e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011020:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	f383 8810 	msr	PRIMASK, r3
}
 8011028:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_QUEUE_FULL;
 801102a:	230b      	movs	r3, #11
 801102c:	643b      	str	r3, [r7, #64]	@ 0x40
 801102e:	e05e      	b.n	80110ee <_tx_queue_send+0x242>
            /* Increment the number of full suspensions on this queue.  */
            queue_ptr -> tx_queue_performance_full_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8011030:	4b32      	ldr	r3, [pc, #200]	@ (80110fc <_tx_queue_send+0x250>)
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_queue_cleanup);
 8011036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011038:	4a31      	ldr	r2, [pc, #196]	@ (8011100 <_tx_queue_send+0x254>)
 801103a:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this queue control
               block and the source pointer.  */
            thread_ptr -> tx_thread_suspend_control_block =    (VOID *) queue_ptr;
 801103c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801103e:	68fa      	ldr	r2, [r7, #12]
 8011040:	66da      	str	r2, [r3, #108]	@ 0x6c
            thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) source_ptr;
 8011042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011044:	68ba      	ldr	r2, [r7, #8]
 8011046:	67da      	str	r2, [r3, #124]	@ 0x7c
            thread_ptr -> tx_thread_suspend_option =           TX_FALSE;
 8011048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801104a:	2280      	movs	r2, #128	@ 0x80
 801104c:	2100      	movs	r1, #0
 801104e:	5099      	str	r1, [r3, r2]

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 8011050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011052:	22ac      	movs	r2, #172	@ 0xac
 8011054:	589b      	ldr	r3, [r3, r2]
 8011056:	1c5a      	adds	r2, r3, #1
 8011058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801105a:	21ac      	movs	r1, #172	@ 0xac
 801105c:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (suspended_count == TX_NO_SUSPENSIONS)
 801105e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011060:	2b00      	cmp	r3, #0
 8011062:	d109      	bne.n	8011078 <_tx_queue_send+0x1cc>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                queue_ptr -> tx_queue_suspension_list =         thread_ptr;
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011068:	629a      	str	r2, [r3, #40]	@ 0x28
                thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 801106a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801106c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801106e:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 8011070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011072:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011074:	675a      	str	r2, [r3, #116]	@ 0x74
 8011076:	e011      	b.n	801109c <_tx_queue_send+0x1f0>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   queue_ptr -> tx_queue_suspension_list;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801107c:	633b      	str	r3, [r7, #48]	@ 0x30
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801107e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011080:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011082:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011086:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011088:	62fb      	str	r3, [r7, #44]	@ 0x2c
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801108a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801108c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801108e:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011094:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011098:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801109a:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the suspended thread count.  */
            queue_ptr -> tx_queue_suspended_count =  suspended_count + ((UINT) 1);
 801109c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801109e:	1c5a      	adds	r2, r3, #1
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_QUEUE_SUSP;
 80110a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110a6:	2205      	movs	r2, #5
 80110a8:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80110aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110ac:	2201      	movs	r2, #1
 80110ae:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80110b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110b2:	687a      	ldr	r2, [r7, #4]
 80110b4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80110b6:	4b10      	ldr	r3, [pc, #64]	@ (80110f8 <_tx_queue_send+0x24c>)
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	1c5a      	adds	r2, r3, #1
 80110bc:	4b0e      	ldr	r3, [pc, #56]	@ (80110f8 <_tx_queue_send+0x24c>)
 80110be:	601a      	str	r2, [r3, #0]
 80110c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110c2:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80110c4:	69bb      	ldr	r3, [r7, #24]
 80110c6:	f383 8810 	msr	PRIMASK, r3
}
 80110ca:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80110cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110ce:	0018      	movs	r0, r3
 80110d0:	f000 ffda 	bl	8012088 <_tx_thread_system_suspend>
                }
            }
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80110d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110d6:	2284      	movs	r2, #132	@ 0x84
 80110d8:	589b      	ldr	r3, [r3, r2]
 80110da:	643b      	str	r3, [r7, #64]	@ 0x40
 80110dc:	e007      	b.n	80110ee <_tx_queue_send+0x242>
 80110de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110e0:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	f383 8810 	msr	PRIMASK, r3
}
 80110e8:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return error completion.  */
        status =  TX_QUEUE_FULL;
 80110ea:	230b      	movs	r3, #11
 80110ec:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Return completion status.  */
    return(status);
 80110ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80110f0:	0018      	movs	r0, r3
 80110f2:	46bd      	mov	sp, r7
 80110f4:	b014      	add	sp, #80	@ 0x50
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	20011080 	.word	0x20011080
 80110fc:	20010fe8 	.word	0x20010fe8
 8011100:	08010da9 	.word	0x08010da9

08011104 <_tx_semaphore_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_semaphore_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b08c      	sub	sp, #48	@ 0x30
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
 801110c:	6039      	str	r1, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801110e:	f3ef 8310 	mrs	r3, PRIMASK
 8011112:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011114:	b672      	cpsid	i
    return(primask_value);
 8011116:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the semaphore.  */
    TX_DISABLE
 8011118:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_semaphore_cleanup))
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801111e:	4b32      	ldr	r3, [pc, #200]	@ (80111e8 <_tx_semaphore_cleanup+0xe4>)
 8011120:	429a      	cmp	r2, r3
 8011122:	d157      	bne.n	80111d4 <_tx_semaphore_cleanup+0xd0>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	22ac      	movs	r2, #172	@ 0xac
 8011128:	589b      	ldr	r3, [r3, r2]
 801112a:	683a      	ldr	r2, [r7, #0]
 801112c:	429a      	cmp	r2, r3
 801112e:	d151      	bne.n	80111d4 <_tx_semaphore_cleanup+0xd0>
        {

            /* Setup pointer to semaphore control block.  */
            semaphore_ptr =  TX_VOID_TO_SEMAPHORE_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011134:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for a NULL semaphore pointer.  */
            if (semaphore_ptr != TX_NULL)
 8011136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011138:	2b00      	cmp	r3, #0
 801113a:	d04b      	beq.n	80111d4 <_tx_semaphore_cleanup+0xd0>
            {

                /* Check for a valid semaphore ID.  */
                if (semaphore_ptr -> tx_semaphore_id == TX_SEMAPHORE_ID)
 801113c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	4a2a      	ldr	r2, [pc, #168]	@ (80111ec <_tx_semaphore_cleanup+0xe8>)
 8011142:	4293      	cmp	r3, r2
 8011144:	d146      	bne.n	80111d4 <_tx_semaphore_cleanup+0xd0>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (semaphore_ptr -> tx_semaphore_suspended_count != TX_NO_SUSPENSIONS)
 8011146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011148:	691b      	ldr	r3, [r3, #16]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d042      	beq.n	80111d4 <_tx_semaphore_cleanup+0xd0>
#endif

                        /* Yes, we still have thread suspension!  */

                        /* Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	669a      	str	r2, [r3, #104]	@ 0x68

                        /* Decrement the suspended count.  */
                        semaphore_ptr -> tx_semaphore_suspended_count--;
 8011154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011156:	691b      	ldr	r3, [r3, #16]
 8011158:	1e5a      	subs	r2, r3, #1
 801115a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801115c:	611a      	str	r2, [r3, #16]

                        /* Pickup the suspended count.  */
                        suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801115e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011160:	691b      	ldr	r3, [r3, #16]
 8011162:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 8011164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011166:	2b00      	cmp	r3, #0
 8011168:	d103      	bne.n	8011172 <_tx_semaphore_cleanup+0x6e>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 801116a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801116c:	2200      	movs	r2, #0
 801116e:	60da      	str	r2, [r3, #12]
 8011170:	e013      	b.n	801119a <_tx_semaphore_cleanup+0x96>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011176:	623b      	str	r3, [r7, #32]
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801117c:	61fb      	str	r3, [r7, #28]
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801117e:	6a3b      	ldr	r3, [r7, #32]
 8011180:	69fa      	ldr	r2, [r7, #28]
 8011182:	675a      	str	r2, [r3, #116]	@ 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011184:	69fb      	ldr	r3, [r7, #28]
 8011186:	6a3a      	ldr	r2, [r7, #32]
 8011188:	671a      	str	r2, [r3, #112]	@ 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (semaphore_ptr -> tx_semaphore_suspension_list == thread_ptr)
 801118a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801118c:	68db      	ldr	r3, [r3, #12]
 801118e:	687a      	ldr	r2, [r7, #4]
 8011190:	429a      	cmp	r2, r3
 8011192:	d102      	bne.n	801119a <_tx_semaphore_cleanup+0x96>
                            {

                                /* Update the list head pointer.  */
                                semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 8011194:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011196:	6a3a      	ldr	r2, [r7, #32]
 8011198:	60da      	str	r2, [r3, #12]
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_SEMAPHORE_SUSP)
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801119e:	2b06      	cmp	r3, #6
 80111a0:	d118      	bne.n	80111d4 <_tx_semaphore_cleanup+0xd0>
                            /* Increment the number of timeouts on this semaphore.  */
                            semaphore_ptr -> tx_semaphore_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_INSTANCE;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	2284      	movs	r2, #132	@ 0x84
 80111a6:	210d      	movs	r1, #13
 80111a8:	5099      	str	r1, [r3, r2]
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 80111aa:	4b11      	ldr	r3, [pc, #68]	@ (80111f0 <_tx_semaphore_cleanup+0xec>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	1c5a      	adds	r2, r3, #1
 80111b0:	4b0f      	ldr	r3, [pc, #60]	@ (80111f0 <_tx_semaphore_cleanup+0xec>)
 80111b2:	601a      	str	r2, [r3, #0]
 80111b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111b6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80111b8:	693b      	ldr	r3, [r7, #16]
 80111ba:	f383 8810 	msr	PRIMASK, r3
}
 80111be:	46c0      	nop			@ (mov r8, r8)

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	0018      	movs	r0, r3
 80111c4:	f000 fe60 	bl	8011e88 <_tx_thread_system_resume>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80111c8:	f3ef 8310 	mrs	r3, PRIMASK
 80111cc:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80111ce:	b672      	cpsid	i
    return(primask_value);
 80111d0:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 80111d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80111d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111d6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	f383 8810 	msr	PRIMASK, r3
}
 80111de:	46c0      	nop			@ (mov r8, r8)
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 80111e0:	46c0      	nop			@ (mov r8, r8)
 80111e2:	46bd      	mov	sp, r7
 80111e4:	b00c      	add	sp, #48	@ 0x30
 80111e6:	bd80      	pop	{r7, pc}
 80111e8:	08011105 	.word	0x08011105
 80111ec:	53454d41 	.word	0x53454d41
 80111f0:	20011080 	.word	0x20011080

080111f4 <_tx_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b08e      	sub	sp, #56	@ 0x38
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	60f8      	str	r0, [r7, #12]
 80111fc:	60b9      	str	r1, [r7, #8]
 80111fe:	607a      	str	r2, [r7, #4]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Initialize semaphore control block to all zeros.  */
    TX_MEMSET(semaphore_ptr, 0, (sizeof(TX_SEMAPHORE)));
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	637b      	str	r3, [r7, #52]	@ 0x34
 8011204:	232f      	movs	r3, #47	@ 0x2f
 8011206:	18fb      	adds	r3, r7, r3
 8011208:	2200      	movs	r2, #0
 801120a:	701a      	strb	r2, [r3, #0]
 801120c:	231c      	movs	r3, #28
 801120e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011210:	2300      	movs	r3, #0
 8011212:	633b      	str	r3, [r7, #48]	@ 0x30
 8011214:	e009      	b.n	801122a <_tx_semaphore_create+0x36>
 8011216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011218:	1c5a      	adds	r2, r3, #1
 801121a:	637a      	str	r2, [r7, #52]	@ 0x34
 801121c:	222f      	movs	r2, #47	@ 0x2f
 801121e:	18ba      	adds	r2, r7, r2
 8011220:	7812      	ldrb	r2, [r2, #0]
 8011222:	701a      	strb	r2, [r3, #0]
 8011224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011226:	3301      	adds	r3, #1
 8011228:	633b      	str	r3, [r7, #48]	@ 0x30
 801122a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801122c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801122e:	429a      	cmp	r2, r3
 8011230:	d3f1      	bcc.n	8011216 <_tx_semaphore_create+0x22>

    /* Setup the basic semaphore fields.  */
    semaphore_ptr -> tx_semaphore_name =             name_ptr;
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	68ba      	ldr	r2, [r7, #8]
 8011236:	605a      	str	r2, [r3, #4]
    semaphore_ptr -> tx_semaphore_count =            initial_count;
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	687a      	ldr	r2, [r7, #4]
 801123c:	609a      	str	r2, [r3, #8]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801123e:	f3ef 8310 	mrs	r3, PRIMASK
 8011242:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011244:	b672      	cpsid	i
    return(primask_value);
 8011246:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to place the semaphore on the created list.  */
    TX_DISABLE
 8011248:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the semaphore ID to make it valid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_SEMAPHORE_ID;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	4a18      	ldr	r2, [pc, #96]	@ (80112b0 <_tx_semaphore_create+0xbc>)
 801124e:	601a      	str	r2, [r3, #0]

    /* Place the semaphore on the list of created semaphores.  First,
       check for an empty list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 8011250:	4b18      	ldr	r3, [pc, #96]	@ (80112b4 <_tx_semaphore_create+0xc0>)
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d109      	bne.n	801126c <_tx_semaphore_create+0x78>
    {

        /* The created semaphore list is empty.  Add semaphore to empty list.  */
        _tx_semaphore_created_ptr =                       semaphore_ptr;
 8011258:	4b17      	ldr	r3, [pc, #92]	@ (80112b8 <_tx_semaphore_create+0xc4>)
 801125a:	68fa      	ldr	r2, [r7, #12]
 801125c:	601a      	str	r2, [r3, #0]
        semaphore_ptr -> tx_semaphore_created_next =      semaphore_ptr;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	68fa      	ldr	r2, [r7, #12]
 8011262:	615a      	str	r2, [r3, #20]
        semaphore_ptr -> tx_semaphore_created_previous =  semaphore_ptr;
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	619a      	str	r2, [r3, #24]
 801126a:	e011      	b.n	8011290 <_tx_semaphore_create+0x9c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_semaphore =      _tx_semaphore_created_ptr;
 801126c:	4b12      	ldr	r3, [pc, #72]	@ (80112b8 <_tx_semaphore_create+0xc4>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	623b      	str	r3, [r7, #32]
        previous_semaphore =  next_semaphore -> tx_semaphore_created_previous;
 8011272:	6a3b      	ldr	r3, [r7, #32]
 8011274:	699b      	ldr	r3, [r3, #24]
 8011276:	61fb      	str	r3, [r7, #28]

        /* Place the new semaphore in the list.  */
        next_semaphore -> tx_semaphore_created_previous =  semaphore_ptr;
 8011278:	6a3b      	ldr	r3, [r7, #32]
 801127a:	68fa      	ldr	r2, [r7, #12]
 801127c:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  semaphore_ptr;
 801127e:	69fb      	ldr	r3, [r7, #28]
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	615a      	str	r2, [r3, #20]

        /* Setup this semaphore's next and previous created links.  */
        semaphore_ptr -> tx_semaphore_created_previous =  previous_semaphore;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	69fa      	ldr	r2, [r7, #28]
 8011288:	619a      	str	r2, [r3, #24]
        semaphore_ptr -> tx_semaphore_created_next =      next_semaphore;
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	6a3a      	ldr	r2, [r7, #32]
 801128e:	615a      	str	r2, [r3, #20]
    }

    /* Increment the created count.  */
    _tx_semaphore_created_count++;
 8011290:	4b08      	ldr	r3, [pc, #32]	@ (80112b4 <_tx_semaphore_create+0xc0>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	1c5a      	adds	r2, r3, #1
 8011296:	4b07      	ldr	r3, [pc, #28]	@ (80112b4 <_tx_semaphore_create+0xc0>)
 8011298:	601a      	str	r2, [r3, #0]
 801129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801129c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801129e:	697b      	ldr	r3, [r7, #20]
 80112a0:	f383 8810 	msr	PRIMASK, r3
}
 80112a4:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80112a6:	2300      	movs	r3, #0
}
 80112a8:	0018      	movs	r0, r3
 80112aa:	46bd      	mov	sp, r7
 80112ac:	b00e      	add	sp, #56	@ 0x38
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	53454d41 	.word	0x53454d41
 80112b4:	20010fb4 	.word	0x20010fb4
 80112b8:	20010fb0 	.word	0x20010fb0

080112bc <_tx_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b08e      	sub	sp, #56	@ 0x38
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80112c4:	f3ef 8310 	mrs	r3, PRIMASK
 80112c8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80112ca:	b672      	cpsid	i
    return(primask_value);
 80112cc:	69fb      	ldr	r3, [r7, #28]
TX_SEMAPHORE    *next_semaphore;
TX_SEMAPHORE    *previous_semaphore;


    /* Disable interrupts to remove the semaphore from the created list.  */
    TX_DISABLE
 80112ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_DELETE_INSERT

    /* Clear the semaphore ID to make it invalid.  */
    semaphore_ptr -> tx_semaphore_id =  TX_CLEAR_ID;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	601a      	str	r2, [r3, #0]

    /* Decrement the number of semaphores.  */
    _tx_semaphore_created_count--;
 80112d6:	4b3c      	ldr	r3, [pc, #240]	@ (80113c8 <_tx_semaphore_delete+0x10c>)
 80112d8:	681b      	ldr	r3, [r3, #0]
 80112da:	1e5a      	subs	r2, r3, #1
 80112dc:	4b3a      	ldr	r3, [pc, #232]	@ (80113c8 <_tx_semaphore_delete+0x10c>)
 80112de:	601a      	str	r2, [r3, #0]

    /* See if the semaphore is the only one on the list.  */
    if (_tx_semaphore_created_count == TX_EMPTY)
 80112e0:	4b39      	ldr	r3, [pc, #228]	@ (80113c8 <_tx_semaphore_delete+0x10c>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d103      	bne.n	80112f0 <_tx_semaphore_delete+0x34>
    {

        /* Only created semaphore, just set the created list to NULL.  */
        _tx_semaphore_created_ptr =  TX_NULL;
 80112e8:	4b38      	ldr	r3, [pc, #224]	@ (80113cc <_tx_semaphore_delete+0x110>)
 80112ea:	2200      	movs	r2, #0
 80112ec:	601a      	str	r2, [r3, #0]
 80112ee:	e013      	b.n	8011318 <_tx_semaphore_delete+0x5c>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_semaphore =                                   semaphore_ptr -> tx_semaphore_created_next;
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	695b      	ldr	r3, [r3, #20]
 80112f4:	62bb      	str	r3, [r7, #40]	@ 0x28
        previous_semaphore =                               semaphore_ptr -> tx_semaphore_created_previous;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	699b      	ldr	r3, [r3, #24]
 80112fa:	627b      	str	r3, [r7, #36]	@ 0x24
        next_semaphore -> tx_semaphore_created_previous =  previous_semaphore;
 80112fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011300:	619a      	str	r2, [r3, #24]
        previous_semaphore -> tx_semaphore_created_next =  next_semaphore;
 8011302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011304:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011306:	615a      	str	r2, [r3, #20]

        /* See if we have to update the created list head pointer.  */
        if (_tx_semaphore_created_ptr == semaphore_ptr)
 8011308:	4b30      	ldr	r3, [pc, #192]	@ (80113cc <_tx_semaphore_delete+0x110>)
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	687a      	ldr	r2, [r7, #4]
 801130e:	429a      	cmp	r2, r3
 8011310:	d102      	bne.n	8011318 <_tx_semaphore_delete+0x5c>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_semaphore_created_ptr =  next_semaphore;
 8011312:	4b2e      	ldr	r3, [pc, #184]	@ (80113cc <_tx_semaphore_delete+0x110>)
 8011314:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011316:	601a      	str	r2, [r3, #0]
        }
    }

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011318:	4b2d      	ldr	r3, [pc, #180]	@ (80113d0 <_tx_semaphore_delete+0x114>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	1c5a      	adds	r2, r3, #1
 801131e:	4b2c      	ldr	r3, [pc, #176]	@ (80113d0 <_tx_semaphore_delete+0x114>)
 8011320:	601a      	str	r2, [r3, #0]

    /* Pickup the suspension information.  */
    thread_ptr =                                     semaphore_ptr -> tx_semaphore_suspension_list;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	68db      	ldr	r3, [r3, #12]
 8011326:	637b      	str	r3, [r7, #52]	@ 0x34
    semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	2200      	movs	r2, #0
 801132c:	60da      	str	r2, [r3, #12]
    suspended_count =                                semaphore_ptr -> tx_semaphore_suspended_count;
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	691b      	ldr	r3, [r3, #16]
 8011332:	633b      	str	r3, [r7, #48]	@ 0x30
    semaphore_ptr -> tx_semaphore_suspended_count =  TX_NO_SUSPENSIONS;
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2200      	movs	r2, #0
 8011338:	611a      	str	r2, [r3, #16]
 801133a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801133c:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801133e:	69bb      	ldr	r3, [r7, #24]
 8011340:	f383 8810 	msr	PRIMASK, r3
}
 8011344:	46c0      	nop			@ (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Walk through the semaphore list to resume any and all threads suspended
       on this semaphore.  */
    while (suspended_count != TX_NO_SUSPENSIONS)
 8011346:	e023      	b.n	8011390 <_tx_semaphore_delete+0xd4>
    {

        /* Decrement the suspension count.  */
        suspended_count--;
 8011348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801134a:	3b01      	subs	r3, #1
 801134c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801134e:	f3ef 8310 	mrs	r3, PRIMASK
 8011352:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011354:	b672      	cpsid	i
    return(primask_value);
 8011356:	693b      	ldr	r3, [r7, #16]

        /* Lockout interrupts.  */
        TX_DISABLE
 8011358:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Clear the cleanup pointer, this prevents the timeout from doing
           anything.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801135a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801135c:	2200      	movs	r2, #0
 801135e:	669a      	str	r2, [r3, #104]	@ 0x68

        /* Set the return status in the thread to TX_DELETED.  */
        thread_ptr -> tx_thread_suspend_status =  TX_DELETED;
 8011360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011362:	2284      	movs	r2, #132	@ 0x84
 8011364:	2101      	movs	r1, #1
 8011366:	5099      	str	r1, [r3, r2]

        /* Move the thread pointer ahead.  */
        next_thread =  thread_ptr -> tx_thread_suspended_next;
 8011368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801136a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801136c:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption again.  */
        _tx_thread_preempt_disable++;
 801136e:	4b18      	ldr	r3, [pc, #96]	@ (80113d0 <_tx_semaphore_delete+0x114>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	1c5a      	adds	r2, r3, #1
 8011374:	4b16      	ldr	r3, [pc, #88]	@ (80113d0 <_tx_semaphore_delete+0x114>)
 8011376:	601a      	str	r2, [r3, #0]
 8011378:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801137a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	f383 8810 	msr	PRIMASK, r3
}
 8011382:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011386:	0018      	movs	r0, r3
 8011388:	f000 fd7e 	bl	8011e88 <_tx_thread_system_resume>
#endif

        /* Move to next thread.  */
        thread_ptr =  next_thread;
 801138c:	6a3b      	ldr	r3, [r7, #32]
 801138e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (suspended_count != TX_NO_SUSPENSIONS)
 8011390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011392:	2b00      	cmp	r3, #0
 8011394:	d1d8      	bne.n	8011348 <_tx_semaphore_delete+0x8c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011396:	f3ef 8310 	mrs	r3, PRIMASK
 801139a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801139c:	b672      	cpsid	i
    return(primask_value);
 801139e:	68bb      	ldr	r3, [r7, #8]

    /* Execute Port-Specific completion processing. If needed, it is typically defined in tx_port.h.  */
    TX_SEMAPHORE_DELETE_PORT_COMPLETION(semaphore_ptr)

    /* Disable interrupts.  */
    TX_DISABLE
 80113a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Release previous preempt disable.  */
    _tx_thread_preempt_disable--;
 80113a2:	4b0b      	ldr	r3, [pc, #44]	@ (80113d0 <_tx_semaphore_delete+0x114>)
 80113a4:	681b      	ldr	r3, [r3, #0]
 80113a6:	1e5a      	subs	r2, r3, #1
 80113a8:	4b09      	ldr	r3, [pc, #36]	@ (80113d0 <_tx_semaphore_delete+0x114>)
 80113aa:	601a      	str	r2, [r3, #0]
 80113ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80113ae:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f383 8810 	msr	PRIMASK, r3
}
 80113b6:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80113b8:	f000 fd2e 	bl	8011e18 <_tx_thread_system_preempt_check>

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80113bc:	2300      	movs	r3, #0
}
 80113be:	0018      	movs	r0, r3
 80113c0:	46bd      	mov	sp, r7
 80113c2:	b00e      	add	sp, #56	@ 0x38
 80113c4:	bd80      	pop	{r7, pc}
 80113c6:	46c0      	nop			@ (mov r8, r8)
 80113c8:	20010fb4 	.word	0x20010fb4
 80113cc:	20010fb0 	.word	0x20010fb0
 80113d0:	20011080 	.word	0x20011080

080113d4 <_tx_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b08c      	sub	sp, #48	@ 0x30
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
 80113dc:	6039      	str	r1, [r7, #0]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default the status to TX_SUCCESS.  */
    status =  TX_SUCCESS;
 80113de:	2300      	movs	r3, #0
 80113e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80113e2:	f3ef 8310 	mrs	r3, PRIMASK
 80113e6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80113e8:	b672      	cpsid	i
    return(primask_value);
 80113ea:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to get an instance from the semaphore.  */
    TX_DISABLE
 80113ec:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_GET_INSERT

    /* Determine if there is an instance of the semaphore.  */
    if (semaphore_ptr -> tx_semaphore_count != ((ULONG) 0))
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	689b      	ldr	r3, [r3, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d00a      	beq.n	801140c <_tx_semaphore_get+0x38>
    {

        /* Decrement the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count--;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	689b      	ldr	r3, [r3, #8]
 80113fa:	1e5a      	subs	r2, r3, #1
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	609a      	str	r2, [r3, #8]
 8011400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011402:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	f383 8810 	msr	PRIMASK, r3
}
 801140a:	e069      	b.n	80114e0 <_tx_semaphore_get+0x10c>
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Determine if the request specifies suspension.  */
    else if (wait_option != TX_NO_WAIT)
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d05e      	beq.n	80114d0 <_tx_semaphore_get+0xfc>
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011412:	4b36      	ldr	r3, [pc, #216]	@ (80114ec <_tx_semaphore_get+0x118>)
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	2b00      	cmp	r3, #0
 8011418:	d008      	beq.n	801142c <_tx_semaphore_get+0x58>
 801141a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801141c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801141e:	693b      	ldr	r3, [r7, #16]
 8011420:	f383 8810 	msr	PRIMASK, r3
}
 8011424:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_NO_INSTANCE;
 8011426:	230d      	movs	r3, #13
 8011428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801142a:	e059      	b.n	80114e0 <_tx_semaphore_get+0x10c>
            /* Increment the number of suspensions on this semaphore.  */
            semaphore_ptr -> tx_semaphore_performance_suspension_count++;
#endif

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801142c:	4b30      	ldr	r3, [pc, #192]	@ (80114f0 <_tx_semaphore_get+0x11c>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Setup cleanup routine pointer.  */
            thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_semaphore_cleanup);
 8011432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011434:	4a2f      	ldr	r2, [pc, #188]	@ (80114f4 <_tx_semaphore_get+0x120>)
 8011436:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Setup cleanup information, i.e. this semaphore control
               block.  */
            thread_ptr -> tx_thread_suspend_control_block =  (VOID *) semaphore_ptr;
 8011438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801143a:	687a      	ldr	r2, [r7, #4]
 801143c:	66da      	str	r2, [r3, #108]	@ 0x6c

#ifndef TX_NOT_INTERRUPTABLE

            /* Increment the suspension sequence number, which is used to identify
               this suspension event.  */
            thread_ptr -> tx_thread_suspension_sequence++;
 801143e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011440:	22ac      	movs	r2, #172	@ 0xac
 8011442:	589b      	ldr	r3, [r3, r2]
 8011444:	1c5a      	adds	r2, r3, #1
 8011446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011448:	21ac      	movs	r1, #172	@ 0xac
 801144a:	505a      	str	r2, [r3, r1]
#endif

            /* Setup suspension list.  */
            if (semaphore_ptr -> tx_semaphore_suspended_count == TX_NO_SUSPENSIONS)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	691b      	ldr	r3, [r3, #16]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d109      	bne.n	8011468 <_tx_semaphore_get+0x94>
            {

                /* No other threads are suspended.  Setup the head pointer and
                   just setup this threads pointers to itself.  */
                semaphore_ptr -> tx_semaphore_suspension_list =         thread_ptr;
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011458:	60da      	str	r2, [r3, #12]
                thread_ptr -> tx_thread_suspended_next =                thread_ptr;
 801145a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801145c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801145e:	671a      	str	r2, [r3, #112]	@ 0x70
                thread_ptr -> tx_thread_suspended_previous =            thread_ptr;
 8011460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011464:	675a      	str	r2, [r3, #116]	@ 0x74
 8011466:	e011      	b.n	801148c <_tx_semaphore_get+0xb8>
            }
            else
            {

                /* This list is not NULL, add current thread to the end. */
                next_thread =                                   semaphore_ptr -> tx_semaphore_suspension_list;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	68db      	ldr	r3, [r3, #12]
 801146c:	623b      	str	r3, [r7, #32]
                thread_ptr -> tx_thread_suspended_next =        next_thread;
 801146e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011470:	6a3a      	ldr	r2, [r7, #32]
 8011472:	671a      	str	r2, [r3, #112]	@ 0x70
                previous_thread =                               next_thread -> tx_thread_suspended_previous;
 8011474:	6a3b      	ldr	r3, [r7, #32]
 8011476:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011478:	61fb      	str	r3, [r7, #28]
                thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 801147a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801147c:	69fa      	ldr	r2, [r7, #28]
 801147e:	675a      	str	r2, [r3, #116]	@ 0x74
                previous_thread -> tx_thread_suspended_next =   thread_ptr;
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011484:	671a      	str	r2, [r3, #112]	@ 0x70
                next_thread -> tx_thread_suspended_previous =   thread_ptr;
 8011486:	6a3b      	ldr	r3, [r7, #32]
 8011488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801148a:	675a      	str	r2, [r3, #116]	@ 0x74
            }

            /* Increment the number of suspensions.  */
            semaphore_ptr -> tx_semaphore_suspended_count++;
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	691b      	ldr	r3, [r3, #16]
 8011490:	1c5a      	adds	r2, r3, #1
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	611a      	str	r2, [r3, #16]

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SEMAPHORE_SUSP;
 8011496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011498:	2206      	movs	r2, #6
 801149a:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 801149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801149e:	2201      	movs	r2, #1
 80114a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 80114a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 80114a8:	4b10      	ldr	r3, [pc, #64]	@ (80114ec <_tx_semaphore_get+0x118>)
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	1c5a      	adds	r2, r3, #1
 80114ae:	4b0f      	ldr	r3, [pc, #60]	@ (80114ec <_tx_semaphore_get+0x118>)
 80114b0:	601a      	str	r2, [r3, #0]
 80114b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114b4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	f383 8810 	msr	PRIMASK, r3
}
 80114bc:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80114be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c0:	0018      	movs	r0, r3
 80114c2:	f000 fde1 	bl	8012088 <_tx_thread_system_suspend>
#endif

            /* Return the completion status.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80114c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114c8:	2284      	movs	r2, #132	@ 0x84
 80114ca:	589b      	ldr	r3, [r3, r2]
 80114cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80114ce:	e007      	b.n	80114e0 <_tx_semaphore_get+0x10c>
 80114d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114d2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	f383 8810 	msr	PRIMASK, r3
}
 80114da:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Immediate return, return error completion.  */
        status =  TX_NO_INSTANCE;
 80114dc:	230d      	movs	r3, #13
 80114de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* Return completion status.  */
    return(status);
 80114e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80114e2:	0018      	movs	r0, r3
 80114e4:	46bd      	mov	sp, r7
 80114e6:	b00c      	add	sp, #48	@ 0x30
 80114e8:	bd80      	pop	{r7, pc}
 80114ea:	46c0      	nop			@ (mov r8, r8)
 80114ec:	20011080 	.word	0x20011080
 80114f0:	20010fe8 	.word	0x20010fe8
 80114f4:	08011105 	.word	0x08011105

080114f8 <_tx_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b08a      	sub	sp, #40	@ 0x28
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011500:	f3ef 8310 	mrs	r3, PRIMASK
 8011504:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011506:	b672      	cpsid	i
    return(primask_value);
 8011508:	693b      	ldr	r3, [r7, #16]
TX_THREAD       *next_thread;
TX_THREAD       *previous_thread;


    /* Disable interrupts to put an instance back to the semaphore.  */
    TX_DISABLE
 801150a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Log this kernel call.  */
    TX_EL_SEMAPHORE_PUT_INSERT

    /* Pickup the number of suspended threads.  */
    suspended_count =  semaphore_ptr -> tx_semaphore_suspended_count;
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	691b      	ldr	r3, [r3, #16]
 8011510:	623b      	str	r3, [r7, #32]

    /* Determine if there are any threads suspended on the semaphore.  */
    if (suspended_count == TX_NO_SUSPENSIONS)
 8011512:	6a3b      	ldr	r3, [r7, #32]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d10a      	bne.n	801152e <_tx_semaphore_put+0x36>
    {

        /* Increment the semaphore count.  */
        semaphore_ptr -> tx_semaphore_count++;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	689b      	ldr	r3, [r3, #8]
 801151c:	1c5a      	adds	r2, r3, #1
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	609a      	str	r2, [r3, #8]
 8011522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011524:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	f383 8810 	msr	PRIMASK, r3
}
 801152c:	e034      	b.n	8011598 <_tx_semaphore_put+0xa0>
    {

        /* A thread is suspended on this semaphore.  */

        /* Pickup the pointer to the first suspended thread.  */
        thread_ptr =  semaphore_ptr -> tx_semaphore_suspension_list;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	61fb      	str	r3, [r7, #28]

        /* Remove the suspended thread from the list.  */

        /* See if this is the only suspended thread on the list.  */
        suspended_count--;
 8011534:	6a3b      	ldr	r3, [r7, #32]
 8011536:	3b01      	subs	r3, #1
 8011538:	623b      	str	r3, [r7, #32]
        if (suspended_count == TX_NO_SUSPENSIONS)
 801153a:	6a3b      	ldr	r3, [r7, #32]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d103      	bne.n	8011548 <_tx_semaphore_put+0x50>
        {

            /* Yes, the only suspended thread.  */

            /* Update the head pointer.  */
            semaphore_ptr -> tx_semaphore_suspension_list =  TX_NULL;
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	2200      	movs	r2, #0
 8011544:	60da      	str	r2, [r3, #12]
 8011546:	e00e      	b.n	8011566 <_tx_semaphore_put+0x6e>
        {

            /* At least one more thread is on the same expiration list.  */

            /* Update the list head pointer.  */
            next_thread =                                     thread_ptr -> tx_thread_suspended_next;
 8011548:	69fb      	ldr	r3, [r7, #28]
 801154a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801154c:	61bb      	str	r3, [r7, #24]
            semaphore_ptr -> tx_semaphore_suspension_list =   next_thread;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	69ba      	ldr	r2, [r7, #24]
 8011552:	60da      	str	r2, [r3, #12]

            /* Update the links of the adjacent threads.  */
            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 8011554:	69fb      	ldr	r3, [r7, #28]
 8011556:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011558:	617b      	str	r3, [r7, #20]
            next_thread -> tx_thread_suspended_previous =   previous_thread;
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	697a      	ldr	r2, [r7, #20]
 801155e:	675a      	str	r2, [r3, #116]	@ 0x74
            previous_thread -> tx_thread_suspended_next =   next_thread;
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	69ba      	ldr	r2, [r7, #24]
 8011564:	671a      	str	r2, [r3, #112]	@ 0x70
        }

        /* Decrement the suspension count.  */
        semaphore_ptr -> tx_semaphore_suspended_count =  suspended_count;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	6a3a      	ldr	r2, [r7, #32]
 801156a:	611a      	str	r2, [r3, #16]

        /* Prepare for resumption of the first thread.  */

        /* Clear cleanup routine to avoid timeout.  */
        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	2200      	movs	r2, #0
 8011570:	669a      	str	r2, [r3, #104]	@ 0x68
        /* Pickup the application notify function.  */
        semaphore_put_notify =  semaphore_ptr -> tx_semaphore_put_notify;
#endif

        /* Put return status into the thread control block.  */
        thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011572:	69fb      	ldr	r3, [r7, #28]
 8011574:	2284      	movs	r2, #132	@ 0x84
 8011576:	2100      	movs	r1, #0
 8011578:	5099      	str	r1, [r3, r2]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 801157a:	4b0a      	ldr	r3, [pc, #40]	@ (80115a4 <_tx_semaphore_put+0xac>)
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	1c5a      	adds	r2, r3, #1
 8011580:	4b08      	ldr	r3, [pc, #32]	@ (80115a4 <_tx_semaphore_put+0xac>)
 8011582:	601a      	str	r2, [r3, #0]
 8011584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011586:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	f383 8810 	msr	PRIMASK, r3
}
 801158e:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Resume thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	0018      	movs	r0, r3
 8011594:	f000 fc78 	bl	8011e88 <_tx_thread_system_resume>
        }
#endif
    }

    /* Return successful completion.  */
    return(TX_SUCCESS);
 8011598:	2300      	movs	r3, #0
}
 801159a:	0018      	movs	r0, r3
 801159c:	46bd      	mov	sp, r7
 801159e:	b00a      	add	sp, #40	@ 0x28
 80115a0:	bd80      	pop	{r7, pc}
 80115a2:	46c0      	nop			@ (mov r8, r8)
 80115a4:	20011080 	.word	0x20011080

080115a8 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b098      	sub	sp, #96	@ 0x60
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	607a      	str	r2, [r7, #4]
 80115b4:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80115b6:	2300      	movs	r3, #0
 80115b8:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80115ba:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80115be:	2347      	movs	r3, #71	@ 0x47
 80115c0:	18fb      	adds	r3, r7, r3
 80115c2:	22ef      	movs	r2, #239	@ 0xef
 80115c4:	701a      	strb	r2, [r3, #0]
 80115c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80115c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80115ca:	2300      	movs	r3, #0
 80115cc:	653b      	str	r3, [r7, #80]	@ 0x50
 80115ce:	e009      	b.n	80115e4 <_tx_thread_create+0x3c>
 80115d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80115d2:	1c5a      	adds	r2, r3, #1
 80115d4:	657a      	str	r2, [r7, #84]	@ 0x54
 80115d6:	2247      	movs	r2, #71	@ 0x47
 80115d8:	18ba      	adds	r2, r7, r2
 80115da:	7812      	ldrb	r2, [r2, #0]
 80115dc:	701a      	strb	r2, [r3, #0]
 80115de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115e0:	3301      	adds	r3, #1
 80115e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80115e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80115e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d3f1      	bcc.n	80115d0 <_tx_thread_create+0x28>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80115f0:	233f      	movs	r3, #63	@ 0x3f
 80115f2:	18fb      	adds	r3, r7, r3
 80115f4:	2200      	movs	r2, #0
 80115f6:	701a      	strb	r2, [r3, #0]
 80115f8:	23b0      	movs	r3, #176	@ 0xb0
 80115fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80115fc:	2300      	movs	r3, #0
 80115fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011600:	e009      	b.n	8011616 <_tx_thread_create+0x6e>
 8011602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011604:	1c5a      	adds	r2, r3, #1
 8011606:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8011608:	223f      	movs	r2, #63	@ 0x3f
 801160a:	18ba      	adds	r2, r7, r2
 801160c:	7812      	ldrb	r2, [r2, #0]
 801160e:	701a      	strb	r2, [r3, #0]
 8011610:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011612:	3301      	adds	r3, #1
 8011614:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011616:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801161a:	429a      	cmp	r2, r3
 801161c:	d3f1      	bcc.n	8011602 <_tx_thread_create+0x5a>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	68ba      	ldr	r2, [r7, #8]
 8011622:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	683a      	ldr	r2, [r7, #0]
 801162e:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8011634:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801163a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011640:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2194      	movs	r1, #148	@ 0x94
 8011646:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011648:	505a      	str	r2, [r3, r1]
    thread_ptr -> tx_thread_time_slice =        time_slice;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801164e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8011654:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	229c      	movs	r2, #156	@ 0x9c
 801165a:	2120      	movs	r1, #32
 801165c:	5099      	str	r1, [r3, r2]

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 801165e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011660:	637b      	str	r3, [r7, #52]	@ 0x34
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 8011662:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011664:	3b01      	subs	r3, #1
 8011666:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011668:	18d3      	adds	r3, r2, r3
 801166a:	637b      	str	r3, [r7, #52]	@ 0x34
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011670:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 8011672:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011674:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011676:	429a      	cmp	r2, r3
 8011678:	d007      	beq.n	801168a <_tx_thread_create+0xe2>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2200      	movs	r2, #0
 801167e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	2298      	movs	r2, #152	@ 0x98
 8011684:	2100      	movs	r1, #0
 8011686:	5099      	str	r1, [r3, r2]
 8011688:	e006      	b.n	8011698 <_tx_thread_create+0xf0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801168e:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	2198      	movs	r1, #152	@ 0x98
 8011694:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011696:	505a      	str	r2, [r3, r1]
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	2203      	movs	r2, #3
 801169c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	4a48      	ldr	r2, [pc, #288]	@ (80117c4 <_tx_thread_create+0x21c>)
 80116a2:	655a      	str	r2, [r3, #84]	@ 0x54
 80116a4:	68fa      	ldr	r2, [r7, #12]
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 80116aa:	4a47      	ldr	r2, [pc, #284]	@ (80117c8 <_tx_thread_create+0x220>)
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	0011      	movs	r1, r2
 80116b0:	0018      	movs	r0, r3
 80116b2:	f7ee fdd5 	bl	8000260 <_tx_thread_stack_build>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80116b6:	f3ef 8310 	mrs	r3, PRIMASK
 80116ba:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 80116bc:	b672      	cpsid	i
    return(primask_value);
 80116be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80116c0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	4a41      	ldr	r2, [pc, #260]	@ (80117cc <_tx_thread_create+0x224>)
 80116c6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80116c8:	4b41      	ldr	r3, [pc, #260]	@ (80117d0 <_tx_thread_create+0x228>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d10b      	bne.n	80116e8 <_tx_thread_create+0x140>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80116d0:	4b40      	ldr	r3, [pc, #256]	@ (80117d4 <_tx_thread_create+0x22c>)
 80116d2:	68fa      	ldr	r2, [r7, #12]
 80116d4:	601a      	str	r2, [r3, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	2188      	movs	r1, #136	@ 0x88
 80116da:	68fa      	ldr	r2, [r7, #12]
 80116dc:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	218c      	movs	r1, #140	@ 0x8c
 80116e2:	68fa      	ldr	r2, [r7, #12]
 80116e4:	505a      	str	r2, [r3, r1]
 80116e6:	e016      	b.n	8011716 <_tx_thread_create+0x16e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80116e8:	4b3a      	ldr	r3, [pc, #232]	@ (80117d4 <_tx_thread_create+0x22c>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        previous_thread =  next_thread -> tx_thread_created_previous;
 80116ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116f0:	228c      	movs	r2, #140	@ 0x8c
 80116f2:	589b      	ldr	r3, [r3, r2]
 80116f4:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80116f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116f8:	218c      	movs	r1, #140	@ 0x8c
 80116fa:	68fa      	ldr	r2, [r7, #12]
 80116fc:	505a      	str	r2, [r3, r1]
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80116fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011700:	2188      	movs	r1, #136	@ 0x88
 8011702:	68fa      	ldr	r2, [r7, #12]
 8011704:	505a      	str	r2, [r3, r1]

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	218c      	movs	r1, #140	@ 0x8c
 801170a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801170c:	505a      	str	r2, [r3, r1]
        thread_ptr -> tx_thread_created_next =      next_thread;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	2188      	movs	r1, #136	@ 0x88
 8011712:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011714:	505a      	str	r2, [r3, r1]
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 8011716:	4b2e      	ldr	r3, [pc, #184]	@ (80117d0 <_tx_thread_create+0x228>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	1c5a      	adds	r2, r3, #1
 801171c:	4b2c      	ldr	r3, [pc, #176]	@ (80117d0 <_tx_thread_create+0x228>)
 801171e:	601a      	str	r2, [r3, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011720:	4b2d      	ldr	r3, [pc, #180]	@ (80117d8 <_tx_thread_create+0x230>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	1c5a      	adds	r2, r3, #1
 8011726:	4b2c      	ldr	r3, [pc, #176]	@ (80117d8 <_tx_thread_create+0x230>)
 8011728:	601a      	str	r2, [r3, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 801172a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801172c:	2b01      	cmp	r3, #1
 801172e:	d12a      	bne.n	8011786 <_tx_thread_create+0x1de>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011730:	f3ef 8305 	mrs	r3, IPSR
 8011734:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8011736:	6a3a      	ldr	r2, [r7, #32]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011738:	4b28      	ldr	r3, [pc, #160]	@ (80117dc <_tx_thread_create+0x234>)
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	4313      	orrs	r3, r2
 801173e:	4a28      	ldr	r2, [pc, #160]	@ (80117e0 <_tx_thread_create+0x238>)
 8011740:	4293      	cmp	r3, r2
 8011742:	d90d      	bls.n	8011760 <_tx_thread_create+0x1b8>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011744:	4b27      	ldr	r3, [pc, #156]	@ (80117e4 <_tx_thread_create+0x23c>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 801174a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801174c:	2b00      	cmp	r3, #0
 801174e:	d009      	beq.n	8011764 <_tx_thread_create+0x1bc>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011750:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011754:	65bb      	str	r3, [r7, #88]	@ 0x58

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8011756:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801175a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801175c:	63da      	str	r2, [r3, #60]	@ 0x3c
 801175e:	e001      	b.n	8011764 <_tx_thread_create+0x1bc>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011760:	2300      	movs	r3, #0
 8011762:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011766:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	f383 8810 	msr	PRIMASK, r3
}
 801176e:	46c0      	nop			@ (mov r8, r8)

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	0018      	movs	r0, r3
 8011774:	f000 fb88 	bl	8011e88 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8011778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801177a:	2b00      	cmp	r3, #0
 801177c:	d01c      	beq.n	80117b8 <_tx_thread_create+0x210>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 801177e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011780:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011782:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011784:	e018      	b.n	80117b8 <_tx_thread_create+0x210>
 8011786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011788:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801178a:	693b      	ldr	r3, [r7, #16]
 801178c:	f383 8810 	msr	PRIMASK, r3
}
 8011790:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011792:	f3ef 8310 	mrs	r3, PRIMASK
 8011796:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011798:	b672      	cpsid	i
    return(primask_value);
 801179a:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 801179c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 801179e:	4b0e      	ldr	r3, [pc, #56]	@ (80117d8 <_tx_thread_create+0x230>)
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	1e5a      	subs	r2, r3, #1
 80117a4:	4b0c      	ldr	r3, [pc, #48]	@ (80117d8 <_tx_thread_create+0x230>)
 80117a6:	601a      	str	r2, [r3, #0]
 80117a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117aa:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80117ac:	69bb      	ldr	r3, [r7, #24]
 80117ae:	f383 8810 	msr	PRIMASK, r3
}
 80117b2:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80117b4:	f000 fb30 	bl	8011e18 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80117b8:	2300      	movs	r3, #0
}
 80117ba:	0018      	movs	r0, r3
 80117bc:	46bd      	mov	sp, r7
 80117be:	b018      	add	sp, #96	@ 0x60
 80117c0:	bd80      	pop	{r7, pc}
 80117c2:	46c0      	nop			@ (mov r8, r8)
 80117c4:	0801258d 	.word	0x0801258d
 80117c8:	08011bc5 	.word	0x08011bc5
 80117cc:	54485244 	.word	0x54485244
 80117d0:	20010ff4 	.word	0x20010ff4
 80117d4:	20010ff0 	.word	0x20010ff0
 80117d8:	20011080 	.word	0x20011080
 80117dc:	20000010 	.word	0x20000010
 80117e0:	f0f0f0ef 	.word	0xf0f0f0ef
 80117e4:	20010fec 	.word	0x20010fec

080117e8 <_tx_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_delete(TX_THREAD *thread_ptr)
{
 80117e8:	b580      	push	{r7, lr}
 80117ea:	b08a      	sub	sp, #40	@ 0x28
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
TX_THREAD       *previous_thread;
UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80117f0:	2300      	movs	r3, #0
 80117f2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80117f4:	f3ef 8310 	mrs	r3, PRIMASK
 80117f8:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80117fa:	b672      	cpsid	i
    return(primask_value);
 80117fc:	697b      	ldr	r3, [r7, #20]

    /* Lockout interrupts while the thread is being deleted.  */
    TX_DISABLE
 80117fe:	623b      	str	r3, [r7, #32]

    /* Check for proper status of this thread to delete.  */
    if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011804:	2b01      	cmp	r3, #1
 8011806:	d00b      	beq.n	8011820 <_tx_thread_delete+0x38>
    {

        /* Now check for terminated state.  */
        if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801180c:	2b02      	cmp	r3, #2
 801180e:	d007      	beq.n	8011820 <_tx_thread_delete+0x38>
 8011810:	6a3b      	ldr	r3, [r7, #32]
 8011812:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011814:	693b      	ldr	r3, [r7, #16]
 8011816:	f383 8810 	msr	PRIMASK, r3
}
 801181a:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Thread not completed or terminated - return an error!  */
            status =  TX_DELETE_ERROR;
 801181c:	2311      	movs	r3, #17
 801181e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* Determine if the delete operation is okay.  */
    if (status == TX_SUCCESS)
 8011820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011822:	2b00      	cmp	r3, #0
 8011824:	d12d      	bne.n	8011882 <_tx_thread_delete+0x9a>

        /* Unregister thread in the thread array structure.  */
        TX_EL_THREAD_UNREGISTER(thread_ptr)

        /* Clear the thread ID to make it invalid.  */
        thread_ptr -> tx_thread_id =  TX_CLEAR_ID;
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	2200      	movs	r2, #0
 801182a:	601a      	str	r2, [r3, #0]

        /* Decrement the number of created threads.  */
        _tx_thread_created_count--;
 801182c:	4b17      	ldr	r3, [pc, #92]	@ (801188c <_tx_thread_delete+0xa4>)
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	1e5a      	subs	r2, r3, #1
 8011832:	4b16      	ldr	r3, [pc, #88]	@ (801188c <_tx_thread_delete+0xa4>)
 8011834:	601a      	str	r2, [r3, #0]

        /* See if the thread is the only one on the list.  */
        if (_tx_thread_created_count == TX_EMPTY)
 8011836:	4b15      	ldr	r3, [pc, #84]	@ (801188c <_tx_thread_delete+0xa4>)
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	2b00      	cmp	r3, #0
 801183c:	d103      	bne.n	8011846 <_tx_thread_delete+0x5e>
        {

            /* Only created thread, just set the created list to NULL.  */
            _tx_thread_created_ptr =  TX_NULL;
 801183e:	4b14      	ldr	r3, [pc, #80]	@ (8011890 <_tx_thread_delete+0xa8>)
 8011840:	2200      	movs	r2, #0
 8011842:	601a      	str	r2, [r3, #0]
 8011844:	e017      	b.n	8011876 <_tx_thread_delete+0x8e>
        }
        else
        {

            /* Otherwise, not the only created thread, link-up the neighbors.  */
            next_thread =                                thread_ptr -> tx_thread_created_next;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	2288      	movs	r2, #136	@ 0x88
 801184a:	589b      	ldr	r3, [r3, r2]
 801184c:	61fb      	str	r3, [r7, #28]
            previous_thread =                            thread_ptr -> tx_thread_created_previous;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	228c      	movs	r2, #140	@ 0x8c
 8011852:	589b      	ldr	r3, [r3, r2]
 8011854:	61bb      	str	r3, [r7, #24]
            next_thread -> tx_thread_created_previous =  previous_thread;
 8011856:	69fb      	ldr	r3, [r7, #28]
 8011858:	218c      	movs	r1, #140	@ 0x8c
 801185a:	69ba      	ldr	r2, [r7, #24]
 801185c:	505a      	str	r2, [r3, r1]
            previous_thread -> tx_thread_created_next =  next_thread;
 801185e:	69bb      	ldr	r3, [r7, #24]
 8011860:	2188      	movs	r1, #136	@ 0x88
 8011862:	69fa      	ldr	r2, [r7, #28]
 8011864:	505a      	str	r2, [r3, r1]

            /* See if we have to update the created list head pointer.  */
            if (_tx_thread_created_ptr == thread_ptr)
 8011866:	4b0a      	ldr	r3, [pc, #40]	@ (8011890 <_tx_thread_delete+0xa8>)
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	687a      	ldr	r2, [r7, #4]
 801186c:	429a      	cmp	r2, r3
 801186e:	d102      	bne.n	8011876 <_tx_thread_delete+0x8e>
            {

                /* Yes, move the head pointer to the next link. */
                _tx_thread_created_ptr =  next_thread;
 8011870:	4b07      	ldr	r3, [pc, #28]	@ (8011890 <_tx_thread_delete+0xa8>)
 8011872:	69fa      	ldr	r2, [r7, #28]
 8011874:	601a      	str	r2, [r3, #0]
 8011876:	6a3b      	ldr	r3, [r7, #32]
 8011878:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f383 8810 	msr	PRIMASK, r3
}
 8011880:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Return completion status.  */
    return(status);
 8011882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011884:	0018      	movs	r0, r3
 8011886:	46bd      	mov	sp, r7
 8011888:	b00a      	add	sp, #40	@ 0x28
 801188a:	bd80      	pop	{r7, pc}
 801188c:	20010ff4 	.word	0x20010ff4
 8011890:	20010ff0 	.word	0x20010ff0

08011894 <_tx_thread_identify>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
TX_THREAD  *_tx_thread_identify(VOID)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b084      	sub	sp, #16
 8011898:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801189a:	f3ef 8310 	mrs	r3, PRIMASK
 801189e:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80118a0:	b672      	cpsid	i
    return(primask_value);
 80118a2:	683b      	ldr	r3, [r7, #0]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 80118a4:	60fb      	str	r3, [r7, #12]

   /* Log this kernel call.  */
    TX_EL_THREAD_IDENTIFY_INSERT

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80118a6:	4b07      	ldr	r3, [pc, #28]	@ (80118c4 <_tx_thread_identify+0x30>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	60bb      	str	r3, [r7, #8]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f383 8810 	msr	PRIMASK, r3
}
 80118b6:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the current thread pointer.  */
    return(thread_ptr);
 80118b8:	68bb      	ldr	r3, [r7, #8]
}
 80118ba:	0018      	movs	r0, r3
 80118bc:	46bd      	mov	sp, r7
 80118be:	b004      	add	sp, #16
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	46c0      	nop			@ (mov r8, r8)
 80118c4:	20010fe8 	.word	0x20010fe8

080118c8 <_tx_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b088      	sub	sp, #32
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	60f8      	str	r0, [r7, #12]
 80118d0:	60b9      	str	r1, [r7, #8]
 80118d2:	607a      	str	r2, [r7, #4]
 80118d4:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80118d6:	f3ef 8310 	mrs	r3, PRIMASK
 80118da:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80118dc:	b672      	cpsid	i
    return(primask_value);
 80118de:	69bb      	ldr	r3, [r7, #24]

TX_INTERRUPT_SAVE_AREA


    /* Disable interrupts.  */
    TX_DISABLE
 80118e0:	61fb      	str	r3, [r7, #28]

    /* Retrieve all the pertinent information and return it in the supplied
       destinations.  */

    /* Retrieve the name of the thread.  */
    if (name != TX_NULL)
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d003      	beq.n	80118f0 <_tx_thread_info_get+0x28>
    {

        *name =  thread_ptr -> tx_thread_name;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current state.  */
    if (state != TX_NULL)
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d003      	beq.n	80118fe <_tx_thread_info_get+0x36>
    {

        *state =  thread_ptr -> tx_thread_state;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the number of times the thread has been scheduled.  */
    if (run_count != TX_NULL)
 80118fe:	683b      	ldr	r3, [r7, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d003      	beq.n	801190c <_tx_thread_info_get+0x44>
    {

        *run_count =  thread_ptr -> tx_thread_run_count;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	685a      	ldr	r2, [r3, #4]
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's priority.  */
    if (priority != TX_NULL)
 801190c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801190e:	2b00      	cmp	r3, #0
 8011910:	d004      	beq.n	801191c <_tx_thread_info_get+0x54>
    {

        *priority =  thread_ptr -> tx_thread_user_priority;
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	2294      	movs	r2, #148	@ 0x94
 8011916:	589a      	ldr	r2, [r3, r2]
 8011918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801191a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's preemption-threshold.  */
    if (preemption_threshold != TX_NULL)
 801191c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801191e:	2b00      	cmp	r3, #0
 8011920:	d004      	beq.n	801192c <_tx_thread_info_get+0x64>
    {

        *preemption_threshold =  thread_ptr -> tx_thread_user_preempt_threshold;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	2298      	movs	r2, #152	@ 0x98
 8011926:	589a      	ldr	r2, [r3, r2]
 8011928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801192a:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the thread's current time-slice.  */
    if (time_slice != TX_NULL)
 801192c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801192e:	2b00      	cmp	r3, #0
 8011930:	d003      	beq.n	801193a <_tx_thread_info_get+0x72>
    {

        *time_slice =  thread_ptr -> tx_thread_time_slice;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	699a      	ldr	r2, [r3, #24]
 8011936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011938:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next created thread.  */
    if (next_thread != TX_NULL)
 801193a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801193c:	2b00      	cmp	r3, #0
 801193e:	d004      	beq.n	801194a <_tx_thread_info_get+0x82>
    {

        *next_thread =  thread_ptr -> tx_thread_created_next;
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	2288      	movs	r2, #136	@ 0x88
 8011944:	589a      	ldr	r2, [r3, r2]
 8011946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011948:	601a      	str	r2, [r3, #0]
    }

    /* Pickup the next thread suspended.  */
    if (next_suspended_thread != TX_NULL)
 801194a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801194c:	2b00      	cmp	r3, #0
 801194e:	d003      	beq.n	8011958 <_tx_thread_info_get+0x90>
    {

        *next_suspended_thread =  thread_ptr -> tx_thread_suspended_next;
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8011954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011956:	601a      	str	r2, [r3, #0]
 8011958:	69fb      	ldr	r3, [r7, #28]
 801195a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	f383 8810 	msr	PRIMASK, r3
}
 8011962:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return completion status.  */
    return(TX_SUCCESS);
 8011964:	2300      	movs	r3, #0
}
 8011966:	0018      	movs	r0, r3
 8011968:	46bd      	mov	sp, r7
 801196a:	b008      	add	sp, #32
 801196c:	bd80      	pop	{r7, pc}
	...

08011970 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b088      	sub	sp, #32
 8011974:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8011976:	4b28      	ldr	r3, [pc, #160]	@ (8011a18 <_tx_thread_initialize+0xa8>)
 8011978:	2200      	movs	r2, #0
 801197a:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 801197c:	4b27      	ldr	r3, [pc, #156]	@ (8011a1c <_tx_thread_initialize+0xac>)
 801197e:	2200      	movs	r2, #0
 8011980:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 8011982:	4b27      	ldr	r3, [pc, #156]	@ (8011a20 <_tx_thread_initialize+0xb0>)
 8011984:	61fb      	str	r3, [r7, #28]
 8011986:	230f      	movs	r3, #15
 8011988:	18fb      	adds	r3, r7, r3
 801198a:	2200      	movs	r2, #0
 801198c:	701a      	strb	r2, [r3, #0]
 801198e:	2304      	movs	r3, #4
 8011990:	60bb      	str	r3, [r7, #8]
 8011992:	2300      	movs	r3, #0
 8011994:	61bb      	str	r3, [r7, #24]
 8011996:	e009      	b.n	80119ac <_tx_thread_initialize+0x3c>
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	1c5a      	adds	r2, r3, #1
 801199c:	61fa      	str	r2, [r7, #28]
 801199e:	220f      	movs	r2, #15
 80119a0:	18ba      	adds	r2, r7, r2
 80119a2:	7812      	ldrb	r2, [r2, #0]
 80119a4:	701a      	strb	r2, [r3, #0]
 80119a6:	69bb      	ldr	r3, [r7, #24]
 80119a8:	3301      	adds	r3, #1
 80119aa:	61bb      	str	r3, [r7, #24]
 80119ac:	69ba      	ldr	r2, [r7, #24]
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	429a      	cmp	r2, r3
 80119b2:	d3f1      	bcc.n	8011998 <_tx_thread_initialize+0x28>
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80119b4:	4b1b      	ldr	r3, [pc, #108]	@ (8011a24 <_tx_thread_initialize+0xb4>)
 80119b6:	2220      	movs	r2, #32
 80119b8:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80119ba:	4b1b      	ldr	r3, [pc, #108]	@ (8011a28 <_tx_thread_initialize+0xb8>)
 80119bc:	617b      	str	r3, [r7, #20]
 80119be:	1dfb      	adds	r3, r7, #7
 80119c0:	2200      	movs	r2, #0
 80119c2:	701a      	strb	r2, [r3, #0]
 80119c4:	2380      	movs	r3, #128	@ 0x80
 80119c6:	603b      	str	r3, [r7, #0]
 80119c8:	2300      	movs	r3, #0
 80119ca:	613b      	str	r3, [r7, #16]
 80119cc:	e008      	b.n	80119e0 <_tx_thread_initialize+0x70>
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	1c5a      	adds	r2, r3, #1
 80119d2:	617a      	str	r2, [r7, #20]
 80119d4:	1dfa      	adds	r2, r7, #7
 80119d6:	7812      	ldrb	r2, [r2, #0]
 80119d8:	701a      	strb	r2, [r3, #0]
 80119da:	693b      	ldr	r3, [r7, #16]
 80119dc:	3301      	adds	r3, #1
 80119de:	613b      	str	r3, [r7, #16]
 80119e0:	693a      	ldr	r2, [r7, #16]
 80119e2:	683b      	ldr	r3, [r7, #0]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d3f2      	bcc.n	80119ce <_tx_thread_initialize+0x5e>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80119e8:	4b10      	ldr	r3, [pc, #64]	@ (8011a2c <_tx_thread_initialize+0xbc>)
 80119ea:	2200      	movs	r2, #0
 80119ec:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80119ee:	4b10      	ldr	r3, [pc, #64]	@ (8011a30 <_tx_thread_initialize+0xc0>)
 80119f0:	2200      	movs	r2, #0
 80119f2:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80119f4:	4b0f      	ldr	r3, [pc, #60]	@ (8011a34 <_tx_thread_initialize+0xc4>)
 80119f6:	2200      	movs	r2, #0
 80119f8:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 80119fa:	4b0f      	ldr	r3, [pc, #60]	@ (8011a38 <_tx_thread_initialize+0xc8>)
 80119fc:	2200      	movs	r2, #0
 80119fe:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 8011a00:	4b0e      	ldr	r3, [pc, #56]	@ (8011a3c <_tx_thread_initialize+0xcc>)
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	2285      	movs	r2, #133	@ 0x85
 8011a06:	0452      	lsls	r2, r2, #17
 8011a08:	431a      	orrs	r2, r3
    _tx_build_options =  _tx_build_options 
 8011a0a:	4b0c      	ldr	r3, [pc, #48]	@ (8011a3c <_tx_thread_initialize+0xcc>)
 8011a0c:	601a      	str	r2, [r3, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8011a0e:	46c0      	nop			@ (mov r8, r8)
 8011a10:	46bd      	mov	sp, r7
 8011a12:	b008      	add	sp, #32
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	46c0      	nop			@ (mov r8, r8)
 8011a18:	20010fe8 	.word	0x20010fe8
 8011a1c:	20010fec 	.word	0x20010fec
 8011a20:	20010ff8 	.word	0x20010ff8
 8011a24:	20010ffc 	.word	0x20010ffc
 8011a28:	20011000 	.word	0x20011000
 8011a2c:	20010ff0 	.word	0x20010ff0
 8011a30:	20010ff4 	.word	0x20010ff4
 8011a34:	20011080 	.word	0x20011080
 8011a38:	20011084 	.word	0x20011084
 8011a3c:	20011088 	.word	0x20011088

08011a40 <_tx_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_relinquish(VOID)
{
 8011a40:	b580      	push	{r7, lr}
 8011a42:	b08a      	sub	sp, #40	@ 0x28
 8011a44:	af00      	add	r7, sp, #0
UINT            priority;
TX_THREAD       *thread_ptr;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011a46:	4b29      	ldr	r3, [pc, #164]	@ (8011aec <_tx_thread_relinquish+0xac>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8011a50:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011a52:	b672      	cpsid	i
    return(primask_value);
 8011a54:	69bb      	ldr	r3, [r7, #24]
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Disable interrupts.  */
    TX_DISABLE
 8011a56:	623b      	str	r3, [r7, #32]

#ifndef TX_NO_TIMER

    /* Reset time slice for current thread.  */
    _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8011a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a5a:	69da      	ldr	r2, [r3, #28]
 8011a5c:	4b24      	ldr	r3, [pc, #144]	@ (8011af0 <_tx_thread_relinquish+0xb0>)
 8011a5e:	601a      	str	r2, [r3, #0]
#endif

    /* Pickup the thread's priority.  */
    priority =  thread_ptr -> tx_thread_priority;
 8011a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a64:	61fb      	str	r3, [r7, #28]

    /* Determine if there is another thread at the same priority.  */
    if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8011a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a68:	6a1b      	ldr	r3, [r3, #32]
 8011a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d009      	beq.n	8011a84 <_tx_thread_relinquish+0x44>
    {

        /* Yes, there is another thread at this priority, make it the highest at
           this priority level.  */
        _tx_thread_priority_list[priority] =  thread_ptr -> tx_thread_ready_next;
 8011a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a72:	6a19      	ldr	r1, [r3, #32]
 8011a74:	4b1f      	ldr	r3, [pc, #124]	@ (8011af4 <_tx_thread_relinquish+0xb4>)
 8011a76:	69fa      	ldr	r2, [r7, #28]
 8011a78:	0092      	lsls	r2, r2, #2
 8011a7a:	50d1      	str	r1, [r2, r3]

        /* Mark the new thread as the one to execute.  */
        _tx_thread_execute_ptr = thread_ptr -> tx_thread_ready_next;
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a7e:	6a1a      	ldr	r2, [r3, #32]
 8011a80:	4b1d      	ldr	r3, [pc, #116]	@ (8011af8 <_tx_thread_relinquish+0xb8>)
 8011a82:	601a      	str	r2, [r3, #0]
    }

    /* Determine if there is a higher-priority thread ready.  */
    if (_tx_thread_highest_priority < priority)
 8011a84:	4b1d      	ldr	r3, [pc, #116]	@ (8011afc <_tx_thread_relinquish+0xbc>)
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	69fa      	ldr	r2, [r7, #28]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	d906      	bls.n	8011a9c <_tx_thread_relinquish+0x5c>
    {

        /* Yes, there is a higher priority thread ready to execute.  Make
           it visible to the thread scheduler.  */
        _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8011a8e:	4b1b      	ldr	r3, [pc, #108]	@ (8011afc <_tx_thread_relinquish+0xbc>)
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	4b18      	ldr	r3, [pc, #96]	@ (8011af4 <_tx_thread_relinquish+0xb4>)
 8011a94:	0092      	lsls	r2, r2, #2
 8011a96:	58d2      	ldr	r2, [r2, r3]
 8011a98:	4b17      	ldr	r3, [pc, #92]	@ (8011af8 <_tx_thread_relinquish+0xb8>)
 8011a9a:	601a      	str	r2, [r3, #0]
 8011a9c:	6a3b      	ldr	r3, [r7, #32]
 8011a9e:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	f383 8810 	msr	PRIMASK, r3
}
 8011aa6:	46c0      	nop			@ (mov r8, r8)

    /* Restore previous interrupt posture.  */
    TX_RESTORE

    /* Determine if this thread needs to return to the system.  */
    if (_tx_thread_execute_ptr != thread_ptr)
 8011aa8:	4b13      	ldr	r3, [pc, #76]	@ (8011af8 <_tx_thread_relinquish+0xb8>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d017      	beq.n	8011ae2 <_tx_thread_relinquish+0xa2>

__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011ab2:	4b13      	ldr	r3, [pc, #76]	@ (8011b00 <_tx_thread_relinquish+0xc0>)
 8011ab4:	2280      	movs	r2, #128	@ 0x80
 8011ab6:	0552      	lsls	r2, r2, #21
 8011ab8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011aba:	f3ef 8305 	mrs	r3, IPSR
 8011abe:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011ac0:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10c      	bne.n	8011ae0 <_tx_thread_relinquish+0xa0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8011aca:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 8011acc:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_primask_value();
 8011ace:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011ad0:	b662      	cpsie	i
}
 8011ad2:	46c0      	nop			@ (mov r8, r8)
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	f383 8810 	msr	PRIMASK, r3
}
 8011ade:	46c0      	nop			@ (mov r8, r8)
        __enable_interrupts();
        __restore_interrupts(interrupt_save);
    }   
}
 8011ae0:	46c0      	nop			@ (mov r8, r8)

        /* Transfer control to the system so the scheduler can execute
           the next thread.  */
        _tx_thread_system_return();
    }
}
 8011ae2:	46c0      	nop			@ (mov r8, r8)
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	b00a      	add	sp, #40	@ 0x28
 8011ae8:	bd80      	pop	{r7, pc}
 8011aea:	46c0      	nop			@ (mov r8, r8)
 8011aec:	20010fe8 	.word	0x20010fe8
 8011af0:	200115ec 	.word	0x200115ec
 8011af4:	20011000 	.word	0x20011000
 8011af8:	20010fec 	.word	0x20010fec
 8011afc:	20010ffc 	.word	0x20010ffc
 8011b00:	e000ed04 	.word	0xe000ed04

08011b04 <_tx_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_resume(TX_THREAD *thread_ptr)
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b08a      	sub	sp, #40	@ 0x28
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]

TX_INTERRUPT_SAVE_AREA

UINT        status;
TX_THREAD   *saved_thread_ptr;
UINT        saved_threshold =  ((UINT) 0);
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011b10:	f3ef 8310 	mrs	r3, PRIMASK
 8011b14:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011b16:	b672      	cpsid	i
    return(primask_value);
 8011b18:	697b      	ldr	r3, [r7, #20]
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011b1a:	61bb      	str	r3, [r7, #24]
    /* Log this kernel call.  */
    TX_EL_THREAD_RESUME_INSERT

    /* Determine if the thread is suspended or in the process of suspending.
       If so, call the thread resume processing.  */
    if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b20:	2b03      	cmp	r3, #3
 8011b22:	d130      	bne.n	8011b86 <_tx_thread_resume+0x82>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011b24:	f3ef 8305 	mrs	r3, IPSR
 8011b28:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011b2a:	693a      	ldr	r2, [r7, #16]
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8011b2c:	4b21      	ldr	r3, [pc, #132]	@ (8011bb4 <_tx_thread_resume+0xb0>)
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	4313      	orrs	r3, r2
 8011b32:	4a21      	ldr	r2, [pc, #132]	@ (8011bb8 <_tx_thread_resume+0xb4>)
 8011b34:	4293      	cmp	r3, r2
 8011b36:	d90d      	bls.n	8011b54 <_tx_thread_resume+0x50>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 8011b38:	4b20      	ldr	r3, [pc, #128]	@ (8011bbc <_tx_thread_resume+0xb8>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	623b      	str	r3, [r7, #32]

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d009      	beq.n	8011b58 <_tx_thread_resume+0x54>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8011b44:	6a3b      	ldr	r3, [r7, #32]
 8011b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b48:	61fb      	str	r3, [r7, #28]

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 8011b4a:	6a3b      	ldr	r3, [r7, #32]
 8011b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b4e:	6a3b      	ldr	r3, [r7, #32]
 8011b50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8011b52:	e001      	b.n	8011b58 <_tx_thread_resume+0x54>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8011b54:	2300      	movs	r3, #0
 8011b56:	623b      	str	r3, [r7, #32]
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Temporarily disable preemption.  */
        _tx_thread_preempt_disable++;
 8011b58:	4b19      	ldr	r3, [pc, #100]	@ (8011bc0 <_tx_thread_resume+0xbc>)
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	1c5a      	adds	r2, r3, #1
 8011b5e:	4b18      	ldr	r3, [pc, #96]	@ (8011bc0 <_tx_thread_resume+0xbc>)
 8011b60:	601a      	str	r2, [r3, #0]
 8011b62:	69bb      	ldr	r3, [r7, #24]
 8011b64:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	f383 8810 	msr	PRIMASK, r3
}
 8011b6c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Call the actual resume service to resume the thread.  */
        _tx_thread_system_resume(thread_ptr);
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	0018      	movs	r0, r3
 8011b72:	f000 f989 	bl	8011e88 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 8011b76:	6a3b      	ldr	r3, [r7, #32]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d002      	beq.n	8011b82 <_tx_thread_resume+0x7e>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8011b7c:	6a3b      	ldr	r3, [r7, #32]
 8011b7e:	69fa      	ldr	r2, [r7, #28]
 8011b80:	63da      	str	r2, [r3, #60]	@ 0x3c
        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#else

        /* Return successful completion.  */
        return(TX_SUCCESS);
 8011b82:	2300      	movs	r3, #0
 8011b84:	e012      	b.n	8011bac <_tx_thread_resume+0xa8>

        /* Setup successful return status.  */
        status =  TX_SUCCESS;
#endif
    }
    else if (thread_ptr -> tx_thread_delayed_suspend == TX_TRUE)
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b8a:	2b01      	cmp	r3, #1
 8011b8c:	d105      	bne.n	8011b9a <_tx_thread_resume+0x96>
    {

        /* Clear the delayed suspension.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	2200      	movs	r2, #0
 8011b92:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Setup delayed suspend lifted return status.  */
        status =  TX_SUSPEND_LIFTED;
 8011b94:	2319      	movs	r3, #25
 8011b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b98:	e001      	b.n	8011b9e <_tx_thread_resume+0x9a>
    }
    else
    {

        /* Setup invalid resume return status.  */
        status =  TX_RESUME_ERROR;
 8011b9a:	2312      	movs	r3, #18
 8011b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011ba2:	68bb      	ldr	r3, [r7, #8]
 8011ba4:	f383 8810 	msr	PRIMASK, r3
}
 8011ba8:	46c0      	nop			@ (mov r8, r8)
        }
    }
#endif

    /* Return completion status. */
    return(status);
 8011baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011bac:	0018      	movs	r0, r3
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	b00a      	add	sp, #40	@ 0x28
 8011bb2:	bd80      	pop	{r7, pc}
 8011bb4:	20000010 	.word	0x20000010
 8011bb8:	f0f0f0ef 	.word	0xf0f0f0ef
 8011bbc:	20010fec 	.word	0x20010fec
 8011bc0:	20011080 	.word	0x20011080

08011bc4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8011bc4:	b580      	push	{r7, lr}
 8011bc6:	b084      	sub	sp, #16
 8011bc8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011bca:	4b1a      	ldr	r3, [pc, #104]	@ (8011c34 <_tx_thread_shell_entry+0x70>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	60fb      	str	r3, [r7, #12]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8011bd0:	68fb      	ldr	r3, [r7, #12]
 8011bd2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8011bd8:	0018      	movs	r0, r3
 8011bda:	4790      	blx	r2

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 8011bdc:	4b16      	ldr	r3, [pc, #88]	@ (8011c38 <_tx_thread_shell_entry+0x74>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d004      	beq.n	8011bee <_tx_thread_shell_entry+0x2a>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8011be4:	4b14      	ldr	r3, [pc, #80]	@ (8011c38 <_tx_thread_shell_entry+0x74>)
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	68fa      	ldr	r2, [r7, #12]
 8011bea:	0010      	movs	r0, r2
 8011bec:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011bee:	f3ef 8310 	mrs	r3, PRIMASK
 8011bf2:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011bf4:	b672      	cpsid	i
    return(primask_value);
 8011bf6:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 8011bf8:	60bb      	str	r3, [r7, #8]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	2201      	movs	r2, #1
 8011bfe:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011c00:	68fb      	ldr	r3, [r7, #12]
 8011c02:	2201      	movs	r2, #1
 8011c04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	2200      	movs	r2, #0
 8011c0a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8011c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8011c3c <_tx_thread_shell_entry+0x78>)
 8011c0e:	681b      	ldr	r3, [r3, #0]
 8011c10:	1c5a      	adds	r2, r3, #1
 8011c12:	4b0a      	ldr	r3, [pc, #40]	@ (8011c3c <_tx_thread_shell_entry+0x78>)
 8011c14:	601a      	str	r2, [r3, #0]
 8011c16:	68bb      	ldr	r3, [r7, #8]
 8011c18:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	f383 8810 	msr	PRIMASK, r3
}
 8011c20:	46c0      	nop			@ (mov r8, r8)
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	0018      	movs	r0, r3
 8011c26:	f000 fa2f 	bl	8012088 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8011c2a:	46c0      	nop			@ (mov r8, r8)
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	b004      	add	sp, #16
 8011c30:	bd80      	pop	{r7, pc}
 8011c32:	46c0      	nop			@ (mov r8, r8)
 8011c34:	20010fe8 	.word	0x20010fe8
 8011c38:	20011084 	.word	0x20011084
 8011c3c:	20011080 	.word	0x20011080

08011c40 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b08e      	sub	sp, #56	@ 0x38
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011c48:	f3ef 8310 	mrs	r3, PRIMASK
 8011c4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011c4e:	b672      	cpsid	i
    return(primask_value);
 8011c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011c52:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8011c54:	4b35      	ldr	r3, [pc, #212]	@ (8011d2c <_tx_thread_sleep+0xec>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 8011c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d108      	bne.n	8011c72 <_tx_thread_sleep+0x32>
 8011c60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c62:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c66:	f383 8810 	msr	PRIMASK, r3
}
 8011c6a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011c6c:	2313      	movs	r3, #19
 8011c6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c70:	e056      	b.n	8011d20 <_tx_thread_sleep+0xe0>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011c72:	f3ef 8305 	mrs	r3, IPSR
 8011c76:	623b      	str	r3, [r7, #32]
    return(ipsr_value);
 8011c78:	6a3a      	ldr	r2, [r7, #32]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8011c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8011d30 <_tx_thread_sleep+0xf0>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	d008      	beq.n	8011c94 <_tx_thread_sleep+0x54>
 8011c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c84:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011c86:	69fb      	ldr	r3, [r7, #28]
 8011c88:	f383 8810 	msr	PRIMASK, r3
}
 8011c8c:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011c8e:	2313      	movs	r3, #19
 8011c90:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c92:	e045      	b.n	8011d20 <_tx_thread_sleep+0xe0>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8011c94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011c96:	4b27      	ldr	r3, [pc, #156]	@ (8011d34 <_tx_thread_sleep+0xf4>)
 8011c98:	429a      	cmp	r2, r3
 8011c9a:	d108      	bne.n	8011cae <_tx_thread_sleep+0x6e>
 8011c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c9e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011ca0:	69bb      	ldr	r3, [r7, #24]
 8011ca2:	f383 8810 	msr	PRIMASK, r3
}
 8011ca6:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8011ca8:	2313      	movs	r3, #19
 8011caa:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cac:	e038      	b.n	8011d20 <_tx_thread_sleep+0xe0>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d108      	bne.n	8011cc6 <_tx_thread_sleep+0x86>
 8011cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cb6:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	f383 8810 	msr	PRIMASK, r3
}
 8011cbe:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cc4:	e02c      	b.n	8011d20 <_tx_thread_sleep+0xe0>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8011cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8011d38 <_tx_thread_sleep+0xf8>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d008      	beq.n	8011ce0 <_tx_thread_sleep+0xa0>
 8011cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011cd0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011cd2:	693b      	ldr	r3, [r7, #16]
 8011cd4:	f383 8810 	msr	PRIMASK, r3
}
 8011cd8:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 8011cda:	2313      	movs	r3, #19
 8011cdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8011cde:	e01f      	b.n	8011d20 <_tx_thread_sleep+0xe0>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8011ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce2:	2204      	movs	r2, #4
 8011ce4:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce8:	2201      	movs	r2, #1
 8011cea:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 8011cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cee:	2284      	movs	r2, #132	@ 0x84
 8011cf0:	2100      	movs	r1, #0
 8011cf2:	5099      	str	r1, [r3, r2]

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8011cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8011d38 <_tx_thread_sleep+0xf8>)
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	1c5a      	adds	r2, r3, #1
 8011d00:	4b0d      	ldr	r3, [pc, #52]	@ (8011d38 <_tx_thread_sleep+0xf8>)
 8011d02:	601a      	str	r2, [r3, #0]
 8011d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011d06:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	f383 8810 	msr	PRIMASK, r3
}
 8011d0e:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d12:	0018      	movs	r0, r3
 8011d14:	f000 f9b8 	bl	8012088 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8011d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d1a:	2284      	movs	r2, #132	@ 0x84
 8011d1c:	589b      	ldr	r3, [r3, r2]
 8011d1e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8011d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011d22:	0018      	movs	r0, r3
 8011d24:	46bd      	mov	sp, r7
 8011d26:	b00e      	add	sp, #56	@ 0x38
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	46c0      	nop			@ (mov r8, r8)
 8011d2c:	20010fe8 	.word	0x20010fe8
 8011d30:	20000010 	.word	0x20000010
 8011d34:	20011130 	.word	0x20011130
 8011d38:	20011080 	.word	0x20011080

08011d3c <_tx_thread_suspend>:
/*                                            a MISRA compliance issue,   */
/*                                            resulting in version 6.1.1  */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_suspend(TX_THREAD *thread_ptr)
{
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b08a      	sub	sp, #40	@ 0x28
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011d44:	f3ef 8310 	mrs	r3, PRIMASK
 8011d48:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011d4a:	b672      	cpsid	i
    return(primask_value);
 8011d4c:	69bb      	ldr	r3, [r7, #24]


#ifndef TX_INLINE_THREAD_RESUME_SUSPEND

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8011d4e:	623b      	str	r3, [r7, #32]

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8011d50:	4b2e      	ldr	r3, [pc, #184]	@ (8011e0c <_tx_thread_suspend+0xd0>)
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	61fb      	str	r3, [r7, #28]

    /* Log this kernel call.  */
    TX_EL_THREAD_SUSPEND_INSERT

    /* Check the specified thread's current status.  */
    if (thread_ptr -> tx_thread_state == TX_READY)
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d130      	bne.n	8011dc0 <_tx_thread_suspend+0x84>
    {

        /* Initialize status to success.  */
        status =  TX_SUCCESS;
 8011d5e:	2300      	movs	r3, #0
 8011d60:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011d62:	f3ef 8305 	mrs	r3, IPSR
 8011d66:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8011d68:	697a      	ldr	r2, [r7, #20]

        /* Determine if we are in a thread context.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 8011d6a:	4b29      	ldr	r3, [pc, #164]	@ (8011e10 <_tx_thread_suspend+0xd4>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	4313      	orrs	r3, r2
 8011d70:	d109      	bne.n	8011d86 <_tx_thread_suspend+0x4a>
        {

            /* Yes, we are in a thread context.  */

            /* Determine if the current thread is also the suspending thread.  */
            if (current_thread == thread_ptr)
 8011d72:	69fa      	ldr	r2, [r7, #28]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	429a      	cmp	r2, r3
 8011d78:	d105      	bne.n	8011d86 <_tx_thread_suspend+0x4a>
            {

                /* Now determine if the preempt disable flag is non-zero.  */
                if (_tx_thread_preempt_disable != ((UINT) 0))
 8011d7a:	4b26      	ldr	r3, [pc, #152]	@ (8011e14 <_tx_thread_suspend+0xd8>)
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	2b00      	cmp	r3, #0
 8011d80:	d001      	beq.n	8011d86 <_tx_thread_suspend+0x4a>
                {

                    /* Current thread cannot suspend when the preempt disable flag is non-zero,
                       return an error.  */
                    status =  TX_SUSPEND_ERROR;
 8011d82:	2314      	movs	r3, #20
 8011d84:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }

        /* Determine if the status is still successful.  */
        if (status == TX_SUCCESS)
 8011d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d133      	bne.n	8011df4 <_tx_thread_suspend+0xb8>
        {

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SUSPENDED;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	2203      	movs	r2, #3
 8011d90:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	2201      	movs	r2, #1
 8011d96:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 8011d9e:	4b1d      	ldr	r3, [pc, #116]	@ (8011e14 <_tx_thread_suspend+0xd8>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	1c5a      	adds	r2, r3, #1
 8011da4:	4b1b      	ldr	r3, [pc, #108]	@ (8011e14 <_tx_thread_suspend+0xd8>)
 8011da6:	601a      	str	r2, [r3, #0]
 8011da8:	6a3b      	ldr	r3, [r7, #32]
 8011daa:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011dac:	693b      	ldr	r3, [r7, #16]
 8011dae:	f383 8810 	msr	PRIMASK, r3
}
 8011db2:	46c0      	nop			@ (mov r8, r8)

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	0018      	movs	r0, r3
 8011db8:	f000 f966 	bl	8012088 <_tx_thread_system_suspend>
            /* Return success.  */
            status =  TX_SUCCESS;
#else

            /* If MISRA is not enabled, return directly.  */
            return(TX_SUCCESS);
 8011dbc:	2300      	movs	r3, #0
 8011dbe:	e020      	b.n	8011e02 <_tx_thread_suspend+0xc6>
#endif
        }
    }
    else if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dc4:	2b02      	cmp	r3, #2
 8011dc6:	d102      	bne.n	8011dce <_tx_thread_suspend+0x92>
    {

        /* Thread is terminated.  */
        status =  TX_SUSPEND_ERROR;
 8011dc8:	2314      	movs	r3, #20
 8011dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8011dcc:	e012      	b.n	8011df4 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_COMPLETED)
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011dd2:	2b01      	cmp	r3, #1
 8011dd4:	d102      	bne.n	8011ddc <_tx_thread_suspend+0xa0>
    {

        /* Thread is completed.  */
        status =  TX_SUSPEND_ERROR;
 8011dd6:	2314      	movs	r3, #20
 8011dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8011dda:	e00b      	b.n	8011df4 <_tx_thread_suspend+0xb8>
    }
    else if (thread_ptr -> tx_thread_state == TX_SUSPENDED)
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011de0:	2b03      	cmp	r3, #3
 8011de2:	d102      	bne.n	8011dea <_tx_thread_suspend+0xae>
    {

        /* Already suspended, just set status to success.  */
        status =  TX_SUCCESS;
 8011de4:	2300      	movs	r3, #0
 8011de6:	627b      	str	r3, [r7, #36]	@ 0x24
 8011de8:	e004      	b.n	8011df4 <_tx_thread_suspend+0xb8>
    }
    else
    {

        /* Just set the delayed suspension flag.  */
        thread_ptr -> tx_thread_delayed_suspend =  TX_TRUE;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2201      	movs	r2, #1
 8011dee:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set status to success.  */
        status =  TX_SUCCESS;
 8011df0:	2300      	movs	r3, #0
 8011df2:	627b      	str	r3, [r7, #36]	@ 0x24
 8011df4:	6a3b      	ldr	r3, [r7, #32]
 8011df6:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	f383 8810 	msr	PRIMASK, r3
}
 8011dfe:	46c0      	nop			@ (mov r8, r8)
    /* Restore interrupts.  */
    TX_RESTORE

    /* Always return success, since this function does not perform error
       checking.  */
    return(status);
 8011e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    TX_RESTORE

    /* Return completion status.  */
    return(status);
#endif
}
 8011e02:	0018      	movs	r0, r3
 8011e04:	46bd      	mov	sp, r7
 8011e06:	b00a      	add	sp, #40	@ 0x28
 8011e08:	bd80      	pop	{r7, pc}
 8011e0a:	46c0      	nop			@ (mov r8, r8)
 8011e0c:	20010fe8 	.word	0x20010fe8
 8011e10:	20000010 	.word	0x20000010
 8011e14:	20011080 	.word	0x20011080

08011e18 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b088      	sub	sp, #32
 8011e1c:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011e1e:	4b16      	ldr	r3, [pc, #88]	@ (8011e78 <_tx_thread_system_preempt_check+0x60>)
 8011e20:	681b      	ldr	r3, [r3, #0]
 8011e22:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8011e24:	69fb      	ldr	r3, [r7, #28]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d121      	bne.n	8011e6e <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 8011e2a:	4b14      	ldr	r3, [pc, #80]	@ (8011e7c <_tx_thread_system_preempt_check+0x64>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8011e30:	4b13      	ldr	r3, [pc, #76]	@ (8011e80 <_tx_thread_system_preempt_check+0x68>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 8011e36:	69ba      	ldr	r2, [r7, #24]
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d017      	beq.n	8011e6e <_tx_thread_system_preempt_check+0x56>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011e3e:	4b11      	ldr	r3, [pc, #68]	@ (8011e84 <_tx_thread_system_preempt_check+0x6c>)
 8011e40:	2280      	movs	r2, #128	@ 0x80
 8011e42:	0552      	lsls	r2, r2, #21
 8011e44:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011e46:	f3ef 8305 	mrs	r3, IPSR
 8011e4a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8011e4c:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d10c      	bne.n	8011e6c <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011e52:	f3ef 8310 	mrs	r3, PRIMASK
 8011e56:	60fb      	str	r3, [r7, #12]
    return(primask_value);
 8011e58:	68fb      	ldr	r3, [r7, #12]
        interrupt_save = __get_primask_value();
 8011e5a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011e5c:	b662      	cpsie	i
}
 8011e5e:	46c0      	nop			@ (mov r8, r8)
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	f383 8810 	msr	PRIMASK, r3
}
 8011e6a:	46c0      	nop			@ (mov r8, r8)
}
 8011e6c:	46c0      	nop			@ (mov r8, r8)

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8011e6e:	46c0      	nop			@ (mov r8, r8)
 8011e70:	46bd      	mov	sp, r7
 8011e72:	b008      	add	sp, #32
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	46c0      	nop			@ (mov r8, r8)
 8011e78:	20011080 	.word	0x20011080
 8011e7c:	20010fe8 	.word	0x20010fe8
 8011e80:	20010fec 	.word	0x20010fec
 8011e84:	e000ed04 	.word	0xe000ed04

08011e88 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b096      	sub	sp, #88	@ 0x58
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011e90:	f3ef 8310 	mrs	r3, PRIMASK
 8011e94:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 8011e96:	b672      	cpsid	i
    return(primask_value);
 8011e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8011e9a:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d005      	beq.n	8011eb0 <_tx_thread_system_resume+0x28>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	334c      	adds	r3, #76	@ 0x4c
 8011ea8:	0018      	movs	r0, r3
 8011eaa:	f000 fccb 	bl	8012844 <_tx_timer_system_deactivate>
 8011eae:	e002      	b.n	8011eb6 <_tx_thread_system_resume+0x2e>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8011eb6:	4b6d      	ldr	r3, [pc, #436]	@ (801206c <_tx_thread_system_resume+0x1e4>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	1e5a      	subs	r2, r3, #1
 8011ebc:	4b6b      	ldr	r3, [pc, #428]	@ (801206c <_tx_thread_system_resume+0x1e4>)
 8011ebe:	601a      	str	r2, [r3, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d000      	beq.n	8011eca <_tx_thread_system_resume+0x42>
 8011ec8:	e084      	b.n	8011fd4 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	d100      	bne.n	8011ed4 <_tx_thread_system_resume+0x4c>
 8011ed2:	e098      	b.n	8012006 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d000      	beq.n	8011ede <_tx_thread_system_resume+0x56>
 8011edc:	e073      	b.n	8011fc6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	2200      	movs	r2, #0
 8011ee2:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011ee8:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8011eea:	4b61      	ldr	r3, [pc, #388]	@ (8012070 <_tx_thread_system_resume+0x1e8>)
 8011eec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011eee:	0092      	lsls	r2, r2, #2
 8011ef0:	58d3      	ldr	r3, [r2, r3]
 8011ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8011ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d155      	bne.n	8011fa6 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8011efa:	4b5d      	ldr	r3, [pc, #372]	@ (8012070 <_tx_thread_system_resume+0x1e8>)
 8011efc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011efe:	0092      	lsls	r2, r2, #2
 8011f00:	6879      	ldr	r1, [r7, #4]
 8011f02:	50d1      	str	r1, [r2, r3]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	687a      	ldr	r2, [r7, #4]
 8011f0e:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8011f10:	2201      	movs	r2, #1
 8011f12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011f14:	409a      	lsls	r2, r3
 8011f16:	0013      	movs	r3, r2
 8011f18:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8011f1a:	4b56      	ldr	r3, [pc, #344]	@ (8012074 <_tx_thread_system_resume+0x1ec>)
 8011f1c:	681a      	ldr	r2, [r3, #0]
 8011f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011f20:	431a      	orrs	r2, r3
 8011f22:	4b54      	ldr	r3, [pc, #336]	@ (8012074 <_tx_thread_system_resume+0x1ec>)
 8011f24:	601a      	str	r2, [r3, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8011f26:	4b54      	ldr	r3, [pc, #336]	@ (8012078 <_tx_thread_system_resume+0x1f0>)
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d26a      	bcs.n	8012006 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8011f30:	4b51      	ldr	r3, [pc, #324]	@ (8012078 <_tx_thread_system_resume+0x1f0>)
 8011f32:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011f34:	601a      	str	r2, [r3, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8011f36:	4b51      	ldr	r3, [pc, #324]	@ (801207c <_tx_thread_system_resume+0x1f4>)
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8011f3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d103      	bne.n	8011f4a <_tx_thread_system_resume+0xc2>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8011f42:	4b4e      	ldr	r3, [pc, #312]	@ (801207c <_tx_thread_system_resume+0x1f4>)
 8011f44:	687a      	ldr	r2, [r7, #4]
 8011f46:	601a      	str	r2, [r3, #0]
 8011f48:	e05d      	b.n	8012006 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8011f4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011f4e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011f50:	429a      	cmp	r2, r3
 8011f52:	d258      	bcs.n	8012006 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8011f54:	4b49      	ldr	r3, [pc, #292]	@ (801207c <_tx_thread_system_resume+0x1f4>)
 8011f56:	687a      	ldr	r2, [r7, #4]
 8011f58:	601a      	str	r2, [r3, #0]
 8011f5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011f5c:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f60:	f383 8810 	msr	PRIMASK, r3
}
 8011f64:	46c0      	nop			@ (mov r8, r8)
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8011f66:	4b41      	ldr	r3, [pc, #260]	@ (801206c <_tx_thread_system_resume+0x1e4>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8011f6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d000      	beq.n	8011f74 <_tx_thread_system_resume+0xec>
 8011f72:	e074      	b.n	801205e <_tx_thread_system_resume+0x1d6>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8011f74:	4b42      	ldr	r3, [pc, #264]	@ (8012080 <_tx_thread_system_resume+0x1f8>)
 8011f76:	2280      	movs	r2, #128	@ 0x80
 8011f78:	0552      	lsls	r2, r2, #21
 8011f7a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8011f7c:	f3ef 8305 	mrs	r3, IPSR
 8011f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8011f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d10c      	bne.n	8011fa2 <_tx_thread_system_resume+0x11a>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8011f88:	f3ef 8310 	mrs	r3, PRIMASK
 8011f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(primask_value);
 8011f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_primask_value();
 8011f90:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8011f92:	b662      	cpsie	i
}
 8011f94:	46c0      	nop			@ (mov r8, r8)
 8011f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f98:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8011f9a:	6a3b      	ldr	r3, [r7, #32]
 8011f9c:	f383 8810 	msr	PRIMASK, r3
}
 8011fa0:	46c0      	nop			@ (mov r8, r8)
}
 8011fa2:	46c0      	nop			@ (mov r8, r8)
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8011fa4:	e05b      	b.n	801205e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8011fa6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011faa:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8011fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011fae:	687a      	ldr	r2, [r7, #4]
 8011fb0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8011fb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011fb4:	687a      	ldr	r2, [r7, #4]
 8011fb6:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011fbc:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011fc2:	621a      	str	r2, [r3, #32]
 8011fc4:	e01f      	b.n	8012006 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	2200      	movs	r2, #0
 8011fca:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	2203      	movs	r2, #3
 8011fd0:	631a      	str	r2, [r3, #48]	@ 0x30
 8011fd2:	e018      	b.n	8012006 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fd8:	2b01      	cmp	r3, #1
 8011fda:	d014      	beq.n	8012006 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011fe0:	2b02      	cmp	r3, #2
 8011fe2:	d010      	beq.n	8012006 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d106      	bne.n	8011ffa <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2200      	movs	r2, #0
 8011ff6:	631a      	str	r2, [r3, #48]	@ 0x30
 8011ff8:	e005      	b.n	8012006 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	2203      	movs	r2, #3
 8012004:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012006:	4b1f      	ldr	r3, [pc, #124]	@ (8012084 <_tx_thread_system_resume+0x1fc>)
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	63bb      	str	r3, [r7, #56]	@ 0x38
 801200c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801200e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012010:	69fb      	ldr	r3, [r7, #28]
 8012012:	f383 8810 	msr	PRIMASK, r3
}
 8012016:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012018:	4b18      	ldr	r3, [pc, #96]	@ (801207c <_tx_thread_system_resume+0x1f4>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801201e:	429a      	cmp	r2, r3
 8012020:	d020      	beq.n	8012064 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012022:	4b12      	ldr	r3, [pc, #72]	@ (801206c <_tx_thread_system_resume+0x1e4>)
 8012024:	681b      	ldr	r3, [r3, #0]
 8012026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8012028:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801202a:	2b00      	cmp	r3, #0
 801202c:	d11a      	bne.n	8012064 <_tx_thread_system_resume+0x1dc>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 801202e:	4b14      	ldr	r3, [pc, #80]	@ (8012080 <_tx_thread_system_resume+0x1f8>)
 8012030:	2280      	movs	r2, #128	@ 0x80
 8012032:	0552      	lsls	r2, r2, #21
 8012034:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012036:	f3ef 8305 	mrs	r3, IPSR
 801203a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801203c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 801203e:	2b00      	cmp	r3, #0
 8012040:	d10f      	bne.n	8012062 <_tx_thread_system_resume+0x1da>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012042:	f3ef 8310 	mrs	r3, PRIMASK
 8012046:	617b      	str	r3, [r7, #20]
    return(primask_value);
 8012048:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_primask_value();
 801204a:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 801204c:	b662      	cpsie	i
}
 801204e:	46c0      	nop			@ (mov r8, r8)
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012054:	68fb      	ldr	r3, [r7, #12]
 8012056:	f383 8810 	msr	PRIMASK, r3
}
 801205a:	46c0      	nop			@ (mov r8, r8)
}
 801205c:	e001      	b.n	8012062 <_tx_thread_system_resume+0x1da>
                                return;
 801205e:	46c0      	nop			@ (mov r8, r8)
 8012060:	e000      	b.n	8012064 <_tx_thread_system_resume+0x1dc>
 8012062:	46c0      	nop			@ (mov r8, r8)

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8012064:	46bd      	mov	sp, r7
 8012066:	b016      	add	sp, #88	@ 0x58
 8012068:	bd80      	pop	{r7, pc}
 801206a:	46c0      	nop			@ (mov r8, r8)
 801206c:	20011080 	.word	0x20011080
 8012070:	20011000 	.word	0x20011000
 8012074:	20010ff8 	.word	0x20010ff8
 8012078:	20010ffc 	.word	0x20010ffc
 801207c:	20010fec 	.word	0x20010fec
 8012080:	e000ed04 	.word	0xe000ed04
 8012084:	20010fe8 	.word	0x20010fe8

08012088 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8012088:	b580      	push	{r7, lr}
 801208a:	b09c      	sub	sp, #112	@ 0x70
 801208c:	af00      	add	r7, sp, #0
 801208e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8012090:	4bb9      	ldr	r3, [pc, #740]	@ (8012378 <_tx_thread_system_suspend+0x2f0>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	667b      	str	r3, [r7, #100]	@ 0x64
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012096:	f3ef 8310 	mrs	r3, PRIMASK
 801209a:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" CPSID i" : : : "memory" );
 801209c:	b672      	cpsid	i
    return(primask_value);
 801209e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80120a0:	663b      	str	r3, [r7, #96]	@ 0x60

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80120a2:	687a      	ldr	r2, [r7, #4]
 80120a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d111      	bne.n	80120ce <_tx_thread_system_suspend+0x46>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80120ae:	65fb      	str	r3, [r7, #92]	@ 0x5c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80120b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d007      	beq.n	80120c6 <_tx_thread_system_suspend+0x3e>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 80120b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80120b8:	3301      	adds	r3, #1
 80120ba:	d004      	beq.n	80120c6 <_tx_thread_system_suspend+0x3e>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	334c      	adds	r3, #76	@ 0x4c
 80120c0:	0018      	movs	r0, r3
 80120c2:	f000 fb61 	bl	8012788 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	69da      	ldr	r2, [r3, #28]
 80120ca:	4bac      	ldr	r3, [pc, #688]	@ (801237c <_tx_thread_system_suspend+0x2f4>)
 80120cc:	601a      	str	r2, [r3, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 80120ce:	4bac      	ldr	r3, [pc, #688]	@ (8012380 <_tx_thread_system_suspend+0x2f8>)
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	1e5a      	subs	r2, r3, #1
 80120d4:	4baa      	ldr	r3, [pc, #680]	@ (8012380 <_tx_thread_system_suspend+0x2f8>)
 80120d6:	601a      	str	r2, [r3, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80120dc:	2b01      	cmp	r3, #1
 80120de:	d000      	beq.n	80120e2 <_tx_thread_system_suspend+0x5a>
 80120e0:	e118      	b.n	8012314 <_tx_thread_system_suspend+0x28c>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	2200      	movs	r2, #0
 80120e6:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120ec:	65bb      	str	r3, [r7, #88]	@ 0x58

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	6a1b      	ldr	r3, [r3, #32]
 80120f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 80120f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	429a      	cmp	r2, r3
 80120fa:	d016      	beq.n	801212a <_tx_thread_system_suspend+0xa2>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012100:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8012102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012106:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8012108:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801210a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801210c:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 801210e:	4b9d      	ldr	r3, [pc, #628]	@ (8012384 <_tx_thread_system_suspend+0x2fc>)
 8012110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012112:	0092      	lsls	r2, r2, #2
 8012114:	58d3      	ldr	r3, [r2, r3]
 8012116:	687a      	ldr	r2, [r7, #4]
 8012118:	429a      	cmp	r2, r3
 801211a:	d000      	beq.n	801211e <_tx_thread_system_suspend+0x96>
 801211c:	e0c9      	b.n	80122b2 <_tx_thread_system_suspend+0x22a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 801211e:	4b99      	ldr	r3, [pc, #612]	@ (8012384 <_tx_thread_system_suspend+0x2fc>)
 8012120:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8012122:	0092      	lsls	r2, r2, #2
 8012124:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8012126:	50d1      	str	r1, [r2, r3]
 8012128:	e0c3      	b.n	80122b2 <_tx_thread_system_suspend+0x22a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 801212a:	4b96      	ldr	r3, [pc, #600]	@ (8012384 <_tx_thread_system_suspend+0x2fc>)
 801212c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801212e:	0092      	lsls	r2, r2, #2
 8012130:	2100      	movs	r1, #0
 8012132:	50d1      	str	r1, [r2, r3]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8012134:	2201      	movs	r2, #1
 8012136:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8012138:	409a      	lsls	r2, r3
 801213a:	0013      	movs	r3, r2
 801213c:	66bb      	str	r3, [r7, #104]	@ 0x68
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 801213e:	4b92      	ldr	r3, [pc, #584]	@ (8012388 <_tx_thread_system_suspend+0x300>)
 8012140:	681b      	ldr	r3, [r3, #0]
 8012142:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012144:	43d2      	mvns	r2, r2
 8012146:	401a      	ands	r2, r3
 8012148:	4b8f      	ldr	r3, [pc, #572]	@ (8012388 <_tx_thread_system_suspend+0x300>)
 801214a:	601a      	str	r2, [r3, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 801214c:	2300      	movs	r3, #0
 801214e:	653b      	str	r3, [r7, #80]	@ 0x50
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8012150:	4b8d      	ldr	r3, [pc, #564]	@ (8012388 <_tx_thread_system_suspend+0x300>)
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8012156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012158:	2b00      	cmp	r3, #0
 801215a:	d12b      	bne.n	80121b4 <_tx_thread_system_suspend+0x12c>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 801215c:	4b8b      	ldr	r3, [pc, #556]	@ (801238c <_tx_thread_system_suspend+0x304>)
 801215e:	2220      	movs	r2, #32
 8012160:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8012162:	4b8b      	ldr	r3, [pc, #556]	@ (8012390 <_tx_thread_system_suspend+0x308>)
 8012164:	2200      	movs	r2, #0
 8012166:	601a      	str	r2, [r3, #0]
 8012168:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801216a:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801216c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801216e:	f383 8810 	msr	PRIMASK, r3
}
 8012172:	46c0      	nop			@ (mov r8, r8)
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8012174:	4b82      	ldr	r3, [pc, #520]	@ (8012380 <_tx_thread_system_suspend+0x2f8>)
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (combined_flags == ((ULONG) 0))
 801217a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801217c:	2b00      	cmp	r3, #0
 801217e:	d000      	beq.n	8012182 <_tx_thread_system_suspend+0xfa>
 8012180:	e0f2      	b.n	8012368 <_tx_thread_system_suspend+0x2e0>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012182:	4b84      	ldr	r3, [pc, #528]	@ (8012394 <_tx_thread_system_suspend+0x30c>)
 8012184:	2280      	movs	r2, #128	@ 0x80
 8012186:	0552      	lsls	r2, r2, #21
 8012188:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801218a:	f3ef 8305 	mrs	r3, IPSR
 801218e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(ipsr_value);
 8012190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    if (__get_ipsr_value() == 0)
 8012192:	2b00      	cmp	r3, #0
 8012194:	d10c      	bne.n	80121b0 <_tx_thread_system_suspend+0x128>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012196:	f3ef 8310 	mrs	r3, PRIMASK
 801219a:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(primask_value);
 801219c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        interrupt_save = __get_primask_value();
 801219e:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSIE  i": : : "memory" );
 80121a0:	b662      	cpsie	i
}
 80121a2:	46c0      	nop			@ (mov r8, r8)
 80121a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121a6:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80121a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121aa:	f383 8810 	msr	PRIMASK, r3
}
 80121ae:	46c0      	nop			@ (mov r8, r8)
}
 80121b0:	46c0      	nop			@ (mov r8, r8)
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 80121b2:	e0d9      	b.n	8012368 <_tx_thread_system_suspend+0x2e0>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 80121b4:	2300      	movs	r3, #0
 80121b6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80121b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121ba:	425a      	negs	r2, r3
 80121bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121be:	4013      	ands	r3, r2
 80121c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80121c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121c4:	2b0f      	cmp	r3, #15
 80121c6:	d80e      	bhi.n	80121e6 <_tx_thread_system_suspend+0x15e>
 80121c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121ca:	2b03      	cmp	r3, #3
 80121cc:	d905      	bls.n	80121da <_tx_thread_system_suspend+0x152>
 80121ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121d0:	089b      	lsrs	r3, r3, #2
 80121d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80121d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80121d6:	3302      	adds	r3, #2
 80121d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80121da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121dc:	085b      	lsrs	r3, r3, #1
 80121de:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80121e0:	18d3      	adds	r3, r2, r3
 80121e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80121e4:	e060      	b.n	80122a8 <_tx_thread_system_suspend+0x220>
 80121e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121e8:	2bff      	cmp	r3, #255	@ 0xff
 80121ea:	d814      	bhi.n	8012216 <_tx_thread_system_suspend+0x18e>
 80121ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121ee:	091b      	lsrs	r3, r3, #4
 80121f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80121f2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80121f4:	3304      	adds	r3, #4
 80121f6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80121f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80121fa:	2b03      	cmp	r3, #3
 80121fc:	d905      	bls.n	801220a <_tx_thread_system_suspend+0x182>
 80121fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012200:	089b      	lsrs	r3, r3, #2
 8012202:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012204:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012206:	3302      	adds	r3, #2
 8012208:	66bb      	str	r3, [r7, #104]	@ 0x68
 801220a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801220c:	085b      	lsrs	r3, r3, #1
 801220e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012210:	18d3      	adds	r3, r2, r3
 8012212:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012214:	e048      	b.n	80122a8 <_tx_thread_system_suspend+0x220>
 8012216:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8012218:	2380      	movs	r3, #128	@ 0x80
 801221a:	025b      	lsls	r3, r3, #9
 801221c:	429a      	cmp	r2, r3
 801221e:	d21d      	bcs.n	801225c <_tx_thread_system_suspend+0x1d4>
 8012220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012222:	0a1b      	lsrs	r3, r3, #8
 8012224:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012226:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012228:	3308      	adds	r3, #8
 801222a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801222c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801222e:	2b0f      	cmp	r3, #15
 8012230:	d905      	bls.n	801223e <_tx_thread_system_suspend+0x1b6>
 8012232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012234:	091b      	lsrs	r3, r3, #4
 8012236:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012238:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801223a:	3304      	adds	r3, #4
 801223c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801223e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012240:	2b03      	cmp	r3, #3
 8012242:	d905      	bls.n	8012250 <_tx_thread_system_suspend+0x1c8>
 8012244:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012246:	089b      	lsrs	r3, r3, #2
 8012248:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801224a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801224c:	3302      	adds	r3, #2
 801224e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012250:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012252:	085b      	lsrs	r3, r3, #1
 8012254:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8012256:	18d3      	adds	r3, r2, r3
 8012258:	66bb      	str	r3, [r7, #104]	@ 0x68
 801225a:	e025      	b.n	80122a8 <_tx_thread_system_suspend+0x220>
 801225c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801225e:	0c1b      	lsrs	r3, r3, #16
 8012260:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012262:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012264:	3310      	adds	r3, #16
 8012266:	66bb      	str	r3, [r7, #104]	@ 0x68
 8012268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801226a:	2bff      	cmp	r3, #255	@ 0xff
 801226c:	d905      	bls.n	801227a <_tx_thread_system_suspend+0x1f2>
 801226e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012270:	0a1b      	lsrs	r3, r3, #8
 8012272:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012274:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012276:	3308      	adds	r3, #8
 8012278:	66bb      	str	r3, [r7, #104]	@ 0x68
 801227a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801227c:	2b0f      	cmp	r3, #15
 801227e:	d905      	bls.n	801228c <_tx_thread_system_suspend+0x204>
 8012280:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012282:	091b      	lsrs	r3, r3, #4
 8012284:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012286:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012288:	3304      	adds	r3, #4
 801228a:	66bb      	str	r3, [r7, #104]	@ 0x68
 801228c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801228e:	2b03      	cmp	r3, #3
 8012290:	d905      	bls.n	801229e <_tx_thread_system_suspend+0x216>
 8012292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012294:	089b      	lsrs	r3, r3, #2
 8012296:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801229a:	3302      	adds	r3, #2
 801229c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801229e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80122a0:	085b      	lsrs	r3, r3, #1
 80122a2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80122a4:	18d3      	adds	r3, r2, r3
 80122a6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 80122a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80122aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80122ac:	18d2      	adds	r2, r2, r3
 80122ae:	4b37      	ldr	r3, [pc, #220]	@ (801238c <_tx_thread_system_suspend+0x304>)
 80122b0:	601a      	str	r2, [r3, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 80122b2:	4b37      	ldr	r3, [pc, #220]	@ (8012390 <_tx_thread_system_suspend+0x308>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	429a      	cmp	r2, r3
 80122ba:	d12b      	bne.n	8012314 <_tx_thread_system_suspend+0x28c>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 80122bc:	4b33      	ldr	r3, [pc, #204]	@ (801238c <_tx_thread_system_suspend+0x304>)
 80122be:	681a      	ldr	r2, [r3, #0]
 80122c0:	4b30      	ldr	r3, [pc, #192]	@ (8012384 <_tx_thread_system_suspend+0x2fc>)
 80122c2:	0092      	lsls	r2, r2, #2
 80122c4:	58d2      	ldr	r2, [r2, r3]
 80122c6:	4b32      	ldr	r3, [pc, #200]	@ (8012390 <_tx_thread_system_suspend+0x308>)
 80122c8:	601a      	str	r2, [r3, #0]
 80122ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80122cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80122ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122d0:	f383 8810 	msr	PRIMASK, r3
}
 80122d4:	46c0      	nop			@ (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80122d6:	4b2a      	ldr	r3, [pc, #168]	@ (8012380 <_tx_thread_system_suspend+0x2f8>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	64fb      	str	r3, [r7, #76]	@ 0x4c
            if (combined_flags == ((ULONG) 0))
 80122dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d144      	bne.n	801236c <_tx_thread_system_suspend+0x2e4>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80122e2:	4b2c      	ldr	r3, [pc, #176]	@ (8012394 <_tx_thread_system_suspend+0x30c>)
 80122e4:	2280      	movs	r2, #128	@ 0x80
 80122e6:	0552      	lsls	r2, r2, #21
 80122e8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80122ea:	f3ef 8305 	mrs	r3, IPSR
 80122ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 80122f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d10c      	bne.n	8012310 <_tx_thread_system_suspend+0x288>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80122f6:	f3ef 8310 	mrs	r3, PRIMASK
 80122fa:	627b      	str	r3, [r7, #36]	@ 0x24
    return(primask_value);
 80122fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_primask_value();
 80122fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012300:	b662      	cpsie	i
}
 8012302:	46c0      	nop			@ (mov r8, r8)
 8012304:	6a3b      	ldr	r3, [r7, #32]
 8012306:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012308:	69fb      	ldr	r3, [r7, #28]
 801230a:	f383 8810 	msr	PRIMASK, r3
}
 801230e:	46c0      	nop			@ (mov r8, r8)
}
 8012310:	46c0      	nop			@ (mov r8, r8)
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8012312:	e02b      	b.n	801236c <_tx_thread_system_suspend+0x2e4>
 8012314:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8012316:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	f383 8810 	msr	PRIMASK, r3
}
 801231e:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8012320:	4b1b      	ldr	r3, [pc, #108]	@ (8012390 <_tx_thread_system_suspend+0x308>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8012326:	429a      	cmp	r2, r3
 8012328:	d022      	beq.n	8012370 <_tx_thread_system_suspend+0x2e8>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 801232a:	4b15      	ldr	r3, [pc, #84]	@ (8012380 <_tx_thread_system_suspend+0x2f8>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (combined_flags == ((ULONG) 0))
 8012330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012332:	2b00      	cmp	r3, #0
 8012334:	d11c      	bne.n	8012370 <_tx_thread_system_suspend+0x2e8>
    *((ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8012336:	4b17      	ldr	r3, [pc, #92]	@ (8012394 <_tx_thread_system_suspend+0x30c>)
 8012338:	2280      	movs	r2, #128	@ 0x80
 801233a:	0552      	lsls	r2, r2, #21
 801233c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801233e:	f3ef 8305 	mrs	r3, IPSR
 8012342:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012344:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8012346:	2b00      	cmp	r3, #0
 8012348:	d10c      	bne.n	8012364 <_tx_thread_system_suspend+0x2dc>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801234a:	f3ef 8310 	mrs	r3, PRIMASK
 801234e:	613b      	str	r3, [r7, #16]
    return(primask_value);
 8012350:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_primask_value();
 8012352:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSIE  i": : : "memory" );
 8012354:	b662      	cpsie	i
}
 8012356:	46c0      	nop			@ (mov r8, r8)
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	f383 8810 	msr	PRIMASK, r3
}
 8012362:	46c0      	nop			@ (mov r8, r8)
}
 8012364:	46c0      	nop			@ (mov r8, r8)
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8012366:	e003      	b.n	8012370 <_tx_thread_system_suspend+0x2e8>
                return;
 8012368:	46c0      	nop			@ (mov r8, r8)
 801236a:	e002      	b.n	8012372 <_tx_thread_system_suspend+0x2ea>
            return;
 801236c:	46c0      	nop			@ (mov r8, r8)
 801236e:	e000      	b.n	8012372 <_tx_thread_system_suspend+0x2ea>
    return;
 8012370:	46c0      	nop			@ (mov r8, r8)
}
 8012372:	46bd      	mov	sp, r7
 8012374:	b01c      	add	sp, #112	@ 0x70
 8012376:	bd80      	pop	{r7, pc}
 8012378:	20010fe8 	.word	0x20010fe8
 801237c:	200115ec 	.word	0x200115ec
 8012380:	20011080 	.word	0x20011080
 8012384:	20011000 	.word	0x20011000
 8012388:	20010ff8 	.word	0x20010ff8
 801238c:	20010ffc 	.word	0x20010ffc
 8012390:	20010fec 	.word	0x20010fec
 8012394:	e000ed04 	.word	0xe000ed04

08012398 <_tx_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_terminate(TX_THREAD *thread_ptr)
{
 8012398:	b580      	push	{r7, lr}
 801239a:	b092      	sub	sp, #72	@ 0x48
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
UINT        status;
ULONG       suspension_sequence;


    /* Default to successful completion.  */
    status =  TX_SUCCESS;
 80123a0:	2300      	movs	r3, #0
 80123a2:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80123a4:	f3ef 8310 	mrs	r3, PRIMASK
 80123a8:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile (" CPSID i" : : : "memory" );
 80123aa:	b672      	cpsid	i
    return(primask_value);
 80123ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

    /* Lockout interrupts while the thread is being terminated.  */
    TX_DISABLE
 80123ae:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Deactivate thread timer, if active.  */
    _tx_timer_system_deactivate(&thread_ptr -> tx_thread_timer);
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	334c      	adds	r3, #76	@ 0x4c
 80123b4:	0018      	movs	r0, r3
 80123b6:	f000 fa45 	bl	8012844 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_THREAD_TERMINATE_INSERT

    /* Is the thread already terminated?  */
    if (thread_ptr -> tx_thread_state == TX_TERMINATED)
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123be:	2b02      	cmp	r3, #2
 80123c0:	d108      	bne.n	80123d4 <_tx_thread_terminate+0x3c>
 80123c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80123c4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80123c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123c8:	f383 8810 	msr	PRIMASK, r3
}
 80123cc:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Return success since thread is already terminated.  */
        status =  TX_SUCCESS;
 80123ce:	2300      	movs	r3, #0
 80123d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80123d2:	e082      	b.n	80124da <_tx_thread_terminate+0x142>
    }

    /* Check the specified thread's current status.  */
    else if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123d8:	2b01      	cmp	r3, #1
 80123da:	d100      	bne.n	80123de <_tx_thread_terminate+0x46>
 80123dc:	e077      	b.n	80124ce <_tx_thread_terminate+0x136>
    {

        /* Disable preemption.  */
        _tx_thread_preempt_disable++;
 80123de:	4b42      	ldr	r3, [pc, #264]	@ (80124e8 <_tx_thread_terminate+0x150>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	1c5a      	adds	r2, r3, #1
 80123e4:	4b40      	ldr	r3, [pc, #256]	@ (80124e8 <_tx_thread_terminate+0x150>)
 80123e6:	601a      	str	r2, [r3, #0]
        /* Pickup the entry/exit application callback routine.  */
        entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

        /* Check to see if the thread is currently ready.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d11e      	bne.n	801242e <_tx_thread_terminate+0x96>
        {

            /* Set the state to terminated.  */
            thread_ptr -> tx_thread_state =  TX_TERMINATED;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2202      	movs	r2, #2
 80123f4:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Call actual non-interruptable thread suspension routine.  */
            _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
#else

            /* Set the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	2201      	movs	r2, #1
 80123fa:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Setup for no timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2200      	movs	r2, #0
 8012400:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Disable preemption.  */
            _tx_thread_preempt_disable++;
 8012402:	4b39      	ldr	r3, [pc, #228]	@ (80124e8 <_tx_thread_terminate+0x150>)
 8012404:	681b      	ldr	r3, [r3, #0]
 8012406:	1c5a      	adds	r2, r3, #1
 8012408:	4b37      	ldr	r3, [pc, #220]	@ (80124e8 <_tx_thread_terminate+0x150>)
 801240a:	601a      	str	r2, [r3, #0]
 801240c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801240e:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012412:	f383 8810 	msr	PRIMASK, r3
}
 8012416:	46c0      	nop			@ (mov r8, r8)
                (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
            }
#endif

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	0018      	movs	r0, r3
 801241c:	f7ff fe34 	bl	8012088 <_tx_thread_system_suspend>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012420:	f3ef 8310 	mrs	r3, PRIMASK
 8012424:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012426:	b672      	cpsid	i
    return(primask_value);
 8012428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

            /* Disable interrupts.  */
            TX_DISABLE
 801242a:	647b      	str	r3, [r7, #68]	@ 0x44
 801242c:	e02f      	b.n	801248e <_tx_thread_terminate+0xf6>
        }
        else
        {

            /* Change the state to terminated.  */
            thread_ptr -> tx_thread_state =    TX_TERMINATED;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	2202      	movs	r2, #2
 8012432:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Thread state change.  */
            TX_THREAD_STATE_CHANGE(thread_ptr, TX_TERMINATED)

            /* Set the suspending flag.  This prevents the thread from being
               resumed before the cleanup routine is executed.  */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2201      	movs	r2, #1
 8012438:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Pickup the cleanup routine address.  */
            suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801243e:	63fb      	str	r3, [r7, #60]	@ 0x3c

#ifndef TX_NOT_INTERRUPTABLE

            /* Pickup the suspension sequence number that is used later to verify that the
               cleanup is still necessary.  */
            suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	22ac      	movs	r2, #172	@ 0xac
 8012444:	589b      	ldr	r3, [r3, r2]
 8012446:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801244a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801244c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801244e:	f383 8810 	msr	PRIMASK, r3
}
 8012452:	46c0      	nop			@ (mov r8, r8)
            /* Restore interrupts.  */
            TX_RESTORE
#endif

            /* Call any cleanup routines.  */
            if (suspend_cleanup != TX_NULL)
 8012454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012456:	2b00      	cmp	r3, #0
 8012458:	d004      	beq.n	8012464 <_tx_thread_terminate+0xcc>
            {

                /* Yes, there is a function to call.  */
                (suspend_cleanup)(thread_ptr, suspension_sequence);
 801245a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801245c:	687a      	ldr	r2, [r7, #4]
 801245e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012460:	0010      	movs	r0, r2
 8012462:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012464:	f3ef 8310 	mrs	r3, PRIMASK
 8012468:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801246a:	b672      	cpsid	i
    return(primask_value);
 801246c:	69bb      	ldr	r3, [r7, #24]
            }

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 801246e:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

            /* Clear the suspending flag.  */
            thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	639a      	str	r2, [r3, #56]	@ 0x38
 8012476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012478:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801247a:	69fb      	ldr	r3, [r7, #28]
 801247c:	f383 8810 	msr	PRIMASK, r3
}
 8012480:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012482:	f3ef 8310 	mrs	r3, PRIMASK
 8012486:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012488:	b672      	cpsid	i
    return(primask_value);
 801248a:	6a3b      	ldr	r3, [r7, #32]
#endif

#ifndef TX_NOT_INTERRUPTABLE

            /* Disable interrupts.  */
            TX_DISABLE
 801248c:	647b      	str	r3, [r7, #68]	@ 0x44
 801248e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012490:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012492:	697b      	ldr	r3, [r7, #20]
 8012494:	f383 8810 	msr	PRIMASK, r3
}
 8012498:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
#endif

        /* Determine if the application is using mutexes.  */
        if (_tx_thread_mutex_release != TX_NULL)
 801249a:	4b14      	ldr	r3, [pc, #80]	@ (80124ec <_tx_thread_terminate+0x154>)
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d004      	beq.n	80124ac <_tx_thread_terminate+0x114>
        {

            /* Yes, call the mutex release function via a function pointer that
               is setup during initialization.  */
            (_tx_thread_mutex_release)(thread_ptr);
 80124a2:	4b12      	ldr	r3, [pc, #72]	@ (80124ec <_tx_thread_terminate+0x154>)
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	687a      	ldr	r2, [r7, #4]
 80124a8:	0010      	movs	r0, r2
 80124aa:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80124ac:	f3ef 8310 	mrs	r3, PRIMASK
 80124b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80124b2:	b672      	cpsid	i
    return(primask_value);
 80124b4:	68fb      	ldr	r3, [r7, #12]
        }

#ifndef TX_NOT_INTERRUPTABLE

        /* Disable interrupts.  */
        TX_DISABLE
 80124b6:	647b      	str	r3, [r7, #68]	@ 0x44
#endif

        /* Enable preemption.  */
        _tx_thread_preempt_disable--;
 80124b8:	4b0b      	ldr	r3, [pc, #44]	@ (80124e8 <_tx_thread_terminate+0x150>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	1e5a      	subs	r2, r3, #1
 80124be:	4b0a      	ldr	r3, [pc, #40]	@ (80124e8 <_tx_thread_terminate+0x150>)
 80124c0:	601a      	str	r2, [r3, #0]
 80124c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80124c6:	693b      	ldr	r3, [r7, #16]
 80124c8:	f383 8810 	msr	PRIMASK, r3
}
 80124cc:	e005      	b.n	80124da <_tx_thread_terminate+0x142>
 80124ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124d0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	f383 8810 	msr	PRIMASK, r3
}
 80124d8:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        TX_RESTORE
    }

    /* Check for preemption.  */
    _tx_thread_system_preempt_check();
 80124da:	f7ff fc9d 	bl	8011e18 <_tx_thread_system_preempt_check>

    /* Return completion status.  */
    return(status);
 80124de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 80124e0:	0018      	movs	r0, r3
 80124e2:	46bd      	mov	sp, r7
 80124e4:	b012      	add	sp, #72	@ 0x48
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	20011080 	.word	0x20011080
 80124ec:	20011084 	.word	0x20011084

080124f0 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b084      	sub	sp, #16
 80124f4:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80124f6:	4b1f      	ldr	r3, [pc, #124]	@ (8012574 <_tx_thread_time_slice+0x84>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80124fc:	f3ef 8310 	mrs	r3, PRIMASK
 8012500:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012502:	b672      	cpsid	i
    return(primask_value);
 8012504:	687b      	ldr	r3, [r7, #4]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8012506:	60bb      	str	r3, [r7, #8]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8012508:	4b1b      	ldr	r3, [pc, #108]	@ (8012578 <_tx_thread_time_slice+0x88>)
 801250a:	2200      	movs	r2, #0
 801250c:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 801250e:	68fb      	ldr	r3, [r7, #12]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d024      	beq.n	801255e <_tx_thread_time_slice+0x6e>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012518:	2b00      	cmp	r3, #0
 801251a:	d120      	bne.n	801255e <_tx_thread_time_slice+0x6e>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	69da      	ldr	r2, [r3, #28]
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	699a      	ldr	r2, [r3, #24]
 8012528:	4b14      	ldr	r3, [pc, #80]	@ (801257c <_tx_thread_time_slice+0x8c>)
 801252a:	601a      	str	r2, [r3, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	6a1b      	ldr	r3, [r3, #32]
 8012530:	68fa      	ldr	r2, [r7, #12]
 8012532:	429a      	cmp	r2, r3
 8012534:	d013      	beq.n	801255e <_tx_thread_time_slice+0x6e>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801253e:	429a      	cmp	r2, r3
 8012540:	d10d      	bne.n	801255e <_tx_thread_time_slice+0x6e>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	6a19      	ldr	r1, [r3, #32]
 801254a:	4b0d      	ldr	r3, [pc, #52]	@ (8012580 <_tx_thread_time_slice+0x90>)
 801254c:	0092      	lsls	r2, r2, #2
 801254e:	50d1      	str	r1, [r2, r3]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8012550:	4b0c      	ldr	r3, [pc, #48]	@ (8012584 <_tx_thread_time_slice+0x94>)
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	4b0a      	ldr	r3, [pc, #40]	@ (8012580 <_tx_thread_time_slice+0x90>)
 8012556:	0092      	lsls	r2, r2, #2
 8012558:	58d2      	ldr	r2, [r2, r3]
 801255a:	4b0b      	ldr	r3, [pc, #44]	@ (8012588 <_tx_thread_time_slice+0x98>)
 801255c:	601a      	str	r2, [r3, #0]
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	603b      	str	r3, [r7, #0]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012562:	683b      	ldr	r3, [r7, #0]
 8012564:	f383 8810 	msr	PRIMASK, r3
}
 8012568:	46c0      	nop			@ (mov r8, r8)

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 801256a:	46c0      	nop			@ (mov r8, r8)
 801256c:	46bd      	mov	sp, r7
 801256e:	b004      	add	sp, #16
 8012570:	bd80      	pop	{r7, pc}
 8012572:	46c0      	nop			@ (mov r8, r8)
 8012574:	20010fe8 	.word	0x20010fe8
 8012578:	20011090 	.word	0x20011090
 801257c:	200115ec 	.word	0x200115ec
 8012580:	20011000 	.word	0x20011000
 8012584:	20010ffc 	.word	0x20010ffc
 8012588:	20010fec 	.word	0x20010fec

0801258c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b08a      	sub	sp, #40	@ 0x28
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012598:	f3ef 8310 	mrs	r3, PRIMASK
 801259c:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801259e:	b672      	cpsid	i
    return(primask_value);
 80125a0:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts.  */
    TX_DISABLE
 80125a2:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 80125a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125a8:	2b04      	cmp	r3, #4
 80125aa:	d10f      	bne.n	80125cc <_tx_thread_timeout+0x40>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 80125ac:	4b14      	ldr	r3, [pc, #80]	@ (8012600 <_tx_thread_timeout+0x74>)
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	1c5a      	adds	r2, r3, #1
 80125b2:	4b13      	ldr	r3, [pc, #76]	@ (8012600 <_tx_thread_timeout+0x74>)
 80125b4:	601a      	str	r2, [r3, #0]
 80125b6:	6a3b      	ldr	r3, [r7, #32]
 80125b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80125ba:	693b      	ldr	r3, [r7, #16]
 80125bc:	f383 8810 	msr	PRIMASK, r3
}
 80125c0:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 80125c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125c4:	0018      	movs	r0, r3
 80125c6:	f7ff fc5f 	bl	8011e88 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 80125ca:	e014      	b.n	80125f6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 80125cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80125d0:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 80125d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80125d4:	22ac      	movs	r2, #172	@ 0xac
 80125d6:	589b      	ldr	r3, [r3, r2]
 80125d8:	61bb      	str	r3, [r7, #24]
 80125da:	6a3b      	ldr	r3, [r7, #32]
 80125dc:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	f383 8810 	msr	PRIMASK, r3
}
 80125e4:	46c0      	nop			@ (mov r8, r8)
        if (suspend_cleanup != TX_NULL)
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d004      	beq.n	80125f6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 80125ec:	69b9      	ldr	r1, [r7, #24]
 80125ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	0010      	movs	r0, r2
 80125f4:	4798      	blx	r3
}
 80125f6:	46c0      	nop			@ (mov r8, r8)
 80125f8:	46bd      	mov	sp, r7
 80125fa:	b00a      	add	sp, #40	@ 0x28
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	46c0      	nop			@ (mov r8, r8)
 8012600:	20011080 	.word	0x20011080

08012604 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8012604:	b580      	push	{r7, lr}
 8012606:	b084      	sub	sp, #16
 8012608:	af00      	add	r7, sp, #0
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801260a:	f3ef 8310 	mrs	r3, PRIMASK
 801260e:	607b      	str	r3, [r7, #4]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012610:	b672      	cpsid	i
    return(primask_value);
 8012612:	687b      	ldr	r3, [r7, #4]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8012614:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8012616:	4b09      	ldr	r3, [pc, #36]	@ (801263c <_tx_timer_expiration_process+0x38>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	1c5a      	adds	r2, r3, #1
 801261c:	4b07      	ldr	r3, [pc, #28]	@ (801263c <_tx_timer_expiration_process+0x38>)
 801261e:	601a      	str	r2, [r3, #0]
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	f383 8810 	msr	PRIMASK, r3
}
 801262a:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 801262c:	4b04      	ldr	r3, [pc, #16]	@ (8012640 <_tx_timer_expiration_process+0x3c>)
 801262e:	0018      	movs	r0, r3
 8012630:	f7ff fc2a 	bl	8011e88 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8012634:	46c0      	nop			@ (mov r8, r8)
 8012636:	46bd      	mov	sp, r7
 8012638:	b004      	add	sp, #16
 801263a:	bd80      	pop	{r7, pc}
 801263c:	20011080 	.word	0x20011080
 8012640:	20011130 	.word	0x20011130

08012644 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8012644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012646:	46ce      	mov	lr, r9
 8012648:	4647      	mov	r7, r8
 801264a:	b580      	push	{r7, lr}
 801264c:	b08d      	sub	sp, #52	@ 0x34
 801264e:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8012650:	4b39      	ldr	r3, [pc, #228]	@ (8012738 <_tx_timer_initialize+0xf4>)
 8012652:	2200      	movs	r2, #0
 8012654:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8012656:	4b39      	ldr	r3, [pc, #228]	@ (801273c <_tx_timer_initialize+0xf8>)
 8012658:	2200      	movs	r2, #0
 801265a:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 801265c:	4b38      	ldr	r3, [pc, #224]	@ (8012740 <_tx_timer_initialize+0xfc>)
 801265e:	2200      	movs	r2, #0
 8012660:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8012662:	4b38      	ldr	r3, [pc, #224]	@ (8012744 <_tx_timer_initialize+0x100>)
 8012664:	2200      	movs	r2, #0
 8012666:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8012668:	4b37      	ldr	r3, [pc, #220]	@ (8012748 <_tx_timer_initialize+0x104>)
 801266a:	2200      	movs	r2, #0
 801266c:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 801266e:	4b37      	ldr	r3, [pc, #220]	@ (801274c <_tx_timer_initialize+0x108>)
 8012670:	617b      	str	r3, [r7, #20]
 8012672:	230f      	movs	r3, #15
 8012674:	18fb      	adds	r3, r7, r3
 8012676:	2200      	movs	r2, #0
 8012678:	701a      	strb	r2, [r3, #0]
 801267a:	2380      	movs	r3, #128	@ 0x80
 801267c:	60bb      	str	r3, [r7, #8]
 801267e:	2300      	movs	r3, #0
 8012680:	613b      	str	r3, [r7, #16]
 8012682:	e009      	b.n	8012698 <_tx_timer_initialize+0x54>
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	1c5a      	adds	r2, r3, #1
 8012688:	617a      	str	r2, [r7, #20]
 801268a:	220f      	movs	r2, #15
 801268c:	18ba      	adds	r2, r7, r2
 801268e:	7812      	ldrb	r2, [r2, #0]
 8012690:	701a      	strb	r2, [r3, #0]
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	3301      	adds	r3, #1
 8012696:	613b      	str	r3, [r7, #16]
 8012698:	693a      	ldr	r2, [r7, #16]
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	429a      	cmp	r2, r3
 801269e:	d3f1      	bcc.n	8012684 <_tx_timer_initialize+0x40>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 80126a0:	4b2b      	ldr	r3, [pc, #172]	@ (8012750 <_tx_timer_initialize+0x10c>)
 80126a2:	4a2a      	ldr	r2, [pc, #168]	@ (801274c <_tx_timer_initialize+0x108>)
 80126a4:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 80126a6:	4b2b      	ldr	r3, [pc, #172]	@ (8012754 <_tx_timer_initialize+0x110>)
 80126a8:	4a28      	ldr	r2, [pc, #160]	@ (801274c <_tx_timer_initialize+0x108>)
 80126aa:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 80126ac:	4b2a      	ldr	r3, [pc, #168]	@ (8012758 <_tx_timer_initialize+0x114>)
 80126ae:	4a2b      	ldr	r2, [pc, #172]	@ (801275c <_tx_timer_initialize+0x118>)
 80126b0:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 80126b2:	4b29      	ldr	r3, [pc, #164]	@ (8012758 <_tx_timer_initialize+0x114>)
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	1d1a      	adds	r2, r3, #4
 80126b8:	4b27      	ldr	r3, [pc, #156]	@ (8012758 <_tx_timer_initialize+0x114>)
 80126ba:	601a      	str	r2, [r3, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 80126bc:	4b28      	ldr	r3, [pc, #160]	@ (8012760 <_tx_timer_initialize+0x11c>)
 80126be:	4a29      	ldr	r2, [pc, #164]	@ (8012764 <_tx_timer_initialize+0x120>)
 80126c0:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 80126c2:	4b29      	ldr	r3, [pc, #164]	@ (8012768 <_tx_timer_initialize+0x124>)
 80126c4:	2280      	movs	r2, #128	@ 0x80
 80126c6:	00d2      	lsls	r2, r2, #3
 80126c8:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 80126ca:	4b28      	ldr	r3, [pc, #160]	@ (801276c <_tx_timer_initialize+0x128>)
 80126cc:	2200      	movs	r2, #0
 80126ce:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 80126d0:	4b23      	ldr	r3, [pc, #140]	@ (8012760 <_tx_timer_initialize+0x11c>)
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	4b24      	ldr	r3, [pc, #144]	@ (8012768 <_tx_timer_initialize+0x124>)
 80126d6:	6819      	ldr	r1, [r3, #0]
 80126d8:	4b24      	ldr	r3, [pc, #144]	@ (801276c <_tx_timer_initialize+0x128>)
 80126da:	6818      	ldr	r0, [r3, #0]
 80126dc:	4b23      	ldr	r3, [pc, #140]	@ (801276c <_tx_timer_initialize+0x128>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	4699      	mov	r9, r3
 80126e2:	4c23      	ldr	r4, [pc, #140]	@ (8012770 <_tx_timer_initialize+0x12c>)
 80126e4:	46a0      	mov	r8, r4
 80126e6:	4e23      	ldr	r6, [pc, #140]	@ (8012774 <_tx_timer_initialize+0x130>)
 80126e8:	4d23      	ldr	r5, [pc, #140]	@ (8012778 <_tx_timer_initialize+0x134>)
 80126ea:	4c24      	ldr	r4, [pc, #144]	@ (801277c <_tx_timer_initialize+0x138>)
 80126ec:	2300      	movs	r3, #0
 80126ee:	469c      	mov	ip, r3
 80126f0:	4663      	mov	r3, ip
 80126f2:	9305      	str	r3, [sp, #20]
 80126f4:	2300      	movs	r3, #0
 80126f6:	469c      	mov	ip, r3
 80126f8:	4663      	mov	r3, ip
 80126fa:	9304      	str	r3, [sp, #16]
 80126fc:	464b      	mov	r3, r9
 80126fe:	9303      	str	r3, [sp, #12]
 8012700:	9002      	str	r0, [sp, #8]
 8012702:	9101      	str	r1, [sp, #4]
 8012704:	9200      	str	r2, [sp, #0]
 8012706:	4643      	mov	r3, r8
 8012708:	0032      	movs	r2, r6
 801270a:	0029      	movs	r1, r5
 801270c:	0020      	movs	r0, r4
 801270e:	f7fe ff4b 	bl	80115a8 <_tx_thread_create>
 8012712:	0003      	movs	r3, r0
 8012714:	607b      	str	r3, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2b00      	cmp	r3, #0
 801271a:	d1d9      	bne.n	80126d0 <_tx_timer_initialize+0x8c>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 801271c:	4b18      	ldr	r3, [pc, #96]	@ (8012780 <_tx_timer_initialize+0x13c>)
 801271e:	2200      	movs	r2, #0
 8012720:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8012722:	4b18      	ldr	r3, [pc, #96]	@ (8012784 <_tx_timer_initialize+0x140>)
 8012724:	2200      	movs	r2, #0
 8012726:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8012728:	46c0      	nop			@ (mov r8, r8)
 801272a:	46bd      	mov	sp, r7
 801272c:	b007      	add	sp, #28
 801272e:	bcc0      	pop	{r6, r7}
 8012730:	46b9      	mov	r9, r7
 8012732:	46b0      	mov	r8, r6
 8012734:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012736:	46c0      	nop			@ (mov r8, r8)
 8012738:	2001108c 	.word	0x2001108c
 801273c:	200115ec 	.word	0x200115ec
 8012740:	20011090 	.word	0x20011090
 8012744:	20011120 	.word	0x20011120
 8012748:	2001112c 	.word	0x2001112c
 801274c:	20011094 	.word	0x20011094
 8012750:	20011114 	.word	0x20011114
 8012754:	2001111c 	.word	0x2001111c
 8012758:	20011118 	.word	0x20011118
 801275c:	20011110 	.word	0x20011110
 8012760:	200111e0 	.word	0x200111e0
 8012764:	200111ec 	.word	0x200111ec
 8012768:	200111e4 	.word	0x200111e4
 801276c:	200111e8 	.word	0x200111e8
 8012770:	4154494d 	.word	0x4154494d
 8012774:	080128b1 	.word	0x080128b1
 8012778:	0801e2f4 	.word	0x0801e2f4
 801277c:	20011130 	.word	0x20011130
 8012780:	20011124 	.word	0x20011124
 8012784:	20011128 	.word	0x20011128

08012788 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b088      	sub	sp, #32
 801278c:	af00      	add	r7, sp, #0
 801278e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d049      	beq.n	8012830 <_tx_timer_system_activate+0xa8>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	3301      	adds	r3, #1
 80127a0:	d046      	beq.n	8012830 <_tx_timer_system_activate+0xa8>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	699b      	ldr	r3, [r3, #24]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d142      	bne.n	8012830 <_tx_timer_system_activate+0xa8>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80127aa:	697b      	ldr	r3, [r7, #20]
 80127ac:	2b20      	cmp	r3, #32
 80127ae:	d902      	bls.n	80127b6 <_tx_timer_system_activate+0x2e>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 80127b0:	231f      	movs	r3, #31
 80127b2:	61bb      	str	r3, [r7, #24]
 80127b4:	e002      	b.n	80127bc <_tx_timer_system_activate+0x34>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 80127b6:	697b      	ldr	r3, [r7, #20]
 80127b8:	3b01      	subs	r3, #1
 80127ba:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 80127bc:	4b1e      	ldr	r3, [pc, #120]	@ (8012838 <_tx_timer_system_activate+0xb0>)
 80127be:	681a      	ldr	r2, [r3, #0]
 80127c0:	69bb      	ldr	r3, [r7, #24]
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	18d3      	adds	r3, r2, r3
 80127c6:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 80127c8:	4b1c      	ldr	r3, [pc, #112]	@ (801283c <_tx_timer_system_activate+0xb4>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	69fa      	ldr	r2, [r7, #28]
 80127ce:	429a      	cmp	r2, r3
 80127d0:	d30b      	bcc.n	80127ea <_tx_timer_system_activate+0x62>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 80127d2:	4b1a      	ldr	r3, [pc, #104]	@ (801283c <_tx_timer_system_activate+0xb4>)
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	69fa      	ldr	r2, [r7, #28]
 80127d8:	1ad3      	subs	r3, r2, r3
 80127da:	109b      	asrs	r3, r3, #2
 80127dc:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 80127de:	4b18      	ldr	r3, [pc, #96]	@ (8012840 <_tx_timer_system_activate+0xb8>)
 80127e0:	681a      	ldr	r2, [r3, #0]
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	009b      	lsls	r3, r3, #2
 80127e6:	18d3      	adds	r3, r2, r3
 80127e8:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d109      	bne.n	8012806 <_tx_timer_system_activate+0x7e>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	687a      	ldr	r2, [r7, #4]
 80127fc:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	687a      	ldr	r2, [r7, #4]
 8012802:	601a      	str	r2, [r3, #0]
 8012804:	e011      	b.n	801282a <_tx_timer_system_activate+0xa2>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8012806:	69fb      	ldr	r3, [r7, #28]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	695b      	ldr	r3, [r3, #20]
 8012810:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	687a      	ldr	r2, [r7, #4]
 801281c:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	68ba      	ldr	r2, [r7, #8]
 8012828:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	69fa      	ldr	r2, [r7, #28]
 801282e:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8012830:	46c0      	nop			@ (mov r8, r8)
 8012832:	46bd      	mov	sp, r7
 8012834:	b008      	add	sp, #32
 8012836:	bd80      	pop	{r7, pc}
 8012838:	2001111c 	.word	0x2001111c
 801283c:	20011118 	.word	0x20011118
 8012840:	20011114 	.word	0x20011114

08012844 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8012844:	b580      	push	{r7, lr}
 8012846:	b086      	sub	sp, #24
 8012848:	af00      	add	r7, sp, #0
 801284a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	699b      	ldr	r3, [r3, #24]
 8012850:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d026      	beq.n	80128a6 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	691b      	ldr	r3, [r3, #16]
 801285c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 801285e:	687a      	ldr	r2, [r7, #4]
 8012860:	693b      	ldr	r3, [r7, #16]
 8012862:	429a      	cmp	r2, r3
 8012864:	d108      	bne.n	8012878 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8012866:	697b      	ldr	r3, [r7, #20]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	687a      	ldr	r2, [r7, #4]
 801286c:	429a      	cmp	r2, r3
 801286e:	d117      	bne.n	80128a0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8012870:	697b      	ldr	r3, [r7, #20]
 8012872:	2200      	movs	r2, #0
 8012874:	601a      	str	r2, [r3, #0]
 8012876:	e013      	b.n	80128a0 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	695b      	ldr	r3, [r3, #20]
 801287c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	68fa      	ldr	r2, [r7, #12]
 8012882:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	693a      	ldr	r2, [r7, #16]
 8012888:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	687a      	ldr	r2, [r7, #4]
 8012890:	429a      	cmp	r2, r3
 8012892:	d105      	bne.n	80128a0 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8012894:	693b      	ldr	r3, [r7, #16]
 8012896:	697a      	ldr	r2, [r7, #20]
 8012898:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 801289a:	697b      	ldr	r3, [r7, #20]
 801289c:	693a      	ldr	r2, [r7, #16]
 801289e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	619a      	str	r2, [r3, #24]
    }
}
 80128a6:	46c0      	nop			@ (mov r8, r8)
 80128a8:	46bd      	mov	sp, r7
 80128aa:	b006      	add	sp, #24
 80128ac:	bd80      	pop	{r7, pc}
	...

080128b0 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 80128b0:	b580      	push	{r7, lr}
 80128b2:	b094      	sub	sp, #80	@ 0x50
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 80128b8:	2300      	movs	r3, #0
 80128ba:	647b      	str	r3, [r7, #68]	@ 0x44
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	4a70      	ldr	r2, [pc, #448]	@ (8012a80 <_tx_timer_thread_entry+0x1d0>)
 80128c0:	4293      	cmp	r3, r2
 80128c2:	d000      	beq.n	80128c6 <_tx_timer_thread_entry+0x16>
 80128c4:	e0d8      	b.n	8012a78 <_tx_timer_thread_entry+0x1c8>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80128c6:	f3ef 8310 	mrs	r3, PRIMASK
 80128ca:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile (" CPSID i" : : : "memory" );
 80128cc:	b672      	cpsid	i
    return(primask_value);
 80128ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 80128d0:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 80128d2:	4b6c      	ldr	r3, [pc, #432]	@ (8012a84 <_tx_timer_thread_entry+0x1d4>)
 80128d4:	681b      	ldr	r3, [r3, #0]
 80128d6:	681b      	ldr	r3, [r3, #0]
 80128d8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d003      	beq.n	80128e8 <_tx_timer_thread_entry+0x38>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	220c      	movs	r2, #12
 80128e4:	18ba      	adds	r2, r7, r2
 80128e6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 80128e8:	4b66      	ldr	r3, [pc, #408]	@ (8012a84 <_tx_timer_thread_entry+0x1d4>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2200      	movs	r2, #0
 80128ee:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 80128f0:	4b64      	ldr	r3, [pc, #400]	@ (8012a84 <_tx_timer_thread_entry+0x1d4>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	1d1a      	adds	r2, r3, #4
 80128f6:	4b63      	ldr	r3, [pc, #396]	@ (8012a84 <_tx_timer_thread_entry+0x1d4>)
 80128f8:	601a      	str	r2, [r3, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 80128fa:	4b62      	ldr	r3, [pc, #392]	@ (8012a84 <_tx_timer_thread_entry+0x1d4>)
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	4b62      	ldr	r3, [pc, #392]	@ (8012a88 <_tx_timer_thread_entry+0x1d8>)
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	429a      	cmp	r2, r3
 8012904:	d103      	bne.n	801290e <_tx_timer_thread_entry+0x5e>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8012906:	4b61      	ldr	r3, [pc, #388]	@ (8012a8c <_tx_timer_thread_entry+0x1dc>)
 8012908:	681a      	ldr	r2, [r3, #0]
 801290a:	4b5e      	ldr	r3, [pc, #376]	@ (8012a84 <_tx_timer_thread_entry+0x1d4>)
 801290c:	601a      	str	r2, [r3, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 801290e:	4b60      	ldr	r3, [pc, #384]	@ (8012a90 <_tx_timer_thread_entry+0x1e0>)
 8012910:	2200      	movs	r2, #0
 8012912:	601a      	str	r2, [r3, #0]
 8012914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012916:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801291a:	f383 8810 	msr	PRIMASK, r3
}
 801291e:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012920:	f3ef 8310 	mrs	r3, PRIMASK
 8012924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012926:	b672      	cpsid	i
    return(primask_value);
 8012928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 801292a:	64fb      	str	r3, [r7, #76]	@ 0x4c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 801292c:	e07d      	b.n	8012a2a <_tx_timer_thread_entry+0x17a>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	691b      	ldr	r3, [r3, #16]
 8012936:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8012938:	2300      	movs	r3, #0
 801293a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 801293c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801293e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012940:	429a      	cmp	r2, r3
 8012942:	d102      	bne.n	801294a <_tx_timer_thread_entry+0x9a>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8012944:	2300      	movs	r3, #0
 8012946:	60fb      	str	r3, [r7, #12]
 8012948:	e00e      	b.n	8012968 <_tx_timer_thread_entry+0xb8>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 801294a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801294c:	695b      	ldr	r3, [r3, #20]
 801294e:	637b      	str	r3, [r7, #52]	@ 0x34
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8012950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012952:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012954:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8012956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012958:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801295a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 801295c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801295e:	220c      	movs	r2, #12
 8012960:	18ba      	adds	r2, r7, r2
 8012962:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8012964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012966:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8012968:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	2b20      	cmp	r3, #32
 801296e:	d911      	bls.n	8012994 <_tx_timer_thread_entry+0xe4>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8012970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012972:	681b      	ldr	r3, [r3, #0]
 8012974:	3b20      	subs	r3, #32
 8012976:	001a      	movs	r2, r3
                    current_timer -> tx_timer_internal_remaining_ticks =
 8012978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801297a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 801297c:	2300      	movs	r3, #0
 801297e:	64bb      	str	r3, [r7, #72]	@ 0x48

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8012980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012982:	2208      	movs	r2, #8
 8012984:	18ba      	adds	r2, r7, r2
 8012986:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 8012988:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801298a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801298c:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 801298e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012990:	60bb      	str	r3, [r7, #8]
 8012992:	e01a      	b.n	80129ca <_tx_timer_thread_entry+0x11a>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 8012994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012996:	689b      	ldr	r3, [r3, #8]
 8012998:	64bb      	str	r3, [r7, #72]	@ 0x48
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 801299a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801299c:	68db      	ldr	r3, [r3, #12]
 801299e:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80129a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129a2:	685a      	ldr	r2, [r3, #4]
 80129a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129a6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80129a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d009      	beq.n	80129c4 <_tx_timer_thread_entry+0x114>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80129b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129b2:	2208      	movs	r2, #8
 80129b4:	18ba      	adds	r2, r7, r2
 80129b6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80129b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80129bc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80129be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129c0:	60bb      	str	r3, [r7, #8]
 80129c2:	e002      	b.n	80129ca <_tx_timer_thread_entry+0x11a>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80129c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80129c6:	2200      	movs	r2, #0
 80129c8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80129ca:	4b32      	ldr	r3, [pc, #200]	@ (8012a94 <_tx_timer_thread_entry+0x1e4>)
 80129cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80129ce:	601a      	str	r2, [r3, #0]
 80129d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80129d2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80129d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129d6:	f383 8810 	msr	PRIMASK, r3
}
 80129da:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80129dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d003      	beq.n	80129ea <_tx_timer_thread_entry+0x13a>
                {

                    (timeout_function) (timeout_param);
 80129e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80129e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80129e6:	0010      	movs	r0, r2
 80129e8:	4798      	blx	r3
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80129ea:	f3ef 8310 	mrs	r3, PRIMASK
 80129ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80129f0:	b672      	cpsid	i
    return(primask_value);
 80129f2:	6a3b      	ldr	r3, [r7, #32]
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 80129f4:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 80129f6:	4b27      	ldr	r3, [pc, #156]	@ (8012a94 <_tx_timer_thread_entry+0x1e4>)
 80129f8:	2200      	movs	r2, #0
 80129fa:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d106      	bne.n	8012a12 <_tx_timer_thread_entry+0x162>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8012a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a06:	2200      	movs	r2, #0
 8012a08:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8012a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012a0c:	0018      	movs	r0, r3
 8012a0e:	f7ff febb 	bl	8012788 <_tx_timer_system_activate>
 8012a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a14:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a16:	69bb      	ldr	r3, [r7, #24]
 8012a18:	f383 8810 	msr	PRIMASK, r3
}
 8012a1c:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012a1e:	f3ef 8310 	mrs	r3, PRIMASK
 8012a22:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012a24:	b672      	cpsid	i
    return(primask_value);
 8012a26:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8012a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (expired_timers != TX_NULL)
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d000      	beq.n	8012a32 <_tx_timer_thread_entry+0x182>
 8012a30:	e77d      	b.n	801292e <_tx_timer_thread_entry+0x7e>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8012a32:	4b17      	ldr	r3, [pc, #92]	@ (8012a90 <_tx_timer_thread_entry+0x1e0>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d117      	bne.n	8012a6a <_tx_timer_thread_entry+0x1ba>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 8012a3a:	4b17      	ldr	r3, [pc, #92]	@ (8012a98 <_tx_timer_thread_entry+0x1e8>)
 8012a3c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8012a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a40:	2203      	movs	r2, #3
 8012a42:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8012a44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a46:	2201      	movs	r2, #1
 8012a48:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 8012a4a:	4b14      	ldr	r3, [pc, #80]	@ (8012a9c <_tx_timer_thread_entry+0x1ec>)
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	1c5a      	adds	r2, r3, #1
 8012a50:	4b12      	ldr	r3, [pc, #72]	@ (8012a9c <_tx_timer_thread_entry+0x1ec>)
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a56:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	f383 8810 	msr	PRIMASK, r3
}
 8012a5e:	46c0      	nop			@ (mov r8, r8)

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8012a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012a62:	0018      	movs	r0, r3
 8012a64:	f7ff fb10 	bl	8012088 <_tx_thread_system_suspend>
 8012a68:	e72d      	b.n	80128c6 <_tx_timer_thread_entry+0x16>
 8012a6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012a6c:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012a6e:	693b      	ldr	r3, [r7, #16]
 8012a70:	f383 8810 	msr	PRIMASK, r3
}
 8012a74:	46c0      	nop			@ (mov r8, r8)
            TX_DISABLE
 8012a76:	e726      	b.n	80128c6 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 8012a78:	46c0      	nop			@ (mov r8, r8)
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	b014      	add	sp, #80	@ 0x50
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	4154494d 	.word	0x4154494d
 8012a84:	2001111c 	.word	0x2001111c
 8012a88:	20011118 	.word	0x20011118
 8012a8c:	20011114 	.word	0x20011114
 8012a90:	20011120 	.word	0x20011120
 8012a94:	2001112c 	.word	0x2001112c
 8012a98:	20011130 	.word	0x20011130
 8012a9c:	20011080 	.word	0x20011080

08012aa0 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b08a      	sub	sp, #40	@ 0x28
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	60f8      	str	r0, [r7, #12]
 8012aa8:	60b9      	str	r1, [r7, #8]
 8012aaa:	607a      	str	r2, [r7, #4]
 8012aac:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d102      	bne.n	8012abe <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ab8:	2302      	movs	r3, #2
 8012aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8012abc:	e028      	b.n	8012b10 <_txe_byte_allocate+0x70>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8012b78 <_txe_byte_allocate+0xd8>)
 8012ac4:	4293      	cmp	r3, r2
 8012ac6:	d002      	beq.n	8012ace <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ac8:	2302      	movs	r3, #2
 8012aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8012acc:	e020      	b.n	8012b10 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d102      	bne.n	8012ada <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8012ad4:	2303      	movs	r3, #3
 8012ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ad8:	e01a      	b.n	8012b10 <_txe_byte_allocate+0x70>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d102      	bne.n	8012ae6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8012ae0:	2305      	movs	r3, #5
 8012ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ae4:	e014      	b.n	8012b10 <_txe_byte_allocate+0x70>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	69db      	ldr	r3, [r3, #28]
 8012aea:	687a      	ldr	r2, [r7, #4]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d902      	bls.n	8012af6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 8012af0:	2305      	movs	r3, #5
 8012af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8012af4:	e00c      	b.n	8012b10 <_txe_byte_allocate+0x70>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d009      	beq.n	8012b10 <_txe_byte_allocate+0x70>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012afc:	f3ef 8305 	mrs	r3, IPSR
 8012b00:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8012b02:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012b04:	4b1d      	ldr	r3, [pc, #116]	@ (8012b7c <_txe_byte_allocate+0xdc>)
 8012b06:	681b      	ldr	r3, [r3, #0]
 8012b08:	4313      	orrs	r3, r2
 8012b0a:	d001      	beq.n	8012b10 <_txe_byte_allocate+0x70>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012b0c:	2304      	movs	r3, #4
 8012b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 8012b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d108      	bne.n	8012b28 <_txe_byte_allocate+0x88>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012b16:	4b1a      	ldr	r3, [pc, #104]	@ (8012b80 <_txe_byte_allocate+0xe0>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8012b1c:	6a3a      	ldr	r2, [r7, #32]
 8012b1e:	4b19      	ldr	r3, [pc, #100]	@ (8012b84 <_txe_byte_allocate+0xe4>)
 8012b20:	429a      	cmp	r2, r3
 8012b22:	d101      	bne.n	8012b28 <_txe_byte_allocate+0x88>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8012b24:	2313      	movs	r3, #19
 8012b26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8012b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d113      	bne.n	8012b56 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b2e:	f3ef 8305 	mrs	r3, IPSR
 8012b32:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012b34:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012b36:	4b11      	ldr	r3, [pc, #68]	@ (8012b7c <_txe_byte_allocate+0xdc>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	4313      	orrs	r3, r2
 8012b3c:	d00b      	beq.n	8012b56 <_txe_byte_allocate+0xb6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012b3e:	f3ef 8305 	mrs	r3, IPSR
 8012b42:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012b44:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012b46:	4b0d      	ldr	r3, [pc, #52]	@ (8012b7c <_txe_byte_allocate+0xdc>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	4313      	orrs	r3, r2
 8012b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8012b88 <_txe_byte_allocate+0xe8>)
 8012b4e:	4293      	cmp	r3, r2
 8012b50:	d801      	bhi.n	8012b56 <_txe_byte_allocate+0xb6>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012b52:	2313      	movs	r3, #19
 8012b54:	627b      	str	r3, [r7, #36]	@ 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d107      	bne.n	8012b6c <_txe_byte_allocate+0xcc>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	687a      	ldr	r2, [r7, #4]
 8012b60:	68b9      	ldr	r1, [r7, #8]
 8012b62:	68f8      	ldr	r0, [r7, #12]
 8012b64:	f7fc fbe6 	bl	800f334 <_tx_byte_allocate>
 8012b68:	0003      	movs	r3, r0
 8012b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Return completion status.  */
    return(status);
 8012b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012b6e:	0018      	movs	r0, r3
 8012b70:	46bd      	mov	sp, r7
 8012b72:	b00a      	add	sp, #40	@ 0x28
 8012b74:	bd80      	pop	{r7, pc}
 8012b76:	46c0      	nop			@ (mov r8, r8)
 8012b78:	42595445 	.word	0x42595445
 8012b7c:	20000010 	.word	0x20000010
 8012b80:	20010fe8 	.word	0x20010fe8
 8012b84:	20011130 	.word	0x20011130
 8012b88:	f0f0f0ef 	.word	0xf0f0f0ef

08012b8c <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8012b8c:	b580      	push	{r7, lr}
 8012b8e:	b090      	sub	sp, #64	@ 0x40
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	60f8      	str	r0, [r7, #12]
 8012b94:	60b9      	str	r1, [r7, #8]
 8012b96:	607a      	str	r2, [r7, #4]
 8012b98:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012b9a:	2300      	movs	r3, #0
 8012b9c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d102      	bne.n	8012baa <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012ba4:	2302      	movs	r3, #2
 8012ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ba8:	e070      	b.n	8012c8c <_txe_byte_pool_create+0x100>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8012baa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8012bac:	2b34      	cmp	r3, #52	@ 0x34
 8012bae:	d002      	beq.n	8012bb6 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8012bb0:	2302      	movs	r3, #2
 8012bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012bb4:	e06a      	b.n	8012c8c <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8012bba:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012bbc:	b672      	cpsid	i
    return(primask_value);
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012bc0:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012bc2:	4b3a      	ldr	r3, [pc, #232]	@ (8012cac <_txe_byte_pool_create+0x120>)
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	1c5a      	adds	r2, r3, #1
 8012bc8:	4b38      	ldr	r3, [pc, #224]	@ (8012cac <_txe_byte_pool_create+0x120>)
 8012bca:	601a      	str	r2, [r3, #0]
 8012bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012bce:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012bd2:	f383 8810 	msr	PRIMASK, r3
}
 8012bd6:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8012bd8:	4b35      	ldr	r3, [pc, #212]	@ (8012cb0 <_txe_byte_pool_create+0x124>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8012bde:	2300      	movs	r3, #0
 8012be0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012be2:	e009      	b.n	8012bf8 <_txe_byte_pool_create+0x6c>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8012be4:	68fa      	ldr	r2, [r7, #12]
 8012be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d00b      	beq.n	8012c04 <_txe_byte_pool_create+0x78>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8012bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012bf0:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8012bf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8012cb4 <_txe_byte_pool_create+0x128>)
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d3f0      	bcc.n	8012be4 <_txe_byte_pool_create+0x58>
 8012c02:	e000      	b.n	8012c06 <_txe_byte_pool_create+0x7a>
                break;
 8012c04:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012c06:	f3ef 8310 	mrs	r3, PRIMASK
 8012c0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012c0c:	b672      	cpsid	i
    return(primask_value);
 8012c0e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012c10:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012c12:	4b26      	ldr	r3, [pc, #152]	@ (8012cac <_txe_byte_pool_create+0x120>)
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	1e5a      	subs	r2, r3, #1
 8012c18:	4b24      	ldr	r3, [pc, #144]	@ (8012cac <_txe_byte_pool_create+0x120>)
 8012c1a:	601a      	str	r2, [r3, #0]
 8012c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c1e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012c20:	6a3b      	ldr	r3, [r7, #32]
 8012c22:	f383 8810 	msr	PRIMASK, r3
}
 8012c26:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012c28:	f7ff f8f6 	bl	8011e18 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 8012c2c:	68fa      	ldr	r2, [r7, #12]
 8012c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d102      	bne.n	8012c3a <_txe_byte_pool_create+0xae>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8012c34:	2302      	movs	r3, #2
 8012c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012c38:	e028      	b.n	8012c8c <_txe_byte_pool_create+0x100>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d102      	bne.n	8012c46 <_txe_byte_pool_create+0xba>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8012c40:	2303      	movs	r3, #3
 8012c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012c44:	e022      	b.n	8012c8c <_txe_byte_pool_create+0x100>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	2b63      	cmp	r3, #99	@ 0x63
 8012c4a:	d802      	bhi.n	8012c52 <_txe_byte_pool_create+0xc6>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 8012c4c:	2305      	movs	r3, #5
 8012c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012c50:	e01c      	b.n	8012c8c <_txe_byte_pool_create+0x100>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012c52:	4b19      	ldr	r3, [pc, #100]	@ (8012cb8 <_txe_byte_pool_create+0x12c>)
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012c58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012c5a:	4b18      	ldr	r3, [pc, #96]	@ (8012cbc <_txe_byte_pool_create+0x130>)
 8012c5c:	429a      	cmp	r2, r3
 8012c5e:	d101      	bne.n	8012c64 <_txe_byte_pool_create+0xd8>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012c60:	2313      	movs	r3, #19
 8012c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c64:	f3ef 8305 	mrs	r3, IPSR
 8012c68:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012c6a:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012c6c:	4b14      	ldr	r3, [pc, #80]	@ (8012cc0 <_txe_byte_pool_create+0x134>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	4313      	orrs	r3, r2
 8012c72:	d00b      	beq.n	8012c8c <_txe_byte_pool_create+0x100>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012c74:	f3ef 8305 	mrs	r3, IPSR
 8012c78:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012c7a:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012c7c:	4b10      	ldr	r3, [pc, #64]	@ (8012cc0 <_txe_byte_pool_create+0x134>)
 8012c7e:	681b      	ldr	r3, [r3, #0]
 8012c80:	4313      	orrs	r3, r2
 8012c82:	4a10      	ldr	r2, [pc, #64]	@ (8012cc4 <_txe_byte_pool_create+0x138>)
 8012c84:	4293      	cmp	r3, r2
 8012c86:	d801      	bhi.n	8012c8c <_txe_byte_pool_create+0x100>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012c88:	2313      	movs	r3, #19
 8012c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d107      	bne.n	8012ca2 <_txe_byte_pool_create+0x116>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8012c92:	683b      	ldr	r3, [r7, #0]
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	68b9      	ldr	r1, [r7, #8]
 8012c98:	68f8      	ldr	r0, [r7, #12]
 8012c9a:	f7fc fc89 	bl	800f5b0 <_tx_byte_pool_create>
 8012c9e:	0003      	movs	r3, r0
 8012ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8012ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012ca4:	0018      	movs	r0, r3
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	b010      	add	sp, #64	@ 0x40
 8012caa:	bd80      	pop	{r7, pc}
 8012cac:	20011080 	.word	0x20011080
 8012cb0:	20010fd8 	.word	0x20010fd8
 8012cb4:	20010fdc 	.word	0x20010fdc
 8012cb8:	20010fe8 	.word	0x20010fe8
 8012cbc:	20011130 	.word	0x20011130
 8012cc0:	20000010 	.word	0x20000010
 8012cc4:	f0f0f0ef 	.word	0xf0f0f0ef

08012cc8 <_txe_event_flags_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_create(TX_EVENT_FLAGS_GROUP *group_ptr, CHAR *name_ptr, UINT event_control_block_size)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b090      	sub	sp, #64	@ 0x40
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	60f8      	str	r0, [r7, #12]
 8012cd0:	60b9      	str	r1, [r7, #8]
 8012cd2:	607a      	str	r2, [r7, #4]
TX_THREAD                   *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid event flags group pointer.  */
    if (group_ptr == TX_NULL)
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d102      	bne.n	8012ce4 <_txe_event_flags_create+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012cde:	2306      	movs	r3, #6
 8012ce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012ce2:	e064      	b.n	8012dae <_txe_event_flags_create+0xe6>
    }

    /* Now check for proper control block size.  */
    else if (event_control_block_size != (sizeof(TX_EVENT_FLAGS_GROUP)))
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	2b24      	cmp	r3, #36	@ 0x24
 8012ce8:	d002      	beq.n	8012cf0 <_txe_event_flags_create+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012cea:	2306      	movs	r3, #6
 8012cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012cee:	e05e      	b.n	8012dae <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8012cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012cf6:	b672      	cpsid	i
    return(primask_value);
 8012cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012cfa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012cfc:	4b34      	ldr	r3, [pc, #208]	@ (8012dd0 <_txe_event_flags_create+0x108>)
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	1c5a      	adds	r2, r3, #1
 8012d02:	4b33      	ldr	r3, [pc, #204]	@ (8012dd0 <_txe_event_flags_create+0x108>)
 8012d04:	601a      	str	r2, [r3, #0]
 8012d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d08:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d0c:	f383 8810 	msr	PRIMASK, r3
}
 8012d10:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_group =   _tx_event_flags_created_ptr;
 8012d12:	4b30      	ldr	r3, [pc, #192]	@ (8012dd4 <_txe_event_flags_create+0x10c>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8012d18:	2300      	movs	r3, #0
 8012d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d1c:	e009      	b.n	8012d32 <_txe_event_flags_create+0x6a>
        {

            /* Determine if this group matches the event flags group in the list.  */
            if (group_ptr == next_group)
 8012d1e:	68fa      	ldr	r2, [r7, #12]
 8012d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d22:	429a      	cmp	r2, r3
 8012d24:	d00b      	beq.n	8012d3e <_txe_event_flags_create+0x76>
            }
            else
            {

                /* Move to the next group.  */
                next_group =  next_group -> tx_event_flags_group_created_next;
 8012d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d28:	699b      	ldr	r3, [r3, #24]
 8012d2a:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_event_flags_created_count; i++)
 8012d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d2e:	3301      	adds	r3, #1
 8012d30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012d32:	4b29      	ldr	r3, [pc, #164]	@ (8012dd8 <_txe_event_flags_create+0x110>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012d38:	429a      	cmp	r2, r3
 8012d3a:	d3f0      	bcc.n	8012d1e <_txe_event_flags_create+0x56>
 8012d3c:	e000      	b.n	8012d40 <_txe_event_flags_create+0x78>
                break;
 8012d3e:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012d40:	f3ef 8310 	mrs	r3, PRIMASK
 8012d44:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012d46:	b672      	cpsid	i
    return(primask_value);
 8012d48:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012d4a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012d4c:	4b20      	ldr	r3, [pc, #128]	@ (8012dd0 <_txe_event_flags_create+0x108>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	1e5a      	subs	r2, r3, #1
 8012d52:	4b1f      	ldr	r3, [pc, #124]	@ (8012dd0 <_txe_event_flags_create+0x108>)
 8012d54:	601a      	str	r2, [r3, #0]
 8012d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012d58:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012d5a:	6a3b      	ldr	r3, [r7, #32]
 8012d5c:	f383 8810 	msr	PRIMASK, r3
}
 8012d60:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8012d62:	f7ff f859 	bl	8011e18 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate event flag group.  */
        if (group_ptr == next_group)
 8012d66:	68fa      	ldr	r2, [r7, #12]
 8012d68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d102      	bne.n	8012d74 <_txe_event_flags_create+0xac>
        {

            /* Group is already created, return appropriate error code.  */
            status =  TX_GROUP_ERROR;
 8012d6e:	2306      	movs	r3, #6
 8012d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012d72:	e01c      	b.n	8012dae <_txe_event_flags_create+0xe6>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8012d74:	4b19      	ldr	r3, [pc, #100]	@ (8012ddc <_txe_event_flags_create+0x114>)
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8012d7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d7c:	4b18      	ldr	r3, [pc, #96]	@ (8012de0 <_txe_event_flags_create+0x118>)
 8012d7e:	429a      	cmp	r2, r3
 8012d80:	d101      	bne.n	8012d86 <_txe_event_flags_create+0xbe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8012d82:	2313      	movs	r3, #19
 8012d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012d86:	f3ef 8305 	mrs	r3, IPSR
 8012d8a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8012d8c:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012d8e:	4b15      	ldr	r3, [pc, #84]	@ (8012de4 <_txe_event_flags_create+0x11c>)
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4313      	orrs	r3, r2
 8012d94:	d00b      	beq.n	8012dae <_txe_event_flags_create+0xe6>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012d96:	f3ef 8305 	mrs	r3, IPSR
 8012d9a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012d9c:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8012d9e:	4b11      	ldr	r3, [pc, #68]	@ (8012de4 <_txe_event_flags_create+0x11c>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4313      	orrs	r3, r2
 8012da4:	4a10      	ldr	r2, [pc, #64]	@ (8012de8 <_txe_event_flags_create+0x120>)
 8012da6:	4293      	cmp	r3, r2
 8012da8:	d801      	bhi.n	8012dae <_txe_event_flags_create+0xe6>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8012daa:	2313      	movs	r3, #19
 8012dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d107      	bne.n	8012dc4 <_txe_event_flags_create+0xfc>
    {

        /* Call actual event flags create function.  */
        status =  _tx_event_flags_create(group_ptr, name_ptr);
 8012db4:	68ba      	ldr	r2, [r7, #8]
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	0011      	movs	r1, r2
 8012dba:	0018      	movs	r0, r3
 8012dbc:	f7fc fe2a 	bl	800fa14 <_tx_event_flags_create>
 8012dc0:	0003      	movs	r3, r0
 8012dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8012dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8012dc6:	0018      	movs	r0, r3
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	b010      	add	sp, #64	@ 0x40
 8012dcc:	bd80      	pop	{r7, pc}
 8012dce:	46c0      	nop			@ (mov r8, r8)
 8012dd0:	20011080 	.word	0x20011080
 8012dd4:	20010fc0 	.word	0x20010fc0
 8012dd8:	20010fc4 	.word	0x20010fc4
 8012ddc:	20010fe8 	.word	0x20010fe8
 8012de0:	20011130 	.word	0x20011130
 8012de4:	20000010 	.word	0x20000010
 8012de8:	f0f0f0ef 	.word	0xf0f0f0ef

08012dec <_txe_event_flags_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_delete(TX_EVENT_FLAGS_GROUP *group_ptr)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b086      	sub	sp, #24
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012df4:	2300      	movs	r3, #0
 8012df6:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d102      	bne.n	8012e04 <_txe_event_flags_delete+0x18>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012dfe:	2306      	movs	r3, #6
 8012e00:	617b      	str	r3, [r7, #20]
 8012e02:	e024      	b.n	8012e4e <_txe_event_flags_delete+0x62>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	4a13      	ldr	r2, [pc, #76]	@ (8012e58 <_txe_event_flags_delete+0x6c>)
 8012e0a:	4293      	cmp	r3, r2
 8012e0c:	d002      	beq.n	8012e14 <_txe_event_flags_delete+0x28>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012e0e:	2306      	movs	r3, #6
 8012e10:	617b      	str	r3, [r7, #20]
 8012e12:	e01c      	b.n	8012e4e <_txe_event_flags_delete+0x62>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012e14:	f3ef 8305 	mrs	r3, IPSR
 8012e18:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8012e1a:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8012e5c <_txe_event_flags_delete+0x70>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	4313      	orrs	r3, r2
 8012e22:	d002      	beq.n	8012e2a <_txe_event_flags_delete+0x3e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8012e24:	2313      	movs	r3, #19
 8012e26:	617b      	str	r3, [r7, #20]
 8012e28:	e011      	b.n	8012e4e <_txe_event_flags_delete+0x62>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 8012e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8012e60 <_txe_event_flags_delete+0x74>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 8012e30:	693a      	ldr	r2, [r7, #16]
 8012e32:	4b0c      	ldr	r3, [pc, #48]	@ (8012e64 <_txe_event_flags_delete+0x78>)
 8012e34:	429a      	cmp	r2, r3
 8012e36:	d101      	bne.n	8012e3c <_txe_event_flags_delete+0x50>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 8012e38:	2313      	movs	r3, #19
 8012e3a:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d105      	bne.n	8012e4e <_txe_event_flags_delete+0x62>
        {
#endif

            /* Call actual event flag group delete function.  */
            status =  _tx_event_flags_delete(group_ptr);
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	0018      	movs	r0, r3
 8012e46:	f7fc fe45 	bl	800fad4 <_tx_event_flags_delete>
 8012e4a:	0003      	movs	r3, r0
 8012e4c:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 8012e4e:	697b      	ldr	r3, [r7, #20]
}
 8012e50:	0018      	movs	r0, r3
 8012e52:	46bd      	mov	sp, r7
 8012e54:	b006      	add	sp, #24
 8012e56:	bd80      	pop	{r7, pc}
 8012e58:	4456444e 	.word	0x4456444e
 8012e5c:	20000010 	.word	0x20000010
 8012e60:	20010fe8 	.word	0x20010fe8
 8012e64:	20011130 	.word	0x20011130

08012e68 <_txe_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_get(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG requested_flags,
                    UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8012e68:	b590      	push	{r4, r7, lr}
 8012e6a:	b08b      	sub	sp, #44	@ 0x2c
 8012e6c:	af02      	add	r7, sp, #8
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	607a      	str	r2, [r7, #4]
 8012e74:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012e76:	2300      	movs	r3, #0
 8012e78:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8012e7a:	68fb      	ldr	r3, [r7, #12]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d102      	bne.n	8012e86 <_txe_event_flags_get+0x1e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012e80:	2306      	movs	r3, #6
 8012e82:	61fb      	str	r3, [r7, #28]
 8012e84:	e024      	b.n	8012ed0 <_txe_event_flags_get+0x68>
    }

    /* Now check for invalid event group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8012f08 <_txe_event_flags_get+0xa0>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d002      	beq.n	8012e96 <_txe_event_flags_get+0x2e>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012e90:	2306      	movs	r3, #6
 8012e92:	61fb      	str	r3, [r7, #28]
 8012e94:	e01c      	b.n	8012ed0 <_txe_event_flags_get+0x68>
    }

    /* Check for an invalid destination for actual flags.  */
    else if (actual_flags_ptr == TX_NULL)
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d102      	bne.n	8012ea2 <_txe_event_flags_get+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 8012e9c:	2303      	movs	r3, #3
 8012e9e:	61fb      	str	r3, [r7, #28]
 8012ea0:	e016      	b.n	8012ed0 <_txe_event_flags_get+0x68>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8012ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d013      	beq.n	8012ed0 <_txe_event_flags_get+0x68>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8012ea8:	f3ef 8305 	mrs	r3, IPSR
 8012eac:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8012eae:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8012eb0:	4b16      	ldr	r3, [pc, #88]	@ (8012f0c <_txe_event_flags_get+0xa4>)
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	4313      	orrs	r3, r2
 8012eb6:	d002      	beq.n	8012ebe <_txe_event_flags_get+0x56>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8012eb8:	2304      	movs	r3, #4
 8012eba:	61fb      	str	r3, [r7, #28]
 8012ebc:	e008      	b.n	8012ed0 <_txe_event_flags_get+0x68>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 8012ebe:	4b14      	ldr	r3, [pc, #80]	@ (8012f10 <_txe_event_flags_get+0xa8>)
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8012ec4:	69ba      	ldr	r2, [r7, #24]
 8012ec6:	4b13      	ldr	r3, [pc, #76]	@ (8012f14 <_txe_event_flags_get+0xac>)
 8012ec8:	429a      	cmp	r2, r3
 8012eca:	d101      	bne.n	8012ed0 <_txe_event_flags_get+0x68>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8012ecc:	2304      	movs	r3, #4
 8012ece:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d104      	bne.n	8012ee0 <_txe_event_flags_get+0x78>
    {

        /* Check for invalid get option.  */
        if (get_option > TX_AND_CLEAR)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	2b03      	cmp	r3, #3
 8012eda:	d901      	bls.n	8012ee0 <_txe_event_flags_get+0x78>
        {

            /* Invalid get events option, return appropriate error.  */
            status =  TX_OPTION_ERROR;
 8012edc:	2308      	movs	r3, #8
 8012ede:	61fb      	str	r3, [r7, #28]
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d10a      	bne.n	8012efc <_txe_event_flags_get+0x94>
    {

        /* Call actual event flags get function.  */
        status =  _tx_event_flags_get(group_ptr, requested_flags, get_option, actual_flags_ptr, wait_option);
 8012ee6:	683c      	ldr	r4, [r7, #0]
 8012ee8:	687a      	ldr	r2, [r7, #4]
 8012eea:	68b9      	ldr	r1, [r7, #8]
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012ef0:	9300      	str	r3, [sp, #0]
 8012ef2:	0023      	movs	r3, r4
 8012ef4:	f7fc fe7a 	bl	800fbec <_tx_event_flags_get>
 8012ef8:	0003      	movs	r3, r0
 8012efa:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8012efc:	69fb      	ldr	r3, [r7, #28]
}
 8012efe:	0018      	movs	r0, r3
 8012f00:	46bd      	mov	sp, r7
 8012f02:	b009      	add	sp, #36	@ 0x24
 8012f04:	bd90      	pop	{r4, r7, pc}
 8012f06:	46c0      	nop			@ (mov r8, r8)
 8012f08:	4456444e 	.word	0x4456444e
 8012f0c:	20000010 	.word	0x20000010
 8012f10:	20010fe8 	.word	0x20010fe8
 8012f14:	20011130 	.word	0x20011130

08012f18 <_txe_event_flags_set>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_event_flags_set(TX_EVENT_FLAGS_GROUP *group_ptr, ULONG flags_to_set, UINT set_option)
{
 8012f18:	b580      	push	{r7, lr}
 8012f1a:	b086      	sub	sp, #24
 8012f1c:	af00      	add	r7, sp, #0
 8012f1e:	60f8      	str	r0, [r7, #12]
 8012f20:	60b9      	str	r1, [r7, #8]
 8012f22:	607a      	str	r2, [r7, #4]

UINT        status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012f24:	2300      	movs	r3, #0
 8012f26:	617b      	str	r3, [r7, #20]

    /* Check for an invalid event flag group pointer.  */
    if (group_ptr == TX_NULL)
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d102      	bne.n	8012f34 <_txe_event_flags_set+0x1c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012f2e:	2306      	movs	r3, #6
 8012f30:	617b      	str	r3, [r7, #20]
 8012f32:	e00f      	b.n	8012f54 <_txe_event_flags_set+0x3c>
    }

    /* Now check for invalid event flag group ID.  */
    else if (group_ptr -> tx_event_flags_group_id != TX_EVENT_FLAGS_ID)
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	681b      	ldr	r3, [r3, #0]
 8012f38:	4a0e      	ldr	r2, [pc, #56]	@ (8012f74 <_txe_event_flags_set+0x5c>)
 8012f3a:	4293      	cmp	r3, r2
 8012f3c:	d002      	beq.n	8012f44 <_txe_event_flags_set+0x2c>
    {

        /* Event flags group pointer is invalid, return appropriate error code.  */
        status =  TX_GROUP_ERROR;
 8012f3e:	2306      	movs	r3, #6
 8012f40:	617b      	str	r3, [r7, #20]
 8012f42:	e007      	b.n	8012f54 <_txe_event_flags_set+0x3c>
    }
    else
    {

        /* Check for invalid set option.  */
        if (set_option != TX_AND)
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	2b02      	cmp	r3, #2
 8012f48:	d004      	beq.n	8012f54 <_txe_event_flags_set+0x3c>
        {

            if (set_option != TX_OR)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <_txe_event_flags_set+0x3c>
            {

                /* Invalid set events option, return appropriate error.  */
                status =  TX_OPTION_ERROR;
 8012f50:	2308      	movs	r3, #8
 8012f52:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8012f54:	697b      	ldr	r3, [r7, #20]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d107      	bne.n	8012f6a <_txe_event_flags_set+0x52>
    {

        /* Call actual event flags set function.  */
        status =  _tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8012f5a:	687a      	ldr	r2, [r7, #4]
 8012f5c:	68b9      	ldr	r1, [r7, #8]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	0018      	movs	r0, r3
 8012f62:	f7fc ff23 	bl	800fdac <_tx_event_flags_set>
 8012f66:	0003      	movs	r3, r0
 8012f68:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8012f6a:	697b      	ldr	r3, [r7, #20]
}
 8012f6c:	0018      	movs	r0, r3
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	b006      	add	sp, #24
 8012f72:	bd80      	pop	{r7, pc}
 8012f74:	4456444e 	.word	0x4456444e

08012f78 <_txe_mutex_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_create(TX_MUTEX *mutex_ptr, CHAR *name_ptr, UINT inherit, UINT mutex_control_block_size)
{
 8012f78:	b580      	push	{r7, lr}
 8012f7a:	b090      	sub	sp, #64	@ 0x40
 8012f7c:	af00      	add	r7, sp, #0
 8012f7e:	60f8      	str	r0, [r7, #12]
 8012f80:	60b9      	str	r1, [r7, #8]
 8012f82:	607a      	str	r2, [r7, #4]
 8012f84:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8012f86:	2300      	movs	r3, #0
 8012f88:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d102      	bne.n	8012f96 <_txe_mutex_create+0x1e>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012f90:	231c      	movs	r3, #28
 8012f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012f94:	e04f      	b.n	8013036 <_txe_mutex_create+0xbe>
    }

    /* Now check to make sure the control block is the correct size.  */
    else if (mutex_control_block_size != (sizeof(TX_MUTEX)))
 8012f96:	683b      	ldr	r3, [r7, #0]
 8012f98:	2b34      	cmp	r3, #52	@ 0x34
 8012f9a:	d002      	beq.n	8012fa2 <_txe_mutex_create+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8012f9c:	231c      	movs	r3, #28
 8012f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012fa0:	e049      	b.n	8013036 <_txe_mutex_create+0xbe>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8012fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012fa8:	b672      	cpsid	i
    return(primask_value);
 8012faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8012fac:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8012fae:	4b3a      	ldr	r3, [pc, #232]	@ (8013098 <_txe_mutex_create+0x120>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	1c5a      	adds	r2, r3, #1
 8012fb4:	4b38      	ldr	r3, [pc, #224]	@ (8013098 <_txe_mutex_create+0x120>)
 8012fb6:	601a      	str	r2, [r3, #0]
 8012fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fba:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8012fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fbe:	f383 8810 	msr	PRIMASK, r3
}
 8012fc2:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_mutex =   _tx_mutex_created_ptr;
 8012fc4:	4b35      	ldr	r3, [pc, #212]	@ (801309c <_txe_mutex_create+0x124>)
 8012fc6:	681b      	ldr	r3, [r3, #0]
 8012fc8:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8012fca:	2300      	movs	r3, #0
 8012fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012fce:	e009      	b.n	8012fe4 <_txe_mutex_create+0x6c>
        {

            /* Determine if this mutex matches the mutex in the list.  */
            if (mutex_ptr == next_mutex)
 8012fd0:	68fa      	ldr	r2, [r7, #12]
 8012fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fd4:	429a      	cmp	r2, r3
 8012fd6:	d00b      	beq.n	8012ff0 <_txe_mutex_create+0x78>
            }
            else
            {

                /* Move to the next mutex.  */
                next_mutex =  next_mutex -> tx_mutex_created_next;
 8012fd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012fda:	6a1b      	ldr	r3, [r3, #32]
 8012fdc:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_mutex_created_count; i++)
 8012fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012fe0:	3301      	adds	r3, #1
 8012fe2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012fe4:	4b2e      	ldr	r3, [pc, #184]	@ (80130a0 <_txe_mutex_create+0x128>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012fea:	429a      	cmp	r2, r3
 8012fec:	d3f0      	bcc.n	8012fd0 <_txe_mutex_create+0x58>
 8012fee:	e000      	b.n	8012ff2 <_txe_mutex_create+0x7a>
                break;
 8012ff0:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 8012ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8012ff6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8012ff8:	b672      	cpsid	i
    return(primask_value);
 8012ffa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8012ffc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8012ffe:	4b26      	ldr	r3, [pc, #152]	@ (8013098 <_txe_mutex_create+0x120>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	1e5a      	subs	r2, r3, #1
 8013004:	4b24      	ldr	r3, [pc, #144]	@ (8013098 <_txe_mutex_create+0x120>)
 8013006:	601a      	str	r2, [r3, #0]
 8013008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801300a:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801300c:	6a3b      	ldr	r3, [r7, #32]
 801300e:	f383 8810 	msr	PRIMASK, r3
}
 8013012:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8013014:	f7fe ff00 	bl	8011e18 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate mutex.  */
        if (mutex_ptr == next_mutex)
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801301c:	429a      	cmp	r2, r3
 801301e:	d102      	bne.n	8013026 <_txe_mutex_create+0xae>
        {

            /* Mutex is already created, return appropriate error code.  */
            status =  TX_MUTEX_ERROR;
 8013020:	231c      	movs	r3, #28
 8013022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8013024:	e007      	b.n	8013036 <_txe_mutex_create+0xbe>
        }
        else
        {

            /* Check for a valid inherit option.  */
            if (inherit != TX_INHERIT)
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	2b01      	cmp	r3, #1
 801302a:	d004      	beq.n	8013036 <_txe_mutex_create+0xbe>
            {

                if (inherit != TX_NO_INHERIT)
 801302c:	687b      	ldr	r3, [r7, #4]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d001      	beq.n	8013036 <_txe_mutex_create+0xbe>
                {

                    /* Inherit option is illegal.  */
                    status =  TX_INHERIT_ERROR;
 8013032:	231f      	movs	r3, #31
 8013034:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013038:	2b00      	cmp	r3, #0
 801303a:	d11c      	bne.n	8013076 <_txe_mutex_create+0xfe>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 801303c:	4b19      	ldr	r3, [pc, #100]	@ (80130a4 <_txe_mutex_create+0x12c>)
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 8013042:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013044:	4b18      	ldr	r3, [pc, #96]	@ (80130a8 <_txe_mutex_create+0x130>)
 8013046:	429a      	cmp	r2, r3
 8013048:	d101      	bne.n	801304e <_txe_mutex_create+0xd6>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 801304a:	2313      	movs	r3, #19
 801304c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801304e:	f3ef 8305 	mrs	r3, IPSR
 8013052:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8013054:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013056:	4b15      	ldr	r3, [pc, #84]	@ (80130ac <_txe_mutex_create+0x134>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	4313      	orrs	r3, r2
 801305c:	d00b      	beq.n	8013076 <_txe_mutex_create+0xfe>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801305e:	f3ef 8305 	mrs	r3, IPSR
 8013062:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8013064:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8013066:	4b11      	ldr	r3, [pc, #68]	@ (80130ac <_txe_mutex_create+0x134>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	4313      	orrs	r3, r2
 801306c:	4a10      	ldr	r2, [pc, #64]	@ (80130b0 <_txe_mutex_create+0x138>)
 801306e:	4293      	cmp	r3, r2
 8013070:	d801      	bhi.n	8013076 <_txe_mutex_create+0xfe>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013072:	2313      	movs	r3, #19
 8013074:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013076:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013078:	2b00      	cmp	r3, #0
 801307a:	d107      	bne.n	801308c <_txe_mutex_create+0x114>
    {

        /* Call actual mutex create function.  */
        status =  _tx_mutex_create(mutex_ptr, name_ptr, inherit);
 801307c:	687a      	ldr	r2, [r7, #4]
 801307e:	68b9      	ldr	r1, [r7, #8]
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	0018      	movs	r0, r3
 8013084:	f7fd f9ce 	bl	8010424 <_tx_mutex_create>
 8013088:	0003      	movs	r3, r0
 801308a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 801308c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801308e:	0018      	movs	r0, r3
 8013090:	46bd      	mov	sp, r7
 8013092:	b010      	add	sp, #64	@ 0x40
 8013094:	bd80      	pop	{r7, pc}
 8013096:	46c0      	nop			@ (mov r8, r8)
 8013098:	20011080 	.word	0x20011080
 801309c:	20010fc8 	.word	0x20010fc8
 80130a0:	20010fcc 	.word	0x20010fcc
 80130a4:	20010fe8 	.word	0x20010fe8
 80130a8:	20011130 	.word	0x20011130
 80130ac:	20000010 	.word	0x20000010
 80130b0:	f0f0f0ef 	.word	0xf0f0f0ef

080130b4 <_txe_mutex_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_get(TX_MUTEX *mutex_ptr, ULONG wait_option)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b088      	sub	sp, #32
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80130be:	2300      	movs	r3, #0
 80130c0:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d102      	bne.n	80130ce <_txe_mutex_get+0x1a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80130c8:	231c      	movs	r3, #28
 80130ca:	61fb      	str	r3, [r7, #28]
 80130cc:	e01e      	b.n	801310c <_txe_mutex_get+0x58>
    }

    /* Now check for a valid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	4a22      	ldr	r2, [pc, #136]	@ (801315c <_txe_mutex_get+0xa8>)
 80130d4:	4293      	cmp	r3, r2
 80130d6:	d002      	beq.n	80130de <_txe_mutex_get+0x2a>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 80130d8:	231c      	movs	r3, #28
 80130da:	61fb      	str	r3, [r7, #28]
 80130dc:	e016      	b.n	801310c <_txe_mutex_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d013      	beq.n	801310c <_txe_mutex_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80130e4:	f3ef 8305 	mrs	r3, IPSR
 80130e8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80130ea:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80130ec:	4b1c      	ldr	r3, [pc, #112]	@ (8013160 <_txe_mutex_get+0xac>)
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	4313      	orrs	r3, r2
 80130f2:	d002      	beq.n	80130fa <_txe_mutex_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 80130f4:	2304      	movs	r3, #4
 80130f6:	61fb      	str	r3, [r7, #28]
 80130f8:	e008      	b.n	801310c <_txe_mutex_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 80130fa:	4b1a      	ldr	r3, [pc, #104]	@ (8013164 <_txe_mutex_get+0xb0>)
 80130fc:	681b      	ldr	r3, [r3, #0]
 80130fe:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013100:	69ba      	ldr	r2, [r7, #24]
 8013102:	4b19      	ldr	r3, [pc, #100]	@ (8013168 <_txe_mutex_get+0xb4>)
 8013104:	429a      	cmp	r2, r3
 8013106:	d101      	bne.n	801310c <_txe_mutex_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 8013108:	2304      	movs	r3, #4
 801310a:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d113      	bne.n	801313a <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013112:	f3ef 8305 	mrs	r3, IPSR
 8013116:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8013118:	693a      	ldr	r2, [r7, #16]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801311a:	4b11      	ldr	r3, [pc, #68]	@ (8013160 <_txe_mutex_get+0xac>)
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4313      	orrs	r3, r2
 8013120:	d00b      	beq.n	801313a <_txe_mutex_get+0x86>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013122:	f3ef 8305 	mrs	r3, IPSR
 8013126:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 8013128:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801312a:	4b0d      	ldr	r3, [pc, #52]	@ (8013160 <_txe_mutex_get+0xac>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4313      	orrs	r3, r2
 8013130:	4a0e      	ldr	r2, [pc, #56]	@ (801316c <_txe_mutex_get+0xb8>)
 8013132:	4293      	cmp	r3, r2
 8013134:	d801      	bhi.n	801313a <_txe_mutex_get+0x86>
            {

                /* Yes, invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013136:	2313      	movs	r3, #19
 8013138:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d107      	bne.n	8013150 <_txe_mutex_get+0x9c>
    {

        /* Call actual get mutex function.  */
        status =  _tx_mutex_get(mutex_ptr, wait_option);
 8013140:	683a      	ldr	r2, [r7, #0]
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	0011      	movs	r1, r2
 8013146:	0018      	movs	r0, r3
 8013148:	f7fd f9d8 	bl	80104fc <_tx_mutex_get>
 801314c:	0003      	movs	r3, r0
 801314e:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013150:	69fb      	ldr	r3, [r7, #28]
}
 8013152:	0018      	movs	r0, r3
 8013154:	46bd      	mov	sp, r7
 8013156:	b008      	add	sp, #32
 8013158:	bd80      	pop	{r7, pc}
 801315a:	46c0      	nop			@ (mov r8, r8)
 801315c:	4d555445 	.word	0x4d555445
 8013160:	20000010 	.word	0x20000010
 8013164:	20010fe8 	.word	0x20010fe8
 8013168:	20011130 	.word	0x20011130
 801316c:	f0f0f0ef 	.word	0xf0f0f0ef

08013170 <_txe_mutex_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_mutex_put(TX_MUTEX *mutex_ptr)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b086      	sub	sp, #24
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]

UINT            status;


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013178:	2300      	movs	r3, #0
 801317a:	617b      	str	r3, [r7, #20]

    /* Check for an invalid mutex pointer.  */
    if (mutex_ptr == TX_NULL)
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d102      	bne.n	8013188 <_txe_mutex_put+0x18>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013182:	231c      	movs	r3, #28
 8013184:	617b      	str	r3, [r7, #20]
 8013186:	e01b      	b.n	80131c0 <_txe_mutex_put+0x50>
    }

    /* Now check for invalid mutex ID.  */
    else if (mutex_ptr -> tx_mutex_id != TX_MUTEX_ID)
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4a13      	ldr	r2, [pc, #76]	@ (80131dc <_txe_mutex_put+0x6c>)
 801318e:	4293      	cmp	r3, r2
 8013190:	d002      	beq.n	8013198 <_txe_mutex_put+0x28>
    {

        /* Mutex pointer is invalid, return appropriate error code.  */
        status =  TX_MUTEX_ERROR;
 8013192:	231c      	movs	r3, #28
 8013194:	617b      	str	r3, [r7, #20]
 8013196:	e013      	b.n	80131c0 <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013198:	f3ef 8305 	mrs	r3, IPSR
 801319c:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801319e:	693a      	ldr	r2, [r7, #16]
    }
    else
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80131a0:	4b0f      	ldr	r3, [pc, #60]	@ (80131e0 <_txe_mutex_put+0x70>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4313      	orrs	r3, r2
 80131a6:	d00b      	beq.n	80131c0 <_txe_mutex_put+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80131a8:	f3ef 8305 	mrs	r3, IPSR
 80131ac:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80131ae:	68fa      	ldr	r2, [r7, #12]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80131b0:	4b0b      	ldr	r3, [pc, #44]	@ (80131e0 <_txe_mutex_put+0x70>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4313      	orrs	r3, r2
 80131b6:	4a0b      	ldr	r2, [pc, #44]	@ (80131e4 <_txe_mutex_put+0x74>)
 80131b8:	4293      	cmp	r3, r2
 80131ba:	d801      	bhi.n	80131c0 <_txe_mutex_put+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80131bc:	2313      	movs	r3, #19
 80131be:	617b      	str	r3, [r7, #20]
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80131c0:	697b      	ldr	r3, [r7, #20]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d105      	bne.n	80131d2 <_txe_mutex_put+0x62>
    {

        /* Call actual put mutex function.  */
        status =  _tx_mutex_put(mutex_ptr);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	0018      	movs	r0, r3
 80131ca:	f7fd fc07 	bl	80109dc <_tx_mutex_put>
 80131ce:	0003      	movs	r3, r0
 80131d0:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 80131d2:	697b      	ldr	r3, [r7, #20]
}
 80131d4:	0018      	movs	r0, r3
 80131d6:	46bd      	mov	sp, r7
 80131d8:	b006      	add	sp, #24
 80131da:	bd80      	pop	{r7, pc}
 80131dc:	4d555445 	.word	0x4d555445
 80131e0:	20000010 	.word	0x20000010
 80131e4:	f0f0f0ef 	.word	0xf0f0f0ef

080131e8 <_txe_queue_send>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_queue_send(TX_QUEUE *queue_ptr, VOID *source_ptr, ULONG wait_option)
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b088      	sub	sp, #32
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	60f8      	str	r0, [r7, #12]
 80131f0:	60b9      	str	r1, [r7, #8]
 80131f2:	607a      	str	r2, [r7, #4]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80131f4:	2300      	movs	r3, #0
 80131f6:	61fb      	str	r3, [r7, #28]

    /* Check for an invalid queue pointer.  */
    if (queue_ptr == TX_NULL)
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	2b00      	cmp	r3, #0
 80131fc:	d102      	bne.n	8013204 <_txe_queue_send+0x1c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 80131fe:	2309      	movs	r3, #9
 8013200:	61fb      	str	r3, [r7, #28]
 8013202:	e024      	b.n	801324e <_txe_queue_send+0x66>
    }

    /* Now check for invalid queue ID.  */
    else if (queue_ptr -> tx_queue_id != TX_QUEUE_ID)
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	4a19      	ldr	r2, [pc, #100]	@ (8013270 <_txe_queue_send+0x88>)
 801320a:	4293      	cmp	r3, r2
 801320c:	d002      	beq.n	8013214 <_txe_queue_send+0x2c>
    {

        /* Queue pointer is invalid, return appropriate error code.  */
        status =  TX_QUEUE_ERROR;
 801320e:	2309      	movs	r3, #9
 8013210:	61fb      	str	r3, [r7, #28]
 8013212:	e01c      	b.n	801324e <_txe_queue_send+0x66>
    }

    /* Check for an invalid source for message.  */
    else if (source_ptr == TX_NULL)
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d102      	bne.n	8013220 <_txe_queue_send+0x38>
    {

        /* Null source pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 801321a:	2303      	movs	r3, #3
 801321c:	61fb      	str	r3, [r7, #28]
 801321e:	e016      	b.n	801324e <_txe_queue_send+0x66>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d013      	beq.n	801324e <_txe_queue_send+0x66>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013226:	f3ef 8305 	mrs	r3, IPSR
 801322a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801322c:	697a      	ldr	r2, [r7, #20]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801322e:	4b11      	ldr	r3, [pc, #68]	@ (8013274 <_txe_queue_send+0x8c>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	4313      	orrs	r3, r2
 8013234:	d002      	beq.n	801323c <_txe_queue_send+0x54>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013236:	2304      	movs	r3, #4
 8013238:	61fb      	str	r3, [r7, #28]
 801323a:	e008      	b.n	801324e <_txe_queue_send+0x66>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801323c:	4b0e      	ldr	r3, [pc, #56]	@ (8013278 <_txe_queue_send+0x90>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	61bb      	str	r3, [r7, #24]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013242:	69ba      	ldr	r2, [r7, #24]
 8013244:	4b0d      	ldr	r3, [pc, #52]	@ (801327c <_txe_queue_send+0x94>)
 8013246:	429a      	cmp	r2, r3
 8013248:	d101      	bne.n	801324e <_txe_queue_send+0x66>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801324a:	2304      	movs	r3, #4
 801324c:	61fb      	str	r3, [r7, #28]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d107      	bne.n	8013264 <_txe_queue_send+0x7c>
    {

        /* Call actual queue send function.  */
        status =  _tx_queue_send(queue_ptr, source_ptr, wait_option);
 8013254:	687a      	ldr	r2, [r7, #4]
 8013256:	68b9      	ldr	r1, [r7, #8]
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	0018      	movs	r0, r3
 801325c:	f7fd fe26 	bl	8010eac <_tx_queue_send>
 8013260:	0003      	movs	r3, r0
 8013262:	61fb      	str	r3, [r7, #28]
    }

    /* Return completion status.  */
    return(status);
 8013264:	69fb      	ldr	r3, [r7, #28]
}
 8013266:	0018      	movs	r0, r3
 8013268:	46bd      	mov	sp, r7
 801326a:	b008      	add	sp, #32
 801326c:	bd80      	pop	{r7, pc}
 801326e:	46c0      	nop			@ (mov r8, r8)
 8013270:	51554555 	.word	0x51554555
 8013274:	20000010 	.word	0x20000010
 8013278:	20010fe8 	.word	0x20010fe8
 801327c:	20011130 	.word	0x20011130

08013280 <_txe_semaphore_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_create(TX_SEMAPHORE *semaphore_ptr, CHAR *name_ptr, ULONG initial_count, UINT semaphore_control_block_size)
{
 8013280:	b580      	push	{r7, lr}
 8013282:	b090      	sub	sp, #64	@ 0x40
 8013284:	af00      	add	r7, sp, #0
 8013286:	60f8      	str	r0, [r7, #12]
 8013288:	60b9      	str	r1, [r7, #8]
 801328a:	607a      	str	r2, [r7, #4]
 801328c:	603b      	str	r3, [r7, #0]
TX_THREAD           *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 801328e:	2300      	movs	r3, #0
 8013290:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d102      	bne.n	801329e <_txe_semaphore_create+0x1e>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 8013298:	230c      	movs	r3, #12
 801329a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801329c:	e050      	b.n	8013340 <_txe_semaphore_create+0xc0>
    }

    /* Now check for a valid semaphore ID.  */
    else if (semaphore_control_block_size != (sizeof(TX_SEMAPHORE)))
 801329e:	683b      	ldr	r3, [r7, #0]
 80132a0:	2b1c      	cmp	r3, #28
 80132a2:	d002      	beq.n	80132aa <_txe_semaphore_create+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80132a4:	230c      	movs	r3, #12
 80132a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80132a8:	e04a      	b.n	8013340 <_txe_semaphore_create+0xc0>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80132aa:	f3ef 8310 	mrs	r3, PRIMASK
 80132ae:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" CPSID i" : : : "memory" );
 80132b0:	b672      	cpsid	i
    return(primask_value);
 80132b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80132b4:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80132b6:	4b36      	ldr	r3, [pc, #216]	@ (8013390 <_txe_semaphore_create+0x110>)
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	1c5a      	adds	r2, r3, #1
 80132bc:	4b34      	ldr	r3, [pc, #208]	@ (8013390 <_txe_semaphore_create+0x110>)
 80132be:	601a      	str	r2, [r3, #0]
 80132c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80132c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80132c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80132c6:	f383 8810 	msr	PRIMASK, r3
}
 80132ca:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_semaphore =  _tx_semaphore_created_ptr;
 80132cc:	4b31      	ldr	r3, [pc, #196]	@ (8013394 <_txe_semaphore_create+0x114>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80132d2:	2300      	movs	r3, #0
 80132d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80132d6:	e009      	b.n	80132ec <_txe_semaphore_create+0x6c>
        {

            /* Determine if this semaphore matches the current semaphore in the list.  */
            if (semaphore_ptr == next_semaphore)
 80132d8:	68fa      	ldr	r2, [r7, #12]
 80132da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132dc:	429a      	cmp	r2, r3
 80132de:	d00b      	beq.n	80132f8 <_txe_semaphore_create+0x78>
            }
            else
            {

                /* Move to next semaphore.  */
                next_semaphore =  next_semaphore -> tx_semaphore_created_next;
 80132e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132e2:	695b      	ldr	r3, [r3, #20]
 80132e4:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_semaphore_created_count; i++)
 80132e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80132e8:	3301      	adds	r3, #1
 80132ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80132ec:	4b2a      	ldr	r3, [pc, #168]	@ (8013398 <_txe_semaphore_create+0x118>)
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d3f0      	bcc.n	80132d8 <_txe_semaphore_create+0x58>
 80132f6:	e000      	b.n	80132fa <_txe_semaphore_create+0x7a>
                break;
 80132f8:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80132fa:	f3ef 8310 	mrs	r3, PRIMASK
 80132fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013300:	b672      	cpsid	i
    return(primask_value);
 8013302:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8013304:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8013306:	4b22      	ldr	r3, [pc, #136]	@ (8013390 <_txe_semaphore_create+0x110>)
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	1e5a      	subs	r2, r3, #1
 801330c:	4b20      	ldr	r3, [pc, #128]	@ (8013390 <_txe_semaphore_create+0x110>)
 801330e:	601a      	str	r2, [r3, #0]
 8013310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013312:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013314:	6a3b      	ldr	r3, [r7, #32]
 8013316:	f383 8810 	msr	PRIMASK, r3
}
 801331a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 801331c:	f7fe fd7c 	bl	8011e18 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate semaphore.  */
        if (semaphore_ptr == next_semaphore)
 8013320:	68fa      	ldr	r2, [r7, #12]
 8013322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013324:	429a      	cmp	r2, r3
 8013326:	d102      	bne.n	801332e <_txe_semaphore_create+0xae>
        {

            /* Semaphore is already created, return appropriate error code.  */
            status =  TX_SEMAPHORE_ERROR;
 8013328:	230c      	movs	r3, #12
 801332a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801332c:	e008      	b.n	8013340 <_txe_semaphore_create+0xc0>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 801332e:	4b1b      	ldr	r3, [pc, #108]	@ (801339c <_txe_semaphore_create+0x11c>)
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8013334:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013336:	4b1a      	ldr	r3, [pc, #104]	@ (80133a0 <_txe_semaphore_create+0x120>)
 8013338:	429a      	cmp	r2, r3
 801333a:	d101      	bne.n	8013340 <_txe_semaphore_create+0xc0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801333c:	2313      	movs	r3, #19
 801333e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013342:	2b00      	cmp	r3, #0
 8013344:	d113      	bne.n	801336e <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013346:	f3ef 8305 	mrs	r3, IPSR
 801334a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 801334c:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801334e:	4b15      	ldr	r3, [pc, #84]	@ (80133a4 <_txe_semaphore_create+0x124>)
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	4313      	orrs	r3, r2
 8013354:	d00b      	beq.n	801336e <_txe_semaphore_create+0xee>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013356:	f3ef 8305 	mrs	r3, IPSR
 801335a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801335c:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801335e:	4b11      	ldr	r3, [pc, #68]	@ (80133a4 <_txe_semaphore_create+0x124>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	4313      	orrs	r3, r2
 8013364:	4a10      	ldr	r2, [pc, #64]	@ (80133a8 <_txe_semaphore_create+0x128>)
 8013366:	4293      	cmp	r3, r2
 8013368:	d801      	bhi.n	801336e <_txe_semaphore_create+0xee>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 801336a:	2313      	movs	r3, #19
 801336c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801336e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013370:	2b00      	cmp	r3, #0
 8013372:	d107      	bne.n	8013384 <_txe_semaphore_create+0x104>
    {

        /* Call actual semaphore create function.  */
        status =  _tx_semaphore_create(semaphore_ptr, name_ptr, initial_count);
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	68b9      	ldr	r1, [r7, #8]
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	0018      	movs	r0, r3
 801337c:	f7fd ff3a 	bl	80111f4 <_tx_semaphore_create>
 8013380:	0003      	movs	r3, r0
 8013382:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    /* Return completion status.  */
    return(status);
 8013384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8013386:	0018      	movs	r0, r3
 8013388:	46bd      	mov	sp, r7
 801338a:	b010      	add	sp, #64	@ 0x40
 801338c:	bd80      	pop	{r7, pc}
 801338e:	46c0      	nop			@ (mov r8, r8)
 8013390:	20011080 	.word	0x20011080
 8013394:	20010fb0 	.word	0x20010fb0
 8013398:	20010fb4 	.word	0x20010fb4
 801339c:	20010fe8 	.word	0x20010fe8
 80133a0:	20011130 	.word	0x20011130
 80133a4:	20000010 	.word	0x20000010
 80133a8:	f0f0f0ef 	.word	0xf0f0f0ef

080133ac <_txe_semaphore_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_delete(TX_SEMAPHORE *semaphore_ptr)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b086      	sub	sp, #24
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	6078      	str	r0, [r7, #4]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80133b4:	2300      	movs	r3, #0
 80133b6:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d102      	bne.n	80133c4 <_txe_semaphore_delete+0x18>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80133be:	230c      	movs	r3, #12
 80133c0:	617b      	str	r3, [r7, #20]
 80133c2:	e01b      	b.n	80133fc <_txe_semaphore_delete+0x50>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4a13      	ldr	r2, [pc, #76]	@ (8013418 <_txe_semaphore_delete+0x6c>)
 80133ca:	4293      	cmp	r3, r2
 80133cc:	d002      	beq.n	80133d4 <_txe_semaphore_delete+0x28>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80133ce:	230c      	movs	r3, #12
 80133d0:	617b      	str	r3, [r7, #20]
 80133d2:	e013      	b.n	80133fc <_txe_semaphore_delete+0x50>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80133d4:	f3ef 8305 	mrs	r3, IPSR
 80133d8:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 80133da:	68fa      	ldr	r2, [r7, #12]
    {

        /* Check for invalid caller of this function.  */

        /* Is the caller an ISR or Initialization?  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80133dc:	4b0f      	ldr	r3, [pc, #60]	@ (801341c <_txe_semaphore_delete+0x70>)
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	4313      	orrs	r3, r2
 80133e2:	d002      	beq.n	80133ea <_txe_semaphore_delete+0x3e>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 80133e4:	2313      	movs	r3, #19
 80133e6:	617b      	str	r3, [r7, #20]
 80133e8:	e008      	b.n	80133fc <_txe_semaphore_delete+0x50>
#ifndef TX_TIMER_PROCESS_IN_ISR
        else
        {

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80133ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013420 <_txe_semaphore_delete+0x74>)
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	613b      	str	r3, [r7, #16]

            /* Is the caller the system timer thread?  */
            if (thread_ptr == &_tx_timer_thread)
 80133f0:	693a      	ldr	r2, [r7, #16]
 80133f2:	4b0c      	ldr	r3, [pc, #48]	@ (8013424 <_txe_semaphore_delete+0x78>)
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d101      	bne.n	80133fc <_txe_semaphore_delete+0x50>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80133f8:	2313      	movs	r3, #19
 80133fa:	617b      	str	r3, [r7, #20]
        }
#endif
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80133fc:	697b      	ldr	r3, [r7, #20]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d105      	bne.n	801340e <_txe_semaphore_delete+0x62>
    {

        /* Call actual semaphore delete function.  */
        status =  _tx_semaphore_delete(semaphore_ptr);
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	0018      	movs	r0, r3
 8013406:	f7fd ff59 	bl	80112bc <_tx_semaphore_delete>
 801340a:	0003      	movs	r3, r0
 801340c:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 801340e:	697b      	ldr	r3, [r7, #20]
}
 8013410:	0018      	movs	r0, r3
 8013412:	46bd      	mov	sp, r7
 8013414:	b006      	add	sp, #24
 8013416:	bd80      	pop	{r7, pc}
 8013418:	53454d41 	.word	0x53454d41
 801341c:	20000010 	.word	0x20000010
 8013420:	20010fe8 	.word	0x20010fe8
 8013424:	20011130 	.word	0x20011130

08013428 <_txe_semaphore_get>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_get(TX_SEMAPHORE *semaphore_ptr, ULONG wait_option)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b086      	sub	sp, #24
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
TX_THREAD   *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8013432:	2300      	movs	r3, #0
 8013434:	617b      	str	r3, [r7, #20]

    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d102      	bne.n	8013442 <_txe_semaphore_get+0x1a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801343c:	230c      	movs	r3, #12
 801343e:	617b      	str	r3, [r7, #20]
 8013440:	e01e      	b.n	8013480 <_txe_semaphore_get+0x58>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	4a16      	ldr	r2, [pc, #88]	@ (80134a0 <_txe_semaphore_get+0x78>)
 8013448:	4293      	cmp	r3, r2
 801344a:	d002      	beq.n	8013452 <_txe_semaphore_get+0x2a>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 801344c:	230c      	movs	r3, #12
 801344e:	617b      	str	r3, [r7, #20]
 8013450:	e016      	b.n	8013480 <_txe_semaphore_get+0x58>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d013      	beq.n	8013480 <_txe_semaphore_get+0x58>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013458:	f3ef 8305 	mrs	r3, IPSR
 801345c:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 801345e:	68fa      	ldr	r2, [r7, #12]
        {

            /* Is the call from an ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013460:	4b10      	ldr	r3, [pc, #64]	@ (80134a4 <_txe_semaphore_get+0x7c>)
 8013462:	681b      	ldr	r3, [r3, #0]
 8013464:	4313      	orrs	r3, r2
 8013466:	d002      	beq.n	801346e <_txe_semaphore_get+0x46>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 8013468:	2304      	movs	r3, #4
 801346a:	617b      	str	r3, [r7, #20]
 801346c:	e008      	b.n	8013480 <_txe_semaphore_get+0x58>
#ifndef TX_TIMER_PROCESS_IN_ISR
            else
            {

                /* Pickup thread pointer.  */
                TX_THREAD_GET_CURRENT(current_thread)
 801346e:	4b0e      	ldr	r3, [pc, #56]	@ (80134a8 <_txe_semaphore_get+0x80>)
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	613b      	str	r3, [r7, #16]

                /* Is the current thread the timer thread?  */
                if (current_thread == &_tx_timer_thread)
 8013474:	693a      	ldr	r2, [r7, #16]
 8013476:	4b0d      	ldr	r3, [pc, #52]	@ (80134ac <_txe_semaphore_get+0x84>)
 8013478:	429a      	cmp	r2, r3
 801347a:	d101      	bne.n	8013480 <_txe_semaphore_get+0x58>
                {

                    /* A non-thread is trying to suspend, return appropriate error code.  */
                    status =  TX_WAIT_ERROR;
 801347c:	2304      	movs	r3, #4
 801347e:	617b      	str	r3, [r7, #20]
#endif
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d107      	bne.n	8013496 <_txe_semaphore_get+0x6e>
    {

        /* Call actual get semaphore function.  */
        status =  _tx_semaphore_get(semaphore_ptr, wait_option);
 8013486:	683a      	ldr	r2, [r7, #0]
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	0011      	movs	r1, r2
 801348c:	0018      	movs	r0, r3
 801348e:	f7fd ffa1 	bl	80113d4 <_tx_semaphore_get>
 8013492:	0003      	movs	r3, r0
 8013494:	617b      	str	r3, [r7, #20]
    }

    /* Return completion status.  */
    return(status);
 8013496:	697b      	ldr	r3, [r7, #20]
}
 8013498:	0018      	movs	r0, r3
 801349a:	46bd      	mov	sp, r7
 801349c:	b006      	add	sp, #24
 801349e:	bd80      	pop	{r7, pc}
 80134a0:	53454d41 	.word	0x53454d41
 80134a4:	20000010 	.word	0x20000010
 80134a8:	20010fe8 	.word	0x20010fe8
 80134ac:	20011130 	.word	0x20011130

080134b0 <_txe_semaphore_put>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_semaphore_put(TX_SEMAPHORE *semaphore_ptr)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b084      	sub	sp, #16
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid semaphore pointer.  */
    if (semaphore_ptr == TX_NULL)
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d102      	bne.n	80134c4 <_txe_semaphore_put+0x14>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80134be:	230c      	movs	r3, #12
 80134c0:	60fb      	str	r3, [r7, #12]
 80134c2:	e00d      	b.n	80134e0 <_txe_semaphore_put+0x30>
    }

    /* Now check for invalid semaphore ID.  */
    else if (semaphore_ptr -> tx_semaphore_id != TX_SEMAPHORE_ID)
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	4a08      	ldr	r2, [pc, #32]	@ (80134ec <_txe_semaphore_put+0x3c>)
 80134ca:	4293      	cmp	r3, r2
 80134cc:	d002      	beq.n	80134d4 <_txe_semaphore_put+0x24>
    {

        /* Semaphore pointer is invalid, return appropriate error code.  */
        status =  TX_SEMAPHORE_ERROR;
 80134ce:	230c      	movs	r3, #12
 80134d0:	60fb      	str	r3, [r7, #12]
 80134d2:	e005      	b.n	80134e0 <_txe_semaphore_put+0x30>
    }
    else
    {

        /* Call actual put semaphore function.  */
        status =  _tx_semaphore_put(semaphore_ptr);
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	0018      	movs	r0, r3
 80134d8:	f7fe f80e 	bl	80114f8 <_tx_semaphore_put>
 80134dc:	0003      	movs	r3, r0
 80134de:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80134e0:	68fb      	ldr	r3, [r7, #12]
}
 80134e2:	0018      	movs	r0, r3
 80134e4:	46bd      	mov	sp, r7
 80134e6:	b004      	add	sp, #16
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	46c0      	nop			@ (mov r8, r8)
 80134ec:	53454d41 	.word	0x53454d41

080134f0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 80134f0:	b590      	push	{r4, r7, lr}
 80134f2:	b099      	sub	sp, #100	@ 0x64
 80134f4:	af06      	add	r7, sp, #24
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]
 80134fc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80134fe:	2300      	movs	r3, #0
 8013500:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	2b00      	cmp	r3, #0
 8013506:	d102      	bne.n	801350e <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013508:	230e      	movs	r3, #14
 801350a:	647b      	str	r3, [r7, #68]	@ 0x44
 801350c:	e0b6      	b.n	801367c <_txe_thread_create+0x18c>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 801350e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013510:	2bb0      	cmp	r3, #176	@ 0xb0
 8013512:	d002      	beq.n	801351a <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013514:	230e      	movs	r3, #14
 8013516:	647b      	str	r3, [r7, #68]	@ 0x44
 8013518:	e0b0      	b.n	801367c <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801351a:	f3ef 8310 	mrs	r3, PRIMASK
 801351e:	623b      	str	r3, [r7, #32]
    __asm__ volatile (" CPSID i" : : : "memory" );
 8013520:	b672      	cpsid	i
    return(primask_value);
 8013522:	6a3b      	ldr	r3, [r7, #32]
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8013524:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8013526:	4b64      	ldr	r3, [pc, #400]	@ (80136b8 <_txe_thread_create+0x1c8>)
 8013528:	681b      	ldr	r3, [r3, #0]
 801352a:	1c5a      	adds	r2, r3, #1
 801352c:	4b62      	ldr	r3, [pc, #392]	@ (80136b8 <_txe_thread_create+0x1c8>)
 801352e:	601a      	str	r2, [r3, #0]
 8013530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013532:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 8013534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013536:	f383 8810 	msr	PRIMASK, r3
}
 801353a:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 801353c:	2300      	movs	r3, #0
 801353e:	643b      	str	r3, [r7, #64]	@ 0x40
        next_thread =  _tx_thread_created_ptr;
 8013540:	4b5e      	ldr	r3, [pc, #376]	@ (80136bc <_txe_thread_create+0x1cc>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8013546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013548:	633b      	str	r3, [r7, #48]	@ 0x30
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 801354a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801354c:	3b01      	subs	r3, #1
 801354e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013550:	18d3      	adds	r3, r2, r3
 8013552:	633b      	str	r3, [r7, #48]	@ 0x30
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 8013554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013556:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8013558:	2300      	movs	r3, #0
 801355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801355c:	e02b      	b.n	80135b6 <_txe_thread_create+0xc6>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013562:	429a      	cmp	r2, r3
 8013564:	d101      	bne.n	801356a <_txe_thread_create+0x7a>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 8013566:	2301      	movs	r3, #1
 8013568:	643b      	str	r3, [r7, #64]	@ 0x40
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 801356a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801356c:	2b01      	cmp	r3, #1
 801356e:	d028      	beq.n	80135c2 <_txe_thread_create+0xd2>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8013570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013572:	68db      	ldr	r3, [r3, #12]
 8013574:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013576:	429a      	cmp	r2, r3
 8013578:	d308      	bcc.n	801358c <_txe_thread_create+0x9c>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 801357a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801357c:	691b      	ldr	r3, [r3, #16]
 801357e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8013580:	429a      	cmp	r2, r3
 8013582:	d203      	bcs.n	801358c <_txe_thread_create+0x9c>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 8013584:	2300      	movs	r3, #0
 8013586:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8013588:	2301      	movs	r3, #1
 801358a:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 801358c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013592:	429a      	cmp	r2, r3
 8013594:	d308      	bcc.n	80135a8 <_txe_thread_create+0xb8>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 8013596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013598:	691b      	ldr	r3, [r3, #16]
 801359a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801359c:	429a      	cmp	r2, r3
 801359e:	d203      	bcs.n	80135a8 <_txe_thread_create+0xb8>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80135a0:	2300      	movs	r3, #0
 80135a2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80135a4:	2301      	movs	r3, #1
 80135a6:	643b      	str	r3, [r7, #64]	@ 0x40
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80135a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135aa:	2288      	movs	r2, #136	@ 0x88
 80135ac:	589b      	ldr	r3, [r3, r2]
 80135ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80135b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80135b2:	3301      	adds	r3, #1
 80135b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80135b6:	4b42      	ldr	r3, [pc, #264]	@ (80136c0 <_txe_thread_create+0x1d0>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80135bc:	429a      	cmp	r2, r3
 80135be:	d3ce      	bcc.n	801355e <_txe_thread_create+0x6e>
 80135c0:	e000      	b.n	80135c4 <_txe_thread_create+0xd4>
                break;
 80135c2:	46c0      	nop			@ (mov r8, r8)
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 80135c4:	f3ef 8310 	mrs	r3, PRIMASK
 80135c8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 80135ca:	b672      	cpsid	i
    return(primask_value);
 80135cc:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80135ce:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80135d0:	4b39      	ldr	r3, [pc, #228]	@ (80136b8 <_txe_thread_create+0x1c8>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	1e5a      	subs	r2, r3, #1
 80135d6:	4b38      	ldr	r3, [pc, #224]	@ (80136b8 <_txe_thread_create+0x1c8>)
 80135d8:	601a      	str	r2, [r3, #0]
 80135da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80135dc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 80135de:	69fb      	ldr	r3, [r7, #28]
 80135e0:	f383 8810 	msr	PRIMASK, r3
}
 80135e4:	46c0      	nop			@ (mov r8, r8)

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80135e6:	f7fe fc17 	bl	8011e18 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 80135ea:	68fa      	ldr	r2, [r7, #12]
 80135ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80135ee:	429a      	cmp	r2, r3
 80135f0:	d102      	bne.n	80135f8 <_txe_thread_create+0x108>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 80135f2:	230e      	movs	r3, #14
 80135f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80135f6:	e041      	b.n	801367c <_txe_thread_create+0x18c>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 80135f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d102      	bne.n	8013604 <_txe_thread_create+0x114>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 80135fe:	2303      	movs	r3, #3
 8013600:	647b      	str	r3, [r7, #68]	@ 0x44
 8013602:	e03b      	b.n	801367c <_txe_thread_create+0x18c>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d102      	bne.n	8013610 <_txe_thread_create+0x120>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 801360a:	2303      	movs	r3, #3
 801360c:	647b      	str	r3, [r7, #68]	@ 0x44
 801360e:	e035      	b.n	801367c <_txe_thread_create+0x18c>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8013610:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013612:	2bc7      	cmp	r3, #199	@ 0xc7
 8013614:	d802      	bhi.n	801361c <_txe_thread_create+0x12c>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8013616:	2305      	movs	r3, #5
 8013618:	647b      	str	r3, [r7, #68]	@ 0x44
 801361a:	e02f      	b.n	801367c <_txe_thread_create+0x18c>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 801361c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801361e:	2b1f      	cmp	r3, #31
 8013620:	d902      	bls.n	8013628 <_txe_thread_create+0x138>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8013622:	230f      	movs	r3, #15
 8013624:	647b      	str	r3, [r7, #68]	@ 0x44
 8013626:	e029      	b.n	801367c <_txe_thread_create+0x18c>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8013628:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801362a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801362c:	429a      	cmp	r2, r3
 801362e:	d902      	bls.n	8013636 <_txe_thread_create+0x146>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8013630:	2318      	movs	r3, #24
 8013632:	647b      	str	r3, [r7, #68]	@ 0x44
 8013634:	e022      	b.n	801367c <_txe_thread_create+0x18c>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8013636:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013638:	2b01      	cmp	r3, #1
 801363a:	d902      	bls.n	8013642 <_txe_thread_create+0x152>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 801363c:	2310      	movs	r3, #16
 801363e:	647b      	str	r3, [r7, #68]	@ 0x44
 8013640:	e01c      	b.n	801367c <_txe_thread_create+0x18c>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 8013642:	4b20      	ldr	r3, [pc, #128]	@ (80136c4 <_txe_thread_create+0x1d4>)
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8013648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801364a:	4b1f      	ldr	r3, [pc, #124]	@ (80136c8 <_txe_thread_create+0x1d8>)
 801364c:	429a      	cmp	r2, r3
 801364e:	d101      	bne.n	8013654 <_txe_thread_create+0x164>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 8013650:	2313      	movs	r3, #19
 8013652:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013654:	f3ef 8305 	mrs	r3, IPSR
 8013658:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 801365a:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 801365c:	4b1b      	ldr	r3, [pc, #108]	@ (80136cc <_txe_thread_create+0x1dc>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	4313      	orrs	r3, r2
 8013662:	d00b      	beq.n	801367c <_txe_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013664:	f3ef 8305 	mrs	r3, IPSR
 8013668:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 801366a:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 801366c:	4b17      	ldr	r3, [pc, #92]	@ (80136cc <_txe_thread_create+0x1dc>)
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	4313      	orrs	r3, r2
 8013672:	4a17      	ldr	r2, [pc, #92]	@ (80136d0 <_txe_thread_create+0x1e0>)
 8013674:	4293      	cmp	r3, r2
 8013676:	d801      	bhi.n	801367c <_txe_thread_create+0x18c>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8013678:	2313      	movs	r3, #19
 801367a:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 801367c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801367e:	2b00      	cmp	r3, #0
 8013680:	d114      	bne.n	80136ac <_txe_thread_create+0x1bc>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 8013682:	683c      	ldr	r4, [r7, #0]
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	68b9      	ldr	r1, [r7, #8]
 8013688:	68f8      	ldr	r0, [r7, #12]
 801368a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801368c:	9305      	str	r3, [sp, #20]
 801368e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013690:	9304      	str	r3, [sp, #16]
 8013692:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013694:	9303      	str	r3, [sp, #12]
 8013696:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013698:	9302      	str	r3, [sp, #8]
 801369a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801369c:	9301      	str	r3, [sp, #4]
 801369e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80136a0:	9300      	str	r3, [sp, #0]
 80136a2:	0023      	movs	r3, r4
 80136a4:	f7fd ff80 	bl	80115a8 <_tx_thread_create>
 80136a8:	0003      	movs	r3, r0
 80136aa:	647b      	str	r3, [r7, #68]	@ 0x44
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80136ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80136ae:	0018      	movs	r0, r3
 80136b0:	46bd      	mov	sp, r7
 80136b2:	b013      	add	sp, #76	@ 0x4c
 80136b4:	bd90      	pop	{r4, r7, pc}
 80136b6:	46c0      	nop			@ (mov r8, r8)
 80136b8:	20011080 	.word	0x20011080
 80136bc:	20010ff0 	.word	0x20010ff0
 80136c0:	20010ff4 	.word	0x20010ff4
 80136c4:	20010fe8 	.word	0x20010fe8
 80136c8:	20011130 	.word	0x20011130
 80136cc:	20000010 	.word	0x20000010
 80136d0:	f0f0f0ef 	.word	0xf0f0f0ef

080136d4 <_txe_thread_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_delete(TX_THREAD *thread_ptr)
{
 80136d4:	b580      	push	{r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80136dc:	f3ef 8305 	mrs	r3, IPSR
 80136e0:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 80136e2:	68ba      	ldr	r2, [r7, #8]

UINT        status;


    /* Check for invalid caller of this function.  */
    if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80136e4:	4b0f      	ldr	r3, [pc, #60]	@ (8013724 <_txe_thread_delete+0x50>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	4313      	orrs	r3, r2
 80136ea:	d002      	beq.n	80136f2 <_txe_thread_delete+0x1e>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 80136ec:	2313      	movs	r3, #19
 80136ee:	60fb      	str	r3, [r7, #12]
 80136f0:	e013      	b.n	801371a <_txe_thread_delete+0x46>
    }

    /* Check for an invalid thread pointer.  */
    else if (thread_ptr == TX_NULL)
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d102      	bne.n	80136fe <_txe_thread_delete+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80136f8:	230e      	movs	r3, #14
 80136fa:	60fb      	str	r3, [r7, #12]
 80136fc:	e00d      	b.n	801371a <_txe_thread_delete+0x46>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	4a09      	ldr	r2, [pc, #36]	@ (8013728 <_txe_thread_delete+0x54>)
 8013704:	4293      	cmp	r3, r2
 8013706:	d002      	beq.n	801370e <_txe_thread_delete+0x3a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013708:	230e      	movs	r3, #14
 801370a:	60fb      	str	r3, [r7, #12]
 801370c:	e005      	b.n	801371a <_txe_thread_delete+0x46>
    }
    else
    {

        /* Call actual thread delete function.  */
        status =  _tx_thread_delete(thread_ptr);
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	0018      	movs	r0, r3
 8013712:	f7fe f869 	bl	80117e8 <_tx_thread_delete>
 8013716:	0003      	movs	r3, r0
 8013718:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801371a:	68fb      	ldr	r3, [r7, #12]
}
 801371c:	0018      	movs	r0, r3
 801371e:	46bd      	mov	sp, r7
 8013720:	b004      	add	sp, #16
 8013722:	bd80      	pop	{r7, pc}
 8013724:	20000010 	.word	0x20000010
 8013728:	54485244 	.word	0x54485244

0801372c <_txe_thread_info_get>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_info_get(TX_THREAD *thread_ptr, CHAR **name, UINT *state, ULONG *run_count,
                UINT *priority, UINT *preemption_threshold, ULONG *time_slice,
                TX_THREAD **next_thread, TX_THREAD **next_suspended_thread)
{
 801372c:	b590      	push	{r4, r7, lr}
 801372e:	b08d      	sub	sp, #52	@ 0x34
 8013730:	af06      	add	r7, sp, #24
 8013732:	60f8      	str	r0, [r7, #12]
 8013734:	60b9      	str	r1, [r7, #8]
 8013736:	607a      	str	r2, [r7, #4]
 8013738:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801373a:	68fb      	ldr	r3, [r7, #12]
 801373c:	2b00      	cmp	r3, #0
 801373e:	d102      	bne.n	8013746 <_txe_thread_info_get+0x1a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013740:	230e      	movs	r3, #14
 8013742:	617b      	str	r3, [r7, #20]
 8013744:	e01a      	b.n	801377c <_txe_thread_info_get+0x50>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	4a0f      	ldr	r2, [pc, #60]	@ (8013788 <_txe_thread_info_get+0x5c>)
 801374c:	4293      	cmp	r3, r2
 801374e:	d002      	beq.n	8013756 <_txe_thread_info_get+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013750:	230e      	movs	r3, #14
 8013752:	617b      	str	r3, [r7, #20]
 8013754:	e012      	b.n	801377c <_txe_thread_info_get+0x50>
    }
    else
    {

        /* Call the actual thread information get service.  */
        status =  _tx_thread_info_get(thread_ptr, name, state, run_count, priority, preemption_threshold,
 8013756:	683c      	ldr	r4, [r7, #0]
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	68b9      	ldr	r1, [r7, #8]
 801375c:	68f8      	ldr	r0, [r7, #12]
 801375e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013760:	9304      	str	r3, [sp, #16]
 8013762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013764:	9303      	str	r3, [sp, #12]
 8013766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013768:	9302      	str	r3, [sp, #8]
 801376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801376c:	9301      	str	r3, [sp, #4]
 801376e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013770:	9300      	str	r3, [sp, #0]
 8013772:	0023      	movs	r3, r4
 8013774:	f7fe f8a8 	bl	80118c8 <_tx_thread_info_get>
 8013778:	0003      	movs	r3, r0
 801377a:	617b      	str	r3, [r7, #20]
                            time_slice, next_thread, next_suspended_thread);
    }

    /* Return completion status.  */
    return(status);
 801377c:	697b      	ldr	r3, [r7, #20]
}
 801377e:	0018      	movs	r0, r3
 8013780:	46bd      	mov	sp, r7
 8013782:	b007      	add	sp, #28
 8013784:	bd90      	pop	{r4, r7, pc}
 8013786:	46c0      	nop			@ (mov r8, r8)
 8013788:	54485244 	.word	0x54485244

0801378c <_txe_thread_relinquish>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _txe_thread_relinquish(VOID)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	b082      	sub	sp, #8
 8013790:	af00      	add	r7, sp, #0

TX_THREAD   *current_thread;


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8013792:	4b0a      	ldr	r3, [pc, #40]	@ (80137bc <_txe_thread_relinquish+0x30>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	607b      	str	r3, [r7, #4]

    /* Make sure a thread is executing.  */
    if (current_thread != TX_NULL)
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d009      	beq.n	80137b2 <_txe_thread_relinquish+0x26>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 801379e:	f3ef 8305 	mrs	r3, IPSR
 80137a2:	603b      	str	r3, [r7, #0]
    return(ipsr_value);
 80137a4:	683a      	ldr	r2, [r7, #0]
    {

        /* Now make sure the call is not from an ISR or Initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
 80137a6:	4b06      	ldr	r3, [pc, #24]	@ (80137c0 <_txe_thread_relinquish+0x34>)
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	4313      	orrs	r3, r2
 80137ac:	d101      	bne.n	80137b2 <_txe_thread_relinquish+0x26>
        {

            /* Okay to call the real relinquish function.  */
            _tx_thread_relinquish();
 80137ae:	f7fe f947 	bl	8011a40 <_tx_thread_relinquish>
        }
    }
}
 80137b2:	46c0      	nop			@ (mov r8, r8)
 80137b4:	46bd      	mov	sp, r7
 80137b6:	b002      	add	sp, #8
 80137b8:	bd80      	pop	{r7, pc}
 80137ba:	46c0      	nop			@ (mov r8, r8)
 80137bc:	20010fe8 	.word	0x20010fe8
 80137c0:	20000010 	.word	0x20000010

080137c4 <_txe_thread_resume>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_resume(TX_THREAD *thread_ptr)
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b084      	sub	sp, #16
 80137c8:	af00      	add	r7, sp, #0
 80137ca:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d102      	bne.n	80137d8 <_txe_thread_resume+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80137d2:	230e      	movs	r3, #14
 80137d4:	60fb      	str	r3, [r7, #12]
 80137d6:	e00d      	b.n	80137f4 <_txe_thread_resume+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 80137d8:	687b      	ldr	r3, [r7, #4]
 80137da:	681b      	ldr	r3, [r3, #0]
 80137dc:	4a08      	ldr	r2, [pc, #32]	@ (8013800 <_txe_thread_resume+0x3c>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d002      	beq.n	80137e8 <_txe_thread_resume+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 80137e2:	230e      	movs	r3, #14
 80137e4:	60fb      	str	r3, [r7, #12]
 80137e6:	e005      	b.n	80137f4 <_txe_thread_resume+0x30>
    }
    else
    {

        /* Call actual thread resume function.  */
        status =  _tx_thread_resume(thread_ptr);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	0018      	movs	r0, r3
 80137ec:	f7fe f98a 	bl	8011b04 <_tx_thread_resume>
 80137f0:	0003      	movs	r3, r0
 80137f2:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 80137f4:	68fb      	ldr	r3, [r7, #12]
}
 80137f6:	0018      	movs	r0, r3
 80137f8:	46bd      	mov	sp, r7
 80137fa:	b004      	add	sp, #16
 80137fc:	bd80      	pop	{r7, pc}
 80137fe:	46c0      	nop			@ (mov r8, r8)
 8013800:	54485244 	.word	0x54485244

08013804 <_txe_thread_suspend>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_suspend(TX_THREAD *thread_ptr)
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b084      	sub	sp, #16
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	2b00      	cmp	r3, #0
 8013810:	d102      	bne.n	8013818 <_txe_thread_suspend+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013812:	230e      	movs	r3, #14
 8013814:	60fb      	str	r3, [r7, #12]
 8013816:	e00d      	b.n	8013834 <_txe_thread_suspend+0x30>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	4a08      	ldr	r2, [pc, #32]	@ (8013840 <_txe_thread_suspend+0x3c>)
 801381e:	4293      	cmp	r3, r2
 8013820:	d002      	beq.n	8013828 <_txe_thread_suspend+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013822:	230e      	movs	r3, #14
 8013824:	60fb      	str	r3, [r7, #12]
 8013826:	e005      	b.n	8013834 <_txe_thread_suspend+0x30>
    }
    else
    {

        /* Call actual thread suspend function.  */
        status =  _tx_thread_suspend(thread_ptr);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	0018      	movs	r0, r3
 801382c:	f7fe fa86 	bl	8011d3c <_tx_thread_suspend>
 8013830:	0003      	movs	r3, r0
 8013832:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 8013834:	68fb      	ldr	r3, [r7, #12]
}
 8013836:	0018      	movs	r0, r3
 8013838:	46bd      	mov	sp, r7
 801383a:	b004      	add	sp, #16
 801383c:	bd80      	pop	{r7, pc}
 801383e:	46c0      	nop			@ (mov r8, r8)
 8013840:	54485244 	.word	0x54485244

08013844 <_txe_thread_terminate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_thread_terminate(TX_THREAD *thread_ptr)
{
 8013844:	b580      	push	{r7, lr}
 8013846:	b084      	sub	sp, #16
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]

UINT        status;


    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d102      	bne.n	8013858 <_txe_thread_terminate+0x14>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013852:	230e      	movs	r3, #14
 8013854:	60fb      	str	r3, [r7, #12]
 8013856:	e018      	b.n	801388a <_txe_thread_terminate+0x46>
    }

    /* Now check for invalid thread ID.  */
    else if (thread_ptr -> tx_thread_id != TX_THREAD_ID)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	4a0d      	ldr	r2, [pc, #52]	@ (8013894 <_txe_thread_terminate+0x50>)
 801385e:	4293      	cmp	r3, r2
 8013860:	d002      	beq.n	8013868 <_txe_thread_terminate+0x24>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8013862:	230e      	movs	r3, #14
 8013864:	60fb      	str	r3, [r7, #12]
 8013866:	e010      	b.n	801388a <_txe_thread_terminate+0x46>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8013868:	f3ef 8305 	mrs	r3, IPSR
 801386c:	60bb      	str	r3, [r7, #8]
    return(ipsr_value);
 801386e:	68ba      	ldr	r2, [r7, #8]
    }

    /* Check for invalid caller of this function.  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8013870:	4b09      	ldr	r3, [pc, #36]	@ (8013898 <_txe_thread_terminate+0x54>)
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	4313      	orrs	r3, r2
 8013876:	d002      	beq.n	801387e <_txe_thread_terminate+0x3a>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 8013878:	2313      	movs	r3, #19
 801387a:	60fb      	str	r3, [r7, #12]
 801387c:	e005      	b.n	801388a <_txe_thread_terminate+0x46>
    }
    else
    {

        /* Call actual thread terminate function.  */
        status =  _tx_thread_terminate(thread_ptr);
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	0018      	movs	r0, r3
 8013882:	f7fe fd89 	bl	8012398 <_tx_thread_terminate>
 8013886:	0003      	movs	r3, r0
 8013888:	60fb      	str	r3, [r7, #12]
    }

    /* Return completion status.  */
    return(status);
 801388a:	68fb      	ldr	r3, [r7, #12]
}
 801388c:	0018      	movs	r0, r3
 801388e:	46bd      	mov	sp, r7
 8013890:	b004      	add	sp, #16
 8013892:	bd80      	pop	{r7, pc}
 8013894:	54485244 	.word	0x54485244
 8013898:	20000010 	.word	0x20000010

0801389c <__NVIC_EnableIRQ>:
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	0002      	movs	r2, r0
 80138a4:	1dfb      	adds	r3, r7, #7
 80138a6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80138a8:	1dfb      	adds	r3, r7, #7
 80138aa:	781b      	ldrb	r3, [r3, #0]
 80138ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80138ae:	d809      	bhi.n	80138c4 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80138b0:	1dfb      	adds	r3, r7, #7
 80138b2:	781b      	ldrb	r3, [r3, #0]
 80138b4:	001a      	movs	r2, r3
 80138b6:	231f      	movs	r3, #31
 80138b8:	401a      	ands	r2, r3
 80138ba:	4b04      	ldr	r3, [pc, #16]	@ (80138cc <__NVIC_EnableIRQ+0x30>)
 80138bc:	2101      	movs	r1, #1
 80138be:	4091      	lsls	r1, r2
 80138c0:	000a      	movs	r2, r1
 80138c2:	601a      	str	r2, [r3, #0]
}
 80138c4:	46c0      	nop			@ (mov r8, r8)
 80138c6:	46bd      	mov	sp, r7
 80138c8:	b002      	add	sp, #8
 80138ca:	bd80      	pop	{r7, pc}
 80138cc:	e000e100 	.word	0xe000e100

080138d0 <__NVIC_SetPriority>:
{
 80138d0:	b590      	push	{r4, r7, lr}
 80138d2:	b083      	sub	sp, #12
 80138d4:	af00      	add	r7, sp, #0
 80138d6:	0002      	movs	r2, r0
 80138d8:	6039      	str	r1, [r7, #0]
 80138da:	1dfb      	adds	r3, r7, #7
 80138dc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80138de:	1dfb      	adds	r3, r7, #7
 80138e0:	781b      	ldrb	r3, [r3, #0]
 80138e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80138e4:	d828      	bhi.n	8013938 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80138e6:	4a2f      	ldr	r2, [pc, #188]	@ (80139a4 <__NVIC_SetPriority+0xd4>)
 80138e8:	1dfb      	adds	r3, r7, #7
 80138ea:	781b      	ldrb	r3, [r3, #0]
 80138ec:	b25b      	sxtb	r3, r3
 80138ee:	089b      	lsrs	r3, r3, #2
 80138f0:	33c0      	adds	r3, #192	@ 0xc0
 80138f2:	009b      	lsls	r3, r3, #2
 80138f4:	589b      	ldr	r3, [r3, r2]
 80138f6:	1dfa      	adds	r2, r7, #7
 80138f8:	7812      	ldrb	r2, [r2, #0]
 80138fa:	0011      	movs	r1, r2
 80138fc:	2203      	movs	r2, #3
 80138fe:	400a      	ands	r2, r1
 8013900:	00d2      	lsls	r2, r2, #3
 8013902:	21ff      	movs	r1, #255	@ 0xff
 8013904:	4091      	lsls	r1, r2
 8013906:	000a      	movs	r2, r1
 8013908:	43d2      	mvns	r2, r2
 801390a:	401a      	ands	r2, r3
 801390c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801390e:	683b      	ldr	r3, [r7, #0]
 8013910:	019b      	lsls	r3, r3, #6
 8013912:	22ff      	movs	r2, #255	@ 0xff
 8013914:	401a      	ands	r2, r3
 8013916:	1dfb      	adds	r3, r7, #7
 8013918:	781b      	ldrb	r3, [r3, #0]
 801391a:	0018      	movs	r0, r3
 801391c:	2303      	movs	r3, #3
 801391e:	4003      	ands	r3, r0
 8013920:	00db      	lsls	r3, r3, #3
 8013922:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013924:	481f      	ldr	r0, [pc, #124]	@ (80139a4 <__NVIC_SetPriority+0xd4>)
 8013926:	1dfb      	adds	r3, r7, #7
 8013928:	781b      	ldrb	r3, [r3, #0]
 801392a:	b25b      	sxtb	r3, r3
 801392c:	089b      	lsrs	r3, r3, #2
 801392e:	430a      	orrs	r2, r1
 8013930:	33c0      	adds	r3, #192	@ 0xc0
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	501a      	str	r2, [r3, r0]
}
 8013936:	e031      	b.n	801399c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013938:	4a1b      	ldr	r2, [pc, #108]	@ (80139a8 <__NVIC_SetPriority+0xd8>)
 801393a:	1dfb      	adds	r3, r7, #7
 801393c:	781b      	ldrb	r3, [r3, #0]
 801393e:	0019      	movs	r1, r3
 8013940:	230f      	movs	r3, #15
 8013942:	400b      	ands	r3, r1
 8013944:	3b08      	subs	r3, #8
 8013946:	089b      	lsrs	r3, r3, #2
 8013948:	3306      	adds	r3, #6
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	18d3      	adds	r3, r2, r3
 801394e:	3304      	adds	r3, #4
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	1dfa      	adds	r2, r7, #7
 8013954:	7812      	ldrb	r2, [r2, #0]
 8013956:	0011      	movs	r1, r2
 8013958:	2203      	movs	r2, #3
 801395a:	400a      	ands	r2, r1
 801395c:	00d2      	lsls	r2, r2, #3
 801395e:	21ff      	movs	r1, #255	@ 0xff
 8013960:	4091      	lsls	r1, r2
 8013962:	000a      	movs	r2, r1
 8013964:	43d2      	mvns	r2, r2
 8013966:	401a      	ands	r2, r3
 8013968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 801396a:	683b      	ldr	r3, [r7, #0]
 801396c:	019b      	lsls	r3, r3, #6
 801396e:	22ff      	movs	r2, #255	@ 0xff
 8013970:	401a      	ands	r2, r3
 8013972:	1dfb      	adds	r3, r7, #7
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	0018      	movs	r0, r3
 8013978:	2303      	movs	r3, #3
 801397a:	4003      	ands	r3, r0
 801397c:	00db      	lsls	r3, r3, #3
 801397e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8013980:	4809      	ldr	r0, [pc, #36]	@ (80139a8 <__NVIC_SetPriority+0xd8>)
 8013982:	1dfb      	adds	r3, r7, #7
 8013984:	781b      	ldrb	r3, [r3, #0]
 8013986:	001c      	movs	r4, r3
 8013988:	230f      	movs	r3, #15
 801398a:	4023      	ands	r3, r4
 801398c:	3b08      	subs	r3, #8
 801398e:	089b      	lsrs	r3, r3, #2
 8013990:	430a      	orrs	r2, r1
 8013992:	3306      	adds	r3, #6
 8013994:	009b      	lsls	r3, r3, #2
 8013996:	18c3      	adds	r3, r0, r3
 8013998:	3304      	adds	r3, #4
 801399a:	601a      	str	r2, [r3, #0]
}
 801399c:	46c0      	nop			@ (mov r8, r8)
 801399e:	46bd      	mov	sp, r7
 80139a0:	b003      	add	sp, #12
 80139a2:	bd90      	pop	{r4, r7, pc}
 80139a4:	e000e100 	.word	0xe000e100
 80139a8:	e000ed00 	.word	0xe000ed00

080139ac <LL_UCPD_Enable>:
{
 80139ac:	b580      	push	{r7, lr}
 80139ae:	b082      	sub	sp, #8
 80139b0:	af00      	add	r7, sp, #0
 80139b2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	2280      	movs	r2, #128	@ 0x80
 80139ba:	0612      	lsls	r2, r2, #24
 80139bc:	431a      	orrs	r2, r3
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	601a      	str	r2, [r3, #0]
}
 80139c2:	46c0      	nop			@ (mov r8, r8)
 80139c4:	46bd      	mov	sp, r7
 80139c6:	b002      	add	sp, #8
 80139c8:	bd80      	pop	{r7, pc}
	...

080139cc <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	4a05      	ldr	r2, [pc, #20]	@ (80139f0 <LL_UCPD_SetRxOrderSet+0x24>)
 80139dc:	401a      	ands	r2, r3
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	431a      	orrs	r2, r3
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	601a      	str	r2, [r3, #0]
}
 80139e6:	46c0      	nop			@ (mov r8, r8)
 80139e8:	46bd      	mov	sp, r7
 80139ea:	b002      	add	sp, #8
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	46c0      	nop			@ (mov r8, r8)
 80139f0:	e00fffff 	.word	0xe00fffff

080139f4 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b082      	sub	sp, #8
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	4a05      	ldr	r2, [pc, #20]	@ (8013a18 <LL_UCPD_SetccEnable+0x24>)
 8013a04:	401a      	ands	r2, r3
 8013a06:	683b      	ldr	r3, [r7, #0]
 8013a08:	431a      	orrs	r2, r3
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	60da      	str	r2, [r3, #12]
}
 8013a0e:	46c0      	nop			@ (mov r8, r8)
 8013a10:	46bd      	mov	sp, r7
 8013a12:	b002      	add	sp, #8
 8013a14:	bd80      	pop	{r7, pc}
 8013a16:	46c0      	nop			@ (mov r8, r8)
 8013a18:	fffff3ff 	.word	0xfffff3ff

08013a1c <LL_UCPD_RxDisable>:
  * @rmtoll CR        PHYRXEN          LL_UCPD_RxDisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDisable(UCPD_TypeDef *UCPDx)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b082      	sub	sp, #8
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	2220      	movs	r2, #32
 8013a2a:	4393      	bics	r3, r2
 8013a2c:	001a      	movs	r2, r3
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	60da      	str	r2, [r3, #12]
}
 8013a32:	46c0      	nop			@ (mov r8, r8)
 8013a34:	46bd      	mov	sp, r7
 8013a36:	b002      	add	sp, #8
 8013a38:	bd80      	pop	{r7, pc}

08013a3a <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8013a3a:	b580      	push	{r7, lr}
 8013a3c:	b082      	sub	sp, #8
 8013a3e:	af00      	add	r7, sp, #0
 8013a40:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	691b      	ldr	r3, [r3, #16]
 8013a46:	2280      	movs	r2, #128	@ 0x80
 8013a48:	0212      	lsls	r2, r2, #8
 8013a4a:	431a      	orrs	r2, r3
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	611a      	str	r2, [r3, #16]
}
 8013a50:	46c0      	nop			@ (mov r8, r8)
 8013a52:	46bd      	mov	sp, r7
 8013a54:	b002      	add	sp, #8
 8013a56:	bd80      	pop	{r7, pc}

08013a58 <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	691b      	ldr	r3, [r3, #16]
 8013a64:	2280      	movs	r2, #128	@ 0x80
 8013a66:	01d2      	lsls	r2, r2, #7
 8013a68:	431a      	orrs	r2, r3
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	611a      	str	r2, [r3, #16]
}
 8013a6e:	46c0      	nop			@ (mov r8, r8)
 8013a70:	46bd      	mov	sp, r7
 8013a72:	b002      	add	sp, #8
 8013a74:	bd80      	pop	{r7, pc}
	...

08013a78 <CAD_Init>:
  * @param  pParams       Pointer on PD params based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 8013a78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013a7a:	b08b      	sub	sp, #44	@ 0x2c
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	60b9      	str	r1, [r7, #8]
 8013a80:	607a      	str	r2, [r7, #4]
 8013a82:	603b      	str	r3, [r7, #0]
 8013a84:	240f      	movs	r4, #15
 8013a86:	193b      	adds	r3, r7, r4
 8013a88:	1c02      	adds	r2, r0, #0
 8013a8a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013a8c:	193b      	adds	r3, r7, r4
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	011a      	lsls	r2, r3, #4
 8013a92:	4b7b      	ldr	r3, [pc, #492]	@ (8013c80 <CAD_Init+0x208>)
 8013a94:	18d3      	adds	r3, r2, r3
 8013a96:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 8013a98:	193b      	adds	r3, r7, r4
 8013a9a:	781a      	ldrb	r2, [r3, #0]
 8013a9c:	4979      	ldr	r1, [pc, #484]	@ (8013c84 <CAD_Init+0x20c>)
 8013a9e:	0013      	movs	r3, r2
 8013aa0:	011b      	lsls	r3, r3, #4
 8013aa2:	1a9b      	subs	r3, r3, r2
 8013aa4:	009b      	lsls	r3, r3, #2
 8013aa6:	18cb      	adds	r3, r1, r3
 8013aa8:	3310      	adds	r3, #16
 8013aaa:	687a      	ldr	r2, [r7, #4]
 8013aac:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 8013aae:	193b      	adds	r3, r7, r4
 8013ab0:	781a      	ldrb	r2, [r3, #0]
 8013ab2:	4974      	ldr	r1, [pc, #464]	@ (8013c84 <CAD_Init+0x20c>)
 8013ab4:	0013      	movs	r3, r2
 8013ab6:	011b      	lsls	r3, r3, #4
 8013ab8:	1a9b      	subs	r3, r3, r2
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	18cb      	adds	r3, r1, r3
 8013abe:	330c      	adds	r3, #12
 8013ac0:	68ba      	ldr	r2, [r7, #8]
 8013ac2:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 8013ac4:	193b      	adds	r3, r7, r4
 8013ac6:	781a      	ldrb	r2, [r3, #0]
 8013ac8:	496e      	ldr	r1, [pc, #440]	@ (8013c84 <CAD_Init+0x20c>)
 8013aca:	0013      	movs	r3, r2
 8013acc:	011b      	lsls	r3, r3, #4
 8013ace:	1a9b      	subs	r3, r3, r2
 8013ad0:	009b      	lsls	r3, r3, #2
 8013ad2:	18cb      	adds	r3, r1, r3
 8013ad4:	330c      	adds	r3, #12
 8013ad6:	6819      	ldr	r1, [r3, #0]
 8013ad8:	193b      	adds	r3, r7, r4
 8013ada:	781a      	ldrb	r2, [r3, #0]
 8013adc:	4869      	ldr	r0, [pc, #420]	@ (8013c84 <CAD_Init+0x20c>)
 8013ade:	0013      	movs	r3, r2
 8013ae0:	011b      	lsls	r3, r3, #4
 8013ae2:	1a9b      	subs	r3, r3, r2
 8013ae4:	009b      	lsls	r3, r3, #2
 8013ae6:	18c3      	adds	r3, r0, r3
 8013ae8:	3310      	adds	r3, #16
 8013aea:	681b      	ldr	r3, [r3, #0]
 8013aec:	794a      	ldrb	r2, [r1, #5]
 8013aee:	0612      	lsls	r2, r2, #24
 8013af0:	0f92      	lsrs	r2, r2, #30
 8013af2:	b2d2      	uxtb	r2, r2
 8013af4:	2103      	movs	r1, #3
 8013af6:	400a      	ands	r2, r1
 8013af8:	0010      	movs	r0, r2
 8013afa:	789a      	ldrb	r2, [r3, #2]
 8013afc:	2103      	movs	r1, #3
 8013afe:	438a      	bics	r2, r1
 8013b00:	1c11      	adds	r1, r2, #0
 8013b02:	1c02      	adds	r2, r0, #0
 8013b04:	430a      	orrs	r2, r1
 8013b06:	709a      	strb	r2, [r3, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 8013b08:	193b      	adds	r3, r7, r4
 8013b0a:	781a      	ldrb	r2, [r3, #0]
 8013b0c:	495d      	ldr	r1, [pc, #372]	@ (8013c84 <CAD_Init+0x20c>)
 8013b0e:	0013      	movs	r3, r2
 8013b10:	011b      	lsls	r3, r3, #4
 8013b12:	1a9b      	subs	r3, r3, r2
 8013b14:	009b      	lsls	r3, r3, #2
 8013b16:	18cb      	adds	r3, r1, r3
 8013b18:	3310      	adds	r3, #16
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	789a      	ldrb	r2, [r3, #2]
 8013b1e:	210c      	movs	r1, #12
 8013b20:	438a      	bics	r2, r1
 8013b22:	709a      	strb	r2, [r3, #2]

  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 8013b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b26:	2210      	movs	r2, #16
 8013b28:	2100      	movs	r1, #0
 8013b2a:	0018      	movs	r0, r3
 8013b2c:	f00a fb46 	bl	801e1bc <memset>

  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 8013b30:	193b      	adds	r3, r7, r4
 8013b32:	781a      	ldrb	r2, [r3, #0]
 8013b34:	4953      	ldr	r1, [pc, #332]	@ (8013c84 <CAD_Init+0x20c>)
 8013b36:	0013      	movs	r3, r2
 8013b38:	011b      	lsls	r3, r3, #4
 8013b3a:	1a9b      	subs	r3, r3, r2
 8013b3c:	009b      	lsls	r3, r3, #2
 8013b3e:	18cb      	adds	r3, r1, r3
 8013b40:	332c      	adds	r3, #44	@ 0x2c
 8013b42:	683a      	ldr	r2, [r7, #0]
 8013b44:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 8013b46:	0025      	movs	r5, r4
 8013b48:	193b      	adds	r3, r7, r4
 8013b4a:	781c      	ldrb	r4, [r3, #0]
 8013b4c:	197b      	adds	r3, r7, r5
 8013b4e:	781b      	ldrb	r3, [r3, #0]
 8013b50:	0018      	movs	r0, r3
 8013b52:	f001 f963 	bl	8014e1c <USBPD_HW_GetUSPDInstance>
 8013b56:	0001      	movs	r1, r0
 8013b58:	4a4a      	ldr	r2, [pc, #296]	@ (8013c84 <CAD_Init+0x20c>)
 8013b5a:	0023      	movs	r3, r4
 8013b5c:	011b      	lsls	r3, r3, #4
 8013b5e:	1b1b      	subs	r3, r3, r4
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	5099      	str	r1, [r3, r2]

  /* Initialize usbpd */
  LL_UCPD_StructInit(&settings);
 8013b64:	2614      	movs	r6, #20
 8013b66:	19bb      	adds	r3, r7, r6
 8013b68:	0018      	movs	r0, r3
 8013b6a:	f7f9 fbfd 	bl	800d368 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 8013b6e:	002c      	movs	r4, r5
 8013b70:	193b      	adds	r3, r7, r4
 8013b72:	781a      	ldrb	r2, [r3, #0]
 8013b74:	4943      	ldr	r1, [pc, #268]	@ (8013c84 <CAD_Init+0x20c>)
 8013b76:	0013      	movs	r3, r2
 8013b78:	011b      	lsls	r3, r3, #4
 8013b7a:	1a9b      	subs	r3, r3, r2
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	585b      	ldr	r3, [r3, r1]
 8013b80:	19ba      	adds	r2, r7, r6
 8013b82:	0011      	movs	r1, r2
 8013b84:	0018      	movs	r0, r3
 8013b86:	f7f9 fbb5 	bl	800d2f4 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 8013b8a:	193b      	adds	r3, r7, r4
 8013b8c:	781a      	ldrb	r2, [r3, #0]
 8013b8e:	493d      	ldr	r1, [pc, #244]	@ (8013c84 <CAD_Init+0x20c>)
 8013b90:	0013      	movs	r3, r2
 8013b92:	011b      	lsls	r3, r3, #4
 8013b94:	1a9b      	subs	r3, r3, r2
 8013b96:	009b      	lsls	r3, r3, #2
 8013b98:	585b      	ldr	r3, [r3, r1]
 8013b9a:	22f8      	movs	r2, #248	@ 0xf8
 8013b9c:	0452      	lsls	r2, r2, #17
 8013b9e:	0011      	movs	r1, r2
 8013ba0:	0018      	movs	r0, r3
 8013ba2:	f7ff ff13 	bl	80139cc <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8013ba6:	193b      	adds	r3, r7, r4
 8013ba8:	781a      	ldrb	r2, [r3, #0]
 8013baa:	4936      	ldr	r1, [pc, #216]	@ (8013c84 <CAD_Init+0x20c>)
 8013bac:	0013      	movs	r3, r2
 8013bae:	011b      	lsls	r3, r3, #4
 8013bb0:	1a9b      	subs	r3, r3, r2
 8013bb2:	009b      	lsls	r3, r3, #2
 8013bb4:	585b      	ldr	r3, [r3, r1]
 8013bb6:	22c0      	movs	r2, #192	@ 0xc0
 8013bb8:	0112      	lsls	r2, r2, #4
 8013bba:	0011      	movs	r1, r2
 8013bbc:	0018      	movs	r0, r3
 8013bbe:	f7ff ff19 	bl	80139f4 <LL_UCPD_SetccEnable>
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */


  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 8013bc2:	193b      	adds	r3, r7, r4
 8013bc4:	781b      	ldrb	r3, [r3, #0]
 8013bc6:	0018      	movs	r0, r3
 8013bc8:	f009 f9ff 	bl	801cfca <BSP_USBPD_PWR_Init>
#ifdef USBPD_PWR_CAPTIVE_CABLE_ENABLED
  BSP_USBPD_PWR_CaptiveCablePreConfig(PortNum);
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8013bcc:	193b      	adds	r3, r7, r4
 8013bce:	781a      	ldrb	r2, [r3, #0]
 8013bd0:	492c      	ldr	r1, [pc, #176]	@ (8013c84 <CAD_Init+0x20c>)
 8013bd2:	0013      	movs	r3, r2
 8013bd4:	011b      	lsls	r3, r3, #4
 8013bd6:	1a9b      	subs	r3, r3, r2
 8013bd8:	009b      	lsls	r3, r3, #2
 8013bda:	585b      	ldr	r3, [r3, r1]
 8013bdc:	0018      	movs	r0, r3
 8013bde:	f7ff fee5 	bl	80139ac <LL_UCPD_Enable>

#if defined(_SRC) || defined(_DRP)
  /* Initialize usbpd interrupt */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8013be2:	0020      	movs	r0, r4
 8013be4:	193b      	adds	r3, r7, r4
 8013be6:	781a      	ldrb	r2, [r3, #0]
 8013be8:	4926      	ldr	r1, [pc, #152]	@ (8013c84 <CAD_Init+0x20c>)
 8013bea:	0013      	movs	r3, r2
 8013bec:	011b      	lsls	r3, r3, #4
 8013bee:	1a9b      	subs	r3, r3, r2
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	18cb      	adds	r3, r1, r3
 8013bf4:	3310      	adds	r3, #16
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	2204      	movs	r2, #4
 8013bfc:	4013      	ands	r3, r2
 8013bfe:	b2db      	uxtb	r3, r3
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d005      	beq.n	8013c10 <CAD_Init+0x198>
  {
    USBPDM1_AssertRp(PortNum);
 8013c04:	183b      	adds	r3, r7, r0
 8013c06:	781b      	ldrb	r3, [r3, #0]
 8013c08:	0018      	movs	r0, r3
 8013c0a:	f002 fa61 	bl	80160d0 <USBPDM1_AssertRp>
 8013c0e:	e005      	b.n	8013c1c <CAD_Init+0x1a4>
#if defined(_DRP)
  else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
  {
    USBPDM1_AssertRd(PortNum);
 8013c10:	230f      	movs	r3, #15
 8013c12:	18fb      	adds	r3, r7, r3
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	0018      	movs	r0, r3
 8013c18:	f002 fb1c 	bl	8016254 <USBPDM1_AssertRd>
#endif /* USBPD_PWR_CAPTIVE_CABLE_ENABLED */

  /* Set the state machine according the SW configuration */
#if !defined(USBPDCORE_LIB_NO_PD)
#if defined(_DRP)
  if (Ports[PortNum].settings->CAD_RoleToggle == USBPD_TRUE)
 8013c1c:	200f      	movs	r0, #15
 8013c1e:	183b      	adds	r3, r7, r0
 8013c20:	781a      	ldrb	r2, [r3, #0]
 8013c22:	4918      	ldr	r1, [pc, #96]	@ (8013c84 <CAD_Init+0x20c>)
 8013c24:	0013      	movs	r3, r2
 8013c26:	011b      	lsls	r3, r3, #4
 8013c28:	1a9b      	subs	r3, r3, r2
 8013c2a:	009b      	lsls	r3, r3, #2
 8013c2c:	18cb      	adds	r3, r1, r3
 8013c2e:	330c      	adds	r3, #12
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	795b      	ldrb	r3, [r3, #5]
 8013c34:	2220      	movs	r2, #32
 8013c36:	4013      	ands	r3, r2
 8013c38:	b2db      	uxtb	r3, r3
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d01b      	beq.n	8013c76 <CAD_Init+0x1fe>
  {
    _handle->CAD_PtrStateMachine = CAD_StateMachine_DRP;
 8013c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c40:	4a11      	ldr	r2, [pc, #68]	@ (8013c88 <CAD_Init+0x210>)
 8013c42:	60da      	str	r2, [r3, #12]
    _handle->CAD_Accessory_SRC = Ports[PortNum].settings->CAD_AccesorySupport;
 8013c44:	183b      	adds	r3, r7, r0
 8013c46:	781a      	ldrb	r2, [r3, #0]
 8013c48:	490e      	ldr	r1, [pc, #56]	@ (8013c84 <CAD_Init+0x20c>)
 8013c4a:	0013      	movs	r3, r2
 8013c4c:	011b      	lsls	r3, r3, #4
 8013c4e:	1a9b      	subs	r3, r3, r2
 8013c50:	009b      	lsls	r3, r3, #2
 8013c52:	18cb      	adds	r3, r1, r3
 8013c54:	330c      	adds	r3, #12
 8013c56:	681b      	ldr	r3, [r3, #0]
 8013c58:	795b      	ldrb	r3, [r3, #5]
 8013c5a:	06db      	lsls	r3, r3, #27
 8013c5c:	0fdb      	lsrs	r3, r3, #31
 8013c5e:	b2da      	uxtb	r2, r3
 8013c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013c62:	2101      	movs	r1, #1
 8013c64:	400a      	ands	r2, r1
 8013c66:	0190      	lsls	r0, r2, #6
 8013c68:	785a      	ldrb	r2, [r3, #1]
 8013c6a:	2140      	movs	r1, #64	@ 0x40
 8013c6c:	438a      	bics	r2, r1
 8013c6e:	1c11      	adds	r1, r2, #0
 8013c70:	1c02      	adds	r2, r0, #0
 8013c72:	430a      	orrs	r2, r1
 8013c74:	705a      	strb	r2, [r3, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 8013c76:	46c0      	nop			@ (mov r8, r8)
 8013c78:	46bd      	mov	sp, r7
 8013c7a:	b00b      	add	sp, #44	@ 0x2c
 8013c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013c7e:	46c0      	nop			@ (mov r8, r8)
 8013c80:	200115f0 	.word	0x200115f0
 8013c84:	20011624 	.word	0x20011624
 8013c88:	08013d81 	.word	0x08013d81

08013c8c <CAD_Enter_ErrorRecovery>:
  * @brief  function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 8013c8c:	b580      	push	{r7, lr}
 8013c8e:	b082      	sub	sp, #8
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	0002      	movs	r2, r0
 8013c94:	1dfb      	adds	r3, r7, #7
 8013c96:	701a      	strb	r2, [r3, #0]
  /* remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 8013c98:	1dfb      	adds	r3, r7, #7
 8013c9a:	781b      	ldrb	r3, [r3, #0]
 8013c9c:	0018      	movs	r0, r3
 8013c9e:	f002 fb89 	bl	80163b4 <USBPDM1_EnterErrorRecovery>
  /* set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 8013ca2:	1dfb      	adds	r3, r7, #7
 8013ca4:	781a      	ldrb	r2, [r3, #0]
 8013ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8013cd4 <CAD_Enter_ErrorRecovery+0x48>)
 8013ca8:	0112      	lsls	r2, r2, #4
 8013caa:	5cd1      	ldrb	r1, [r2, r3]
 8013cac:	2080      	movs	r0, #128	@ 0x80
 8013cae:	4240      	negs	r0, r0
 8013cb0:	4301      	orrs	r1, r0
 8013cb2:	54d1      	strb	r1, [r2, r3]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8013cb4:	1dfb      	adds	r3, r7, #7
 8013cb6:	781a      	ldrb	r2, [r3, #0]
 8013cb8:	4907      	ldr	r1, [pc, #28]	@ (8013cd8 <CAD_Enter_ErrorRecovery+0x4c>)
 8013cba:	0013      	movs	r3, r2
 8013cbc:	011b      	lsls	r3, r3, #4
 8013cbe:	1a9b      	subs	r3, r3, r2
 8013cc0:	009b      	lsls	r3, r3, #2
 8013cc2:	18cb      	adds	r3, r1, r3
 8013cc4:	332c      	adds	r3, #44	@ 0x2c
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	4798      	blx	r3
}
 8013cca:	46c0      	nop			@ (mov r8, r8)
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	b002      	add	sp, #8
 8013cd0:	bd80      	pop	{r7, pc}
 8013cd2:	46c0      	nop			@ (mov r8, r8)
 8013cd4:	200115f0 	.word	0x200115f0
 8013cd8:	20011624 	.word	0x20011624

08013cdc <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	0002      	movs	r2, r0
 8013ce4:	6039      	str	r1, [r7, #0]
 8013ce6:	1dfb      	adds	r3, r7, #7
 8013ce8:	701a      	strb	r2, [r3, #0]
  /* update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 8013cea:	1dfb      	adds	r3, r7, #7
 8013cec:	781a      	ldrb	r2, [r3, #0]
 8013cee:	4918      	ldr	r1, [pc, #96]	@ (8013d50 <CAD_SRC_Set_ResistorRp+0x74>)
 8013cf0:	0013      	movs	r3, r2
 8013cf2:	011b      	lsls	r3, r3, #4
 8013cf4:	1a9b      	subs	r3, r3, r2
 8013cf6:	009b      	lsls	r3, r3, #2
 8013cf8:	18cb      	adds	r3, r1, r3
 8013cfa:	3310      	adds	r3, #16
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	683a      	ldr	r2, [r7, #0]
 8013d00:	1c11      	adds	r1, r2, #0
 8013d02:	2203      	movs	r2, #3
 8013d04:	400a      	ands	r2, r1
 8013d06:	b2d2      	uxtb	r2, r2
 8013d08:	2103      	movs	r1, #3
 8013d0a:	400a      	ands	r2, r1
 8013d0c:	0010      	movs	r0, r2
 8013d0e:	789a      	ldrb	r2, [r3, #2]
 8013d10:	2103      	movs	r1, #3
 8013d12:	438a      	bics	r2, r1
 8013d14:	1c11      	adds	r1, r2, #0
 8013d16:	1c02      	adds	r2, r0, #0
 8013d18:	430a      	orrs	r2, r1
 8013d1a:	709a      	strb	r2, [r3, #2]

  /* inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 8013d1c:	1dfb      	adds	r3, r7, #7
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	4a0c      	ldr	r2, [pc, #48]	@ (8013d54 <CAD_SRC_Set_ResistorRp+0x78>)
 8013d22:	011b      	lsls	r3, r3, #4
 8013d24:	18d3      	adds	r3, r2, r3
 8013d26:	785a      	ldrb	r2, [r3, #1]
 8013d28:	2101      	movs	r1, #1
 8013d2a:	430a      	orrs	r2, r1
 8013d2c:	705a      	strb	r2, [r3, #1]
  Ports[PortNum].USBPD_CAD_WakeUp();
 8013d2e:	1dfb      	adds	r3, r7, #7
 8013d30:	781a      	ldrb	r2, [r3, #0]
 8013d32:	4907      	ldr	r1, [pc, #28]	@ (8013d50 <CAD_SRC_Set_ResistorRp+0x74>)
 8013d34:	0013      	movs	r3, r2
 8013d36:	011b      	lsls	r3, r3, #4
 8013d38:	1a9b      	subs	r3, r3, r2
 8013d3a:	009b      	lsls	r3, r3, #2
 8013d3c:	18cb      	adds	r3, r1, r3
 8013d3e:	332c      	adds	r3, #44	@ 0x2c
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	4798      	blx	r3
  return 0;
 8013d44:	2300      	movs	r3, #0
}
 8013d46:	0018      	movs	r0, r3
 8013d48:	46bd      	mov	sp, r7
 8013d4a:	b002      	add	sp, #8
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	46c0      	nop			@ (mov r8, r8)
 8013d50:	20011624 	.word	0x20011624
 8013d54:	200115f0 	.word	0x200115f0

08013d58 <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 8013d58:	b580      	push	{r7, lr}
 8013d5a:	b082      	sub	sp, #8
 8013d5c:	af00      	add	r7, sp, #0
 8013d5e:	0002      	movs	r2, r0
 8013d60:	6039      	str	r1, [r7, #0]
 8013d62:	1dfb      	adds	r3, r7, #7
 8013d64:	701a      	strb	r2, [r3, #0]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 8013d66:	683a      	ldr	r2, [r7, #0]
 8013d68:	1dfb      	adds	r3, r7, #7
 8013d6a:	781b      	ldrb	r3, [r3, #0]
 8013d6c:	0011      	movs	r1, r2
 8013d6e:	0018      	movs	r0, r3
 8013d70:	f7ff ffb4 	bl	8013cdc <CAD_SRC_Set_ResistorRp>
 8013d74:	0003      	movs	r3, r0
}
 8013d76:	0018      	movs	r0, r3
 8013d78:	46bd      	mov	sp, r7
 8013d7a:	b002      	add	sp, #8
 8013d7c:	bd80      	pop	{r7, pc}
	...

08013d80 <CAD_StateMachine_DRP>:
#endif /* _SRC */

#if defined(_DRP)
/* function to handle DRP */
uint32_t CAD_StateMachine_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013d80:	b590      	push	{r4, r7, lr}
 8013d82:	b087      	sub	sp, #28
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60b9      	str	r1, [r7, #8]
 8013d88:	607a      	str	r2, [r7, #4]
 8013d8a:	210f      	movs	r1, #15
 8013d8c:	187b      	adds	r3, r7, r1
 8013d8e:	1c02      	adds	r2, r0, #0
 8013d90:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013d92:	187b      	adds	r3, r7, r1
 8013d94:	781b      	ldrb	r3, [r3, #0]
 8013d96:	011a      	lsls	r2, r3, #4
 8013d98:	4b6b      	ldr	r3, [pc, #428]	@ (8013f48 <CAD_StateMachine_DRP+0x1c8>)
 8013d9a:	18d3      	adds	r3, r2, r3
 8013d9c:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013d9e:	2302      	movs	r3, #2
 8013da0:	617b      	str	r3, [r7, #20]

  /*Check CAD STATE*/
  switch (_handle->cstate)
 8013da2:	693b      	ldr	r3, [r7, #16]
 8013da4:	785b      	ldrb	r3, [r3, #1]
 8013da6:	069b      	lsls	r3, r3, #26
 8013da8:	0edb      	lsrs	r3, r3, #27
 8013daa:	b2db      	uxtb	r3, r3
 8013dac:	2b0b      	cmp	r3, #11
 8013dae:	d900      	bls.n	8013db2 <CAD_StateMachine_DRP+0x32>
 8013db0:	e0c4      	b.n	8013f3c <CAD_StateMachine_DRP+0x1bc>
 8013db2:	009a      	lsls	r2, r3, #2
 8013db4:	4b65      	ldr	r3, [pc, #404]	@ (8013f4c <CAD_StateMachine_DRP+0x1cc>)
 8013db6:	18d3      	adds	r3, r2, r3
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	469f      	mov	pc, r3
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn management */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8013dbc:	230f      	movs	r3, #15
 8013dbe:	18fb      	adds	r3, r7, r3
 8013dc0:	781b      	ldrb	r3, [r3, #0]
 8013dc2:	0018      	movs	r0, r3
 8013dc4:	f009 f923 	bl	801d00e <BSP_USBPD_PWR_VBUSDeInit>
      _timing = 0;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	785a      	ldrb	r2, [r3, #1]
 8013dd0:	213e      	movs	r1, #62	@ 0x3e
 8013dd2:	438a      	bics	r2, r1
 8013dd4:	1c11      	adds	r1, r2, #0
 8013dd6:	2212      	movs	r2, #18
 8013dd8:	430a      	orrs	r2, r1
 8013dda:	705a      	strb	r2, [r3, #1]
      break;
 8013ddc:	e0af      	b.n	8013f3e <CAD_StateMachine_DRP+0x1be>
    }

    case USBPD_CAD_STATE_SWITCH_TO_SRC:
    case USBPD_CAD_STATE_SWITCH_TO_SNK:
    {
      LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8013dde:	240f      	movs	r4, #15
 8013de0:	193b      	adds	r3, r7, r4
 8013de2:	781a      	ldrb	r2, [r3, #0]
 8013de4:	495a      	ldr	r1, [pc, #360]	@ (8013f50 <CAD_StateMachine_DRP+0x1d0>)
 8013de6:	0013      	movs	r3, r2
 8013de8:	011b      	lsls	r3, r3, #4
 8013dea:	1a9b      	subs	r3, r3, r2
 8013dec:	009b      	lsls	r3, r3, #2
 8013dee:	585b      	ldr	r3, [r3, r1]
 8013df0:	0018      	movs	r0, r3
 8013df2:	f7ff fe13 	bl	8013a1c <LL_UCPD_RxDisable>
      if (USBPD_CAD_STATE_SWITCH_TO_SRC == _handle->cstate)
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	785b      	ldrb	r3, [r3, #1]
 8013dfa:	223e      	movs	r2, #62	@ 0x3e
 8013dfc:	4013      	ands	r3, r2
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	2b10      	cmp	r3, #16
 8013e02:	d12d      	bne.n	8013e60 <CAD_StateMachine_DRP+0xe0>
      {
        USBPDM1_AssertRp(PortNum);
 8013e04:	193b      	adds	r3, r7, r4
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	0018      	movs	r0, r3
 8013e0a:	f002 f961 	bl	80160d0 <USBPDM1_AssertRp>
        Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SRC;
 8013e0e:	0020      	movs	r0, r4
 8013e10:	183b      	adds	r3, r7, r0
 8013e12:	781a      	ldrb	r2, [r3, #0]
 8013e14:	494e      	ldr	r1, [pc, #312]	@ (8013f50 <CAD_StateMachine_DRP+0x1d0>)
 8013e16:	0013      	movs	r3, r2
 8013e18:	011b      	lsls	r3, r3, #4
 8013e1a:	1a9b      	subs	r3, r3, r2
 8013e1c:	009b      	lsls	r3, r3, #2
 8013e1e:	18cb      	adds	r3, r1, r3
 8013e20:	3310      	adds	r3, #16
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	781a      	ldrb	r2, [r3, #0]
 8013e26:	2104      	movs	r1, #4
 8013e28:	430a      	orrs	r2, r1
 8013e2a:	701a      	strb	r2, [r3, #0]
        Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_DFP;
 8013e2c:	183b      	adds	r3, r7, r0
 8013e2e:	781a      	ldrb	r2, [r3, #0]
 8013e30:	4947      	ldr	r1, [pc, #284]	@ (8013f50 <CAD_StateMachine_DRP+0x1d0>)
 8013e32:	0013      	movs	r3, r2
 8013e34:	011b      	lsls	r3, r3, #4
 8013e36:	1a9b      	subs	r3, r3, r2
 8013e38:	009b      	lsls	r3, r3, #2
 8013e3a:	18cb      	adds	r3, r1, r3
 8013e3c:	3310      	adds	r3, #16
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	781a      	ldrb	r2, [r3, #0]
 8013e42:	2108      	movs	r1, #8
 8013e44:	430a      	orrs	r2, r1
 8013e46:	701a      	strb	r2, [r3, #0]
        _timing = Ports[PortNum].settings->CAD_SRCToggleTime;
 8013e48:	183b      	adds	r3, r7, r0
 8013e4a:	781a      	ldrb	r2, [r3, #0]
 8013e4c:	4940      	ldr	r1, [pc, #256]	@ (8013f50 <CAD_StateMachine_DRP+0x1d0>)
 8013e4e:	0013      	movs	r3, r2
 8013e50:	011b      	lsls	r3, r3, #4
 8013e52:	1a9b      	subs	r3, r3, r2
 8013e54:	009b      	lsls	r3, r3, #2
 8013e56:	18cb      	adds	r3, r1, r3
 8013e58:	330c      	adds	r3, #12
 8013e5a:	681b      	ldr	r3, [r3, #0]
 8013e5c:	79db      	ldrb	r3, [r3, #7]
 8013e5e:	617b      	str	r3, [r7, #20]
      }
      if (USBPD_CAD_STATE_SWITCH_TO_SNK == _handle->cstate)
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	785b      	ldrb	r3, [r3, #1]
 8013e64:	223e      	movs	r2, #62	@ 0x3e
 8013e66:	4013      	ands	r3, r2
 8013e68:	b2db      	uxtb	r3, r3
 8013e6a:	2b12      	cmp	r3, #18
 8013e6c:	d12e      	bne.n	8013ecc <CAD_StateMachine_DRP+0x14c>
      {
        USBPDM1_AssertRd(PortNum);
 8013e6e:	240f      	movs	r4, #15
 8013e70:	193b      	adds	r3, r7, r4
 8013e72:	781b      	ldrb	r3, [r3, #0]
 8013e74:	0018      	movs	r0, r3
 8013e76:	f002 f9ed 	bl	8016254 <USBPDM1_AssertRd>
        Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 8013e7a:	0020      	movs	r0, r4
 8013e7c:	183b      	adds	r3, r7, r0
 8013e7e:	781a      	ldrb	r2, [r3, #0]
 8013e80:	4933      	ldr	r1, [pc, #204]	@ (8013f50 <CAD_StateMachine_DRP+0x1d0>)
 8013e82:	0013      	movs	r3, r2
 8013e84:	011b      	lsls	r3, r3, #4
 8013e86:	1a9b      	subs	r3, r3, r2
 8013e88:	009b      	lsls	r3, r3, #2
 8013e8a:	18cb      	adds	r3, r1, r3
 8013e8c:	3310      	adds	r3, #16
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	781a      	ldrb	r2, [r3, #0]
 8013e92:	2104      	movs	r1, #4
 8013e94:	438a      	bics	r2, r1
 8013e96:	701a      	strb	r2, [r3, #0]
        Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_UFP;
 8013e98:	183b      	adds	r3, r7, r0
 8013e9a:	781a      	ldrb	r2, [r3, #0]
 8013e9c:	492c      	ldr	r1, [pc, #176]	@ (8013f50 <CAD_StateMachine_DRP+0x1d0>)
 8013e9e:	0013      	movs	r3, r2
 8013ea0:	011b      	lsls	r3, r3, #4
 8013ea2:	1a9b      	subs	r3, r3, r2
 8013ea4:	009b      	lsls	r3, r3, #2
 8013ea6:	18cb      	adds	r3, r1, r3
 8013ea8:	3310      	adds	r3, #16
 8013eaa:	681b      	ldr	r3, [r3, #0]
 8013eac:	781a      	ldrb	r2, [r3, #0]
 8013eae:	2108      	movs	r1, #8
 8013eb0:	438a      	bics	r2, r1
 8013eb2:	701a      	strb	r2, [r3, #0]
        _timing = Ports[PortNum].settings->CAD_SNKToggleTime;
 8013eb4:	183b      	adds	r3, r7, r0
 8013eb6:	781a      	ldrb	r2, [r3, #0]
 8013eb8:	4925      	ldr	r1, [pc, #148]	@ (8013f50 <CAD_StateMachine_DRP+0x1d0>)
 8013eba:	0013      	movs	r3, r2
 8013ebc:	011b      	lsls	r3, r3, #4
 8013ebe:	1a9b      	subs	r3, r3, r2
 8013ec0:	009b      	lsls	r3, r3, #2
 8013ec2:	18cb      	adds	r3, r1, r3
 8013ec4:	330c      	adds	r3, #12
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	799b      	ldrb	r3, [r3, #6]
 8013eca:	617b      	str	r3, [r7, #20]
      }
      _handle->CAD_tToggle_start = HAL_GetTick();
 8013ecc:	f7f4 fa0a 	bl	80082e4 <HAL_GetTick>
 8013ed0:	0002      	movs	r2, r0
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	785a      	ldrb	r2, [r3, #1]
 8013eda:	213e      	movs	r1, #62	@ 0x3e
 8013edc:	438a      	bics	r2, r1
 8013ede:	1c11      	adds	r1, r2, #0
 8013ee0:	2202      	movs	r2, #2
 8013ee2:	430a      	orrs	r2, r1
 8013ee4:	705a      	strb	r2, [r3, #1]
    }
    break;
 8013ee6:	e02a      	b.n	8013f3e <CAD_StateMachine_DRP+0x1be>

    case USBPD_CAD_STATE_DETACHED:
      _timing = ManageStateDetached_DRP(PortNum);
 8013ee8:	230f      	movs	r3, #15
 8013eea:	18fb      	adds	r3, r7, r3
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	0018      	movs	r0, r3
 8013ef0:	f000 fb06 	bl	8014500 <ManageStateDetached_DRP>
 8013ef4:	0003      	movs	r3, r0
 8013ef6:	617b      	str	r3, [r7, #20]
      break;
 8013ef8:	e021      	b.n	8013f3e <CAD_StateMachine_DRP+0x1be>

    /*CAD STATE ATTACHED WAIT*/
    case USBPD_CAD_STATE_ATTACHED_WAIT:
      _timing = ManageStateAttachedWait_DRP(PortNum, pEvent, pCCXX);
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	68b9      	ldr	r1, [r7, #8]
 8013efe:	230f      	movs	r3, #15
 8013f00:	18fb      	adds	r3, r7, r3
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	0018      	movs	r0, r3
 8013f06:	f000 fd93 	bl	8014a30 <ManageStateAttachedWait_DRP>
 8013f0a:	0003      	movs	r3, r0
 8013f0c:	617b      	str	r3, [r7, #20]
      break;
 8013f0e:	e016      	b.n	8013f3e <CAD_StateMachine_DRP+0x1be>
    }
#endif /* _ACCESSORY_SRC */

    /* CAD ELECTRONIC CABLE ATTACHED */
    case USBPD_CAD_STATE_EMC :
      _timing = ManageStateEMC(PortNum, pEvent, pCCXX);
 8013f10:	687a      	ldr	r2, [r7, #4]
 8013f12:	68b9      	ldr	r1, [r7, #8]
 8013f14:	230f      	movs	r3, #15
 8013f16:	18fb      	adds	r3, r7, r3
 8013f18:	781b      	ldrb	r3, [r3, #0]
 8013f1a:	0018      	movs	r0, r3
 8013f1c:	f000 fcbc 	bl	8014898 <ManageStateEMC>
 8013f20:	0003      	movs	r3, r0
 8013f22:	617b      	str	r3, [r7, #20]
      break;
 8013f24:	e00b      	b.n	8013f3e <CAD_StateMachine_DRP+0x1be>

    /*CAD electronic cable with Sink ATTACHED*/
    case USBPD_CAD_STATE_ATTEMC:
    case USBPD_CAD_STATE_ATTACHED:
      _timing = ManageStateAttached_DRP(PortNum, pEvent, pCCXX);
 8013f26:	687a      	ldr	r2, [r7, #4]
 8013f28:	68b9      	ldr	r1, [r7, #8]
 8013f2a:	230f      	movs	r3, #15
 8013f2c:	18fb      	adds	r3, r7, r3
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	0018      	movs	r0, r3
 8013f32:	f000 fd2f 	bl	8014994 <ManageStateAttached_DRP>
 8013f36:	0003      	movs	r3, r0
 8013f38:	617b      	str	r3, [r7, #20]
      break;
 8013f3a:	e000      	b.n	8013f3e <CAD_StateMachine_DRP+0x1be>

    default :
      break;
 8013f3c:	46c0      	nop			@ (mov r8, r8)
  }

  return _timing;
 8013f3e:	697b      	ldr	r3, [r7, #20]
}
 8013f40:	0018      	movs	r0, r3
 8013f42:	46bd      	mov	sp, r7
 8013f44:	b007      	add	sp, #28
 8013f46:	bd90      	pop	{r4, r7, pc}
 8013f48:	200115f0 	.word	0x200115f0
 8013f4c:	0801e508 	.word	0x0801e508
 8013f50:	20011624 	.word	0x20011624

08013f54 <CAD_StateMachine>:
#endif /* _DRP */

#if !defined(USBPDCORE_LIB_NO_PD)
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8013f54:	b590      	push	{r4, r7, lr}
 8013f56:	b087      	sub	sp, #28
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	60b9      	str	r1, [r7, #8]
 8013f5c:	607a      	str	r2, [r7, #4]
 8013f5e:	210f      	movs	r1, #15
 8013f60:	187b      	adds	r3, r7, r1
 8013f62:	1c02      	adds	r2, r0, #0
 8013f64:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8013f66:	187b      	adds	r3, r7, r1
 8013f68:	781b      	ldrb	r3, [r3, #0]
 8013f6a:	011a      	lsls	r2, r3, #4
 8013f6c:	4b72      	ldr	r3, [pc, #456]	@ (8014138 <CAD_StateMachine+0x1e4>)
 8013f6e:	18d3      	adds	r3, r2, r3
 8013f70:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8013f72:	2302      	movs	r3, #2
 8013f74:	617b      	str	r3, [r7, #20]

  /* set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 8013f76:	68bb      	ldr	r3, [r7, #8]
 8013f78:	2200      	movs	r2, #0
 8013f7a:	701a      	strb	r2, [r3, #0]

  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 8013f7c:	187b      	adds	r3, r7, r1
 8013f7e:	781a      	ldrb	r2, [r3, #0]
 8013f80:	496e      	ldr	r1, [pc, #440]	@ (801413c <CAD_StateMachine+0x1e8>)
 8013f82:	0013      	movs	r3, r2
 8013f84:	011b      	lsls	r3, r3, #4
 8013f86:	1a9b      	subs	r3, r3, r2
 8013f88:	009b      	lsls	r3, r3, #2
 8013f8a:	18cb      	adds	r3, r1, r3
 8013f8c:	3310      	adds	r3, #16
 8013f8e:	681b      	ldr	r3, [r3, #0]
 8013f90:	781b      	ldrb	r3, [r3, #0]
 8013f92:	2210      	movs	r2, #16
 8013f94:	4013      	ands	r3, r2
 8013f96:	b2db      	uxtb	r3, r3
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d001      	beq.n	8013fa0 <CAD_StateMachine+0x4c>
  {
    return _timing;
 8013f9c:	697b      	ldr	r3, [r7, #20]
 8013f9e:	e0c6      	b.n	801412e <CAD_StateMachine+0x1da>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	781b      	ldrb	r3, [r3, #0]
 8013fa4:	227f      	movs	r2, #127	@ 0x7f
 8013fa6:	4393      	bics	r3, r2
 8013fa8:	b2db      	uxtb	r3, r3
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00c      	beq.n	8013fc8 <CAD_StateMachine+0x74>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 8013fae:	693b      	ldr	r3, [r7, #16]
 8013fb0:	781a      	ldrb	r2, [r3, #0]
 8013fb2:	217f      	movs	r1, #127	@ 0x7f
 8013fb4:	400a      	ands	r2, r1
 8013fb6:	701a      	strb	r2, [r3, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 8013fb8:	693b      	ldr	r3, [r7, #16]
 8013fba:	785a      	ldrb	r2, [r3, #1]
 8013fbc:	213e      	movs	r1, #62	@ 0x3e
 8013fbe:	438a      	bics	r2, r1
 8013fc0:	1c11      	adds	r1, r2, #0
 8013fc2:	2218      	movs	r2, #24
 8013fc4:	430a      	orrs	r2, r1
 8013fc6:	705a      	strb	r2, [r3, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	785b      	ldrb	r3, [r3, #1]
 8013fcc:	069b      	lsls	r3, r3, #26
 8013fce:	0edb      	lsrs	r3, r3, #27
 8013fd0:	b2db      	uxtb	r3, r3
 8013fd2:	2b0d      	cmp	r3, #13
 8013fd4:	d06a      	beq.n	80140ac <CAD_StateMachine+0x158>
 8013fd6:	dd00      	ble.n	8013fda <CAD_StateMachine+0x86>
 8013fd8:	e09b      	b.n	8014112 <CAD_StateMachine+0x1be>
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d002      	beq.n	8013fe4 <CAD_StateMachine+0x90>
 8013fde:	2b0c      	cmp	r3, #12
 8013fe0:	d038      	beq.n	8014054 <CAD_StateMachine+0x100>
 8013fe2:	e096      	b.n	8014112 <CAD_StateMachine+0x1be>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 8013fe4:	240f      	movs	r4, #15
 8013fe6:	193b      	adds	r3, r7, r4
 8013fe8:	781a      	ldrb	r2, [r3, #0]
 8013fea:	4954      	ldr	r1, [pc, #336]	@ (801413c <CAD_StateMachine+0x1e8>)
 8013fec:	0013      	movs	r3, r2
 8013fee:	011b      	lsls	r3, r3, #4
 8013ff0:	1a9b      	subs	r3, r3, r2
 8013ff2:	009b      	lsls	r3, r3, #2
 8013ff4:	585b      	ldr	r3, [r3, r1]
 8013ff6:	0018      	movs	r0, r3
 8013ff8:	f7ff fd1f 	bl	8013a3a <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 8013ffc:	193b      	adds	r3, r7, r4
 8013ffe:	781a      	ldrb	r2, [r3, #0]
 8014000:	494e      	ldr	r1, [pc, #312]	@ (801413c <CAD_StateMachine+0x1e8>)
 8014002:	0013      	movs	r3, r2
 8014004:	011b      	lsls	r3, r3, #4
 8014006:	1a9b      	subs	r3, r3, r2
 8014008:	009b      	lsls	r3, r3, #2
 801400a:	585b      	ldr	r3, [r3, r1]
 801400c:	0018      	movs	r0, r3
 801400e:	f7ff fd23 	bl	8013a58 <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      if (0 == PortNum)
 8014012:	193b      	adds	r3, r7, r4
 8014014:	781b      	ldrb	r3, [r3, #0]
 8014016:	2b00      	cmp	r3, #0
 8014018:	d107      	bne.n	801402a <CAD_StateMachine+0xd6>
      {
        UCPD_INSTANCE0_ENABLEIRQ;
 801401a:	2102      	movs	r1, #2
 801401c:	2008      	movs	r0, #8
 801401e:	f7ff fc57 	bl	80138d0 <__NVIC_SetPriority>
 8014022:	2008      	movs	r0, #8
 8014024:	f7ff fc3a 	bl	801389c <__NVIC_EnableIRQ>
 8014028:	e006      	b.n	8014038 <CAD_StateMachine+0xe4>
      }
#if USBPD_PORT_COUNT > 1
      else
      {
        UCPD_INSTANCE1_ENABLEIRQ;
 801402a:	2102      	movs	r1, #2
 801402c:	2008      	movs	r0, #8
 801402e:	f7ff fc4f 	bl	80138d0 <__NVIC_SetPriority>
 8014032:	2008      	movs	r0, #8
 8014034:	f7ff fc32 	bl	801389c <__NVIC_EnableIRQ>
      }
#endif /* USBPD_PORT_COUNT > 1 */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
 8014038:	f7f4 f954 	bl	80082e4 <HAL_GetTick>
 801403c:	0002      	movs	r2, r0
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	605a      	str	r2, [r3, #4]
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	785a      	ldrb	r2, [r3, #1]
 8014046:	213e      	movs	r1, #62	@ 0x3e
 8014048:	438a      	bics	r2, r1
 801404a:	1c11      	adds	r1, r2, #0
 801404c:	2202      	movs	r2, #2
 801404e:	430a      	orrs	r2, r1
 8014050:	705a      	strb	r2, [r3, #1]
      break;
 8014052:	e06b      	b.n	801412c <CAD_StateMachine+0x1d8>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 8014054:	240f      	movs	r4, #15
 8014056:	193b      	adds	r3, r7, r4
 8014058:	781b      	ldrb	r3, [r3, #0]
 801405a:	0018      	movs	r0, r3
 801405c:	f002 f9aa 	bl	80163b4 <USBPDM1_EnterErrorRecovery>

      /* forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 8014060:	193b      	adds	r3, r7, r4
 8014062:	781a      	ldrb	r2, [r3, #0]
 8014064:	4935      	ldr	r1, [pc, #212]	@ (801413c <CAD_StateMachine+0x1e8>)
 8014066:	0013      	movs	r3, r2
 8014068:	011b      	lsls	r3, r3, #4
 801406a:	1a9b      	subs	r3, r3, r2
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	18cb      	adds	r3, r1, r3
 8014070:	3334      	adds	r3, #52	@ 0x34
 8014072:	2200      	movs	r2, #0
 8014074:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	2200      	movs	r2, #0
 801407a:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	781a      	ldrb	r2, [r3, #0]
 8014080:	2103      	movs	r1, #3
 8014082:	438a      	bics	r2, r1
 8014084:	701a      	strb	r2, [r3, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	2201      	movs	r2, #1
 801408a:	701a      	strb	r2, [r3, #0]

      /* start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 801408c:	f7f4 f92a 	bl	80082e4 <HAL_GetTick>
 8014090:	0002      	movs	r2, r0
 8014092:	693b      	ldr	r3, [r7, #16]
 8014094:	609a      	str	r2, [r3, #8]
      _timing = CAD_TERROR_RECOVERY_TIME;
 8014096:	231a      	movs	r3, #26
 8014098:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 801409a:	693b      	ldr	r3, [r7, #16]
 801409c:	785a      	ldrb	r2, [r3, #1]
 801409e:	213e      	movs	r1, #62	@ 0x3e
 80140a0:	438a      	bics	r2, r1
 80140a2:	1c11      	adds	r1, r2, #0
 80140a4:	221a      	movs	r2, #26
 80140a6:	430a      	orrs	r2, r1
 80140a8:	705a      	strb	r2, [r3, #1]
      break;
 80140aa:	e03f      	b.n	801412c <CAD_StateMachine+0x1d8>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 80140ac:	f7f4 f91a 	bl	80082e4 <HAL_GetTick>
 80140b0:	0002      	movs	r2, r0
 80140b2:	693b      	ldr	r3, [r7, #16]
 80140b4:	689b      	ldr	r3, [r3, #8]
 80140b6:	1ad3      	subs	r3, r2, r3
 80140b8:	2b1a      	cmp	r3, #26
 80140ba:	d936      	bls.n	801412a <CAD_StateMachine+0x1d6>
        port source  to src
        port snk     to snk
        port drp     to src   */

#if defined(_SRC) || defined(_DRP)
        if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 80140bc:	200f      	movs	r0, #15
 80140be:	183b      	adds	r3, r7, r0
 80140c0:	781a      	ldrb	r2, [r3, #0]
 80140c2:	491e      	ldr	r1, [pc, #120]	@ (801413c <CAD_StateMachine+0x1e8>)
 80140c4:	0013      	movs	r3, r2
 80140c6:	011b      	lsls	r3, r3, #4
 80140c8:	1a9b      	subs	r3, r3, r2
 80140ca:	009b      	lsls	r3, r3, #2
 80140cc:	18cb      	adds	r3, r1, r3
 80140ce:	3310      	adds	r3, #16
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	2204      	movs	r2, #4
 80140d6:	4013      	ands	r3, r2
 80140d8:	b2db      	uxtb	r3, r3
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d005      	beq.n	80140ea <CAD_StateMachine+0x196>
        {
          USBPDM1_AssertRp(PortNum);
 80140de:	183b      	adds	r3, r7, r0
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	0018      	movs	r0, r3
 80140e4:	f001 fff4 	bl	80160d0 <USBPDM1_AssertRp>
 80140e8:	e005      	b.n	80140f6 <CAD_StateMachine+0x1a2>
#if defined(_DRP)
        else
#endif /* _DRP */
#if defined(_SNK) || defined(_DRP)
        {
          USBPDM1_AssertRd(PortNum);
 80140ea:	230f      	movs	r3, #15
 80140ec:	18fb      	adds	r3, r7, r3
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	0018      	movs	r0, r3
 80140f2:	f002 f8af 	bl	8016254 <USBPDM1_AssertRd>
        }
#endif /* _SNK || _DRP */
        /* switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
 80140f6:	f7f4 f8f5 	bl	80082e4 <HAL_GetTick>
 80140fa:	0002      	movs	r2, r0
 80140fc:	693b      	ldr	r3, [r7, #16]
 80140fe:	605a      	str	r2, [r3, #4]
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 8014100:	693b      	ldr	r3, [r7, #16]
 8014102:	785a      	ldrb	r2, [r3, #1]
 8014104:	213e      	movs	r1, #62	@ 0x3e
 8014106:	438a      	bics	r2, r1
 8014108:	1c11      	adds	r1, r2, #0
 801410a:	2202      	movs	r2, #2
 801410c:	430a      	orrs	r2, r1
 801410e:	705a      	strb	r2, [r3, #1]
      }
      break;
 8014110:	e00b      	b.n	801412a <CAD_StateMachine+0x1d6>
    }

    default:
    {
      /* call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	68db      	ldr	r3, [r3, #12]
 8014116:	687c      	ldr	r4, [r7, #4]
 8014118:	68b9      	ldr	r1, [r7, #8]
 801411a:	220f      	movs	r2, #15
 801411c:	18ba      	adds	r2, r7, r2
 801411e:	7810      	ldrb	r0, [r2, #0]
 8014120:	0022      	movs	r2, r4
 8014122:	4798      	blx	r3
 8014124:	0003      	movs	r3, r0
 8014126:	617b      	str	r3, [r7, #20]
      break;
 8014128:	e000      	b.n	801412c <CAD_StateMachine+0x1d8>
      break;
 801412a:	46c0      	nop			@ (mov r8, r8)
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 801412c:	697b      	ldr	r3, [r7, #20]
}
 801412e:	0018      	movs	r0, r3
 8014130:	46bd      	mov	sp, r7
 8014132:	b007      	add	sp, #28
 8014134:	bd90      	pop	{r4, r7, pc}
 8014136:	46c0      	nop			@ (mov r8, r8)
 8014138:	200115f0 	.word	0x200115f0
 801413c:	20011624 	.word	0x20011624

08014140 <CAD_Check_HW_SNK>:
  * @param  PortNum                     port
  * @retval none
  */
#if defined(_DRP) || defined(_SNK)
void CAD_Check_HW_SNK(uint8_t PortNum)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b086      	sub	sp, #24
 8014144:	af00      	add	r7, sp, #0
 8014146:	0002      	movs	r2, r0
 8014148:	1dfb      	adds	r3, r7, #7
 801414a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801414c:	1dfb      	adds	r3, r7, #7
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	011a      	lsls	r2, r3, #4
 8014152:	4b45      	ldr	r3, [pc, #276]	@ (8014268 <CAD_Check_HW_SNK+0x128>)
 8014154:	18d3      	adds	r3, r2, r3
 8014156:	617b      	str	r3, [r7, #20]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1;
 8014158:	1dfb      	adds	r3, r7, #7
 801415a:	781a      	ldrb	r2, [r3, #0]
 801415c:	4943      	ldr	r1, [pc, #268]	@ (801426c <CAD_Check_HW_SNK+0x12c>)
 801415e:	0013      	movs	r3, r2
 8014160:	011b      	lsls	r3, r3, #4
 8014162:	1a9b      	subs	r3, r3, r2
 8014164:	009b      	lsls	r3, r3, #2
 8014166:	585b      	ldr	r3, [r3, r1]
 8014168:	695a      	ldr	r2, [r3, #20]
 801416a:	23c0      	movs	r3, #192	@ 0xc0
 801416c:	029b      	lsls	r3, r3, #10
 801416e:	4013      	ands	r3, r2
 8014170:	613b      	str	r3, [r7, #16]
  CC2_value = Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2;
 8014172:	1dfb      	adds	r3, r7, #7
 8014174:	781a      	ldrb	r2, [r3, #0]
 8014176:	493d      	ldr	r1, [pc, #244]	@ (801426c <CAD_Check_HW_SNK+0x12c>)
 8014178:	0013      	movs	r3, r2
 801417a:	011b      	lsls	r3, r3, #4
 801417c:	1a9b      	subs	r3, r3, r2
 801417e:	009b      	lsls	r3, r3, #2
 8014180:	585b      	ldr	r3, [r3, r1]
 8014182:	695a      	ldr	r2, [r3, #20]
 8014184:	23c0      	movs	r3, #192	@ 0xc0
 8014186:	031b      	lsls	r3, r3, #12
 8014188:	4013      	ands	r3, r2
 801418a:	60fb      	str	r3, [r7, #12]
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  _handle->cc  = CCNONE;
 801418c:	697b      	ldr	r3, [r7, #20]
 801418e:	781a      	ldrb	r2, [r3, #0]
 8014190:	2103      	movs	r1, #3
 8014192:	438a      	bics	r2, r1
 8014194:	701a      	strb	r2, [r3, #0]
  _handle->CurrentHWcondition     = HW_Detachment;
 8014196:	697b      	ldr	r3, [r7, #20]
 8014198:	781a      	ldrb	r2, [r3, #0]
 801419a:	211c      	movs	r1, #28
 801419c:	438a      	bics	r2, r1
 801419e:	701a      	strb	r2, [r3, #0]

  if ((CC1_value != LL_UCPD_SNK_CC1_VOPEN) && (CC2_value == LL_UCPD_SNK_CC2_VOPEN))
 80141a0:	693b      	ldr	r3, [r7, #16]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d02c      	beq.n	8014200 <CAD_Check_HW_SNK+0xc0>
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d129      	bne.n	8014200 <CAD_Check_HW_SNK+0xc0>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 80141ac:	697b      	ldr	r3, [r7, #20]
 80141ae:	781a      	ldrb	r2, [r3, #0]
 80141b0:	211c      	movs	r1, #28
 80141b2:	438a      	bics	r2, r1
 80141b4:	1c11      	adds	r1, r2, #0
 80141b6:	2204      	movs	r2, #4
 80141b8:	430a      	orrs	r2, r1
 80141ba:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC1;
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	781a      	ldrb	r2, [r3, #0]
 80141c0:	2103      	movs	r1, #3
 80141c2:	438a      	bics	r2, r1
 80141c4:	1c11      	adds	r1, r2, #0
 80141c6:	2201      	movs	r2, #1
 80141c8:	430a      	orrs	r2, r1
 80141ca:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC1_value >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 80141cc:	693b      	ldr	r3, [r7, #16]
 80141ce:	0c18      	lsrs	r0, r3, #16
 80141d0:	1dfb      	adds	r3, r7, #7
 80141d2:	781a      	ldrb	r2, [r3, #0]
 80141d4:	4925      	ldr	r1, [pc, #148]	@ (801426c <CAD_Check_HW_SNK+0x12c>)
 80141d6:	0013      	movs	r3, r2
 80141d8:	011b      	lsls	r3, r3, #4
 80141da:	1a9b      	subs	r3, r3, r2
 80141dc:	009b      	lsls	r3, r3, #2
 80141de:	18cb      	adds	r3, r1, r3
 80141e0:	3310      	adds	r3, #16
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	1c01      	adds	r1, r0, #0
 80141e6:	2203      	movs	r2, #3
 80141e8:	400a      	ands	r2, r1
 80141ea:	b2d2      	uxtb	r2, r2
 80141ec:	2103      	movs	r1, #3
 80141ee:	400a      	ands	r2, r1
 80141f0:	0090      	lsls	r0, r2, #2
 80141f2:	789a      	ldrb	r2, [r3, #2]
 80141f4:	210c      	movs	r1, #12
 80141f6:	438a      	bics	r2, r1
 80141f8:	1c11      	adds	r1, r2, #0
 80141fa:	1c02      	adds	r2, r0, #0
 80141fc:	430a      	orrs	r2, r1
 80141fe:	709a      	strb	r2, [r3, #2]
  }

  if ((CC1_value == LL_UCPD_SNK_CC1_VOPEN) && (CC2_value != LL_UCPD_SNK_CC2_VOPEN))
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d12c      	bne.n	8014260 <CAD_Check_HW_SNK+0x120>
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d029      	beq.n	8014260 <CAD_Check_HW_SNK+0x120>
  {
    _handle->CurrentHWcondition = HW_Attachment;
 801420c:	697b      	ldr	r3, [r7, #20]
 801420e:	781a      	ldrb	r2, [r3, #0]
 8014210:	211c      	movs	r1, #28
 8014212:	438a      	bics	r2, r1
 8014214:	1c11      	adds	r1, r2, #0
 8014216:	2204      	movs	r2, #4
 8014218:	430a      	orrs	r2, r1
 801421a:	701a      	strb	r2, [r3, #0]
    _handle->cc = CC2;
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	781a      	ldrb	r2, [r3, #0]
 8014220:	2103      	movs	r1, #3
 8014222:	438a      	bics	r2, r1
 8014224:	1c11      	adds	r1, r2, #0
 8014226:	2202      	movs	r2, #2
 8014228:	430a      	orrs	r2, r1
 801422a:	701a      	strb	r2, [r3, #0]
    Ports[PortNum].params->SNKExposedRP_AtAttach = CC2_value >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;;
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	0c98      	lsrs	r0, r3, #18
 8014230:	1dfb      	adds	r3, r7, #7
 8014232:	781a      	ldrb	r2, [r3, #0]
 8014234:	490d      	ldr	r1, [pc, #52]	@ (801426c <CAD_Check_HW_SNK+0x12c>)
 8014236:	0013      	movs	r3, r2
 8014238:	011b      	lsls	r3, r3, #4
 801423a:	1a9b      	subs	r3, r3, r2
 801423c:	009b      	lsls	r3, r3, #2
 801423e:	18cb      	adds	r3, r1, r3
 8014240:	3310      	adds	r3, #16
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	1c01      	adds	r1, r0, #0
 8014246:	2203      	movs	r2, #3
 8014248:	400a      	ands	r2, r1
 801424a:	b2d2      	uxtb	r2, r2
 801424c:	2103      	movs	r1, #3
 801424e:	400a      	ands	r2, r1
 8014250:	0090      	lsls	r0, r2, #2
 8014252:	789a      	ldrb	r2, [r3, #2]
 8014254:	210c      	movs	r1, #12
 8014256:	438a      	bics	r2, r1
 8014258:	1c11      	adds	r1, r2, #0
 801425a:	1c02      	adds	r2, r0, #0
 801425c:	430a      	orrs	r2, r1
 801425e:	709a      	strb	r2, [r3, #2]
  }
}
 8014260:	46c0      	nop			@ (mov r8, r8)
 8014262:	46bd      	mov	sp, r7
 8014264:	b006      	add	sp, #24
 8014266:	bd80      	pop	{r7, pc}
 8014268:	200115f0 	.word	0x200115f0
 801426c:	20011624 	.word	0x20011624

08014270 <CAD_Check_HW_SRC>:
#endif /* _DRP || _SNK */

#if defined(_DRP) || defined(_SRC)
void CAD_Check_HW_SRC(uint8_t PortNum)
{
 8014270:	b5b0      	push	{r4, r5, r7, lr}
 8014272:	b094      	sub	sp, #80	@ 0x50
 8014274:	af00      	add	r7, sp, #0
 8014276:	0002      	movs	r2, r0
 8014278:	1dfb      	adds	r3, r7, #7
 801427a:	701a      	strb	r2, [r3, #0]
#if !defined(_RTOS)
  uint32_t CC1_value_temp;
  uint32_t CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801427c:	1dfb      	adds	r3, r7, #7
 801427e:	781b      	ldrb	r3, [r3, #0]
 8014280:	011a      	lsls	r2, r3, #4
 8014282:	4b45      	ldr	r3, [pc, #276]	@ (8014398 <CAD_Check_HW_SRC+0x128>)
 8014284:	18d3      	adds	r3, r2, r3
 8014286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  -----------------------------------------------------------------------------
  | 1: Sink   |                   |             |xx vRa|vRdUSB| vRd1.5 |vRd3.0|
  -----------------------------------------------------------------------------
  */

  CC1_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 8014288:	1dfb      	adds	r3, r7, #7
 801428a:	781a      	ldrb	r2, [r3, #0]
 801428c:	4943      	ldr	r1, [pc, #268]	@ (801439c <CAD_Check_HW_SRC+0x12c>)
 801428e:	0013      	movs	r3, r2
 8014290:	011b      	lsls	r3, r3, #4
 8014292:	1a9b      	subs	r3, r3, r2
 8014294:	009b      	lsls	r3, r3, #2
 8014296:	585b      	ldr	r3, [r3, r1]
 8014298:	695b      	ldr	r3, [r3, #20]
 801429a:	0c1b      	lsrs	r3, r3, #16
 801429c:	2203      	movs	r2, #3
 801429e:	4013      	ands	r3, r2
 80142a0:	64bb      	str	r3, [r7, #72]	@ 0x48
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 80142a2:	1dfb      	adds	r3, r7, #7
 80142a4:	781a      	ldrb	r2, [r3, #0]
 80142a6:	493d      	ldr	r1, [pc, #244]	@ (801439c <CAD_Check_HW_SRC+0x12c>)
 80142a8:	0013      	movs	r3, r2
 80142aa:	011b      	lsls	r3, r3, #4
 80142ac:	1a9b      	subs	r3, r3, r2
 80142ae:	009b      	lsls	r3, r3, #2
 80142b0:	585b      	ldr	r3, [r3, r1]
 80142b2:	695b      	ldr	r3, [r3, #20]
 80142b4:	0c9b      	lsrs	r3, r3, #18
 80142b6:	2203      	movs	r2, #3
 80142b8:	4013      	ands	r3, r2
 80142ba:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(_RTOS)
  /* Workaround linked to issue with Ellisys test TD.PC.E5
  - it seems that in NRTOS version, we detect a glitch during DRP transition SNK to SRC */
  CC1_value_temp = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 80142bc:	1dfb      	adds	r3, r7, #7
 80142be:	781a      	ldrb	r2, [r3, #0]
 80142c0:	4936      	ldr	r1, [pc, #216]	@ (801439c <CAD_Check_HW_SRC+0x12c>)
 80142c2:	0013      	movs	r3, r2
 80142c4:	011b      	lsls	r3, r3, #4
 80142c6:	1a9b      	subs	r3, r3, r2
 80142c8:	009b      	lsls	r3, r3, #2
 80142ca:	585b      	ldr	r3, [r3, r1]
 80142cc:	695b      	ldr	r3, [r3, #20]
 80142ce:	0c1b      	lsrs	r3, r3, #16
 80142d0:	2203      	movs	r2, #3
 80142d2:	4013      	ands	r3, r2
 80142d4:	643b      	str	r3, [r7, #64]	@ 0x40
  CC2_value_temp = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 80142d6:	1dfb      	adds	r3, r7, #7
 80142d8:	781a      	ldrb	r2, [r3, #0]
 80142da:	4930      	ldr	r1, [pc, #192]	@ (801439c <CAD_Check_HW_SRC+0x12c>)
 80142dc:	0013      	movs	r3, r2
 80142de:	011b      	lsls	r3, r3, #4
 80142e0:	1a9b      	subs	r3, r3, r2
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	585b      	ldr	r3, [r3, r1]
 80142e6:	695b      	ldr	r3, [r3, #20]
 80142e8:	0c9b      	lsrs	r3, r3, #18
 80142ea:	2203      	movs	r2, #3
 80142ec:	4013      	ands	r3, r2
 80142ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((CC1_value_temp != CC1_value) || (CC2_value_temp != CC2_value))
 80142f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80142f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80142f4:	429a      	cmp	r2, r3
 80142f6:	d14b      	bne.n	8014390 <CAD_Check_HW_SRC+0x120>
 80142f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80142fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d147      	bne.n	8014390 <CAD_Check_HW_SRC+0x120>
  {
    return;
  }
#endif /* !_RTOS */

  const CCxPin_TypeDef table_cc[] =
 8014300:	2518      	movs	r5, #24
 8014302:	197b      	adds	r3, r7, r5
 8014304:	4a26      	ldr	r2, [pc, #152]	@ (80143a0 <CAD_Check_HW_SRC+0x130>)
 8014306:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014308:	c313      	stmia	r3!, {r0, r1, r4}
 801430a:	ca13      	ldmia	r2!, {r0, r1, r4}
 801430c:	c313      	stmia	r3!, {r0, r1, r4}
 801430e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8014310:	c313      	stmia	r3!, {r0, r1, r4}
    CCNONE,  CC2,       CC2,
    CC1,     CCNONE,   CC1,
    CC1,     CC2,       CCNONE
  };

  const CAD_HW_Condition_TypeDef table_CurrentHWcondition[] =
 8014312:	240c      	movs	r4, #12
 8014314:	193b      	adds	r3, r7, r4
 8014316:	4a23      	ldr	r2, [pc, #140]	@ (80143a4 <CAD_Check_HW_SRC+0x134>)
 8014318:	ca03      	ldmia	r2!, {r0, r1}
 801431a:	c303      	stmia	r3!, {r0, r1}
 801431c:	7812      	ldrb	r2, [r2, #0]
 801431e:	701a      	strb	r2, [r3, #0]
    HW_AudioAdapter_Attachment,  HW_PwrCable_Sink_Attachment, HW_PwrCable_NoSink_Attachment,
    HW_PwrCable_Sink_Attachment,         HW_Debug_Attachment,                 HW_Attachment,
    HW_PwrCable_NoSink_Attachment,             HW_Attachment,                 HW_Detachment
  };

  if (CC1_value * 3 + CC2_value < 9)
 8014320:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014322:	0013      	movs	r3, r2
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	189a      	adds	r2, r3, r2
 8014328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801432a:	18d3      	adds	r3, r2, r3
 801432c:	2b08      	cmp	r3, #8
 801432e:	d830      	bhi.n	8014392 <CAD_Check_HW_SRC+0x122>
  {
    _handle->cc  = table_cc[CC1_value * 3 + CC2_value];
 8014330:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014332:	0013      	movs	r3, r2
 8014334:	005b      	lsls	r3, r3, #1
 8014336:	189a      	adds	r2, r3, r2
 8014338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801433a:	18d2      	adds	r2, r2, r3
 801433c:	197b      	adds	r3, r7, r5
 801433e:	0092      	lsls	r2, r2, #2
 8014340:	58d3      	ldr	r3, [r2, r3]
 8014342:	1c1a      	adds	r2, r3, #0
 8014344:	2303      	movs	r3, #3
 8014346:	4013      	ands	r3, r2
 8014348:	b2da      	uxtb	r2, r3
 801434a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801434c:	2103      	movs	r1, #3
 801434e:	400a      	ands	r2, r1
 8014350:	0010      	movs	r0, r2
 8014352:	781a      	ldrb	r2, [r3, #0]
 8014354:	2103      	movs	r1, #3
 8014356:	438a      	bics	r2, r1
 8014358:	1c11      	adds	r1, r2, #0
 801435a:	1c02      	adds	r2, r0, #0
 801435c:	430a      	orrs	r2, r1
 801435e:	701a      	strb	r2, [r3, #0]
    _handle->CurrentHWcondition     = table_CurrentHWcondition[CC1_value * 3 + CC2_value];
 8014360:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014362:	0013      	movs	r3, r2
 8014364:	005b      	lsls	r3, r3, #1
 8014366:	189a      	adds	r2, r3, r2
 8014368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801436a:	18d3      	adds	r3, r2, r3
 801436c:	193a      	adds	r2, r7, r4
 801436e:	5cd3      	ldrb	r3, [r2, r3]
 8014370:	1c1a      	adds	r2, r3, #0
 8014372:	2307      	movs	r3, #7
 8014374:	4013      	ands	r3, r2
 8014376:	b2da      	uxtb	r2, r3
 8014378:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801437a:	2107      	movs	r1, #7
 801437c:	400a      	ands	r2, r1
 801437e:	0090      	lsls	r0, r2, #2
 8014380:	781a      	ldrb	r2, [r3, #0]
 8014382:	211c      	movs	r1, #28
 8014384:	438a      	bics	r2, r1
 8014386:	1c11      	adds	r1, r2, #0
 8014388:	1c02      	adds	r2, r0, #0
 801438a:	430a      	orrs	r2, r1
 801438c:	701a      	strb	r2, [r3, #0]
 801438e:	e000      	b.n	8014392 <CAD_Check_HW_SRC+0x122>
    return;
 8014390:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014392:	46bd      	mov	sp, r7
 8014394:	b014      	add	sp, #80	@ 0x50
 8014396:	bdb0      	pop	{r4, r5, r7, pc}
 8014398:	200115f0 	.word	0x200115f0
 801439c:	20011624 	.word	0x20011624
 80143a0:	0801e308 	.word	0x0801e308
 80143a4:	0801e32c 	.word	0x0801e32c

080143a8 <ManageStateDetached_SNK>:
#endif /* _DRP || _SRC */

#if defined(_DRP) || defined(_SNK)
static uint32_t ManageStateDetached_SNK(uint8_t PortNum)
{
 80143a8:	b580      	push	{r7, lr}
 80143aa:	b084      	sub	sp, #16
 80143ac:	af00      	add	r7, sp, #0
 80143ae:	0002      	movs	r2, r0
 80143b0:	1dfb      	adds	r3, r7, #7
 80143b2:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80143b4:	1dfb      	adds	r3, r7, #7
 80143b6:	781b      	ldrb	r3, [r3, #0]
 80143b8:	011a      	lsls	r2, r3, #4
 80143ba:	4b22      	ldr	r3, [pc, #136]	@ (8014444 <ManageStateDetached_SNK+0x9c>)
 80143bc:	18d3      	adds	r3, r2, r3
 80143be:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 80143c0:	2302      	movs	r3, #2
 80143c2:	60fb      	str	r3, [r7, #12]

  CAD_Check_HW_SNK(PortNum);
 80143c4:	1dfb      	adds	r3, r7, #7
 80143c6:	781b      	ldrb	r3, [r3, #0]
 80143c8:	0018      	movs	r0, r3
 80143ca:	f7ff feb9 	bl	8014140 <CAD_Check_HW_SNK>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 80143ce:	68bb      	ldr	r3, [r7, #8]
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	221c      	movs	r2, #28
 80143d4:	4013      	ands	r3, r2
 80143d6:	b2db      	uxtb	r3, r3
 80143d8:	2b00      	cmp	r3, #0
 80143da:	d103      	bne.n	80143e4 <ManageStateDetached_SNK+0x3c>
    /* value returned by a SRC or a SINK */
    _timing = CAD_DETACH_POLLING; /* 100ms in the sink cases */
#elif defined(USBPDM1_VCC_FEATURE_ENABLED)
    _timing = CAD_DEFAULT_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 80143dc:	2301      	movs	r3, #1
 80143de:	425b      	negs	r3, r3
 80143e0:	60fb      	str	r3, [r7, #12]
 80143e2:	e029      	b.n	8014438 <ManageStateDetached_SNK+0x90>
#endif /* _ACCESSORY_SNK */
  }
  else
  {
    /* Get the time of this event */
    _handle->CAD_tDebounce_start = HAL_GetTick();
 80143e4:	f7f3 ff7e 	bl	80082e4 <HAL_GetTick>
 80143e8:	0002      	movs	r2, r0
 80143ea:	68bb      	ldr	r3, [r7, #8]
 80143ec:	609a      	str	r2, [r3, #8]
    _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	785a      	ldrb	r2, [r3, #1]
 80143f2:	213e      	movs	r1, #62	@ 0x3e
 80143f4:	438a      	bics	r2, r1
 80143f6:	1c11      	adds	r1, r2, #0
 80143f8:	2204      	movs	r2, #4
 80143fa:	430a      	orrs	r2, r1
 80143fc:	705a      	strb	r2, [r3, #1]

    /* Temporary patch for test TD.PD 4.5.2 + rework for Patch TP.PD.C.E5 */
    HAL_Delay(1);
 80143fe:	2001      	movs	r0, #1
 8014400:	f7f3 ff7a 	bl	80082f8 <HAL_Delay>
    CAD_Check_HW_SNK(PortNum);
 8014404:	1dfb      	adds	r3, r7, #7
 8014406:	781b      	ldrb	r3, [r3, #0]
 8014408:	0018      	movs	r0, r3
 801440a:	f7ff fe99 	bl	8014140 <CAD_Check_HW_SNK>

    if (_handle->CurrentHWcondition == HW_Detachment)
 801440e:	68bb      	ldr	r3, [r7, #8]
 8014410:	781b      	ldrb	r3, [r3, #0]
 8014412:	221c      	movs	r2, #28
 8014414:	4013      	ands	r3, r2
 8014416:	b2db      	uxtb	r3, r3
 8014418:	2b00      	cmp	r3, #0
 801441a:	d108      	bne.n	801442e <ManageStateDetached_SNK+0x86>
    {
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 801441c:	68bb      	ldr	r3, [r7, #8]
 801441e:	785a      	ldrb	r2, [r3, #1]
 8014420:	213e      	movs	r1, #62	@ 0x3e
 8014422:	438a      	bics	r2, r1
 8014424:	1c11      	adds	r1, r2, #0
 8014426:	2202      	movs	r2, #2
 8014428:	430a      	orrs	r2, r1
 801442a:	705a      	strb	r2, [r3, #1]
 801442c:	e004      	b.n	8014438 <ManageStateDetached_SNK+0x90>
    }
    else
    {
      BSP_USBPD_PWR_VBUSInit(PortNum);
 801442e:	1dfb      	adds	r3, r7, #7
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	0018      	movs	r0, r3
 8014434:	f008 fdda 	bl	801cfec <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 8014438:	68fb      	ldr	r3, [r7, #12]
}
 801443a:	0018      	movs	r0, r3
 801443c:	46bd      	mov	sp, r7
 801443e:	b004      	add	sp, #16
 8014440:	bd80      	pop	{r7, pc}
 8014442:	46c0      	nop			@ (mov r8, r8)
 8014444:	200115f0 	.word	0x200115f0

08014448 <ManageStateDetached_SRC>:
#endif /* _DRP || _SNK */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateDetached_SRC(uint8_t PortNum)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b084      	sub	sp, #16
 801444c:	af00      	add	r7, sp, #0
 801444e:	0002      	movs	r2, r0
 8014450:	1dfb      	adds	r3, r7, #7
 8014452:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014454:	1dfb      	adds	r3, r7, #7
 8014456:	781b      	ldrb	r3, [r3, #0]
 8014458:	011a      	lsls	r2, r3, #4
 801445a:	4b28      	ldr	r3, [pc, #160]	@ (80144fc <ManageStateDetached_SRC+0xb4>)
 801445c:	18d3      	adds	r3, r2, r3
 801445e:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014460:	2302      	movs	r3, #2
 8014462:	60fb      	str	r3, [r7, #12]

  if (_handle->CAD_ResistorUpdateflag == USBPD_TRUE)
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	785b      	ldrb	r3, [r3, #1]
 8014468:	2201      	movs	r2, #1
 801446a:	4013      	ands	r3, r2
 801446c:	b2db      	uxtb	r3, r3
 801446e:	2b00      	cmp	r3, #0
 8014470:	d00c      	beq.n	801448c <ManageStateDetached_SRC+0x44>
  {
    /* update the resistor value */
    USBPDM1_AssertRp(PortNum);
 8014472:	1dfb      	adds	r3, r7, #7
 8014474:	781b      	ldrb	r3, [r3, #0]
 8014476:	0018      	movs	r0, r3
 8014478:	f001 fe2a 	bl	80160d0 <USBPDM1_AssertRp>
    _handle->CAD_ResistorUpdateflag = USBPD_FALSE;
 801447c:	68bb      	ldr	r3, [r7, #8]
 801447e:	785a      	ldrb	r2, [r3, #1]
 8014480:	2101      	movs	r1, #1
 8014482:	438a      	bics	r2, r1
 8014484:	705a      	strb	r2, [r3, #1]

    /* let time to internal state machine update */
    HAL_Delay(1);
 8014486:	2001      	movs	r0, #1
 8014488:	f7f3 ff36 	bl	80082f8 <HAL_Delay>
  }

  CAD_Check_HW_SRC(PortNum);
 801448c:	1dfb      	adds	r3, r7, #7
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	0018      	movs	r0, r3
 8014492:	f7ff feed 	bl	8014270 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8014496:	68bb      	ldr	r3, [r7, #8]
 8014498:	781b      	ldrb	r3, [r3, #0]
 801449a:	221c      	movs	r2, #28
 801449c:	4013      	ands	r3, r2
 801449e:	b2db      	uxtb	r3, r3
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d103      	bne.n	80144ac <ManageStateDetached_SRC+0x64>
  {
#ifdef _LOW_POWER
    /* value returned for a SRC */
    _timing = CAD_DETACH_POLLING;
#else
    _timing = CAD_INFINITE_TIME;
 80144a4:	2301      	movs	r3, #1
 80144a6:	425b      	negs	r3, r3
 80144a8:	60fb      	str	r3, [r7, #12]
 80144aa:	e021      	b.n	80144f0 <ManageStateDetached_SRC+0xa8>
#endif /* _LOW_POWER */
  }
  else
  {
    if (_handle->CurrentHWcondition == HW_PwrCable_NoSink_Attachment)
 80144ac:	68bb      	ldr	r3, [r7, #8]
 80144ae:	781b      	ldrb	r3, [r3, #0]
 80144b0:	221c      	movs	r2, #28
 80144b2:	4013      	ands	r3, r2
 80144b4:	b2db      	uxtb	r3, r3
 80144b6:	2b08      	cmp	r3, #8
 80144b8:	d108      	bne.n	80144cc <ManageStateDetached_SRC+0x84>
    {
      _handle->cstate = USBPD_CAD_STATE_EMC;
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	785a      	ldrb	r2, [r3, #1]
 80144be:	213e      	movs	r1, #62	@ 0x3e
 80144c0:	438a      	bics	r2, r1
 80144c2:	1c11      	adds	r1, r2, #0
 80144c4:	2208      	movs	r2, #8
 80144c6:	430a      	orrs	r2, r1
 80144c8:	705a      	strb	r2, [r3, #1]
 80144ca:	e011      	b.n	80144f0 <ManageStateDetached_SRC+0xa8>
    }
    else
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 80144cc:	f7f3 ff0a 	bl	80082e4 <HAL_GetTick>
 80144d0:	0002      	movs	r2, r0
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	609a      	str	r2, [r3, #8]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80144d6:	68bb      	ldr	r3, [r7, #8]
 80144d8:	785a      	ldrb	r2, [r3, #1]
 80144da:	213e      	movs	r1, #62	@ 0x3e
 80144dc:	438a      	bics	r2, r1
 80144de:	1c11      	adds	r1, r2, #0
 80144e0:	2204      	movs	r2, #4
 80144e2:	430a      	orrs	r2, r1
 80144e4:	705a      	strb	r2, [r3, #1]

      BSP_USBPD_PWR_VBUSInit(PortNum);
 80144e6:	1dfb      	adds	r3, r7, #7
 80144e8:	781b      	ldrb	r3, [r3, #0]
 80144ea:	0018      	movs	r0, r3
 80144ec:	f008 fd7e 	bl	801cfec <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 80144f0:	68fb      	ldr	r3, [r7, #12]
}
 80144f2:	0018      	movs	r0, r3
 80144f4:	46bd      	mov	sp, r7
 80144f6:	b004      	add	sp, #16
 80144f8:	bd80      	pop	{r7, pc}
 80144fa:	46c0      	nop			@ (mov r8, r8)
 80144fc:	200115f0 	.word	0x200115f0

08014500 <ManageStateDetached_DRP>:
#endif /* _SRC || _DRP */

#if defined(_DRP)
static uint32_t ManageStateDetached_DRP(uint8_t PortNum)
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b084      	sub	sp, #16
 8014504:	af00      	add	r7, sp, #0
 8014506:	0002      	movs	r2, r0
 8014508:	1dfb      	adds	r3, r7, #7
 801450a:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 801450c:	1dfb      	adds	r3, r7, #7
 801450e:	781b      	ldrb	r3, [r3, #0]
 8014510:	011a      	lsls	r2, r3, #4
 8014512:	4b68      	ldr	r3, [pc, #416]	@ (80146b4 <ManageStateDetached_DRP+0x1b4>)
 8014514:	18d3      	adds	r3, r2, r3
 8014516:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014518:	2302      	movs	r3, #2
 801451a:	60fb      	str	r3, [r7, #12]

  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 801451c:	1dfb      	adds	r3, r7, #7
 801451e:	781a      	ldrb	r2, [r3, #0]
 8014520:	4965      	ldr	r1, [pc, #404]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 8014522:	0013      	movs	r3, r2
 8014524:	011b      	lsls	r3, r3, #4
 8014526:	1a9b      	subs	r3, r3, r2
 8014528:	009b      	lsls	r3, r3, #2
 801452a:	18cb      	adds	r3, r1, r3
 801452c:	3310      	adds	r3, #16
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	781b      	ldrb	r3, [r3, #0]
 8014532:	2204      	movs	r2, #4
 8014534:	4013      	ands	r3, r2
 8014536:	b2db      	uxtb	r3, r3
 8014538:	2b00      	cmp	r3, #0
 801453a:	d005      	beq.n	8014548 <ManageStateDetached_DRP+0x48>
  {
    ManageStateDetached_SRC(PortNum);
 801453c:	1dfb      	adds	r3, r7, #7
 801453e:	781b      	ldrb	r3, [r3, #0]
 8014540:	0018      	movs	r0, r3
 8014542:	f7ff ff81 	bl	8014448 <ManageStateDetached_SRC>
 8014546:	e004      	b.n	8014552 <ManageStateDetached_DRP+0x52>
  }
  else
  {
    ManageStateDetached_SNK(PortNum);
 8014548:	1dfb      	adds	r3, r7, #7
 801454a:	781b      	ldrb	r3, [r3, #0]
 801454c:	0018      	movs	r0, r3
 801454e:	f7ff ff2b 	bl	80143a8 <ManageStateDetached_SNK>
  }

  /* Manage the toggle */
  if (_handle->CurrentHWcondition == HW_Detachment)
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	781b      	ldrb	r3, [r3, #0]
 8014556:	221c      	movs	r2, #28
 8014558:	4013      	ands	r3, r2
 801455a:	b2db      	uxtb	r3, r3
 801455c:	2b00      	cmp	r3, #0
 801455e:	d000      	beq.n	8014562 <ManageStateDetached_DRP+0x62>
 8014560:	e0a3      	b.n	80146aa <ManageStateDetached_DRP+0x1aa>
  {
    switch (Ports[PortNum].params->PE_PowerRole)
 8014562:	1dfb      	adds	r3, r7, #7
 8014564:	781a      	ldrb	r2, [r3, #0]
 8014566:	4954      	ldr	r1, [pc, #336]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 8014568:	0013      	movs	r3, r2
 801456a:	011b      	lsls	r3, r3, #4
 801456c:	1a9b      	subs	r3, r3, r2
 801456e:	009b      	lsls	r3, r3, #2
 8014570:	18cb      	adds	r3, r1, r3
 8014572:	3310      	adds	r3, #16
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	075b      	lsls	r3, r3, #29
 801457a:	0fdb      	lsrs	r3, r3, #31
 801457c:	b2db      	uxtb	r3, r3
 801457e:	2b00      	cmp	r3, #0
 8014580:	d048      	beq.n	8014614 <ManageStateDetached_DRP+0x114>
 8014582:	2b01      	cmp	r3, #1
 8014584:	d000      	beq.n	8014588 <ManageStateDetached_DRP+0x88>
 8014586:	e08b      	b.n	80146a0 <ManageStateDetached_DRP+0x1a0>
    {
      case USBPD_PORTPOWERROLE_SRC :
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SRCToggleTime)
 8014588:	f7f3 feac 	bl	80082e4 <HAL_GetTick>
 801458c:	0002      	movs	r2, r0
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	685b      	ldr	r3, [r3, #4]
 8014592:	1ad1      	subs	r1, r2, r3
 8014594:	1dfb      	adds	r3, r7, #7
 8014596:	781a      	ldrb	r2, [r3, #0]
 8014598:	4847      	ldr	r0, [pc, #284]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 801459a:	0013      	movs	r3, r2
 801459c:	011b      	lsls	r3, r3, #4
 801459e:	1a9b      	subs	r3, r3, r2
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	18c3      	adds	r3, r0, r3
 80145a4:	330c      	adds	r3, #12
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	79db      	ldrb	r3, [r3, #7]
 80145aa:	4299      	cmp	r1, r3
 80145ac:	d97a      	bls.n	80146a4 <ManageStateDetached_DRP+0x1a4>
        {
          _handle->CAD_tToggle_start = HAL_GetTick();
 80145ae:	f7f3 fe99 	bl	80082e4 <HAL_GetTick>
 80145b2:	0002      	movs	r2, r0
 80145b4:	68bb      	ldr	r3, [r7, #8]
 80145b6:	605a      	str	r2, [r3, #4]
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SNK;
 80145b8:	1dfb      	adds	r3, r7, #7
 80145ba:	781a      	ldrb	r2, [r3, #0]
 80145bc:	493e      	ldr	r1, [pc, #248]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 80145be:	0013      	movs	r3, r2
 80145c0:	011b      	lsls	r3, r3, #4
 80145c2:	1a9b      	subs	r3, r3, r2
 80145c4:	009b      	lsls	r3, r3, #2
 80145c6:	18cb      	adds	r3, r1, r3
 80145c8:	3310      	adds	r3, #16
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	781a      	ldrb	r2, [r3, #0]
 80145ce:	2104      	movs	r1, #4
 80145d0:	438a      	bics	r2, r1
 80145d2:	701a      	strb	r2, [r3, #0]
          Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_UFP;
 80145d4:	1dfb      	adds	r3, r7, #7
 80145d6:	781a      	ldrb	r2, [r3, #0]
 80145d8:	4937      	ldr	r1, [pc, #220]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 80145da:	0013      	movs	r3, r2
 80145dc:	011b      	lsls	r3, r3, #4
 80145de:	1a9b      	subs	r3, r3, r2
 80145e0:	009b      	lsls	r3, r3, #2
 80145e2:	18cb      	adds	r3, r1, r3
 80145e4:	3310      	adds	r3, #16
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	781a      	ldrb	r2, [r3, #0]
 80145ea:	2108      	movs	r1, #8
 80145ec:	438a      	bics	r2, r1
 80145ee:	701a      	strb	r2, [r3, #0]
          _timing = Ports[PortNum].settings->CAD_SNKToggleTime;
 80145f0:	1dfb      	adds	r3, r7, #7
 80145f2:	781a      	ldrb	r2, [r3, #0]
 80145f4:	4930      	ldr	r1, [pc, #192]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 80145f6:	0013      	movs	r3, r2
 80145f8:	011b      	lsls	r3, r3, #4
 80145fa:	1a9b      	subs	r3, r3, r2
 80145fc:	009b      	lsls	r3, r3, #2
 80145fe:	18cb      	adds	r3, r1, r3
 8014600:	330c      	adds	r3, #12
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	799b      	ldrb	r3, [r3, #6]
 8014606:	60fb      	str	r3, [r7, #12]
          USBPDM1_AssertRd(PortNum);
 8014608:	1dfb      	adds	r3, r7, #7
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	0018      	movs	r0, r3
 801460e:	f001 fe21 	bl	8016254 <USBPDM1_AssertRd>
        }
        break;
 8014612:	e047      	b.n	80146a4 <ManageStateDetached_DRP+0x1a4>
      case USBPD_PORTPOWERROLE_SNK :
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SNKToggleTime)
 8014614:	f7f3 fe66 	bl	80082e4 <HAL_GetTick>
 8014618:	0002      	movs	r2, r0
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	685b      	ldr	r3, [r3, #4]
 801461e:	1ad1      	subs	r1, r2, r3
 8014620:	1dfb      	adds	r3, r7, #7
 8014622:	781a      	ldrb	r2, [r3, #0]
 8014624:	4824      	ldr	r0, [pc, #144]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 8014626:	0013      	movs	r3, r2
 8014628:	011b      	lsls	r3, r3, #4
 801462a:	1a9b      	subs	r3, r3, r2
 801462c:	009b      	lsls	r3, r3, #2
 801462e:	18c3      	adds	r3, r0, r3
 8014630:	330c      	adds	r3, #12
 8014632:	681b      	ldr	r3, [r3, #0]
 8014634:	799b      	ldrb	r3, [r3, #6]
 8014636:	4299      	cmp	r1, r3
 8014638:	d936      	bls.n	80146a8 <ManageStateDetached_DRP+0x1a8>
        {
          _handle->CAD_tToggle_start = HAL_GetTick();
 801463a:	f7f3 fe53 	bl	80082e4 <HAL_GetTick>
 801463e:	0002      	movs	r2, r0
 8014640:	68bb      	ldr	r3, [r7, #8]
 8014642:	605a      	str	r2, [r3, #4]
          Ports[PortNum].params->PE_PowerRole = USBPD_PORTPOWERROLE_SRC;
 8014644:	1dfb      	adds	r3, r7, #7
 8014646:	781a      	ldrb	r2, [r3, #0]
 8014648:	491b      	ldr	r1, [pc, #108]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 801464a:	0013      	movs	r3, r2
 801464c:	011b      	lsls	r3, r3, #4
 801464e:	1a9b      	subs	r3, r3, r2
 8014650:	009b      	lsls	r3, r3, #2
 8014652:	18cb      	adds	r3, r1, r3
 8014654:	3310      	adds	r3, #16
 8014656:	681b      	ldr	r3, [r3, #0]
 8014658:	781a      	ldrb	r2, [r3, #0]
 801465a:	2104      	movs	r1, #4
 801465c:	430a      	orrs	r2, r1
 801465e:	701a      	strb	r2, [r3, #0]
          Ports[PortNum].params->PE_DataRole = USBPD_PORTDATAROLE_DFP;
 8014660:	1dfb      	adds	r3, r7, #7
 8014662:	781a      	ldrb	r2, [r3, #0]
 8014664:	4914      	ldr	r1, [pc, #80]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 8014666:	0013      	movs	r3, r2
 8014668:	011b      	lsls	r3, r3, #4
 801466a:	1a9b      	subs	r3, r3, r2
 801466c:	009b      	lsls	r3, r3, #2
 801466e:	18cb      	adds	r3, r1, r3
 8014670:	3310      	adds	r3, #16
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	781a      	ldrb	r2, [r3, #0]
 8014676:	2108      	movs	r1, #8
 8014678:	430a      	orrs	r2, r1
 801467a:	701a      	strb	r2, [r3, #0]
          _timing = Ports[PortNum].settings->CAD_SRCToggleTime;
 801467c:	1dfb      	adds	r3, r7, #7
 801467e:	781a      	ldrb	r2, [r3, #0]
 8014680:	490d      	ldr	r1, [pc, #52]	@ (80146b8 <ManageStateDetached_DRP+0x1b8>)
 8014682:	0013      	movs	r3, r2
 8014684:	011b      	lsls	r3, r3, #4
 8014686:	1a9b      	subs	r3, r3, r2
 8014688:	009b      	lsls	r3, r3, #2
 801468a:	18cb      	adds	r3, r1, r3
 801468c:	330c      	adds	r3, #12
 801468e:	681b      	ldr	r3, [r3, #0]
 8014690:	79db      	ldrb	r3, [r3, #7]
 8014692:	60fb      	str	r3, [r7, #12]
          USBPDM1_AssertRp(PortNum);
 8014694:	1dfb      	adds	r3, r7, #7
 8014696:	781b      	ldrb	r3, [r3, #0]
 8014698:	0018      	movs	r0, r3
 801469a:	f001 fd19 	bl	80160d0 <USBPDM1_AssertRp>
        }
        break;
 801469e:	e003      	b.n	80146a8 <ManageStateDetached_DRP+0x1a8>
      default:
        break;
 80146a0:	46c0      	nop			@ (mov r8, r8)
 80146a2:	e002      	b.n	80146aa <ManageStateDetached_DRP+0x1aa>
        break;
 80146a4:	46c0      	nop			@ (mov r8, r8)
 80146a6:	e000      	b.n	80146aa <ManageStateDetached_DRP+0x1aa>
        break;
 80146a8:	46c0      	nop			@ (mov r8, r8)
    }
  }

  return _timing;
 80146aa:	68fb      	ldr	r3, [r7, #12]
}
 80146ac:	0018      	movs	r0, r3
 80146ae:	46bd      	mov	sp, r7
 80146b0:	b004      	add	sp, #16
 80146b2:	bd80      	pop	{r7, pc}
 80146b4:	200115f0 	.word	0x200115f0
 80146b8:	20011624 	.word	0x20011624

080146bc <ManageStateAttachedWait_SRC>:
#endif /* _DRP */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateAttachedWait_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 80146bc:	b590      	push	{r4, r7, lr}
 80146be:	b089      	sub	sp, #36	@ 0x24
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	60b9      	str	r1, [r7, #8]
 80146c4:	607a      	str	r2, [r7, #4]
 80146c6:	240f      	movs	r4, #15
 80146c8:	193b      	adds	r3, r7, r4
 80146ca:	1c02      	adds	r2, r0, #0
 80146cc:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80146ce:	193b      	adds	r3, r7, r4
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	011a      	lsls	r2, r3, #4
 80146d4:	4b6f      	ldr	r3, [pc, #444]	@ (8014894 <ManageStateAttachedWait_SRC+0x1d8>)
 80146d6:	18d3      	adds	r3, r2, r3
 80146d8:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = 2;
 80146da:	2302      	movs	r3, #2
 80146dc:	61fb      	str	r3, [r7, #28]

  /* Evaluate elapsed time in Attach_Wait state */
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 80146de:	f7f3 fe01 	bl	80082e4 <HAL_GetTick>
 80146e2:	0002      	movs	r2, r0
 80146e4:	69bb      	ldr	r3, [r7, #24]
 80146e6:	689b      	ldr	r3, [r3, #8]
 80146e8:	1ad3      	subs	r3, r2, r3
 80146ea:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SRC(PortNum);
 80146ec:	193b      	adds	r3, r7, r4
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	0018      	movs	r0, r3
 80146f2:	f7ff fdbd 	bl	8014270 <CAD_Check_HW_SRC>

  if ((_handle->CurrentHWcondition != HW_Detachment) && (_handle->CurrentHWcondition != HW_PwrCable_NoSink_Attachment))
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	781b      	ldrb	r3, [r3, #0]
 80146fa:	221c      	movs	r2, #28
 80146fc:	4013      	ands	r3, r2
 80146fe:	b2db      	uxtb	r3, r3
 8014700:	2b00      	cmp	r3, #0
 8014702:	d100      	bne.n	8014706 <ManageStateAttachedWait_SRC+0x4a>
 8014704:	e094      	b.n	8014830 <ManageStateAttachedWait_SRC+0x174>
 8014706:	69bb      	ldr	r3, [r7, #24]
 8014708:	781b      	ldrb	r3, [r3, #0]
 801470a:	221c      	movs	r2, #28
 801470c:	4013      	ands	r3, r2
 801470e:	b2db      	uxtb	r3, r3
 8014710:	2b08      	cmp	r3, #8
 8014712:	d100      	bne.n	8014716 <ManageStateAttachedWait_SRC+0x5a>
 8014714:	e08c      	b.n	8014830 <ManageStateAttachedWait_SRC+0x174>
  {
    if (USBPD_FALSE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_BELOWVSAFE0V))
 8014716:	193b      	adds	r3, r7, r4
 8014718:	781b      	ldrb	r3, [r3, #0]
 801471a:	2100      	movs	r1, #0
 801471c:	0018      	movs	r0, r3
 801471e:	f008 fab9 	bl	801cc94 <USBPD_PWR_IF_GetVBUSStatus>
 8014722:	1e03      	subs	r3, r0, #0
 8014724:	d106      	bne.n	8014734 <ManageStateAttachedWait_SRC+0x78>
    {
      /* reset the timing because VBUS threshold not yet reach */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8014726:	f7f3 fddd 	bl	80082e4 <HAL_GetTick>
 801472a:	0002      	movs	r2, r0
 801472c:	69bb      	ldr	r3, [r7, #24]
 801472e:	609a      	str	r2, [r3, #8]
      return CAD_TCCDEBOUCE_THRESHOLD;
 8014730:	2378      	movs	r3, #120	@ 0x78
 8014732:	e0ab      	b.n	801488c <ManageStateAttachedWait_SRC+0x1d0>
    }

    /* Check tCCDebounce */
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8014734:	697b      	ldr	r3, [r7, #20]
 8014736:	2b78      	cmp	r3, #120	@ 0x78
 8014738:	d800      	bhi.n	801473c <ManageStateAttachedWait_SRC+0x80>
 801473a:	e073      	b.n	8014824 <ManageStateAttachedWait_SRC+0x168>
    {
      switch (_handle->CurrentHWcondition)
 801473c:	69bb      	ldr	r3, [r7, #24]
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	06db      	lsls	r3, r3, #27
 8014742:	0f5b      	lsrs	r3, r3, #29
 8014744:	b2db      	uxtb	r3, r3
 8014746:	2b03      	cmp	r3, #3
 8014748:	d026      	beq.n	8014798 <ManageStateAttachedWait_SRC+0xdc>
 801474a:	dc58      	bgt.n	80147fe <ManageStateAttachedWait_SRC+0x142>
 801474c:	2b01      	cmp	r3, #1
 801474e:	d002      	beq.n	8014756 <ManageStateAttachedWait_SRC+0x9a>
 8014750:	2b02      	cmp	r3, #2
 8014752:	d03a      	beq.n	80147ca <ManageStateAttachedWait_SRC+0x10e>
 8014754:	e053      	b.n	80147fe <ManageStateAttachedWait_SRC+0x142>
      {
        case HW_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 8014756:	69bb      	ldr	r3, [r7, #24]
 8014758:	781b      	ldrb	r3, [r3, #0]
 801475a:	079b      	lsls	r3, r3, #30
 801475c:	0f9b      	lsrs	r3, r3, #30
 801475e:	b2db      	uxtb	r3, r3
 8014760:	001a      	movs	r2, r3
 8014762:	230f      	movs	r3, #15
 8014764:	18fb      	adds	r3, r7, r3
 8014766:	781b      	ldrb	r3, [r3, #0]
 8014768:	0011      	movs	r1, r2
 801476a:	0018      	movs	r0, r3
 801476c:	f001 fec4 	bl	80164f8 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8014770:	69bb      	ldr	r3, [r7, #24]
 8014772:	785a      	ldrb	r2, [r3, #1]
 8014774:	213e      	movs	r1, #62	@ 0x3e
 8014776:	438a      	bics	r2, r1
 8014778:	1c11      	adds	r1, r2, #0
 801477a:	2206      	movs	r2, #6
 801477c:	430a      	orrs	r2, r1
 801477e:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8014780:	68bb      	ldr	r3, [r7, #8]
 8014782:	2202      	movs	r2, #2
 8014784:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 8014786:	69bb      	ldr	r3, [r7, #24]
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	079b      	lsls	r3, r3, #30
 801478c:	0f9b      	lsrs	r3, r3, #30
 801478e:	b2db      	uxtb	r3, r3
 8014790:	001a      	movs	r2, r3
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	601a      	str	r2, [r3, #0]
          break;
 8014796:	e03b      	b.n	8014810 <ManageStateAttachedWait_SRC+0x154>

        case HW_PwrCable_Sink_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 8014798:	69bb      	ldr	r3, [r7, #24]
 801479a:	781b      	ldrb	r3, [r3, #0]
 801479c:	079b      	lsls	r3, r3, #30
 801479e:	0f9b      	lsrs	r3, r3, #30
 80147a0:	b2db      	uxtb	r3, r3
 80147a2:	001a      	movs	r2, r3
 80147a4:	230f      	movs	r3, #15
 80147a6:	18fb      	adds	r3, r7, r3
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	0011      	movs	r1, r2
 80147ac:	0018      	movs	r0, r3
 80147ae:	f001 fea3 	bl	80164f8 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTEMC;
 80147b2:	69bb      	ldr	r3, [r7, #24]
 80147b4:	785a      	ldrb	r2, [r3, #1]
 80147b6:	213e      	movs	r1, #62	@ 0x3e
 80147b8:	438a      	bics	r2, r1
 80147ba:	1c11      	adds	r1, r2, #0
 80147bc:	220a      	movs	r2, #10
 80147be:	430a      	orrs	r2, r1
 80147c0:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_ATTEMC;
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	2204      	movs	r2, #4
 80147c6:	701a      	strb	r2, [r3, #0]
          break;
 80147c8:	e022      	b.n	8014810 <ManageStateAttachedWait_SRC+0x154>

        case HW_PwrCable_NoSink_Attachment:
          BSP_USBPD_PWR_VBUSDeInit(PortNum);
 80147ca:	230f      	movs	r3, #15
 80147cc:	18fb      	adds	r3, r7, r3
 80147ce:	781b      	ldrb	r3, [r3, #0]
 80147d0:	0018      	movs	r0, r3
 80147d2:	f008 fc1c 	bl	801d00e <BSP_USBPD_PWR_VBUSDeInit>
          _handle->cstate = USBPD_CAD_STATE_EMC;
 80147d6:	69bb      	ldr	r3, [r7, #24]
 80147d8:	785a      	ldrb	r2, [r3, #1]
 80147da:	213e      	movs	r1, #62	@ 0x3e
 80147dc:	438a      	bics	r2, r1
 80147de:	1c11      	adds	r1, r2, #0
 80147e0:	2208      	movs	r2, #8
 80147e2:	430a      	orrs	r2, r1
 80147e4:	705a      	strb	r2, [r3, #1]
          *pEvent = USBPD_CAD_EVENT_EMC;
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	2203      	movs	r2, #3
 80147ea:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 80147ec:	69bb      	ldr	r3, [r7, #24]
 80147ee:	781b      	ldrb	r3, [r3, #0]
 80147f0:	079b      	lsls	r3, r3, #30
 80147f2:	0f9b      	lsrs	r3, r3, #30
 80147f4:	b2db      	uxtb	r3, r3
 80147f6:	001a      	movs	r2, r3
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	601a      	str	r2, [r3, #0]
          break;
 80147fc:	e008      	b.n	8014810 <ManageStateAttachedWait_SRC+0x154>
#endif /* _ACCESSORY_SRC */

        case HW_Detachment:
        default:
#if !defined(_ACCESSORY_SRC)
          _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 80147fe:	69bb      	ldr	r3, [r7, #24]
 8014800:	785a      	ldrb	r2, [r3, #1]
 8014802:	213e      	movs	r1, #62	@ 0x3e
 8014804:	438a      	bics	r2, r1
 8014806:	1c11      	adds	r1, r2, #0
 8014808:	2216      	movs	r2, #22
 801480a:	430a      	orrs	r2, r1
 801480c:	705a      	strb	r2, [r3, #1]
#endif /* _ACCESSORY_SRC */
          break;
 801480e:	46c0      	nop			@ (mov r8, r8)
      } /* end of switch */
      *pCCXX = _handle->cc;
 8014810:	69bb      	ldr	r3, [r7, #24]
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	079b      	lsls	r3, r3, #30
 8014816:	0f9b      	lsrs	r3, r3, #30
 8014818:	b2db      	uxtb	r3, r3
 801481a:	001a      	movs	r2, r3
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	601a      	str	r2, [r3, #0]
      _timing = 2;
 8014820:	2302      	movs	r3, #2
 8014822:	61fb      	str	r3, [r7, #28]
    }
    /* reset the flag for CAD_tDebounce */
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8014824:	69bb      	ldr	r3, [r7, #24]
 8014826:	781a      	ldrb	r2, [r3, #0]
 8014828:	2120      	movs	r1, #32
 801482a:	438a      	bics	r2, r1
 801482c:	701a      	strb	r2, [r3, #0]
 801482e:	e02c      	b.n	801488a <ManageStateAttachedWait_SRC+0x1ce>
  }
  else /* CAD_HW_Condition[PortNum] = HW_Detachment */
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8014830:	69bb      	ldr	r3, [r7, #24]
 8014832:	781b      	ldrb	r3, [r3, #0]
 8014834:	2220      	movs	r2, #32
 8014836:	4013      	ands	r3, r2
 8014838:	b2db      	uxtb	r3, r3
 801483a:	2b00      	cmp	r3, #0
 801483c:	d10c      	bne.n	8014858 <ManageStateAttachedWait_SRC+0x19c>
    {
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 801483e:	f7f3 fd51 	bl	80082e4 <HAL_GetTick>
 8014842:	0002      	movs	r2, r0
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	609a      	str	r2, [r3, #8]
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 8014848:	69bb      	ldr	r3, [r7, #24]
 801484a:	781a      	ldrb	r2, [r3, #0]
 801484c:	2120      	movs	r1, #32
 801484e:	430a      	orrs	r2, r1
 8014850:	701a      	strb	r2, [r3, #0]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 8014852:	2302      	movs	r3, #2
 8014854:	61fb      	str	r3, [r7, #28]
 8014856:	e018      	b.n	801488a <ManageStateAttachedWait_SRC+0x1ce>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8014858:	f7f3 fd44 	bl	80082e4 <HAL_GetTick>
 801485c:	0002      	movs	r2, r0
 801485e:	69bb      	ldr	r3, [r7, #24]
 8014860:	689b      	ldr	r3, [r3, #8]
 8014862:	1ad3      	subs	r3, r2, r3
 8014864:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	2b02      	cmp	r3, #2
 801486a:	d90e      	bls.n	801488a <ManageStateAttachedWait_SRC+0x1ce>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 801486c:	69bb      	ldr	r3, [r7, #24]
 801486e:	781a      	ldrb	r2, [r3, #0]
 8014870:	2120      	movs	r1, #32
 8014872:	438a      	bics	r2, r1
 8014874:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 8014876:	69bb      	ldr	r3, [r7, #24]
 8014878:	785a      	ldrb	r2, [r3, #1]
 801487a:	213e      	movs	r1, #62	@ 0x3e
 801487c:	438a      	bics	r2, r1
 801487e:	1c11      	adds	r1, r2, #0
 8014880:	2216      	movs	r2, #22
 8014882:	430a      	orrs	r2, r1
 8014884:	705a      	strb	r2, [r3, #1]
        _timing = 0;
 8014886:	2300      	movs	r3, #0
 8014888:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return _timing;
 801488a:	69fb      	ldr	r3, [r7, #28]
}
 801488c:	0018      	movs	r0, r3
 801488e:	46bd      	mov	sp, r7
 8014890:	b009      	add	sp, #36	@ 0x24
 8014892:	bd90      	pop	{r4, r7, pc}
 8014894:	200115f0 	.word	0x200115f0

08014898 <ManageStateEMC>:
#endif /* _DRP || _SRC || (_ACCESSORY && _SNK) */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateEMC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8014898:	b590      	push	{r4, r7, lr}
 801489a:	b087      	sub	sp, #28
 801489c:	af00      	add	r7, sp, #0
 801489e:	60b9      	str	r1, [r7, #8]
 80148a0:	607a      	str	r2, [r7, #4]
 80148a2:	210f      	movs	r1, #15
 80148a4:	187b      	adds	r3, r7, r1
 80148a6:	1c02      	adds	r2, r0, #0
 80148a8:	701a      	strb	r2, [r3, #0]
  uint32_t _timing = CAD_INFINITE_TIME;
 80148aa:	2301      	movs	r3, #1
 80148ac:	425b      	negs	r3, r3
 80148ae:	617b      	str	r3, [r7, #20]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80148b0:	187b      	adds	r3, r7, r1
 80148b2:	781b      	ldrb	r3, [r3, #0]
 80148b4:	011a      	lsls	r2, r3, #4
 80148b6:	4b35      	ldr	r3, [pc, #212]	@ (801498c <ManageStateEMC+0xf4>)
 80148b8:	18d3      	adds	r3, r2, r3
 80148ba:	613b      	str	r3, [r7, #16]

  CAD_Check_HW_SRC(PortNum);
 80148bc:	187b      	adds	r3, r7, r1
 80148be:	781b      	ldrb	r3, [r3, #0]
 80148c0:	0018      	movs	r0, r3
 80148c2:	f7ff fcd5 	bl	8014270 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  switch (_handle->CurrentHWcondition)
 80148c6:	693b      	ldr	r3, [r7, #16]
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	06db      	lsls	r3, r3, #27
 80148cc:	0f5b      	lsrs	r3, r3, #29
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	2b03      	cmp	r3, #3
 80148d2:	d010      	beq.n	80148f6 <ManageStateEMC+0x5e>
 80148d4:	dc26      	bgt.n	8014924 <ManageStateEMC+0x8c>
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d002      	beq.n	80148e0 <ManageStateEMC+0x48>
 80148da:	2b01      	cmp	r3, #1
 80148dc:	d00b      	beq.n	80148f6 <ManageStateEMC+0x5e>
 80148de:	e021      	b.n	8014924 <ManageStateEMC+0x8c>
  {
    case HW_Detachment :
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	785a      	ldrb	r2, [r3, #1]
 80148e4:	213e      	movs	r1, #62	@ 0x3e
 80148e6:	438a      	bics	r2, r1
 80148e8:	1c11      	adds	r1, r2, #0
 80148ea:	2212      	movs	r2, #18
 80148ec:	430a      	orrs	r2, r1
 80148ee:	705a      	strb	r2, [r3, #1]
      _timing = 1;
 80148f0:	2301      	movs	r3, #1
 80148f2:	617b      	str	r3, [r7, #20]
      break;
 80148f4:	e045      	b.n	8014982 <ManageStateEMC+0xea>
    case HW_PwrCable_Sink_Attachment:
    case HW_Attachment :
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	785a      	ldrb	r2, [r3, #1]
 80148fa:	213e      	movs	r1, #62	@ 0x3e
 80148fc:	438a      	bics	r2, r1
 80148fe:	1c11      	adds	r1, r2, #0
 8014900:	2204      	movs	r2, #4
 8014902:	430a      	orrs	r2, r1
 8014904:	705a      	strb	r2, [r3, #1]
      _handle->CAD_tDebounce_start = HAL_GetTick() - 5u;  /* this is only to check cable presence */
 8014906:	f7f3 fced 	bl	80082e4 <HAL_GetTick>
 801490a:	0003      	movs	r3, r0
 801490c:	1f5a      	subs	r2, r3, #5
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	609a      	str	r2, [r3, #8]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 8014912:	230f      	movs	r3, #15
 8014914:	18fb      	adds	r3, r7, r3
 8014916:	781b      	ldrb	r3, [r3, #0]
 8014918:	0018      	movs	r0, r3
 801491a:	f008 fb67 	bl	801cfec <BSP_USBPD_PWR_VBUSInit>
      _timing = 2;
 801491e:	2302      	movs	r3, #2
 8014920:	617b      	str	r3, [r7, #20]
      break;
 8014922:	e02e      	b.n	8014982 <ManageStateEMC+0xea>
    case HW_PwrCable_NoSink_Attachment:
    default :
      /* nothing to do still the same status */
#if defined(_DRP)
      if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
 8014924:	240f      	movs	r4, #15
 8014926:	193b      	adds	r3, r7, r4
 8014928:	781a      	ldrb	r2, [r3, #0]
 801492a:	4919      	ldr	r1, [pc, #100]	@ (8014990 <ManageStateEMC+0xf8>)
 801492c:	0013      	movs	r3, r2
 801492e:	011b      	lsls	r3, r3, #4
 8014930:	1a9b      	subs	r3, r3, r2
 8014932:	009b      	lsls	r3, r3, #2
 8014934:	18cb      	adds	r3, r1, r3
 8014936:	330c      	adds	r3, #12
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	795b      	ldrb	r3, [r3, #5]
 801493c:	2220      	movs	r2, #32
 801493e:	4013      	ands	r3, r2
 8014940:	b2db      	uxtb	r3, r3
 8014942:	2b00      	cmp	r3, #0
 8014944:	d01c      	beq.n	8014980 <ManageStateEMC+0xe8>
      {
        if ((HAL_GetTick() - _handle->CAD_tToggle_start) > Ports[PortNum].settings->CAD_SRCToggleTime)
 8014946:	f7f3 fccd 	bl	80082e4 <HAL_GetTick>
 801494a:	0002      	movs	r2, r0
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	685b      	ldr	r3, [r3, #4]
 8014950:	1ad1      	subs	r1, r2, r3
 8014952:	193b      	adds	r3, r7, r4
 8014954:	781a      	ldrb	r2, [r3, #0]
 8014956:	480e      	ldr	r0, [pc, #56]	@ (8014990 <ManageStateEMC+0xf8>)
 8014958:	0013      	movs	r3, r2
 801495a:	011b      	lsls	r3, r3, #4
 801495c:	1a9b      	subs	r3, r3, r2
 801495e:	009b      	lsls	r3, r3, #2
 8014960:	18c3      	adds	r3, r0, r3
 8014962:	330c      	adds	r3, #12
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	79db      	ldrb	r3, [r3, #7]
 8014968:	4299      	cmp	r1, r3
 801496a:	d907      	bls.n	801497c <ManageStateEMC+0xe4>
        {
          _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 801496c:	693b      	ldr	r3, [r7, #16]
 801496e:	785a      	ldrb	r2, [r3, #1]
 8014970:	213e      	movs	r1, #62	@ 0x3e
 8014972:	438a      	bics	r2, r1
 8014974:	1c11      	adds	r1, r2, #0
 8014976:	2212      	movs	r2, #18
 8014978:	430a      	orrs	r2, r1
 801497a:	705a      	strb	r2, [r3, #1]
        }
        _timing = 0;
 801497c:	2300      	movs	r3, #0
 801497e:	617b      	str	r3, [r7, #20]
      }
#else
      _timing = 2;
#endif /* _DRP */
      break;
 8014980:	46c0      	nop			@ (mov r8, r8)
  }
  return _timing;
 8014982:	697b      	ldr	r3, [r7, #20]
}
 8014984:	0018      	movs	r0, r3
 8014986:	46bd      	mov	sp, r7
 8014988:	b007      	add	sp, #28
 801498a:	bd90      	pop	{r4, r7, pc}
 801498c:	200115f0 	.word	0x200115f0
 8014990:	20011624 	.word	0x20011624

08014994 <ManageStateAttached_DRP>:
#endif /* _DRP || _SRC */

#if defined(_DRP)
static uint32_t ManageStateAttached_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	b086      	sub	sp, #24
 8014998:	af00      	add	r7, sp, #0
 801499a:	60b9      	str	r1, [r7, #8]
 801499c:	607a      	str	r2, [r7, #4]
 801499e:	210f      	movs	r1, #15
 80149a0:	187b      	adds	r3, r7, r1
 80149a2:	1c02      	adds	r2, r0, #0
 80149a4:	701a      	strb	r2, [r3, #0]
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 80149a6:	0008      	movs	r0, r1
 80149a8:	187b      	adds	r3, r7, r1
 80149aa:	781a      	ldrb	r2, [r3, #0]
 80149ac:	491e      	ldr	r1, [pc, #120]	@ (8014a28 <ManageStateAttached_DRP+0x94>)
 80149ae:	0013      	movs	r3, r2
 80149b0:	011b      	lsls	r3, r3, #4
 80149b2:	1a9b      	subs	r3, r3, r2
 80149b4:	009b      	lsls	r3, r3, #2
 80149b6:	18cb      	adds	r3, r1, r3
 80149b8:	3310      	adds	r3, #16
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	2204      	movs	r2, #4
 80149c0:	4013      	ands	r3, r2
 80149c2:	b2db      	uxtb	r3, r3
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d008      	beq.n	80149da <ManageStateAttached_DRP+0x46>
  {
    return ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
 80149c8:	687a      	ldr	r2, [r7, #4]
 80149ca:	68b9      	ldr	r1, [r7, #8]
 80149cc:	183b      	adds	r3, r7, r0
 80149ce:	781b      	ldrb	r3, [r3, #0]
 80149d0:	0018      	movs	r0, r3
 80149d2:	f000 f85f 	bl	8014a94 <ManageStateAttached_SRC>
 80149d6:	0003      	movs	r3, r0
 80149d8:	e021      	b.n	8014a1e <ManageStateAttached_DRP+0x8a>
  }
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 80149da:	200f      	movs	r0, #15
 80149dc:	183b      	adds	r3, r7, r0
 80149de:	781b      	ldrb	r3, [r3, #0]
 80149e0:	011a      	lsls	r2, r3, #4
 80149e2:	4b12      	ldr	r3, [pc, #72]	@ (8014a2c <ManageStateAttached_DRP+0x98>)
 80149e4:	18d3      	adds	r3, r2, r3
 80149e6:	613b      	str	r3, [r7, #16]
  uint32_t _timing = ManageStateAttached_SNK(PortNum, pEvent, pCCXX);
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	68b9      	ldr	r1, [r7, #8]
 80149ec:	183b      	adds	r3, r7, r0
 80149ee:	781b      	ldrb	r3, [r3, #0]
 80149f0:	0018      	movs	r0, r3
 80149f2:	f000 f98d 	bl	8014d10 <ManageStateAttached_SNK>
 80149f6:	0003      	movs	r3, r0
 80149f8:	617b      	str	r3, [r7, #20]

  /* Toggle management */
  if (_handle->CurrentHWcondition == HW_Detachment)
 80149fa:	693b      	ldr	r3, [r7, #16]
 80149fc:	781b      	ldrb	r3, [r3, #0]
 80149fe:	221c      	movs	r2, #28
 8014a00:	4013      	ands	r3, r2
 8014a02:	b2db      	uxtb	r3, r3
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d109      	bne.n	8014a1c <ManageStateAttached_DRP+0x88>
  {
    _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SRC;
 8014a08:	693b      	ldr	r3, [r7, #16]
 8014a0a:	785a      	ldrb	r2, [r3, #1]
 8014a0c:	213e      	movs	r1, #62	@ 0x3e
 8014a0e:	438a      	bics	r2, r1
 8014a10:	1c11      	adds	r1, r2, #0
 8014a12:	2210      	movs	r2, #16
 8014a14:	430a      	orrs	r2, r1
 8014a16:	705a      	strb	r2, [r3, #1]
    _timing = 0;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	617b      	str	r3, [r7, #20]
  }
  return _timing;
 8014a1c:	697b      	ldr	r3, [r7, #20]
}
 8014a1e:	0018      	movs	r0, r3
 8014a20:	46bd      	mov	sp, r7
 8014a22:	b006      	add	sp, #24
 8014a24:	bd80      	pop	{r7, pc}
 8014a26:	46c0      	nop			@ (mov r8, r8)
 8014a28:	20011624 	.word	0x20011624
 8014a2c:	200115f0 	.word	0x200115f0

08014a30 <ManageStateAttachedWait_DRP>:
#endif /* _DRP */

#if defined(_DRP) || (defined(_ACCESSORY) && defined(_SNK))
static uint32_t ManageStateAttachedWait_DRP(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8014a30:	b580      	push	{r7, lr}
 8014a32:	b084      	sub	sp, #16
 8014a34:	af00      	add	r7, sp, #0
 8014a36:	60b9      	str	r1, [r7, #8]
 8014a38:	607a      	str	r2, [r7, #4]
 8014a3a:	210f      	movs	r1, #15
 8014a3c:	187b      	adds	r3, r7, r1
 8014a3e:	1c02      	adds	r2, r0, #0
 8014a40:	701a      	strb	r2, [r3, #0]
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 8014a42:	0008      	movs	r0, r1
 8014a44:	187b      	adds	r3, r7, r1
 8014a46:	781a      	ldrb	r2, [r3, #0]
 8014a48:	4911      	ldr	r1, [pc, #68]	@ (8014a90 <ManageStateAttachedWait_DRP+0x60>)
 8014a4a:	0013      	movs	r3, r2
 8014a4c:	011b      	lsls	r3, r3, #4
 8014a4e:	1a9b      	subs	r3, r3, r2
 8014a50:	009b      	lsls	r3, r3, #2
 8014a52:	18cb      	adds	r3, r1, r3
 8014a54:	3310      	adds	r3, #16
 8014a56:	681b      	ldr	r3, [r3, #0]
 8014a58:	781b      	ldrb	r3, [r3, #0]
 8014a5a:	2204      	movs	r2, #4
 8014a5c:	4013      	ands	r3, r2
 8014a5e:	b2db      	uxtb	r3, r3
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d008      	beq.n	8014a76 <ManageStateAttachedWait_DRP+0x46>
  {
    return ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
 8014a64:	687a      	ldr	r2, [r7, #4]
 8014a66:	68b9      	ldr	r1, [r7, #8]
 8014a68:	183b      	adds	r3, r7, r0
 8014a6a:	781b      	ldrb	r3, [r3, #0]
 8014a6c:	0018      	movs	r0, r3
 8014a6e:	f7ff fe25 	bl	80146bc <ManageStateAttachedWait_SRC>
 8014a72:	0003      	movs	r3, r0
 8014a74:	e008      	b.n	8014a88 <ManageStateAttachedWait_DRP+0x58>
  }
  return ManageStateAttachedWait_SNK(PortNum, pEvent, pCCXX);
 8014a76:	687a      	ldr	r2, [r7, #4]
 8014a78:	68b9      	ldr	r1, [r7, #8]
 8014a7a:	230f      	movs	r3, #15
 8014a7c:	18fb      	adds	r3, r7, r3
 8014a7e:	781b      	ldrb	r3, [r3, #0]
 8014a80:	0018      	movs	r0, r3
 8014a82:	f000 f8b9 	bl	8014bf8 <ManageStateAttachedWait_SNK>
 8014a86:	0003      	movs	r3, r0
}
 8014a88:	0018      	movs	r0, r3
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	b004      	add	sp, #16
 8014a8e:	bd80      	pop	{r7, pc}
 8014a90:	20011624 	.word	0x20011624

08014a94 <ManageStateAttached_SRC>:
#endif /* _DRP || (_ACCESSORY && _SNK) */

#if defined(_SRC) || defined(_DRP)
static uint32_t ManageStateAttached_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8014a94:	b590      	push	{r4, r7, lr}
 8014a96:	b08b      	sub	sp, #44	@ 0x2c
 8014a98:	af00      	add	r7, sp, #0
 8014a9a:	60b9      	str	r1, [r7, #8]
 8014a9c:	607a      	str	r2, [r7, #4]
 8014a9e:	210f      	movs	r1, #15
 8014aa0:	187b      	adds	r3, r7, r1
 8014aa2:	1c02      	adds	r2, r0, #0
 8014aa4:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014aa6:	0008      	movs	r0, r1
 8014aa8:	183b      	adds	r3, r7, r0
 8014aaa:	781b      	ldrb	r3, [r3, #0]
 8014aac:	011a      	lsls	r2, r3, #4
 8014aae:	4b50      	ldr	r3, [pc, #320]	@ (8014bf0 <ManageStateAttached_SRC+0x15c>)
 8014ab0:	18d3      	adds	r3, r2, r3
 8014ab2:	623b      	str	r3, [r7, #32]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014ab4:	2302      	movs	r3, #2
 8014ab6:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 8014ab8:	183b      	adds	r3, r7, r0
 8014aba:	781a      	ldrb	r2, [r3, #0]
 8014abc:	494d      	ldr	r1, [pc, #308]	@ (8014bf4 <ManageStateAttached_SRC+0x160>)
 8014abe:	0013      	movs	r3, r2
 8014ac0:	011b      	lsls	r3, r3, #4
 8014ac2:	1a9b      	subs	r3, r3, r2
 8014ac4:	009b      	lsls	r3, r3, #2
 8014ac6:	18cb      	adds	r3, r1, r3
 8014ac8:	3334      	adds	r3, #52	@ 0x34
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b01      	cmp	r3, #1
 8014ace:	d10c      	bne.n	8014aea <ManageStateAttached_SRC+0x56>
 8014ad0:	183b      	adds	r3, r7, r0
 8014ad2:	781a      	ldrb	r2, [r3, #0]
 8014ad4:	4947      	ldr	r1, [pc, #284]	@ (8014bf4 <ManageStateAttached_SRC+0x160>)
 8014ad6:	0013      	movs	r3, r2
 8014ad8:	011b      	lsls	r3, r3, #4
 8014ada:	1a9b      	subs	r3, r3, r2
 8014adc:	009b      	lsls	r3, r3, #2
 8014ade:	585b      	ldr	r3, [r3, r1]
 8014ae0:	695a      	ldr	r2, [r3, #20]
 8014ae2:	23c0      	movs	r3, #192	@ 0xc0
 8014ae4:	029b      	lsls	r3, r3, #10
 8014ae6:	4013      	ands	r3, r2
 8014ae8:	e00c      	b.n	8014b04 <ManageStateAttached_SRC+0x70>
                  (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8014aea:	230f      	movs	r3, #15
 8014aec:	18fb      	adds	r3, r7, r3
 8014aee:	781a      	ldrb	r2, [r3, #0]
 8014af0:	4940      	ldr	r1, [pc, #256]	@ (8014bf4 <ManageStateAttached_SRC+0x160>)
 8014af2:	0013      	movs	r3, r2
 8014af4:	011b      	lsls	r3, r3, #4
 8014af6:	1a9b      	subs	r3, r3, r2
 8014af8:	009b      	lsls	r3, r3, #2
 8014afa:	585b      	ldr	r3, [r3, r1]
 8014afc:	695a      	ldr	r2, [r3, #20]
  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 8014afe:	23c0      	movs	r3, #192	@ 0xc0
 8014b00:	031b      	lsls	r3, r3, #12
 8014b02:	4013      	ands	r3, r2
 8014b04:	61fb      	str	r3, [r7, #28]
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SRC_CC1_VRD : LL_UCPD_SRC_CC2_VRD;
 8014b06:	230f      	movs	r3, #15
 8014b08:	18fb      	adds	r3, r7, r3
 8014b0a:	781a      	ldrb	r2, [r3, #0]
 8014b0c:	4939      	ldr	r1, [pc, #228]	@ (8014bf4 <ManageStateAttached_SRC+0x160>)
 8014b0e:	0013      	movs	r3, r2
 8014b10:	011b      	lsls	r3, r3, #4
 8014b12:	1a9b      	subs	r3, r3, r2
 8014b14:	009b      	lsls	r3, r3, #2
 8014b16:	18cb      	adds	r3, r1, r3
 8014b18:	3334      	adds	r3, #52	@ 0x34
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2b01      	cmp	r3, #1
 8014b1e:	d102      	bne.n	8014b26 <ManageStateAttached_SRC+0x92>
 8014b20:	2380      	movs	r3, #128	@ 0x80
 8014b22:	025b      	lsls	r3, r3, #9
 8014b24:	e001      	b.n	8014b2a <ManageStateAttached_SRC+0x96>
 8014b26:	2380      	movs	r3, #128	@ 0x80
 8014b28:	02db      	lsls	r3, r3, #11
 8014b2a:	61bb      	str	r3, [r7, #24]

  /* Check if CC lines is opened or switch to debug accessory */
  if (comp != ccx)
 8014b2c:	69ba      	ldr	r2, [r7, #24]
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	429a      	cmp	r2, r3
 8014b32:	d04f      	beq.n	8014bd4 <ManageStateAttached_SRC+0x140>
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8014b34:	6a3b      	ldr	r3, [r7, #32]
 8014b36:	781b      	ldrb	r3, [r3, #0]
 8014b38:	2220      	movs	r2, #32
 8014b3a:	4013      	ands	r3, r2
 8014b3c:	b2db      	uxtb	r3, r3
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d10c      	bne.n	8014b5c <ManageStateAttached_SRC+0xc8>
    {
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 8014b42:	6a3b      	ldr	r3, [r7, #32]
 8014b44:	781a      	ldrb	r2, [r3, #0]
 8014b46:	2120      	movs	r1, #32
 8014b48:	430a      	orrs	r2, r1
 8014b4a:	701a      	strb	r2, [r3, #0]
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 8014b4c:	f7f3 fbca 	bl	80082e4 <HAL_GetTick>
 8014b50:	0002      	movs	r2, r0
 8014b52:	6a3b      	ldr	r3, [r7, #32]
 8014b54:	609a      	str	r2, [r3, #8]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 8014b56:	2302      	movs	r3, #2
 8014b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8014b5a:	e043      	b.n	8014be4 <ManageStateAttached_SRC+0x150>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8014b5c:	f7f3 fbc2 	bl	80082e4 <HAL_GetTick>
 8014b60:	0002      	movs	r2, r0
 8014b62:	6a3b      	ldr	r3, [r7, #32]
 8014b64:	689b      	ldr	r3, [r3, #8]
 8014b66:	1ad3      	subs	r3, r2, r3
 8014b68:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	2b02      	cmp	r3, #2
 8014b6e:	d939      	bls.n	8014be4 <ManageStateAttached_SRC+0x150>
      {
        HW_SignalDetachment(PortNum);
 8014b70:	240f      	movs	r4, #15
 8014b72:	193b      	adds	r3, r7, r4
 8014b74:	781b      	ldrb	r3, [r3, #0]
 8014b76:	0018      	movs	r0, r3
 8014b78:	f001 fe20 	bl	80167bc <HW_SignalDetachment>
#ifdef _DRP
        if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
 8014b7c:	0020      	movs	r0, r4
 8014b7e:	183b      	adds	r3, r7, r0
 8014b80:	781a      	ldrb	r2, [r3, #0]
 8014b82:	491c      	ldr	r1, [pc, #112]	@ (8014bf4 <ManageStateAttached_SRC+0x160>)
 8014b84:	0013      	movs	r3, r2
 8014b86:	011b      	lsls	r3, r3, #4
 8014b88:	1a9b      	subs	r3, r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	18cb      	adds	r3, r1, r3
 8014b8e:	330c      	adds	r3, #12
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	795b      	ldrb	r3, [r3, #5]
 8014b94:	2220      	movs	r2, #32
 8014b96:	4013      	ands	r3, r2
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d004      	beq.n	8014ba8 <ManageStateAttached_SRC+0x114>
        {
          USBPDM1_AssertRd(PortNum);
 8014b9e:	183b      	adds	r3, r7, r0
 8014ba0:	781b      	ldrb	r3, [r3, #0]
 8014ba2:	0018      	movs	r0, r3
 8014ba4:	f001 fb56 	bl	8016254 <USBPDM1_AssertRd>
        }
#endif /* _DRP */
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8014ba8:	6a3b      	ldr	r3, [r7, #32]
 8014baa:	781a      	ldrb	r2, [r3, #0]
 8014bac:	2120      	movs	r1, #32
 8014bae:	438a      	bics	r2, r1
 8014bb0:	701a      	strb	r2, [r3, #0]
        /* move inside state DETACH to avoid wrong VCONN level*/
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 8014bb2:	6a3b      	ldr	r3, [r7, #32]
 8014bb4:	785a      	ldrb	r2, [r3, #1]
 8014bb6:	213e      	movs	r1, #62	@ 0x3e
 8014bb8:	438a      	bics	r2, r1
 8014bba:	1c11      	adds	r1, r2, #0
 8014bbc:	2216      	movs	r2, #22
 8014bbe:	430a      	orrs	r2, r1
 8014bc0:	705a      	strb	r2, [r3, #1]
        *pEvent                     = USBPD_CAD_EVENT_DETACHED;
 8014bc2:	68bb      	ldr	r3, [r7, #8]
 8014bc4:	2201      	movs	r2, #1
 8014bc6:	701a      	strb	r2, [r3, #0]
        *pCCXX                      = CCNONE;
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	2200      	movs	r2, #0
 8014bcc:	601a      	str	r2, [r3, #0]
        _timing                     = 0;
 8014bce:	2300      	movs	r3, #0
 8014bd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8014bd2:	e007      	b.n	8014be4 <ManageStateAttached_SRC+0x150>
    }
  }
  else
  {
    /* Reset tPDDebounce flag*/
    _handle->CAD_tDebounce_flag   = USBPD_FALSE;
 8014bd4:	6a3b      	ldr	r3, [r7, #32]
 8014bd6:	781a      	ldrb	r2, [r3, #0]
 8014bd8:	2120      	movs	r1, #32
 8014bda:	438a      	bics	r2, r1
 8014bdc:	701a      	strb	r2, [r3, #0]
    _timing = CAD_INFINITE_TIME;
 8014bde:	2301      	movs	r3, #1
 8014be0:	425b      	negs	r3, r3
 8014be2:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  return _timing;
 8014be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014be6:	0018      	movs	r0, r3
 8014be8:	46bd      	mov	sp, r7
 8014bea:	b00b      	add	sp, #44	@ 0x2c
 8014bec:	bd90      	pop	{r4, r7, pc}
 8014bee:	46c0      	nop			@ (mov r8, r8)
 8014bf0:	200115f0 	.word	0x200115f0
 8014bf4:	20011624 	.word	0x20011624

08014bf8 <ManageStateAttachedWait_SNK>:
#endif /* _SRC || _DRP */

#if defined(_SNK) || defined(_DRP)
static uint32_t ManageStateAttachedWait_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8014bf8:	b590      	push	{r4, r7, lr}
 8014bfa:	b089      	sub	sp, #36	@ 0x24
 8014bfc:	af00      	add	r7, sp, #0
 8014bfe:	60b9      	str	r1, [r7, #8]
 8014c00:	607a      	str	r2, [r7, #4]
 8014c02:	240f      	movs	r4, #15
 8014c04:	193b      	adds	r3, r7, r4
 8014c06:	1c02      	adds	r2, r0, #0
 8014c08:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014c0a:	193b      	adds	r3, r7, r4
 8014c0c:	781b      	ldrb	r3, [r3, #0]
 8014c0e:	011a      	lsls	r2, r3, #4
 8014c10:	4b3e      	ldr	r3, [pc, #248]	@ (8014d0c <ManageStateAttachedWait_SNK+0x114>)
 8014c12:	18d3      	adds	r3, r2, r3
 8014c14:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014c16:	2302      	movs	r3, #2
 8014c18:	61fb      	str	r3, [r7, #28]

  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 8014c1a:	f7f3 fb63 	bl	80082e4 <HAL_GetTick>
 8014c1e:	0002      	movs	r2, r0
 8014c20:	69bb      	ldr	r3, [r7, #24]
 8014c22:	689b      	ldr	r3, [r3, #8]
 8014c24:	1ad3      	subs	r3, r2, r3
 8014c26:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SNK(PortNum);
 8014c28:	193b      	adds	r3, r7, r4
 8014c2a:	781b      	ldrb	r3, [r3, #0]
 8014c2c:	0018      	movs	r0, r3
 8014c2e:	f7ff fa87 	bl	8014140 <CAD_Check_HW_SNK>
  if (_handle->CurrentHWcondition == HW_Attachment)
 8014c32:	69bb      	ldr	r3, [r7, #24]
 8014c34:	781b      	ldrb	r3, [r3, #0]
 8014c36:	221c      	movs	r2, #28
 8014c38:	4013      	ands	r3, r2
 8014c3a:	b2db      	uxtb	r3, r3
 8014c3c:	2b04      	cmp	r3, #4
 8014c3e:	d130      	bne.n	8014ca2 <ManageStateAttachedWait_SNK+0xaa>
  {
    if (CAD_tDebounce > CAD_TCCDEBOUCE_THRESHOLD)
 8014c40:	697b      	ldr	r3, [r7, #20]
 8014c42:	2b78      	cmp	r3, #120	@ 0x78
 8014c44:	d927      	bls.n	8014c96 <ManageStateAttachedWait_SNK+0x9e>
    {
      if (USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_VSAFE5V)) /* Check if Vbus is on */
 8014c46:	193b      	adds	r3, r7, r4
 8014c48:	781b      	ldrb	r3, [r3, #0]
 8014c4a:	2101      	movs	r1, #1
 8014c4c:	0018      	movs	r0, r3
 8014c4e:	f008 f821 	bl	801cc94 <USBPD_PWR_IF_GetVBUSStatus>
 8014c52:	0003      	movs	r3, r0
 8014c54:	2b01      	cmp	r3, #1
 8014c56:	d11e      	bne.n	8014c96 <ManageStateAttachedWait_SNK+0x9e>
      {
        HW_SignalAttachement(PortNum, _handle->cc);
 8014c58:	69bb      	ldr	r3, [r7, #24]
 8014c5a:	781b      	ldrb	r3, [r3, #0]
 8014c5c:	079b      	lsls	r3, r3, #30
 8014c5e:	0f9b      	lsrs	r3, r3, #30
 8014c60:	b2db      	uxtb	r3, r3
 8014c62:	001a      	movs	r2, r3
 8014c64:	193b      	adds	r3, r7, r4
 8014c66:	781b      	ldrb	r3, [r3, #0]
 8014c68:	0011      	movs	r1, r2
 8014c6a:	0018      	movs	r0, r3
 8014c6c:	f001 fc44 	bl	80164f8 <HW_SignalAttachement>
        _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 8014c70:	69bb      	ldr	r3, [r7, #24]
 8014c72:	785a      	ldrb	r2, [r3, #1]
 8014c74:	213e      	movs	r1, #62	@ 0x3e
 8014c76:	438a      	bics	r2, r1
 8014c78:	1c11      	adds	r1, r2, #0
 8014c7a:	2206      	movs	r2, #6
 8014c7c:	430a      	orrs	r2, r1
 8014c7e:	705a      	strb	r2, [r3, #1]
        *pEvent = USBPD_CAD_EVENT_ATTACHED;
 8014c80:	68bb      	ldr	r3, [r7, #8]
 8014c82:	2202      	movs	r2, #2
 8014c84:	701a      	strb	r2, [r3, #0]
        *pCCXX = _handle->cc;
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	781b      	ldrb	r3, [r3, #0]
 8014c8a:	079b      	lsls	r3, r3, #30
 8014c8c:	0f9b      	lsrs	r3, r3, #30
 8014c8e:	b2db      	uxtb	r3, r3
 8014c90:	001a      	movs	r2, r3
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	601a      	str	r2, [r3, #0]
      }
    }
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8014c96:	69bb      	ldr	r3, [r7, #24]
 8014c98:	781a      	ldrb	r2, [r3, #0]
 8014c9a:	2120      	movs	r1, #32
 8014c9c:	438a      	bics	r2, r1
 8014c9e:	701a      	strb	r2, [r3, #0]
 8014ca0:	e02e      	b.n	8014d00 <ManageStateAttachedWait_SNK+0x108>
  }
  else
  {
    /* start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 8014ca2:	69bb      	ldr	r3, [r7, #24]
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	2220      	movs	r2, #32
 8014ca8:	4013      	ands	r3, r2
 8014caa:	b2db      	uxtb	r3, r3
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d10c      	bne.n	8014cca <ManageStateAttachedWait_SNK+0xd2>
    {
      _handle->CAD_tDebounce_start = HAL_GetTick();
 8014cb0:	f7f3 fb18 	bl	80082e4 <HAL_GetTick>
 8014cb4:	0002      	movs	r2, r0
 8014cb6:	69bb      	ldr	r3, [r7, #24]
 8014cb8:	609a      	str	r2, [r3, #8]
      _handle->CAD_tDebounce_flag = USBPD_TRUE;
 8014cba:	69bb      	ldr	r3, [r7, #24]
 8014cbc:	781a      	ldrb	r2, [r3, #0]
 8014cbe:	2120      	movs	r1, #32
 8014cc0:	430a      	orrs	r2, r1
 8014cc2:	701a      	strb	r2, [r3, #0]
      _timing = CAD_TPDDEBOUCE_THRESHOLD;
 8014cc4:	230c      	movs	r3, #12
 8014cc6:	61fb      	str	r3, [r7, #28]
 8014cc8:	e01a      	b.n	8014d00 <ManageStateAttachedWait_SNK+0x108>
    }
    else /* CAD_tDebounce already running */
    {
      /* evaluate CAD_tDebounce */
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start > CAD_TPDDEBOUCE_THRESHOLD))
 8014cca:	f7f3 fb0b 	bl	80082e4 <HAL_GetTick>
 8014cce:	0002      	movs	r2, r0
 8014cd0:	69bb      	ldr	r3, [r7, #24]
 8014cd2:	689b      	ldr	r3, [r3, #8]
 8014cd4:	1ad3      	subs	r3, r2, r3
 8014cd6:	2b0c      	cmp	r3, #12
 8014cd8:	d912      	bls.n	8014d00 <ManageStateAttachedWait_SNK+0x108>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 8014cda:	69bb      	ldr	r3, [r7, #24]
 8014cdc:	781a      	ldrb	r2, [r3, #0]
 8014cde:	2120      	movs	r1, #32
 8014ce0:	438a      	bics	r2, r1
 8014ce2:	701a      	strb	r2, [r3, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8014ce4:	69bb      	ldr	r3, [r7, #24]
 8014ce6:	785a      	ldrb	r2, [r3, #1]
 8014ce8:	213e      	movs	r1, #62	@ 0x3e
 8014cea:	438a      	bics	r2, r1
 8014cec:	1c11      	adds	r1, r2, #0
 8014cee:	2202      	movs	r2, #2
 8014cf0:	430a      	orrs	r2, r1
 8014cf2:	705a      	strb	r2, [r3, #1]
        BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8014cf4:	230f      	movs	r3, #15
 8014cf6:	18fb      	adds	r3, r7, r3
 8014cf8:	781b      	ldrb	r3, [r3, #0]
 8014cfa:	0018      	movs	r0, r3
 8014cfc:	f008 f987 	bl	801d00e <BSP_USBPD_PWR_VBUSDeInit>
        }
#endif /* _ACCESSORY_SNK */
      }
    }
  }
  return _timing;
 8014d00:	69fb      	ldr	r3, [r7, #28]
}
 8014d02:	0018      	movs	r0, r3
 8014d04:	46bd      	mov	sp, r7
 8014d06:	b009      	add	sp, #36	@ 0x24
 8014d08:	bd90      	pop	{r4, r7, pc}
 8014d0a:	46c0      	nop			@ (mov r8, r8)
 8014d0c:	200115f0 	.word	0x200115f0

08014d10 <ManageStateAttached_SNK>:

static uint32_t ManageStateAttached_SNK(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 8014d10:	b590      	push	{r4, r7, lr}
 8014d12:	b089      	sub	sp, #36	@ 0x24
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	60b9      	str	r1, [r7, #8]
 8014d18:	607a      	str	r2, [r7, #4]
 8014d1a:	210f      	movs	r1, #15
 8014d1c:	187b      	adds	r3, r7, r1
 8014d1e:	1c02      	adds	r2, r0, #0
 8014d20:	701a      	strb	r2, [r3, #0]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 8014d22:	0008      	movs	r0, r1
 8014d24:	183b      	adds	r3, r7, r0
 8014d26:	781b      	ldrb	r3, [r3, #0]
 8014d28:	011a      	lsls	r2, r3, #4
 8014d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8014de8 <ManageStateAttached_SNK+0xd8>)
 8014d2c:	18d3      	adds	r3, r2, r3
 8014d2e:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 8014d30:	2302      	movs	r3, #2
 8014d32:	61fb      	str	r3, [r7, #28]

  uint32_t ccx;
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SNK_CC1_VOPEN : LL_UCPD_SNK_CC2_VOPEN;
 8014d34:	2300      	movs	r3, #0
 8014d36:	617b      	str	r3, [r7, #20]
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8014d38:	183b      	adds	r3, r7, r0
 8014d3a:	781a      	ldrb	r2, [r3, #0]
 8014d3c:	492b      	ldr	r1, [pc, #172]	@ (8014dec <ManageStateAttached_SNK+0xdc>)
 8014d3e:	0013      	movs	r3, r2
 8014d40:	011b      	lsls	r3, r3, #4
 8014d42:	1a9b      	subs	r3, r3, r2
 8014d44:	009b      	lsls	r3, r3, #2
 8014d46:	18cb      	adds	r3, r1, r3
 8014d48:	3334      	adds	r3, #52	@ 0x34
 8014d4a:	681b      	ldr	r3, [r3, #0]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8014d4c:	2b01      	cmp	r3, #1
 8014d4e:	d10c      	bne.n	8014d6a <ManageStateAttached_SNK+0x5a>
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8014d50:	183b      	adds	r3, r7, r0
 8014d52:	781a      	ldrb	r2, [r3, #0]
 8014d54:	4925      	ldr	r1, [pc, #148]	@ (8014dec <ManageStateAttached_SNK+0xdc>)
 8014d56:	0013      	movs	r3, r2
 8014d58:	011b      	lsls	r3, r3, #4
 8014d5a:	1a9b      	subs	r3, r3, r2
 8014d5c:	009b      	lsls	r3, r3, #2
 8014d5e:	585b      	ldr	r3, [r3, r1]
 8014d60:	695a      	ldr	r2, [r3, #20]
         : (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 8014d62:	23c0      	movs	r3, #192	@ 0xc0
 8014d64:	029b      	lsls	r3, r3, #10
 8014d66:	4013      	ands	r3, r2
 8014d68:	e00c      	b.n	8014d84 <ManageStateAttached_SNK+0x74>
 8014d6a:	230f      	movs	r3, #15
 8014d6c:	18fb      	adds	r3, r7, r3
 8014d6e:	781a      	ldrb	r2, [r3, #0]
 8014d70:	491e      	ldr	r1, [pc, #120]	@ (8014dec <ManageStateAttached_SNK+0xdc>)
 8014d72:	0013      	movs	r3, r2
 8014d74:	011b      	lsls	r3, r3, #4
 8014d76:	1a9b      	subs	r3, r3, r2
 8014d78:	009b      	lsls	r3, r3, #2
 8014d7a:	585b      	ldr	r3, [r3, r1]
 8014d7c:	695a      	ldr	r2, [r3, #20]
 8014d7e:	23c0      	movs	r3, #192	@ 0xc0
 8014d80:	031b      	lsls	r3, r3, #12
 8014d82:	4013      	ands	r3, r2
  ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1)
 8014d84:	613b      	str	r3, [r7, #16]
  if ((USBPD_TRUE == USBPD_PWR_IF_GetVBUSStatus(PortNum,
 8014d86:	240f      	movs	r4, #15
 8014d88:	193b      	adds	r3, r7, r4
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	2102      	movs	r1, #2
 8014d8e:	0018      	movs	r0, r3
 8014d90:	f007 ff80 	bl	801cc94 <USBPD_PWR_IF_GetVBUSStatus>
 8014d94:	0003      	movs	r3, r0
 8014d96:	2b01      	cmp	r3, #1
 8014d98:	d11e      	bne.n	8014dd8 <ManageStateAttached_SNK+0xc8>
                                                USBPD_PWR_SNKDETACH)) /* Check if Vbus is below disconnect threshold */
      &&
 8014d9a:	697a      	ldr	r2, [r7, #20]
 8014d9c:	693b      	ldr	r3, [r7, #16]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d11a      	bne.n	8014dd8 <ManageStateAttached_SNK+0xc8>
      (comp == ccx)                                                   /* Confirm that there is no RP */
     )
  {
    HW_SignalDetachment(PortNum);
 8014da2:	193b      	adds	r3, r7, r4
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	0018      	movs	r0, r3
 8014da8:	f001 fd08 	bl	80167bc <HW_SignalDetachment>
    /* Restart the toggle time */
    _handle->CurrentHWcondition = HW_Detachment;
 8014dac:	69bb      	ldr	r3, [r7, #24]
 8014dae:	781a      	ldrb	r2, [r3, #0]
 8014db0:	211c      	movs	r1, #28
 8014db2:	438a      	bics	r2, r1
 8014db4:	701a      	strb	r2, [r3, #0]
    _handle->cstate             = USBPD_CAD_STATE_DETACHED;
 8014db6:	69bb      	ldr	r3, [r7, #24]
 8014db8:	785a      	ldrb	r2, [r3, #1]
 8014dba:	213e      	movs	r1, #62	@ 0x3e
 8014dbc:	438a      	bics	r2, r1
 8014dbe:	1c11      	adds	r1, r2, #0
 8014dc0:	2202      	movs	r2, #2
 8014dc2:	430a      	orrs	r2, r1
 8014dc4:	705a      	strb	r2, [r3, #1]
    if (USBPD_TRUE ==  _handle->CAD_Accessory_SNK)
    {
      _handle->CAD_tToggle_start = HAL_GetTick();
    }
#endif /* _ACCESSORY_SNK */
    *pEvent = USBPD_CAD_EVENT_DETACHED;
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	2201      	movs	r2, #1
 8014dca:	701a      	strb	r2, [r3, #0]
    *pCCXX = CCNONE;
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	601a      	str	r2, [r3, #0]
    _timing = 0;
 8014dd2:	2300      	movs	r3, #0
 8014dd4:	61fb      	str	r3, [r7, #28]
 8014dd6:	e001      	b.n	8014ddc <ManageStateAttached_SNK+0xcc>
  }
  else
  {
    _timing = CAD_VBUS_POLLING_TIME;
 8014dd8:	230a      	movs	r3, #10
 8014dda:	61fb      	str	r3, [r7, #28]
#if defined(_LOW_POWER) || defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */

  return _timing;
 8014ddc:	69fb      	ldr	r3, [r7, #28]
}
 8014dde:	0018      	movs	r0, r3
 8014de0:	46bd      	mov	sp, r7
 8014de2:	b009      	add	sp, #36	@ 0x24
 8014de4:	bd90      	pop	{r4, r7, pc}
 8014de6:	46c0      	nop			@ (mov r8, r8)
 8014de8:	200115f0 	.word	0x200115f0
 8014dec:	20011624 	.word	0x20011624

08014df0 <LL_AHB1_GRP1_EnableClock>:
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b084      	sub	sp, #16
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8014df8:	4b07      	ldr	r3, [pc, #28]	@ (8014e18 <LL_AHB1_GRP1_EnableClock+0x28>)
 8014dfa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8014dfc:	4b06      	ldr	r3, [pc, #24]	@ (8014e18 <LL_AHB1_GRP1_EnableClock+0x28>)
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	430a      	orrs	r2, r1
 8014e02:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8014e04:	4b04      	ldr	r3, [pc, #16]	@ (8014e18 <LL_AHB1_GRP1_EnableClock+0x28>)
 8014e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	4013      	ands	r3, r2
 8014e0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8014e0e:	68fb      	ldr	r3, [r7, #12]
}
 8014e10:	46c0      	nop			@ (mov r8, r8)
 8014e12:	46bd      	mov	sp, r7
 8014e14:	b004      	add	sp, #16
 8014e16:	bd80      	pop	{r7, pc}
 8014e18:	40021000 	.word	0x40021000

08014e1c <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b082      	sub	sp, #8
 8014e20:	af00      	add	r7, sp, #0
 8014e22:	0002      	movs	r2, r0
 8014e24:	1dfb      	adds	r3, r7, #7
 8014e26:	701a      	strb	r2, [r3, #0]
#if defined(UCPD_INSTANCE0) && defined(UCPD_INSTANCE1)
  return PortNum == 0u ? UCPD_INSTANCE0 : UCPD_INSTANCE1;
 8014e28:	1dfb      	adds	r3, r7, #7
 8014e2a:	781b      	ldrb	r3, [r3, #0]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d101      	bne.n	8014e34 <USBPD_HW_GetUSPDInstance+0x18>
 8014e30:	4b03      	ldr	r3, [pc, #12]	@ (8014e40 <USBPD_HW_GetUSPDInstance+0x24>)
 8014e32:	e000      	b.n	8014e36 <USBPD_HW_GetUSPDInstance+0x1a>
 8014e34:	4b03      	ldr	r3, [pc, #12]	@ (8014e44 <USBPD_HW_GetUSPDInstance+0x28>)
#else
  return UCPD_INSTANCE0;
#endif /* UCPD_INSTANCE0 && UCPD_INSTANCE1 */
}
 8014e36:	0018      	movs	r0, r3
 8014e38:	46bd      	mov	sp, r7
 8014e3a:	b002      	add	sp, #8
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	46c0      	nop			@ (mov r8, r8)
 8014e40:	4000a000 	.word	0x4000a000
 8014e44:	4000a400 	.word	0x4000a400

08014e48 <USBPD_HW_Init_DMARxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 8014e48:	b590      	push	{r4, r7, lr}
 8014e4a:	b08f      	sub	sp, #60	@ 0x3c
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	0002      	movs	r2, r0
 8014e50:	1dfb      	adds	r3, r7, #7
 8014e52:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8014e54:	240c      	movs	r4, #12
 8014e56:	193b      	adds	r3, r7, r4
 8014e58:	0018      	movs	r0, r3
 8014e5a:	f7f8 f8e9 	bl	800d030 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 8014e5e:	0021      	movs	r1, r4
 8014e60:	187b      	adds	r3, r7, r1
 8014e62:	2200      	movs	r2, #0
 8014e64:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8014e66:	187b      	adds	r3, r7, r1
 8014e68:	2200      	movs	r2, #0
 8014e6a:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8014e6c:	187b      	adds	r3, r7, r1
 8014e6e:	2200      	movs	r2, #0
 8014e70:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8014e72:	187b      	adds	r3, r7, r1
 8014e74:	2280      	movs	r2, #128	@ 0x80
 8014e76:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8014e78:	187b      	adds	r3, r7, r1
 8014e7a:	2200      	movs	r2, #0
 8014e7c:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8014e7e:	187b      	adds	r3, r7, r1
 8014e80:	2200      	movs	r2, #0
 8014e82:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8014e84:	187b      	adds	r3, r7, r1
 8014e86:	2200      	movs	r2, #0
 8014e88:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8014e8a:	187b      	adds	r3, r7, r1
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8014e90:	187b      	adds	r3, r7, r1
 8014e92:	2200      	movs	r2, #0
 8014e94:	601a      	str	r2, [r3, #0]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 8014e96:	187b      	adds	r3, r7, r1
 8014e98:	2280      	movs	r2, #128	@ 0x80
 8014e9a:	0192      	lsls	r2, r2, #6
 8014e9c:	629a      	str	r2, [r3, #40]	@ 0x28

  switch (PortNum)
 8014e9e:	1dfb      	adds	r3, r7, #7
 8014ea0:	781b      	ldrb	r3, [r3, #0]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d002      	beq.n	8014eac <USBPD_HW_Init_DMARxInstance+0x64>
 8014ea6:	2b01      	cmp	r3, #1
 8014ea8:	d00e      	beq.n	8014ec8 <USBPD_HW_Init_DMARxInstance+0x80>

      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8014eaa:	e01b      	b.n	8014ee4 <USBPD_HW_Init_DMARxInstance+0x9c>
      UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 8014eac:	2001      	movs	r0, #1
 8014eae:	f7ff ff9f 	bl	8014df0 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 8014eb2:	210c      	movs	r1, #12
 8014eb4:	187b      	adds	r3, r7, r1
 8014eb6:	223a      	movs	r2, #58	@ 0x3a
 8014eb8:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 8014eba:	187b      	adds	r3, r7, r1
 8014ebc:	480f      	ldr	r0, [pc, #60]	@ (8014efc <USBPD_HW_Init_DMARxInstance+0xb4>)
 8014ebe:	001a      	movs	r2, r3
 8014ec0:	2100      	movs	r1, #0
 8014ec2:	f7f8 f875 	bl	800cfb0 <LL_DMA_Init>
      break;
 8014ec6:	e00d      	b.n	8014ee4 <USBPD_HW_Init_DMARxInstance+0x9c>
      UCPDDMA_INSTANCE1_CLOCKENABLE_RX;
 8014ec8:	2001      	movs	r0, #1
 8014eca:	f7ff ff91 	bl	8014df0 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE1_REQUEST_RX;
 8014ece:	210c      	movs	r1, #12
 8014ed0:	187b      	adds	r3, r7, r1
 8014ed2:	223c      	movs	r2, #60	@ 0x3c
 8014ed4:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_RX, UCPDDMA_INSTANCE1_LL_CHANNEL_RX, &DMA_InitStruct);
 8014ed6:	187b      	adds	r3, r7, r1
 8014ed8:	4808      	ldr	r0, [pc, #32]	@ (8014efc <USBPD_HW_Init_DMARxInstance+0xb4>)
 8014eda:	001a      	movs	r2, r3
 8014edc:	2102      	movs	r1, #2
 8014ede:	f7f8 f867 	bl	800cfb0 <LL_DMA_Init>
      break;
 8014ee2:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_RX : UCPDDMA_INSTANCE1_CHANNEL_RX;
 8014ee4:	1dfb      	adds	r3, r7, #7
 8014ee6:	781b      	ldrb	r3, [r3, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d101      	bne.n	8014ef0 <USBPD_HW_Init_DMARxInstance+0xa8>
 8014eec:	4b04      	ldr	r3, [pc, #16]	@ (8014f00 <USBPD_HW_Init_DMARxInstance+0xb8>)
 8014eee:	e000      	b.n	8014ef2 <USBPD_HW_Init_DMARxInstance+0xaa>
 8014ef0:	4b04      	ldr	r3, [pc, #16]	@ (8014f04 <USBPD_HW_Init_DMARxInstance+0xbc>)
#else
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
#endif /* UCPD_INSTANCE1 */
}
 8014ef2:	0018      	movs	r0, r3
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	b00f      	add	sp, #60	@ 0x3c
 8014ef8:	bd90      	pop	{r4, r7, pc}
 8014efa:	46c0      	nop			@ (mov r8, r8)
 8014efc:	40020000 	.word	0x40020000
 8014f00:	40020008 	.word	0x40020008
 8014f04:	40020030 	.word	0x40020030

08014f08 <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	b082      	sub	sp, #8
 8014f0c:	af00      	add	r7, sp, #0
 8014f0e:	0002      	movs	r2, r0
 8014f10:	1dfb      	adds	r3, r7, #7
 8014f12:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8014f14:	46c0      	nop			@ (mov r8, r8)
 8014f16:	46bd      	mov	sp, r7
 8014f18:	b002      	add	sp, #8
 8014f1a:	bd80      	pop	{r7, pc}

08014f1c <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 8014f1c:	b590      	push	{r4, r7, lr}
 8014f1e:	b08f      	sub	sp, #60	@ 0x3c
 8014f20:	af00      	add	r7, sp, #0
 8014f22:	0002      	movs	r2, r0
 8014f24:	1dfb      	adds	r3, r7, #7
 8014f26:	701a      	strb	r2, [r3, #0]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 8014f28:	240c      	movs	r4, #12
 8014f2a:	193b      	adds	r3, r7, r4
 8014f2c:	0018      	movs	r0, r3
 8014f2e:	f7f8 f87f 	bl	800d030 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 8014f32:	0021      	movs	r1, r4
 8014f34:	187b      	adds	r3, r7, r1
 8014f36:	2210      	movs	r2, #16
 8014f38:	609a      	str	r2, [r3, #8]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 8014f3a:	187b      	adds	r3, r7, r1
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	60da      	str	r2, [r3, #12]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 8014f40:	187b      	adds	r3, r7, r1
 8014f42:	2200      	movs	r2, #0
 8014f44:	611a      	str	r2, [r3, #16]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 8014f46:	187b      	adds	r3, r7, r1
 8014f48:	2280      	movs	r2, #128	@ 0x80
 8014f4a:	615a      	str	r2, [r3, #20]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 8014f4c:	187b      	adds	r3, r7, r1
 8014f4e:	2200      	movs	r2, #0
 8014f50:	619a      	str	r2, [r3, #24]
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 8014f52:	187b      	adds	r3, r7, r1
 8014f54:	2200      	movs	r2, #0
 8014f56:	61da      	str	r2, [r3, #28]
  DMA_InitStruct.NbData = 0;
 8014f58:	187b      	adds	r3, r7, r1
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	621a      	str	r2, [r3, #32]
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 8014f5e:	187b      	adds	r3, r7, r1
 8014f60:	2200      	movs	r2, #0
 8014f62:	605a      	str	r2, [r3, #4]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 8014f64:	187b      	adds	r3, r7, r1
 8014f66:	2200      	movs	r2, #0
 8014f68:	601a      	str	r2, [r3, #0]

  switch (PortNum)
 8014f6a:	1dfb      	adds	r3, r7, #7
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d002      	beq.n	8014f78 <USBPD_HW_Init_DMATxInstance+0x5c>
 8014f72:	2b01      	cmp	r3, #1
 8014f74:	d012      	beq.n	8014f9c <USBPD_HW_Init_DMATxInstance+0x80>
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
      break;
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8014f76:	e023      	b.n	8014fc0 <USBPD_HW_Init_DMATxInstance+0xa4>
      UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 8014f78:	2001      	movs	r0, #1
 8014f7a:	f7ff ff39 	bl	8014df0 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 8014f7e:	210c      	movs	r1, #12
 8014f80:	187b      	adds	r3, r7, r1
 8014f82:	223b      	movs	r2, #59	@ 0x3b
 8014f84:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8014f86:	187b      	adds	r3, r7, r1
 8014f88:	2280      	movs	r2, #128	@ 0x80
 8014f8a:	0152      	lsls	r2, r2, #5
 8014f8c:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 8014f8e:	187b      	adds	r3, r7, r1
 8014f90:	4811      	ldr	r0, [pc, #68]	@ (8014fd8 <USBPD_HW_Init_DMATxInstance+0xbc>)
 8014f92:	001a      	movs	r2, r3
 8014f94:	2101      	movs	r1, #1
 8014f96:	f7f8 f80b 	bl	800cfb0 <LL_DMA_Init>
      break;
 8014f9a:	e011      	b.n	8014fc0 <USBPD_HW_Init_DMATxInstance+0xa4>
      UCPDDMA_INSTANCE1_CLOCKENABLE_TX;
 8014f9c:	2001      	movs	r0, #1
 8014f9e:	f7ff ff27 	bl	8014df0 <LL_AHB1_GRP1_EnableClock>
      DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE1_REQUEST_TX;
 8014fa2:	210c      	movs	r1, #12
 8014fa4:	187b      	adds	r3, r7, r1
 8014fa6:	223d      	movs	r2, #61	@ 0x3d
 8014fa8:	625a      	str	r2, [r3, #36]	@ 0x24
      DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 8014faa:	187b      	adds	r3, r7, r1
 8014fac:	2280      	movs	r2, #128	@ 0x80
 8014fae:	0152      	lsls	r2, r2, #5
 8014fb0:	629a      	str	r2, [r3, #40]	@ 0x28
      (void)LL_DMA_Init(UCPDDMA_INSTANCE1_DMA_TX, UCPDDMA_INSTANCE1_LL_CHANNEL_TX, &DMA_InitStruct);
 8014fb2:	187b      	adds	r3, r7, r1
 8014fb4:	4808      	ldr	r0, [pc, #32]	@ (8014fd8 <USBPD_HW_Init_DMATxInstance+0xbc>)
 8014fb6:	001a      	movs	r2, r3
 8014fb8:	2103      	movs	r1, #3
 8014fba:	f7f7 fff9 	bl	800cfb0 <LL_DMA_Init>
      break;
 8014fbe:	46c0      	nop			@ (mov r8, r8)
  }

#if defined(UCPD_INSTANCE1)
  return (PortNum == 0u) ? UCPDDMA_INSTANCE0_CHANNEL_TX : UCPDDMA_INSTANCE1_CHANNEL_TX;
 8014fc0:	1dfb      	adds	r3, r7, #7
 8014fc2:	781b      	ldrb	r3, [r3, #0]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d101      	bne.n	8014fcc <USBPD_HW_Init_DMATxInstance+0xb0>
 8014fc8:	4b04      	ldr	r3, [pc, #16]	@ (8014fdc <USBPD_HW_Init_DMATxInstance+0xc0>)
 8014fca:	e000      	b.n	8014fce <USBPD_HW_Init_DMATxInstance+0xb2>
 8014fcc:	4b04      	ldr	r3, [pc, #16]	@ (8014fe0 <USBPD_HW_Init_DMATxInstance+0xc4>)
#else
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
#endif /* UCPD_INSTANCE1 */
}
 8014fce:	0018      	movs	r0, r3
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	b00f      	add	sp, #60	@ 0x3c
 8014fd4:	bd90      	pop	{r4, r7, pc}
 8014fd6:	46c0      	nop			@ (mov r8, r8)
 8014fd8:	40020000 	.word	0x40020000
 8014fdc:	4002001c 	.word	0x4002001c
 8014fe0:	40020044 	.word	0x40020044

08014fe4 <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b082      	sub	sp, #8
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	0002      	movs	r2, r0
 8014fec:	1dfb      	adds	r3, r7, #7
 8014fee:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
}
 8014ff0:	46c0      	nop			@ (mov r8, r8)
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	b002      	add	sp, #8
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b082      	sub	sp, #8
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	0002      	movs	r2, r0
 8015000:	1dfb      	adds	r3, r7, #7
 8015002:	701a      	strb	r2, [r3, #0]
 8015004:	1dbb      	adds	r3, r7, #6
 8015006:	1c0a      	adds	r2, r1, #0
 8015008:	701a      	strb	r2, [r3, #0]
  switch (PortNum)
 801500a:	1dfb      	adds	r3, r7, #7
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	2b00      	cmp	r3, #0
 8015010:	d002      	beq.n	8015018 <USBPD_HW_SetFRSSignalling+0x20>
 8015012:	2b01      	cmp	r3, #1
 8015014:	d002      	beq.n	801501c <USBPD_HW_SetFRSSignalling+0x24>
      }
      break;
    }
#endif /* UCPD_INSTANCE1 */
    default:
      break;
 8015016:	e002      	b.n	801501e <USBPD_HW_SetFRSSignalling+0x26>
      break;
 8015018:	46c0      	nop			@ (mov r8, r8)
 801501a:	e000      	b.n	801501e <USBPD_HW_SetFRSSignalling+0x26>
      break;
 801501c:	46c0      	nop			@ (mov r8, r8)
  }
}
 801501e:	46c0      	nop			@ (mov r8, r8)
 8015020:	46bd      	mov	sp, r7
 8015022:	b002      	add	sp, #8
 8015024:	bd80      	pop	{r7, pc}

08015026 <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 8015026:	b580      	push	{r7, lr}
 8015028:	b082      	sub	sp, #8
 801502a:	af00      	add	r7, sp, #0
 801502c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	699b      	ldr	r3, [r3, #24]
 8015032:	2280      	movs	r2, #128	@ 0x80
 8015034:	0212      	lsls	r2, r2, #8
 8015036:	431a      	orrs	r2, r3
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	619a      	str	r2, [r3, #24]
}
 801503c:	46c0      	nop			@ (mov r8, r8)
 801503e:	46bd      	mov	sp, r7
 8015040:	b002      	add	sp, #8
 8015042:	bd80      	pop	{r7, pc}

08015044 <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b082      	sub	sp, #8
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	699b      	ldr	r3, [r3, #24]
 8015050:	2280      	movs	r2, #128	@ 0x80
 8015052:	01d2      	lsls	r2, r2, #7
 8015054:	431a      	orrs	r2, r3
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	619a      	str	r2, [r3, #24]
}
 801505a:	46c0      	nop			@ (mov r8, r8)
 801505c:	46bd      	mov	sp, r7
 801505e:	b002      	add	sp, #8
 8015060:	bd80      	pop	{r7, pc}

08015062 <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 8015062:	b580      	push	{r7, lr}
 8015064:	b082      	sub	sp, #8
 8015066:	af00      	add	r7, sp, #0
 8015068:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	699b      	ldr	r3, [r3, #24]
 801506e:	2280      	movs	r2, #128	@ 0x80
 8015070:	0152      	lsls	r2, r2, #5
 8015072:	431a      	orrs	r2, r3
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	619a      	str	r2, [r3, #24]
}
 8015078:	46c0      	nop			@ (mov r8, r8)
 801507a:	46bd      	mov	sp, r7
 801507c:	b002      	add	sp, #8
 801507e:	bd80      	pop	{r7, pc}

08015080 <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b082      	sub	sp, #8
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	699b      	ldr	r3, [r3, #24]
 801508c:	2280      	movs	r2, #128	@ 0x80
 801508e:	0112      	lsls	r2, r2, #4
 8015090:	431a      	orrs	r2, r3
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	619a      	str	r2, [r3, #24]
}
 8015096:	46c0      	nop			@ (mov r8, r8)
 8015098:	46bd      	mov	sp, r7
 801509a:	b002      	add	sp, #8
 801509c:	bd80      	pop	{r7, pc}

0801509e <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 801509e:	b580      	push	{r7, lr}
 80150a0:	b082      	sub	sp, #8
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	699b      	ldr	r3, [r3, #24]
 80150aa:	2280      	movs	r2, #128	@ 0x80
 80150ac:	00d2      	lsls	r2, r2, #3
 80150ae:	431a      	orrs	r2, r3
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	619a      	str	r2, [r3, #24]
}
 80150b4:	46c0      	nop			@ (mov r8, r8)
 80150b6:	46bd      	mov	sp, r7
 80150b8:	b002      	add	sp, #8
 80150ba:	bd80      	pop	{r7, pc}

080150bc <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 80150bc:	b580      	push	{r7, lr}
 80150be:	b082      	sub	sp, #8
 80150c0:	af00      	add	r7, sp, #0
 80150c2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 80150c4:	687b      	ldr	r3, [r7, #4]
 80150c6:	699b      	ldr	r3, [r3, #24]
 80150c8:	2280      	movs	r2, #128	@ 0x80
 80150ca:	0092      	lsls	r2, r2, #2
 80150cc:	431a      	orrs	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	619a      	str	r2, [r3, #24]
}
 80150d2:	46c0      	nop			@ (mov r8, r8)
 80150d4:	46bd      	mov	sp, r7
 80150d6:	b002      	add	sp, #8
 80150d8:	bd80      	pop	{r7, pc}

080150da <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 80150da:	b580      	push	{r7, lr}
 80150dc:	b082      	sub	sp, #8
 80150de:	af00      	add	r7, sp, #0
 80150e0:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	699b      	ldr	r3, [r3, #24]
 80150e6:	2240      	movs	r2, #64	@ 0x40
 80150e8:	431a      	orrs	r2, r3
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	619a      	str	r2, [r3, #24]
}
 80150ee:	46c0      	nop			@ (mov r8, r8)
 80150f0:	46bd      	mov	sp, r7
 80150f2:	b002      	add	sp, #8
 80150f4:	bd80      	pop	{r7, pc}

080150f6 <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 80150f6:	b580      	push	{r7, lr}
 80150f8:	b082      	sub	sp, #8
 80150fa:	af00      	add	r7, sp, #0
 80150fc:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	699b      	ldr	r3, [r3, #24]
 8015102:	2220      	movs	r2, #32
 8015104:	431a      	orrs	r2, r3
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	619a      	str	r2, [r3, #24]
}
 801510a:	46c0      	nop			@ (mov r8, r8)
 801510c:	46bd      	mov	sp, r7
 801510e:	b002      	add	sp, #8
 8015110:	bd80      	pop	{r7, pc}

08015112 <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 8015112:	b580      	push	{r7, lr}
 8015114:	b082      	sub	sp, #8
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	699b      	ldr	r3, [r3, #24]
 801511e:	2210      	movs	r2, #16
 8015120:	431a      	orrs	r2, r3
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	619a      	str	r2, [r3, #24]
}
 8015126:	46c0      	nop			@ (mov r8, r8)
 8015128:	46bd      	mov	sp, r7
 801512a:	b002      	add	sp, #8
 801512c:	bd80      	pop	{r7, pc}

0801512e <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 801512e:	b580      	push	{r7, lr}
 8015130:	b082      	sub	sp, #8
 8015132:	af00      	add	r7, sp, #0
 8015134:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	699b      	ldr	r3, [r3, #24]
 801513a:	2208      	movs	r2, #8
 801513c:	431a      	orrs	r2, r3
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	619a      	str	r2, [r3, #24]
}
 8015142:	46c0      	nop			@ (mov r8, r8)
 8015144:	46bd      	mov	sp, r7
 8015146:	b002      	add	sp, #8
 8015148:	bd80      	pop	{r7, pc}

0801514a <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 801514a:	b580      	push	{r7, lr}
 801514c:	b082      	sub	sp, #8
 801514e:	af00      	add	r7, sp, #0
 8015150:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	699b      	ldr	r3, [r3, #24]
 8015156:	2204      	movs	r2, #4
 8015158:	431a      	orrs	r2, r3
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	619a      	str	r2, [r3, #24]
}
 801515e:	46c0      	nop			@ (mov r8, r8)
 8015160:	46bd      	mov	sp, r7
 8015162:	b002      	add	sp, #8
 8015164:	bd80      	pop	{r7, pc}

08015166 <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 8015166:	b580      	push	{r7, lr}
 8015168:	b082      	sub	sp, #8
 801516a:	af00      	add	r7, sp, #0
 801516c:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	699b      	ldr	r3, [r3, #24]
 8015172:	2202      	movs	r2, #2
 8015174:	431a      	orrs	r2, r3
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	619a      	str	r2, [r3, #24]
}
 801517a:	46c0      	nop			@ (mov r8, r8)
 801517c:	46bd      	mov	sp, r7
 801517e:	b002      	add	sp, #8
 8015180:	bd80      	pop	{r7, pc}

08015182 <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 8015182:	b580      	push	{r7, lr}
 8015184:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 8015186:	2000      	movs	r0, #0
 8015188:	f000 f80c 	bl	80151a4 <PORTx_IRQHandler>
}
 801518c:	46c0      	nop			@ (mov r8, r8)
 801518e:	46bd      	mov	sp, r7
 8015190:	bd80      	pop	{r7, pc}

08015192 <USBPD_PORT1_IRQHandler>:

void USBPD_PORT1_IRQHandler(void)
{
 8015192:	b580      	push	{r7, lr}
 8015194:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_1);
 8015196:	2001      	movs	r0, #1
 8015198:	f000 f804 	bl	80151a4 <PORTx_IRQHandler>
}
 801519c:	46c0      	nop			@ (mov r8, r8)
 801519e:	46bd      	mov	sp, r7
 80151a0:	bd80      	pop	{r7, pc}
	...

080151a4 <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b084      	sub	sp, #16
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	0002      	movs	r2, r0
 80151ac:	1dfb      	adds	r3, r7, #7
 80151ae:	701a      	strb	r2, [r3, #0]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 80151b0:	1dfb      	adds	r3, r7, #7
 80151b2:	781a      	ldrb	r2, [r3, #0]
 80151b4:	49a6      	ldr	r1, [pc, #664]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 80151b6:	0013      	movs	r3, r2
 80151b8:	011b      	lsls	r3, r3, #4
 80151ba:	1a9b      	subs	r3, r3, r2
 80151bc:	009b      	lsls	r3, r3, #2
 80151be:	585b      	ldr	r3, [r3, r1]
 80151c0:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	695b      	ldr	r3, [r3, #20]
 80151c6:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag[2] = {0, 0};

  if ((hucpd->IMR & _interrupt) != 0u)
 80151c8:	68fb      	ldr	r3, [r7, #12]
 80151ca:	691b      	ldr	r3, [r3, #16]
 80151cc:	68ba      	ldr	r2, [r7, #8]
 80151ce:	4013      	ands	r3, r2
 80151d0:	d100      	bne.n	80151d4 <PORTx_IRQHandler+0x30>
 80151d2:	e1fc      	b.n	80155ce <PORTx_IRQHandler+0x42a>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 80151d4:	68bb      	ldr	r3, [r7, #8]
 80151d6:	2202      	movs	r2, #2
 80151d8:	4013      	ands	r3, r2
 80151da:	d03c      	beq.n	8015256 <PORTx_IRQHandler+0xb2>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 80151dc:	68fb      	ldr	r3, [r7, #12]
 80151de:	0018      	movs	r0, r3
 80151e0:	f7ff ffc1 	bl	8015166 <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80151e4:	1dfb      	adds	r3, r7, #7
 80151e6:	781a      	ldrb	r2, [r3, #0]
 80151e8:	4999      	ldr	r1, [pc, #612]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 80151ea:	0013      	movs	r3, r2
 80151ec:	011b      	lsls	r3, r3, #4
 80151ee:	1a9b      	subs	r3, r3, r2
 80151f0:	009b      	lsls	r3, r3, #2
 80151f2:	18cb      	adds	r3, r1, r3
 80151f4:	3304      	adds	r3, #4
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	6819      	ldr	r1, [r3, #0]
 80151fa:	1dfb      	adds	r3, r7, #7
 80151fc:	781a      	ldrb	r2, [r3, #0]
 80151fe:	4894      	ldr	r0, [pc, #592]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 8015200:	0013      	movs	r3, r2
 8015202:	011b      	lsls	r3, r3, #4
 8015204:	1a9b      	subs	r3, r3, r2
 8015206:	009b      	lsls	r3, r3, #2
 8015208:	18c3      	adds	r3, r0, r3
 801520a:	3304      	adds	r3, #4
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	2201      	movs	r2, #1
 8015210:	4391      	bics	r1, r2
 8015212:	000a      	movs	r2, r1
 8015214:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8015216:	46c0      	nop			@ (mov r8, r8)
 8015218:	1dfb      	adds	r3, r7, #7
 801521a:	781a      	ldrb	r2, [r3, #0]
 801521c:	498c      	ldr	r1, [pc, #560]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 801521e:	0013      	movs	r3, r2
 8015220:	011b      	lsls	r3, r3, #4
 8015222:	1a9b      	subs	r3, r3, r2
 8015224:	009b      	lsls	r3, r3, #2
 8015226:	18cb      	adds	r3, r1, r3
 8015228:	3304      	adds	r3, #4
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	2201      	movs	r2, #1
 8015230:	4013      	ands	r3, r2
 8015232:	2b01      	cmp	r3, #1
 8015234:	d0f0      	beq.n	8015218 <PORTx_IRQHandler+0x74>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 8015236:	1dfb      	adds	r3, r7, #7
 8015238:	781a      	ldrb	r2, [r3, #0]
 801523a:	4985      	ldr	r1, [pc, #532]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 801523c:	0013      	movs	r3, r2
 801523e:	011b      	lsls	r3, r3, #4
 8015240:	1a9b      	subs	r3, r3, r2
 8015242:	009b      	lsls	r3, r3, #2
 8015244:	18cb      	adds	r3, r1, r3
 8015246:	3314      	adds	r3, #20
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	1dfa      	adds	r2, r7, #7
 801524c:	7812      	ldrb	r2, [r2, #0]
 801524e:	2101      	movs	r1, #1
 8015250:	0010      	movs	r0, r2
 8015252:	4798      	blx	r3
      return;
 8015254:	e1bb      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 8015256:	68bb      	ldr	r3, [r7, #8]
 8015258:	2204      	movs	r2, #4
 801525a:	4013      	ands	r3, r2
 801525c:	d03c      	beq.n	80152d8 <PORTx_IRQHandler+0x134>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 801525e:	68fb      	ldr	r3, [r7, #12]
 8015260:	0018      	movs	r0, r3
 8015262:	f7ff ff72 	bl	801514a <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015266:	1dfb      	adds	r3, r7, #7
 8015268:	781a      	ldrb	r2, [r3, #0]
 801526a:	4979      	ldr	r1, [pc, #484]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 801526c:	0013      	movs	r3, r2
 801526e:	011b      	lsls	r3, r3, #4
 8015270:	1a9b      	subs	r3, r3, r2
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	18cb      	adds	r3, r1, r3
 8015276:	3304      	adds	r3, #4
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	6819      	ldr	r1, [r3, #0]
 801527c:	1dfb      	adds	r3, r7, #7
 801527e:	781a      	ldrb	r2, [r3, #0]
 8015280:	4873      	ldr	r0, [pc, #460]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 8015282:	0013      	movs	r3, r2
 8015284:	011b      	lsls	r3, r3, #4
 8015286:	1a9b      	subs	r3, r3, r2
 8015288:	009b      	lsls	r3, r3, #2
 801528a:	18c3      	adds	r3, r0, r3
 801528c:	3304      	adds	r3, #4
 801528e:	681b      	ldr	r3, [r3, #0]
 8015290:	2201      	movs	r2, #1
 8015292:	4391      	bics	r1, r2
 8015294:	000a      	movs	r2, r1
 8015296:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 8015298:	46c0      	nop			@ (mov r8, r8)
 801529a:	1dfb      	adds	r3, r7, #7
 801529c:	781a      	ldrb	r2, [r3, #0]
 801529e:	496c      	ldr	r1, [pc, #432]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 80152a0:	0013      	movs	r3, r2
 80152a2:	011b      	lsls	r3, r3, #4
 80152a4:	1a9b      	subs	r3, r3, r2
 80152a6:	009b      	lsls	r3, r3, #2
 80152a8:	18cb      	adds	r3, r1, r3
 80152aa:	3304      	adds	r3, #4
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	681b      	ldr	r3, [r3, #0]
 80152b0:	2201      	movs	r2, #1
 80152b2:	4013      	ands	r3, r2
 80152b4:	2b01      	cmp	r3, #1
 80152b6:	d0f0      	beq.n	801529a <PORTx_IRQHandler+0xf6>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 80152b8:	1dfb      	adds	r3, r7, #7
 80152ba:	781a      	ldrb	r2, [r3, #0]
 80152bc:	4964      	ldr	r1, [pc, #400]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 80152be:	0013      	movs	r3, r2
 80152c0:	011b      	lsls	r3, r3, #4
 80152c2:	1a9b      	subs	r3, r3, r2
 80152c4:	009b      	lsls	r3, r3, #2
 80152c6:	18cb      	adds	r3, r1, r3
 80152c8:	3314      	adds	r3, #20
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	1dfa      	adds	r2, r7, #7
 80152ce:	7812      	ldrb	r2, [r2, #0]
 80152d0:	2100      	movs	r1, #0
 80152d2:	0010      	movs	r0, r2
 80152d4:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 80152d6:	e17a      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 80152d8:	68bb      	ldr	r3, [r7, #8]
 80152da:	2208      	movs	r2, #8
 80152dc:	4013      	ands	r3, r2
 80152de:	d03c      	beq.n	801535a <PORTx_IRQHandler+0x1b6>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 80152e0:	68fb      	ldr	r3, [r7, #12]
 80152e2:	0018      	movs	r0, r3
 80152e4:	f7ff ff23 	bl	801512e <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80152e8:	1dfb      	adds	r3, r7, #7
 80152ea:	781a      	ldrb	r2, [r3, #0]
 80152ec:	4958      	ldr	r1, [pc, #352]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 80152ee:	0013      	movs	r3, r2
 80152f0:	011b      	lsls	r3, r3, #4
 80152f2:	1a9b      	subs	r3, r3, r2
 80152f4:	009b      	lsls	r3, r3, #2
 80152f6:	18cb      	adds	r3, r1, r3
 80152f8:	3304      	adds	r3, #4
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	6819      	ldr	r1, [r3, #0]
 80152fe:	1dfb      	adds	r3, r7, #7
 8015300:	781a      	ldrb	r2, [r3, #0]
 8015302:	4853      	ldr	r0, [pc, #332]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 8015304:	0013      	movs	r3, r2
 8015306:	011b      	lsls	r3, r3, #4
 8015308:	1a9b      	subs	r3, r3, r2
 801530a:	009b      	lsls	r3, r3, #2
 801530c:	18c3      	adds	r3, r0, r3
 801530e:	3304      	adds	r3, #4
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	2201      	movs	r2, #1
 8015314:	4391      	bics	r1, r2
 8015316:	000a      	movs	r2, r1
 8015318:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 801531a:	46c0      	nop			@ (mov r8, r8)
 801531c:	1dfb      	adds	r3, r7, #7
 801531e:	781a      	ldrb	r2, [r3, #0]
 8015320:	494b      	ldr	r1, [pc, #300]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 8015322:	0013      	movs	r3, r2
 8015324:	011b      	lsls	r3, r3, #4
 8015326:	1a9b      	subs	r3, r3, r2
 8015328:	009b      	lsls	r3, r3, #2
 801532a:	18cb      	adds	r3, r1, r3
 801532c:	3304      	adds	r3, #4
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	2201      	movs	r2, #1
 8015334:	4013      	ands	r3, r2
 8015336:	2b01      	cmp	r3, #1
 8015338:	d0f0      	beq.n	801531c <PORTx_IRQHandler+0x178>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 801533a:	1dfb      	adds	r3, r7, #7
 801533c:	781a      	ldrb	r2, [r3, #0]
 801533e:	4944      	ldr	r1, [pc, #272]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 8015340:	0013      	movs	r3, r2
 8015342:	011b      	lsls	r3, r3, #4
 8015344:	1a9b      	subs	r3, r3, r2
 8015346:	009b      	lsls	r3, r3, #2
 8015348:	18cb      	adds	r3, r1, r3
 801534a:	3314      	adds	r3, #20
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	1dfa      	adds	r2, r7, #7
 8015350:	7812      	ldrb	r2, [r2, #0]
 8015352:	2102      	movs	r1, #2
 8015354:	0010      	movs	r0, r2
 8015356:	4798      	blx	r3
      return;
 8015358:	e139      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	2210      	movs	r2, #16
 801535e:	4013      	ands	r3, r2
 8015360:	d004      	beq.n	801536c <PORTx_IRQHandler+0x1c8>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 8015362:	68fb      	ldr	r3, [r7, #12]
 8015364:	0018      	movs	r0, r3
 8015366:	f7ff fed4 	bl	8015112 <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 801536a:	e130      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	2220      	movs	r2, #32
 8015370:	4013      	ands	r3, r2
 8015372:	d013      	beq.n	801539c <PORTx_IRQHandler+0x1f8>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	0018      	movs	r0, r3
 8015378:	f7ff febd 	bl	80150f6 <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 801537c:	1dfb      	adds	r3, r7, #7
 801537e:	781a      	ldrb	r2, [r3, #0]
 8015380:	4933      	ldr	r1, [pc, #204]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 8015382:	0013      	movs	r3, r2
 8015384:	011b      	lsls	r3, r3, #4
 8015386:	1a9b      	subs	r3, r3, r2
 8015388:	009b      	lsls	r3, r3, #2
 801538a:	18cb      	adds	r3, r1, r3
 801538c:	3324      	adds	r3, #36	@ 0x24
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	1dfa      	adds	r2, r7, #7
 8015392:	7812      	ldrb	r2, [r2, #0]
 8015394:	2105      	movs	r1, #5
 8015396:	0010      	movs	r0, r2
 8015398:	4798      	blx	r3
      return;
 801539a:	e118      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	2240      	movs	r2, #64	@ 0x40
 80153a0:	4013      	ands	r3, r2
 80153a2:	d004      	beq.n	80153ae <PORTx_IRQHandler+0x20a>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	0018      	movs	r0, r3
 80153a8:	f7ff fe97 	bl	80150da <LL_UCPD_ClearFlag_TxUND>
      return;
 80153ac:	e10f      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 80153ae:	68ba      	ldr	r2, [r7, #8]
 80153b0:	2380      	movs	r3, #128	@ 0x80
 80153b2:	009b      	lsls	r3, r3, #2
 80153b4:	4013      	ands	r3, r2
 80153b6:	d023      	beq.n	8015400 <PORTx_IRQHandler+0x25c>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153bc:	2b05      	cmp	r3, #5
 80153be:	d10e      	bne.n	80153de <PORTx_IRQHandler+0x23a>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80153c0:	1dfb      	adds	r3, r7, #7
 80153c2:	781a      	ldrb	r2, [r3, #0]
 80153c4:	4922      	ldr	r1, [pc, #136]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 80153c6:	0013      	movs	r3, r2
 80153c8:	011b      	lsls	r3, r3, #4
 80153ca:	1a9b      	subs	r3, r3, r2
 80153cc:	009b      	lsls	r3, r3, #2
 80153ce:	18cb      	adds	r3, r1, r3
 80153d0:	331c      	adds	r3, #28
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	1dfa      	adds	r2, r7, #7
 80153d6:	7812      	ldrb	r2, [r2, #0]
 80153d8:	2106      	movs	r1, #6
 80153da:	0010      	movs	r0, r2
 80153dc:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	0018      	movs	r0, r3
 80153e2:	f7ff fe6b 	bl	80150bc <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 80153e6:	1dfb      	adds	r3, r7, #7
 80153e8:	781a      	ldrb	r2, [r3, #0]
 80153ea:	4919      	ldr	r1, [pc, #100]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 80153ec:	2038      	movs	r0, #56	@ 0x38
 80153ee:	0013      	movs	r3, r2
 80153f0:	011b      	lsls	r3, r3, #4
 80153f2:	1a9b      	subs	r3, r3, r2
 80153f4:	009b      	lsls	r3, r3, #2
 80153f6:	18cb      	adds	r3, r1, r3
 80153f8:	181b      	adds	r3, r3, r0
 80153fa:	2201      	movs	r2, #1
 80153fc:	701a      	strb	r2, [r3, #0]
      return;
 80153fe:	e0e6      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 8015400:	68ba      	ldr	r2, [r7, #8]
 8015402:	2380      	movs	r3, #128	@ 0x80
 8015404:	00db      	lsls	r3, r3, #3
 8015406:	4013      	ands	r3, r2
 8015408:	d013      	beq.n	8015432 <PORTx_IRQHandler+0x28e>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 801540a:	1dfb      	adds	r3, r7, #7
 801540c:	781a      	ldrb	r2, [r3, #0]
 801540e:	4910      	ldr	r1, [pc, #64]	@ (8015450 <PORTx_IRQHandler+0x2ac>)
 8015410:	0013      	movs	r3, r2
 8015412:	011b      	lsls	r3, r3, #4
 8015414:	1a9b      	subs	r3, r3, r2
 8015416:	009b      	lsls	r3, r3, #2
 8015418:	18cb      	adds	r3, r1, r3
 801541a:	331c      	adds	r3, #28
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	1dfa      	adds	r2, r7, #7
 8015420:	7812      	ldrb	r2, [r2, #0]
 8015422:	2105      	movs	r1, #5
 8015424:	0010      	movs	r0, r2
 8015426:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	0018      	movs	r0, r3
 801542c:	f7ff fe37 	bl	801509e <LL_UCPD_ClearFlag_RxHRST>
      return;
 8015430:	e0cd      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 8015432:	68ba      	ldr	r2, [r7, #8]
 8015434:	2380      	movs	r3, #128	@ 0x80
 8015436:	011b      	lsls	r3, r3, #4
 8015438:	4013      	ands	r3, r2
 801543a:	d00d      	beq.n	8015458 <PORTx_IRQHandler+0x2b4>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag[PortNum] = 1;
 801543c:	1dfb      	adds	r3, r7, #7
 801543e:	781b      	ldrb	r3, [r3, #0]
 8015440:	4a04      	ldr	r2, [pc, #16]	@ (8015454 <PORTx_IRQHandler+0x2b0>)
 8015442:	2101      	movs	r1, #1
 8015444:	54d1      	strb	r1, [r2, r3]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	0018      	movs	r0, r3
 801544a:	f7ff fe19 	bl	8015080 <LL_UCPD_ClearFlag_RxOvr>
      return;
 801544e:	e0be      	b.n	80155ce <PORTx_IRQHandler+0x42a>
 8015450:	20011624 	.word	0x20011624
 8015454:	20011610 	.word	0x20011610
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 8015458:	68ba      	ldr	r2, [r7, #8]
 801545a:	2380      	movs	r3, #128	@ 0x80
 801545c:	015b      	lsls	r3, r3, #5
 801545e:	4013      	ands	r3, r2
 8015460:	d100      	bne.n	8015464 <PORTx_IRQHandler+0x2c0>
 8015462:	e096      	b.n	8015592 <PORTx_IRQHandler+0x3ee>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 8015464:	1dfb      	adds	r3, r7, #7
 8015466:	781a      	ldrb	r2, [r3, #0]
 8015468:	495a      	ldr	r1, [pc, #360]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 801546a:	2038      	movs	r0, #56	@ 0x38
 801546c:	0013      	movs	r3, r2
 801546e:	011b      	lsls	r3, r3, #4
 8015470:	1a9b      	subs	r3, r3, r2
 8015472:	009b      	lsls	r3, r3, #2
 8015474:	18cb      	adds	r3, r1, r3
 8015476:	181b      	adds	r3, r3, r0
 8015478:	2200      	movs	r2, #0
 801547a:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 801547c:	68fb      	ldr	r3, [r7, #12]
 801547e:	0018      	movs	r0, r3
 8015480:	f7ff fdef 	bl	8015062 <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 8015484:	1dfb      	adds	r3, r7, #7
 8015486:	781a      	ldrb	r2, [r3, #0]
 8015488:	4952      	ldr	r1, [pc, #328]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 801548a:	0013      	movs	r3, r2
 801548c:	011b      	lsls	r3, r3, #4
 801548e:	1a9b      	subs	r3, r3, r2
 8015490:	009b      	lsls	r3, r3, #2
 8015492:	18cb      	adds	r3, r1, r3
 8015494:	3308      	adds	r3, #8
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	6819      	ldr	r1, [r3, #0]
 801549a:	1dfb      	adds	r3, r7, #7
 801549c:	781a      	ldrb	r2, [r3, #0]
 801549e:	484d      	ldr	r0, [pc, #308]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 80154a0:	0013      	movs	r3, r2
 80154a2:	011b      	lsls	r3, r3, #4
 80154a4:	1a9b      	subs	r3, r3, r2
 80154a6:	009b      	lsls	r3, r3, #2
 80154a8:	18c3      	adds	r3, r0, r3
 80154aa:	3308      	adds	r3, #8
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	2201      	movs	r2, #1
 80154b0:	4391      	bics	r1, r2
 80154b2:	000a      	movs	r2, r1
 80154b4:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 80154b6:	46c0      	nop			@ (mov r8, r8)
 80154b8:	1dfb      	adds	r3, r7, #7
 80154ba:	781a      	ldrb	r2, [r3, #0]
 80154bc:	4945      	ldr	r1, [pc, #276]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 80154be:	0013      	movs	r3, r2
 80154c0:	011b      	lsls	r3, r3, #4
 80154c2:	1a9b      	subs	r3, r3, r2
 80154c4:	009b      	lsls	r3, r3, #2
 80154c6:	18cb      	adds	r3, r1, r3
 80154c8:	3308      	adds	r3, #8
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	681b      	ldr	r3, [r3, #0]
 80154ce:	2201      	movs	r2, #1
 80154d0:	4013      	ands	r3, r2
 80154d2:	2b01      	cmp	r3, #1
 80154d4:	d0f0      	beq.n	80154b8 <PORTx_IRQHandler+0x314>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 80154d6:	1dfb      	adds	r3, r7, #7
 80154d8:	781a      	ldrb	r2, [r3, #0]
 80154da:	493e      	ldr	r1, [pc, #248]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 80154dc:	0013      	movs	r3, r2
 80154de:	011b      	lsls	r3, r3, #4
 80154e0:	1a9b      	subs	r3, r3, r2
 80154e2:	009b      	lsls	r3, r3, #2
 80154e4:	18cb      	adds	r3, r1, r3
 80154e6:	3330      	adds	r3, #48	@ 0x30
 80154e8:	6818      	ldr	r0, [r3, #0]
 80154ea:	1dfb      	adds	r3, r7, #7
 80154ec:	781a      	ldrb	r2, [r3, #0]
 80154ee:	4939      	ldr	r1, [pc, #228]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 80154f0:	0013      	movs	r3, r2
 80154f2:	011b      	lsls	r3, r3, #4
 80154f4:	1a9b      	subs	r3, r3, r2
 80154f6:	009b      	lsls	r3, r3, #2
 80154f8:	18cb      	adds	r3, r1, r3
 80154fa:	3308      	adds	r3, #8
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	0002      	movs	r2, r0
 8015500:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 8015502:	1dfb      	adds	r3, r7, #7
 8015504:	781a      	ldrb	r2, [r3, #0]
 8015506:	4933      	ldr	r1, [pc, #204]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 8015508:	0013      	movs	r3, r2
 801550a:	011b      	lsls	r3, r3, #4
 801550c:	1a9b      	subs	r3, r3, r2
 801550e:	009b      	lsls	r3, r3, #2
 8015510:	18cb      	adds	r3, r1, r3
 8015512:	3308      	adds	r3, #8
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	2284      	movs	r2, #132	@ 0x84
 8015518:	0052      	lsls	r2, r2, #1
 801551a:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 801551c:	1dfb      	adds	r3, r7, #7
 801551e:	781a      	ldrb	r2, [r3, #0]
 8015520:	492c      	ldr	r1, [pc, #176]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 8015522:	0013      	movs	r3, r2
 8015524:	011b      	lsls	r3, r3, #4
 8015526:	1a9b      	subs	r3, r3, r2
 8015528:	009b      	lsls	r3, r3, #2
 801552a:	18cb      	adds	r3, r1, r3
 801552c:	3308      	adds	r3, #8
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	6819      	ldr	r1, [r3, #0]
 8015532:	1dfb      	adds	r3, r7, #7
 8015534:	781a      	ldrb	r2, [r3, #0]
 8015536:	4827      	ldr	r0, [pc, #156]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 8015538:	0013      	movs	r3, r2
 801553a:	011b      	lsls	r3, r3, #4
 801553c:	1a9b      	subs	r3, r3, r2
 801553e:	009b      	lsls	r3, r3, #2
 8015540:	18c3      	adds	r3, r0, r3
 8015542:	3308      	adds	r3, #8
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	2201      	movs	r2, #1
 8015548:	430a      	orrs	r2, r1
 801554a:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag[PortNum] == 0u))
 801554c:	68ba      	ldr	r2, [r7, #8]
 801554e:	2380      	movs	r3, #128	@ 0x80
 8015550:	019b      	lsls	r3, r3, #6
 8015552:	4013      	ands	r3, r2
 8015554:	d117      	bne.n	8015586 <PORTx_IRQHandler+0x3e2>
 8015556:	1dfb      	adds	r3, r7, #7
 8015558:	781b      	ldrb	r3, [r3, #0]
 801555a:	4a1f      	ldr	r2, [pc, #124]	@ (80155d8 <PORTx_IRQHandler+0x434>)
 801555c:	5cd3      	ldrb	r3, [r2, r3]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d111      	bne.n	8015586 <PORTx_IRQHandler+0x3e2>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 8015562:	1dfb      	adds	r3, r7, #7
 8015564:	781a      	ldrb	r2, [r3, #0]
 8015566:	491b      	ldr	r1, [pc, #108]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 8015568:	0013      	movs	r3, r2
 801556a:	011b      	lsls	r3, r3, #4
 801556c:	1a9b      	subs	r3, r3, r2
 801556e:	009b      	lsls	r3, r3, #2
 8015570:	18cb      	adds	r3, r1, r3
 8015572:	3320      	adds	r3, #32
 8015574:	681a      	ldr	r2, [r3, #0]
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801557a:	2107      	movs	r1, #7
 801557c:	4019      	ands	r1, r3
 801557e:	1dfb      	adds	r3, r7, #7
 8015580:	781b      	ldrb	r3, [r3, #0]
 8015582:	0018      	movs	r0, r3
 8015584:	4790      	blx	r2
      }
      ovrflag[PortNum] = 0;
 8015586:	1dfb      	adds	r3, r7, #7
 8015588:	781b      	ldrb	r3, [r3, #0]
 801558a:	4a13      	ldr	r2, [pc, #76]	@ (80155d8 <PORTx_IRQHandler+0x434>)
 801558c:	2100      	movs	r1, #0
 801558e:	54d1      	strb	r1, [r2, r3]
      return;
 8015590:	e01d      	b.n	80155ce <PORTx_IRQHandler+0x42a>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 8015592:	68ba      	ldr	r2, [r7, #8]
 8015594:	2380      	movs	r3, #128	@ 0x80
 8015596:	01db      	lsls	r3, r3, #7
 8015598:	4013      	ands	r3, r2
 801559a:	d104      	bne.n	80155a6 <PORTx_IRQHandler+0x402>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 801559c:	68ba      	ldr	r2, [r7, #8]
 801559e:	2380      	movs	r3, #128	@ 0x80
 80155a0:	021b      	lsls	r3, r3, #8
 80155a2:	4013      	ands	r3, r2
 80155a4:	d013      	beq.n	80155ce <PORTx_IRQHandler+0x42a>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	0018      	movs	r0, r3
 80155aa:	f7ff fd4b 	bl	8015044 <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	0018      	movs	r0, r3
 80155b2:	f7ff fd38 	bl	8015026 <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 80155b6:	1dfb      	adds	r3, r7, #7
 80155b8:	781a      	ldrb	r2, [r3, #0]
 80155ba:	4906      	ldr	r1, [pc, #24]	@ (80155d4 <PORTx_IRQHandler+0x430>)
 80155bc:	0013      	movs	r3, r2
 80155be:	011b      	lsls	r3, r3, #4
 80155c0:	1a9b      	subs	r3, r3, r2
 80155c2:	009b      	lsls	r3, r3, #2
 80155c4:	18cb      	adds	r3, r1, r3
 80155c6:	332c      	adds	r3, #44	@ 0x2c
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 80155cc:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
#endif /* _FRS */
  }
}
 80155ce:	46bd      	mov	sp, r7
 80155d0:	b004      	add	sp, #16
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	20011624 	.word	0x20011624
 80155d8:	20011610 	.word	0x20011610

080155dc <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 80155dc:	b590      	push	{r4, r7, lr}
 80155de:	b085      	sub	sp, #20
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	60b9      	str	r1, [r7, #8]
 80155e4:	607a      	str	r2, [r7, #4]
 80155e6:	603b      	str	r3, [r7, #0]
 80155e8:	240f      	movs	r4, #15
 80155ea:	193b      	adds	r3, r7, r4
 80155ec:	1c02      	adds	r2, r0, #0
 80155ee:	701a      	strb	r2, [r3, #0]
  (void)PowerRole;

  /* set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 80155f0:	193b      	adds	r3, r7, r4
 80155f2:	781a      	ldrb	r2, [r3, #0]
 80155f4:	68bb      	ldr	r3, [r7, #8]
 80155f6:	6919      	ldr	r1, [r3, #16]
 80155f8:	4830      	ldr	r0, [pc, #192]	@ (80156bc <USBPD_PHY_Init+0xe0>)
 80155fa:	0013      	movs	r3, r2
 80155fc:	011b      	lsls	r3, r3, #4
 80155fe:	1a9b      	subs	r3, r3, r2
 8015600:	009b      	lsls	r3, r3, #2
 8015602:	18c3      	adds	r3, r0, r3
 8015604:	3314      	adds	r3, #20
 8015606:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 8015608:	193b      	adds	r3, r7, r4
 801560a:	781a      	ldrb	r2, [r3, #0]
 801560c:	68bb      	ldr	r3, [r7, #8]
 801560e:	68d9      	ldr	r1, [r3, #12]
 8015610:	482a      	ldr	r0, [pc, #168]	@ (80156bc <USBPD_PHY_Init+0xe0>)
 8015612:	0013      	movs	r3, r2
 8015614:	011b      	lsls	r3, r3, #4
 8015616:	1a9b      	subs	r3, r3, r2
 8015618:	009b      	lsls	r3, r3, #2
 801561a:	18c3      	adds	r3, r0, r3
 801561c:	3318      	adds	r3, #24
 801561e:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 8015620:	193b      	adds	r3, r7, r4
 8015622:	781a      	ldrb	r2, [r3, #0]
 8015624:	68bb      	ldr	r3, [r7, #8]
 8015626:	6859      	ldr	r1, [r3, #4]
 8015628:	4824      	ldr	r0, [pc, #144]	@ (80156bc <USBPD_PHY_Init+0xe0>)
 801562a:	0013      	movs	r3, r2
 801562c:	011b      	lsls	r3, r3, #4
 801562e:	1a9b      	subs	r3, r3, r2
 8015630:	009b      	lsls	r3, r3, #2
 8015632:	18c3      	adds	r3, r0, r3
 8015634:	331c      	adds	r3, #28
 8015636:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 8015638:	193b      	adds	r3, r7, r4
 801563a:	781a      	ldrb	r2, [r3, #0]
 801563c:	491f      	ldr	r1, [pc, #124]	@ (80156bc <USBPD_PHY_Init+0xe0>)
 801563e:	0013      	movs	r3, r2
 8015640:	011b      	lsls	r3, r3, #4
 8015642:	1a9b      	subs	r3, r3, r2
 8015644:	009b      	lsls	r3, r3, #2
 8015646:	18cb      	adds	r3, r1, r3
 8015648:	3320      	adds	r3, #32
 801564a:	4a1d      	ldr	r2, [pc, #116]	@ (80156c0 <USBPD_PHY_Init+0xe4>)
 801564c:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 801564e:	193b      	adds	r3, r7, r4
 8015650:	781a      	ldrb	r2, [r3, #0]
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	6899      	ldr	r1, [r3, #8]
 8015656:	4819      	ldr	r0, [pc, #100]	@ (80156bc <USBPD_PHY_Init+0xe0>)
 8015658:	0013      	movs	r3, r2
 801565a:	011b      	lsls	r3, r3, #4
 801565c:	1a9b      	subs	r3, r3, r2
 801565e:	009b      	lsls	r3, r3, #2
 8015660:	18c3      	adds	r3, r0, r3
 8015662:	3324      	adds	r3, #36	@ 0x24
 8015664:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 8015666:	193b      	adds	r3, r7, r4
 8015668:	781a      	ldrb	r2, [r3, #0]
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	6959      	ldr	r1, [r3, #20]
 801566e:	4813      	ldr	r0, [pc, #76]	@ (80156bc <USBPD_PHY_Init+0xe0>)
 8015670:	0013      	movs	r3, r2
 8015672:	011b      	lsls	r3, r3, #4
 8015674:	1a9b      	subs	r3, r3, r2
 8015676:	009b      	lsls	r3, r3, #2
 8015678:	18c3      	adds	r3, r0, r3
 801567a:	3328      	adds	r3, #40	@ 0x28
 801567c:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 801567e:	193b      	adds	r3, r7, r4
 8015680:	781a      	ldrb	r2, [r3, #0]
 8015682:	490e      	ldr	r1, [pc, #56]	@ (80156bc <USBPD_PHY_Init+0xe0>)
 8015684:	0013      	movs	r3, r2
 8015686:	011b      	lsls	r3, r3, #4
 8015688:	1a9b      	subs	r3, r3, r2
 801568a:	009b      	lsls	r3, r3, #2
 801568c:	18cb      	adds	r3, r1, r3
 801568e:	3330      	adds	r3, #48	@ 0x30
 8015690:	687a      	ldr	r2, [r7, #4]
 8015692:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 8015694:	193b      	adds	r3, r7, r4
 8015696:	781b      	ldrb	r3, [r3, #0]
 8015698:	4a0a      	ldr	r2, [pc, #40]	@ (80156c4 <USBPD_PHY_Init+0xe8>)
 801569a:	00db      	lsls	r3, r3, #3
 801569c:	18d3      	adds	r3, r2, r3
 801569e:	3304      	adds	r3, #4
 80156a0:	6a3a      	ldr	r2, [r7, #32]
 80156a2:	601a      	str	r2, [r3, #0]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 80156a4:	193b      	adds	r3, r7, r4
 80156a6:	781a      	ldrb	r2, [r3, #0]
 80156a8:	68bb      	ldr	r3, [r7, #8]
 80156aa:	6819      	ldr	r1, [r3, #0]
 80156ac:	4b05      	ldr	r3, [pc, #20]	@ (80156c4 <USBPD_PHY_Init+0xe8>)
 80156ae:	00d2      	lsls	r2, r2, #3
 80156b0:	50d1      	str	r1, [r2, r3]

  return USBPD_OK;
 80156b2:	2300      	movs	r3, #0
}
 80156b4:	0018      	movs	r0, r3
 80156b6:	46bd      	mov	sp, r7
 80156b8:	b005      	add	sp, #20
 80156ba:	bd90      	pop	{r4, r7, pc}
 80156bc:	20011624 	.word	0x20011624
 80156c0:	080158ad 	.word	0x080158ad
 80156c4:	20011614 	.word	0x20011614

080156c8 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 80156c8:	b580      	push	{r7, lr}
 80156ca:	b082      	sub	sp, #8
 80156cc:	af00      	add	r7, sp, #0
 80156ce:	0002      	movs	r2, r0
 80156d0:	1dfb      	adds	r3, r7, #7
 80156d2:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  return 905u;
 80156d4:	4b02      	ldr	r3, [pc, #8]	@ (80156e0 <USBPD_PHY_GetRetryTimerValue+0x18>)
}
 80156d6:	0018      	movs	r0, r3
 80156d8:	46bd      	mov	sp, r7
 80156da:	b002      	add	sp, #8
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	46c0      	nop			@ (mov r8, r8)
 80156e0:	00000389 	.word	0x00000389

080156e4 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	0002      	movs	r2, r0
 80156ec:	1dfb      	adds	r3, r7, #7
 80156ee:	701a      	strb	r2, [r3, #0]
  return 30u;
 80156f0:	231e      	movs	r3, #30
}
 80156f2:	0018      	movs	r0, r3
 80156f4:	46bd      	mov	sp, r7
 80156f6:	b002      	add	sp, #8
 80156f8:	bd80      	pop	{r7, pc}

080156fa <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 80156fa:	b580      	push	{r7, lr}
 80156fc:	b082      	sub	sp, #8
 80156fe:	af00      	add	r7, sp, #0
 8015700:	0002      	movs	r2, r0
 8015702:	1dfb      	adds	r3, r7, #7
 8015704:	701a      	strb	r2, [r3, #0]
  (void)PortNum;
  /* reset PHY layer   */
  /* reset HW_IF layer */
}
 8015706:	46c0      	nop			@ (mov r8, r8)
 8015708:	46bd      	mov	sp, r7
 801570a:	b002      	add	sp, #8
 801570c:	bd80      	pop	{r7, pc}

0801570e <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 801570e:	b580      	push	{r7, lr}
 8015710:	b082      	sub	sp, #8
 8015712:	af00      	add	r7, sp, #0
 8015714:	0002      	movs	r2, r0
 8015716:	1dfb      	adds	r3, r7, #7
 8015718:	701a      	strb	r2, [r3, #0]
 801571a:	1dbb      	adds	r3, r7, #6
 801571c:	1c0a      	adds	r2, r1, #0
 801571e:	701a      	strb	r2, [r3, #0]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 8015720:	1dbb      	adds	r3, r7, #6
 8015722:	7819      	ldrb	r1, [r3, #0]
 8015724:	1dfb      	adds	r3, r7, #7
 8015726:	7818      	ldrb	r0, [r3, #0]
 8015728:	2300      	movs	r3, #0
 801572a:	2200      	movs	r2, #0
 801572c:	f000 f805 	bl	801573a <USBPD_PHY_SendMessage>
 8015730:	0003      	movs	r3, r0
}
 8015732:	0018      	movs	r0, r3
 8015734:	46bd      	mov	sp, r7
 8015736:	b002      	add	sp, #8
 8015738:	bd80      	pop	{r7, pc}

0801573a <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 801573a:	b590      	push	{r4, r7, lr}
 801573c:	b083      	sub	sp, #12
 801573e:	af00      	add	r7, sp, #0
 8015740:	0004      	movs	r4, r0
 8015742:	0008      	movs	r0, r1
 8015744:	603a      	str	r2, [r7, #0]
 8015746:	0019      	movs	r1, r3
 8015748:	1dfb      	adds	r3, r7, #7
 801574a:	1c22      	adds	r2, r4, #0
 801574c:	701a      	strb	r2, [r3, #0]
 801574e:	1dbb      	adds	r3, r7, #6
 8015750:	1c02      	adds	r2, r0, #0
 8015752:	701a      	strb	r2, [r3, #0]
 8015754:	1d3b      	adds	r3, r7, #4
 8015756:	1c0a      	adds	r2, r1, #0
 8015758:	801a      	strh	r2, [r3, #0]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 801575a:	1d3b      	adds	r3, r7, #4
 801575c:	881c      	ldrh	r4, [r3, #0]
 801575e:	683a      	ldr	r2, [r7, #0]
 8015760:	1dbb      	adds	r3, r7, #6
 8015762:	7819      	ldrb	r1, [r3, #0]
 8015764:	1dfb      	adds	r3, r7, #7
 8015766:	7818      	ldrb	r0, [r3, #0]
 8015768:	0023      	movs	r3, r4
 801576a:	f000 fb2f 	bl	8015dcc <USBPD_HW_IF_SendBuffer>
 801576e:	0003      	movs	r3, r0
}
 8015770:	0018      	movs	r0, r3
 8015772:	46bd      	mov	sp, r7
 8015774:	b003      	add	sp, #12
 8015776:	bd90      	pop	{r4, r7, pc}

08015778 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b082      	sub	sp, #8
 801577c:	af00      	add	r7, sp, #0
 801577e:	0002      	movs	r2, r0
 8015780:	1dfb      	adds	r3, r7, #7
 8015782:	701a      	strb	r2, [r3, #0]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 8015784:	1dfb      	adds	r3, r7, #7
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	0018      	movs	r0, r3
 801578a:	f000 fc7d 	bl	8016088 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 801578e:	2300      	movs	r3, #0
}
 8015790:	0018      	movs	r0, r3
 8015792:	46bd      	mov	sp, r7
 8015794:	b002      	add	sp, #8
 8015796:	bd80      	pop	{r7, pc}

08015798 <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	0002      	movs	r2, r0
 80157a0:	1dfb      	adds	r3, r7, #7
 80157a2:	701a      	strb	r2, [r3, #0]
 80157a4:	1dbb      	adds	r3, r7, #6
 80157a6:	1c0a      	adds	r2, r1, #0
 80157a8:	701a      	strb	r2, [r3, #0]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 80157aa:	1dbb      	adds	r3, r7, #6
 80157ac:	781b      	ldrb	r3, [r3, #0]
 80157ae:	2b07      	cmp	r3, #7
 80157b0:	d104      	bne.n	80157bc <USBPD_PHY_ExitTransmit+0x24>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 80157b2:	1dfb      	adds	r3, r7, #7
 80157b4:	781b      	ldrb	r3, [r3, #0]
 80157b6:	0018      	movs	r0, r3
 80157b8:	f000 fad0 	bl	8015d5c <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 80157bc:	2300      	movs	r3, #0
}
 80157be:	0018      	movs	r0, r3
 80157c0:	46bd      	mov	sp, r7
 80157c2:	b002      	add	sp, #8
 80157c4:	bd80      	pop	{r7, pc}

080157c6 <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80157c6:	b580      	push	{r7, lr}
 80157c8:	b082      	sub	sp, #8
 80157ca:	af00      	add	r7, sp, #0
 80157cc:	0002      	movs	r2, r0
 80157ce:	1dfb      	adds	r3, r7, #7
 80157d0:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 80157d2:	1dfb      	adds	r3, r7, #7
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	0018      	movs	r0, r3
 80157d8:	f001 f87e 	bl	80168d8 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 80157dc:	46c0      	nop			@ (mov r8, r8)
 80157de:	46bd      	mov	sp, r7
 80157e0:	b002      	add	sp, #8
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b082      	sub	sp, #8
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	0002      	movs	r2, r0
 80157ec:	1dfb      	adds	r3, r7, #7
 80157ee:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 80157f0:	1dfb      	adds	r3, r7, #7
 80157f2:	781b      	ldrb	r3, [r3, #0]
 80157f4:	0018      	movs	r0, r3
 80157f6:	f001 f889 	bl	801690c <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 80157fa:	46c0      	nop			@ (mov r8, r8)
 80157fc:	46bd      	mov	sp, r7
 80157fe:	b002      	add	sp, #8
 8015800:	bd80      	pop	{r7, pc}
	...

08015804 <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 8015804:	b580      	push	{r7, lr}
 8015806:	b082      	sub	sp, #8
 8015808:	af00      	add	r7, sp, #0
 801580a:	0002      	movs	r2, r0
 801580c:	6039      	str	r1, [r7, #0]
 801580e:	1dfb      	adds	r3, r7, #7
 8015810:	701a      	strb	r2, [r3, #0]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 8015812:	1dfb      	adds	r3, r7, #7
 8015814:	781b      	ldrb	r3, [r3, #0]
 8015816:	4a05      	ldr	r2, [pc, #20]	@ (801582c <USBPD_PHY_SOPSupported+0x28>)
 8015818:	00db      	lsls	r3, r3, #3
 801581a:	18d3      	adds	r3, r2, r3
 801581c:	3304      	adds	r3, #4
 801581e:	683a      	ldr	r2, [r7, #0]
 8015820:	601a      	str	r2, [r3, #0]
}
 8015822:	46c0      	nop			@ (mov r8, r8)
 8015824:	46bd      	mov	sp, r7
 8015826:	b002      	add	sp, #8
 8015828:	bd80      	pop	{r7, pc}
 801582a:	46c0      	nop			@ (mov r8, r8)
 801582c:	20011614 	.word	0x20011614

08015830 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b082      	sub	sp, #8
 8015834:	af00      	add	r7, sp, #0
 8015836:	0002      	movs	r2, r0
 8015838:	1dfb      	adds	r3, r7, #7
 801583a:	701a      	strb	r2, [r3, #0]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 801583c:	1dfb      	adds	r3, r7, #7
 801583e:	781b      	ldrb	r3, [r3, #0]
 8015840:	0018      	movs	r0, r3
 8015842:	f001 f87d 	bl	8016940 <USBPD_HW_IF_IsResistor_SinkTxOk>
 8015846:	0003      	movs	r3, r0
}
 8015848:	0018      	movs	r0, r3
 801584a:	46bd      	mov	sp, r7
 801584c:	b002      	add	sp, #8
 801584e:	bd80      	pop	{r7, pc}

08015850 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b082      	sub	sp, #8
 8015854:	af00      	add	r7, sp, #0
 8015856:	0002      	movs	r2, r0
 8015858:	1dfb      	adds	r3, r7, #7
 801585a:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 801585c:	1dfb      	adds	r3, r7, #7
 801585e:	781b      	ldrb	r3, [r3, #0]
 8015860:	0018      	movs	r0, r3
 8015862:	f001 f8b1 	bl	80169c8 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 8015866:	46c0      	nop			@ (mov r8, r8)
 8015868:	46bd      	mov	sp, r7
 801586a:	b002      	add	sp, #8
 801586c:	bd80      	pop	{r7, pc}

0801586e <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 801586e:	b580      	push	{r7, lr}
 8015870:	b082      	sub	sp, #8
 8015872:	af00      	add	r7, sp, #0
 8015874:	0002      	movs	r2, r0
 8015876:	1dfb      	adds	r3, r7, #7
 8015878:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_EnableRX(PortNum);
 801587a:	1dfb      	adds	r3, r7, #7
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	0018      	movs	r0, r3
 8015880:	f000 fe0a 	bl	8016498 <USBPD_HW_IF_EnableRX>
}
 8015884:	46c0      	nop			@ (mov r8, r8)
 8015886:	46bd      	mov	sp, r7
 8015888:	b002      	add	sp, #8
 801588a:	bd80      	pop	{r7, pc}

0801588c <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 801588c:	b580      	push	{r7, lr}
 801588e:	b082      	sub	sp, #8
 8015890:	af00      	add	r7, sp, #0
 8015892:	0002      	movs	r2, r0
 8015894:	1dfb      	adds	r3, r7, #7
 8015896:	701a      	strb	r2, [r3, #0]
  USBPD_HW_IF_DisableRX(PortNum);
 8015898:	1dfb      	adds	r3, r7, #7
 801589a:	781b      	ldrb	r3, [r3, #0]
 801589c:	0018      	movs	r0, r3
 801589e:	f000 fe13 	bl	80164c8 <USBPD_HW_IF_DisableRX>
}
 80158a2:	46c0      	nop			@ (mov r8, r8)
 80158a4:	46bd      	mov	sp, r7
 80158a6:	b002      	add	sp, #8
 80158a8:	bd80      	pop	{r7, pc}
	...

080158ac <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 80158ac:	b590      	push	{r4, r7, lr}
 80158ae:	b085      	sub	sp, #20
 80158b0:	af00      	add	r7, sp, #0
 80158b2:	0002      	movs	r2, r0
 80158b4:	6039      	str	r1, [r7, #0]
 80158b6:	1dfb      	adds	r3, r7, #7
 80158b8:	701a      	strb	r2, [r3, #0]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 80158ba:	2008      	movs	r0, #8
 80158bc:	183b      	adds	r3, r7, r0
 80158be:	4a2e      	ldr	r2, [pc, #184]	@ (8015978 <PHY_Rx_Completed+0xcc>)
 80158c0:	6811      	ldr	r1, [r2, #0]
 80158c2:	6019      	str	r1, [r3, #0]
 80158c4:	8892      	ldrh	r2, [r2, #4]
 80158c6:	809a      	strh	r2, [r3, #4]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 80158c8:	240f      	movs	r4, #15
 80158ca:	193b      	adds	r3, r7, r4
 80158cc:	1839      	adds	r1, r7, r0
 80158ce:	683a      	ldr	r2, [r7, #0]
 80158d0:	188a      	adds	r2, r1, r2
 80158d2:	7812      	ldrb	r2, [r2, #0]
 80158d4:	701a      	strb	r2, [r3, #0]

  /* check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 80158d6:	193b      	adds	r3, r7, r4
 80158d8:	781b      	ldrb	r3, [r3, #0]
 80158da:	2b04      	cmp	r3, #4
 80158dc:	dc02      	bgt.n	80158e4 <PHY_Rx_Completed+0x38>
 80158de:	2b00      	cmp	r3, #0
 80158e0:	da1d      	bge.n	801591e <PHY_Rx_Completed+0x72>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 80158e2:	e040      	b.n	8015966 <PHY_Rx_Completed+0xba>
  switch (_msgtype)
 80158e4:	2b06      	cmp	r3, #6
 80158e6:	d13e      	bne.n	8015966 <PHY_Rx_Completed+0xba>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 80158e8:	1dfb      	adds	r3, r7, #7
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	4a23      	ldr	r2, [pc, #140]	@ (801597c <PHY_Rx_Completed+0xd0>)
 80158ee:	00db      	lsls	r3, r3, #3
 80158f0:	18d3      	adds	r3, r2, r3
 80158f2:	3304      	adds	r3, #4
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	221e      	movs	r2, #30
 80158f8:	4013      	ands	r3, r2
 80158fa:	2b1e      	cmp	r3, #30
 80158fc:	d135      	bne.n	801596a <PHY_Rx_Completed+0xbe>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 80158fe:	1dfb      	adds	r3, r7, #7
 8015900:	781a      	ldrb	r2, [r3, #0]
 8015902:	491f      	ldr	r1, [pc, #124]	@ (8015980 <PHY_Rx_Completed+0xd4>)
 8015904:	0013      	movs	r3, r2
 8015906:	011b      	lsls	r3, r3, #4
 8015908:	1a9b      	subs	r3, r3, r2
 801590a:	009b      	lsls	r3, r3, #2
 801590c:	18cb      	adds	r3, r1, r3
 801590e:	331c      	adds	r3, #28
 8015910:	681b      	ldr	r3, [r3, #0]
 8015912:	1dfa      	adds	r2, r7, #7
 8015914:	7812      	ldrb	r2, [r2, #0]
 8015916:	2106      	movs	r1, #6
 8015918:	0010      	movs	r0, r2
 801591a:	4798      	blx	r3
      break;
 801591c:	e025      	b.n	801596a <PHY_Rx_Completed+0xbe>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 801591e:	240f      	movs	r4, #15
 8015920:	193b      	adds	r3, r7, r4
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	2201      	movs	r2, #1
 8015926:	409a      	lsls	r2, r3
 8015928:	0013      	movs	r3, r2
 801592a:	b2db      	uxtb	r3, r3
 801592c:	0018      	movs	r0, r3
 801592e:	1dfb      	adds	r3, r7, #7
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	4a12      	ldr	r2, [pc, #72]	@ (801597c <PHY_Rx_Completed+0xd0>)
 8015934:	00db      	lsls	r3, r3, #3
 8015936:	18d3      	adds	r3, r2, r3
 8015938:	3304      	adds	r3, #4
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	193a      	adds	r2, r7, r4
 801593e:	7812      	ldrb	r2, [r2, #0]
 8015940:	2101      	movs	r1, #1
 8015942:	4091      	lsls	r1, r2
 8015944:	000a      	movs	r2, r1
 8015946:	b2d2      	uxtb	r2, r2
 8015948:	4013      	ands	r3, r2
 801594a:	4298      	cmp	r0, r3
 801594c:	d10f      	bne.n	801596e <PHY_Rx_Completed+0xc2>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 801594e:	1dfb      	adds	r3, r7, #7
 8015950:	781a      	ldrb	r2, [r3, #0]
 8015952:	4b0a      	ldr	r3, [pc, #40]	@ (801597c <PHY_Rx_Completed+0xd0>)
 8015954:	00d2      	lsls	r2, r2, #3
 8015956:	58d3      	ldr	r3, [r2, r3]
 8015958:	193a      	adds	r2, r7, r4
 801595a:	7811      	ldrb	r1, [r2, #0]
 801595c:	1dfa      	adds	r2, r7, #7
 801595e:	7812      	ldrb	r2, [r2, #0]
 8015960:	0010      	movs	r0, r2
 8015962:	4798      	blx	r3
      break;
 8015964:	e003      	b.n	801596e <PHY_Rx_Completed+0xc2>
      break;
 8015966:	46c0      	nop			@ (mov r8, r8)
 8015968:	e002      	b.n	8015970 <PHY_Rx_Completed+0xc4>
      break;
 801596a:	46c0      	nop			@ (mov r8, r8)
 801596c:	e000      	b.n	8015970 <PHY_Rx_Completed+0xc4>
      break;
 801596e:	46c0      	nop			@ (mov r8, r8)
  }
}
 8015970:	46c0      	nop			@ (mov r8, r8)
 8015972:	46bd      	mov	sp, r7
 8015974:	b005      	add	sp, #20
 8015976:	bd90      	pop	{r4, r7, pc}
 8015978:	0801e338 	.word	0x0801e338
 801597c:	20011614 	.word	0x20011614
 8015980:	20011624 	.word	0x20011624

08015984 <LL_AHB1_GRP1_EnableClock>:
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b084      	sub	sp, #16
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 801598c:	4b07      	ldr	r3, [pc, #28]	@ (80159ac <LL_AHB1_GRP1_EnableClock+0x28>)
 801598e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8015990:	4b06      	ldr	r3, [pc, #24]	@ (80159ac <LL_AHB1_GRP1_EnableClock+0x28>)
 8015992:	687a      	ldr	r2, [r7, #4]
 8015994:	430a      	orrs	r2, r1
 8015996:	639a      	str	r2, [r3, #56]	@ 0x38
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8015998:	4b04      	ldr	r3, [pc, #16]	@ (80159ac <LL_AHB1_GRP1_EnableClock+0x28>)
 801599a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801599c:	687a      	ldr	r2, [r7, #4]
 801599e:	4013      	ands	r3, r2
 80159a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80159a2:	68fb      	ldr	r3, [r7, #12]
}
 80159a4:	46c0      	nop			@ (mov r8, r8)
 80159a6:	46bd      	mov	sp, r7
 80159a8:	b004      	add	sp, #16
 80159aa:	bd80      	pop	{r7, pc}
 80159ac:	40021000 	.word	0x40021000

080159b0 <LL_APB1_GRP1_EnableClock>:
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b084      	sub	sp, #16
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR1, Periphs);
 80159b8:	4b07      	ldr	r3, [pc, #28]	@ (80159d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80159ba:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80159bc:	4b06      	ldr	r3, [pc, #24]	@ (80159d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80159be:	687a      	ldr	r2, [r7, #4]
 80159c0:	430a      	orrs	r2, r1
 80159c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 80159c4:	4b04      	ldr	r3, [pc, #16]	@ (80159d8 <LL_APB1_GRP1_EnableClock+0x28>)
 80159c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80159c8:	687a      	ldr	r2, [r7, #4]
 80159ca:	4013      	ands	r3, r2
 80159cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80159ce:	68fb      	ldr	r3, [r7, #12]
}
 80159d0:	46c0      	nop			@ (mov r8, r8)
 80159d2:	46bd      	mov	sp, r7
 80159d4:	b004      	add	sp, #16
 80159d6:	bd80      	pop	{r7, pc}
 80159d8:	40021000 	.word	0x40021000

080159dc <LL_APB2_GRP1_EnableClock>:
{
 80159dc:	b580      	push	{r7, lr}
 80159de:	b084      	sub	sp, #16
 80159e0:	af00      	add	r7, sp, #0
 80159e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 80159e4:	4b07      	ldr	r3, [pc, #28]	@ (8015a04 <LL_APB2_GRP1_EnableClock+0x28>)
 80159e6:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80159e8:	4b06      	ldr	r3, [pc, #24]	@ (8015a04 <LL_APB2_GRP1_EnableClock+0x28>)
 80159ea:	687a      	ldr	r2, [r7, #4]
 80159ec:	430a      	orrs	r2, r1
 80159ee:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 80159f0:	4b04      	ldr	r3, [pc, #16]	@ (8015a04 <LL_APB2_GRP1_EnableClock+0x28>)
 80159f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80159f4:	687a      	ldr	r2, [r7, #4]
 80159f6:	4013      	ands	r3, r2
 80159f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80159fa:	68fb      	ldr	r3, [r7, #12]
}
 80159fc:	46c0      	nop			@ (mov r8, r8)
 80159fe:	46bd      	mov	sp, r7
 8015a00:	b004      	add	sp, #16
 8015a02:	bd80      	pop	{r7, pc}
 8015a04:	40021000 	.word	0x40021000

08015a08 <LL_UCPD_Enable>:
{
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b082      	sub	sp, #8
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2280      	movs	r2, #128	@ 0x80
 8015a16:	0612      	lsls	r2, r2, #24
 8015a18:	431a      	orrs	r2, r3
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	601a      	str	r2, [r3, #0]
}
 8015a1e:	46c0      	nop			@ (mov r8, r8)
 8015a20:	46bd      	mov	sp, r7
 8015a22:	b002      	add	sp, #8
 8015a24:	bd80      	pop	{r7, pc}

08015a26 <LL_UCPD_Disable>:
{
 8015a26:	b580      	push	{r7, lr}
 8015a28:	b082      	sub	sp, #8
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	005b      	lsls	r3, r3, #1
 8015a34:	085a      	lsrs	r2, r3, #1
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	601a      	str	r2, [r3, #0]
}
 8015a3a:	46c0      	nop			@ (mov r8, r8)
 8015a3c:	46bd      	mov	sp, r7
 8015a3e:	b002      	add	sp, #8
 8015a40:	bd80      	pop	{r7, pc}
	...

08015a44 <LL_UCPD_TypeCDetectionCC2Enable>:
{
 8015a44:	b580      	push	{r7, lr}
 8015a46:	b082      	sub	sp, #8
 8015a48:	af00      	add	r7, sp, #0
 8015a4a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	68db      	ldr	r3, [r3, #12]
 8015a50:	4a03      	ldr	r2, [pc, #12]	@ (8015a60 <LL_UCPD_TypeCDetectionCC2Enable+0x1c>)
 8015a52:	401a      	ands	r2, r3
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	60da      	str	r2, [r3, #12]
}
 8015a58:	46c0      	nop			@ (mov r8, r8)
 8015a5a:	46bd      	mov	sp, r7
 8015a5c:	b002      	add	sp, #8
 8015a5e:	bd80      	pop	{r7, pc}
 8015a60:	ffdfffff 	.word	0xffdfffff

08015a64 <LL_UCPD_TypeCDetectionCC2Disable>:
{
 8015a64:	b580      	push	{r7, lr}
 8015a66:	b082      	sub	sp, #8
 8015a68:	af00      	add	r7, sp, #0
 8015a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	68db      	ldr	r3, [r3, #12]
 8015a70:	2280      	movs	r2, #128	@ 0x80
 8015a72:	0392      	lsls	r2, r2, #14
 8015a74:	431a      	orrs	r2, r3
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	60da      	str	r2, [r3, #12]
}
 8015a7a:	46c0      	nop			@ (mov r8, r8)
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	b002      	add	sp, #8
 8015a80:	bd80      	pop	{r7, pc}
	...

08015a84 <LL_UCPD_TypeCDetectionCC1Enable>:
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	68db      	ldr	r3, [r3, #12]
 8015a90:	4a03      	ldr	r2, [pc, #12]	@ (8015aa0 <LL_UCPD_TypeCDetectionCC1Enable+0x1c>)
 8015a92:	401a      	ands	r2, r3
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	60da      	str	r2, [r3, #12]
}
 8015a98:	46c0      	nop			@ (mov r8, r8)
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	b002      	add	sp, #8
 8015a9e:	bd80      	pop	{r7, pc}
 8015aa0:	ffefffff 	.word	0xffefffff

08015aa4 <LL_UCPD_TypeCDetectionCC1Disable>:
{
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b082      	sub	sp, #8
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	68db      	ldr	r3, [r3, #12]
 8015ab0:	2280      	movs	r2, #128	@ 0x80
 8015ab2:	0352      	lsls	r2, r2, #13
 8015ab4:	431a      	orrs	r2, r3
 8015ab6:	687b      	ldr	r3, [r7, #4]
 8015ab8:	60da      	str	r2, [r3, #12]
}
 8015aba:	46c0      	nop			@ (mov r8, r8)
 8015abc:	46bd      	mov	sp, r7
 8015abe:	b002      	add	sp, #8
 8015ac0:	bd80      	pop	{r7, pc}

08015ac2 <LL_UCPD_SignalFRSTX>:
{
 8015ac2:	b580      	push	{r7, lr}
 8015ac4:	b082      	sub	sp, #8
 8015ac6:	af00      	add	r7, sp, #0
 8015ac8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	68db      	ldr	r3, [r3, #12]
 8015ace:	2280      	movs	r2, #128	@ 0x80
 8015ad0:	0292      	lsls	r2, r2, #10
 8015ad2:	431a      	orrs	r2, r3
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	60da      	str	r2, [r3, #12]
}
 8015ad8:	46c0      	nop			@ (mov r8, r8)
 8015ada:	46bd      	mov	sp, r7
 8015adc:	b002      	add	sp, #8
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <LL_UCPD_FRSDetectionEnable>:
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	68db      	ldr	r3, [r3, #12]
 8015aec:	2280      	movs	r2, #128	@ 0x80
 8015aee:	0252      	lsls	r2, r2, #9
 8015af0:	431a      	orrs	r2, r3
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	60da      	str	r2, [r3, #12]
}
 8015af6:	46c0      	nop			@ (mov r8, r8)
 8015af8:	46bd      	mov	sp, r7
 8015afa:	b002      	add	sp, #8
 8015afc:	bd80      	pop	{r7, pc}
	...

08015b00 <LL_UCPD_FRSDetectionDisable>:
{
 8015b00:	b580      	push	{r7, lr}
 8015b02:	b082      	sub	sp, #8
 8015b04:	af00      	add	r7, sp, #0
 8015b06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	68db      	ldr	r3, [r3, #12]
 8015b0c:	4a03      	ldr	r2, [pc, #12]	@ (8015b1c <LL_UCPD_FRSDetectionDisable+0x1c>)
 8015b0e:	401a      	ands	r2, r3
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	60da      	str	r2, [r3, #12]
}
 8015b14:	46c0      	nop			@ (mov r8, r8)
 8015b16:	46bd      	mov	sp, r7
 8015b18:	b002      	add	sp, #8
 8015b1a:	bd80      	pop	{r7, pc}
 8015b1c:	fffeffff 	.word	0xfffeffff

08015b20 <LL_UCPD_SetccEnable>:
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b082      	sub	sp, #8
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	4a05      	ldr	r2, [pc, #20]	@ (8015b44 <LL_UCPD_SetccEnable+0x24>)
 8015b30:	401a      	ands	r2, r3
 8015b32:	683b      	ldr	r3, [r7, #0]
 8015b34:	431a      	orrs	r2, r3
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	60da      	str	r2, [r3, #12]
}
 8015b3a:	46c0      	nop			@ (mov r8, r8)
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	b002      	add	sp, #8
 8015b40:	bd80      	pop	{r7, pc}
 8015b42:	46c0      	nop			@ (mov r8, r8)
 8015b44:	fffff3ff 	.word	0xfffff3ff

08015b48 <LL_UCPD_SetSNKRole>:
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	68db      	ldr	r3, [r3, #12]
 8015b54:	2280      	movs	r2, #128	@ 0x80
 8015b56:	0092      	lsls	r2, r2, #2
 8015b58:	431a      	orrs	r2, r3
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	60da      	str	r2, [r3, #12]
}
 8015b5e:	46c0      	nop			@ (mov r8, r8)
 8015b60:	46bd      	mov	sp, r7
 8015b62:	b002      	add	sp, #8
 8015b64:	bd80      	pop	{r7, pc}
	...

08015b68 <LL_UCPD_SetSRCRole>:
{
 8015b68:	b580      	push	{r7, lr}
 8015b6a:	b082      	sub	sp, #8
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	68db      	ldr	r3, [r3, #12]
 8015b74:	4a03      	ldr	r2, [pc, #12]	@ (8015b84 <LL_UCPD_SetSRCRole+0x1c>)
 8015b76:	401a      	ands	r2, r3
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	60da      	str	r2, [r3, #12]
}
 8015b7c:	46c0      	nop			@ (mov r8, r8)
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	b002      	add	sp, #8
 8015b82:	bd80      	pop	{r7, pc}
 8015b84:	fffffdff 	.word	0xfffffdff

08015b88 <LL_UCPD_SetRpResistor>:
{
 8015b88:	b580      	push	{r7, lr}
 8015b8a:	b082      	sub	sp, #8
 8015b8c:	af00      	add	r7, sp, #0
 8015b8e:	6078      	str	r0, [r7, #4]
 8015b90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	68db      	ldr	r3, [r3, #12]
 8015b96:	4a05      	ldr	r2, [pc, #20]	@ (8015bac <LL_UCPD_SetRpResistor+0x24>)
 8015b98:	401a      	ands	r2, r3
 8015b9a:	683b      	ldr	r3, [r7, #0]
 8015b9c:	431a      	orrs	r2, r3
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	60da      	str	r2, [r3, #12]
}
 8015ba2:	46c0      	nop			@ (mov r8, r8)
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	b002      	add	sp, #8
 8015ba8:	bd80      	pop	{r7, pc}
 8015baa:	46c0      	nop			@ (mov r8, r8)
 8015bac:	fffffe7f 	.word	0xfffffe7f

08015bb0 <LL_UCPD_SetCCPin>:
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b082      	sub	sp, #8
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	6078      	str	r0, [r7, #4]
 8015bb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	68db      	ldr	r3, [r3, #12]
 8015bbe:	2240      	movs	r2, #64	@ 0x40
 8015bc0:	4393      	bics	r3, r2
 8015bc2:	001a      	movs	r2, r3
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	431a      	orrs	r2, r3
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	60da      	str	r2, [r3, #12]
}
 8015bcc:	46c0      	nop			@ (mov r8, r8)
 8015bce:	46bd      	mov	sp, r7
 8015bd0:	b002      	add	sp, #8
 8015bd2:	bd80      	pop	{r7, pc}

08015bd4 <LL_UCPD_RxEnable>:
{
 8015bd4:	b580      	push	{r7, lr}
 8015bd6:	b082      	sub	sp, #8
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	68db      	ldr	r3, [r3, #12]
 8015be0:	2220      	movs	r2, #32
 8015be2:	431a      	orrs	r2, r3
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	60da      	str	r2, [r3, #12]
}
 8015be8:	46c0      	nop			@ (mov r8, r8)
 8015bea:	46bd      	mov	sp, r7
 8015bec:	b002      	add	sp, #8
 8015bee:	bd80      	pop	{r7, pc}

08015bf0 <LL_UCPD_RxDisable>:
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	2220      	movs	r2, #32
 8015bfe:	4393      	bics	r3, r2
 8015c00:	001a      	movs	r2, r3
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	60da      	str	r2, [r3, #12]
}
 8015c06:	46c0      	nop			@ (mov r8, r8)
 8015c08:	46bd      	mov	sp, r7
 8015c0a:	b002      	add	sp, #8
 8015c0c:	bd80      	pop	{r7, pc}

08015c0e <LL_UCPD_SetRxMode>:
{
 8015c0e:	b580      	push	{r7, lr}
 8015c10:	b082      	sub	sp, #8
 8015c12:	af00      	add	r7, sp, #0
 8015c14:	6078      	str	r0, [r7, #4]
 8015c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	68db      	ldr	r3, [r3, #12]
 8015c1c:	2210      	movs	r2, #16
 8015c1e:	4393      	bics	r3, r2
 8015c20:	001a      	movs	r2, r3
 8015c22:	683b      	ldr	r3, [r7, #0]
 8015c24:	431a      	orrs	r2, r3
 8015c26:	687b      	ldr	r3, [r7, #4]
 8015c28:	60da      	str	r2, [r3, #12]
}
 8015c2a:	46c0      	nop			@ (mov r8, r8)
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	b002      	add	sp, #8
 8015c30:	bd80      	pop	{r7, pc}

08015c32 <LL_UCPD_SendHardReset>:
{
 8015c32:	b580      	push	{r7, lr}
 8015c34:	b082      	sub	sp, #8
 8015c36:	af00      	add	r7, sp, #0
 8015c38:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	68db      	ldr	r3, [r3, #12]
 8015c3e:	2208      	movs	r2, #8
 8015c40:	431a      	orrs	r2, r3
 8015c42:	687b      	ldr	r3, [r7, #4]
 8015c44:	60da      	str	r2, [r3, #12]
}
 8015c46:	46c0      	nop			@ (mov r8, r8)
 8015c48:	46bd      	mov	sp, r7
 8015c4a:	b002      	add	sp, #8
 8015c4c:	bd80      	pop	{r7, pc}

08015c4e <LL_UCPD_SendMessage>:
{
 8015c4e:	b580      	push	{r7, lr}
 8015c50:	b082      	sub	sp, #8
 8015c52:	af00      	add	r7, sp, #0
 8015c54:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	68db      	ldr	r3, [r3, #12]
 8015c5a:	2204      	movs	r2, #4
 8015c5c:	431a      	orrs	r2, r3
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	60da      	str	r2, [r3, #12]
}
 8015c62:	46c0      	nop			@ (mov r8, r8)
 8015c64:	46bd      	mov	sp, r7
 8015c66:	b002      	add	sp, #8
 8015c68:	bd80      	pop	{r7, pc}

08015c6a <LL_UCPD_SetTxMode>:
{
 8015c6a:	b580      	push	{r7, lr}
 8015c6c:	b082      	sub	sp, #8
 8015c6e:	af00      	add	r7, sp, #0
 8015c70:	6078      	str	r0, [r7, #4]
 8015c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	68db      	ldr	r3, [r3, #12]
 8015c78:	2203      	movs	r2, #3
 8015c7a:	4393      	bics	r3, r2
 8015c7c:	001a      	movs	r2, r3
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	431a      	orrs	r2, r3
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	60da      	str	r2, [r3, #12]
}
 8015c86:	46c0      	nop			@ (mov r8, r8)
 8015c88:	46bd      	mov	sp, r7
 8015c8a:	b002      	add	sp, #8
 8015c8c:	bd80      	pop	{r7, pc}

08015c8e <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8015c8e:	b580      	push	{r7, lr}
 8015c90:	b082      	sub	sp, #8
 8015c92:	af00      	add	r7, sp, #0
 8015c94:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2280      	movs	r2, #128	@ 0x80
 8015c9c:	05d2      	lsls	r2, r2, #23
 8015c9e:	431a      	orrs	r2, r3
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	601a      	str	r2, [r3, #0]
}
 8015ca4:	46c0      	nop			@ (mov r8, r8)
 8015ca6:	46bd      	mov	sp, r7
 8015ca8:	b002      	add	sp, #8
 8015caa:	bd80      	pop	{r7, pc}

08015cac <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b082      	sub	sp, #8
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	4a03      	ldr	r2, [pc, #12]	@ (8015cc8 <LL_UCPD_RxDMADisable+0x1c>)
 8015cba:	401a      	ands	r2, r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	601a      	str	r2, [r3, #0]
}
 8015cc0:	46c0      	nop			@ (mov r8, r8)
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	b002      	add	sp, #8
 8015cc6:	bd80      	pop	{r7, pc}
 8015cc8:	bfffffff 	.word	0xbfffffff

08015ccc <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b082      	sub	sp, #8
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	2280      	movs	r2, #128	@ 0x80
 8015cda:	0592      	lsls	r2, r2, #22
 8015cdc:	431a      	orrs	r2, r3
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	601a      	str	r2, [r3, #0]
}
 8015ce2:	46c0      	nop			@ (mov r8, r8)
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	b002      	add	sp, #8
 8015ce8:	bd80      	pop	{r7, pc}
	...

08015cec <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	4a03      	ldr	r2, [pc, #12]	@ (8015d08 <LL_UCPD_TxDMADisable+0x1c>)
 8015cfa:	401a      	ands	r2, r3
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	601a      	str	r2, [r3, #0]
}
 8015d00:	46c0      	nop			@ (mov r8, r8)
 8015d02:	46bd      	mov	sp, r7
 8015d04:	b002      	add	sp, #8
 8015d06:	bd80      	pop	{r7, pc}
 8015d08:	dfffffff 	.word	0xdfffffff

08015d0c <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 8015d0c:	b580      	push	{r7, lr}
 8015d0e:	b082      	sub	sp, #8
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	6078      	str	r0, [r7, #4]
 8015d14:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	683a      	ldr	r2, [r7, #0]
 8015d1a:	61da      	str	r2, [r3, #28]
}
 8015d1c:	46c0      	nop			@ (mov r8, r8)
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	b002      	add	sp, #8
 8015d22:	bd80      	pop	{r7, pc}

08015d24 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b082      	sub	sp, #8
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	6078      	str	r0, [r7, #4]
 8015d2c:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	683a      	ldr	r2, [r7, #0]
 8015d32:	621a      	str	r2, [r3, #32]
}
 8015d34:	46c0      	nop			@ (mov r8, r8)
 8015d36:	46bd      	mov	sp, r7
 8015d38:	b002      	add	sp, #8
 8015d3a:	bd80      	pop	{r7, pc}

08015d3c <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8015d40:	2380      	movs	r3, #128	@ 0x80
 8015d42:	055b      	lsls	r3, r3, #21
 8015d44:	0018      	movs	r0, r3
 8015d46:	f7ff fe33 	bl	80159b0 <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 8015d4a:	2380      	movs	r3, #128	@ 0x80
 8015d4c:	015b      	lsls	r3, r3, #5
 8015d4e:	0018      	movs	r0, r3
 8015d50:	f7ff fe18 	bl	8015984 <LL_AHB1_GRP1_EnableClock>
}
 8015d54:	46c0      	nop			@ (mov r8, r8)
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}
	...

08015d5c <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b084      	sub	sp, #16
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	0002      	movs	r2, r0
 8015d64:	1dfb      	adds	r3, r7, #7
 8015d66:	701a      	strb	r2, [r3, #0]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8015d68:	1dfb      	adds	r3, r7, #7
 8015d6a:	781a      	ldrb	r2, [r3, #0]
 8015d6c:	4916      	ldr	r1, [pc, #88]	@ (8015dc8 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8015d6e:	0013      	movs	r3, r2
 8015d70:	011b      	lsls	r3, r3, #4
 8015d72:	1a9b      	subs	r3, r3, r2
 8015d74:	009b      	lsls	r3, r3, #2
 8015d76:	585b      	ldr	r3, [r3, r1]
 8015d78:	68db      	ldr	r3, [r3, #12]
 8015d7a:	2207      	movs	r2, #7
 8015d7c:	4393      	bics	r3, r2
 8015d7e:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 8015d80:	1dfb      	adds	r3, r7, #7
 8015d82:	781a      	ldrb	r2, [r3, #0]
 8015d84:	4910      	ldr	r1, [pc, #64]	@ (8015dc8 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8015d86:	0013      	movs	r3, r2
 8015d88:	011b      	lsls	r3, r3, #4
 8015d8a:	1a9b      	subs	r3, r3, r2
 8015d8c:	009b      	lsls	r3, r3, #2
 8015d8e:	585b      	ldr	r3, [r3, r1]
 8015d90:	0018      	movs	r0, r3
 8015d92:	f7ff fe48 	bl	8015a26 <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8015d96:	1dfb      	adds	r3, r7, #7
 8015d98:	781a      	ldrb	r2, [r3, #0]
 8015d9a:	490b      	ldr	r1, [pc, #44]	@ (8015dc8 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8015d9c:	0013      	movs	r3, r2
 8015d9e:	011b      	lsls	r3, r3, #4
 8015da0:	1a9b      	subs	r3, r3, r2
 8015da2:	009b      	lsls	r3, r3, #2
 8015da4:	585b      	ldr	r3, [r3, r1]
 8015da6:	0018      	movs	r0, r3
 8015da8:	f7ff fe2e 	bl	8015a08 <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 8015dac:	1dfb      	adds	r3, r7, #7
 8015dae:	781a      	ldrb	r2, [r3, #0]
 8015db0:	4905      	ldr	r1, [pc, #20]	@ (8015dc8 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8015db2:	0013      	movs	r3, r2
 8015db4:	011b      	lsls	r3, r3, #4
 8015db6:	1a9b      	subs	r3, r3, r2
 8015db8:	009b      	lsls	r3, r3, #2
 8015dba:	585b      	ldr	r3, [r3, r1]
 8015dbc:	68fa      	ldr	r2, [r7, #12]
 8015dbe:	60da      	str	r2, [r3, #12]
}
 8015dc0:	46c0      	nop			@ (mov r8, r8)
 8015dc2:	46bd      	mov	sp, r7
 8015dc4:	b004      	add	sp, #16
 8015dc6:	bd80      	pop	{r7, pc}
 8015dc8:	20011624 	.word	0x20011624

08015dcc <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 8015dcc:	b590      	push	{r4, r7, lr}
 8015dce:	b08b      	sub	sp, #44	@ 0x2c
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	60ba      	str	r2, [r7, #8]
 8015dd4:	607b      	str	r3, [r7, #4]
 8015dd6:	240f      	movs	r4, #15
 8015dd8:	193b      	adds	r3, r7, r4
 8015dda:	1c02      	adds	r2, r0, #0
 8015ddc:	701a      	strb	r2, [r3, #0]
 8015dde:	200e      	movs	r0, #14
 8015de0:	183b      	adds	r3, r7, r0
 8015de2:	1c0a      	adds	r2, r1, #0
 8015de4:	701a      	strb	r2, [r3, #0]
  USBPD_StatusTypeDef _status = USBPD_OK;
 8015de6:	2327      	movs	r3, #39	@ 0x27
 8015de8:	18fb      	adds	r3, r7, r3
 8015dea:	2200      	movs	r2, #0
 8015dec:	701a      	strb	r2, [r3, #0]

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 8015dee:	183b      	adds	r3, r7, r0
 8015df0:	781b      	ldrb	r3, [r3, #0]
 8015df2:	2b05      	cmp	r3, #5
 8015df4:	d10b      	bne.n	8015e0e <USBPD_HW_IF_SendBuffer+0x42>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 8015df6:	193b      	adds	r3, r7, r4
 8015df8:	781a      	ldrb	r2, [r3, #0]
 8015dfa:	499e      	ldr	r1, [pc, #632]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015dfc:	0013      	movs	r3, r2
 8015dfe:	011b      	lsls	r3, r3, #4
 8015e00:	1a9b      	subs	r3, r3, r2
 8015e02:	009b      	lsls	r3, r3, #2
 8015e04:	585b      	ldr	r3, [r3, r1]
 8015e06:	0018      	movs	r0, r3
 8015e08:	f7ff ff13 	bl	8015c32 <LL_UCPD_SendHardReset>
 8015e0c:	e12a      	b.n	8016064 <USBPD_HW_IF_SendBuffer+0x298>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8015e12:	61fb      	str	r3, [r7, #28]
  return(result);
 8015e14:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 8015e16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8015e18:	b672      	cpsid	i
}
 8015e1a:	46c0      	nop			@ (mov r8, r8)

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 8015e1c:	240f      	movs	r4, #15
 8015e1e:	193b      	adds	r3, r7, r4
 8015e20:	781a      	ldrb	r2, [r3, #0]
 8015e22:	4994      	ldr	r1, [pc, #592]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015e24:	2038      	movs	r0, #56	@ 0x38
 8015e26:	0013      	movs	r3, r2
 8015e28:	011b      	lsls	r3, r3, #4
 8015e2a:	1a9b      	subs	r3, r3, r2
 8015e2c:	009b      	lsls	r3, r3, #2
 8015e2e:	18cb      	adds	r3, r1, r3
 8015e30:	181b      	adds	r3, r3, r0
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	2b01      	cmp	r3, #1
 8015e38:	d00e      	beq.n	8015e58 <USBPD_HW_IF_SendBuffer+0x8c>
 8015e3a:	193b      	adds	r3, r7, r4
 8015e3c:	781a      	ldrb	r2, [r3, #0]
 8015e3e:	498d      	ldr	r1, [pc, #564]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015e40:	0013      	movs	r3, r2
 8015e42:	011b      	lsls	r3, r3, #4
 8015e44:	1a9b      	subs	r3, r3, r2
 8015e46:	009b      	lsls	r3, r3, #2
 8015e48:	18cb      	adds	r3, r1, r3
 8015e4a:	3304      	adds	r3, #4
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	2201      	movs	r2, #1
 8015e52:	4013      	ands	r3, r2
 8015e54:	2b01      	cmp	r3, #1
 8015e56:	d10a      	bne.n	8015e6e <USBPD_HW_IF_SendBuffer+0xa2>
 8015e58:	6a3b      	ldr	r3, [r7, #32]
 8015e5a:	61bb      	str	r3, [r7, #24]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e5c:	69bb      	ldr	r3, [r7, #24]
 8015e5e:	f383 8810 	msr	PRIMASK, r3
}
 8015e62:	46c0      	nop			@ (mov r8, r8)
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8015e64:	2327      	movs	r3, #39	@ 0x27
 8015e66:	18fb      	adds	r3, r7, r3
 8015e68:	2202      	movs	r2, #2
 8015e6a:	701a      	strb	r2, [r3, #0]
 8015e6c:	e0fa      	b.n	8016064 <USBPD_HW_IF_SendBuffer+0x298>
 8015e6e:	6a3b      	ldr	r3, [r7, #32]
 8015e70:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	f383 8810 	msr	PRIMASK, r3
}
 8015e78:	46c0      	nop			@ (mov r8, r8)
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8015e7a:	230e      	movs	r3, #14
 8015e7c:	18fb      	adds	r3, r7, r3
 8015e7e:	781b      	ldrb	r3, [r3, #0]
 8015e80:	2b07      	cmp	r3, #7
 8015e82:	d871      	bhi.n	8015f68 <USBPD_HW_IF_SendBuffer+0x19c>
 8015e84:	009a      	lsls	r2, r3, #2
 8015e86:	4b7c      	ldr	r3, [pc, #496]	@ (8016078 <USBPD_HW_IF_SendBuffer+0x2ac>)
 8015e88:	18d3      	adds	r3, r2, r3
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	469f      	mov	pc, r3
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8015e8e:	240f      	movs	r4, #15
 8015e90:	193b      	adds	r3, r7, r4
 8015e92:	781a      	ldrb	r2, [r3, #0]
 8015e94:	4977      	ldr	r1, [pc, #476]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015e96:	0013      	movs	r3, r2
 8015e98:	011b      	lsls	r3, r3, #4
 8015e9a:	1a9b      	subs	r3, r3, r2
 8015e9c:	009b      	lsls	r3, r3, #2
 8015e9e:	585b      	ldr	r3, [r3, r1]
 8015ea0:	4a76      	ldr	r2, [pc, #472]	@ (801607c <USBPD_HW_IF_SendBuffer+0x2b0>)
 8015ea2:	0011      	movs	r1, r2
 8015ea4:	0018      	movs	r0, r3
 8015ea6:	f7ff ff31 	bl	8015d0c <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8015eaa:	193b      	adds	r3, r7, r4
 8015eac:	781a      	ldrb	r2, [r3, #0]
 8015eae:	4971      	ldr	r1, [pc, #452]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015eb0:	0013      	movs	r3, r2
 8015eb2:	011b      	lsls	r3, r3, #4
 8015eb4:	1a9b      	subs	r3, r3, r2
 8015eb6:	009b      	lsls	r3, r3, #2
 8015eb8:	585b      	ldr	r3, [r3, r1]
 8015eba:	2100      	movs	r1, #0
 8015ebc:	0018      	movs	r0, r3
 8015ebe:	f7ff fed4 	bl	8015c6a <LL_UCPD_SetTxMode>
          break;
 8015ec2:	e056      	b.n	8015f72 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8015ec4:	240f      	movs	r4, #15
 8015ec6:	193b      	adds	r3, r7, r4
 8015ec8:	781a      	ldrb	r2, [r3, #0]
 8015eca:	496a      	ldr	r1, [pc, #424]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015ecc:	0013      	movs	r3, r2
 8015ece:	011b      	lsls	r3, r3, #4
 8015ed0:	1a9b      	subs	r3, r3, r2
 8015ed2:	009b      	lsls	r3, r3, #2
 8015ed4:	585b      	ldr	r3, [r3, r1]
 8015ed6:	4a6a      	ldr	r2, [pc, #424]	@ (8016080 <USBPD_HW_IF_SendBuffer+0x2b4>)
 8015ed8:	0011      	movs	r1, r2
 8015eda:	0018      	movs	r0, r3
 8015edc:	f7ff ff16 	bl	8015d0c <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8015ee0:	193b      	adds	r3, r7, r4
 8015ee2:	781a      	ldrb	r2, [r3, #0]
 8015ee4:	4963      	ldr	r1, [pc, #396]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015ee6:	0013      	movs	r3, r2
 8015ee8:	011b      	lsls	r3, r3, #4
 8015eea:	1a9b      	subs	r3, r3, r2
 8015eec:	009b      	lsls	r3, r3, #2
 8015eee:	585b      	ldr	r3, [r3, r1]
 8015ef0:	2100      	movs	r1, #0
 8015ef2:	0018      	movs	r0, r3
 8015ef4:	f7ff feb9 	bl	8015c6a <LL_UCPD_SetTxMode>
          break;
 8015ef8:	e03b      	b.n	8015f72 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 8015efa:	240f      	movs	r4, #15
 8015efc:	193b      	adds	r3, r7, r4
 8015efe:	781a      	ldrb	r2, [r3, #0]
 8015f00:	495c      	ldr	r1, [pc, #368]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015f02:	0013      	movs	r3, r2
 8015f04:	011b      	lsls	r3, r3, #4
 8015f06:	1a9b      	subs	r3, r3, r2
 8015f08:	009b      	lsls	r3, r3, #2
 8015f0a:	585b      	ldr	r3, [r3, r1]
 8015f0c:	4a5d      	ldr	r2, [pc, #372]	@ (8016084 <USBPD_HW_IF_SendBuffer+0x2b8>)
 8015f0e:	0011      	movs	r1, r2
 8015f10:	0018      	movs	r0, r3
 8015f12:	f7ff fefb 	bl	8015d0c <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8015f16:	193b      	adds	r3, r7, r4
 8015f18:	781a      	ldrb	r2, [r3, #0]
 8015f1a:	4956      	ldr	r1, [pc, #344]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015f1c:	0013      	movs	r3, r2
 8015f1e:	011b      	lsls	r3, r3, #4
 8015f20:	1a9b      	subs	r3, r3, r2
 8015f22:	009b      	lsls	r3, r3, #2
 8015f24:	585b      	ldr	r3, [r3, r1]
 8015f26:	2100      	movs	r1, #0
 8015f28:	0018      	movs	r0, r3
 8015f2a:	f7ff fe9e 	bl	8015c6a <LL_UCPD_SetTxMode>
          break;
 8015f2e:	e020      	b.n	8015f72 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 8015f30:	230f      	movs	r3, #15
 8015f32:	18fb      	adds	r3, r7, r3
 8015f34:	781a      	ldrb	r2, [r3, #0]
 8015f36:	494f      	ldr	r1, [pc, #316]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015f38:	0013      	movs	r3, r2
 8015f3a:	011b      	lsls	r3, r3, #4
 8015f3c:	1a9b      	subs	r3, r3, r2
 8015f3e:	009b      	lsls	r3, r3, #2
 8015f40:	585b      	ldr	r3, [r3, r1]
 8015f42:	2101      	movs	r1, #1
 8015f44:	0018      	movs	r0, r3
 8015f46:	f7ff fe90 	bl	8015c6a <LL_UCPD_SetTxMode>
          break;
 8015f4a:	e012      	b.n	8015f72 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8015f4c:	230f      	movs	r3, #15
 8015f4e:	18fb      	adds	r3, r7, r3
 8015f50:	781a      	ldrb	r2, [r3, #0]
 8015f52:	4948      	ldr	r1, [pc, #288]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015f54:	0013      	movs	r3, r2
 8015f56:	011b      	lsls	r3, r3, #4
 8015f58:	1a9b      	subs	r3, r3, r2
 8015f5a:	009b      	lsls	r3, r3, #2
 8015f5c:	585b      	ldr	r3, [r3, r1]
 8015f5e:	2102      	movs	r1, #2
 8015f60:	0018      	movs	r0, r3
 8015f62:	f7ff fe82 	bl	8015c6a <LL_UCPD_SetTxMode>
          break;
 8015f66:	e004      	b.n	8015f72 <USBPD_HW_IF_SendBuffer+0x1a6>
        }
        default :
          _status = USBPD_ERROR;
 8015f68:	2327      	movs	r3, #39	@ 0x27
 8015f6a:	18fb      	adds	r3, r7, r3
 8015f6c:	2202      	movs	r2, #2
 8015f6e:	701a      	strb	r2, [r3, #0]
          break;
 8015f70:	46c0      	nop			@ (mov r8, r8)
      }

      if (USBPD_OK == _status)
 8015f72:	2327      	movs	r3, #39	@ 0x27
 8015f74:	18fb      	adds	r3, r7, r3
 8015f76:	781b      	ldrb	r3, [r3, #0]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d173      	bne.n	8016064 <USBPD_HW_IF_SendBuffer+0x298>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8015f7c:	200f      	movs	r0, #15
 8015f7e:	183b      	adds	r3, r7, r0
 8015f80:	781a      	ldrb	r2, [r3, #0]
 8015f82:	493c      	ldr	r1, [pc, #240]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015f84:	0013      	movs	r3, r2
 8015f86:	011b      	lsls	r3, r3, #4
 8015f88:	1a9b      	subs	r3, r3, r2
 8015f8a:	009b      	lsls	r3, r3, #2
 8015f8c:	18cb      	adds	r3, r1, r3
 8015f8e:	3304      	adds	r3, #4
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	6819      	ldr	r1, [r3, #0]
 8015f94:	183b      	adds	r3, r7, r0
 8015f96:	781a      	ldrb	r2, [r3, #0]
 8015f98:	4836      	ldr	r0, [pc, #216]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015f9a:	0013      	movs	r3, r2
 8015f9c:	011b      	lsls	r3, r3, #4
 8015f9e:	1a9b      	subs	r3, r3, r2
 8015fa0:	009b      	lsls	r3, r3, #2
 8015fa2:	18c3      	adds	r3, r0, r3
 8015fa4:	3304      	adds	r3, #4
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	2201      	movs	r2, #1
 8015faa:	4391      	bics	r1, r2
 8015fac:	000a      	movs	r2, r1
 8015fae:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8015fb0:	46c0      	nop			@ (mov r8, r8)
 8015fb2:	200f      	movs	r0, #15
 8015fb4:	183b      	adds	r3, r7, r0
 8015fb6:	781a      	ldrb	r2, [r3, #0]
 8015fb8:	492e      	ldr	r1, [pc, #184]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015fba:	0013      	movs	r3, r2
 8015fbc:	011b      	lsls	r3, r3, #4
 8015fbe:	1a9b      	subs	r3, r3, r2
 8015fc0:	009b      	lsls	r3, r3, #2
 8015fc2:	18cb      	adds	r3, r1, r3
 8015fc4:	3304      	adds	r3, #4
 8015fc6:	681b      	ldr	r3, [r3, #0]
 8015fc8:	681b      	ldr	r3, [r3, #0]
 8015fca:	2201      	movs	r2, #1
 8015fcc:	4013      	ands	r3, r2
 8015fce:	2b01      	cmp	r3, #1
 8015fd0:	d0ef      	beq.n	8015fb2 <USBPD_HW_IF_SendBuffer+0x1e6>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8015fd2:	0004      	movs	r4, r0
 8015fd4:	193b      	adds	r3, r7, r4
 8015fd6:	781a      	ldrb	r2, [r3, #0]
 8015fd8:	4926      	ldr	r1, [pc, #152]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015fda:	0013      	movs	r3, r2
 8015fdc:	011b      	lsls	r3, r3, #4
 8015fde:	1a9b      	subs	r3, r3, r2
 8015fe0:	009b      	lsls	r3, r3, #2
 8015fe2:	18cb      	adds	r3, r1, r3
 8015fe4:	3304      	adds	r3, #4
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	68ba      	ldr	r2, [r7, #8]
 8015fea:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 8015fec:	193b      	adds	r3, r7, r4
 8015fee:	781a      	ldrb	r2, [r3, #0]
 8015ff0:	4920      	ldr	r1, [pc, #128]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8015ff2:	0013      	movs	r3, r2
 8015ff4:	011b      	lsls	r3, r3, #4
 8015ff6:	1a9b      	subs	r3, r3, r2
 8015ff8:	009b      	lsls	r3, r3, #2
 8015ffa:	18cb      	adds	r3, r1, r3
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	687a      	ldr	r2, [r7, #4]
 8016002:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 8016004:	193b      	adds	r3, r7, r4
 8016006:	781a      	ldrb	r2, [r3, #0]
 8016008:	491a      	ldr	r1, [pc, #104]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801600a:	0013      	movs	r3, r2
 801600c:	011b      	lsls	r3, r3, #4
 801600e:	1a9b      	subs	r3, r3, r2
 8016010:	009b      	lsls	r3, r3, #2
 8016012:	18cb      	adds	r3, r1, r3
 8016014:	3304      	adds	r3, #4
 8016016:	681b      	ldr	r3, [r3, #0]
 8016018:	6819      	ldr	r1, [r3, #0]
 801601a:	193b      	adds	r3, r7, r4
 801601c:	781a      	ldrb	r2, [r3, #0]
 801601e:	4815      	ldr	r0, [pc, #84]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016020:	0013      	movs	r3, r2
 8016022:	011b      	lsls	r3, r3, #4
 8016024:	1a9b      	subs	r3, r3, r2
 8016026:	009b      	lsls	r3, r3, #2
 8016028:	18c3      	adds	r3, r0, r3
 801602a:	3304      	adds	r3, #4
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	2201      	movs	r2, #1
 8016030:	430a      	orrs	r2, r1
 8016032:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 8016034:	193b      	adds	r3, r7, r4
 8016036:	781a      	ldrb	r2, [r3, #0]
 8016038:	490e      	ldr	r1, [pc, #56]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 801603a:	0013      	movs	r3, r2
 801603c:	011b      	lsls	r3, r3, #4
 801603e:	1a9b      	subs	r3, r3, r2
 8016040:	009b      	lsls	r3, r3, #2
 8016042:	585b      	ldr	r3, [r3, r1]
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	0011      	movs	r1, r2
 8016048:	0018      	movs	r0, r3
 801604a:	f7ff fe6b 	bl	8015d24 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 801604e:	193b      	adds	r3, r7, r4
 8016050:	781a      	ldrb	r2, [r3, #0]
 8016052:	4908      	ldr	r1, [pc, #32]	@ (8016074 <USBPD_HW_IF_SendBuffer+0x2a8>)
 8016054:	0013      	movs	r3, r2
 8016056:	011b      	lsls	r3, r3, #4
 8016058:	1a9b      	subs	r3, r3, r2
 801605a:	009b      	lsls	r3, r3, #2
 801605c:	585b      	ldr	r3, [r3, r1]
 801605e:	0018      	movs	r0, r3
 8016060:	f7ff fdf5 	bl	8015c4e <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 8016064:	2327      	movs	r3, #39	@ 0x27
 8016066:	18fb      	adds	r3, r7, r3
 8016068:	781b      	ldrb	r3, [r3, #0]
}
 801606a:	0018      	movs	r0, r3
 801606c:	46bd      	mov	sp, r7
 801606e:	b00b      	add	sp, #44	@ 0x2c
 8016070:	bd90      	pop	{r4, r7, pc}
 8016072:	46c0      	nop			@ (mov r8, r8)
 8016074:	20011624 	.word	0x20011624
 8016078:	0801e538 	.word	0x0801e538
 801607c:	0008e318 	.word	0x0008e318
 8016080:	00031b18 	.word	0x00031b18
 8016084:	000360d8 	.word	0x000360d8

08016088 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	0002      	movs	r2, r0
 8016090:	1dfb      	adds	r3, r7, #7
 8016092:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8016094:	1dfb      	adds	r3, r7, #7
 8016096:	781a      	ldrb	r2, [r3, #0]
 8016098:	490c      	ldr	r1, [pc, #48]	@ (80160cc <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 801609a:	0013      	movs	r3, r2
 801609c:	011b      	lsls	r3, r3, #4
 801609e:	1a9b      	subs	r3, r3, r2
 80160a0:	009b      	lsls	r3, r3, #2
 80160a2:	585b      	ldr	r3, [r3, r1]
 80160a4:	2102      	movs	r1, #2
 80160a6:	0018      	movs	r0, r3
 80160a8:	f7ff fddf 	bl	8015c6a <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80160ac:	1dfb      	adds	r3, r7, #7
 80160ae:	781a      	ldrb	r2, [r3, #0]
 80160b0:	4906      	ldr	r1, [pc, #24]	@ (80160cc <USBPD_HW_IF_Send_BIST_Pattern+0x44>)
 80160b2:	0013      	movs	r3, r2
 80160b4:	011b      	lsls	r3, r3, #4
 80160b6:	1a9b      	subs	r3, r3, r2
 80160b8:	009b      	lsls	r3, r3, #2
 80160ba:	585b      	ldr	r3, [r3, r1]
 80160bc:	0018      	movs	r0, r3
 80160be:	f7ff fdc6 	bl	8015c4e <LL_UCPD_SendMessage>
}
 80160c2:	46c0      	nop			@ (mov r8, r8)
 80160c4:	46bd      	mov	sp, r7
 80160c6:	b002      	add	sp, #8
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	46c0      	nop			@ (mov r8, r8)
 80160cc:	20011624 	.word	0x20011624

080160d0 <USBPDM1_AssertRp>:
#endif /* !USBPDCORE_LIB_NO_PD */

void USBPDM1_AssertRp(uint8_t PortNum)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	0002      	movs	r2, r0
 80160d8:	1dfb      	adds	r3, r7, #7
 80160da:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80160dc:	2001      	movs	r0, #1
 80160de:	f7ff fc7d 	bl	80159dc <LL_APB2_GRP1_EnableClock>
  switch (Ports[PortNum].params->RpResistor)
 80160e2:	1dfb      	adds	r3, r7, #7
 80160e4:	781a      	ldrb	r2, [r3, #0]
 80160e6:	4953      	ldr	r1, [pc, #332]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 80160e8:	0013      	movs	r3, r2
 80160ea:	011b      	lsls	r3, r3, #4
 80160ec:	1a9b      	subs	r3, r3, r2
 80160ee:	009b      	lsls	r3, r3, #2
 80160f0:	18cb      	adds	r3, r1, r3
 80160f2:	3310      	adds	r3, #16
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	789b      	ldrb	r3, [r3, #2]
 80160f8:	079b      	lsls	r3, r3, #30
 80160fa:	0f9b      	lsrs	r3, r3, #30
 80160fc:	b2db      	uxtb	r3, r3
 80160fe:	2b02      	cmp	r3, #2
 8016100:	d021      	beq.n	8016146 <USBPDM1_AssertRp+0x76>
 8016102:	dc2f      	bgt.n	8016164 <USBPDM1_AssertRp+0x94>
 8016104:	2b00      	cmp	r3, #0
 8016106:	d002      	beq.n	801610e <USBPDM1_AssertRp+0x3e>
 8016108:	2b01      	cmp	r3, #1
 801610a:	d00d      	beq.n	8016128 <USBPDM1_AssertRp+0x58>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 801610c:	e02a      	b.n	8016164 <USBPDM1_AssertRp+0x94>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 801610e:	1dfb      	adds	r3, r7, #7
 8016110:	781a      	ldrb	r2, [r3, #0]
 8016112:	4948      	ldr	r1, [pc, #288]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 8016114:	0013      	movs	r3, r2
 8016116:	011b      	lsls	r3, r3, #4
 8016118:	1a9b      	subs	r3, r3, r2
 801611a:	009b      	lsls	r3, r3, #2
 801611c:	585b      	ldr	r3, [r3, r1]
 801611e:	2180      	movs	r1, #128	@ 0x80
 8016120:	0018      	movs	r0, r3
 8016122:	f7ff fd31 	bl	8015b88 <LL_UCPD_SetRpResistor>
      break;
 8016126:	e01e      	b.n	8016166 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8016128:	1dfb      	adds	r3, r7, #7
 801612a:	781a      	ldrb	r2, [r3, #0]
 801612c:	4941      	ldr	r1, [pc, #260]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 801612e:	0013      	movs	r3, r2
 8016130:	011b      	lsls	r3, r3, #4
 8016132:	1a9b      	subs	r3, r3, r2
 8016134:	009b      	lsls	r3, r3, #2
 8016136:	585b      	ldr	r3, [r3, r1]
 8016138:	2280      	movs	r2, #128	@ 0x80
 801613a:	0052      	lsls	r2, r2, #1
 801613c:	0011      	movs	r1, r2
 801613e:	0018      	movs	r0, r3
 8016140:	f7ff fd22 	bl	8015b88 <LL_UCPD_SetRpResistor>
      break;
 8016144:	e00f      	b.n	8016166 <USBPDM1_AssertRp+0x96>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8016146:	1dfb      	adds	r3, r7, #7
 8016148:	781a      	ldrb	r2, [r3, #0]
 801614a:	493a      	ldr	r1, [pc, #232]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 801614c:	0013      	movs	r3, r2
 801614e:	011b      	lsls	r3, r3, #4
 8016150:	1a9b      	subs	r3, r3, r2
 8016152:	009b      	lsls	r3, r3, #2
 8016154:	585b      	ldr	r3, [r3, r1]
 8016156:	22c0      	movs	r2, #192	@ 0xc0
 8016158:	0052      	lsls	r2, r2, #1
 801615a:	0011      	movs	r1, r2
 801615c:	0018      	movs	r0, r3
 801615e:	f7ff fd13 	bl	8015b88 <LL_UCPD_SetRpResistor>
      break;
 8016162:	e000      	b.n	8016166 <USBPDM1_AssertRp+0x96>
      break;
 8016164:	46c0      	nop			@ (mov r8, r8)
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8016166:	1dfb      	adds	r3, r7, #7
 8016168:	781a      	ldrb	r2, [r3, #0]
 801616a:	4932      	ldr	r1, [pc, #200]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 801616c:	0013      	movs	r3, r2
 801616e:	011b      	lsls	r3, r3, #4
 8016170:	1a9b      	subs	r3, r3, r2
 8016172:	009b      	lsls	r3, r3, #2
 8016174:	585b      	ldr	r3, [r3, r1]
 8016176:	2100      	movs	r1, #0
 8016178:	0018      	movs	r0, r3
 801617a:	f7ff fcd1 	bl	8015b20 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 801617e:	1dfb      	adds	r3, r7, #7
 8016180:	781a      	ldrb	r2, [r3, #0]
 8016182:	492c      	ldr	r1, [pc, #176]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 8016184:	0013      	movs	r3, r2
 8016186:	011b      	lsls	r3, r3, #4
 8016188:	1a9b      	subs	r3, r3, r2
 801618a:	009b      	lsls	r3, r3, #2
 801618c:	585b      	ldr	r3, [r3, r1]
 801618e:	0018      	movs	r0, r3
 8016190:	f7ff fcea 	bl	8015b68 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8016194:	1dfb      	adds	r3, r7, #7
 8016196:	781a      	ldrb	r2, [r3, #0]
 8016198:	4926      	ldr	r1, [pc, #152]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 801619a:	0013      	movs	r3, r2
 801619c:	011b      	lsls	r3, r3, #4
 801619e:	1a9b      	subs	r3, r3, r2
 80161a0:	009b      	lsls	r3, r3, #2
 80161a2:	18cb      	adds	r3, r1, r3
 80161a4:	3334      	adds	r3, #52	@ 0x34
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d10e      	bne.n	80161ca <USBPDM1_AssertRp+0xfa>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80161ac:	1dfb      	adds	r3, r7, #7
 80161ae:	781a      	ldrb	r2, [r3, #0]
 80161b0:	4920      	ldr	r1, [pc, #128]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 80161b2:	0013      	movs	r3, r2
 80161b4:	011b      	lsls	r3, r3, #4
 80161b6:	1a9b      	subs	r3, r3, r2
 80161b8:	009b      	lsls	r3, r3, #2
 80161ba:	585b      	ldr	r3, [r3, r1]
 80161bc:	22c0      	movs	r2, #192	@ 0xc0
 80161be:	0112      	lsls	r2, r2, #4
 80161c0:	0011      	movs	r1, r2
 80161c2:	0018      	movs	r0, r3
 80161c4:	f7ff fcac 	bl	8015b20 <LL_UCPD_SetccEnable>
 80161c8:	e01b      	b.n	8016202 <USBPDM1_AssertRp+0x132>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80161ca:	1dfb      	adds	r3, r7, #7
 80161cc:	781a      	ldrb	r2, [r3, #0]
 80161ce:	4919      	ldr	r1, [pc, #100]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 80161d0:	0013      	movs	r3, r2
 80161d2:	011b      	lsls	r3, r3, #4
 80161d4:	1a9b      	subs	r3, r3, r2
 80161d6:	009b      	lsls	r3, r3, #2
 80161d8:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 80161da:	1dfb      	adds	r3, r7, #7
 80161dc:	781a      	ldrb	r2, [r3, #0]
 80161de:	4915      	ldr	r1, [pc, #84]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 80161e0:	0013      	movs	r3, r2
 80161e2:	011b      	lsls	r3, r3, #4
 80161e4:	1a9b      	subs	r3, r3, r2
 80161e6:	009b      	lsls	r3, r3, #2
 80161e8:	18cb      	adds	r3, r1, r3
 80161ea:	3334      	adds	r3, #52	@ 0x34
 80161ec:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80161ee:	2b01      	cmp	r3, #1
 80161f0:	d102      	bne.n	80161f8 <USBPDM1_AssertRp+0x128>
 80161f2:	2380      	movs	r3, #128	@ 0x80
 80161f4:	00db      	lsls	r3, r3, #3
 80161f6:	e001      	b.n	80161fc <USBPDM1_AssertRp+0x12c>
 80161f8:	2380      	movs	r3, #128	@ 0x80
 80161fa:	011b      	lsls	r3, r3, #4
 80161fc:	0019      	movs	r1, r3
 80161fe:	f7ff fc8f 	bl	8015b20 <LL_UCPD_SetccEnable>
  }
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 8016202:	4b0d      	ldr	r3, [pc, #52]	@ (8016238 <USBPDM1_AssertRp+0x168>)
 8016204:	6819      	ldr	r1, [r3, #0]
 8016206:	1dfb      	adds	r3, r7, #7
 8016208:	781a      	ldrb	r2, [r3, #0]
 801620a:	480a      	ldr	r0, [pc, #40]	@ (8016234 <USBPDM1_AssertRp+0x164>)
 801620c:	0013      	movs	r3, r2
 801620e:	011b      	lsls	r3, r3, #4
 8016210:	1a9b      	subs	r3, r3, r2
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	581b      	ldr	r3, [r3, r0]
 8016216:	4a09      	ldr	r2, [pc, #36]	@ (801623c <USBPDM1_AssertRp+0x16c>)
 8016218:	4293      	cmp	r3, r2
 801621a:	d102      	bne.n	8016222 <USBPDM1_AssertRp+0x152>
 801621c:	2380      	movs	r3, #128	@ 0x80
 801621e:	009b      	lsls	r3, r3, #2
 8016220:	e001      	b.n	8016226 <USBPDM1_AssertRp+0x156>
 8016222:	2380      	movs	r3, #128	@ 0x80
 8016224:	00db      	lsls	r3, r3, #3
 8016226:	4a04      	ldr	r2, [pc, #16]	@ (8016238 <USBPDM1_AssertRp+0x168>)
 8016228:	430b      	orrs	r3, r1
 801622a:	6013      	str	r3, [r2, #0]

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
#endif /* TCPP0203_SUPPORT */
}
 801622c:	46c0      	nop			@ (mov r8, r8)
 801622e:	46bd      	mov	sp, r7
 8016230:	b002      	add	sp, #8
 8016232:	bd80      	pop	{r7, pc}
 8016234:	20011624 	.word	0x20011624
 8016238:	40010000 	.word	0x40010000
 801623c:	4000a000 	.word	0x4000a000

08016240 <USBPDM1_DeAssertRp>:

void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
 8016246:	0002      	movs	r2, r0
 8016248:	1dfb      	adds	r3, r7, #7
 801624a:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 801624c:	46c0      	nop			@ (mov r8, r8)
 801624e:	46bd      	mov	sp, r7
 8016250:	b002      	add	sp, #8
 8016252:	bd80      	pop	{r7, pc}

08016254 <USBPDM1_AssertRd>:

void USBPDM1_AssertRd(uint8_t PortNum)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b082      	sub	sp, #8
 8016258:	af00      	add	r7, sp, #0
 801625a:	0002      	movs	r2, r0
 801625c:	1dfb      	adds	r3, r7, #7
 801625e:	701a      	strb	r2, [r3, #0]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 8016260:	1dfb      	adds	r3, r7, #7
 8016262:	781a      	ldrb	r2, [r3, #0]
 8016264:	494b      	ldr	r1, [pc, #300]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 8016266:	0013      	movs	r3, r2
 8016268:	011b      	lsls	r3, r3, #4
 801626a:	1a9b      	subs	r3, r3, r2
 801626c:	009b      	lsls	r3, r3, #2
 801626e:	585b      	ldr	r3, [r3, r1]
 8016270:	0018      	movs	r0, r3
 8016272:	f7ff fbf7 	bl	8015a64 <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 8016276:	1dfb      	adds	r3, r7, #7
 8016278:	781a      	ldrb	r2, [r3, #0]
 801627a:	4946      	ldr	r1, [pc, #280]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 801627c:	0013      	movs	r3, r2
 801627e:	011b      	lsls	r3, r3, #4
 8016280:	1a9b      	subs	r3, r3, r2
 8016282:	009b      	lsls	r3, r3, #2
 8016284:	585b      	ldr	r3, [r3, r1]
 8016286:	0018      	movs	r0, r3
 8016288:	f7ff fc0c 	bl	8015aa4 <LL_UCPD_TypeCDetectionCC1Disable>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 801628c:	2001      	movs	r0, #1
 801628e:	f7ff fba5 	bl	80159dc <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 8016292:	1dfb      	adds	r3, r7, #7
 8016294:	781a      	ldrb	r2, [r3, #0]
 8016296:	493f      	ldr	r1, [pc, #252]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 8016298:	0013      	movs	r3, r2
 801629a:	011b      	lsls	r3, r3, #4
 801629c:	1a9b      	subs	r3, r3, r2
 801629e:	009b      	lsls	r3, r3, #2
 80162a0:	585b      	ldr	r3, [r3, r1]
 80162a2:	2100      	movs	r1, #0
 80162a4:	0018      	movs	r0, r3
 80162a6:	f7ff fc3b 	bl	8015b20 <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 80162aa:	1dfb      	adds	r3, r7, #7
 80162ac:	781a      	ldrb	r2, [r3, #0]
 80162ae:	4939      	ldr	r1, [pc, #228]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 80162b0:	0013      	movs	r3, r2
 80162b2:	011b      	lsls	r3, r3, #4
 80162b4:	1a9b      	subs	r3, r3, r2
 80162b6:	009b      	lsls	r3, r3, #2
 80162b8:	585b      	ldr	r3, [r3, r1]
 80162ba:	0018      	movs	r0, r3
 80162bc:	f7ff fc44 	bl	8015b48 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 80162c0:	1dfb      	adds	r3, r7, #7
 80162c2:	781a      	ldrb	r2, [r3, #0]
 80162c4:	4933      	ldr	r1, [pc, #204]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 80162c6:	0013      	movs	r3, r2
 80162c8:	011b      	lsls	r3, r3, #4
 80162ca:	1a9b      	subs	r3, r3, r2
 80162cc:	009b      	lsls	r3, r3, #2
 80162ce:	18cb      	adds	r3, r1, r3
 80162d0:	3334      	adds	r3, #52	@ 0x34
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d10e      	bne.n	80162f6 <USBPDM1_AssertRd+0xa2>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 80162d8:	1dfb      	adds	r3, r7, #7
 80162da:	781a      	ldrb	r2, [r3, #0]
 80162dc:	492d      	ldr	r1, [pc, #180]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 80162de:	0013      	movs	r3, r2
 80162e0:	011b      	lsls	r3, r3, #4
 80162e2:	1a9b      	subs	r3, r3, r2
 80162e4:	009b      	lsls	r3, r3, #2
 80162e6:	585b      	ldr	r3, [r3, r1]
 80162e8:	22c0      	movs	r2, #192	@ 0xc0
 80162ea:	0112      	lsls	r2, r2, #4
 80162ec:	0011      	movs	r1, r2
 80162ee:	0018      	movs	r0, r3
 80162f0:	f7ff fc16 	bl	8015b20 <LL_UCPD_SetccEnable>
 80162f4:	e01b      	b.n	801632e <USBPDM1_AssertRd+0xda>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 80162f6:	1dfb      	adds	r3, r7, #7
 80162f8:	781a      	ldrb	r2, [r3, #0]
 80162fa:	4926      	ldr	r1, [pc, #152]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 80162fc:	0013      	movs	r3, r2
 80162fe:	011b      	lsls	r3, r3, #4
 8016300:	1a9b      	subs	r3, r3, r2
 8016302:	009b      	lsls	r3, r3, #2
 8016304:	5858      	ldr	r0, [r3, r1]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8016306:	1dfb      	adds	r3, r7, #7
 8016308:	781a      	ldrb	r2, [r3, #0]
 801630a:	4922      	ldr	r1, [pc, #136]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 801630c:	0013      	movs	r3, r2
 801630e:	011b      	lsls	r3, r3, #4
 8016310:	1a9b      	subs	r3, r3, r2
 8016312:	009b      	lsls	r3, r3, #2
 8016314:	18cb      	adds	r3, r1, r3
 8016316:	3334      	adds	r3, #52	@ 0x34
 8016318:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 801631a:	2b01      	cmp	r3, #1
 801631c:	d102      	bne.n	8016324 <USBPDM1_AssertRd+0xd0>
 801631e:	2380      	movs	r3, #128	@ 0x80
 8016320:	00db      	lsls	r3, r3, #3
 8016322:	e001      	b.n	8016328 <USBPDM1_AssertRd+0xd4>
 8016324:	2380      	movs	r3, #128	@ 0x80
 8016326:	011b      	lsls	r3, r3, #4
 8016328:	0019      	movs	r1, r3
 801632a:	f7ff fbf9 	bl	8015b20 <LL_UCPD_SetccEnable>
  }

  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 801632e:	4b1a      	ldr	r3, [pc, #104]	@ (8016398 <USBPDM1_AssertRd+0x144>)
 8016330:	6819      	ldr	r1, [r3, #0]
 8016332:	1dfb      	adds	r3, r7, #7
 8016334:	781a      	ldrb	r2, [r3, #0]
 8016336:	4817      	ldr	r0, [pc, #92]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 8016338:	0013      	movs	r3, r2
 801633a:	011b      	lsls	r3, r3, #4
 801633c:	1a9b      	subs	r3, r3, r2
 801633e:	009b      	lsls	r3, r3, #2
 8016340:	581b      	ldr	r3, [r3, r0]
 8016342:	4a16      	ldr	r2, [pc, #88]	@ (801639c <USBPDM1_AssertRd+0x148>)
 8016344:	4293      	cmp	r3, r2
 8016346:	d102      	bne.n	801634e <USBPDM1_AssertRd+0xfa>
 8016348:	2380      	movs	r3, #128	@ 0x80
 801634a:	009b      	lsls	r3, r3, #2
 801634c:	e001      	b.n	8016352 <USBPDM1_AssertRd+0xfe>
 801634e:	2380      	movs	r3, #128	@ 0x80
 8016350:	00db      	lsls	r3, r3, #3
 8016352:	4a11      	ldr	r2, [pc, #68]	@ (8016398 <USBPDM1_AssertRd+0x144>)
 8016354:	430b      	orrs	r3, r1
 8016356:	6013      	str	r3, [r2, #0]
  HAL_Delay(1);
 8016358:	2001      	movs	r0, #1
 801635a:	f7f1 ffcd 	bl	80082f8 <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 801635e:	1dfb      	adds	r3, r7, #7
 8016360:	781a      	ldrb	r2, [r3, #0]
 8016362:	490c      	ldr	r1, [pc, #48]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 8016364:	0013      	movs	r3, r2
 8016366:	011b      	lsls	r3, r3, #4
 8016368:	1a9b      	subs	r3, r3, r2
 801636a:	009b      	lsls	r3, r3, #2
 801636c:	585b      	ldr	r3, [r3, r1]
 801636e:	0018      	movs	r0, r3
 8016370:	f7ff fb68 	bl	8015a44 <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8016374:	1dfb      	adds	r3, r7, #7
 8016376:	781a      	ldrb	r2, [r3, #0]
 8016378:	4906      	ldr	r1, [pc, #24]	@ (8016394 <USBPDM1_AssertRd+0x140>)
 801637a:	0013      	movs	r3, r2
 801637c:	011b      	lsls	r3, r3, #4
 801637e:	1a9b      	subs	r3, r3, r2
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	585b      	ldr	r3, [r3, r1]
 8016384:	0018      	movs	r0, r3
 8016386:	f7ff fb7d 	bl	8015a84 <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
#endif /* TCPP0203_SUPPORT */
}
 801638a:	46c0      	nop			@ (mov r8, r8)
 801638c:	46bd      	mov	sp, r7
 801638e:	b002      	add	sp, #8
 8016390:	bd80      	pop	{r7, pc}
 8016392:	46c0      	nop			@ (mov r8, r8)
 8016394:	20011624 	.word	0x20011624
 8016398:	40010000 	.word	0x40010000
 801639c:	4000a000 	.word	0x4000a000

080163a0 <USBPDM1_DeAssertRd>:

void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 80163a0:	b580      	push	{r7, lr}
 80163a2:	b082      	sub	sp, #8
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	0002      	movs	r2, r0
 80163a8:	1dfb      	adds	r3, r7, #7
 80163aa:	701a      	strb	r2, [r3, #0]
  /* not needed on STM32G0xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 80163ac:	46c0      	nop			@ (mov r8, r8)
 80163ae:	46bd      	mov	sp, r7
 80163b0:	b002      	add	sp, #8
 80163b2:	bd80      	pop	{r7, pc}

080163b4 <USBPDM1_EnterErrorRecovery>:

void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	0002      	movs	r2, r0
 80163bc:	1dfb      	adds	r3, r7, #7
 80163be:	701a      	strb	r2, [r3, #0]
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80163c0:	2001      	movs	r0, #1
 80163c2:	f7ff fb0b 	bl	80159dc <LL_APB2_GRP1_EnableClock>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80163c6:	1dfb      	adds	r3, r7, #7
 80163c8:	781a      	ldrb	r2, [r3, #0]
 80163ca:	4930      	ldr	r1, [pc, #192]	@ (801648c <USBPDM1_EnterErrorRecovery+0xd8>)
 80163cc:	0013      	movs	r3, r2
 80163ce:	011b      	lsls	r3, r3, #4
 80163d0:	1a9b      	subs	r3, r3, r2
 80163d2:	009b      	lsls	r3, r3, #2
 80163d4:	585b      	ldr	r3, [r3, r1]
 80163d6:	0018      	movs	r0, r3
 80163d8:	f7ff fbc6 	bl	8015b68 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 80163dc:	1dfb      	adds	r3, r7, #7
 80163de:	781a      	ldrb	r2, [r3, #0]
 80163e0:	492a      	ldr	r1, [pc, #168]	@ (801648c <USBPDM1_EnterErrorRecovery+0xd8>)
 80163e2:	0013      	movs	r3, r2
 80163e4:	011b      	lsls	r3, r3, #4
 80163e6:	1a9b      	subs	r3, r3, r2
 80163e8:	009b      	lsls	r3, r3, #2
 80163ea:	585b      	ldr	r3, [r3, r1]
 80163ec:	2100      	movs	r1, #0
 80163ee:	0018      	movs	r0, r3
 80163f0:	f7ff fbca 	bl	8015b88 <LL_UCPD_SetRpResistor>
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80163f4:	1dfb      	adds	r3, r7, #7
 80163f6:	781a      	ldrb	r2, [r3, #0]
 80163f8:	4924      	ldr	r1, [pc, #144]	@ (801648c <USBPDM1_EnterErrorRecovery+0xd8>)
 80163fa:	0013      	movs	r3, r2
 80163fc:	011b      	lsls	r3, r3, #4
 80163fe:	1a9b      	subs	r3, r3, r2
 8016400:	009b      	lsls	r3, r3, #2
 8016402:	585b      	ldr	r3, [r3, r1]
 8016404:	2100      	movs	r1, #0
 8016406:	0018      	movs	r0, r3
 8016408:	f7ff fb8a 	bl	8015b20 <LL_UCPD_SetccEnable>
  SET_BIT(SYSCFG->CFGR1, (Ports[PortNum].husbpd == UCPD1) ? SYSCFG_CFGR1_UCPD1_STROBE : SYSCFG_CFGR1_UCPD2_STROBE);
 801640c:	4b20      	ldr	r3, [pc, #128]	@ (8016490 <USBPDM1_EnterErrorRecovery+0xdc>)
 801640e:	6819      	ldr	r1, [r3, #0]
 8016410:	1dfb      	adds	r3, r7, #7
 8016412:	781a      	ldrb	r2, [r3, #0]
 8016414:	481d      	ldr	r0, [pc, #116]	@ (801648c <USBPDM1_EnterErrorRecovery+0xd8>)
 8016416:	0013      	movs	r3, r2
 8016418:	011b      	lsls	r3, r3, #4
 801641a:	1a9b      	subs	r3, r3, r2
 801641c:	009b      	lsls	r3, r3, #2
 801641e:	581b      	ldr	r3, [r3, r0]
 8016420:	4a1c      	ldr	r2, [pc, #112]	@ (8016494 <USBPDM1_EnterErrorRecovery+0xe0>)
 8016422:	4293      	cmp	r3, r2
 8016424:	d102      	bne.n	801642c <USBPDM1_EnterErrorRecovery+0x78>
 8016426:	2380      	movs	r3, #128	@ 0x80
 8016428:	009b      	lsls	r3, r3, #2
 801642a:	e001      	b.n	8016430 <USBPDM1_EnterErrorRecovery+0x7c>
 801642c:	2380      	movs	r3, #128	@ 0x80
 801642e:	00db      	lsls	r3, r3, #3
 8016430:	4a17      	ldr	r2, [pc, #92]	@ (8016490 <USBPDM1_EnterErrorRecovery+0xdc>)
 8016432:	430b      	orrs	r3, r1
 8016434:	6013      	str	r3, [r2, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8016436:	1dfb      	adds	r3, r7, #7
 8016438:	781a      	ldrb	r2, [r3, #0]
 801643a:	4914      	ldr	r1, [pc, #80]	@ (801648c <USBPDM1_EnterErrorRecovery+0xd8>)
 801643c:	0013      	movs	r3, r2
 801643e:	011b      	lsls	r3, r3, #4
 8016440:	1a9b      	subs	r3, r3, r2
 8016442:	009b      	lsls	r3, r3, #2
 8016444:	585b      	ldr	r3, [r3, r1]
 8016446:	0018      	movs	r0, r3
 8016448:	f7ff fbd2 	bl	8015bf0 <LL_UCPD_RxDisable>

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801644c:	1dfb      	adds	r3, r7, #7
 801644e:	781a      	ldrb	r2, [r3, #0]
 8016450:	490e      	ldr	r1, [pc, #56]	@ (801648c <USBPDM1_EnterErrorRecovery+0xd8>)
 8016452:	0013      	movs	r3, r2
 8016454:	011b      	lsls	r3, r3, #4
 8016456:	1a9b      	subs	r3, r3, r2
 8016458:	009b      	lsls	r3, r3, #2
 801645a:	18cb      	adds	r3, r1, r3
 801645c:	330c      	adds	r3, #12
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	7a1b      	ldrb	r3, [r3, #8]
 8016462:	2202      	movs	r2, #2
 8016464:	4013      	ands	r3, r2
 8016466:	b2db      	uxtb	r3, r3
 8016468:	2b00      	cmp	r3, #0
 801646a:	d00a      	beq.n	8016482 <USBPDM1_EnterErrorRecovery+0xce>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 801646c:	1dfb      	adds	r3, r7, #7
 801646e:	781a      	ldrb	r2, [r3, #0]
 8016470:	4906      	ldr	r1, [pc, #24]	@ (801648c <USBPDM1_EnterErrorRecovery+0xd8>)
 8016472:	0013      	movs	r3, r2
 8016474:	011b      	lsls	r3, r3, #4
 8016476:	1a9b      	subs	r3, r3, r2
 8016478:	009b      	lsls	r3, r3, #2
 801647a:	585b      	ldr	r3, [r3, r1]
 801647c:	0018      	movs	r0, r3
 801647e:	f7ff fb3f 	bl	8015b00 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */
}
 8016482:	46c0      	nop			@ (mov r8, r8)
 8016484:	46bd      	mov	sp, r7
 8016486:	b002      	add	sp, #8
 8016488:	bd80      	pop	{r7, pc}
 801648a:	46c0      	nop			@ (mov r8, r8)
 801648c:	20011624 	.word	0x20011624
 8016490:	40010000 	.word	0x40010000
 8016494:	4000a000 	.word	0x4000a000

08016498 <USBPD_HW_IF_EnableRX>:
             UCPD_IMR_RXORDDETIE | UCPD_IMR_RXHRSTDETIE | UCPD_IMR_RXOVRIE | UCPD_IMR_RXMSGENDIE);
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
}

void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b082      	sub	sp, #8
 801649c:	af00      	add	r7, sp, #0
 801649e:	0002      	movs	r2, r0
 80164a0:	1dfb      	adds	r3, r7, #7
 80164a2:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 80164a4:	1dfb      	adds	r3, r7, #7
 80164a6:	781a      	ldrb	r2, [r3, #0]
 80164a8:	4906      	ldr	r1, [pc, #24]	@ (80164c4 <USBPD_HW_IF_EnableRX+0x2c>)
 80164aa:	0013      	movs	r3, r2
 80164ac:	011b      	lsls	r3, r3, #4
 80164ae:	1a9b      	subs	r3, r3, r2
 80164b0:	009b      	lsls	r3, r3, #2
 80164b2:	585b      	ldr	r3, [r3, r1]
 80164b4:	0018      	movs	r0, r3
 80164b6:	f7ff fb8d 	bl	8015bd4 <LL_UCPD_RxEnable>
}
 80164ba:	46c0      	nop			@ (mov r8, r8)
 80164bc:	46bd      	mov	sp, r7
 80164be:	b002      	add	sp, #8
 80164c0:	bd80      	pop	{r7, pc}
 80164c2:	46c0      	nop			@ (mov r8, r8)
 80164c4:	20011624 	.word	0x20011624

080164c8 <USBPD_HW_IF_DisableRX>:

void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b082      	sub	sp, #8
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	0002      	movs	r2, r0
 80164d0:	1dfb      	adds	r3, r7, #7
 80164d2:	701a      	strb	r2, [r3, #0]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80164d4:	1dfb      	adds	r3, r7, #7
 80164d6:	781a      	ldrb	r2, [r3, #0]
 80164d8:	4906      	ldr	r1, [pc, #24]	@ (80164f4 <USBPD_HW_IF_DisableRX+0x2c>)
 80164da:	0013      	movs	r3, r2
 80164dc:	011b      	lsls	r3, r3, #4
 80164de:	1a9b      	subs	r3, r3, r2
 80164e0:	009b      	lsls	r3, r3, #2
 80164e2:	585b      	ldr	r3, [r3, r1]
 80164e4:	0018      	movs	r0, r3
 80164e6:	f7ff fb83 	bl	8015bf0 <LL_UCPD_RxDisable>
}
 80164ea:	46c0      	nop			@ (mov r8, r8)
 80164ec:	46bd      	mov	sp, r7
 80164ee:	b002      	add	sp, #8
 80164f0:	bd80      	pop	{r7, pc}
 80164f2:	46c0      	nop			@ (mov r8, r8)
 80164f4:	20011624 	.word	0x20011624

080164f8 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 80164f8:	b590      	push	{r4, r7, lr}
 80164fa:	b085      	sub	sp, #20
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	0002      	movs	r2, r0
 8016500:	6039      	str	r1, [r7, #0]
 8016502:	1dfb      	adds	r3, r7, #7
 8016504:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 8016506:	f000 fc51 	bl	8016dac <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 801650a:	1dfb      	adds	r3, r7, #7
 801650c:	781c      	ldrb	r4, [r3, #0]
 801650e:	1dfb      	adds	r3, r7, #7
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	0018      	movs	r0, r3
 8016514:	f7fe fd02 	bl	8014f1c <USBPD_HW_Init_DMATxInstance>
 8016518:	0001      	movs	r1, r0
 801651a:	4aa6      	ldr	r2, [pc, #664]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801651c:	0023      	movs	r3, r4
 801651e:	011b      	lsls	r3, r3, #4
 8016520:	1b1b      	subs	r3, r3, r4
 8016522:	009b      	lsls	r3, r3, #2
 8016524:	18d3      	adds	r3, r2, r3
 8016526:	3304      	adds	r3, #4
 8016528:	6019      	str	r1, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 801652a:	1dfb      	adds	r3, r7, #7
 801652c:	781c      	ldrb	r4, [r3, #0]
 801652e:	1dfb      	adds	r3, r7, #7
 8016530:	781b      	ldrb	r3, [r3, #0]
 8016532:	0018      	movs	r0, r3
 8016534:	f7fe fc88 	bl	8014e48 <USBPD_HW_Init_DMARxInstance>
 8016538:	0001      	movs	r1, r0
 801653a:	4a9e      	ldr	r2, [pc, #632]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801653c:	0023      	movs	r3, r4
 801653e:	011b      	lsls	r3, r3, #4
 8016540:	1b1b      	subs	r3, r3, r4
 8016542:	009b      	lsls	r3, r3, #2
 8016544:	18d3      	adds	r3, r2, r3
 8016546:	3308      	adds	r3, #8
 8016548:	6019      	str	r1, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 801654a:	1dfb      	adds	r3, r7, #7
 801654c:	781a      	ldrb	r2, [r3, #0]
 801654e:	4999      	ldr	r1, [pc, #612]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016550:	0013      	movs	r3, r2
 8016552:	011b      	lsls	r3, r3, #4
 8016554:	1a9b      	subs	r3, r3, r2
 8016556:	009b      	lsls	r3, r3, #2
 8016558:	585b      	ldr	r3, [r3, r1]
 801655a:	3330      	adds	r3, #48	@ 0x30
 801655c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 801655e:	1dfb      	adds	r3, r7, #7
 8016560:	781a      	ldrb	r2, [r3, #0]
 8016562:	4994      	ldr	r1, [pc, #592]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016564:	0013      	movs	r3, r2
 8016566:	011b      	lsls	r3, r3, #4
 8016568:	1a9b      	subs	r3, r3, r2
 801656a:	009b      	lsls	r3, r3, #2
 801656c:	18cb      	adds	r3, r1, r3
 801656e:	3308      	adds	r3, #8
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	68fa      	ldr	r2, [r7, #12]
 8016574:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8016576:	1dfb      	adds	r3, r7, #7
 8016578:	781a      	ldrb	r2, [r3, #0]
 801657a:	498e      	ldr	r1, [pc, #568]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801657c:	0013      	movs	r3, r2
 801657e:	011b      	lsls	r3, r3, #4
 8016580:	1a9b      	subs	r3, r3, r2
 8016582:	009b      	lsls	r3, r3, #2
 8016584:	18cb      	adds	r3, r1, r3
 8016586:	3330      	adds	r3, #48	@ 0x30
 8016588:	6818      	ldr	r0, [r3, #0]
 801658a:	1dfb      	adds	r3, r7, #7
 801658c:	781a      	ldrb	r2, [r3, #0]
 801658e:	4989      	ldr	r1, [pc, #548]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016590:	0013      	movs	r3, r2
 8016592:	011b      	lsls	r3, r3, #4
 8016594:	1a9b      	subs	r3, r3, r2
 8016596:	009b      	lsls	r3, r3, #2
 8016598:	18cb      	adds	r3, r1, r3
 801659a:	3308      	adds	r3, #8
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	0002      	movs	r2, r0
 80165a0:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 80165a2:	1dfb      	adds	r3, r7, #7
 80165a4:	781a      	ldrb	r2, [r3, #0]
 80165a6:	4983      	ldr	r1, [pc, #524]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 80165a8:	0013      	movs	r3, r2
 80165aa:	011b      	lsls	r3, r3, #4
 80165ac:	1a9b      	subs	r3, r3, r2
 80165ae:	009b      	lsls	r3, r3, #2
 80165b0:	18cb      	adds	r3, r1, r3
 80165b2:	3308      	adds	r3, #8
 80165b4:	681b      	ldr	r3, [r3, #0]
 80165b6:	2284      	movs	r2, #132	@ 0x84
 80165b8:	0052      	lsls	r2, r2, #1
 80165ba:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 80165bc:	1dfb      	adds	r3, r7, #7
 80165be:	781a      	ldrb	r2, [r3, #0]
 80165c0:	497c      	ldr	r1, [pc, #496]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 80165c2:	0013      	movs	r3, r2
 80165c4:	011b      	lsls	r3, r3, #4
 80165c6:	1a9b      	subs	r3, r3, r2
 80165c8:	009b      	lsls	r3, r3, #2
 80165ca:	18cb      	adds	r3, r1, r3
 80165cc:	3308      	adds	r3, #8
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	6819      	ldr	r1, [r3, #0]
 80165d2:	1dfb      	adds	r3, r7, #7
 80165d4:	781a      	ldrb	r2, [r3, #0]
 80165d6:	4877      	ldr	r0, [pc, #476]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 80165d8:	0013      	movs	r3, r2
 80165da:	011b      	lsls	r3, r3, #4
 80165dc:	1a9b      	subs	r3, r3, r2
 80165de:	009b      	lsls	r3, r3, #2
 80165e0:	18c3      	adds	r3, r0, r3
 80165e2:	3308      	adds	r3, #8
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	2201      	movs	r2, #1
 80165e8:	430a      	orrs	r2, r1
 80165ea:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 80165ec:	1dfb      	adds	r3, r7, #7
 80165ee:	781a      	ldrb	r2, [r3, #0]
 80165f0:	4970      	ldr	r1, [pc, #448]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 80165f2:	0013      	movs	r3, r2
 80165f4:	011b      	lsls	r3, r3, #4
 80165f6:	1a9b      	subs	r3, r3, r2
 80165f8:	009b      	lsls	r3, r3, #2
 80165fa:	585b      	ldr	r3, [r3, r1]
 80165fc:	3324      	adds	r3, #36	@ 0x24
 80165fe:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8016600:	1dfb      	adds	r3, r7, #7
 8016602:	781a      	ldrb	r2, [r3, #0]
 8016604:	496b      	ldr	r1, [pc, #428]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016606:	0013      	movs	r3, r2
 8016608:	011b      	lsls	r3, r3, #4
 801660a:	1a9b      	subs	r3, r3, r2
 801660c:	009b      	lsls	r3, r3, #2
 801660e:	18cb      	adds	r3, r1, r3
 8016610:	3304      	adds	r3, #4
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	68fa      	ldr	r2, [r7, #12]
 8016616:	609a      	str	r2, [r3, #8]
  /* disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8016618:	1dfb      	adds	r3, r7, #7
 801661a:	781a      	ldrb	r2, [r3, #0]
 801661c:	4965      	ldr	r1, [pc, #404]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801661e:	0013      	movs	r3, r2
 8016620:	011b      	lsls	r3, r3, #4
 8016622:	1a9b      	subs	r3, r3, r2
 8016624:	009b      	lsls	r3, r3, #2
 8016626:	585b      	ldr	r3, [r3, r1]
 8016628:	6919      	ldr	r1, [r3, #16]
 801662a:	1dfb      	adds	r3, r7, #7
 801662c:	781a      	ldrb	r2, [r3, #0]
 801662e:	4861      	ldr	r0, [pc, #388]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016630:	0013      	movs	r3, r2
 8016632:	011b      	lsls	r3, r3, #4
 8016634:	1a9b      	subs	r3, r3, r2
 8016636:	009b      	lsls	r3, r3, #2
 8016638:	581b      	ldr	r3, [r3, r0]
 801663a:	4a5f      	ldr	r2, [pc, #380]	@ (80167b8 <HW_SignalAttachement+0x2c0>)
 801663c:	430a      	orrs	r2, r1
 801663e:	611a      	str	r2, [r3, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8016640:	1dfb      	adds	r3, r7, #7
 8016642:	781a      	ldrb	r2, [r3, #0]
 8016644:	495b      	ldr	r1, [pc, #364]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016646:	0013      	movs	r3, r2
 8016648:	011b      	lsls	r3, r3, #4
 801664a:	1a9b      	subs	r3, r3, r2
 801664c:	009b      	lsls	r3, r3, #2
 801664e:	18cb      	adds	r3, r1, r3
 8016650:	3334      	adds	r3, #52	@ 0x34
 8016652:	683a      	ldr	r2, [r7, #0]
 8016654:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8016656:	1dfb      	adds	r3, r7, #7
 8016658:	781a      	ldrb	r2, [r3, #0]
 801665a:	4956      	ldr	r1, [pc, #344]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801665c:	0013      	movs	r3, r2
 801665e:	011b      	lsls	r3, r3, #4
 8016660:	1a9b      	subs	r3, r3, r2
 8016662:	009b      	lsls	r3, r3, #2
 8016664:	5858      	ldr	r0, [r3, r1]
 8016666:	1dfb      	adds	r3, r7, #7
 8016668:	781a      	ldrb	r2, [r3, #0]
 801666a:	4952      	ldr	r1, [pc, #328]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801666c:	0013      	movs	r3, r2
 801666e:	011b      	lsls	r3, r3, #4
 8016670:	1a9b      	subs	r3, r3, r2
 8016672:	009b      	lsls	r3, r3, #2
 8016674:	18cb      	adds	r3, r1, r3
 8016676:	3334      	adds	r3, #52	@ 0x34
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	2b01      	cmp	r3, #1
 801667c:	d101      	bne.n	8016682 <HW_SignalAttachement+0x18a>
 801667e:	2300      	movs	r3, #0
 8016680:	e000      	b.n	8016684 <HW_SignalAttachement+0x18c>
 8016682:	2340      	movs	r3, #64	@ 0x40
 8016684:	0019      	movs	r1, r3
 8016686:	f7ff fa93 	bl	8015bb0 <LL_UCPD_SetCCPin>
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801668a:	1dfb      	adds	r3, r7, #7
 801668c:	781a      	ldrb	r2, [r3, #0]
 801668e:	4949      	ldr	r1, [pc, #292]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016690:	0013      	movs	r3, r2
 8016692:	011b      	lsls	r3, r3, #4
 8016694:	1a9b      	subs	r3, r3, r2
 8016696:	009b      	lsls	r3, r3, #2
 8016698:	18cb      	adds	r3, r1, r3
 801669a:	330c      	adds	r3, #12
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	7a1b      	ldrb	r3, [r3, #8]
 80166a0:	2202      	movs	r2, #2
 80166a2:	4013      	ands	r3, r2
 80166a4:	b2db      	uxtb	r3, r3
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d034      	beq.n	8016714 <HW_SignalAttachement+0x21c>
  {
    /* Set GPIO to allow the FRSTX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 80166aa:	1dfb      	adds	r3, r7, #7
 80166ac:	781a      	ldrb	r2, [r3, #0]
 80166ae:	4941      	ldr	r1, [pc, #260]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 80166b0:	0013      	movs	r3, r2
 80166b2:	011b      	lsls	r3, r3, #4
 80166b4:	1a9b      	subs	r3, r3, r2
 80166b6:	009b      	lsls	r3, r3, #2
 80166b8:	18cb      	adds	r3, r1, r3
 80166ba:	3334      	adds	r3, #52	@ 0x34
 80166bc:	681b      	ldr	r3, [r3, #0]
 80166be:	2b01      	cmp	r3, #1
 80166c0:	d101      	bne.n	80166c6 <HW_SignalAttachement+0x1ce>
 80166c2:	2301      	movs	r3, #1
 80166c4:	e000      	b.n	80166c8 <HW_SignalAttachement+0x1d0>
 80166c6:	2302      	movs	r3, #2
 80166c8:	1dfa      	adds	r2, r7, #7
 80166ca:	7812      	ldrb	r2, [r2, #0]
 80166cc:	0019      	movs	r1, r3
 80166ce:	0010      	movs	r0, r2
 80166d0:	f7fe fc92 	bl	8014ff8 <USBPD_HW_SetFRSSignalling>
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 80166d4:	1dfb      	adds	r3, r7, #7
 80166d6:	781a      	ldrb	r2, [r3, #0]
 80166d8:	4936      	ldr	r1, [pc, #216]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 80166da:	0013      	movs	r3, r2
 80166dc:	011b      	lsls	r3, r3, #4
 80166de:	1a9b      	subs	r3, r3, r2
 80166e0:	009b      	lsls	r3, r3, #2
 80166e2:	585b      	ldr	r3, [r3, r1]
 80166e4:	0018      	movs	r0, r3
 80166e6:	f7ff f9fb 	bl	8015ae0 <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 80166ea:	1dfb      	adds	r3, r7, #7
 80166ec:	781a      	ldrb	r2, [r3, #0]
 80166ee:	4931      	ldr	r1, [pc, #196]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 80166f0:	0013      	movs	r3, r2
 80166f2:	011b      	lsls	r3, r3, #4
 80166f4:	1a9b      	subs	r3, r3, r2
 80166f6:	009b      	lsls	r3, r3, #2
 80166f8:	585b      	ldr	r3, [r3, r1]
 80166fa:	6919      	ldr	r1, [r3, #16]
 80166fc:	1dfb      	adds	r3, r7, #7
 80166fe:	781a      	ldrb	r2, [r3, #0]
 8016700:	482c      	ldr	r0, [pc, #176]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016702:	0013      	movs	r3, r2
 8016704:	011b      	lsls	r3, r3, #4
 8016706:	1a9b      	subs	r3, r3, r2
 8016708:	009b      	lsls	r3, r3, #2
 801670a:	581b      	ldr	r3, [r3, r0]
 801670c:	2280      	movs	r2, #128	@ 0x80
 801670e:	0352      	lsls	r2, r2, #13
 8016710:	430a      	orrs	r2, r1
 8016712:	611a      	str	r2, [r3, #16]
  }
#endif /* USBPD_REV30_SUPPORT */

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8016714:	1dfb      	adds	r3, r7, #7
 8016716:	781a      	ldrb	r2, [r3, #0]
 8016718:	4926      	ldr	r1, [pc, #152]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801671a:	0013      	movs	r3, r2
 801671c:	011b      	lsls	r3, r3, #4
 801671e:	1a9b      	subs	r3, r3, r2
 8016720:	009b      	lsls	r3, r3, #2
 8016722:	18cb      	adds	r3, r1, r3
 8016724:	3334      	adds	r3, #52	@ 0x34
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	2b01      	cmp	r3, #1
 801672a:	d10e      	bne.n	801674a <HW_SignalAttachement+0x252>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 801672c:	1dfb      	adds	r3, r7, #7
 801672e:	781a      	ldrb	r2, [r3, #0]
 8016730:	4920      	ldr	r1, [pc, #128]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016732:	0013      	movs	r3, r2
 8016734:	011b      	lsls	r3, r3, #4
 8016736:	1a9b      	subs	r3, r3, r2
 8016738:	009b      	lsls	r3, r3, #2
 801673a:	585b      	ldr	r3, [r3, r1]
 801673c:	2280      	movs	r2, #128	@ 0x80
 801673e:	00d2      	lsls	r2, r2, #3
 8016740:	0011      	movs	r1, r2
 8016742:	0018      	movs	r0, r3
 8016744:	f7ff f9ec 	bl	8015b20 <LL_UCPD_SetccEnable>
 8016748:	e00d      	b.n	8016766 <HW_SignalAttachement+0x26e>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 801674a:	1dfb      	adds	r3, r7, #7
 801674c:	781a      	ldrb	r2, [r3, #0]
 801674e:	4919      	ldr	r1, [pc, #100]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016750:	0013      	movs	r3, r2
 8016752:	011b      	lsls	r3, r3, #4
 8016754:	1a9b      	subs	r3, r3, r2
 8016756:	009b      	lsls	r3, r3, #2
 8016758:	585b      	ldr	r3, [r3, r1]
 801675a:	2280      	movs	r2, #128	@ 0x80
 801675c:	0112      	lsls	r2, r2, #4
 801675e:	0011      	movs	r1, r2
 8016760:	0018      	movs	r0, r3
 8016762:	f7ff f9dd 	bl	8015b20 <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8016766:	1dfb      	adds	r3, r7, #7
 8016768:	781a      	ldrb	r2, [r3, #0]
 801676a:	4912      	ldr	r1, [pc, #72]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801676c:	0013      	movs	r3, r2
 801676e:	011b      	lsls	r3, r3, #4
 8016770:	1a9b      	subs	r3, r3, r2
 8016772:	009b      	lsls	r3, r3, #2
 8016774:	585b      	ldr	r3, [r3, r1]
 8016776:	2100      	movs	r1, #0
 8016778:	0018      	movs	r0, r3
 801677a:	f7ff fa48 	bl	8015c0e <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 801677e:	1dfb      	adds	r3, r7, #7
 8016780:	781a      	ldrb	r2, [r3, #0]
 8016782:	490c      	ldr	r1, [pc, #48]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 8016784:	0013      	movs	r3, r2
 8016786:	011b      	lsls	r3, r3, #4
 8016788:	1a9b      	subs	r3, r3, r2
 801678a:	009b      	lsls	r3, r3, #2
 801678c:	585b      	ldr	r3, [r3, r1]
 801678e:	0018      	movs	r0, r3
 8016790:	f7ff fa7d 	bl	8015c8e <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8016794:	1dfb      	adds	r3, r7, #7
 8016796:	781a      	ldrb	r2, [r3, #0]
 8016798:	4906      	ldr	r1, [pc, #24]	@ (80167b4 <HW_SignalAttachement+0x2bc>)
 801679a:	0013      	movs	r3, r2
 801679c:	011b      	lsls	r3, r3, #4
 801679e:	1a9b      	subs	r3, r3, r2
 80167a0:	009b      	lsls	r3, r3, #2
 80167a2:	585b      	ldr	r3, [r3, r1]
 80167a4:	0018      	movs	r0, r3
 80167a6:	f7ff fa91 	bl	8015ccc <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80167aa:	46c0      	nop			@ (mov r8, r8)
 80167ac:	46bd      	mov	sp, r7
 80167ae:	b005      	add	sp, #20
 80167b0:	bd90      	pop	{r4, r7, pc}
 80167b2:	46c0      	nop			@ (mov r8, r8)
 80167b4:	20011624 	.word	0x20011624
 80167b8:	00001e7e 	.word	0x00001e7e

080167bc <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b082      	sub	sp, #8
 80167c0:	af00      	add	r7, sp, #0
 80167c2:	0002      	movs	r2, r0
 80167c4:	1dfb      	adds	r3, r7, #7
 80167c6:	701a      	strb	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 80167c8:	1dfb      	adds	r3, r7, #7
 80167ca:	781a      	ldrb	r2, [r3, #0]
 80167cc:	4941      	ldr	r1, [pc, #260]	@ (80168d4 <HW_SignalDetachment+0x118>)
 80167ce:	0013      	movs	r3, r2
 80167d0:	011b      	lsls	r3, r3, #4
 80167d2:	1a9b      	subs	r3, r3, r2
 80167d4:	009b      	lsls	r3, r3, #2
 80167d6:	585b      	ldr	r3, [r3, r1]
 80167d8:	0018      	movs	r0, r3
 80167da:	f7ff fa67 	bl	8015cac <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 80167de:	1dfb      	adds	r3, r7, #7
 80167e0:	781a      	ldrb	r2, [r3, #0]
 80167e2:	493c      	ldr	r1, [pc, #240]	@ (80168d4 <HW_SignalDetachment+0x118>)
 80167e4:	0013      	movs	r3, r2
 80167e6:	011b      	lsls	r3, r3, #4
 80167e8:	1a9b      	subs	r3, r3, r2
 80167ea:	009b      	lsls	r3, r3, #2
 80167ec:	585b      	ldr	r3, [r3, r1]
 80167ee:	0018      	movs	r0, r3
 80167f0:	f7ff fa7c 	bl	8015cec <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 80167f4:	1dfb      	adds	r3, r7, #7
 80167f6:	781a      	ldrb	r2, [r3, #0]
 80167f8:	4936      	ldr	r1, [pc, #216]	@ (80168d4 <HW_SignalDetachment+0x118>)
 80167fa:	0013      	movs	r3, r2
 80167fc:	011b      	lsls	r3, r3, #4
 80167fe:	1a9b      	subs	r3, r3, r2
 8016800:	009b      	lsls	r3, r3, #2
 8016802:	585b      	ldr	r3, [r3, r1]
 8016804:	0018      	movs	r0, r3
 8016806:	f7ff f9f3 	bl	8015bf0 <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 801680a:	1dfb      	adds	r3, r7, #7
 801680c:	781a      	ldrb	r2, [r3, #0]
 801680e:	4931      	ldr	r1, [pc, #196]	@ (80168d4 <HW_SignalDetachment+0x118>)
 8016810:	0013      	movs	r3, r2
 8016812:	011b      	lsls	r3, r3, #4
 8016814:	1a9b      	subs	r3, r3, r2
 8016816:	009b      	lsls	r3, r3, #2
 8016818:	585b      	ldr	r3, [r3, r1]
 801681a:	22c0      	movs	r2, #192	@ 0xc0
 801681c:	0212      	lsls	r2, r2, #8
 801681e:	611a      	str	r2, [r3, #16]
    /* Enable detection interrupt */
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8016820:	1dfb      	adds	r3, r7, #7
 8016822:	781b      	ldrb	r3, [r3, #0]
 8016824:	0018      	movs	r0, r3
 8016826:	f7fe fbdd 	bl	8014fe4 <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 801682a:	1dfb      	adds	r3, r7, #7
 801682c:	781b      	ldrb	r3, [r3, #0]
 801682e:	0018      	movs	r0, r3
 8016830:	f7fe fb6a 	bl	8014f08 <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8016834:	1dfb      	adds	r3, r7, #7
 8016836:	781a      	ldrb	r2, [r3, #0]
 8016838:	4926      	ldr	r1, [pc, #152]	@ (80168d4 <HW_SignalDetachment+0x118>)
 801683a:	0013      	movs	r3, r2
 801683c:	011b      	lsls	r3, r3, #4
 801683e:	1a9b      	subs	r3, r3, r2
 8016840:	009b      	lsls	r3, r3, #2
 8016842:	585b      	ldr	r3, [r3, r1]
 8016844:	22c0      	movs	r2, #192	@ 0xc0
 8016846:	0112      	lsls	r2, r2, #4
 8016848:	0011      	movs	r1, r2
 801684a:	0018      	movs	r0, r3
 801684c:	f7ff f968 	bl	8015b20 <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8016850:	1dfb      	adds	r3, r7, #7
 8016852:	781a      	ldrb	r2, [r3, #0]
 8016854:	491f      	ldr	r1, [pc, #124]	@ (80168d4 <HW_SignalDetachment+0x118>)
 8016856:	0013      	movs	r3, r2
 8016858:	011b      	lsls	r3, r3, #4
 801685a:	1a9b      	subs	r3, r3, r2
 801685c:	009b      	lsls	r3, r3, #2
 801685e:	18cb      	adds	r3, r1, r3
 8016860:	3310      	adds	r3, #16
 8016862:	681b      	ldr	r3, [r3, #0]
 8016864:	781b      	ldrb	r3, [r3, #0]
 8016866:	2204      	movs	r2, #4
 8016868:	4013      	ands	r3, r2
 801686a:	b2db      	uxtb	r3, r3
 801686c:	2b00      	cmp	r3, #0
 801686e:	d104      	bne.n	801687a <HW_SignalDetachment+0xbe>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8016870:	1dfb      	adds	r3, r7, #7
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	0018      	movs	r0, r3
 8016876:	f006 fbca 	bl	801d00e <BSP_USBPD_PWR_VBUSDeInit>
  }

#if defined(USBPD_REV30_SUPPORT)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 801687a:	1dfb      	adds	r3, r7, #7
 801687c:	781a      	ldrb	r2, [r3, #0]
 801687e:	4915      	ldr	r1, [pc, #84]	@ (80168d4 <HW_SignalDetachment+0x118>)
 8016880:	0013      	movs	r3, r2
 8016882:	011b      	lsls	r3, r3, #4
 8016884:	1a9b      	subs	r3, r3, r2
 8016886:	009b      	lsls	r3, r3, #2
 8016888:	18cb      	adds	r3, r1, r3
 801688a:	330c      	adds	r3, #12
 801688c:	681b      	ldr	r3, [r3, #0]
 801688e:	7a1b      	ldrb	r3, [r3, #8]
 8016890:	2202      	movs	r2, #2
 8016892:	4013      	ands	r3, r2
 8016894:	b2db      	uxtb	r3, r3
 8016896:	2b00      	cmp	r3, #0
 8016898:	d00a      	beq.n	80168b0 <HW_SignalDetachment+0xf4>
  {
    /* Set GPIO to disallow the FRSTX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 801689a:	1dfb      	adds	r3, r7, #7
 801689c:	781a      	ldrb	r2, [r3, #0]
 801689e:	490d      	ldr	r1, [pc, #52]	@ (80168d4 <HW_SignalDetachment+0x118>)
 80168a0:	0013      	movs	r3, r2
 80168a2:	011b      	lsls	r3, r3, #4
 80168a4:	1a9b      	subs	r3, r3, r2
 80168a6:	009b      	lsls	r3, r3, #2
 80168a8:	585b      	ldr	r3, [r3, r1]
 80168aa:	0018      	movs	r0, r3
 80168ac:	f7ff f928 	bl	8015b00 <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPD_REV30_SUPPORT */

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 80168b0:	1dfb      	adds	r3, r7, #7
 80168b2:	781a      	ldrb	r2, [r3, #0]
 80168b4:	4907      	ldr	r1, [pc, #28]	@ (80168d4 <HW_SignalDetachment+0x118>)
 80168b6:	0013      	movs	r3, r2
 80168b8:	011b      	lsls	r3, r3, #4
 80168ba:	1a9b      	subs	r3, r3, r2
 80168bc:	009b      	lsls	r3, r3, #2
 80168be:	18cb      	adds	r3, r1, r3
 80168c0:	3334      	adds	r3, #52	@ 0x34
 80168c2:	2200      	movs	r2, #0
 80168c4:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 80168c6:	f000 fb11 	bl	8016eec <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 80168ca:	46c0      	nop			@ (mov r8, r8)
 80168cc:	46bd      	mov	sp, r7
 80168ce:	b002      	add	sp, #8
 80168d0:	bd80      	pop	{r7, pc}
 80168d2:	46c0      	nop			@ (mov r8, r8)
 80168d4:	20011624 	.word	0x20011624

080168d8 <USBPD_HW_IF_SetResistor_SinkTxNG>:

void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 80168d8:	b580      	push	{r7, lr}
 80168da:	b082      	sub	sp, #8
 80168dc:	af00      	add	r7, sp, #0
 80168de:	0002      	movs	r2, r0
 80168e0:	1dfb      	adds	r3, r7, #7
 80168e2:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80168e4:	1dfb      	adds	r3, r7, #7
 80168e6:	781a      	ldrb	r2, [r3, #0]
 80168e8:	4907      	ldr	r1, [pc, #28]	@ (8016908 <USBPD_HW_IF_SetResistor_SinkTxNG+0x30>)
 80168ea:	0013      	movs	r3, r2
 80168ec:	011b      	lsls	r3, r3, #4
 80168ee:	1a9b      	subs	r3, r3, r2
 80168f0:	009b      	lsls	r3, r3, #2
 80168f2:	585b      	ldr	r3, [r3, r1]
 80168f4:	2280      	movs	r2, #128	@ 0x80
 80168f6:	0052      	lsls	r2, r2, #1
 80168f8:	0011      	movs	r1, r2
 80168fa:	0018      	movs	r0, r3
 80168fc:	f7ff f944 	bl	8015b88 <LL_UCPD_SetRpResistor>
}
 8016900:	46c0      	nop			@ (mov r8, r8)
 8016902:	46bd      	mov	sp, r7
 8016904:	b002      	add	sp, #8
 8016906:	bd80      	pop	{r7, pc}
 8016908:	20011624 	.word	0x20011624

0801690c <USBPD_HW_IF_SetResistor_SinkTxOK>:

void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 801690c:	b580      	push	{r7, lr}
 801690e:	b082      	sub	sp, #8
 8016910:	af00      	add	r7, sp, #0
 8016912:	0002      	movs	r2, r0
 8016914:	1dfb      	adds	r3, r7, #7
 8016916:	701a      	strb	r2, [r3, #0]
  /* set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8016918:	1dfb      	adds	r3, r7, #7
 801691a:	781a      	ldrb	r2, [r3, #0]
 801691c:	4907      	ldr	r1, [pc, #28]	@ (801693c <USBPD_HW_IF_SetResistor_SinkTxOK+0x30>)
 801691e:	0013      	movs	r3, r2
 8016920:	011b      	lsls	r3, r3, #4
 8016922:	1a9b      	subs	r3, r3, r2
 8016924:	009b      	lsls	r3, r3, #2
 8016926:	585b      	ldr	r3, [r3, r1]
 8016928:	22c0      	movs	r2, #192	@ 0xc0
 801692a:	0052      	lsls	r2, r2, #1
 801692c:	0011      	movs	r1, r2
 801692e:	0018      	movs	r0, r3
 8016930:	f7ff f92a 	bl	8015b88 <LL_UCPD_SetRpResistor>
}
 8016934:	46c0      	nop			@ (mov r8, r8)
 8016936:	46bd      	mov	sp, r7
 8016938:	b002      	add	sp, #8
 801693a:	bd80      	pop	{r7, pc}
 801693c:	20011624 	.word	0x20011624

08016940 <USBPD_HW_IF_IsResistor_SinkTxOk>:

uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b082      	sub	sp, #8
 8016944:	af00      	add	r7, sp, #0
 8016946:	0002      	movs	r2, r0
 8016948:	1dfb      	adds	r3, r7, #7
 801694a:	701a      	strb	r2, [r3, #0]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 801694c:	1dfb      	adds	r3, r7, #7
 801694e:	781a      	ldrb	r2, [r3, #0]
 8016950:	491c      	ldr	r1, [pc, #112]	@ (80169c4 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8016952:	0013      	movs	r3, r2
 8016954:	011b      	lsls	r3, r3, #4
 8016956:	1a9b      	subs	r3, r3, r2
 8016958:	009b      	lsls	r3, r3, #2
 801695a:	18cb      	adds	r3, r1, r3
 801695c:	3334      	adds	r3, #52	@ 0x34
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	2b01      	cmp	r3, #1
 8016962:	d002      	beq.n	801696a <USBPD_HW_IF_IsResistor_SinkTxOk+0x2a>
 8016964:	2b02      	cmp	r3, #2
 8016966:	d012      	beq.n	801698e <USBPD_HW_IF_IsResistor_SinkTxOk+0x4e>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 8016968:	e026      	b.n	80169b8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 801696a:	1dfb      	adds	r3, r7, #7
 801696c:	781a      	ldrb	r2, [r3, #0]
 801696e:	4915      	ldr	r1, [pc, #84]	@ (80169c4 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8016970:	0013      	movs	r3, r2
 8016972:	011b      	lsls	r3, r3, #4
 8016974:	1a9b      	subs	r3, r3, r2
 8016976:	009b      	lsls	r3, r3, #2
 8016978:	585b      	ldr	r3, [r3, r1]
 801697a:	695a      	ldr	r2, [r3, #20]
 801697c:	23c0      	movs	r3, #192	@ 0xc0
 801697e:	029b      	lsls	r3, r3, #10
 8016980:	401a      	ands	r2, r3
 8016982:	23c0      	movs	r3, #192	@ 0xc0
 8016984:	029b      	lsls	r3, r3, #10
 8016986:	429a      	cmp	r2, r3
 8016988:	d113      	bne.n	80169b2 <USBPD_HW_IF_IsResistor_SinkTxOk+0x72>
        return USBPD_TRUE;
 801698a:	2301      	movs	r3, #1
 801698c:	e015      	b.n	80169ba <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 801698e:	1dfb      	adds	r3, r7, #7
 8016990:	781a      	ldrb	r2, [r3, #0]
 8016992:	490c      	ldr	r1, [pc, #48]	@ (80169c4 <USBPD_HW_IF_IsResistor_SinkTxOk+0x84>)
 8016994:	0013      	movs	r3, r2
 8016996:	011b      	lsls	r3, r3, #4
 8016998:	1a9b      	subs	r3, r3, r2
 801699a:	009b      	lsls	r3, r3, #2
 801699c:	585b      	ldr	r3, [r3, r1]
 801699e:	695a      	ldr	r2, [r3, #20]
 80169a0:	23c0      	movs	r3, #192	@ 0xc0
 80169a2:	031b      	lsls	r3, r3, #12
 80169a4:	401a      	ands	r2, r3
 80169a6:	23c0      	movs	r3, #192	@ 0xc0
 80169a8:	031b      	lsls	r3, r3, #12
 80169aa:	429a      	cmp	r2, r3
 80169ac:	d103      	bne.n	80169b6 <USBPD_HW_IF_IsResistor_SinkTxOk+0x76>
        return USBPD_TRUE;
 80169ae:	2301      	movs	r3, #1
 80169b0:	e003      	b.n	80169ba <USBPD_HW_IF_IsResistor_SinkTxOk+0x7a>
      break;
 80169b2:	46c0      	nop			@ (mov r8, r8)
 80169b4:	e000      	b.n	80169b8 <USBPD_HW_IF_IsResistor_SinkTxOk+0x78>
      break;
 80169b6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBPD_FALSE;
 80169b8:	2300      	movs	r3, #0
}
 80169ba:	0018      	movs	r0, r3
 80169bc:	46bd      	mov	sp, r7
 80169be:	b002      	add	sp, #8
 80169c0:	bd80      	pop	{r7, pc}
 80169c2:	46c0      	nop			@ (mov r8, r8)
 80169c4:	20011624 	.word	0x20011624

080169c8 <USBPD_HW_IF_FastRoleSwapSignalling>:

void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 80169c8:	b580      	push	{r7, lr}
 80169ca:	b082      	sub	sp, #8
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	0002      	movs	r2, r0
 80169d0:	1dfb      	adds	r3, r7, #7
 80169d2:	701a      	strb	r2, [r3, #0]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 80169d4:	1dfb      	adds	r3, r7, #7
 80169d6:	781a      	ldrb	r2, [r3, #0]
 80169d8:	4906      	ldr	r1, [pc, #24]	@ (80169f4 <USBPD_HW_IF_FastRoleSwapSignalling+0x2c>)
 80169da:	0013      	movs	r3, r2
 80169dc:	011b      	lsls	r3, r3, #4
 80169de:	1a9b      	subs	r3, r3, r2
 80169e0:	009b      	lsls	r3, r3, #2
 80169e2:	585b      	ldr	r3, [r3, r1]
 80169e4:	0018      	movs	r0, r3
 80169e6:	f7ff f86c 	bl	8015ac2 <LL_UCPD_SignalFRSTX>
}
 80169ea:	46c0      	nop			@ (mov r8, r8)
 80169ec:	46bd      	mov	sp, r7
 80169ee:	b002      	add	sp, #8
 80169f0:	bd80      	pop	{r7, pc}
 80169f2:	46c0      	nop			@ (mov r8, r8)
 80169f4:	20011624 	.word	0x20011624

080169f8 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b084      	sub	sp, #16
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	0002      	movs	r2, r0
 8016a00:	1dfb      	adds	r3, r7, #7
 8016a02:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8016a04:	1dfb      	adds	r3, r7, #7
 8016a06:	781b      	ldrb	r3, [r3, #0]
 8016a08:	220c      	movs	r2, #12
 8016a0a:	18ba      	adds	r2, r7, r2
 8016a0c:	0011      	movs	r1, r2
 8016a0e:	0018      	movs	r0, r3
 8016a10:	f006 fb0f 	bl	801d032 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	b29b      	uxth	r3, r3
}
 8016a18:	0018      	movs	r0, r3
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	b004      	add	sp, #16
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <LL_APB2_GRP1_EnableClock>:
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b084      	sub	sp, #16
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APBENR2, Periphs);
 8016a28:	4b07      	ldr	r3, [pc, #28]	@ (8016a48 <LL_APB2_GRP1_EnableClock+0x28>)
 8016a2a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8016a2c:	4b06      	ldr	r3, [pc, #24]	@ (8016a48 <LL_APB2_GRP1_EnableClock+0x28>)
 8016a2e:	687a      	ldr	r2, [r7, #4]
 8016a30:	430a      	orrs	r2, r1
 8016a32:	641a      	str	r2, [r3, #64]	@ 0x40
  tmpreg = READ_BIT(RCC->APBENR2, Periphs);
 8016a34:	4b04      	ldr	r3, [pc, #16]	@ (8016a48 <LL_APB2_GRP1_EnableClock+0x28>)
 8016a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a38:	687a      	ldr	r2, [r7, #4]
 8016a3a:	4013      	ands	r3, r2
 8016a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8016a3e:	68fb      	ldr	r3, [r7, #12]
}
 8016a40:	46c0      	nop			@ (mov r8, r8)
 8016a42:	46bd      	mov	sp, r7
 8016a44:	b004      	add	sp, #16
 8016a46:	bd80      	pop	{r7, pc}
 8016a48:	40021000 	.word	0x40021000

08016a4c <LL_APB2_GRP1_DisableClock>:
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b082      	sub	sp, #8
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APBENR2, Periphs);
 8016a54:	4b05      	ldr	r3, [pc, #20]	@ (8016a6c <LL_APB2_GRP1_DisableClock+0x20>)
 8016a56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	43d9      	mvns	r1, r3
 8016a5c:	4b03      	ldr	r3, [pc, #12]	@ (8016a6c <LL_APB2_GRP1_DisableClock+0x20>)
 8016a5e:	400a      	ands	r2, r1
 8016a60:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8016a62:	46c0      	nop			@ (mov r8, r8)
 8016a64:	46bd      	mov	sp, r7
 8016a66:	b002      	add	sp, #8
 8016a68:	bd80      	pop	{r7, pc}
 8016a6a:	46c0      	nop			@ (mov r8, r8)
 8016a6c:	40021000 	.word	0x40021000

08016a70 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b082      	sub	sp, #8
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	2201      	movs	r2, #1
 8016a7e:	431a      	orrs	r2, r3
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	601a      	str	r2, [r3, #0]
}
 8016a84:	46c0      	nop			@ (mov r8, r8)
 8016a86:	46bd      	mov	sp, r7
 8016a88:	b002      	add	sp, #8
 8016a8a:	bd80      	pop	{r7, pc}

08016a8c <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8016a8c:	b580      	push	{r7, lr}
 8016a8e:	b082      	sub	sp, #8
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
 8016a94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	681b      	ldr	r3, [r3, #0]
 8016a9a:	2270      	movs	r2, #112	@ 0x70
 8016a9c:	4393      	bics	r3, r2
 8016a9e:	001a      	movs	r2, r3
 8016aa0:	683b      	ldr	r3, [r7, #0]
 8016aa2:	431a      	orrs	r2, r3
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	601a      	str	r2, [r3, #0]
}
 8016aa8:	46c0      	nop			@ (mov r8, r8)
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	b002      	add	sp, #8
 8016aae:	bd80      	pop	{r7, pc}

08016ab0 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8016ab0:	b580      	push	{r7, lr}
 8016ab2:	b082      	sub	sp, #8
 8016ab4:	af00      	add	r7, sp, #0
 8016ab6:	6078      	str	r0, [r7, #4]
 8016ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	683a      	ldr	r2, [r7, #0]
 8016abe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8016ac0:	46c0      	nop			@ (mov r8, r8)
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	b002      	add	sp, #8
 8016ac6:	bd80      	pop	{r7, pc}

08016ac8 <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8016ad4:	0018      	movs	r0, r3
 8016ad6:	46bd      	mov	sp, r7
 8016ad8:	b002      	add	sp, #8
 8016ada:	bd80      	pop	{r7, pc}

08016adc <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
 8016ae4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	683a      	ldr	r2, [r7, #0]
 8016aea:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8016aec:	46c0      	nop			@ (mov r8, r8)
 8016aee:	46bd      	mov	sp, r7
 8016af0:	b002      	add	sp, #8
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM1
  *         @arg @ref LL_TIM_OCMODE_ASYMMETRIC_PWM2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b086      	sub	sp, #24
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	60f8      	str	r0, [r7, #12]
 8016afc:	60b9      	str	r1, [r7, #8]
 8016afe:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8016b00:	68bb      	ldr	r3, [r7, #8]
 8016b02:	2b01      	cmp	r3, #1
 8016b04:	d02c      	beq.n	8016b60 <LL_TIM_OC_SetMode+0x6c>
 8016b06:	68bb      	ldr	r3, [r7, #8]
 8016b08:	2b04      	cmp	r3, #4
 8016b0a:	d027      	beq.n	8016b5c <LL_TIM_OC_SetMode+0x68>
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	2b10      	cmp	r3, #16
 8016b10:	d022      	beq.n	8016b58 <LL_TIM_OC_SetMode+0x64>
 8016b12:	68bb      	ldr	r3, [r7, #8]
 8016b14:	2b40      	cmp	r3, #64	@ 0x40
 8016b16:	d01d      	beq.n	8016b54 <LL_TIM_OC_SetMode+0x60>
 8016b18:	68ba      	ldr	r2, [r7, #8]
 8016b1a:	2380      	movs	r3, #128	@ 0x80
 8016b1c:	005b      	lsls	r3, r3, #1
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	d016      	beq.n	8016b50 <LL_TIM_OC_SetMode+0x5c>
 8016b22:	68ba      	ldr	r2, [r7, #8]
 8016b24:	2380      	movs	r3, #128	@ 0x80
 8016b26:	00db      	lsls	r3, r3, #3
 8016b28:	429a      	cmp	r2, r3
 8016b2a:	d00f      	beq.n	8016b4c <LL_TIM_OC_SetMode+0x58>
 8016b2c:	68ba      	ldr	r2, [r7, #8]
 8016b2e:	2380      	movs	r3, #128	@ 0x80
 8016b30:	015b      	lsls	r3, r3, #5
 8016b32:	429a      	cmp	r2, r3
 8016b34:	d008      	beq.n	8016b48 <LL_TIM_OC_SetMode+0x54>
 8016b36:	68ba      	ldr	r2, [r7, #8]
 8016b38:	2380      	movs	r3, #128	@ 0x80
 8016b3a:	025b      	lsls	r3, r3, #9
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	d101      	bne.n	8016b44 <LL_TIM_OC_SetMode+0x50>
 8016b40:	2307      	movs	r3, #7
 8016b42:	e00e      	b.n	8016b62 <LL_TIM_OC_SetMode+0x6e>
 8016b44:	2308      	movs	r3, #8
 8016b46:	e00c      	b.n	8016b62 <LL_TIM_OC_SetMode+0x6e>
 8016b48:	2306      	movs	r3, #6
 8016b4a:	e00a      	b.n	8016b62 <LL_TIM_OC_SetMode+0x6e>
 8016b4c:	2305      	movs	r3, #5
 8016b4e:	e008      	b.n	8016b62 <LL_TIM_OC_SetMode+0x6e>
 8016b50:	2304      	movs	r3, #4
 8016b52:	e006      	b.n	8016b62 <LL_TIM_OC_SetMode+0x6e>
 8016b54:	2303      	movs	r3, #3
 8016b56:	e004      	b.n	8016b62 <LL_TIM_OC_SetMode+0x6e>
 8016b58:	2302      	movs	r3, #2
 8016b5a:	e002      	b.n	8016b62 <LL_TIM_OC_SetMode+0x6e>
 8016b5c:	2301      	movs	r3, #1
 8016b5e:	e000      	b.n	8016b62 <LL_TIM_OC_SetMode+0x6e>
 8016b60:	2300      	movs	r3, #0
 8016b62:	2017      	movs	r0, #23
 8016b64:	183a      	adds	r2, r7, r0
 8016b66:	7013      	strb	r3, [r2, #0]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	3318      	adds	r3, #24
 8016b6c:	0019      	movs	r1, r3
 8016b6e:	183b      	adds	r3, r7, r0
 8016b70:	781b      	ldrb	r3, [r3, #0]
 8016b72:	4a0e      	ldr	r2, [pc, #56]	@ (8016bac <LL_TIM_OC_SetMode+0xb8>)
 8016b74:	5cd3      	ldrb	r3, [r2, r3]
 8016b76:	18cb      	adds	r3, r1, r3
 8016b78:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8016b7a:	693b      	ldr	r3, [r7, #16]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	183a      	adds	r2, r7, r0
 8016b80:	7812      	ldrb	r2, [r2, #0]
 8016b82:	490b      	ldr	r1, [pc, #44]	@ (8016bb0 <LL_TIM_OC_SetMode+0xbc>)
 8016b84:	5c8a      	ldrb	r2, [r1, r2]
 8016b86:	0011      	movs	r1, r2
 8016b88:	4a0a      	ldr	r2, [pc, #40]	@ (8016bb4 <LL_TIM_OC_SetMode+0xc0>)
 8016b8a:	408a      	lsls	r2, r1
 8016b8c:	43d2      	mvns	r2, r2
 8016b8e:	401a      	ands	r2, r3
 8016b90:	183b      	adds	r3, r7, r0
 8016b92:	781b      	ldrb	r3, [r3, #0]
 8016b94:	4906      	ldr	r1, [pc, #24]	@ (8016bb0 <LL_TIM_OC_SetMode+0xbc>)
 8016b96:	5ccb      	ldrb	r3, [r1, r3]
 8016b98:	0019      	movs	r1, r3
 8016b9a:	687b      	ldr	r3, [r7, #4]
 8016b9c:	408b      	lsls	r3, r1
 8016b9e:	431a      	orrs	r2, r3
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	601a      	str	r2, [r3, #0]
}
 8016ba4:	46c0      	nop			@ (mov r8, r8)
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	b006      	add	sp, #24
 8016baa:	bd80      	pop	{r7, pc}
 8016bac:	0801e558 	.word	0x0801e558
 8016bb0:	0801e564 	.word	0x0801e564
 8016bb4:	00010073 	.word	0x00010073

08016bb8 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b086      	sub	sp, #24
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	60f8      	str	r0, [r7, #12]
 8016bc0:	60b9      	str	r1, [r7, #8]
 8016bc2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	2b01      	cmp	r3, #1
 8016bc8:	d02c      	beq.n	8016c24 <LL_TIM_OC_SetPolarity+0x6c>
 8016bca:	68bb      	ldr	r3, [r7, #8]
 8016bcc:	2b04      	cmp	r3, #4
 8016bce:	d027      	beq.n	8016c20 <LL_TIM_OC_SetPolarity+0x68>
 8016bd0:	68bb      	ldr	r3, [r7, #8]
 8016bd2:	2b10      	cmp	r3, #16
 8016bd4:	d022      	beq.n	8016c1c <LL_TIM_OC_SetPolarity+0x64>
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	2b40      	cmp	r3, #64	@ 0x40
 8016bda:	d01d      	beq.n	8016c18 <LL_TIM_OC_SetPolarity+0x60>
 8016bdc:	68ba      	ldr	r2, [r7, #8]
 8016bde:	2380      	movs	r3, #128	@ 0x80
 8016be0:	005b      	lsls	r3, r3, #1
 8016be2:	429a      	cmp	r2, r3
 8016be4:	d016      	beq.n	8016c14 <LL_TIM_OC_SetPolarity+0x5c>
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	2380      	movs	r3, #128	@ 0x80
 8016bea:	00db      	lsls	r3, r3, #3
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d00f      	beq.n	8016c10 <LL_TIM_OC_SetPolarity+0x58>
 8016bf0:	68ba      	ldr	r2, [r7, #8]
 8016bf2:	2380      	movs	r3, #128	@ 0x80
 8016bf4:	015b      	lsls	r3, r3, #5
 8016bf6:	429a      	cmp	r2, r3
 8016bf8:	d008      	beq.n	8016c0c <LL_TIM_OC_SetPolarity+0x54>
 8016bfa:	68ba      	ldr	r2, [r7, #8]
 8016bfc:	2380      	movs	r3, #128	@ 0x80
 8016bfe:	025b      	lsls	r3, r3, #9
 8016c00:	429a      	cmp	r2, r3
 8016c02:	d101      	bne.n	8016c08 <LL_TIM_OC_SetPolarity+0x50>
 8016c04:	2307      	movs	r3, #7
 8016c06:	e00e      	b.n	8016c26 <LL_TIM_OC_SetPolarity+0x6e>
 8016c08:	2308      	movs	r3, #8
 8016c0a:	e00c      	b.n	8016c26 <LL_TIM_OC_SetPolarity+0x6e>
 8016c0c:	2306      	movs	r3, #6
 8016c0e:	e00a      	b.n	8016c26 <LL_TIM_OC_SetPolarity+0x6e>
 8016c10:	2305      	movs	r3, #5
 8016c12:	e008      	b.n	8016c26 <LL_TIM_OC_SetPolarity+0x6e>
 8016c14:	2304      	movs	r3, #4
 8016c16:	e006      	b.n	8016c26 <LL_TIM_OC_SetPolarity+0x6e>
 8016c18:	2303      	movs	r3, #3
 8016c1a:	e004      	b.n	8016c26 <LL_TIM_OC_SetPolarity+0x6e>
 8016c1c:	2302      	movs	r3, #2
 8016c1e:	e002      	b.n	8016c26 <LL_TIM_OC_SetPolarity+0x6e>
 8016c20:	2301      	movs	r3, #1
 8016c22:	e000      	b.n	8016c26 <LL_TIM_OC_SetPolarity+0x6e>
 8016c24:	2300      	movs	r3, #0
 8016c26:	2017      	movs	r0, #23
 8016c28:	183a      	adds	r2, r7, r0
 8016c2a:	7013      	strb	r3, [r2, #0]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	6a1b      	ldr	r3, [r3, #32]
 8016c30:	183a      	adds	r2, r7, r0
 8016c32:	7812      	ldrb	r2, [r2, #0]
 8016c34:	490a      	ldr	r1, [pc, #40]	@ (8016c60 <LL_TIM_OC_SetPolarity+0xa8>)
 8016c36:	5c8a      	ldrb	r2, [r1, r2]
 8016c38:	0011      	movs	r1, r2
 8016c3a:	2202      	movs	r2, #2
 8016c3c:	408a      	lsls	r2, r1
 8016c3e:	43d2      	mvns	r2, r2
 8016c40:	401a      	ands	r2, r3
 8016c42:	183b      	adds	r3, r7, r0
 8016c44:	781b      	ldrb	r3, [r3, #0]
 8016c46:	4906      	ldr	r1, [pc, #24]	@ (8016c60 <LL_TIM_OC_SetPolarity+0xa8>)
 8016c48:	5ccb      	ldrb	r3, [r1, r3]
 8016c4a:	0019      	movs	r1, r3
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	408b      	lsls	r3, r1
 8016c50:	431a      	orrs	r2, r3
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	621a      	str	r2, [r3, #32]
}
 8016c56:	46c0      	nop			@ (mov r8, r8)
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	b006      	add	sp, #24
 8016c5c:	bd80      	pop	{r7, pc}
 8016c5e:	46c0      	nop			@ (mov r8, r8)
 8016c60:	0801e570 	.word	0x0801e570

08016c64 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
 8016c6c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8016c6e:	687b      	ldr	r3, [r7, #4]
 8016c70:	683a      	ldr	r2, [r7, #0]
 8016c72:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8016c74:	46c0      	nop			@ (mov r8, r8)
 8016c76:	46bd      	mov	sp, r7
 8016c78:	b002      	add	sp, #8
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
 8016c84:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	683a      	ldr	r2, [r7, #0]
 8016c8a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8016c8c:	46c0      	nop			@ (mov r8, r8)
 8016c8e:	46bd      	mov	sp, r7
 8016c90:	b002      	add	sp, #8
 8016c92:	bd80      	pop	{r7, pc}

08016c94 <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b082      	sub	sp, #8
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
 8016c9c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	683a      	ldr	r2, [r7, #0]
 8016ca2:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8016ca4:	46c0      	nop			@ (mov r8, r8)
 8016ca6:	46bd      	mov	sp, r7
 8016ca8:	b002      	add	sp, #8
 8016caa:	bd80      	pop	{r7, pc}

08016cac <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8016cac:	b580      	push	{r7, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	af00      	add	r7, sp, #0
 8016cb2:	6078      	str	r0, [r7, #4]
 8016cb4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	683a      	ldr	r2, [r7, #0]
 8016cba:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8016cbc:	46c0      	nop			@ (mov r8, r8)
 8016cbe:	46bd      	mov	sp, r7
 8016cc0:	b002      	add	sp, #8
 8016cc2:	bd80      	pop	{r7, pc}

08016cc4 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b082      	sub	sp, #8
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	2203      	movs	r2, #3
 8016cd0:	4252      	negs	r2, r2
 8016cd2:	611a      	str	r2, [r3, #16]
}
 8016cd4:	46c0      	nop			@ (mov r8, r8)
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	b002      	add	sp, #8
 8016cda:	bd80      	pop	{r7, pc}

08016cdc <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	691b      	ldr	r3, [r3, #16]
 8016ce8:	2202      	movs	r2, #2
 8016cea:	4013      	ands	r3, r2
 8016cec:	2b02      	cmp	r3, #2
 8016cee:	d101      	bne.n	8016cf4 <LL_TIM_IsActiveFlag_CC1+0x18>
 8016cf0:	2301      	movs	r3, #1
 8016cf2:	e000      	b.n	8016cf6 <LL_TIM_IsActiveFlag_CC1+0x1a>
 8016cf4:	2300      	movs	r3, #0
}
 8016cf6:	0018      	movs	r0, r3
 8016cf8:	46bd      	mov	sp, r7
 8016cfa:	b002      	add	sp, #8
 8016cfc:	bd80      	pop	{r7, pc}

08016cfe <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8016cfe:	b580      	push	{r7, lr}
 8016d00:	b082      	sub	sp, #8
 8016d02:	af00      	add	r7, sp, #0
 8016d04:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	2205      	movs	r2, #5
 8016d0a:	4252      	negs	r2, r2
 8016d0c:	611a      	str	r2, [r3, #16]
}
 8016d0e:	46c0      	nop			@ (mov r8, r8)
 8016d10:	46bd      	mov	sp, r7
 8016d12:	b002      	add	sp, #8
 8016d14:	bd80      	pop	{r7, pc}

08016d16 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8016d16:	b580      	push	{r7, lr}
 8016d18:	b082      	sub	sp, #8
 8016d1a:	af00      	add	r7, sp, #0
 8016d1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	691b      	ldr	r3, [r3, #16]
 8016d22:	2204      	movs	r2, #4
 8016d24:	4013      	ands	r3, r2
 8016d26:	2b04      	cmp	r3, #4
 8016d28:	d101      	bne.n	8016d2e <LL_TIM_IsActiveFlag_CC2+0x18>
 8016d2a:	2301      	movs	r3, #1
 8016d2c:	e000      	b.n	8016d30 <LL_TIM_IsActiveFlag_CC2+0x1a>
 8016d2e:	2300      	movs	r3, #0
}
 8016d30:	0018      	movs	r0, r3
 8016d32:	46bd      	mov	sp, r7
 8016d34:	b002      	add	sp, #8
 8016d36:	bd80      	pop	{r7, pc}

08016d38 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8016d38:	b580      	push	{r7, lr}
 8016d3a:	b082      	sub	sp, #8
 8016d3c:	af00      	add	r7, sp, #0
 8016d3e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	2209      	movs	r2, #9
 8016d44:	4252      	negs	r2, r2
 8016d46:	611a      	str	r2, [r3, #16]
}
 8016d48:	46c0      	nop			@ (mov r8, r8)
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	b002      	add	sp, #8
 8016d4e:	bd80      	pop	{r7, pc}

08016d50 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b082      	sub	sp, #8
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	691b      	ldr	r3, [r3, #16]
 8016d5c:	2208      	movs	r2, #8
 8016d5e:	4013      	ands	r3, r2
 8016d60:	2b08      	cmp	r3, #8
 8016d62:	d101      	bne.n	8016d68 <LL_TIM_IsActiveFlag_CC3+0x18>
 8016d64:	2301      	movs	r3, #1
 8016d66:	e000      	b.n	8016d6a <LL_TIM_IsActiveFlag_CC3+0x1a>
 8016d68:	2300      	movs	r3, #0
}
 8016d6a:	0018      	movs	r0, r3
 8016d6c:	46bd      	mov	sp, r7
 8016d6e:	b002      	add	sp, #8
 8016d70:	bd80      	pop	{r7, pc}

08016d72 <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 8016d72:	b580      	push	{r7, lr}
 8016d74:	b082      	sub	sp, #8
 8016d76:	af00      	add	r7, sp, #0
 8016d78:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	2211      	movs	r2, #17
 8016d7e:	4252      	negs	r2, r2
 8016d80:	611a      	str	r2, [r3, #16]
}
 8016d82:	46c0      	nop			@ (mov r8, r8)
 8016d84:	46bd      	mov	sp, r7
 8016d86:	b002      	add	sp, #8
 8016d88:	bd80      	pop	{r7, pc}

08016d8a <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 8016d8a:	b580      	push	{r7, lr}
 8016d8c:	b082      	sub	sp, #8
 8016d8e:	af00      	add	r7, sp, #0
 8016d90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	691b      	ldr	r3, [r3, #16]
 8016d96:	2210      	movs	r2, #16
 8016d98:	4013      	ands	r3, r2
 8016d9a:	2b10      	cmp	r3, #16
 8016d9c:	d101      	bne.n	8016da2 <LL_TIM_IsActiveFlag_CC4+0x18>
 8016d9e:	2301      	movs	r3, #1
 8016da0:	e000      	b.n	8016da4 <LL_TIM_IsActiveFlag_CC4+0x1a>
 8016da2:	2300      	movs	r3, #0
}
 8016da4:	0018      	movs	r0, r3
 8016da6:	46bd      	mov	sp, r7
 8016da8:	b002      	add	sp, #8
 8016daa:	bd80      	pop	{r7, pc}

08016dac <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 8016dac:	b5b0      	push	{r4, r5, r7, lr}
 8016dae:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8016db0:	4b48      	ldr	r3, [pc, #288]	@ (8016ed4 <USBPD_TIM_Init+0x128>)
 8016db2:	781b      	ldrb	r3, [r3, #0]
 8016db4:	b25b      	sxtb	r3, r3
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d000      	beq.n	8016dbc <USBPD_TIM_Init+0x10>
 8016dba:	e07e      	b.n	8016eba <USBPD_TIM_Init+0x10e>
  {
    TIMX_CLK_ENABLE;
 8016dbc:	2380      	movs	r3, #128	@ 0x80
 8016dbe:	011b      	lsls	r3, r3, #4
 8016dc0:	0018      	movs	r0, r3
 8016dc2:	f7ff fe2d 	bl	8016a20 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8016dc6:	4b44      	ldr	r3, [pc, #272]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016dc8:	2100      	movs	r1, #0
 8016dca:	0018      	movs	r0, r3
 8016dcc:	f7ff fe5e 	bl	8016a8c <LL_TIM_SetCounterMode>

    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 8016dd0:	4b42      	ldr	r3, [pc, #264]	@ (8016edc <USBPD_TIM_Init+0x130>)
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	4a42      	ldr	r2, [pc, #264]	@ (8016ee0 <USBPD_TIM_Init+0x134>)
 8016dd6:	4293      	cmp	r3, r2
 8016dd8:	d90b      	bls.n	8016df2 <USBPD_TIM_Init+0x46>
 8016dda:	4b40      	ldr	r3, [pc, #256]	@ (8016edc <USBPD_TIM_Init+0x130>)
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	4a41      	ldr	r2, [pc, #260]	@ (8016ee4 <USBPD_TIM_Init+0x138>)
 8016de0:	4694      	mov	ip, r2
 8016de2:	4463      	add	r3, ip
 8016de4:	4940      	ldr	r1, [pc, #256]	@ (8016ee8 <USBPD_TIM_Init+0x13c>)
 8016de6:	0018      	movs	r0, r3
 8016de8:	f7ef fb2c 	bl	8006444 <__udivsi3>
 8016dec:	0003      	movs	r3, r0
 8016dee:	3b01      	subs	r3, #1
 8016df0:	e000      	b.n	8016df4 <USBPD_TIM_Init+0x48>
 8016df2:	2300      	movs	r3, #0
 8016df4:	4a38      	ldr	r2, [pc, #224]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016df6:	0019      	movs	r1, r3
 8016df8:	0010      	movs	r0, r2
 8016dfa:	f7ff fe59 	bl	8016ab0 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8016dfe:	4b37      	ldr	r3, [pc, #220]	@ (8016edc <USBPD_TIM_Init+0x130>)
 8016e00:	681c      	ldr	r4, [r3, #0]
 8016e02:	4b35      	ldr	r3, [pc, #212]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e04:	0018      	movs	r0, r3
 8016e06:	f7ff fe5f 	bl	8016ac8 <LL_TIM_GetPrescaler>
 8016e0a:	0003      	movs	r3, r0
 8016e0c:	3301      	adds	r3, #1
 8016e0e:	0019      	movs	r1, r3
 8016e10:	0020      	movs	r0, r4
 8016e12:	f7ef fb17 	bl	8006444 <__udivsi3>
 8016e16:	0003      	movs	r3, r0
 8016e18:	2b63      	cmp	r3, #99	@ 0x63
 8016e1a:	d910      	bls.n	8016e3e <USBPD_TIM_Init+0x92>
 8016e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8016edc <USBPD_TIM_Init+0x130>)
 8016e1e:	681c      	ldr	r4, [r3, #0]
 8016e20:	4b2d      	ldr	r3, [pc, #180]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e22:	0018      	movs	r0, r3
 8016e24:	f7ff fe50 	bl	8016ac8 <LL_TIM_GetPrescaler>
 8016e28:	0003      	movs	r3, r0
 8016e2a:	3301      	adds	r3, #1
 8016e2c:	2264      	movs	r2, #100	@ 0x64
 8016e2e:	4353      	muls	r3, r2
 8016e30:	0019      	movs	r1, r3
 8016e32:	0020      	movs	r0, r4
 8016e34:	f7ef fb06 	bl	8006444 <__udivsi3>
 8016e38:	0003      	movs	r3, r0
 8016e3a:	3b01      	subs	r3, #1
 8016e3c:	e000      	b.n	8016e40 <USBPD_TIM_Init+0x94>
 8016e3e:	2300      	movs	r3, #0
 8016e40:	4a25      	ldr	r2, [pc, #148]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e42:	0019      	movs	r1, r3
 8016e44:	0010      	movs	r0, r2
 8016e46:	f7ff fe49 	bl	8016adc <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8016e4a:	4b23      	ldr	r3, [pc, #140]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e4c:	2230      	movs	r2, #48	@ 0x30
 8016e4e:	2101      	movs	r1, #1
 8016e50:	0018      	movs	r0, r3
 8016e52:	f7ff fe4f 	bl	8016af4 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 8016e56:	4b20      	ldr	r3, [pc, #128]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e58:	2230      	movs	r2, #48	@ 0x30
 8016e5a:	2110      	movs	r1, #16
 8016e5c:	0018      	movs	r0, r3
 8016e5e:	f7ff fe49 	bl	8016af4 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8016e62:	2380      	movs	r3, #128	@ 0x80
 8016e64:	005b      	lsls	r3, r3, #1
 8016e66:	481c      	ldr	r0, [pc, #112]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e68:	2230      	movs	r2, #48	@ 0x30
 8016e6a:	0019      	movs	r1, r3
 8016e6c:	f7ff fe42 	bl	8016af4 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 8016e70:	2380      	movs	r3, #128	@ 0x80
 8016e72:	015b      	lsls	r3, r3, #5
 8016e74:	4818      	ldr	r0, [pc, #96]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e76:	2230      	movs	r2, #48	@ 0x30
 8016e78:	0019      	movs	r1, r3
 8016e7a:	f7ff fe3b 	bl	8016af4 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 8016e7e:	4b16      	ldr	r3, [pc, #88]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e80:	2200      	movs	r2, #0
 8016e82:	2101      	movs	r1, #1
 8016e84:	0018      	movs	r0, r3
 8016e86:	f7ff fe97 	bl	8016bb8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 8016e8a:	4b13      	ldr	r3, [pc, #76]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	2110      	movs	r1, #16
 8016e90:	0018      	movs	r0, r3
 8016e92:	f7ff fe91 	bl	8016bb8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 8016e96:	2380      	movs	r3, #128	@ 0x80
 8016e98:	005b      	lsls	r3, r3, #1
 8016e9a:	480f      	ldr	r0, [pc, #60]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	0019      	movs	r1, r3
 8016ea0:	f7ff fe8a 	bl	8016bb8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 8016ea4:	2380      	movs	r3, #128	@ 0x80
 8016ea6:	015b      	lsls	r3, r3, #5
 8016ea8:	480b      	ldr	r0, [pc, #44]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016eaa:	2200      	movs	r2, #0
 8016eac:	0019      	movs	r1, r3
 8016eae:	f7ff fe83 	bl	8016bb8 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 8016eb2:	4b09      	ldr	r3, [pc, #36]	@ (8016ed8 <USBPD_TIM_Init+0x12c>)
 8016eb4:	0018      	movs	r0, r3
 8016eb6:	f7ff fddb 	bl	8016a70 <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 8016eba:	4b06      	ldr	r3, [pc, #24]	@ (8016ed4 <USBPD_TIM_Init+0x128>)
 8016ebc:	781b      	ldrb	r3, [r3, #0]
 8016ebe:	b25b      	sxtb	r3, r3
 8016ec0:	b2db      	uxtb	r3, r3
 8016ec2:	3301      	adds	r3, #1
 8016ec4:	b2db      	uxtb	r3, r3
 8016ec6:	b25a      	sxtb	r2, r3
 8016ec8:	4b02      	ldr	r3, [pc, #8]	@ (8016ed4 <USBPD_TIM_Init+0x128>)
 8016eca:	701a      	strb	r2, [r3, #0]
}
 8016ecc:	46c0      	nop			@ (mov r8, r8)
 8016ece:	46bd      	mov	sp, r7
 8016ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8016ed2:	46c0      	nop			@ (mov r8, r8)
 8016ed4:	2001169c 	.word	0x2001169c
 8016ed8:	40012c00 	.word	0x40012c00
 8016edc:	20000004 	.word	0x20000004
 8016ee0:	000f423f 	.word	0x000f423f
 8016ee4:	0007a120 	.word	0x0007a120
 8016ee8:	000f4240 	.word	0x000f4240

08016eec <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8016ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8016f1c <USBPD_TIM_DeInit+0x30>)
 8016ef2:	781b      	ldrb	r3, [r3, #0]
 8016ef4:	b25b      	sxtb	r3, r3
 8016ef6:	b2db      	uxtb	r3, r3
 8016ef8:	3b01      	subs	r3, #1
 8016efa:	b2db      	uxtb	r3, r3
 8016efc:	b25a      	sxtb	r2, r3
 8016efe:	4b07      	ldr	r3, [pc, #28]	@ (8016f1c <USBPD_TIM_DeInit+0x30>)
 8016f00:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8016f02:	4b06      	ldr	r3, [pc, #24]	@ (8016f1c <USBPD_TIM_DeInit+0x30>)
 8016f04:	781b      	ldrb	r3, [r3, #0]
 8016f06:	b25b      	sxtb	r3, r3
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d104      	bne.n	8016f16 <USBPD_TIM_DeInit+0x2a>
  {
    TIMX_CLK_DISABLE;
 8016f0c:	2380      	movs	r3, #128	@ 0x80
 8016f0e:	011b      	lsls	r3, r3, #4
 8016f10:	0018      	movs	r0, r3
 8016f12:	f7ff fd9b 	bl	8016a4c <LL_APB2_GRP1_DisableClock>
  }
}
 8016f16:	46c0      	nop			@ (mov r8, r8)
 8016f18:	46bd      	mov	sp, r7
 8016f1a:	bd80      	pop	{r7, pc}
 8016f1c:	2001169c 	.word	0x2001169c

08016f20 <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 8016f20:	b580      	push	{r7, lr}
 8016f22:	b082      	sub	sp, #8
 8016f24:	af00      	add	r7, sp, #0
 8016f26:	0002      	movs	r2, r0
 8016f28:	6039      	str	r1, [r7, #0]
 8016f2a:	1dfb      	adds	r3, r7, #7
 8016f2c:	701a      	strb	r2, [r3, #0]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8016f2e:	1dfb      	adds	r3, r7, #7
 8016f30:	781b      	ldrb	r3, [r3, #0]
 8016f32:	2b03      	cmp	r3, #3
 8016f34:	d044      	beq.n	8016fc0 <USBPD_TIM_Start+0xa0>
 8016f36:	dc57      	bgt.n	8016fe8 <USBPD_TIM_Start+0xc8>
 8016f38:	2b02      	cmp	r3, #2
 8016f3a:	d02d      	beq.n	8016f98 <USBPD_TIM_Start+0x78>
 8016f3c:	dc54      	bgt.n	8016fe8 <USBPD_TIM_Start+0xc8>
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d002      	beq.n	8016f48 <USBPD_TIM_Start+0x28>
 8016f42:	2b01      	cmp	r3, #1
 8016f44:	d014      	beq.n	8016f70 <USBPD_TIM_Start+0x50>
      break;
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
      break;
    default:
      break;
 8016f46:	e04f      	b.n	8016fe8 <USBPD_TIM_Start+0xc8>
      TIMX_CHANNEL1_SETEVENT;
 8016f48:	4b2a      	ldr	r3, [pc, #168]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016f4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	18d3      	adds	r3, r2, r3
 8016f50:	4929      	ldr	r1, [pc, #164]	@ (8016ff8 <USBPD_TIM_Start+0xd8>)
 8016f52:	0018      	movs	r0, r3
 8016f54:	f7ef fafc 	bl	8006550 <__aeabi_uidivmod>
 8016f58:	000b      	movs	r3, r1
 8016f5a:	001a      	movs	r2, r3
 8016f5c:	4b25      	ldr	r3, [pc, #148]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016f5e:	0011      	movs	r1, r2
 8016f60:	0018      	movs	r0, r3
 8016f62:	f7ff fe7f 	bl	8016c64 <LL_TIM_OC_SetCompareCH1>
 8016f66:	4b23      	ldr	r3, [pc, #140]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016f68:	0018      	movs	r0, r3
 8016f6a:	f7ff feab 	bl	8016cc4 <LL_TIM_ClearFlag_CC1>
      break;
 8016f6e:	e03c      	b.n	8016fea <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL2_SETEVENT;
 8016f70:	4b20      	ldr	r3, [pc, #128]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016f72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f74:	683b      	ldr	r3, [r7, #0]
 8016f76:	18d3      	adds	r3, r2, r3
 8016f78:	491f      	ldr	r1, [pc, #124]	@ (8016ff8 <USBPD_TIM_Start+0xd8>)
 8016f7a:	0018      	movs	r0, r3
 8016f7c:	f7ef fae8 	bl	8006550 <__aeabi_uidivmod>
 8016f80:	000b      	movs	r3, r1
 8016f82:	001a      	movs	r2, r3
 8016f84:	4b1b      	ldr	r3, [pc, #108]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016f86:	0011      	movs	r1, r2
 8016f88:	0018      	movs	r0, r3
 8016f8a:	f7ff fe77 	bl	8016c7c <LL_TIM_OC_SetCompareCH2>
 8016f8e:	4b19      	ldr	r3, [pc, #100]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016f90:	0018      	movs	r0, r3
 8016f92:	f7ff feb4 	bl	8016cfe <LL_TIM_ClearFlag_CC2>
      break;
 8016f96:	e028      	b.n	8016fea <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL3_SETEVENT;
 8016f98:	4b16      	ldr	r3, [pc, #88]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016f9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016f9c:	683b      	ldr	r3, [r7, #0]
 8016f9e:	18d3      	adds	r3, r2, r3
 8016fa0:	4915      	ldr	r1, [pc, #84]	@ (8016ff8 <USBPD_TIM_Start+0xd8>)
 8016fa2:	0018      	movs	r0, r3
 8016fa4:	f7ef fad4 	bl	8006550 <__aeabi_uidivmod>
 8016fa8:	000b      	movs	r3, r1
 8016faa:	001a      	movs	r2, r3
 8016fac:	4b11      	ldr	r3, [pc, #68]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016fae:	0011      	movs	r1, r2
 8016fb0:	0018      	movs	r0, r3
 8016fb2:	f7ff fe6f 	bl	8016c94 <LL_TIM_OC_SetCompareCH3>
 8016fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016fb8:	0018      	movs	r0, r3
 8016fba:	f7ff febd 	bl	8016d38 <LL_TIM_ClearFlag_CC3>
      break;
 8016fbe:	e014      	b.n	8016fea <USBPD_TIM_Start+0xca>
      TIMX_CHANNEL4_SETEVENT;
 8016fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016fc2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016fc4:	683b      	ldr	r3, [r7, #0]
 8016fc6:	18d3      	adds	r3, r2, r3
 8016fc8:	490b      	ldr	r1, [pc, #44]	@ (8016ff8 <USBPD_TIM_Start+0xd8>)
 8016fca:	0018      	movs	r0, r3
 8016fcc:	f7ef fac0 	bl	8006550 <__aeabi_uidivmod>
 8016fd0:	000b      	movs	r3, r1
 8016fd2:	001a      	movs	r2, r3
 8016fd4:	4b07      	ldr	r3, [pc, #28]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016fd6:	0011      	movs	r1, r2
 8016fd8:	0018      	movs	r0, r3
 8016fda:	f7ff fe67 	bl	8016cac <LL_TIM_OC_SetCompareCH4>
 8016fde:	4b05      	ldr	r3, [pc, #20]	@ (8016ff4 <USBPD_TIM_Start+0xd4>)
 8016fe0:	0018      	movs	r0, r3
 8016fe2:	f7ff fec6 	bl	8016d72 <LL_TIM_ClearFlag_CC4>
      break;
 8016fe6:	e000      	b.n	8016fea <USBPD_TIM_Start+0xca>
      break;
 8016fe8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8016fea:	46c0      	nop			@ (mov r8, r8)
 8016fec:	46bd      	mov	sp, r7
 8016fee:	b002      	add	sp, #8
 8016ff0:	bd80      	pop	{r7, pc}
 8016ff2:	46c0      	nop			@ (mov r8, r8)
 8016ff4:	40012c00 	.word	0x40012c00
 8016ff8:	00002710 	.word	0x00002710

08016ffc <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b084      	sub	sp, #16
 8017000:	af00      	add	r7, sp, #0
 8017002:	0002      	movs	r2, r0
 8017004:	1dfb      	adds	r3, r7, #7
 8017006:	701a      	strb	r2, [r3, #0]
  uint32_t _expired = 1u;
 8017008:	2301      	movs	r3, #1
 801700a:	60fb      	str	r3, [r7, #12]
  switch (Id)
 801700c:	1dfb      	adds	r3, r7, #7
 801700e:	781b      	ldrb	r3, [r3, #0]
 8017010:	2b03      	cmp	r3, #3
 8017012:	d01d      	beq.n	8017050 <USBPD_TIM_IsExpired+0x54>
 8017014:	dc23      	bgt.n	801705e <USBPD_TIM_IsExpired+0x62>
 8017016:	2b02      	cmp	r3, #2
 8017018:	d013      	beq.n	8017042 <USBPD_TIM_IsExpired+0x46>
 801701a:	dc20      	bgt.n	801705e <USBPD_TIM_IsExpired+0x62>
 801701c:	2b00      	cmp	r3, #0
 801701e:	d002      	beq.n	8017026 <USBPD_TIM_IsExpired+0x2a>
 8017020:	2b01      	cmp	r3, #1
 8017022:	d007      	beq.n	8017034 <USBPD_TIM_IsExpired+0x38>
      break;
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
      break;
    default:
      break;
 8017024:	e01b      	b.n	801705e <USBPD_TIM_IsExpired+0x62>
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 8017026:	4b11      	ldr	r3, [pc, #68]	@ (801706c <USBPD_TIM_IsExpired+0x70>)
 8017028:	0018      	movs	r0, r3
 801702a:	f7ff fe57 	bl	8016cdc <LL_TIM_IsActiveFlag_CC1>
 801702e:	0003      	movs	r3, r0
 8017030:	60fb      	str	r3, [r7, #12]
      break;
 8017032:	e015      	b.n	8017060 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8017034:	4b0d      	ldr	r3, [pc, #52]	@ (801706c <USBPD_TIM_IsExpired+0x70>)
 8017036:	0018      	movs	r0, r3
 8017038:	f7ff fe6d 	bl	8016d16 <LL_TIM_IsActiveFlag_CC2>
 801703c:	0003      	movs	r3, r0
 801703e:	60fb      	str	r3, [r7, #12]
      break;
 8017040:	e00e      	b.n	8017060 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8017042:	4b0a      	ldr	r3, [pc, #40]	@ (801706c <USBPD_TIM_IsExpired+0x70>)
 8017044:	0018      	movs	r0, r3
 8017046:	f7ff fe83 	bl	8016d50 <LL_TIM_IsActiveFlag_CC3>
 801704a:	0003      	movs	r3, r0
 801704c:	60fb      	str	r3, [r7, #12]
      break;
 801704e:	e007      	b.n	8017060 <USBPD_TIM_IsExpired+0x64>
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 8017050:	4b06      	ldr	r3, [pc, #24]	@ (801706c <USBPD_TIM_IsExpired+0x70>)
 8017052:	0018      	movs	r0, r3
 8017054:	f7ff fe99 	bl	8016d8a <LL_TIM_IsActiveFlag_CC4>
 8017058:	0003      	movs	r3, r0
 801705a:	60fb      	str	r3, [r7, #12]
      break;
 801705c:	e000      	b.n	8017060 <USBPD_TIM_IsExpired+0x64>
      break;
 801705e:	46c0      	nop			@ (mov r8, r8)
  }
  return _expired;
 8017060:	68fb      	ldr	r3, [r7, #12]
}
 8017062:	0018      	movs	r0, r3
 8017064:	46bd      	mov	sp, r7
 8017066:	b004      	add	sp, #16
 8017068:	bd80      	pop	{r7, pc}
 801706a:	46c0      	nop			@ (mov r8, r8)
 801706c:	40012c00 	.word	0x40012c00

08017070 <_ux_system_error_handler>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID   _ux_system_error_handler(UINT system_level, UINT system_context, UINT error_code)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b084      	sub	sp, #16
 8017074:	af00      	add	r7, sp, #0
 8017076:	60f8      	str	r0, [r7, #12]
 8017078:	60b9      	str	r1, [r7, #8]
 801707a:	607a      	str	r2, [r7, #4]

    /* Save the last system error code.  */
    _ux_system -> ux_system_last_error =  error_code;
 801707c:	4b0c      	ldr	r3, [pc, #48]	@ (80170b0 <_ux_system_error_handler+0x40>)
 801707e:	681b      	ldr	r3, [r3, #0]
 8017080:	687a      	ldr	r2, [r7, #4]
 8017082:	651a      	str	r2, [r3, #80]	@ 0x50
 
    /* Increment the total number of system errors.  */
    _ux_system -> ux_system_error_count++;
 8017084:	4b0a      	ldr	r3, [pc, #40]	@ (80170b0 <_ux_system_error_handler+0x40>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801708a:	3201      	adds	r2, #1
 801708c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Is there an application call back function to call ? */
    if (_ux_system -> ux_system_error_callback_function != UX_NULL)
 801708e:	4b08      	ldr	r3, [pc, #32]	@ (80170b0 <_ux_system_error_handler+0x40>)
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017094:	2b00      	cmp	r3, #0
 8017096:	d006      	beq.n	80170a6 <_ux_system_error_handler+0x36>
    {    

        /* The callback function is defined, call it.  */
        _ux_system -> ux_system_error_callback_function(system_level, system_context, error_code);
 8017098:	4b05      	ldr	r3, [pc, #20]	@ (80170b0 <_ux_system_error_handler+0x40>)
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801709e:	687a      	ldr	r2, [r7, #4]
 80170a0:	68b9      	ldr	r1, [r7, #8]
 80170a2:	68f8      	ldr	r0, [r7, #12]
 80170a4:	4798      	blx	r3
    }
}
 80170a6:	46c0      	nop			@ (mov r8, r8)
 80170a8:	46bd      	mov	sp, r7
 80170aa:	b004      	add	sp, #16
 80170ac:	bd80      	pop	{r7, pc}
 80170ae:	46c0      	nop			@ (mov r8, r8)
 80170b0:	200116a0 	.word	0x200116a0

080170b4 <_ux_system_initialize>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_system_initialize(VOID *regular_memory_pool_start, ULONG regular_memory_size, 
                            VOID *cache_safe_memory_pool_start, ULONG cache_safe_memory_size)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b08a      	sub	sp, #40	@ 0x28
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	60f8      	str	r0, [r7, #12]
 80170bc:	60b9      	str	r1, [r7, #8]
 80170be:	607a      	str	r2, [r7, #4]
 80170c0:	603b      	str	r3, [r7, #0]
UINT                status;
#endif


    /* Reset memory block */
    _ux_utility_memory_set(regular_memory_pool_start, 0, regular_memory_size); /* Use case of memset is verified. */
 80170c2:	68ba      	ldr	r2, [r7, #8]
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	2100      	movs	r1, #0
 80170c8:	0018      	movs	r0, r3
 80170ca:	f000 fc27 	bl	801791c <_ux_utility_memory_set>

    /* Set the _ux_system structure at the start of our regular memory */
    _ux_system =  (UX_SYSTEM *) regular_memory_pool_start;
 80170ce:	4b50      	ldr	r3, [pc, #320]	@ (8017210 <_ux_system_initialize+0x15c>)
 80170d0:	68fa      	ldr	r2, [r7, #12]
 80170d2:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset = sizeof(UX_SYSTEM);
 80170d4:	235c      	movs	r3, #92	@ 0x5c
 80170d6:	627b      	str	r3, [r7, #36]	@ 0x24
#endif 

#ifndef UX_HOST_SIDE_ONLY

    /* Set the _ux_system_slave structure.  */
    _ux_system_slave =  (UX_SYSTEM_SLAVE *) (((UCHAR *) regular_memory_pool_start) + memory_pool_offset);
 80170d8:	68fa      	ldr	r2, [r7, #12]
 80170da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170dc:	18d2      	adds	r2, r2, r3
 80170de:	4b4d      	ldr	r3, [pc, #308]	@ (8017214 <_ux_system_initialize+0x160>)
 80170e0:	601a      	str	r2, [r3, #0]

    /* Add to the memory offset the size of the allocated block.  */
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_SLAVE);
 80170e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170e4:	33d1      	adds	r3, #209	@ 0xd1
 80170e6:	33ff      	adds	r3, #255	@ 0xff
 80170e8:	627b      	str	r3, [r7, #36]	@ 0x24
    memory_pool_offset += (ULONG)sizeof(UX_SYSTEM_OTG);
#endif 


    /* Set the cache safe memory for the dynamic pool */
    _ux_system -> ux_system_regular_memory_pool_start =  (UX_MEMORY_BLOCK *) (((UCHAR *) regular_memory_pool_start) 
 80170ea:	4b49      	ldr	r3, [pc, #292]	@ (8017210 <_ux_system_initialize+0x15c>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	68f9      	ldr	r1, [r7, #12]
 80170f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80170f2:	188a      	adds	r2, r1, r2
 80170f4:	601a      	str	r2, [r3, #0]
                                                            + memory_pool_offset);

    /* Make sure the regular memory pool is aligned properly */
    int_memory_pool_start =   (ALIGN_TYPE) _ux_system -> ux_system_regular_memory_pool_start;
 80170f6:	4b46      	ldr	r3, [pc, #280]	@ (8017210 <_ux_system_initialize+0x15c>)
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	623b      	str	r3, [r7, #32]
    int_memory_pool_start +=  UX_ALIGN_MIN;
 80170fe:	6a3b      	ldr	r3, [r7, #32]
 8017100:	330f      	adds	r3, #15
 8017102:	623b      	str	r3, [r7, #32]
    int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8017104:	6a3b      	ldr	r3, [r7, #32]
 8017106:	220f      	movs	r2, #15
 8017108:	4393      	bics	r3, r2
 801710a:	623b      	str	r3, [r7, #32]
    
    /* Set the end of the regular memory pool.  */
    regular_memory_pool_end =  (void *) (((UCHAR *) regular_memory_pool_start) + regular_memory_size);
 801710c:	68fa      	ldr	r2, [r7, #12]
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	18d3      	adds	r3, r2, r3
 8017112:	61fb      	str	r3, [r7, #28]

    /* Check if we have memory available.  */
    if (int_memory_pool_start >= (ALIGN_TYPE)regular_memory_pool_end)
 8017114:	69fb      	ldr	r3, [r7, #28]
 8017116:	6a3a      	ldr	r2, [r7, #32]
 8017118:	429a      	cmp	r2, r3
 801711a:	d301      	bcc.n	8017120 <_ux_system_initialize+0x6c>
    {

        /* No memory available.  */
        return(UX_MEMORY_INSUFFICIENT);
 801711c:	2312      	movs	r3, #18
 801711e:	e073      	b.n	8017208 <_ux_system_initialize+0x154>
    }

    /* Now, we have a project structure allocated, save the regular memory allocation details */
    _ux_system -> ux_system_regular_memory_pool_size =     (ULONG) (((ALIGN_TYPE) regular_memory_pool_end) - int_memory_pool_start);
 8017120:	69f9      	ldr	r1, [r7, #28]
 8017122:	4b3b      	ldr	r3, [pc, #236]	@ (8017210 <_ux_system_initialize+0x15c>)
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	6a3a      	ldr	r2, [r7, #32]
 8017128:	1a8a      	subs	r2, r1, r2
 801712a:	605a      	str	r2, [r3, #4]
    _ux_system -> ux_system_regular_memory_pool_free =     _ux_system -> ux_system_regular_memory_pool_size;
 801712c:	4b38      	ldr	r3, [pc, #224]	@ (8017210 <_ux_system_initialize+0x15c>)
 801712e:	681a      	ldr	r2, [r3, #0]
 8017130:	4b37      	ldr	r3, [pc, #220]	@ (8017210 <_ux_system_initialize+0x15c>)
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	6852      	ldr	r2, [r2, #4]
 8017136:	609a      	str	r2, [r3, #8]
    _ux_system -> ux_system_regular_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 8017138:	4b35      	ldr	r3, [pc, #212]	@ (8017210 <_ux_system_initialize+0x15c>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	6a3a      	ldr	r2, [r7, #32]
 801713e:	601a      	str	r2, [r3, #0]

    /* Build the first free memory block */
    memory_block =                             _ux_system -> ux_system_regular_memory_pool_start;
 8017140:	4b33      	ldr	r3, [pc, #204]	@ (8017210 <_ux_system_initialize+0x15c>)
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	61bb      	str	r3, [r7, #24]
    memory_block -> ux_memory_block_size =     _ux_system -> ux_system_regular_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8017148:	4b31      	ldr	r3, [pc, #196]	@ (8017210 <_ux_system_initialize+0x15c>)
 801714a:	681b      	ldr	r3, [r3, #0]
 801714c:	685b      	ldr	r3, [r3, #4]
 801714e:	3b10      	subs	r3, #16
 8017150:	001a      	movs	r2, r3
 8017152:	69bb      	ldr	r3, [r7, #24]
 8017154:	601a      	str	r2, [r3, #0]
    memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 8017156:	69bb      	ldr	r3, [r7, #24]
 8017158:	2200      	movs	r2, #0
 801715a:	605a      	str	r2, [r3, #4]

    /* Check the definition of the cache safe pool. If the application or controller do not require any cache safe memory,
       define the cached safe memory region as the regular memory region.  */
    if (cache_safe_memory_pool_start == UX_NULL)
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d112      	bne.n	8017188 <_ux_system_initialize+0xd4>
    {

        /* Cache safe memory is the same as regular memory.  */
        _ux_system -> ux_system_cache_safe_memory_pool_size =  _ux_system -> ux_system_regular_memory_pool_size;
 8017162:	4b2b      	ldr	r3, [pc, #172]	@ (8017210 <_ux_system_initialize+0x15c>)
 8017164:	681a      	ldr	r2, [r3, #0]
 8017166:	4b2a      	ldr	r3, [pc, #168]	@ (8017210 <_ux_system_initialize+0x15c>)
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	6852      	ldr	r2, [r2, #4]
 801716c:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =  _ux_system -> ux_system_regular_memory_pool_free;
 801716e:	4b28      	ldr	r3, [pc, #160]	@ (8017210 <_ux_system_initialize+0x15c>)
 8017170:	681a      	ldr	r2, [r3, #0]
 8017172:	4b27      	ldr	r3, [pc, #156]	@ (8017210 <_ux_system_initialize+0x15c>)
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	6892      	ldr	r2, [r2, #8]
 8017178:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start = _ux_system -> ux_system_regular_memory_pool_start;
 801717a:	4b25      	ldr	r3, [pc, #148]	@ (8017210 <_ux_system_initialize+0x15c>)
 801717c:	681a      	ldr	r2, [r3, #0]
 801717e:	4b24      	ldr	r3, [pc, #144]	@ (8017210 <_ux_system_initialize+0x15c>)
 8017180:	681b      	ldr	r3, [r3, #0]
 8017182:	6812      	ldr	r2, [r2, #0]
 8017184:	60da      	str	r2, [r3, #12]
 8017186:	e02f      	b.n	80171e8 <_ux_system_initialize+0x134>
    }
    else
    {
    
        /* Make sure the cache safe memory pool is aligned properly */
        int_memory_pool_start =   (ALIGN_TYPE) cache_safe_memory_pool_start;
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	623b      	str	r3, [r7, #32]
        int_memory_pool_start +=  UX_ALIGN_MIN;
 801718c:	6a3b      	ldr	r3, [r7, #32]
 801718e:	330f      	adds	r3, #15
 8017190:	623b      	str	r3, [r7, #32]
        int_memory_pool_start &=  ~((ALIGN_TYPE)UX_ALIGN_MIN);
 8017192:	6a3b      	ldr	r3, [r7, #32]
 8017194:	220f      	movs	r2, #15
 8017196:	4393      	bics	r3, r2
 8017198:	623b      	str	r3, [r7, #32]
    
        /* Save the cache safe memory allocation details */
        _ux_system -> ux_system_cache_safe_memory_pool_size =     cache_safe_memory_size - UX_ALIGN_MIN;
 801719a:	4b1d      	ldr	r3, [pc, #116]	@ (8017210 <_ux_system_initialize+0x15c>)
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	683a      	ldr	r2, [r7, #0]
 80171a0:	3a0f      	subs	r2, #15
 80171a2:	611a      	str	r2, [r3, #16]
        _ux_system -> ux_system_cache_safe_memory_pool_free =     _ux_system -> ux_system_cache_safe_memory_pool_size;
 80171a4:	4b1a      	ldr	r3, [pc, #104]	@ (8017210 <_ux_system_initialize+0x15c>)
 80171a6:	681a      	ldr	r2, [r3, #0]
 80171a8:	4b19      	ldr	r3, [pc, #100]	@ (8017210 <_ux_system_initialize+0x15c>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	6912      	ldr	r2, [r2, #16]
 80171ae:	615a      	str	r2, [r3, #20]
        _ux_system -> ux_system_cache_safe_memory_pool_start =    (UX_MEMORY_BLOCK *) int_memory_pool_start;
 80171b0:	4b17      	ldr	r3, [pc, #92]	@ (8017210 <_ux_system_initialize+0x15c>)
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	6a3a      	ldr	r2, [r7, #32]
 80171b6:	60da      	str	r2, [r3, #12]
    
        /* Reset this memory block */
        _ux_utility_memory_set(_ux_system -> ux_system_cache_safe_memory_pool_start, 0, _ux_system -> ux_system_cache_safe_memory_pool_size); /* Use case of memset is verified. */
 80171b8:	4b15      	ldr	r3, [pc, #84]	@ (8017210 <_ux_system_initialize+0x15c>)
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	68d8      	ldr	r0, [r3, #12]
 80171be:	4b14      	ldr	r3, [pc, #80]	@ (8017210 <_ux_system_initialize+0x15c>)
 80171c0:	681b      	ldr	r3, [r3, #0]
 80171c2:	691b      	ldr	r3, [r3, #16]
 80171c4:	001a      	movs	r2, r3
 80171c6:	2100      	movs	r1, #0
 80171c8:	f000 fba8 	bl	801791c <_ux_utility_memory_set>
    
        /* Build the first free memory block */
        memory_block =                             _ux_system -> ux_system_cache_safe_memory_pool_start;
 80171cc:	4b10      	ldr	r3, [pc, #64]	@ (8017210 <_ux_system_initialize+0x15c>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	68db      	ldr	r3, [r3, #12]
 80171d2:	61bb      	str	r3, [r7, #24]
        memory_block -> ux_memory_block_size =     _ux_system -> ux_system_cache_safe_memory_pool_size - (ULONG)sizeof(UX_MEMORY_BLOCK);
 80171d4:	4b0e      	ldr	r3, [pc, #56]	@ (8017210 <_ux_system_initialize+0x15c>)
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	691b      	ldr	r3, [r3, #16]
 80171da:	3b10      	subs	r3, #16
 80171dc:	001a      	movs	r2, r3
 80171de:	69bb      	ldr	r3, [r7, #24]
 80171e0:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_status =   UX_MEMORY_UNUSED;
 80171e2:	69bb      	ldr	r3, [r7, #24]
 80171e4:	2200      	movs	r2, #0
 80171e6:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_STANDALONE)

    /* Create the Mutex object used by USBX to control critical sections.  */
    status =  _ux_system_mutex_create(&_ux_system -> ux_system_mutex, "ux_system_mutex");
 80171e8:	4b09      	ldr	r3, [pc, #36]	@ (8017210 <_ux_system_initialize+0x15c>)
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	331c      	adds	r3, #28
 80171ee:	4a0a      	ldr	r2, [pc, #40]	@ (8017218 <_ux_system_initialize+0x164>)
 80171f0:	0011      	movs	r1, r2
 80171f2:	0018      	movs	r0, r3
 80171f4:	f000 fbae 	bl	8017954 <_ux_utility_mutex_create>
 80171f8:	0003      	movs	r3, r0
 80171fa:	617b      	str	r3, [r7, #20]
    if(status != UX_SUCCESS)
 80171fc:	697b      	ldr	r3, [r7, #20]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d001      	beq.n	8017206 <_ux_system_initialize+0x152>
        return(UX_MUTEX_ERROR);
 8017202:	2317      	movs	r3, #23
 8017204:	e000      	b.n	8017208 <_ux_system_initialize+0x154>
#endif

    return(UX_SUCCESS);
 8017206:	2300      	movs	r3, #0
}
 8017208:	0018      	movs	r0, r3
 801720a:	46bd      	mov	sp, r7
 801720c:	b00a      	add	sp, #40	@ 0x28
 801720e:	bd80      	pop	{r7, pc}
 8017210:	200116a0 	.word	0x200116a0
 8017214:	200116a4 	.word	0x200116a4
 8017218:	0801e340 	.word	0x0801e340

0801721c <_ux_utility_delay_ms>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_delay_ms(ULONG ms_wait)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b084      	sub	sp, #16
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
    while(_ux_utility_time_elapsed(ticks, _ux_utility_time_get()) <
            UX_MS_TO_TICK_NON_ZERO(ms_wait));
#else

    /* translate ms into ticks. */
    ticks = (ULONG)(ms_wait * UX_PERIODIC_RATE) / 1000;
 8017224:	687b      	ldr	r3, [r7, #4]
 8017226:	2264      	movs	r2, #100	@ 0x64
 8017228:	4353      	muls	r3, r2
 801722a:	22fa      	movs	r2, #250	@ 0xfa
 801722c:	0091      	lsls	r1, r2, #2
 801722e:	0018      	movs	r0, r3
 8017230:	f7ef f908 	bl	8006444 <__udivsi3>
 8017234:	0003      	movs	r3, r0
 8017236:	60fb      	str	r3, [r7, #12]
    
    /* For safety add 1 to ticks.  */
    ticks++;
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	3301      	adds	r3, #1
 801723c:	60fb      	str	r3, [r7, #12]

    /* Call ThreadX sleep function.  */
    tx_thread_sleep(ticks);
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	0018      	movs	r0, r3
 8017242:	f7fa fcfd 	bl	8011c40 <_tx_thread_sleep>
#endif

    /* Return completion status.  */
    return;
 8017246:	46c0      	nop			@ (mov r8, r8)
}
 8017248:	46bd      	mov	sp, r7
 801724a:	b004      	add	sp, #16
 801724c:	bd80      	pop	{r7, pc}

0801724e <_ux_utility_descriptor_parse>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_descriptor_parse(UCHAR * raw_descriptor, UCHAR * descriptor_structure,
                        UINT descriptor_entries, UCHAR * descriptor)
{
 801724e:	b580      	push	{r7, lr}
 8017250:	b084      	sub	sp, #16
 8017252:	af00      	add	r7, sp, #0
 8017254:	60f8      	str	r0, [r7, #12]
 8017256:	60b9      	str	r1, [r7, #8]
 8017258:	607a      	str	r2, [r7, #4]
 801725a:	603b      	str	r3, [r7, #0]

    /* Loop on all the entries in this descriptor.  */
    while(descriptor_entries--)
 801725c:	e028      	b.n	80172b0 <_ux_utility_descriptor_parse+0x62>
    {

        /* Get the length of that component.  */
        switch(*descriptor_structure++)
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	1c5a      	adds	r2, r3, #1
 8017262:	60ba      	str	r2, [r7, #8]
 8017264:	781b      	ldrb	r3, [r3, #0]
 8017266:	2b02      	cmp	r3, #2
 8017268:	d00c      	beq.n	8017284 <_ux_utility_descriptor_parse+0x36>
 801726a:	2b04      	cmp	r3, #4
 801726c:	d115      	bne.n	801729a <_ux_utility_descriptor_parse+0x4c>

        /* Check the size then build the component from the source and
           insert it into the target descriptor.  */
        case 4:

            *((ULONG *) descriptor) =  _ux_utility_long_get(raw_descriptor);
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	0018      	movs	r0, r3
 8017272:	f000 f87d 	bl	8017370 <_ux_utility_long_get>
 8017276:	0002      	movs	r2, r0
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	601a      	str	r2, [r3, #0]
            raw_descriptor +=  4;
 801727c:	68fb      	ldr	r3, [r7, #12]
 801727e:	3304      	adds	r3, #4
 8017280:	60fb      	str	r3, [r7, #12]
            break;                   
 8017282:	e012      	b.n	80172aa <_ux_utility_descriptor_parse+0x5c>

        case 2:

            *((ULONG *) descriptor) = (ULONG) _ux_utility_short_get(raw_descriptor);
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	0018      	movs	r0, r3
 8017288:	f000 fc1d 	bl	8017ac6 <_ux_utility_short_get>
 801728c:	0002      	movs	r2, r0
 801728e:	683b      	ldr	r3, [r7, #0]
 8017290:	601a      	str	r2, [r3, #0]
            raw_descriptor += 2;
 8017292:	68fb      	ldr	r3, [r7, #12]
 8017294:	3302      	adds	r3, #2
 8017296:	60fb      	str	r3, [r7, #12]
            break;                   
 8017298:	e007      	b.n	80172aa <_ux_utility_descriptor_parse+0x5c>

        default:

            *((ULONG *) descriptor) =  (ULONG) *raw_descriptor;
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	781b      	ldrb	r3, [r3, #0]
 801729e:	001a      	movs	r2, r3
 80172a0:	683b      	ldr	r3, [r7, #0]
 80172a2:	601a      	str	r2, [r3, #0]
            raw_descriptor++;
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	3301      	adds	r3, #1
 80172a8:	60fb      	str	r3, [r7, #12]
        }

        /* Add the size of the component to the destination.  */
        descriptor +=  4;
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	3304      	adds	r3, #4
 80172ae:	603b      	str	r3, [r7, #0]
    while(descriptor_entries--)
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	1e5a      	subs	r2, r3, #1
 80172b4:	607a      	str	r2, [r7, #4]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d1d1      	bne.n	801725e <_ux_utility_descriptor_parse+0x10>
    }

    /* Return to caller.  */
    return;
 80172ba:	46c0      	nop			@ (mov r8, r8)
}
 80172bc:	46bd      	mov	sp, r7
 80172be:	b004      	add	sp, #16
 80172c0:	bd80      	pop	{r7, pc}

080172c2 <_ux_utility_event_flags_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_create(UX_EVENT_FLAGS_GROUP*group_ptr, CHAR *name)
{
 80172c2:	b580      	push	{r7, lr}
 80172c4:	b084      	sub	sp, #16
 80172c6:	af00      	add	r7, sp, #0
 80172c8:	6078      	str	r0, [r7, #4]
 80172ca:	6039      	str	r1, [r7, #0]

UINT    status;

    /* Call ThreadX to create the event flags.  */
    status =  tx_event_flags_create(group_ptr, name);
 80172cc:	6839      	ldr	r1, [r7, #0]
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2224      	movs	r2, #36	@ 0x24
 80172d2:	0018      	movs	r0, r3
 80172d4:	f7fb fcf8 	bl	8012cc8 <_txe_event_flags_create>
 80172d8:	0003      	movs	r3, r0
 80172da:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d004      	beq.n	80172ec <_ux_utility_event_flags_create+0x2a>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_EVENT_ERROR);
 80172e2:	2218      	movs	r2, #24
 80172e4:	2108      	movs	r1, #8
 80172e6:	2002      	movs	r0, #2
 80172e8:	f7ff fec2 	bl	8017070 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_EVENT_ERROR, group_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 80172ec:	68fb      	ldr	r3, [r7, #12]
}
 80172ee:	0018      	movs	r0, r3
 80172f0:	46bd      	mov	sp, r7
 80172f2:	b004      	add	sp, #16
 80172f4:	bd80      	pop	{r7, pc}

080172f6 <_ux_utility_event_flags_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_delete(UX_EVENT_FLAGS_GROUP*group_ptr)            
{
 80172f6:	b580      	push	{r7, lr}
 80172f8:	b084      	sub	sp, #16
 80172fa:	af00      	add	r7, sp, #0
 80172fc:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to delete the event flags.  */
    status =  tx_event_flags_delete(group_ptr);
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	0018      	movs	r0, r3
 8017302:	f7fb fd73 	bl	8012dec <_txe_event_flags_delete>
 8017306:	0003      	movs	r3, r0
 8017308:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 801730a:	68fb      	ldr	r3, [r7, #12]
}
 801730c:	0018      	movs	r0, r3
 801730e:	46bd      	mov	sp, r7
 8017310:	b004      	add	sp, #16
 8017312:	bd80      	pop	{r7, pc}

08017314 <_ux_utility_event_flags_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_get(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG requested_flags, 
                                        UINT get_option, ULONG *actual_flags_ptr, ULONG wait_option)
{
 8017314:	b590      	push	{r4, r7, lr}
 8017316:	b089      	sub	sp, #36	@ 0x24
 8017318:	af02      	add	r7, sp, #8
 801731a:	60f8      	str	r0, [r7, #12]
 801731c:	60b9      	str	r1, [r7, #8]
 801731e:	607a      	str	r2, [r7, #4]
 8017320:	603b      	str	r3, [r7, #0]

UINT    status;
ULONG   local_actual_flags_ptr;

    /* Call ThreadX to get the event flags.  */
    status =  tx_event_flags_get(group_ptr, requested_flags, get_option, &local_actual_flags_ptr, wait_option);
 8017322:	2310      	movs	r3, #16
 8017324:	18fc      	adds	r4, r7, r3
 8017326:	687a      	ldr	r2, [r7, #4]
 8017328:	68b9      	ldr	r1, [r7, #8]
 801732a:	68f8      	ldr	r0, [r7, #12]
 801732c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801732e:	9300      	str	r3, [sp, #0]
 8017330:	0023      	movs	r3, r4
 8017332:	f7fb fd99 	bl	8012e68 <_txe_event_flags_get>
 8017336:	0003      	movs	r3, r0
 8017338:	617b      	str	r3, [r7, #20]

    /* Update the actual flags.  */
    *actual_flags_ptr = local_actual_flags_ptr;
 801733a:	693a      	ldr	r2, [r7, #16]
 801733c:	683b      	ldr	r3, [r7, #0]
 801733e:	601a      	str	r2, [r3, #0]
    
    /* Return completion status.  */
    return(status);
 8017340:	697b      	ldr	r3, [r7, #20]
}
 8017342:	0018      	movs	r0, r3
 8017344:	46bd      	mov	sp, r7
 8017346:	b007      	add	sp, #28
 8017348:	bd90      	pop	{r4, r7, pc}

0801734a <_ux_utility_event_flags_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_event_flags_set(UX_EVENT_FLAGS_GROUP*group_ptr, ULONG flags_to_set,
                                  UINT set_option)
{
 801734a:	b580      	push	{r7, lr}
 801734c:	b086      	sub	sp, #24
 801734e:	af00      	add	r7, sp, #0
 8017350:	60f8      	str	r0, [r7, #12]
 8017352:	60b9      	str	r1, [r7, #8]
 8017354:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to set the event flags.  */
    status =  tx_event_flags_set(group_ptr, flags_to_set, set_option);
 8017356:	687a      	ldr	r2, [r7, #4]
 8017358:	68b9      	ldr	r1, [r7, #8]
 801735a:	68fb      	ldr	r3, [r7, #12]
 801735c:	0018      	movs	r0, r3
 801735e:	f7fb fddb 	bl	8012f18 <_txe_event_flags_set>
 8017362:	0003      	movs	r3, r0
 8017364:	617b      	str	r3, [r7, #20]

    /* Return completion status.  */
    return(status);
 8017366:	697b      	ldr	r3, [r7, #20]
}
 8017368:	0018      	movs	r0, r3
 801736a:	46bd      	mov	sp, r7
 801736c:	b006      	add	sp, #24
 801736e:	bd80      	pop	{r7, pc}

08017370 <_ux_utility_long_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get(UCHAR * address)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b084      	sub	sp, #16
 8017374:	af00      	add	r7, sp, #0
 8017376:	6078      	str	r0, [r7, #4]
ULONG    value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =   (ULONG) *address++;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	1c5a      	adds	r2, r3, #1
 801737c:	607a      	str	r2, [r7, #4]
 801737e:	781b      	ldrb	r3, [r3, #0]
 8017380:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 8;
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	1c5a      	adds	r2, r3, #1
 8017386:	607a      	str	r2, [r7, #4]
 8017388:	781b      	ldrb	r3, [r3, #0]
 801738a:	021b      	lsls	r3, r3, #8
 801738c:	68fa      	ldr	r2, [r7, #12]
 801738e:	4313      	orrs	r3, r2
 8017390:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address++ << 16;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	1c5a      	adds	r2, r3, #1
 8017396:	607a      	str	r2, [r7, #4]
 8017398:	781b      	ldrb	r3, [r3, #0]
 801739a:	041b      	lsls	r3, r3, #16
 801739c:	68fa      	ldr	r2, [r7, #12]
 801739e:	4313      	orrs	r3, r2
 80173a0:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG)*address << 24;
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	781b      	ldrb	r3, [r3, #0]
 80173a6:	061b      	lsls	r3, r3, #24
 80173a8:	68fa      	ldr	r2, [r7, #12]
 80173aa:	4313      	orrs	r3, r2
 80173ac:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 80173ae:	68fb      	ldr	r3, [r7, #12]
}
 80173b0:	0018      	movs	r0, r3
 80173b2:	46bd      	mov	sp, r7
 80173b4:	b004      	add	sp, #16
 80173b6:	bd80      	pop	{r7, pc}

080173b8 <_ux_utility_long_get_big_endian>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_long_get_big_endian(UCHAR * address)
{
 80173b8:	b580      	push	{r7, lr}
 80173ba:	b084      	sub	sp, #16
 80173bc:	af00      	add	r7, sp, #0
 80173be:	6078      	str	r0, [r7, #4]

ULONG  value;


    /* We read a byte at a time from the address.  */
    value =  (ULONG) ((*address++) << 24);
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	1c5a      	adds	r2, r3, #1
 80173c4:	607a      	str	r2, [r7, #4]
 80173c6:	781b      	ldrb	r3, [r3, #0]
 80173c8:	061b      	lsls	r3, r3, #24
 80173ca:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG) ((*address++) << 16);
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	1c5a      	adds	r2, r3, #1
 80173d0:	607a      	str	r2, [r7, #4]
 80173d2:	781b      	ldrb	r3, [r3, #0]
 80173d4:	041b      	lsls	r3, r3, #16
 80173d6:	68fa      	ldr	r2, [r7, #12]
 80173d8:	4313      	orrs	r3, r2
 80173da:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG) ((*address++) << 8);
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	1c5a      	adds	r2, r3, #1
 80173e0:	607a      	str	r2, [r7, #4]
 80173e2:	781b      	ldrb	r3, [r3, #0]
 80173e4:	021b      	lsls	r3, r3, #8
 80173e6:	68fa      	ldr	r2, [r7, #12]
 80173e8:	4313      	orrs	r3, r2
 80173ea:	60fb      	str	r3, [r7, #12]
    value |=  (ULONG) *address;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	781b      	ldrb	r3, [r3, #0]
 80173f0:	001a      	movs	r2, r3
 80173f2:	68fb      	ldr	r3, [r7, #12]
 80173f4:	4313      	orrs	r3, r2
 80173f6:	60fb      	str	r3, [r7, #12]

    /* Return 32-bit value.  */
    return(value);
 80173f8:	68fb      	ldr	r3, [r7, #12]
}
 80173fa:	0018      	movs	r0, r3
 80173fc:	46bd      	mov	sp, r7
 80173fe:	b004      	add	sp, #16
 8017400:	bd80      	pop	{r7, pc}

08017402 <_ux_utility_long_put>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put(UCHAR * address, ULONG value)
{
 8017402:	b580      	push	{r7, lr}
 8017404:	b082      	sub	sp, #8
 8017406:	af00      	add	r7, sp, #0
 8017408:	6078      	str	r0, [r7, #4]
 801740a:	6039      	str	r1, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	1c5a      	adds	r2, r3, #1
 8017410:	607a      	str	r2, [r7, #4]
 8017412:	683a      	ldr	r2, [r7, #0]
 8017414:	b2d2      	uxtb	r2, r2
 8017416:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8017418:	683b      	ldr	r3, [r7, #0]
 801741a:	0a19      	lsrs	r1, r3, #8
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	1c5a      	adds	r2, r3, #1
 8017420:	607a      	str	r2, [r7, #4]
 8017422:	b2ca      	uxtb	r2, r1
 8017424:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 16) & 0xff);
 8017426:	683b      	ldr	r3, [r7, #0]
 8017428:	0c19      	lsrs	r1, r3, #16
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	1c5a      	adds	r2, r3, #1
 801742e:	607a      	str	r2, [r7, #4]
 8017430:	b2ca      	uxtb	r2, r1
 8017432:	701a      	strb	r2, [r3, #0]
    *address =    (UCHAR) ((value >> 24) & 0xff);
 8017434:	683b      	ldr	r3, [r7, #0]
 8017436:	0e1b      	lsrs	r3, r3, #24
 8017438:	b2da      	uxtb	r2, r3
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 801743e:	46c0      	nop			@ (mov r8, r8)
}
 8017440:	46bd      	mov	sp, r7
 8017442:	b002      	add	sp, #8
 8017444:	bd80      	pop	{r7, pc}

08017446 <_ux_utility_long_put_big_endian>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_long_put_big_endian(UCHAR * address, ULONG value)
{
 8017446:	b580      	push	{r7, lr}
 8017448:	b084      	sub	sp, #16
 801744a:	af00      	add	r7, sp, #0
 801744c:	6078      	str	r0, [r7, #4]
 801744e:	6039      	str	r1, [r7, #0]

ULONG   low_word_value;
ULONG   high_word_value;

    /* First we swap the value words.  */
    low_word_value =  value >> 16;
 8017450:	683b      	ldr	r3, [r7, #0]
 8017452:	0c1b      	lsrs	r3, r3, #16
 8017454:	60fb      	str	r3, [r7, #12]
    high_word_value =  value << 16;
 8017456:	683b      	ldr	r3, [r7, #0]
 8017458:	041b      	lsls	r3, r3, #16
 801745a:	60bb      	str	r3, [r7, #8]
    value =  high_word_value | low_word_value;
 801745c:	68ba      	ldr	r2, [r7, #8]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	4313      	orrs	r3, r2
 8017462:	603b      	str	r3, [r7, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) ((value >> 8) & 0xff);
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	0a19      	lsrs	r1, r3, #8
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	1c5a      	adds	r2, r3, #1
 801746c:	607a      	str	r2, [r7, #4]
 801746e:	b2ca      	uxtb	r2, r1
 8017470:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) (value & 0xff);
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	1c5a      	adds	r2, r3, #1
 8017476:	607a      	str	r2, [r7, #4]
 8017478:	683a      	ldr	r2, [r7, #0]
 801747a:	b2d2      	uxtb	r2, r2
 801747c:	701a      	strb	r2, [r3, #0]
    *address++ =  (UCHAR) ((value >> 24 ) & 0xff);
 801747e:	683b      	ldr	r3, [r7, #0]
 8017480:	0e19      	lsrs	r1, r3, #24
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	1c5a      	adds	r2, r3, #1
 8017486:	607a      	str	r2, [r7, #4]
 8017488:	b2ca      	uxtb	r2, r1
 801748a:	701a      	strb	r2, [r3, #0]
    *address   =  (UCHAR) ((value >> 16) & 0xff);
 801748c:	683b      	ldr	r3, [r7, #0]
 801748e:	0c1b      	lsrs	r3, r3, #16
 8017490:	b2da      	uxtb	r2, r3
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	701a      	strb	r2, [r3, #0]

    /* Return to caller.  */
    return;
 8017496:	46c0      	nop			@ (mov r8, r8)
}
 8017498:	46bd      	mov	sp, r7
 801749a:	b004      	add	sp, #16
 801749c:	bd80      	pop	{r7, pc}
	...

080174a0 <_ux_utility_memory_allocate>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  *_ux_utility_memory_allocate(ULONG memory_alignment, ULONG memory_cache_flag,
                                   ULONG memory_size_requested)
{
 80174a0:	b580      	push	{r7, lr}
 80174a2:	b08c      	sub	sp, #48	@ 0x30
 80174a4:	af00      	add	r7, sp, #0
 80174a6:	60f8      	str	r0, [r7, #12]
 80174a8:	60b9      	str	r1, [r7, #8]
 80174aa:	607a      	str	r2, [r7, #4]
UCHAR               *memory_buffer;
ALIGN_TYPE          int_memory_buffer;


    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 80174ac:	4b7f      	ldr	r3, [pc, #508]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 80174ae:	681b      	ldr	r3, [r3, #0]
 80174b0:	331c      	adds	r3, #28
 80174b2:	0018      	movs	r0, r3
 80174b4:	f000 fa75 	bl	80179a2 <_ux_utility_mutex_on>
    }

#else

    /* Check if safe alignment requested, in this case switch to UX_NO_ALIGN.  */
    if (memory_alignment == UX_SAFE_ALIGN)
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	3301      	adds	r3, #1
 80174bc:	d101      	bne.n	80174c2 <_ux_utility_memory_allocate+0x22>
        memory_alignment = UX_NO_ALIGN;
 80174be:	2300      	movs	r3, #0
 80174c0:	60fb      	str	r3, [r7, #12]
    
#endif

    /* Ensure the alignment meats the minimum.  */
    if (memory_alignment < UX_ALIGN_MIN)
 80174c2:	68fb      	ldr	r3, [r7, #12]
 80174c4:	2b0e      	cmp	r3, #14
 80174c6:	d801      	bhi.n	80174cc <_ux_utility_memory_allocate+0x2c>
        memory_alignment =  UX_ALIGN_MIN;
 80174c8:	230f      	movs	r3, #15
 80174ca:	60fb      	str	r3, [r7, #12]

    /* Adjust the memory alignment since our macros are one minus the desired alignment.
       Also determine the amount of extra memory we need for the alignment, which is one
       minus the actual alignment.  */
    memory_for_alignment =  memory_alignment;
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	627b      	str	r3, [r7, #36]	@ 0x24
    memory_alignment++;
 80174d0:	68fb      	ldr	r3, [r7, #12]
 80174d2:	3301      	adds	r3, #1
 80174d4:	60fb      	str	r3, [r7, #12]
       now is that the memory block might not be a size that is a multiple of 16, so we need
       to add the amount of memory required such that the memory buffer after the block has 
       the correct alignment. For example, if the memory block has a size of 24, then we need
       to make sure it is placed on an 8-byte alignment that is after a 16-byte alignment so
       that the memory right after the memory block is 16-byte aligned (8 + 24 = 32).  */
    memory_size_requested =  (memory_size_requested +    UX_ALIGN_MIN) & (~(ULONG)UX_ALIGN_MIN);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	330f      	adds	r3, #15
 80174da:	220f      	movs	r2, #15
 80174dc:	4393      	bics	r3, r2
 80174de:	607b      	str	r3, [r7, #4]
    /* Try to find the best block for this memory by requesting the maximum amount of
       memory we'll need which is calculated as follows: the amount memory requested by
       the caller plus the maximum amount of memory wasted due to alignment plus 2 memory
       blocks structs - one for the new memory block we'll create for the user block and one
       that we might create if there is extra memory after doing the alignment.  */
    memory_block =  _ux_utility_memory_free_block_best_get(memory_cache_flag, memory_size_requested + memory_for_alignment + (ULONG)sizeof(UX_MEMORY_BLOCK));
 80174e0:	687a      	ldr	r2, [r7, #4]
 80174e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174e4:	18d3      	adds	r3, r2, r3
 80174e6:	3310      	adds	r3, #16
 80174e8:	001a      	movs	r2, r3
 80174ea:	68bb      	ldr	r3, [r7, #8]
 80174ec:	0011      	movs	r1, r2
 80174ee:	0018      	movs	r0, r3
 80174f0:	f000 f9d4 	bl	801789c <_ux_utility_memory_free_block_best_get>
 80174f4:	0003      	movs	r3, r0
 80174f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* If the block returned is NULL, there is no free memory in the pool
       for that size. */
    if (memory_block == UX_NULL)
 80174f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d10c      	bne.n	8017518 <_ux_utility_memory_allocate+0x78>
    {

        /* Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 80174fe:	4b6b      	ldr	r3, [pc, #428]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 8017500:	681b      	ldr	r3, [r3, #0]
 8017502:	331c      	adds	r3, #28
 8017504:	0018      	movs	r0, r3
 8017506:	f000 fa40 	bl	801798a <_ux_utility_mutex_off>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, memory_size_requested, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_INSUFFICIENT);
 801750a:	2212      	movs	r2, #18
 801750c:	2108      	movs	r1, #8
 801750e:	2002      	movs	r0, #2
 8017510:	f7ff fdae 	bl	8017070 <_ux_system_error_handler>

        /* Return NULL to indicate no block was found.  */
        return(UX_NULL);
 8017514:	2300      	movs	r3, #0
 8017516:	e0c5      	b.n	80176a4 <_ux_utility_memory_allocate+0x204>
    }

    /* Get the memory buffer for this block.  */
    int_memory_buffer = (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 8017518:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801751a:	3310      	adds	r3, #16
 801751c:	623b      	str	r3, [r7, #32]

    /* Are we already aligned?  */
    if ((int_memory_buffer & (memory_alignment - 1)) == 0)
 801751e:	68fb      	ldr	r3, [r7, #12]
 8017520:	3b01      	subs	r3, #1
 8017522:	6a3a      	ldr	r2, [r7, #32]
 8017524:	4013      	ands	r3, r2
 8017526:	d127      	bne.n	8017578 <_ux_utility_memory_allocate+0xd8>
    {

        /* Setup the new memory block.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	3310      	adds	r3, #16
 801752c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801752e:	18d3      	adds	r3, r2, r3
 8017530:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 8017532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017534:	689a      	ldr	r2, [r3, #8]
 8017536:	69fb      	ldr	r3, [r7, #28]
 8017538:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 801753a:	69fb      	ldr	r3, [r7, #28]
 801753c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801753e:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size - memory_size_requested - (ULONG)sizeof(UX_MEMORY_BLOCK);
 8017540:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017542:	681a      	ldr	r2, [r3, #0]
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	1ad3      	subs	r3, r2, r3
 8017548:	3b10      	subs	r3, #16
 801754a:	001a      	movs	r2, r3
 801754c:	69fb      	ldr	r3, [r7, #28]
 801754e:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8017550:	69fb      	ldr	r3, [r7, #28]
 8017552:	2200      	movs	r2, #0
 8017554:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        memory_block -> ux_memory_block_size =  memory_size_requested;
 8017556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017558:	687a      	ldr	r2, [r7, #4]
 801755a:	601a      	str	r2, [r3, #0]
        memory_block -> ux_memory_block_next =  new_memory_block;
 801755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801755e:	69fa      	ldr	r2, [r7, #28]
 8017560:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 8017562:	68bb      	ldr	r3, [r7, #8]
 8017564:	2280      	movs	r2, #128	@ 0x80
 8017566:	0612      	lsls	r2, r2, #24
 8017568:	431a      	orrs	r2, r3
 801756a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801756c:	605a      	str	r2, [r3, #4]

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801756e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017570:	681b      	ldr	r3, [r3, #0]
 8017572:	3310      	adds	r3, #16
 8017574:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017576:	e05f      	b.n	8017638 <_ux_utility_memory_allocate+0x198>
    {

        /* Align the buffer. The first thing we do is increment by the size of a
           memory block because we have to make sure we have enough memory for at
           least that.  */
        int_memory_buffer +=  (ULONG)sizeof(UX_MEMORY_BLOCK);
 8017578:	6a3b      	ldr	r3, [r7, #32]
 801757a:	3310      	adds	r3, #16
 801757c:	623b      	str	r3, [r7, #32]
        int_memory_buffer +=  memory_alignment - 1;
 801757e:	68fa      	ldr	r2, [r7, #12]
 8017580:	6a3b      	ldr	r3, [r7, #32]
 8017582:	18d3      	adds	r3, r2, r3
 8017584:	3b01      	subs	r3, #1
 8017586:	623b      	str	r3, [r7, #32]
        int_memory_buffer &=  ~(((ALIGN_TYPE) memory_alignment) - 1);
 8017588:	68fb      	ldr	r3, [r7, #12]
 801758a:	425a      	negs	r2, r3
 801758c:	6a3b      	ldr	r3, [r7, #32]
 801758e:	4013      	ands	r3, r2
 8017590:	623b      	str	r3, [r7, #32]

        /* Setup the new memory block. Note that its size is updated again later.  */
        new_memory_block =  (UX_MEMORY_BLOCK *) (int_memory_buffer - (ULONG)sizeof(UX_MEMORY_BLOCK));
 8017592:	6a3b      	ldr	r3, [r7, #32]
 8017594:	3b10      	subs	r3, #16
 8017596:	61fb      	str	r3, [r7, #28]
        new_memory_block -> ux_memory_block_previous =  memory_block;
 8017598:	69fb      	ldr	r3, [r7, #28]
 801759a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801759c:	60da      	str	r2, [r3, #12]
        new_memory_block -> ux_memory_block_next =  memory_block -> ux_memory_block_next;
 801759e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175a0:	689a      	ldr	r2, [r3, #8]
 80175a2:	69fb      	ldr	r3, [r7, #28]
 80175a4:	609a      	str	r2, [r3, #8]
        new_memory_block -> ux_memory_block_size =  memory_block -> ux_memory_block_size;
 80175a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175a8:	681a      	ldr	r2, [r3, #0]
 80175aa:	69fb      	ldr	r3, [r7, #28]
 80175ac:	601a      	str	r2, [r3, #0]
        new_memory_block -> ux_memory_block_status =  UX_MEMORY_USED | memory_cache_flag;
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	2280      	movs	r2, #128	@ 0x80
 80175b2:	0612      	lsls	r2, r2, #24
 80175b4:	431a      	orrs	r2, r3
 80175b6:	69fb      	ldr	r3, [r7, #28]
 80175b8:	605a      	str	r2, [r3, #4]

        /* Update the current memory block.  */
        int_memory_buffer =  (ALIGN_TYPE) ((UCHAR *) memory_block + sizeof(UX_MEMORY_BLOCK));
 80175ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175bc:	3310      	adds	r3, #16
 80175be:	623b      	str	r3, [r7, #32]
        memory_block -> ux_memory_block_next =  new_memory_block;
 80175c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175c2:	69fa      	ldr	r2, [r7, #28]
 80175c4:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size =  (ULONG) ((ALIGN_TYPE) new_memory_block - int_memory_buffer);
 80175c6:	69fa      	ldr	r2, [r7, #28]
 80175c8:	6a3b      	ldr	r3, [r7, #32]
 80175ca:	1ad2      	subs	r2, r2, r3
 80175cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175ce:	601a      	str	r2, [r3, #0]

        /* Update the new memory block's size.  */
        new_memory_block -> ux_memory_block_size -=  (memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK));
 80175d0:	69fb      	ldr	r3, [r7, #28]
 80175d2:	681a      	ldr	r2, [r3, #0]
 80175d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	1ad3      	subs	r3, r2, r3
 80175da:	3b10      	subs	r3, #16
 80175dc:	001a      	movs	r2, r3
 80175de:	69fb      	ldr	r3, [r7, #28]
 80175e0:	601a      	str	r2, [r3, #0]

        /* Calculate how much memory is leftover in the new memory block after doing
           the alignment.  */
        leftover =  new_memory_block -> ux_memory_block_size - memory_size_requested;
 80175e2:	69fb      	ldr	r3, [r7, #28]
 80175e4:	681a      	ldr	r2, [r3, #0]
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	1ad3      	subs	r3, r2, r3
 80175ea:	61bb      	str	r3, [r7, #24]

        /* Can we fit another block after the new block? */
        if (leftover > sizeof(UX_MEMORY_BLOCK))
 80175ec:	69bb      	ldr	r3, [r7, #24]
 80175ee:	2b10      	cmp	r3, #16
 80175f0:	d91c      	bls.n	801762c <_ux_utility_memory_allocate+0x18c>
        {

            /* Setup the leftover memory block.  */
            leftover_memory_block = (UX_MEMORY_BLOCK *) ((ALIGN_TYPE) new_memory_block + sizeof(UX_MEMORY_BLOCK) + memory_size_requested);
 80175f2:	69fa      	ldr	r2, [r7, #28]
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	18d3      	adds	r3, r2, r3
 80175f8:	3310      	adds	r3, #16
 80175fa:	617b      	str	r3, [r7, #20]
            leftover_memory_block -> ux_memory_block_next =  new_memory_block -> ux_memory_block_next;
 80175fc:	69fb      	ldr	r3, [r7, #28]
 80175fe:	689a      	ldr	r2, [r3, #8]
 8017600:	697b      	ldr	r3, [r7, #20]
 8017602:	609a      	str	r2, [r3, #8]
            leftover_memory_block -> ux_memory_block_previous =  new_memory_block;
 8017604:	697b      	ldr	r3, [r7, #20]
 8017606:	69fa      	ldr	r2, [r7, #28]
 8017608:	60da      	str	r2, [r3, #12]
            leftover_memory_block -> ux_memory_block_size =  leftover - (ULONG)sizeof(UX_MEMORY_BLOCK);
 801760a:	69bb      	ldr	r3, [r7, #24]
 801760c:	3b10      	subs	r3, #16
 801760e:	001a      	movs	r2, r3
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	601a      	str	r2, [r3, #0]
            leftover_memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 8017614:	697b      	ldr	r3, [r7, #20]
 8017616:	2200      	movs	r2, #0
 8017618:	605a      	str	r2, [r3, #4]

            new_memory_block -> ux_memory_block_next =  leftover_memory_block;
 801761a:	69fb      	ldr	r3, [r7, #28]
 801761c:	697a      	ldr	r2, [r7, #20]
 801761e:	609a      	str	r2, [r3, #8]
            new_memory_block -> ux_memory_block_size -=  leftover;
 8017620:	69fb      	ldr	r3, [r7, #28]
 8017622:	681a      	ldr	r2, [r3, #0]
 8017624:	69bb      	ldr	r3, [r7, #24]
 8017626:	1ad2      	subs	r2, r2, r3
 8017628:	69fb      	ldr	r3, [r7, #28]
 801762a:	601a      	str	r2, [r3, #0]
        }

        /* Declare how much memory we removed from the pool.  */
        memory_removed_from_pool =  new_memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801762c:	69fb      	ldr	r3, [r7, #28]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	3310      	adds	r3, #16
 8017632:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* The new memory block is the one we give to the user.  */
        memory_block =  new_memory_block;
 8017634:	69fb      	ldr	r3, [r7, #28]
 8017636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    /* The memory to be returned is after the block header.  */
    memory_buffer =  ((UCHAR *) memory_block) + sizeof(UX_MEMORY_BLOCK);
 8017638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801763a:	3310      	adds	r3, #16
 801763c:	613b      	str	r3, [r7, #16]

    /* Clear the memory block.  */
    _ux_utility_memory_set(memory_buffer, 0, memory_size_requested); /* Use case of memset is verified. */
 801763e:	687a      	ldr	r2, [r7, #4]
 8017640:	693b      	ldr	r3, [r7, #16]
 8017642:	2100      	movs	r1, #0
 8017644:	0018      	movs	r0, r3
 8017646:	f000 f969 	bl	801791c <_ux_utility_memory_set>

    /* Update the memory free in the pool.  */
    if (_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 801764a:	4b18      	ldr	r3, [pc, #96]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	68da      	ldr	r2, [r3, #12]
 8017650:	4b16      	ldr	r3, [pc, #88]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 8017652:	681b      	ldr	r3, [r3, #0]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	429a      	cmp	r2, r3
 8017658:	d108      	bne.n	801766c <_ux_utility_memory_allocate+0x1cc>
    {

        /* There is only one memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 801765a:	4b14      	ldr	r3, [pc, #80]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	6899      	ldr	r1, [r3, #8]
 8017660:	4b12      	ldr	r3, [pc, #72]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017666:	1a8a      	subs	r2, r1, r2
 8017668:	609a      	str	r2, [r3, #8]
 801766a:	e014      	b.n	8017696 <_ux_utility_memory_allocate+0x1f6>
    }
    else
    {

       switch (memory_cache_flag)
 801766c:	68bb      	ldr	r3, [r7, #8]
 801766e:	2b01      	cmp	r3, #1
 8017670:	d108      	bne.n	8017684 <_ux_utility_memory_allocate+0x1e4>
       {

            case UX_CACHE_SAFE_MEMORY:
                /* Update the amount of free memory in the cache safe memory pool.  */
                _ux_system -> ux_system_cache_safe_memory_pool_free -= memory_removed_from_pool;
 8017672:	4b0e      	ldr	r3, [pc, #56]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	6959      	ldr	r1, [r3, #20]
 8017678:	4b0c      	ldr	r3, [pc, #48]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801767e:	1a8a      	subs	r2, r1, r2
 8017680:	615a      	str	r2, [r3, #20]

            break;
 8017682:	e008      	b.n	8017696 <_ux_utility_memory_allocate+0x1f6>

            default:
                /* Update the amount of free memory in the regular memory pool.  */
                _ux_system -> ux_system_regular_memory_pool_free -= memory_removed_from_pool;
 8017684:	4b09      	ldr	r3, [pc, #36]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	6899      	ldr	r1, [r3, #8]
 801768a:	4b08      	ldr	r3, [pc, #32]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017690:	1a8a      	subs	r2, r1, r2
 8017692:	609a      	str	r2, [r3, #8]
            break;
 8017694:	46c0      	nop			@ (mov r8, r8)
        _ux_system -> ux_system_cache_safe_memory_pool_min_free = _ux_system -> ux_system_cache_safe_memory_pool_free;

#endif

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8017696:	4b05      	ldr	r3, [pc, #20]	@ (80176ac <_ux_utility_memory_allocate+0x20c>)
 8017698:	681b      	ldr	r3, [r3, #0]
 801769a:	331c      	adds	r3, #28
 801769c:	0018      	movs	r0, r3
 801769e:	f000 f974 	bl	801798a <_ux_utility_mutex_off>

    /* The memory block pointer contains a memory area properly
       aligned.  */
    return(memory_buffer);
 80176a2:	693b      	ldr	r3, [r7, #16]
}                                
 80176a4:	0018      	movs	r0, r3
 80176a6:	46bd      	mov	sp, r7
 80176a8:	b00c      	add	sp, #48	@ 0x30
 80176aa:	bd80      	pop	{r7, pc}
 80176ac:	200116a0 	.word	0x200116a0

080176b0 <_ux_utility_memory_allocate_mulc_safe>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID* _ux_utility_memory_allocate_mulc_safe(ULONG align,ULONG cache,ULONG size_mul_v,ULONG size_mul_c)
{
 80176b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80176b2:	b085      	sub	sp, #20
 80176b4:	af00      	add	r7, sp, #0
 80176b6:	60f8      	str	r0, [r7, #12]
 80176b8:	60b9      	str	r1, [r7, #8]
 80176ba:	607a      	str	r2, [r7, #4]
 80176bc:	603b      	str	r3, [r7, #0]
    return UX_UTILITY_MEMORY_ALLOCATE_MULC_SAFE(align, cache, size_mul_v, size_mul_c);
 80176be:	683b      	ldr	r3, [r7, #0]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d024      	beq.n	801770e <_ux_utility_memory_allocate_mulc_safe+0x5e>
 80176c4:	2000      	movs	r0, #0
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	0c19      	lsrs	r1, r3, #16
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	1c1e      	adds	r6, r3, #0
 80176ce:	683b      	ldr	r3, [r7, #0]
 80176d0:	0c1b      	lsrs	r3, r3, #16
 80176d2:	683a      	ldr	r2, [r7, #0]
 80176d4:	1c15      	adds	r5, r2, #0
 80176d6:	b28a      	uxth	r2, r1
 80176d8:	2a00      	cmp	r2, #0
 80176da:	d105      	bne.n	80176e8 <_ux_utility_memory_allocate_mulc_safe+0x38>
 80176dc:	b29a      	uxth	r2, r3
 80176de:	2a00      	cmp	r2, #0
 80176e0:	d013      	beq.n	801770a <_ux_utility_memory_allocate_mulc_safe+0x5a>
 80176e2:	1c19      	adds	r1, r3, #0
 80176e4:	1c34      	adds	r4, r6, #0
 80176e6:	e003      	b.n	80176f0 <_ux_utility_memory_allocate_mulc_safe+0x40>
 80176e8:	b29b      	uxth	r3, r3
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d10c      	bne.n	8017708 <_ux_utility_memory_allocate_mulc_safe+0x58>
 80176ee:	1c2c      	adds	r4, r5, #0
 80176f0:	b2b3      	uxth	r3, r6
 80176f2:	b2aa      	uxth	r2, r5
 80176f4:	435a      	muls	r2, r3
 80176f6:	b2a3      	uxth	r3, r4
 80176f8:	b289      	uxth	r1, r1
 80176fa:	434b      	muls	r3, r1
 80176fc:	0c12      	lsrs	r2, r2, #16
 80176fe:	189b      	adds	r3, r3, r2
 8017700:	141b      	asrs	r3, r3, #16
 8017702:	b29b      	uxth	r3, r3
 8017704:	2b00      	cmp	r3, #0
 8017706:	d000      	beq.n	801770a <_ux_utility_memory_allocate_mulc_safe+0x5a>
 8017708:	2001      	movs	r0, #1
 801770a:	1e03      	subs	r3, r0, #0
 801770c:	d109      	bne.n	8017722 <_ux_utility_memory_allocate_mulc_safe+0x72>
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	683a      	ldr	r2, [r7, #0]
 8017712:	435a      	muls	r2, r3
 8017714:	68b9      	ldr	r1, [r7, #8]
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	0018      	movs	r0, r3
 801771a:	f7ff fec1 	bl	80174a0 <_ux_utility_memory_allocate>
 801771e:	0003      	movs	r3, r0
 8017720:	e000      	b.n	8017724 <_ux_utility_memory_allocate_mulc_safe+0x74>
 8017722:	2300      	movs	r3, #0
}
 8017724:	0018      	movs	r0, r3
 8017726:	46bd      	mov	sp, r7
 8017728:	b005      	add	sp, #20
 801772a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801772c <_ux_utility_memory_copy>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_copy(VOID *memory_destination, VOID *memory_source, ULONG length)
{
 801772c:	b580      	push	{r7, lr}
 801772e:	b086      	sub	sp, #24
 8017730:	af00      	add	r7, sp, #0
 8017732:	60f8      	str	r0, [r7, #12]
 8017734:	60b9      	str	r1, [r7, #8]
 8017736:	607a      	str	r2, [r7, #4]

UCHAR *   source;
UCHAR *   destination;

    /* Setup byte oriented source and destination pointers.  */
    source =  (UCHAR *) memory_source;
 8017738:	68bb      	ldr	r3, [r7, #8]
 801773a:	617b      	str	r3, [r7, #20]
    destination =  (UCHAR *) memory_destination;
 801773c:	68fb      	ldr	r3, [r7, #12]
 801773e:	613b      	str	r3, [r7, #16]

    /* Loop to perform the copy.  */
    while(length--)
 8017740:	e007      	b.n	8017752 <_ux_utility_memory_copy+0x26>
    {

        /* Copy one byte.  */
        *destination++ =  *source++;
 8017742:	697a      	ldr	r2, [r7, #20]
 8017744:	1c53      	adds	r3, r2, #1
 8017746:	617b      	str	r3, [r7, #20]
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	1c59      	adds	r1, r3, #1
 801774c:	6139      	str	r1, [r7, #16]
 801774e:	7812      	ldrb	r2, [r2, #0]
 8017750:	701a      	strb	r2, [r3, #0]
    while(length--)
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	1e5a      	subs	r2, r3, #1
 8017756:	607a      	str	r2, [r7, #4]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d1f2      	bne.n	8017742 <_ux_utility_memory_copy+0x16>
    }

    /* Return to caller.  */
    return; 
 801775c:	46c0      	nop			@ (mov r8, r8)
}
 801775e:	46bd      	mov	sp, r7
 8017760:	b006      	add	sp, #24
 8017762:	bd80      	pop	{r7, pc}

08017764 <_ux_utility_memory_free>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_free(VOID *memory)
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b086      	sub	sp, #24
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
UCHAR               *regular_start, *regular_end;
UCHAR               *cache_safe_start, *cache_safe_end;
#endif

    /* Get the mutex as this is a critical section.  */
    _ux_system_mutex_on(&_ux_system -> ux_system_mutex);
 801776c:	4b49      	ldr	r3, [pc, #292]	@ (8017894 <_ux_utility_memory_free+0x130>)
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	331c      	adds	r3, #28
 8017772:	0018      	movs	r0, r3
 8017774:	f000 f915 	bl	80179a2 <_ux_utility_mutex_on>
    }
#endif

    /* The memory block for this memory pointer is located right before the
       memory.  */
    memory_block =  (UX_MEMORY_BLOCK *) (((UCHAR *) memory) - sizeof(UX_MEMORY_BLOCK));
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	3b10      	subs	r3, #16
 801777c:	617b      	str	r3, [r7, #20]
    
    /* Keep track of the memory returned to the pool.  */
    memory_size_returned = memory_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 801777e:	697b      	ldr	r3, [r7, #20]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	3310      	adds	r3, #16
 8017784:	60fb      	str	r3, [r7, #12]

    /* Check this memory block to see if it valid.  */
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8017786:	697b      	ldr	r3, [r7, #20]
 8017788:	685a      	ldr	r2, [r3, #4]
 801778a:	2380      	movs	r3, #128	@ 0x80
 801778c:	061b      	lsls	r3, r3, #24
 801778e:	429a      	cmp	r2, r3
 8017790:	d010      	beq.n	80177b4 <_ux_utility_memory_free+0x50>
        memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_CACHE_SAFE_MEMORY))
 8017792:	697b      	ldr	r3, [r7, #20]
 8017794:	685b      	ldr	r3, [r3, #4]
    if (memory_block -> ux_memory_block_status != (UX_MEMORY_USED | UX_REGULAR_MEMORY) &&
 8017796:	4a40      	ldr	r2, [pc, #256]	@ (8017898 <_ux_utility_memory_free+0x134>)
 8017798:	4293      	cmp	r3, r2
 801779a:	d00b      	beq.n	80177b4 <_ux_utility_memory_free+0x50>
    {

        /* Not valid. Release the protection.  */
        _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 801779c:	4b3d      	ldr	r3, [pc, #244]	@ (8017894 <_ux_utility_memory_free+0x130>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	331c      	adds	r3, #28
 80177a2:	0018      	movs	r0, r3
 80177a4:	f000 f8f1 	bl	801798a <_ux_utility_mutex_off>

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_MEMORY_CORRUPTED);
 80177a8:	2219      	movs	r2, #25
 80177aa:	2108      	movs	r1, #8
 80177ac:	2002      	movs	r0, #2
 80177ae:	f7ff fc5f 	bl	8017070 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_CORRUPTED, memory, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return to caller.  */
        return;
 80177b2:	e06c      	b.n	801788e <_ux_utility_memory_free+0x12a>
        _ux_system -> ux_system_cache_safe_memory_pool_alloc_total -= memory_block -> ux_memory_block_size;
    }
#endif

    /* We mark this memory block as being unused.  */
    memory_block -> ux_memory_block_status =  UX_MEMORY_UNUSED;
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	2200      	movs	r2, #0
 80177b8:	605a      	str	r2, [r3, #4]
    
    /* Now we must concatenate as many free blocks as possible,
       that include the blocks before and the blocks after the current
       block.  Scan memory backwards.  */

     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 80177ba:	e007      	b.n	80177cc <_ux_utility_memory_free+0x68>
     {

        /* Check if the block is free.  */            
        if (memory_block -> ux_memory_block_previous -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80177bc:	697b      	ldr	r3, [r7, #20]
 80177be:	68db      	ldr	r3, [r3, #12]
 80177c0:	685b      	ldr	r3, [r3, #4]
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d107      	bne.n	80177d6 <_ux_utility_memory_free+0x72>

            /* The memory block before is free. This will be our starting point to 
               concatenate memory.  */
            memory_block =  memory_block -> ux_memory_block_previous;
 80177c6:	697b      	ldr	r3, [r7, #20]
 80177c8:	68db      	ldr	r3, [r3, #12]
 80177ca:	617b      	str	r3, [r7, #20]
     while (memory_block -> ux_memory_block_previous !=UX_NULL)
 80177cc:	697b      	ldr	r3, [r7, #20]
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d1f3      	bne.n	80177bc <_ux_utility_memory_free+0x58>
 80177d4:	e000      	b.n	80177d8 <_ux_utility_memory_free+0x74>

        else

            /* The previous memory block is not free.  */
            break;
 80177d6:	46c0      	nop			@ (mov r8, r8)
    }

    /* The pointer to the memory block is now our first free block. We use this 
       starting address to concatenate all the contiguous memory block.  */
    next_block =  memory_block -> ux_memory_block_next;
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	689b      	ldr	r3, [r3, #8]
 80177dc:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 80177de:	e01a      	b.n	8017816 <_ux_utility_memory_free+0xb2>
    {

        /* Determine if the memory block is used.  */
        if (next_block -> ux_memory_block_status != UX_MEMORY_UNUSED)
 80177e0:	693b      	ldr	r3, [r7, #16]
 80177e2:	685b      	ldr	r3, [r3, #4]
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d006      	beq.n	80177f6 <_ux_utility_memory_free+0x92>
        {

            /* Yes, move to next block.  */
            memory_block -> ux_memory_block_next =  next_block;
 80177e8:	697b      	ldr	r3, [r7, #20]
 80177ea:	693a      	ldr	r2, [r7, #16]
 80177ec:	609a      	str	r2, [r3, #8]
            next_block -> ux_memory_block_previous =  memory_block;
 80177ee:	693b      	ldr	r3, [r7, #16]
 80177f0:	697a      	ldr	r2, [r7, #20]
 80177f2:	60da      	str	r2, [r3, #12]
            break;
 80177f4:	e012      	b.n	801781c <_ux_utility_memory_free+0xb8>
        }

        memory_block -> ux_memory_block_next =  next_block -> ux_memory_block_next;
 80177f6:	693b      	ldr	r3, [r7, #16]
 80177f8:	689a      	ldr	r2, [r3, #8]
 80177fa:	697b      	ldr	r3, [r7, #20]
 80177fc:	609a      	str	r2, [r3, #8]
        memory_block -> ux_memory_block_size +=  next_block -> ux_memory_block_size + (ULONG)sizeof(UX_MEMORY_BLOCK);
 80177fe:	697b      	ldr	r3, [r7, #20]
 8017800:	681a      	ldr	r2, [r3, #0]
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	18d3      	adds	r3, r2, r3
 8017808:	3310      	adds	r3, #16
 801780a:	001a      	movs	r2, r3
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	601a      	str	r2, [r3, #0]
        next_block =  next_block -> ux_memory_block_next;                       
 8017810:	693b      	ldr	r3, [r7, #16]
 8017812:	689b      	ldr	r3, [r3, #8]
 8017814:	613b      	str	r3, [r7, #16]
    while (next_block != UX_NULL)
 8017816:	693b      	ldr	r3, [r7, #16]
 8017818:	2b00      	cmp	r3, #0
 801781a:	d1e1      	bne.n	80177e0 <_ux_utility_memory_free+0x7c>
    }

    /* Update the memory free in the appropriate pool.  We need to know if this 
       block is in regular memory or cache safe memory.  */
    if(_ux_system -> ux_system_cache_safe_memory_pool_start == _ux_system -> ux_system_regular_memory_pool_start)
 801781c:	4b1d      	ldr	r3, [pc, #116]	@ (8017894 <_ux_utility_memory_free+0x130>)
 801781e:	681b      	ldr	r3, [r3, #0]
 8017820:	68da      	ldr	r2, [r3, #12]
 8017822:	4b1c      	ldr	r3, [pc, #112]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	429a      	cmp	r2, r3
 801782a:	d108      	bne.n	801783e <_ux_utility_memory_free+0xda>
    {

        /* There is only one regular memory pool.  */
        _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 801782c:	4b19      	ldr	r3, [pc, #100]	@ (8017894 <_ux_utility_memory_free+0x130>)
 801782e:	681b      	ldr	r3, [r3, #0]
 8017830:	6899      	ldr	r1, [r3, #8]
 8017832:	4b18      	ldr	r3, [pc, #96]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	68fa      	ldr	r2, [r7, #12]
 8017838:	188a      	adds	r2, r1, r2
 801783a:	609a      	str	r2, [r3, #8]
 801783c:	e020      	b.n	8017880 <_ux_utility_memory_free+0x11c>
    }
    else
    {

        /* Which pool is this memory in ?  */
        memory_address = (UCHAR *) _ux_system -> ux_system_regular_memory_pool_start;
 801783e:	4b15      	ldr	r3, [pc, #84]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	681b      	ldr	r3, [r3, #0]
 8017844:	60bb      	str	r3, [r7, #8]
        
        /* If the memory address is in this range, we are in the regular memory pool.  */
        if ((UCHAR *) memory_block >= memory_address && (UCHAR *) memory_block < (memory_address + _ux_system -> ux_system_regular_memory_pool_size))
 8017846:	697a      	ldr	r2, [r7, #20]
 8017848:	68bb      	ldr	r3, [r7, #8]
 801784a:	429a      	cmp	r2, r3
 801784c:	d310      	bcc.n	8017870 <_ux_utility_memory_free+0x10c>
 801784e:	4b11      	ldr	r3, [pc, #68]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017850:	681b      	ldr	r3, [r3, #0]
 8017852:	685b      	ldr	r3, [r3, #4]
 8017854:	68ba      	ldr	r2, [r7, #8]
 8017856:	18d3      	adds	r3, r2, r3
 8017858:	697a      	ldr	r2, [r7, #20]
 801785a:	429a      	cmp	r2, r3
 801785c:	d208      	bcs.n	8017870 <_ux_utility_memory_free+0x10c>

            /* Update the regular memory pool.  */
            _ux_system -> ux_system_regular_memory_pool_free += memory_size_returned;
 801785e:	4b0d      	ldr	r3, [pc, #52]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	6899      	ldr	r1, [r3, #8]
 8017864:	4b0b      	ldr	r3, [pc, #44]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	68fa      	ldr	r2, [r7, #12]
 801786a:	188a      	adds	r2, r1, r2
 801786c:	609a      	str	r2, [r3, #8]
 801786e:	e007      	b.n	8017880 <_ux_utility_memory_free+0x11c>

        else
        
            /* Update the cache safe memory pool.  */
            _ux_system -> ux_system_cache_safe_memory_pool_free += memory_size_returned;
 8017870:	4b08      	ldr	r3, [pc, #32]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	6959      	ldr	r1, [r3, #20]
 8017876:	4b07      	ldr	r3, [pc, #28]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017878:	681b      	ldr	r3, [r3, #0]
 801787a:	68fa      	ldr	r2, [r7, #12]
 801787c:	188a      	adds	r2, r1, r2
 801787e:	615a      	str	r2, [r3, #20]
        
    }

    /* Release the protection.  */
    _ux_system_mutex_off(&_ux_system -> ux_system_mutex);
 8017880:	4b04      	ldr	r3, [pc, #16]	@ (8017894 <_ux_utility_memory_free+0x130>)
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	331c      	adds	r3, #28
 8017886:	0018      	movs	r0, r3
 8017888:	f000 f87f 	bl	801798a <_ux_utility_mutex_off>

    /* Return to caller.  */
    return;
 801788c:	46c0      	nop			@ (mov r8, r8)
}
 801788e:	46bd      	mov	sp, r7
 8017890:	b006      	add	sp, #24
 8017892:	bd80      	pop	{r7, pc}
 8017894:	200116a0 	.word	0x200116a0
 8017898:	80000001 	.word	0x80000001

0801789c <_ux_utility_memory_free_block_best_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UX_MEMORY_BLOCK  *_ux_utility_memory_free_block_best_get(ULONG memory_cache_flag, 
                                                        ULONG memory_size_requested)
{
 801789c:	b580      	push	{r7, lr}
 801789e:	b084      	sub	sp, #16
 80178a0:	af00      	add	r7, sp, #0
 80178a2:	6078      	str	r0, [r7, #4]
 80178a4:	6039      	str	r1, [r7, #0]
UX_MEMORY_BLOCK     *memory_block;
UX_MEMORY_BLOCK     *best_memory_block;
    

    /* Reset the free memory block.  */
    best_memory_block =  UX_NULL;
 80178a6:	2300      	movs	r3, #0
 80178a8:	60bb      	str	r3, [r7, #8]
    
    /* Check the type of memory we need.  */
    switch (memory_cache_flag)
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d003      	beq.n	80178b8 <_ux_utility_memory_free_block_best_get+0x1c>
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	2b01      	cmp	r3, #1
 80178b4:	d005      	beq.n	80178c2 <_ux_utility_memory_free_block_best_get+0x26>
 80178b6:	e009      	b.n	80178cc <_ux_utility_memory_free_block_best_get+0x30>
    {

        case UX_REGULAR_MEMORY            :

            /* Start at the beginning of the regular memory pool.  */
            memory_block =  _ux_system -> ux_system_regular_memory_pool_start;
 80178b8:	4b17      	ldr	r3, [pc, #92]	@ (8017918 <_ux_utility_memory_free_block_best_get+0x7c>)
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	681b      	ldr	r3, [r3, #0]
 80178be:	60fb      	str	r3, [r7, #12]
            break;
 80178c0:	e006      	b.n	80178d0 <_ux_utility_memory_free_block_best_get+0x34>
            
        case UX_CACHE_SAFE_MEMORY       :

            /* Start at the beginning of the cache safe memory pool.  */
            memory_block =  _ux_system -> ux_system_cache_safe_memory_pool_start;
 80178c2:	4b15      	ldr	r3, [pc, #84]	@ (8017918 <_ux_utility_memory_free_block_best_get+0x7c>)
 80178c4:	681b      	ldr	r3, [r3, #0]
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	60fb      	str	r3, [r7, #12]
            break;
 80178ca:	e001      	b.n	80178d0 <_ux_utility_memory_free_block_best_get+0x34>
        
        default                            :
        
            /* Wrong memory type.  */
            return(UX_NULL);
 80178cc:	2300      	movs	r3, #0
 80178ce:	e01e      	b.n	801790e <_ux_utility_memory_free_block_best_get+0x72>

    }

    /* Loop on all memory blocks from the beginning.  */
    while (memory_block != UX_NULL)
 80178d0:	e019      	b.n	8017906 <_ux_utility_memory_free_block_best_get+0x6a>
    {

        /* Check the memory block status.  */
        if (memory_block -> ux_memory_block_status == UX_MEMORY_UNUSED)
 80178d2:	68fb      	ldr	r3, [r7, #12]
 80178d4:	685b      	ldr	r3, [r3, #4]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	d112      	bne.n	8017900 <_ux_utility_memory_free_block_best_get+0x64>
        {

            /* Check the size of this free block and see if it will 
               fit the memory requirement.  */
            if (memory_block -> ux_memory_block_size > memory_size_requested)
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	683a      	ldr	r2, [r7, #0]
 80178e0:	429a      	cmp	r2, r3
 80178e2:	d20d      	bcs.n	8017900 <_ux_utility_memory_free_block_best_get+0x64>
            {
                
                /* This memory block will do. Now see if it is the best.
                   The best memory block is the one whose memory is closest
                   to the memory requested.  */
                if (best_memory_block == UX_NULL)
 80178e4:	68bb      	ldr	r3, [r7, #8]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d102      	bne.n	80178f0 <_ux_utility_memory_free_block_best_get+0x54>

                    /* Initialize the best block with the first free one.  */
                    best_memory_block =  memory_block;
 80178ea:	68fb      	ldr	r3, [r7, #12]
 80178ec:	60bb      	str	r3, [r7, #8]
 80178ee:	e007      	b.n	8017900 <_ux_utility_memory_free_block_best_get+0x64>
                else
                {

                    if (memory_block -> ux_memory_block_size < best_memory_block -> ux_memory_block_size)
 80178f0:	68fb      	ldr	r3, [r7, #12]
 80178f2:	681a      	ldr	r2, [r3, #0]
 80178f4:	68bb      	ldr	r3, [r7, #8]
 80178f6:	681b      	ldr	r3, [r3, #0]
 80178f8:	429a      	cmp	r2, r3
 80178fa:	d201      	bcs.n	8017900 <_ux_utility_memory_free_block_best_get+0x64>

                        /* We have discovered a better fit block.  */
                        best_memory_block =  memory_block;
 80178fc:	68fb      	ldr	r3, [r7, #12]
 80178fe:	60bb      	str	r3, [r7, #8]
                }                    
            }
        }

        /* Search the next free block until the end.  */            
        memory_block =  memory_block -> ux_memory_block_next;
 8017900:	68fb      	ldr	r3, [r7, #12]
 8017902:	689b      	ldr	r3, [r3, #8]
 8017904:	60fb      	str	r3, [r7, #12]
    while (memory_block != UX_NULL)
 8017906:	68fb      	ldr	r3, [r7, #12]
 8017908:	2b00      	cmp	r3, #0
 801790a:	d1e2      	bne.n	80178d2 <_ux_utility_memory_free_block_best_get+0x36>
    }

    /* If no free memory block was found, the return value will be NULL.  */
    return(best_memory_block);        
 801790c:	68bb      	ldr	r3, [r7, #8]
}                                
 801790e:	0018      	movs	r0, r3
 8017910:	46bd      	mov	sp, r7
 8017912:	b004      	add	sp, #16
 8017914:	bd80      	pop	{r7, pc}
 8017916:	46c0      	nop			@ (mov r8, r8)
 8017918:	200116a0 	.word	0x200116a0

0801791c <_ux_utility_memory_set>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_memory_set(VOID *destination, UCHAR value, ULONG length)
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b086      	sub	sp, #24
 8017920:	af00      	add	r7, sp, #0
 8017922:	60f8      	str	r0, [r7, #12]
 8017924:	607a      	str	r2, [r7, #4]
 8017926:	230b      	movs	r3, #11
 8017928:	18fb      	adds	r3, r7, r3
 801792a:	1c0a      	adds	r2, r1, #0
 801792c:	701a      	strb	r2, [r3, #0]

UCHAR *    work_ptr;


    /* Setup the working pointer */
    work_ptr =  (UCHAR *) destination;
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	617b      	str	r3, [r7, #20]

    /* Loop to set the memory.  */
    while(length--)
 8017932:	e006      	b.n	8017942 <_ux_utility_memory_set+0x26>
    {

        /* Set a byte.  */
        *work_ptr++ =  value;
 8017934:	697b      	ldr	r3, [r7, #20]
 8017936:	1c5a      	adds	r2, r3, #1
 8017938:	617a      	str	r2, [r7, #20]
 801793a:	220b      	movs	r2, #11
 801793c:	18ba      	adds	r2, r7, r2
 801793e:	7812      	ldrb	r2, [r2, #0]
 8017940:	701a      	strb	r2, [r3, #0]
    while(length--)
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	1e5a      	subs	r2, r3, #1
 8017946:	607a      	str	r2, [r7, #4]
 8017948:	2b00      	cmp	r3, #0
 801794a:	d1f3      	bne.n	8017934 <_ux_utility_memory_set+0x18>
    }

    /* Return to caller.  */
    return; 
 801794c:	46c0      	nop			@ (mov r8, r8)
}
 801794e:	46bd      	mov	sp, r7
 8017950:	b006      	add	sp, #24
 8017952:	bd80      	pop	{r7, pc}

08017954 <_ux_utility_mutex_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_mutex_create(UX_MUTEX *mutex, CHAR *mutex_name)
{
 8017954:	b580      	push	{r7, lr}
 8017956:	b084      	sub	sp, #16
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
 801795c:	6039      	str	r1, [r7, #0]

UINT    status;


    /* Call ThreadX to create the Mutex object.  */
    status =  tx_mutex_create(mutex, (CHAR *) mutex_name, TX_NO_INHERIT);   
 801795e:	6839      	ldr	r1, [r7, #0]
 8017960:	6878      	ldr	r0, [r7, #4]
 8017962:	2334      	movs	r3, #52	@ 0x34
 8017964:	2200      	movs	r2, #0
 8017966:	f7fb fb07 	bl	8012f78 <_txe_mutex_create>
 801796a:	0003      	movs	r3, r0
 801796c:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 801796e:	68fb      	ldr	r3, [r7, #12]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d005      	beq.n	8017980 <_ux_utility_mutex_create+0x2c>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8017974:	68fb      	ldr	r3, [r7, #12]
 8017976:	001a      	movs	r2, r3
 8017978:	2108      	movs	r1, #8
 801797a:	2002      	movs	r0, #2
 801797c:	f7ff fb78 	bl	8017070 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MUTEX_ERROR, mutex, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8017980:	68fb      	ldr	r3, [r7, #12]
}
 8017982:	0018      	movs	r0, r3
 8017984:	46bd      	mov	sp, r7
 8017986:	b004      	add	sp, #16
 8017988:	bd80      	pop	{r7, pc}

0801798a <_ux_utility_mutex_off>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_off(UX_MUTEX *mutex)
{
 801798a:	b580      	push	{r7, lr}
 801798c:	b082      	sub	sp, #8
 801798e:	af00      	add	r7, sp, #0
 8017990:	6078      	str	r0, [r7, #4]

    /* Call ThreadX to release protection.  */
    tx_mutex_put(mutex);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	0018      	movs	r0, r3
 8017996:	f7fb fbeb 	bl	8013170 <_txe_mutex_put>

    /* Return to caller.  */
    return;
 801799a:	46c0      	nop			@ (mov r8, r8)
}
 801799c:	46bd      	mov	sp, r7
 801799e:	b002      	add	sp, #8
 80179a0:	bd80      	pop	{r7, pc}

080179a2 <_ux_utility_mutex_on>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_mutex_on(UX_MUTEX *mutex)
{
 80179a2:	b580      	push	{r7, lr}
 80179a4:	b084      	sub	sp, #16
 80179a6:	af00      	add	r7, sp, #0
 80179a8:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX to get system mutex.  */
    status =  tx_mutex_get(mutex, TX_WAIT_FOREVER);
 80179aa:	2301      	movs	r3, #1
 80179ac:	425a      	negs	r2, r3
 80179ae:	687b      	ldr	r3, [r7, #4]
 80179b0:	0011      	movs	r1, r2
 80179b2:	0018      	movs	r0, r3
 80179b4:	f7fb fb7e 	bl	80130b4 <_txe_mutex_get>
 80179b8:	0003      	movs	r3, r0
 80179ba:	60fb      	str	r3, [r7, #12]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80179bc:	68fb      	ldr	r3, [r7, #12]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d006      	beq.n	80179d0 <_ux_utility_mutex_on+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	001a      	movs	r2, r3
 80179c6:	2108      	movs	r1, #8
 80179c8:	2002      	movs	r0, #2
 80179ca:	f7ff fb51 	bl	8017070 <_ux_system_error_handler>
    }

    /* Return to caller.  */
    return;
 80179ce:	46c0      	nop			@ (mov r8, r8)
 80179d0:	46c0      	nop			@ (mov r8, r8)
}
 80179d2:	46bd      	mov	sp, r7
 80179d4:	b004      	add	sp, #16
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <_ux_utility_semaphore_create>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_create(UX_SEMAPHORE *semaphore, CHAR *semaphore_name, UINT initial_count)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b086      	sub	sp, #24
 80179dc:	af00      	add	r7, sp, #0
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	60b9      	str	r1, [r7, #8]
 80179e2:	607a      	str	r2, [r7, #4]

UINT    status;

    /* Call ThreadX to create the semaphore.  */
    status =  tx_semaphore_create(semaphore, (CHAR *) semaphore_name, initial_count);
 80179e4:	687a      	ldr	r2, [r7, #4]
 80179e6:	68b9      	ldr	r1, [r7, #8]
 80179e8:	68f8      	ldr	r0, [r7, #12]
 80179ea:	231c      	movs	r3, #28
 80179ec:	f7fb fc48 	bl	8013280 <_txe_semaphore_create>
 80179f0:	0003      	movs	r3, r0
 80179f2:	617b      	str	r3, [r7, #20]

    /* Check for status.  */
    if (status != UX_SUCCESS)
 80179f4:	697b      	ldr	r3, [r7, #20]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	d005      	beq.n	8017a06 <_ux_utility_semaphore_create+0x2e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	001a      	movs	r2, r3
 80179fe:	2108      	movs	r1, #8
 8017a00:	2002      	movs	r0, #2
 8017a02:	f7ff fb35 	bl	8017070 <_ux_system_error_handler>
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_SEMAPHORE_ERROR, semaphore, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }

    /* Return completion status.  */
    return(status);
 8017a06:	697b      	ldr	r3, [r7, #20]
}
 8017a08:	0018      	movs	r0, r3
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	b006      	add	sp, #24
 8017a0e:	bd80      	pop	{r7, pc}

08017a10 <_ux_utility_semaphore_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_delete(UX_SEMAPHORE *semaphore)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b084      	sub	sp, #16
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Call ThreadX Semaphore delete function.  */
    status =  tx_semaphore_delete(semaphore);
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	0018      	movs	r0, r3
 8017a1c:	f7fb fcc6 	bl	80133ac <_txe_semaphore_delete>
 8017a20:	0003      	movs	r3, r0
 8017a22:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017a24:	68fb      	ldr	r3, [r7, #12]
}
 8017a26:	0018      	movs	r0, r3
 8017a28:	46bd      	mov	sp, r7
 8017a2a:	b004      	add	sp, #16
 8017a2c:	bd80      	pop	{r7, pc}
	...

08017a30 <_ux_utility_semaphore_get>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_get(UX_SEMAPHORE *semaphore, ULONG semaphore_signal)
{
 8017a30:	b590      	push	{r4, r7, lr}
 8017a32:	b093      	sub	sp, #76	@ 0x4c
 8017a34:	af06      	add	r7, sp, #24
 8017a36:	6078      	str	r0, [r7, #4]
 8017a38:	6039      	str	r1, [r7, #0]
ULONG       time_slice;
UX_THREAD   *next_thread;
UX_THREAD   *suspended_thread;

    /* Call TX to know my own tread.  */
    my_thread = tx_thread_identify();
 8017a3a:	f7f9 ff2b 	bl	8011894 <_tx_thread_identify>
 8017a3e:	0003      	movs	r3, r0
 8017a40:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Retrieve information about the previously created thread "my_thread." */
    tx_thread_info_get(my_thread, &name, &state, &run_count,
 8017a42:	231c      	movs	r3, #28
 8017a44:	18fc      	adds	r4, r7, r3
 8017a46:	2320      	movs	r3, #32
 8017a48:	18fa      	adds	r2, r7, r3
 8017a4a:	2324      	movs	r3, #36	@ 0x24
 8017a4c:	18f9      	adds	r1, r7, r3
 8017a4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8017a50:	2308      	movs	r3, #8
 8017a52:	18fb      	adds	r3, r7, r3
 8017a54:	9304      	str	r3, [sp, #16]
 8017a56:	230c      	movs	r3, #12
 8017a58:	18fb      	adds	r3, r7, r3
 8017a5a:	9303      	str	r3, [sp, #12]
 8017a5c:	2310      	movs	r3, #16
 8017a5e:	18fb      	adds	r3, r7, r3
 8017a60:	9302      	str	r3, [sp, #8]
 8017a62:	2314      	movs	r3, #20
 8017a64:	18fb      	adds	r3, r7, r3
 8017a66:	9301      	str	r3, [sp, #4]
 8017a68:	2318      	movs	r3, #24
 8017a6a:	18fb      	adds	r3, r7, r3
 8017a6c:	9300      	str	r3, [sp, #0]
 8017a6e:	0023      	movs	r3, r4
 8017a70:	f7fb fe5c 	bl	801372c <_txe_thread_info_get>
                       &priority, &preemption_threshold,
                       &time_slice, &next_thread,&suspended_thread);

    /* Is this the lowest priority thread in the system trying to use TX services ? */
    if (priority > _ux_system -> ux_system_thread_lowest_priority)
 8017a74:	4b0b      	ldr	r3, [pc, #44]	@ (8017aa4 <_ux_utility_semaphore_get+0x74>)
 8017a76:	681b      	ldr	r3, [r3, #0]
 8017a78:	699a      	ldr	r2, [r3, #24]
 8017a7a:	69bb      	ldr	r3, [r7, #24]
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d203      	bcs.n	8017a88 <_ux_utility_semaphore_get+0x58>
    {

        /* We need to remember this thread priority.  */
        _ux_system -> ux_system_thread_lowest_priority = priority;
 8017a80:	4b08      	ldr	r3, [pc, #32]	@ (8017aa4 <_ux_utility_semaphore_get+0x74>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	69ba      	ldr	r2, [r7, #24]
 8017a86:	619a      	str	r2, [r3, #24]
        
    }

    /* Get ThreadX semaphore instance.  */
    status =  tx_semaphore_get(semaphore, semaphore_signal);
 8017a88:	683a      	ldr	r2, [r7, #0]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	0011      	movs	r1, r2
 8017a8e:	0018      	movs	r0, r3
 8017a90:	f7fb fcca 	bl	8013428 <_txe_semaphore_get>
 8017a94:	0003      	movs	r3, r0
 8017a96:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Return completion status.  */
    return(status);
 8017a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8017a9a:	0018      	movs	r0, r3
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	b00d      	add	sp, #52	@ 0x34
 8017aa0:	bd90      	pop	{r4, r7, pc}
 8017aa2:	46c0      	nop			@ (mov r8, r8)
 8017aa4:	200116a0 	.word	0x200116a0

08017aa8 <_ux_utility_semaphore_put>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_semaphore_put(UX_SEMAPHORE *semaphore)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b084      	sub	sp, #16
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]

UINT    status;

    /* Put a ThreadX semaphore.  */
    status =  tx_semaphore_put(semaphore);
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	0018      	movs	r0, r3
 8017ab4:	f7fb fcfc 	bl	80134b0 <_txe_semaphore_put>
 8017ab8:	0003      	movs	r3, r0
 8017aba:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017abc:	68fb      	ldr	r3, [r7, #12]
}
 8017abe:	0018      	movs	r0, r3
 8017ac0:	46bd      	mov	sp, r7
 8017ac2:	b004      	add	sp, #16
 8017ac4:	bd80      	pop	{r7, pc}

08017ac6 <_ux_utility_short_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG  _ux_utility_short_get(UCHAR * address)
{
 8017ac6:	b580      	push	{r7, lr}
 8017ac8:	b084      	sub	sp, #16
 8017aca:	af00      	add	r7, sp, #0
 8017acc:	6078      	str	r0, [r7, #4]
USHORT   value;


    /* In order to make this function endian agnostic and memory alignment
       independent, we read a byte at a time from the address.  */
    value =  (USHORT) *address++;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	1c5a      	adds	r2, r3, #1
 8017ad2:	607a      	str	r2, [r7, #4]
 8017ad4:	781a      	ldrb	r2, [r3, #0]
 8017ad6:	200e      	movs	r0, #14
 8017ad8:	183b      	adds	r3, r7, r0
 8017ada:	801a      	strh	r2, [r3, #0]
    value |=  (USHORT)(*address << 8);
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	781b      	ldrb	r3, [r3, #0]
 8017ae0:	021b      	lsls	r3, r3, #8
 8017ae2:	b299      	uxth	r1, r3
 8017ae4:	183b      	adds	r3, r7, r0
 8017ae6:	183a      	adds	r2, r7, r0
 8017ae8:	8812      	ldrh	r2, [r2, #0]
 8017aea:	430a      	orrs	r2, r1
 8017aec:	801a      	strh	r2, [r3, #0]

    /* Return to caller.  */
    return((ULONG) value);
 8017aee:	183b      	adds	r3, r7, r0
 8017af0:	881b      	ldrh	r3, [r3, #0]
}
 8017af2:	0018      	movs	r0, r3
 8017af4:	46bd      	mov	sp, r7
 8017af6:	b004      	add	sp, #16
 8017af8:	bd80      	pop	{r7, pc}

08017afa <_ux_utility_short_get_big_endian>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
ULONG   _ux_utility_short_get_big_endian(UCHAR * address)
{
 8017afa:	b580      	push	{r7, lr}
 8017afc:	b084      	sub	sp, #16
 8017afe:	af00      	add	r7, sp, #0
 8017b00:	6078      	str	r0, [r7, #4]

USHORT  value;

    /* We read a byte at a time from the address.  */
    value =  (USHORT)((*address++) << 8);
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	1c5a      	adds	r2, r3, #1
 8017b06:	607a      	str	r2, [r7, #4]
 8017b08:	781b      	ldrb	r3, [r3, #0]
 8017b0a:	001a      	movs	r2, r3
 8017b0c:	200e      	movs	r0, #14
 8017b0e:	183b      	adds	r3, r7, r0
 8017b10:	0212      	lsls	r2, r2, #8
 8017b12:	801a      	strh	r2, [r3, #0]
    value =  (USHORT)(value | *address);
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	781b      	ldrb	r3, [r3, #0]
 8017b18:	0019      	movs	r1, r3
 8017b1a:	183b      	adds	r3, r7, r0
 8017b1c:	183a      	adds	r2, r7, r0
 8017b1e:	8812      	ldrh	r2, [r2, #0]
 8017b20:	430a      	orrs	r2, r1
 8017b22:	801a      	strh	r2, [r3, #0]

    /* Return 16-bit value.  */
    return((ULONG) value);
 8017b24:	183b      	adds	r3, r7, r0
 8017b26:	881b      	ldrh	r3, [r3, #0]
}
 8017b28:	0018      	movs	r0, r3
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	b004      	add	sp, #16
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <_ux_utility_short_put_big_endian>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_short_put_big_endian(UCHAR * address, USHORT value)
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b084      	sub	sp, #16
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	000a      	movs	r2, r1
 8017b3a:	1cbb      	adds	r3, r7, #2
 8017b3c:	801a      	strh	r2, [r3, #0]
USHORT  low_byte_value;
USHORT  high_byte_value;

    
    /* First we swap the value bytes. */
    low_byte_value =  value >> 8;
 8017b3e:	200e      	movs	r0, #14
 8017b40:	183b      	adds	r3, r7, r0
 8017b42:	1cba      	adds	r2, r7, #2
 8017b44:	8812      	ldrh	r2, [r2, #0]
 8017b46:	0a12      	lsrs	r2, r2, #8
 8017b48:	801a      	strh	r2, [r3, #0]
    high_byte_value =  (USHORT)(value<< 8);
 8017b4a:	210c      	movs	r1, #12
 8017b4c:	187b      	adds	r3, r7, r1
 8017b4e:	1cba      	adds	r2, r7, #2
 8017b50:	8812      	ldrh	r2, [r2, #0]
 8017b52:	0212      	lsls	r2, r2, #8
 8017b54:	801a      	strh	r2, [r3, #0]
    value =  high_byte_value | low_byte_value;
 8017b56:	1cbb      	adds	r3, r7, #2
 8017b58:	1879      	adds	r1, r7, r1
 8017b5a:	183a      	adds	r2, r7, r0
 8017b5c:	8809      	ldrh	r1, [r1, #0]
 8017b5e:	8812      	ldrh	r2, [r2, #0]
 8017b60:	430a      	orrs	r2, r1
 8017b62:	801a      	strh	r2, [r3, #0]

    /* In order to make this function endian agnostic and memory alignment
       independent, we write a byte at a time from the address.  */
    *address++ =  (UCHAR) (value & 0xff);
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	1c5a      	adds	r2, r3, #1
 8017b68:	607a      	str	r2, [r7, #4]
 8017b6a:	1cba      	adds	r2, r7, #2
 8017b6c:	8812      	ldrh	r2, [r2, #0]
 8017b6e:	b2d2      	uxtb	r2, r2
 8017b70:	701a      	strb	r2, [r3, #0]
    *address=     (UCHAR) ((value >> 8) & 0xff);
 8017b72:	1cbb      	adds	r3, r7, #2
 8017b74:	881b      	ldrh	r3, [r3, #0]
 8017b76:	0a1b      	lsrs	r3, r3, #8
 8017b78:	b29b      	uxth	r3, r3
 8017b7a:	b2da      	uxtb	r2, r3
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	701a      	strb	r2, [r3, #0]

    /* Return to caller. */
    return;
 8017b80:	46c0      	nop			@ (mov r8, r8)
}
 8017b82:	46bd      	mov	sp, r7
 8017b84:	b004      	add	sp, #16
 8017b86:	bd80      	pop	{r7, pc}

08017b88 <_ux_utility_string_length_check>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_string_length_check(UCHAR *string, UINT *string_length_ptr, UINT max_string_length)
{
 8017b88:	b580      	push	{r7, lr}
 8017b8a:	b086      	sub	sp, #24
 8017b8c:	af00      	add	r7, sp, #0
 8017b8e:	60f8      	str	r0, [r7, #12]
 8017b90:	60b9      	str	r1, [r7, #8]
 8017b92:	607a      	str	r2, [r7, #4]

UINT    string_length;


    if (string == UX_NULL)
 8017b94:	68fb      	ldr	r3, [r7, #12]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d101      	bne.n	8017b9e <_ux_utility_string_length_check+0x16>
        return(UX_ERROR);
 8017b9a:	23ff      	movs	r3, #255	@ 0xff
 8017b9c:	e01d      	b.n	8017bda <_ux_utility_string_length_check+0x52>

    string_length = 0;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	617b      	str	r3, [r7, #20]

    while (1)
    {

        if (string[string_length] == '\0')
 8017ba2:	68fa      	ldr	r2, [r7, #12]
 8017ba4:	697b      	ldr	r3, [r7, #20]
 8017ba6:	18d3      	adds	r3, r2, r3
 8017ba8:	781b      	ldrb	r3, [r3, #0]
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d00d      	beq.n	8017bca <_ux_utility_string_length_check+0x42>
            break;

        string_length++;
 8017bae:	697b      	ldr	r3, [r7, #20]
 8017bb0:	3301      	adds	r3, #1
 8017bb2:	617b      	str	r3, [r7, #20]
        if (string_length > max_string_length)
 8017bb4:	697a      	ldr	r2, [r7, #20]
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	d9f2      	bls.n	8017ba2 <_ux_utility_string_length_check+0x1a>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, UX_ERROR);
 8017bbc:	22ff      	movs	r2, #255	@ 0xff
 8017bbe:	2108      	movs	r1, #8
 8017bc0:	2002      	movs	r0, #2
 8017bc2:	f7ff fa55 	bl	8017070 <_ux_system_error_handler>

            return(UX_ERROR);
 8017bc6:	23ff      	movs	r3, #255	@ 0xff
 8017bc8:	e007      	b.n	8017bda <_ux_utility_string_length_check+0x52>
            break;
 8017bca:	46c0      	nop			@ (mov r8, r8)
        }
    }

    if (string_length_ptr)
 8017bcc:	68bb      	ldr	r3, [r7, #8]
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	d002      	beq.n	8017bd8 <_ux_utility_string_length_check+0x50>
        *string_length_ptr = string_length;
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	697a      	ldr	r2, [r7, #20]
 8017bd6:	601a      	str	r2, [r3, #0]

    return(UX_SUCCESS); 
 8017bd8:	2300      	movs	r3, #0
}
 8017bda:	0018      	movs	r0, r3
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	b006      	add	sp, #24
 8017be0:	bd80      	pop	{r7, pc}

08017be2 <_ux_utility_thread_create>:
UINT  _ux_utility_thread_create(UX_THREAD *thread_ptr, CHAR *name, 
                VOID (*entry_function)(ULONG), ULONG entry_input,
                VOID *stack_start, ULONG stack_size, 
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start)
{
 8017be2:	b590      	push	{r4, r7, lr}
 8017be4:	b08f      	sub	sp, #60	@ 0x3c
 8017be6:	af08      	add	r7, sp, #32
 8017be8:	60f8      	str	r0, [r7, #12]
 8017bea:	60b9      	str	r1, [r7, #8]
 8017bec:	607a      	str	r2, [r7, #4]
 8017bee:	603b      	str	r3, [r7, #0]

UINT    status;


    /* Call ThreadX to create USBX thread.  */
    status =  tx_thread_create(thread_ptr,name,entry_function,entry_input,
 8017bf0:	683c      	ldr	r4, [r7, #0]
 8017bf2:	687a      	ldr	r2, [r7, #4]
 8017bf4:	68b9      	ldr	r1, [r7, #8]
 8017bf6:	68f8      	ldr	r0, [r7, #12]
 8017bf8:	23b0      	movs	r3, #176	@ 0xb0
 8017bfa:	9306      	str	r3, [sp, #24]
 8017bfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017bfe:	9305      	str	r3, [sp, #20]
 8017c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017c02:	9304      	str	r3, [sp, #16]
 8017c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017c06:	9303      	str	r3, [sp, #12]
 8017c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017c0a:	9302      	str	r3, [sp, #8]
 8017c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017c0e:	9301      	str	r3, [sp, #4]
 8017c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c12:	9300      	str	r3, [sp, #0]
 8017c14:	0023      	movs	r3, r4
 8017c16:	f7fb fc6b 	bl	80134f0 <_txe_thread_create>
 8017c1a:	0003      	movs	r3, r0
 8017c1c:	617b      	str	r3, [r7, #20]
                    stack_start,stack_size, priority,preempt_threshold,time_slice,auto_start);

    /* Check for status.  */
    if (status != UX_SUCCESS)
 8017c1e:	697b      	ldr	r3, [r7, #20]
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d005      	beq.n	8017c30 <_ux_utility_thread_create+0x4e>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_UTILITY, status);
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	001a      	movs	r2, r3
 8017c28:	2108      	movs	r1, #8
 8017c2a:	2002      	movs	r0, #2
 8017c2c:	f7ff fa20 	bl	8017070 <_ux_system_error_handler>
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_THREAD_ERROR, thread_ptr, 0, 0, UX_TRACE_ERRORS, 0, 0)

    }
    /* Return completion status.  */
    return(status);
 8017c30:	697b      	ldr	r3, [r7, #20]
}
 8017c32:	0018      	movs	r0, r3
 8017c34:	46bd      	mov	sp, r7
 8017c36:	b007      	add	sp, #28
 8017c38:	bd90      	pop	{r4, r7, pc}

08017c3a <_ux_utility_thread_delete>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_delete(UX_THREAD *thread_ptr)
{
 8017c3a:	b580      	push	{r7, lr}
 8017c3c:	b084      	sub	sp, #16
 8017c3e:	af00      	add	r7, sp, #0
 8017c40:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to terminate the USBX thread.  */
    tx_thread_terminate(thread_ptr);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	0018      	movs	r0, r3
 8017c46:	f7fb fdfd 	bl	8013844 <_txe_thread_terminate>

    /* Call ThreadX to delete the USBX thread.  */
    status =  tx_thread_delete(thread_ptr);
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	0018      	movs	r0, r3
 8017c4e:	f7fb fd41 	bl	80136d4 <_txe_thread_delete>
 8017c52:	0003      	movs	r3, r0
 8017c54:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017c56:	68fb      	ldr	r3, [r7, #12]
}
 8017c58:	0018      	movs	r0, r3
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	b004      	add	sp, #16
 8017c5e:	bd80      	pop	{r7, pc}

08017c60 <_ux_utility_thread_relinquish>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _ux_utility_thread_relinquish(VOID)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	af00      	add	r7, sp, #0

    /* Call ThreadX to relinquish a USBX thread.  */
    tx_thread_relinquish();
 8017c64:	f7fb fd92 	bl	801378c <_txe_thread_relinquish>

}
 8017c68:	46c0      	nop			@ (mov r8, r8)
 8017c6a:	46bd      	mov	sp, r7
 8017c6c:	bd80      	pop	{r7, pc}

08017c6e <_ux_utility_thread_resume>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_resume(UX_THREAD *thread_ptr)
{
 8017c6e:	b580      	push	{r7, lr}
 8017c70:	b084      	sub	sp, #16
 8017c72:	af00      	add	r7, sp, #0
 8017c74:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to resume USBX thread.  */
    status =  tx_thread_resume(thread_ptr);
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	0018      	movs	r0, r3
 8017c7a:	f7fb fda3 	bl	80137c4 <_txe_thread_resume>
 8017c7e:	0003      	movs	r3, r0
 8017c80:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017c82:	68fb      	ldr	r3, [r7, #12]
}
 8017c84:	0018      	movs	r0, r3
 8017c86:	46bd      	mov	sp, r7
 8017c88:	b004      	add	sp, #16
 8017c8a:	bd80      	pop	{r7, pc}

08017c8c <_ux_utility_thread_suspend>:
/*                                            them directly,              */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_utility_thread_suspend(UX_THREAD *thread_ptr)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b084      	sub	sp, #16
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]

UINT    status;


    /* Call ThreadX to suspend USBX thread.  */
    status =  tx_thread_suspend(thread_ptr);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	0018      	movs	r0, r3
 8017c98:	f7fb fdb4 	bl	8013804 <_txe_thread_suspend>
 8017c9c:	0003      	movs	r3, r0
 8017c9e:	60fb      	str	r3, [r7, #12]

    /* Return completion status.  */
    return(status);
 8017ca0:	68fb      	ldr	r3, [r7, #12]
}
 8017ca2:	0018      	movs	r0, r3
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	b004      	add	sp, #16
 8017ca8:	bd80      	pop	{r7, pc}

08017caa <_ux_device_class_hid_activate>:
/*                                            added packet size assert,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 8017caa:	b580      	push	{r7, lr}
 8017cac:	b088      	sub	sp, #32
 8017cae:	af00      	add	r7, sp, #0
 8017cb0:	6078      	str	r0, [r7, #4]

UX_SLAVE_INTERFACE                      *interface;
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class_inst;
UX_SLAVE_ENDPOINT                       *endpoint_interrupt;
UX_SLAVE_ENDPOINT                       *endpoint_in = UX_NULL;
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
UX_SLAVE_ENDPOINT                       *endpoint_out = UX_NULL;
#endif

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6a1b      	ldr	r3, [r3, #32]
 8017cba:	617b      	str	r3, [r7, #20]

    /* Get the class instance in the container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class_inst -> ux_slave_class_instance;
 8017cbc:	697b      	ldr	r3, [r7, #20]
 8017cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017cc0:	613b      	str	r3, [r7, #16]

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	689b      	ldr	r3, [r3, #8]
 8017cc6:	60fb      	str	r3, [r7, #12]

    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)hid;
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	693a      	ldr	r2, [r7, #16]
 8017ccc:	609a      	str	r2, [r3, #8]

    /* Now the opposite, store the interface in the class instance.  */
    hid -> ux_slave_class_hid_interface =  interface;
 8017cce:	693b      	ldr	r3, [r7, #16]
 8017cd0:	68fa      	ldr	r2, [r7, #12]
 8017cd2:	601a      	str	r2, [r3, #0]

    /* Locate the endpoints.  */
    endpoint_interrupt =  interface -> ux_slave_interface_first_endpoint;
 8017cd4:	68fb      	ldr	r3, [r7, #12]
 8017cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017cd8:	61fb      	str	r3, [r7, #28]

    /* Check if interrupt IN endpoint exists.  */
    while (endpoint_interrupt != UX_NULL)
 8017cda:	e010      	b.n	8017cfe <_ux_device_class_hid_activate+0x54>
    {
        if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bmAttributes &
 8017cdc:	69fb      	ldr	r3, [r7, #28]
 8017cde:	699b      	ldr	r3, [r3, #24]
 8017ce0:	2203      	movs	r2, #3
 8017ce2:	4013      	ands	r3, r2
 8017ce4:	2b03      	cmp	r3, #3
 8017ce6:	d107      	bne.n	8017cf8 <_ux_device_class_hid_activate+0x4e>
             UX_MASK_ENDPOINT_TYPE) == UX_INTERRUPT_ENDPOINT)
        {
            if ((endpoint_interrupt -> ux_slave_endpoint_descriptor.bEndpointAddress &
 8017ce8:	69fb      	ldr	r3, [r7, #28]
 8017cea:	695b      	ldr	r3, [r3, #20]
 8017cec:	2280      	movs	r2, #128	@ 0x80
 8017cee:	4013      	ands	r3, r2
 8017cf0:	d002      	beq.n	8017cf8 <_ux_device_class_hid_activate+0x4e>
                 UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
            {

                /* It's interrupt IN endpoint we need.  */
                endpoint_in = endpoint_interrupt;
 8017cf2:	69fb      	ldr	r3, [r7, #28]
 8017cf4:	61bb      	str	r3, [r7, #24]
#if defined(UX_DEVICE_CLASS_HID_INTERRUPT_OUT_SUPPORT)
                if (endpoint_out != UX_NULL)
#endif
                    break;
 8017cf6:	e005      	b.n	8017d04 <_ux_device_class_hid_activate+0x5a>
            }
#endif
        }

        /* Try next endpoint.  */
        endpoint_interrupt =  endpoint_interrupt -> ux_slave_endpoint_next_endpoint;
 8017cf8:	69fb      	ldr	r3, [r7, #28]
 8017cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017cfc:	61fb      	str	r3, [r7, #28]
    while (endpoint_interrupt != UX_NULL)
 8017cfe:	69fb      	ldr	r3, [r7, #28]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d1eb      	bne.n	8017cdc <_ux_device_class_hid_activate+0x32>
    }

    /* Check if we found right endpoint.  */
    if (endpoint_in == UX_NULL)
 8017d04:	69bb      	ldr	r3, [r7, #24]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d101      	bne.n	8017d0e <_ux_device_class_hid_activate+0x64>
        return (UX_ERROR);
 8017d0a:	23ff      	movs	r3, #255	@ 0xff
 8017d0c:	e014      	b.n	8017d38 <_ux_device_class_hid_activate+0x8e>
    UX_ASSERT(UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH >=
              endpoint_in -> ux_slave_endpoint_transfer_request.
                            ux_slave_transfer_request_transfer_length);

    /* Default HID protocol is report protocol.  */
    hid -> ux_device_class_hid_protocol = UX_DEVICE_CLASS_HID_PROTOCOL_REPORT;
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	2201      	movs	r2, #1
 8017d12:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Save the endpoints in the hid instance.  */
    hid -> ux_device_class_hid_interrupt_endpoint         = endpoint_in;
 8017d14:	693b      	ldr	r3, [r7, #16]
 8017d16:	69ba      	ldr	r2, [r7, #24]
 8017d18:	605a      	str	r2, [r3, #4]
#endif

#if !defined(UX_DEVICE_STANDALONE)

    /* Resume thread.  */
    _ux_device_thread_resume(&class_inst -> ux_slave_class_thread);
 8017d1a:	697b      	ldr	r3, [r7, #20]
 8017d1c:	3350      	adds	r3, #80	@ 0x50
 8017d1e:	0018      	movs	r0, r3
 8017d20:	f7ff ffa5 	bl	8017c6e <_ux_utility_thread_resume>
    hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#endif


    /* If there is a activate function call it.  */
    if (hid -> ux_slave_class_hid_instance_activate != UX_NULL)
 8017d24:	693b      	ldr	r3, [r7, #16]
 8017d26:	695b      	ldr	r3, [r3, #20]
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d004      	beq.n	8017d36 <_ux_device_class_hid_activate+0x8c>
    {

        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_activate(hid);
 8017d2c:	693b      	ldr	r3, [r7, #16]
 8017d2e:	695b      	ldr	r3, [r3, #20]
 8017d30:	693a      	ldr	r2, [r7, #16]
 8017d32:	0010      	movs	r0, r2
 8017d34:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, hid, 0, 0, 0)

    /* Return completion status.  */
    return(UX_SUCCESS);
 8017d36:	2300      	movs	r3, #0
}
 8017d38:	0018      	movs	r0, r3
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	b008      	add	sp, #32
 8017d3e:	bd80      	pop	{r7, pc}

08017d40 <_ux_device_class_hid_control_request>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b08c      	sub	sp, #48	@ 0x30
 8017d44:	af00      	add	r7, sp, #0
 8017d46:	6078      	str	r0, [r7, #4]
ULONG                       descriptor_type;
UCHAR                       duration;
UX_SLAVE_CLASS_HID          *hid;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017d48:	4b5a      	ldr	r3, [pc, #360]	@ (8017eb4 <_ux_device_class_hid_control_request+0x174>)
 8017d4a:	681b      	ldr	r3, [r3, #0]
 8017d4c:	3320      	adds	r3, #32
 8017d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 8017d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d52:	336c      	adds	r3, #108	@ 0x6c
 8017d54:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Extract all necessary fields of the request.  */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 8017d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d58:	2255      	movs	r2, #85	@ 0x55
 8017d5a:	5c9b      	ldrb	r3, [r3, r2]
 8017d5c:	627b      	str	r3, [r7, #36]	@ 0x24
    request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 8017d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d60:	3354      	adds	r3, #84	@ 0x54
 8017d62:	3302      	adds	r3, #2
 8017d64:	0018      	movs	r0, r3
 8017d66:	f7ff feae 	bl	8017ac6 <_ux_utility_short_get>
 8017d6a:	0003      	movs	r3, r0
 8017d6c:	623b      	str	r3, [r7, #32]
    request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 8017d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d70:	3354      	adds	r3, #84	@ 0x54
 8017d72:	3304      	adds	r3, #4
 8017d74:	0018      	movs	r0, r3
 8017d76:	f7ff fea6 	bl	8017ac6 <_ux_utility_short_get>
 8017d7a:	0003      	movs	r3, r0
 8017d7c:	61fb      	str	r3, [r7, #28]
    request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 8017d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d80:	3354      	adds	r3, #84	@ 0x54
 8017d82:	3306      	adds	r3, #6
 8017d84:	0018      	movs	r0, r3
 8017d86:	f7ff fe9e 	bl	8017ac6 <_ux_utility_short_get>
 8017d8a:	0003      	movs	r3, r0
 8017d8c:	61bb      	str	r3, [r7, #24]

    /* Duration - upper byte of wValue.  */
    duration       =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 8017d8e:	2317      	movs	r3, #23
 8017d90:	18fb      	adds	r3, r7, r3
 8017d92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d94:	2157      	movs	r1, #87	@ 0x57
 8017d96:	5c52      	ldrb	r2, [r2, r1]
 8017d98:	701a      	strb	r2, [r3, #0]
    
     /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	6a1b      	ldr	r3, [r3, #32]
 8017d9e:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8017da0:	693b      	ldr	r3, [r7, #16]
 8017da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017da4:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8017da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017da8:	2b0b      	cmp	r3, #11
 8017daa:	d900      	bls.n	8017dae <_ux_device_class_hid_control_request+0x6e>
 8017dac:	e079      	b.n	8017ea2 <_ux_device_class_hid_control_request+0x162>
 8017dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017db0:	009a      	lsls	r2, r3, #2
 8017db2:	4b41      	ldr	r3, [pc, #260]	@ (8017eb8 <_ux_device_class_hid_control_request+0x178>)
 8017db4:	18d3      	adds	r3, r2, r3
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	469f      	mov	pc, r3
    {

        case UX_DEVICE_CLASS_HID_COMMAND_GET_REPORT:

            /* Send the requested report to the host.  */
            _ux_device_class_hid_report_get(hid, request_value, request_index, request_length);
 8017dba:	69bb      	ldr	r3, [r7, #24]
 8017dbc:	69fa      	ldr	r2, [r7, #28]
 8017dbe:	6a39      	ldr	r1, [r7, #32]
 8017dc0:	68f8      	ldr	r0, [r7, #12]
 8017dc2:	f000 fbc1 	bl	8018548 <_ux_device_class_hid_report_get>
            break;
 8017dc6:	e06f      	b.n	8017ea8 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_REPORT:

            /* Extract the descriptor type.  */
            descriptor_type =  (request_value & 0xff00) >> 8;
 8017dc8:	6a3b      	ldr	r3, [r7, #32]
 8017dca:	0a1b      	lsrs	r3, r3, #8
 8017dcc:	22ff      	movs	r2, #255	@ 0xff
 8017dce:	4013      	ands	r3, r2
 8017dd0:	60bb      	str	r3, [r7, #8]

            /* Get the requested report from the host.  */
            _ux_device_class_hid_report_set(hid, descriptor_type, request_index, request_length);
 8017dd2:	69bb      	ldr	r3, [r7, #24]
 8017dd4:	69fa      	ldr	r2, [r7, #28]
 8017dd6:	68b9      	ldr	r1, [r7, #8]
 8017dd8:	68f8      	ldr	r0, [r7, #12]
 8017dda:	f000 fc4b 	bl	8018674 <_ux_device_class_hid_report_set>
            break;
 8017dde:	e063      	b.n	8017ea8 <_ux_device_class_hid_control_request+0x168>

        case UX_GET_DESCRIPTOR:

            /* Send the requested descriptor to the host.  */
            _ux_device_class_hid_descriptor_send(hid, request_value, request_index, request_length);
 8017de0:	69bb      	ldr	r3, [r7, #24]
 8017de2:	69fa      	ldr	r2, [r7, #28]
 8017de4:	6a39      	ldr	r1, [r7, #32]
 8017de6:	68f8      	ldr	r0, [r7, #12]
 8017de8:	f000 f886 	bl	8017ef8 <_ux_device_class_hid_descriptor_send>
            break;            
 8017dec:	e05c      	b.n	8017ea8 <_ux_device_class_hid_control_request+0x168>
        case UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE:
        case UX_DEVICE_CLASS_HID_COMMAND_SET_IDLE:

            /* Ignore Report ID for now.  */

            if (request == UX_DEVICE_CLASS_HID_COMMAND_GET_IDLE)
 8017dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017df0:	2b02      	cmp	r3, #2
 8017df2:	d10c      	bne.n	8017e0e <_ux_device_class_hid_control_request+0xce>
            {

                /* Send the idle rate.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_event_idle_rate;
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8017df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dfa:	68db      	ldr	r3, [r3, #12]
 8017dfc:	b2d2      	uxtb	r2, r2
 8017dfe:	701a      	strb	r2, [r3, #0]
                _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8017e00:	69ba      	ldr	r2, [r7, #24]
 8017e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e04:	2101      	movs	r1, #1
 8017e06:	0018      	movs	r0, r3
 8017e08:	f004 fc56 	bl	801c6b8 <_ux_device_stack_transfer_request>
                        _ux_utility_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
#endif
                    }
                }
            }
            break;
 8017e0c:	e04b      	b.n	8017ea6 <_ux_device_class_hid_control_request+0x166>
                if ((UCHAR)hid -> ux_device_class_hid_event_idle_rate != duration)
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017e12:	b2db      	uxtb	r3, r3
 8017e14:	2117      	movs	r1, #23
 8017e16:	187a      	adds	r2, r7, r1
 8017e18:	7812      	ldrb	r2, [r2, #0]
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	d043      	beq.n	8017ea6 <_ux_device_class_hid_control_request+0x166>
                    hid -> ux_device_class_hid_event_idle_rate = duration;
 8017e1e:	187b      	adds	r3, r7, r1
 8017e20:	781a      	ldrb	r2, [r3, #0]
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	64da      	str	r2, [r3, #76]	@ 0x4c
                    if (duration == 0)
 8017e26:	187b      	adds	r3, r7, r1
 8017e28:	781b      	ldrb	r3, [r3, #0]
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d104      	bne.n	8017e38 <_ux_device_class_hid_control_request+0xf8>
                        hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2201      	movs	r2, #1
 8017e32:	4252      	negs	r2, r2
 8017e34:	651a      	str	r2, [r3, #80]	@ 0x50
            break;
 8017e36:	e036      	b.n	8017ea6 <_ux_device_class_hid_control_request+0x166>
                        hid -> ux_device_class_hid_event_wait_timeout = (ULONG)UX_MS_TO_TICK((ULONG)duration << 2u);
 8017e38:	2317      	movs	r3, #23
 8017e3a:	18fb      	adds	r3, r7, r3
 8017e3c:	781a      	ldrb	r2, [r3, #0]
 8017e3e:	0013      	movs	r3, r2
 8017e40:	009b      	lsls	r3, r3, #2
 8017e42:	189b      	adds	r3, r3, r2
 8017e44:	009a      	lsls	r2, r3, #2
 8017e46:	189b      	adds	r3, r3, r2
 8017e48:	011b      	lsls	r3, r3, #4
 8017e4a:	001a      	movs	r2, r3
 8017e4c:	23fa      	movs	r3, #250	@ 0xfa
 8017e4e:	0099      	lsls	r1, r3, #2
 8017e50:	0010      	movs	r0, r2
 8017e52:	f7ee faf7 	bl	8006444 <__udivsi3>
 8017e56:	0003      	movs	r3, r0
 8017e58:	001a      	movs	r2, r3
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	651a      	str	r2, [r3, #80]	@ 0x50
                        if (hid -> ux_device_class_hid_event_wait_timeout == 0)
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d104      	bne.n	8017e70 <_ux_device_class_hid_control_request+0x130>
                            hid -> ux_device_class_hid_event_wait_timeout ++;
 8017e66:	68fb      	ldr	r3, [r7, #12]
 8017e68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e6a:	1c5a      	adds	r2, r3, #1
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	651a      	str	r2, [r3, #80]	@ 0x50
                        _ux_utility_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_IDLE_RATE, UX_OR);
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	3328      	adds	r3, #40	@ 0x28
 8017e74:	2200      	movs	r2, #0
 8017e76:	2102      	movs	r1, #2
 8017e78:	0018      	movs	r0, r3
 8017e7a:	f7ff fa66 	bl	801734a <_ux_utility_event_flags_set>
            break;
 8017e7e:	e012      	b.n	8017ea6 <_ux_device_class_hid_control_request+0x166>

        case UX_DEVICE_CLASS_HID_COMMAND_GET_PROTOCOL:

            /* Send the protocol.  */
            *transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)hid -> ux_device_class_hid_protocol;
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8017e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e86:	68db      	ldr	r3, [r3, #12]
 8017e88:	b2d2      	uxtb	r2, r2
 8017e8a:	701a      	strb	r2, [r3, #0]
            _ux_device_stack_transfer_request(transfer_request, 1, request_length);
 8017e8c:	69ba      	ldr	r2, [r7, #24]
 8017e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e90:	2101      	movs	r1, #1
 8017e92:	0018      	movs	r0, r3
 8017e94:	f004 fc10 	bl	801c6b8 <_ux_device_stack_transfer_request>
            break;
 8017e98:	e006      	b.n	8017ea8 <_ux_device_class_hid_control_request+0x168>

        case UX_DEVICE_CLASS_HID_COMMAND_SET_PROTOCOL:

            /* Accept the protocol.  */
            hid -> ux_device_class_hid_protocol = request_value;
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	6a3a      	ldr	r2, [r7, #32]
 8017e9e:	655a      	str	r2, [r3, #84]	@ 0x54
            break;
 8017ea0:	e002      	b.n	8017ea8 <_ux_device_class_hid_control_request+0x168>

        default:

            /* Unknown function. It's not handled.  */
            return(UX_ERROR);
 8017ea2:	23ff      	movs	r3, #255	@ 0xff
 8017ea4:	e001      	b.n	8017eaa <_ux_device_class_hid_control_request+0x16a>
            break;
 8017ea6:	46c0      	nop			@ (mov r8, r8)
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 8017ea8:	2300      	movs	r3, #0
}
 8017eaa:	0018      	movs	r0, r3
 8017eac:	46bd      	mov	sp, r7
 8017eae:	b00c      	add	sp, #48	@ 0x30
 8017eb0:	bd80      	pop	{r7, pc}
 8017eb2:	46c0      	nop			@ (mov r8, r8)
 8017eb4:	200116a4 	.word	0x200116a4
 8017eb8:	0801e57c 	.word	0x0801e57c

08017ebc <_ux_device_class_hid_deactivate>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8017ebc:	b580      	push	{r7, lr}
 8017ebe:	b084      	sub	sp, #16
 8017ec0:	af00      	add	r7, sp, #0
 8017ec2:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID         *hid;
UX_SLAVE_CLASS             *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	6a1b      	ldr	r3, [r3, #32]
 8017ec8:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017ece:	60bb      	str	r3, [r7, #8]

    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(hid -> ux_device_class_hid_interrupt_endpoint, UX_TRANSFER_BUS_RESET);
 8017ed0:	68bb      	ldr	r3, [r7, #8]
 8017ed2:	685b      	ldr	r3, [r3, #4]
 8017ed4:	2126      	movs	r1, #38	@ 0x26
 8017ed6:	0018      	movs	r0, r3
 8017ed8:	f004 fbda 	bl	801c690 <_ux_device_stack_transfer_all_request_abort>

    /* If there is a deactivate function call it.  */
    if (hid -> ux_slave_class_hid_instance_deactivate != UX_NULL)
 8017edc:	68bb      	ldr	r3, [r7, #8]
 8017ede:	699b      	ldr	r3, [r3, #24]
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d004      	beq.n	8017eee <_ux_device_class_hid_deactivate+0x32>
    {
        /* Invoke the application.  */
        hid -> ux_slave_class_hid_instance_deactivate(hid);
 8017ee4:	68bb      	ldr	r3, [r7, #8]
 8017ee6:	699b      	ldr	r3, [r3, #24]
 8017ee8:	68ba      	ldr	r2, [r7, #8]
 8017eea:	0010      	movs	r0, r2
 8017eec:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(hid);

    /* Return completion status.  */
    return(UX_SUCCESS);
 8017eee:	2300      	movs	r3, #0
}
 8017ef0:	0018      	movs	r0, r3
 8017ef2:	46bd      	mov	sp, r7
 8017ef4:	b004      	add	sp, #16
 8017ef6:	bd80      	pop	{r7, pc}

08017ef8 <_ux_device_class_hid_descriptor_send>:
/*                                            resulting in version 6.1.8  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_descriptor_send(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b08e      	sub	sp, #56	@ 0x38
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	60f8      	str	r0, [r7, #12]
 8017f00:	60b9      	str	r1, [r7, #8]
 8017f02:	607a      	str	r2, [r7, #4]
 8017f04:	603b      	str	r3, [r7, #0]
UX_SLAVE_TRANSFER               *transfer_request;
UX_SLAVE_ENDPOINT               *endpoint;
UCHAR *                         device_framework;
UCHAR *                         device_framework_end;
ULONG                           descriptor_length;
UINT                            status =  UX_ERROR;
 8017f06:	23ff      	movs	r3, #255	@ 0xff
 8017f08:	633b      	str	r3, [r7, #48]	@ 0x30
ULONG                           length;
UCHAR                           interface_number = 0xFF;
 8017f0a:	232b      	movs	r3, #43	@ 0x2b
 8017f0c:	18fb      	adds	r3, r7, r3
 8017f0e:	22ff      	movs	r2, #255	@ 0xff
 8017f10:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_DESCRIPTOR_SEND, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8017f12:	4b61      	ldr	r3, [pc, #388]	@ (8018098 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8017f18:	4b5f      	ldr	r3, [pc, #380]	@ (8018098 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	3320      	adds	r3, #32
 8017f1e:	623b      	str	r3, [r7, #32]
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8017f20:	6a3b      	ldr	r3, [r7, #32]
 8017f22:	333c      	adds	r3, #60	@ 0x3c
 8017f24:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8017f26:	69fb      	ldr	r3, [r7, #28]
 8017f28:	3330      	adds	r3, #48	@ 0x30
 8017f2a:	61bb      	str	r3, [r7, #24]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8017f2c:	69bb      	ldr	r3, [r7, #24]
 8017f2e:	2203      	movs	r2, #3
 8017f30:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 8017f32:	68bb      	ldr	r3, [r7, #8]
 8017f34:	0a1b      	lsrs	r3, r3, #8
 8017f36:	b2db      	uxtb	r3, r3
 8017f38:	60bb      	str	r3, [r7, #8]

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 8017f3a:	68bb      	ldr	r3, [r7, #8]
 8017f3c:	2b21      	cmp	r3, #33	@ 0x21
 8017f3e:	d003      	beq.n	8017f48 <_ux_device_class_hid_descriptor_send+0x50>
 8017f40:	68bb      	ldr	r3, [r7, #8]
 8017f42:	2b22      	cmp	r3, #34	@ 0x22
 8017f44:	d069      	beq.n	801801a <_ux_device_class_hid_descriptor_send+0x122>
 8017f46:	e098      	b.n	801807a <_ux_device_class_hid_descriptor_send+0x182>
    {

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_HID:
    
        /* We should have a HID descriptor as part of the config descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 8017f48:	4b53      	ldr	r3, [pc, #332]	@ (8018098 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8017f4a:	681a      	ldr	r2, [r3, #0]
 8017f4c:	2394      	movs	r3, #148	@ 0x94
 8017f4e:	005b      	lsls	r3, r3, #1
 8017f50:	58d3      	ldr	r3, [r2, r3]
 8017f52:	637b      	str	r3, [r7, #52]	@ 0x34
        device_framework_end = device_framework + _ux_system_slave -> ux_system_slave_device_framework_length;
 8017f54:	4b50      	ldr	r3, [pc, #320]	@ (8018098 <_ux_device_class_hid_descriptor_send+0x1a0>)
 8017f56:	681a      	ldr	r2, [r3, #0]
 8017f58:	2396      	movs	r3, #150	@ 0x96
 8017f5a:	005b      	lsls	r3, r3, #1
 8017f5c:	58d3      	ldr	r3, [r2, r3]
 8017f5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017f60:	18d3      	adds	r3, r2, r3
 8017f62:	613b      	str	r3, [r7, #16]

        /* Parse the device framework and locate the HID descriptor.  
           There is only one HID descriptor.  */
        while (device_framework < device_framework_end)
 8017f64:	e048      	b.n	8017ff8 <_ux_device_class_hid_descriptor_send+0x100>
        {

            /* Get the type of the current descriptor.  */
            descriptor_type =  *(device_framework + 1);
 8017f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f68:	3301      	adds	r3, #1
 8017f6a:	781b      	ldrb	r3, [r3, #0]
 8017f6c:	60bb      	str	r3, [r7, #8]

            /* And its length.  */
            descriptor_length =  (ULONG) *device_framework;
 8017f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017f70:	781b      	ldrb	r3, [r3, #0]
 8017f72:	617b      	str	r3, [r7, #20]

            /* Save interface number for later check.  */
            if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 8017f74:	68bb      	ldr	r3, [r7, #8]
 8017f76:	2b04      	cmp	r3, #4
 8017f78:	d104      	bne.n	8017f84 <_ux_device_class_hid_descriptor_send+0x8c>
                interface_number = *(device_framework + 2);
 8017f7a:	232b      	movs	r3, #43	@ 0x2b
 8017f7c:	18fb      	adds	r3, r7, r3
 8017f7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017f80:	7892      	ldrb	r2, [r2, #2]
 8017f82:	701a      	strb	r2, [r3, #0]

            /* Check if this is a HID report descriptor.  */
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8017f84:	68bb      	ldr	r3, [r7, #8]
 8017f86:	2b21      	cmp	r3, #33	@ 0x21
 8017f88:	d132      	bne.n	8017ff0 <_ux_device_class_hid_descriptor_send+0xf8>
                (interface_number == (UCHAR)request_index))
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	b2db      	uxtb	r3, r3
            if ((descriptor_type == UX_DEVICE_CLASS_HID_DESCRIPTOR_HID) &&
 8017f8e:	222b      	movs	r2, #43	@ 0x2b
 8017f90:	18ba      	adds	r2, r7, r2
 8017f92:	7812      	ldrb	r2, [r2, #0]
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d12b      	bne.n	8017ff0 <_ux_device_class_hid_descriptor_send+0xf8>
            {

                /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                   and do not return more than what is allowed.  */
                if (descriptor_length < host_length)
 8017f98:	697a      	ldr	r2, [r7, #20]
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d202      	bcs.n	8017fa6 <_ux_device_class_hid_descriptor_send+0xae>
                    length =  descriptor_length;
 8017fa0:	697b      	ldr	r3, [r7, #20]
 8017fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017fa4:	e001      	b.n	8017faa <_ux_device_class_hid_descriptor_send+0xb2>
                else                            
                    length =  host_length;                
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* Check buffer length, since descriptor length may exceed buffer...  */
                if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8017faa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017fac:	2380      	movs	r3, #128	@ 0x80
 8017fae:	005b      	lsls	r3, r3, #1
 8017fb0:	429a      	cmp	r2, r3
 8017fb2:	d90d      	bls.n	8017fd0 <_ux_device_class_hid_descriptor_send+0xd8>
                {

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 8017fb4:	2212      	movs	r2, #18
 8017fb6:	2107      	movs	r1, #7
 8017fb8:	2002      	movs	r0, #2
 8017fba:	f7ff f859 	bl	8017070 <_ux_system_error_handler>

                    /* If trace is enabled, insert this event into the trace buffer.  */
                    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

                    /* Stall the endpoint.  */
                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8017fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fc0:	699b      	ldr	r3, [r3, #24]
 8017fc2:	69fa      	ldr	r2, [r7, #28]
 8017fc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017fc6:	2114      	movs	r1, #20
 8017fc8:	4798      	blx	r3
 8017fca:	0003      	movs	r3, r0
 8017fcc:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8017fce:	e017      	b.n	8018000 <_ux_device_class_hid_descriptor_send+0x108>
                }

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8017fd0:	69bb      	ldr	r3, [r7, #24]
 8017fd2:	68db      	ldr	r3, [r3, #12]
 8017fd4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017fd6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8017fd8:	0018      	movs	r0, r3
 8017fda:	f7ff fba7 	bl	801772c <_ux_utility_memory_copy>
                                            device_framework, length); /* Use case of memcpy is verified. */

                /* We can return the configuration descriptor.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8017fde:	683a      	ldr	r2, [r7, #0]
 8017fe0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017fe2:	69bb      	ldr	r3, [r7, #24]
 8017fe4:	0018      	movs	r0, r3
 8017fe6:	f004 fb67 	bl	801c6b8 <_ux_device_stack_transfer_request>
 8017fea:	0003      	movs	r3, r0
 8017fec:	633b      	str	r3, [r7, #48]	@ 0x30
                break;
 8017fee:	e007      	b.n	8018000 <_ux_device_class_hid_descriptor_send+0x108>
                
            }

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 8017ff0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017ff2:	697b      	ldr	r3, [r7, #20]
 8017ff4:	18d3      	adds	r3, r2, r3
 8017ff6:	637b      	str	r3, [r7, #52]	@ 0x34
        while (device_framework < device_framework_end)
 8017ff8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	429a      	cmp	r2, r3
 8017ffe:	d3b2      	bcc.n	8017f66 <_ux_device_class_hid_descriptor_send+0x6e>
        }

        /* Stall the endpoint if not found or corrupt.  */
        if (device_framework >= device_framework_end)
 8018000:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8018002:	693b      	ldr	r3, [r7, #16]
 8018004:	429a      	cmp	r2, r3
 8018006:	d340      	bcc.n	801808a <_ux_device_class_hid_descriptor_send+0x192>
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8018008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801800a:	699b      	ldr	r3, [r3, #24]
 801800c:	69fa      	ldr	r2, [r7, #28]
 801800e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018010:	2114      	movs	r1, #20
 8018012:	4798      	blx	r3
 8018014:	0003      	movs	r3, r0
 8018016:	633b      	str	r3, [r7, #48]	@ 0x30

        break;
 8018018:	e037      	b.n	801808a <_ux_device_class_hid_descriptor_send+0x192>

    case UX_DEVICE_CLASS_HID_DESCRIPTOR_REPORT:
        
        /* Get the length of entire configuration descriptor.  */
        descriptor_length =  hid -> ux_device_class_hid_report_length;
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801801e:	617b      	str	r3, [r7, #20]

        /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
           and do not return more than what is allowed.  */
        if (descriptor_length < host_length)
 8018020:	697a      	ldr	r2, [r7, #20]
 8018022:	683b      	ldr	r3, [r7, #0]
 8018024:	429a      	cmp	r2, r3
 8018026:	d202      	bcs.n	801802e <_ux_device_class_hid_descriptor_send+0x136>
            length =  descriptor_length;
 8018028:	697b      	ldr	r3, [r7, #20]
 801802a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801802c:	e001      	b.n	8018032 <_ux_device_class_hid_descriptor_send+0x13a>
        else                            
            length =  host_length;                
 801802e:	683b      	ldr	r3, [r7, #0]
 8018030:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check buffer length, since total descriptors length may exceed buffer...  */
        if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8018032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018034:	2380      	movs	r3, #128	@ 0x80
 8018036:	005b      	lsls	r3, r3, #1
 8018038:	429a      	cmp	r2, r3
 801803a:	d90d      	bls.n	8018058 <_ux_device_class_hid_descriptor_send+0x160>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 801803c:	2212      	movs	r2, #18
 801803e:	2107      	movs	r1, #7
 8018040:	2002      	movs	r0, #2
 8018042:	f7ff f815 	bl	8017070 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, hid, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Stall the endpoint.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 8018046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018048:	699b      	ldr	r3, [r3, #24]
 801804a:	69fa      	ldr	r2, [r7, #28]
 801804c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801804e:	2114      	movs	r1, #20
 8018050:	4798      	blx	r3
 8018052:	0003      	movs	r3, r0
 8018054:	633b      	str	r3, [r7, #48]	@ 0x30
            break;
 8018056:	e019      	b.n	801808c <_ux_device_class_hid_descriptor_send+0x194>
        }

        /* Copy the device descriptor into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8018058:	69bb      	ldr	r3, [r7, #24]
 801805a:	68d8      	ldr	r0, [r3, #12]
                                    hid -> ux_device_class_hid_report_address, length); /* Use case of memcpy is verified. */
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	69db      	ldr	r3, [r3, #28]
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer, 
 8018060:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8018062:	0019      	movs	r1, r3
 8018064:	f7ff fb62 	bl	801772c <_ux_utility_memory_copy>

        /* We can return the report descriptor.  */
        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 8018068:	683a      	ldr	r2, [r7, #0]
 801806a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801806c:	69bb      	ldr	r3, [r7, #24]
 801806e:	0018      	movs	r0, r3
 8018070:	f004 fb22 	bl	801c6b8 <_ux_device_stack_transfer_request>
 8018074:	0003      	movs	r3, r0
 8018076:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 8018078:	e008      	b.n	801808c <_ux_device_class_hid_descriptor_send+0x194>
        /* Not treated for now.  Fall through and Stall endpoint.  */
        
    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801807c:	699b      	ldr	r3, [r3, #24]
 801807e:	69fa      	ldr	r2, [r7, #28]
 8018080:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8018082:	2114      	movs	r1, #20
 8018084:	4798      	blx	r3
        return(UX_ERROR);
 8018086:	23ff      	movs	r3, #255	@ 0xff
 8018088:	e001      	b.n	801808e <_ux_device_class_hid_descriptor_send+0x196>
        break;
 801808a:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 801808c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 801808e:	0018      	movs	r0, r3
 8018090:	46bd      	mov	sp, r7
 8018092:	b00e      	add	sp, #56	@ 0x38
 8018094:	bd80      	pop	{r7, pc}
 8018096:	46c0      	nop			@ (mov r8, r8)
 8018098:	200116a4 	.word	0x200116a4

0801809c <_ux_device_class_hid_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 801809c:	b580      	push	{r7, lr}
 801809e:	b084      	sub	sp, #16
 80180a0:	af00      	add	r7, sp, #0
 80180a2:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	2b07      	cmp	r3, #7
 80180aa:	d834      	bhi.n	8018116 <_ux_device_class_hid_entry+0x7a>
 80180ac:	009a      	lsls	r2, r3, #2
 80180ae:	4b1c      	ldr	r3, [pc, #112]	@ (8018120 <_ux_device_class_hid_entry+0x84>)
 80180b0:	18d3      	adds	r3, r2, r3
 80180b2:	681b      	ldr	r3, [r3, #0]
 80180b4:	469f      	mov	pc, r3
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_initialize(command);
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	0018      	movs	r0, r3
 80180ba:	f000 f8e7 	bl	801828c <_ux_device_class_hid_initialize>
 80180be:	0003      	movs	r3, r0
 80180c0:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80180c2:	68fb      	ldr	r3, [r7, #12]
 80180c4:	e028      	b.n	8018118 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the HID class.  */
        status =  _ux_device_class_hid_uninitialize(command);
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	0018      	movs	r0, r3
 80180ca:	f000 fb27 	bl	801871c <_ux_device_class_hid_uninitialize>
 80180ce:	0003      	movs	r3, r0
 80180d0:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	e020      	b.n	8018118 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_DEVICE_CLASS_HID_CLASS)
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	695b      	ldr	r3, [r3, #20]
 80180da:	2b03      	cmp	r3, #3
 80180dc:	d101      	bne.n	80180e2 <_ux_device_class_hid_entry+0x46>
            return(UX_SUCCESS);
 80180de:	2300      	movs	r3, #0
 80180e0:	e01a      	b.n	8018118 <_ux_device_class_hid_entry+0x7c>
        else
            return(UX_NO_CLASS_MATCH);
 80180e2:	2357      	movs	r3, #87	@ 0x57
 80180e4:	e018      	b.n	8018118 <_ux_device_class_hid_entry+0x7c>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the hid thread needs to be activated.  */
        status =  _ux_device_class_hid_activate(command);
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	0018      	movs	r0, r3
 80180ea:	f7ff fdde 	bl	8017caa <_ux_device_class_hid_activate>
 80180ee:	0003      	movs	r3, r0
 80180f0:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 80180f2:	68fb      	ldr	r3, [r7, #12]
 80180f4:	e010      	b.n	8018118 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the hid thread canceled.  */
        status =  _ux_device_class_hid_deactivate(command);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	0018      	movs	r0, r3
 80180fa:	f7ff fedf 	bl	8017ebc <_ux_device_class_hid_deactivate>
 80180fe:	0003      	movs	r3, r0
 8018100:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	e008      	b.n	8018118 <_ux_device_class_hid_entry+0x7c>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_hid_control_request(command);
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	0018      	movs	r0, r3
 801810a:	f7ff fe19 	bl	8017d40 <_ux_device_class_hid_control_request>
 801810e:	0003      	movs	r3, r0
 8018110:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8018112:	68fb      	ldr	r3, [r7, #12]
 8018114:	e000      	b.n	8018118 <_ux_device_class_hid_entry+0x7c>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8018116:	2354      	movs	r3, #84	@ 0x54
    }   
}
 8018118:	0018      	movs	r0, r3
 801811a:	46bd      	mov	sp, r7
 801811c:	b004      	add	sp, #16
 801811e:	bd80      	pop	{r7, pc}
 8018120:	0801e5ac 	.word	0x0801e5ac

08018124 <_ux_device_class_hid_event_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_get(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 8018124:	b580      	push	{r7, lr}
 8018126:	b084      	sub	sp, #16
 8018128:	af00      	add	r7, sp, #0
 801812a:	6078      	str	r0, [r7, #4]
 801812c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_GET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */                   
    device =  &_ux_system_slave -> ux_system_slave_device;
 801812e:	4b21      	ldr	r3, [pc, #132]	@ (80181b4 <_ux_device_class_hid_event_get+0x90>)
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	3320      	adds	r3, #32
 8018134:	60fb      	str	r3, [r7, #12]
    
    /* Check the device state.  */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	2b03      	cmp	r3, #3
 801813c:	d001      	beq.n	8018142 <_ux_device_class_hid_event_get+0x1e>
        return(UX_DEVICE_HANDLE_UNKNOWN);
 801813e:	2350      	movs	r3, #80	@ 0x50
 8018140:	e033      	b.n	80181aa <_ux_device_class_hid_event_get+0x86>

    /* Check if the head and the tail of the event array is the same.  */
    if (hid -> ux_device_class_hid_event_array_head == 
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
        hid -> ux_device_class_hid_event_array_tail)
 8018146:	687b      	ldr	r3, [r7, #4]
 8018148:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
    if (hid -> ux_device_class_hid_event_array_head == 
 801814a:	429a      	cmp	r2, r3
 801814c:	d101      	bne.n	8018152 <_ux_device_class_hid_event_get+0x2e>

        /* No event to report.  */
        return(UX_ERROR);        
 801814e:	23ff      	movs	r3, #255	@ 0xff
 8018150:	e02b      	b.n	80181aa <_ux_device_class_hid_event_get+0x86>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_tail;
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018156:	60bb      	str	r3, [r7, #8]

    /* Keep the event data length inside buffer area.  */
    if (current_hid_event -> ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8018158:	68bb      	ldr	r3, [r7, #8]
 801815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801815c:	2b20      	cmp	r3, #32
 801815e:	d902      	bls.n	8018166 <_ux_device_class_hid_event_get+0x42>
        current_hid_event -> ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 8018160:	68bb      	ldr	r3, [r7, #8]
 8018162:	2220      	movs	r2, #32
 8018164:	629a      	str	r2, [r3, #40]	@ 0x28

    /* fill in the event structure from the user.  */
    hid_event -> ux_device_class_hid_event_length =  current_hid_event -> ux_device_class_hid_event_length;
 8018166:	68bb      	ldr	r3, [r7, #8]
 8018168:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801816a:	683b      	ldr	r3, [r7, #0]
 801816c:	629a      	str	r2, [r3, #40]	@ 0x28
    _ux_utility_memory_copy(hid_event -> ux_device_class_hid_event_buffer, current_hid_event -> ux_device_class_hid_event_buffer,
 801816e:	683b      	ldr	r3, [r7, #0]
 8018170:	3308      	adds	r3, #8
 8018172:	0018      	movs	r0, r3
 8018174:	68bb      	ldr	r3, [r7, #8]
 8018176:	3308      	adds	r3, #8
 8018178:	0019      	movs	r1, r3
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801817e:	001a      	movs	r2, r3
 8018180:	f7ff fad4 	bl	801772c <_ux_utility_memory_copy>
                                current_hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* Adjust the tail pointer.  Check if we are at the end.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 8018184:	68bb      	ldr	r3, [r7, #8]
 8018186:	332c      	adds	r3, #44	@ 0x2c
 8018188:	001a      	movs	r2, r3
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801818e:	429a      	cmp	r2, r3
 8018190:	d104      	bne.n	801819c <_ux_device_class_hid_event_get+0x78>

        /* We are at the end, go back to the beginning.  */
        hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	661a      	str	r2, [r3, #96]	@ 0x60
 801819a:	e005      	b.n	80181a8 <_ux_device_class_hid_event_get+0x84>
        
    else        
        /* We are not at the end, increment the tail position.  */
        hid -> ux_device_class_hid_event_array_tail++;
 801819c:	687b      	ldr	r3, [r7, #4]
 801819e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80181a0:	332c      	adds	r3, #44	@ 0x2c
 80181a2:	001a      	movs	r2, r3
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 80181a8:	2300      	movs	r3, #0
}
 80181aa:	0018      	movs	r0, r3
 80181ac:	46bd      	mov	sp, r7
 80181ae:	b004      	add	sp, #16
 80181b0:	bd80      	pop	{r7, pc}
 80181b2:	46c0      	nop			@ (mov r8, r8)
 80181b4:	200116a4 	.word	0x200116a4

080181b8 <_ux_device_class_hid_event_set>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_event_set(UX_SLAVE_CLASS_HID *hid, 
                                      UX_SLAVE_CLASS_HID_EVENT *hid_event)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	b084      	sub	sp, #16
 80181bc:	af00      	add	r7, sp, #0
 80181be:	6078      	str	r0, [r7, #4]
 80181c0:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_EVENT_SET, hid, hid_event, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Current position of the head.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80181c6:	60bb      	str	r3, [r7, #8]
    
    /* If the pointer is NULL, the round robin buffer has not been activated.  */
    if (current_hid_event == UX_NULL)
 80181c8:	68bb      	ldr	r3, [r7, #8]
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d101      	bne.n	80181d2 <_ux_device_class_hid_event_set+0x1a>
        return (UX_ERROR);
 80181ce:	23ff      	movs	r3, #255	@ 0xff
 80181d0:	e057      	b.n	8018282 <_ux_device_class_hid_event_set+0xca>
    
    /* Calculate the next position.  */
    if ((current_hid_event + 1) == hid -> ux_device_class_hid_event_array_end)
 80181d2:	68bb      	ldr	r3, [r7, #8]
 80181d4:	332c      	adds	r3, #44	@ 0x2c
 80181d6:	001a      	movs	r2, r3
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80181dc:	429a      	cmp	r2, r3
 80181de:	d103      	bne.n	80181e8 <_ux_device_class_hid_event_set+0x30>

        /* We are at the end, go back to the beginning.  */
        next_hid_event =  hid -> ux_device_class_hid_event_array;
 80181e0:	687b      	ldr	r3, [r7, #4]
 80181e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80181e4:	60fb      	str	r3, [r7, #12]
 80181e6:	e002      	b.n	80181ee <_ux_device_class_hid_event_set+0x36>
        
    else        

        /* We are not at the end, increment the head position.  */
        next_hid_event = current_hid_event + 1;
 80181e8:	68bb      	ldr	r3, [r7, #8]
 80181ea:	332c      	adds	r3, #44	@ 0x2c
 80181ec:	60fb      	str	r3, [r7, #12]
    

    /* Any place left for this event ? */
    if (next_hid_event == hid -> ux_device_class_hid_event_array_tail)
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80181f2:	68fa      	ldr	r2, [r7, #12]
 80181f4:	429a      	cmp	r2, r3
 80181f6:	d101      	bne.n	80181fc <_ux_device_class_hid_event_set+0x44>
        return (UX_ERROR);
 80181f8:	23ff      	movs	r3, #255	@ 0xff
 80181fa:	e042      	b.n	8018282 <_ux_device_class_hid_event_set+0xca>

    /* There is an event to report, get the current pointer to the event.  */
    current_hid_event =  hid -> ux_device_class_hid_event_array_head;
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018200:	60bb      	str	r3, [r7, #8]

    /* Update the head.  */
    hid -> ux_device_class_hid_event_array_head = next_hid_event;
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	68fa      	ldr	r2, [r7, #12]
 8018206:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Check if this event has a report ID.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 8018208:	687b      	ldr	r3, [r7, #4]
 801820a:	6a1b      	ldr	r3, [r3, #32]
 801820c:	2b01      	cmp	r3, #1
 801820e:	d121      	bne.n	8018254 <_ux_device_class_hid_event_set+0x9c>
    {

        /* Yes, there's a report ID. Check to see if our event buffer can also
           fit the extra byte.  */
        if (hid_event -> ux_device_class_hid_event_length + 1 > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 8018210:	683b      	ldr	r3, [r7, #0]
 8018212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018214:	3301      	adds	r3, #1
 8018216:	2b20      	cmp	r3, #32
 8018218:	d906      	bls.n	8018228 <_ux_device_class_hid_event_set+0x70>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_MEMORY_INSUFFICIENT);
 801821a:	2212      	movs	r2, #18
 801821c:	2107      	movs	r1, #7
 801821e:	2002      	movs	r0, #2
 8018220:	f7fe ff26 	bl	8017070 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

            /* Return overflow error.  */
            return(UX_MEMORY_INSUFFICIENT);
 8018224:	2312      	movs	r3, #18
 8018226:	e02c      	b.n	8018282 <_ux_device_class_hid_event_set+0xca>
        }

        /* Store the report ID.  */
        *current_hid_event -> ux_device_class_hid_event_buffer =  (UCHAR)(hid_event -> ux_device_class_hid_event_report_id);  
 8018228:	683b      	ldr	r3, [r7, #0]
 801822a:	681b      	ldr	r3, [r3, #0]
 801822c:	b2da      	uxtb	r2, r3
 801822e:	68bb      	ldr	r3, [r7, #8]
 8018230:	721a      	strb	r2, [r3, #8]
                
        /* Store the data itself.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer + 1, hid_event -> ux_device_class_hid_event_buffer,
 8018232:	68bb      	ldr	r3, [r7, #8]
 8018234:	3308      	adds	r3, #8
 8018236:	1c58      	adds	r0, r3, #1
 8018238:	683b      	ldr	r3, [r7, #0]
 801823a:	3308      	adds	r3, #8
 801823c:	0019      	movs	r1, r3
 801823e:	683b      	ldr	r3, [r7, #0]
 8018240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018242:	001a      	movs	r2, r3
 8018244:	f7ff fa72 	bl	801772c <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
    
        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length =  hid_event -> ux_device_class_hid_event_length + 1;    
 8018248:	683b      	ldr	r3, [r7, #0]
 801824a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801824c:	1c5a      	adds	r2, r3, #1
 801824e:	68bb      	ldr	r3, [r7, #8]
 8018250:	629a      	str	r2, [r3, #40]	@ 0x28
 8018252:	e00e      	b.n	8018272 <_ux_device_class_hid_event_set+0xba>
    }
    else
    {
    
        /* No report ID to consider.  */
        _ux_utility_memory_copy(current_hid_event -> ux_device_class_hid_event_buffer, hid_event -> ux_device_class_hid_event_buffer,
 8018254:	68bb      	ldr	r3, [r7, #8]
 8018256:	3308      	adds	r3, #8
 8018258:	0018      	movs	r0, r3
 801825a:	683b      	ldr	r3, [r7, #0]
 801825c:	3308      	adds	r3, #8
 801825e:	0019      	movs	r1, r3
 8018260:	683b      	ldr	r3, [r7, #0]
 8018262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018264:	001a      	movs	r2, r3
 8018266:	f7ff fa61 	bl	801772c <_ux_utility_memory_copy>
                                hid_event -> ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

        /* fill in the event structure from the user.  */
        current_hid_event -> ux_device_class_hid_event_length = hid_event -> ux_device_class_hid_event_length;    
 801826a:	683b      	ldr	r3, [r7, #0]
 801826c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801826e:	68bb      	ldr	r3, [r7, #8]
 8018270:	629a      	str	r2, [r3, #40]	@ 0x28
        hid -> ux_device_class_hid_event_state != UX_STATE_EXIT)
        hid -> ux_device_class_hid_event_state = UX_STATE_RESET;
#else

    /* Set an event to wake up the interrupt thread.  */
    _ux_device_event_flags_set(&hid -> ux_device_class_hid_event_flags_group, UX_DEVICE_CLASS_HID_NEW_EVENT, UX_OR);                
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	3328      	adds	r3, #40	@ 0x28
 8018276:	2200      	movs	r2, #0
 8018278:	2101      	movs	r1, #1
 801827a:	0018      	movs	r0, r3
 801827c:	f7ff f865 	bl	801734a <_ux_utility_event_flags_set>
#endif

    /* Return event status to the user.  */
    return(UX_SUCCESS);
 8018280:	2300      	movs	r3, #0
}
 8018282:	0018      	movs	r0, r3
 8018284:	46bd      	mov	sp, r7
 8018286:	b004      	add	sp, #16
 8018288:	bd80      	pop	{r7, pc}
	...

0801828c <_ux_device_class_hid_initialize>:
/*                                            added interrupt OUT support,*/
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801828c:	b5b0      	push	{r4, r5, r7, lr}
 801828e:	b08c      	sub	sp, #48	@ 0x30
 8018290:	af06      	add	r7, sp, #24
 8018292:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS_HID_PARAMETER            *hid_parameter;
UX_SLAVE_CLASS                          *class;
UINT                                    status = UX_SUCCESS;
 8018294:	2300      	movs	r3, #0
 8018296:	617b      	str	r3, [r7, #20]


    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	6a1b      	ldr	r3, [r3, #32]
 801829c:	613b      	str	r3, [r7, #16]

    /* Create an instance of the device hid class.  */
    hid =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID));
 801829e:	2268      	movs	r2, #104	@ 0x68
 80182a0:	2100      	movs	r1, #0
 80182a2:	2000      	movs	r0, #0
 80182a4:	f7ff f8fc 	bl	80174a0 <_ux_utility_memory_allocate>
 80182a8:	0003      	movs	r3, r0
 80182aa:	60fb      	str	r3, [r7, #12]

    /* Check for successful allocation.  */
    if (hid == UX_NULL)
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d101      	bne.n	80182b6 <_ux_device_class_hid_initialize+0x2a>
        return(UX_MEMORY_INSUFFICIENT);
 80182b2:	2312      	movs	r3, #18
 80182b4:	e0ac      	b.n	8018410 <_ux_device_class_hid_initialize+0x184>

    /* Save the address of the HID instance inside the HID container.  */
    class -> ux_slave_class_instance = (VOID *) hid;
 80182b6:	693b      	ldr	r3, [r7, #16]
 80182b8:	68fa      	ldr	r2, [r7, #12]
 80182ba:	649a      	str	r2, [r3, #72]	@ 0x48

#if !defined(UX_DEVICE_STANDALONE)

    /* Allocate some memory for the thread stack. */
    class -> ux_slave_class_thread_stack =  
            _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_DEVICE_CLASS_HID_THREAD_STACK_SIZE);
 80182bc:	2380      	movs	r3, #128	@ 0x80
 80182be:	00db      	lsls	r3, r3, #3
 80182c0:	001a      	movs	r2, r3
 80182c2:	2100      	movs	r1, #0
 80182c4:	2000      	movs	r0, #0
 80182c6:	f7ff f8eb 	bl	80174a0 <_ux_utility_memory_allocate>
 80182ca:	0001      	movs	r1, r0
    class -> ux_slave_class_thread_stack =  
 80182cc:	693a      	ldr	r2, [r7, #16]
 80182ce:	2380      	movs	r3, #128	@ 0x80
 80182d0:	005b      	lsls	r3, r3, #1
 80182d2:	50d1      	str	r1, [r2, r3]
    
    /* Check for successful allocation.  */
    if (class -> ux_slave_class_thread_stack == UX_NULL)
 80182d4:	693a      	ldr	r2, [r7, #16]
 80182d6:	2380      	movs	r3, #128	@ 0x80
 80182d8:	005b      	lsls	r3, r3, #1
 80182da:	58d3      	ldr	r3, [r2, r3]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d101      	bne.n	80182e4 <_ux_device_class_hid_initialize+0x58>
        status = UX_MEMORY_INSUFFICIENT;
 80182e0:	2312      	movs	r3, #18
 80182e2:	617b      	str	r3, [r7, #20]

    /* This instance needs to be running in a different thread. So start
       a new thread. We pass a pointer to the class to the new thread.  This thread
       does not start until we have a instance of the class. */
    if (status == UX_SUCCESS)
 80182e4:	697b      	ldr	r3, [r7, #20]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d11b      	bne.n	8018322 <_ux_device_class_hid_initialize+0x96>
        status =  _ux_device_thread_create(&class -> ux_slave_class_thread, "ux_slave_hid_thread", 
 80182ea:	693b      	ldr	r3, [r7, #16]
 80182ec:	3350      	adds	r3, #80	@ 0x50
 80182ee:	0018      	movs	r0, r3
 80182f0:	693d      	ldr	r5, [r7, #16]
 80182f2:	693a      	ldr	r2, [r7, #16]
 80182f4:	2380      	movs	r3, #128	@ 0x80
 80182f6:	005b      	lsls	r3, r3, #1
 80182f8:	58d3      	ldr	r3, [r2, r3]
 80182fa:	4c47      	ldr	r4, [pc, #284]	@ (8018418 <_ux_device_class_hid_initialize+0x18c>)
 80182fc:	4947      	ldr	r1, [pc, #284]	@ (801841c <_ux_device_class_hid_initialize+0x190>)
 80182fe:	2200      	movs	r2, #0
 8018300:	9205      	str	r2, [sp, #20]
 8018302:	2200      	movs	r2, #0
 8018304:	9204      	str	r2, [sp, #16]
 8018306:	2214      	movs	r2, #20
 8018308:	9203      	str	r2, [sp, #12]
 801830a:	2214      	movs	r2, #20
 801830c:	9202      	str	r2, [sp, #8]
 801830e:	2280      	movs	r2, #128	@ 0x80
 8018310:	00d2      	lsls	r2, r2, #3
 8018312:	9201      	str	r2, [sp, #4]
 8018314:	9300      	str	r3, [sp, #0]
 8018316:	002b      	movs	r3, r5
 8018318:	0022      	movs	r2, r4
 801831a:	f7ff fc62 	bl	8017be2 <_ux_utility_thread_create>
 801831e:	0003      	movs	r3, r0
 8018320:	617b      	str	r3, [r7, #20]
    /* Set task function.  */
    class -> ux_slave_class_task_function = _ux_device_class_hid_tasks_run;
#endif

    /* Check the creation of this thread.  */
    if (status == UX_SUCCESS)
 8018322:	697b      	ldr	r3, [r7, #20]
 8018324:	2b00      	cmp	r3, #0
 8018326:	d15c      	bne.n	80183e2 <_ux_device_class_hid_initialize+0x156>
#if !defined(UX_DEVICE_STANDALONE)
        UX_THREAD_EXTENSION_PTR_SET(&(class -> ux_slave_class_thread), class)
#endif

        /* Get the pointer to the application parameters for the hid class.  */
        hid_parameter =  command -> ux_slave_class_command_parameter;
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801832c:	60bb      	str	r3, [r7, #8]

        /* Store all the application parameter information about the report.  */
        hid -> ux_device_class_hid_report_address             = hid_parameter -> ux_device_class_hid_parameter_report_address;
 801832e:	68bb      	ldr	r3, [r7, #8]
 8018330:	689a      	ldr	r2, [r3, #8]
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	61da      	str	r2, [r3, #28]
        hid -> ux_device_class_hid_report_length              = hid_parameter -> ux_device_class_hid_parameter_report_length;
 8018336:	68bb      	ldr	r3, [r7, #8]
 8018338:	691a      	ldr	r2, [r3, #16]
 801833a:	68fb      	ldr	r3, [r7, #12]
 801833c:	625a      	str	r2, [r3, #36]	@ 0x24
        hid -> ux_device_class_hid_report_id                  = hid_parameter -> ux_device_class_hid_parameter_report_id;
 801833e:	68bb      	ldr	r3, [r7, #8]
 8018340:	68da      	ldr	r2, [r3, #12]
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	621a      	str	r2, [r3, #32]

        /* Store the callback function.  */
        hid -> ux_device_class_hid_callback                   = hid_parameter -> ux_device_class_hid_parameter_callback;
 8018346:	68bb      	ldr	r3, [r7, #8]
 8018348:	695a      	ldr	r2, [r3, #20]
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	60da      	str	r2, [r3, #12]
        hid -> ux_device_class_hid_get_callback               = hid_parameter -> ux_device_class_hid_parameter_get_callback;
 801834e:	68bb      	ldr	r3, [r7, #8]
 8018350:	699a      	ldr	r2, [r3, #24]
 8018352:	68fb      	ldr	r3, [r7, #12]
 8018354:	611a      	str	r2, [r3, #16]

        /* Create the event array.  */
        hid -> ux_device_class_hid_event_array =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_HID_EVENT), UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE);
 8018356:	2310      	movs	r3, #16
 8018358:	222c      	movs	r2, #44	@ 0x2c
 801835a:	2100      	movs	r1, #0
 801835c:	2000      	movs	r0, #0
 801835e:	f7ff f9a7 	bl	80176b0 <_ux_utility_memory_allocate_mulc_safe>
 8018362:	0002      	movs	r2, r0
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Check for successful allocation.  */
        if (hid -> ux_device_class_hid_event_array != UX_NULL)
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801836c:	2b00      	cmp	r3, #0
 801836e:	d030      	beq.n	80183d2 <_ux_device_class_hid_initialize+0x146>
        {

            /* Initialize the head and tail of the notification round robin buffers. 
               At first, the head and tail are pointing to the beginning of the array.  */
            hid -> ux_device_class_hid_event_array_head =  hid -> ux_device_class_hid_event_array;
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	65da      	str	r2, [r3, #92]	@ 0x5c
            hid -> ux_device_class_hid_event_array_tail =  hid -> ux_device_class_hid_event_array;
 8018378:	68fb      	ldr	r3, [r7, #12]
 801837a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	661a      	str	r2, [r3, #96]	@ 0x60
            hid -> ux_device_class_hid_event_array_end  =  hid -> ux_device_class_hid_event_array + UX_DEVICE_CLASS_HID_MAX_EVENTS_QUEUE;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018384:	22b0      	movs	r2, #176	@ 0xb0
 8018386:	0092      	lsls	r2, r2, #2
 8018388:	189a      	adds	r2, r3, r2
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	665a      	str	r2, [r3, #100]	@ 0x64

            /* Store the start and stop signals if needed by the application.  */
            hid -> ux_slave_class_hid_instance_activate = hid_parameter -> ux_slave_class_hid_instance_activate;
 801838e:	68bb      	ldr	r3, [r7, #8]
 8018390:	681a      	ldr	r2, [r3, #0]
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	615a      	str	r2, [r3, #20]
            hid -> ux_slave_class_hid_instance_deactivate = hid_parameter -> ux_slave_class_hid_instance_deactivate;
 8018396:	68bb      	ldr	r3, [r7, #8]
 8018398:	685a      	ldr	r2, [r3, #4]
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	619a      	str	r2, [r3, #24]

            /* By default no event wait timeout.  */
            hid -> ux_device_class_hid_event_wait_timeout = UX_WAIT_FOREVER;
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	2201      	movs	r2, #1
 80183a2:	4252      	negs	r2, r2
 80183a4:	651a      	str	r2, [r3, #80]	@ 0x50

            return(UX_SUCCESS);
#else

            /* Create a event flag group for the hid class to synchronize with the event interrupt thread.  */
            status =  _ux_utility_event_flags_create(&hid -> ux_device_class_hid_event_flags_group, "ux_device_class_hid_event_flag");
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	3328      	adds	r3, #40	@ 0x28
 80183aa:	4a1d      	ldr	r2, [pc, #116]	@ (8018420 <_ux_device_class_hid_initialize+0x194>)
 80183ac:	0011      	movs	r1, r2
 80183ae:	0018      	movs	r0, r3
 80183b0:	f7fe ff87 	bl	80172c2 <_ux_utility_event_flags_create>
 80183b4:	0003      	movs	r3, r0
 80183b6:	617b      	str	r3, [r7, #20]

            /* Check status.  */
            if (status == UX_SUCCESS)
 80183b8:	697b      	ldr	r3, [r7, #20]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d101      	bne.n	80183c2 <_ux_device_class_hid_initialize+0x136>

                /* There is error, delete event flags.  */
                _ux_utility_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
#endif
#else
                return(status);
 80183be:	697b      	ldr	r3, [r7, #20]
 80183c0:	e026      	b.n	8018410 <_ux_device_class_hid_initialize+0x184>

            }
            else

                /* It's event error. */
                status =  UX_EVENT_ERROR;
 80183c2:	2318      	movs	r3, #24
 80183c4:	617b      	str	r3, [r7, #20]

            /* Free allocated event array memory.  */
            _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80183ca:	0018      	movs	r0, r3
 80183cc:	f7ff f9ca 	bl	8017764 <_ux_utility_memory_free>
 80183d0:	e001      	b.n	80183d6 <_ux_device_class_hid_initialize+0x14a>
#endif
        }
        else
            status =  UX_MEMORY_INSUFFICIENT;
 80183d2:	2312      	movs	r3, #18
 80183d4:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

        /* Delete thread.  */
        _ux_device_thread_delete(&class -> ux_slave_class_thread);
 80183d6:	693b      	ldr	r3, [r7, #16]
 80183d8:	3350      	adds	r3, #80	@ 0x50
 80183da:	0018      	movs	r0, r3
 80183dc:	f7ff fc2d 	bl	8017c3a <_ux_utility_thread_delete>
 80183e0:	e001      	b.n	80183e6 <_ux_device_class_hid_initialize+0x15a>
#endif
    }
    else
        status = (UX_THREAD_ERROR);
 80183e2:	2316      	movs	r3, #22
 80183e4:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

    /* Free stack. */
    if (class -> ux_slave_class_thread_stack)
 80183e6:	693a      	ldr	r2, [r7, #16]
 80183e8:	2380      	movs	r3, #128	@ 0x80
 80183ea:	005b      	lsls	r3, r3, #1
 80183ec:	58d3      	ldr	r3, [r2, r3]
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d006      	beq.n	8018400 <_ux_device_class_hid_initialize+0x174>
        _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 80183f2:	693a      	ldr	r2, [r7, #16]
 80183f4:	2380      	movs	r3, #128	@ 0x80
 80183f6:	005b      	lsls	r3, r3, #1
 80183f8:	58d3      	ldr	r3, [r2, r3]
 80183fa:	0018      	movs	r0, r3
 80183fc:	f7ff f9b2 	bl	8017764 <_ux_utility_memory_free>
#endif

    /* Unmount instance. */
    class -> ux_slave_class_instance =  UX_NULL;
 8018400:	693b      	ldr	r3, [r7, #16]
 8018402:	2200      	movs	r2, #0
 8018404:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Free HID instance. */
    _ux_utility_memory_free(hid);
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	0018      	movs	r0, r3
 801840a:	f7ff f9ab 	bl	8017764 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 801840e:	697b      	ldr	r3, [r7, #20]
}
 8018410:	0018      	movs	r0, r3
 8018412:	46bd      	mov	sp, r7
 8018414:	b006      	add	sp, #24
 8018416:	bdb0      	pop	{r4, r5, r7, pc}
 8018418:	08018425 	.word	0x08018425
 801841c:	0801e350 	.word	0x0801e350
 8018420:	0801e364 	.word	0x0801e364

08018424 <_ux_device_class_hid_interrupt_thread>:
/*                                            off for standalone compile, */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_hid_interrupt_thread(ULONG hid_class)
{
 8018424:	b590      	push	{r4, r7, lr}
 8018426:	b097      	sub	sp, #92	@ 0x5c
 8018428:	af02      	add	r7, sp, #8
 801842a:	6078      	str	r0, [r7, #4]
UCHAR                       *buffer;
ULONG                       actual_flags;


    /* Cast properly the hid instance.  */
    UX_THREAD_EXTENSION_PTR_GET(class, UX_SLAVE_CLASS, hid_class)
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    /* Get the hid instance from this class container.  */
    hid =  (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 8018430:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018434:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8018436:	4b43      	ldr	r3, [pc, #268]	@ (8018544 <_ux_device_class_hid_interrupt_thread+0x120>)
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	3320      	adds	r3, #32
 801843c:	647b      	str	r3, [r7, #68]	@ 0x44
    /* This thread runs forever but can be suspended or resumed.  */
    while(1)
    {

        /* All HID events are on the interrupt endpoint IN, from the host.  */
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 801843e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018440:	685b      	ldr	r3, [r3, #4]
 8018442:	3330      	adds	r3, #48	@ 0x30
 8018444:	643b      	str	r3, [r7, #64]	@ 0x40

        /* As long as the device is in the CONFIGURED state.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8018446:	e070      	b.n	801852a <_ux_device_class_hid_interrupt_thread+0x106>
        { 

            /* Wait until we have a event sent by the application
               or a change in the idle state to send last or empty report.  */
            status =  _ux_utility_event_flags_get(&hid -> ux_device_class_hid_event_flags_group,
 8018448:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801844a:	3328      	adds	r3, #40	@ 0x28
 801844c:	0018      	movs	r0, r3
 801844e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018450:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018452:	2208      	movs	r2, #8
 8018454:	18ba      	adds	r2, r7, r2
 8018456:	9300      	str	r3, [sp, #0]
 8018458:	0013      	movs	r3, r2
 801845a:	2201      	movs	r2, #1
 801845c:	2103      	movs	r1, #3
 801845e:	f7fe ff59 	bl	8017314 <_ux_utility_event_flags_get>
 8018462:	0003      	movs	r3, r0
 8018464:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                                    UX_DEVICE_CLASS_HID_EVENTS_MASK, UX_OR_CLEAR, &actual_flags,
                                                    hid -> ux_device_class_hid_event_wait_timeout);

            /* If there is no event, check if we have timeout defined.  */
            if (status == UX_NO_EVENTS)
 8018466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018468:	2b07      	cmp	r3, #7
 801846a:	d126      	bne.n	80184ba <_ux_device_class_hid_interrupt_thread+0x96>
            {

                /* There is no event exists on timeout, insert last.  */

                /* Check if no request been ready.  */
                if (transfer_request_in -> ux_slave_transfer_request_requested_length == 0)
 801846c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801846e:	695b      	ldr	r3, [r3, #20]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d10b      	bne.n	801848c <_ux_device_class_hid_interrupt_thread+0x68>
                {

                    /* Assume the request use whole interrupt transfer payload.  */
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
                            transfer_request_in -> ux_slave_transfer_request_transfer_length;
 8018474:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018476:	6a1a      	ldr	r2, [r3, #32]
                    transfer_request_in -> ux_slave_transfer_request_requested_length =
 8018478:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801847a:	615a      	str	r2, [r3, #20]

                    /* Set the data to zeros.  */
                    _ux_utility_memory_set(
                        transfer_request_in -> ux_slave_transfer_request_data_pointer, 0,
 801847c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801847e:	68d8      	ldr	r0, [r3, #12]
                    _ux_utility_memory_set(
 8018480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018482:	695b      	ldr	r3, [r3, #20]
 8018484:	001a      	movs	r2, r3
 8018486:	2100      	movs	r1, #0
 8018488:	f7ff fa48 	bl	801791c <_ux_utility_memory_set>
                        transfer_request_in -> ux_slave_transfer_request_requested_length); /* Use case of memset is verified. */
                }

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, 
 801848c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801848e:	6959      	ldr	r1, [r3, #20]
 8018490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018492:	695a      	ldr	r2, [r3, #20]
 8018494:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8018496:	0018      	movs	r0, r3
 8018498:	f004 f90e 	bl	801c6b8 <_ux_device_stack_transfer_request>
 801849c:	0003      	movs	r3, r0
 801849e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                transfer_request_in -> ux_slave_transfer_request_requested_length,
                                transfer_request_in -> ux_slave_transfer_request_requested_length);

                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 80184a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d040      	beq.n	8018528 <_ux_device_class_hid_interrupt_thread+0x104>
 80184a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184a8:	2b26      	cmp	r3, #38	@ 0x26
 80184aa:	d03d      	beq.n	8018528 <_ux_device_class_hid_interrupt_thread+0x104>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 80184ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184ae:	001a      	movs	r2, r3
 80184b0:	2107      	movs	r1, #7
 80184b2:	2002      	movs	r0, #2
 80184b4:	f7fe fddc 	bl	8017070 <_ux_system_error_handler>

                /* Next: check events.  */
                continue;
 80184b8:	e036      	b.n	8018528 <_ux_device_class_hid_interrupt_thread+0x104>
            }

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 80184ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d029      	beq.n	8018514 <_ux_device_class_hid_interrupt_thread+0xf0>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 80184c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184c2:	001a      	movs	r2, r3
 80184c4:	2107      	movs	r1, #7
 80184c6:	2002      	movs	r0, #2
 80184c8:	f7fe fdd2 	bl	8017070 <_ux_system_error_handler>

                /* Do not proceed.  */
                return;
 80184cc:	e037      	b.n	801853e <_ux_device_class_hid_interrupt_thread+0x11a>
            /* Check if we have an event to report.  */
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
            {

                /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
                buffer =  transfer_request_in -> ux_slave_transfer_request_data_pointer;
 80184ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80184d0:	68db      	ldr	r3, [r3, #12]
 80184d2:	63bb      	str	r3, [r7, #56]	@ 0x38
            
                /* Copy the event buffer into the target buffer.  */
                _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */
 80184d4:	240c      	movs	r4, #12
 80184d6:	193b      	adds	r3, r7, r4
 80184d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80184da:	193b      	adds	r3, r7, r4
 80184dc:	3308      	adds	r3, #8
 80184de:	0019      	movs	r1, r3
 80184e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80184e2:	0018      	movs	r0, r3
 80184e4:	f7ff f922 	bl	801772c <_ux_utility_memory_copy>
            
                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request_in, hid_event.ux_device_class_hid_event_length, 
 80184e8:	193b      	adds	r3, r7, r4
 80184ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80184ec:	193b      	adds	r3, r7, r4
 80184ee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80184f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80184f2:	0018      	movs	r0, r3
 80184f4:	f004 f8e0 	bl	801c6b8 <_ux_device_stack_transfer_request>
 80184f8:	0003      	movs	r3, r0
 80184fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                                                hid_event.ux_device_class_hid_event_length);
                
                /* Check error code. We don't want to invoke the error callback
                   if the device was disconnected, since that's expected.  */
                if (status != UX_SUCCESS && status != UX_TRANSFER_BUS_RESET)
 80184fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80184fe:	2b00      	cmp	r3, #0
 8018500:	d008      	beq.n	8018514 <_ux_device_class_hid_interrupt_thread+0xf0>
 8018502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018504:	2b26      	cmp	r3, #38	@ 0x26
 8018506:	d005      	beq.n	8018514 <_ux_device_class_hid_interrupt_thread+0xf0>

                    /* Error trap. */
                    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8018508:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801850a:	001a      	movs	r2, r3
 801850c:	2107      	movs	r1, #7
 801850e:	2002      	movs	r0, #2
 8018510:	f7fe fdae 	bl	8017070 <_ux_system_error_handler>
            while (_ux_device_class_hid_event_get(hid, &hid_event) == UX_SUCCESS)
 8018514:	230c      	movs	r3, #12
 8018516:	18fa      	adds	r2, r7, r3
 8018518:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801851a:	0011      	movs	r1, r2
 801851c:	0018      	movs	r0, r3
 801851e:	f7ff fe01 	bl	8018124 <_ux_device_class_hid_event_get>
 8018522:	1e03      	subs	r3, r0, #0
 8018524:	d0d3      	beq.n	80184ce <_ux_device_class_hid_interrupt_thread+0xaa>
 8018526:	e000      	b.n	801852a <_ux_device_class_hid_interrupt_thread+0x106>
                continue;
 8018528:	46c0      	nop			@ (mov r8, r8)
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801852a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801852c:	681b      	ldr	r3, [r3, #0]
 801852e:	2b03      	cmp	r3, #3
 8018530:	d08a      	beq.n	8018448 <_ux_device_class_hid_interrupt_thread+0x24>
            }                
        }
             
        /* We need to suspend ourselves. We will be resumed by the device enumeration module.  */
        _ux_device_thread_suspend(&class -> ux_slave_class_thread);
 8018532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018534:	3350      	adds	r3, #80	@ 0x50
 8018536:	0018      	movs	r0, r3
 8018538:	f7ff fba8 	bl	8017c8c <_ux_utility_thread_suspend>
        transfer_request_in =  &hid -> ux_device_class_hid_interrupt_endpoint -> ux_slave_endpoint_transfer_request;
 801853c:	e77f      	b.n	801843e <_ux_device_class_hid_interrupt_thread+0x1a>
    }
}
 801853e:	46bd      	mov	sp, r7
 8018540:	b015      	add	sp, #84	@ 0x54
 8018542:	bd90      	pop	{r4, r7, pc}
 8018544:	200116a4 	.word	0x200116a4

08018548 <_ux_device_class_hid_report_get>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_get(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8018548:	b590      	push	{r4, r7, lr}
 801854a:	b097      	sub	sp, #92	@ 0x5c
 801854c:	af00      	add	r7, sp, #0
 801854e:	60f8      	str	r0, [r7, #12]
 8018550:	60b9      	str	r1, [r7, #8]
 8018552:	607a      	str	r2, [r7, #4]
 8018554:	603b      	str	r3, [r7, #0]
UCHAR                           report_id;
UCHAR                           report_type;
UX_SLAVE_CLASS_HID_EVENT        hid_event;
ULONG                           hid_event_length;
UCHAR                           *buffer;
UINT                            status =  UX_ERROR;
 8018556:	23ff      	movs	r3, #255	@ 0xff
 8018558:	653b      	str	r3, [r7, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_GET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801855a:	4b45      	ldr	r3, [pc, #276]	@ (8018670 <_ux_device_class_hid_report_get+0x128>)
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	3320      	adds	r3, #32
 8018560:	64fb      	str	r3, [r7, #76]	@ 0x4c
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 8018562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8018564:	333c      	adds	r3, #60	@ 0x3c
 8018566:	64bb      	str	r3, [r7, #72]	@ 0x48

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8018568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801856a:	3330      	adds	r3, #48	@ 0x30
 801856c:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Get report ID (wValue.lower) and report type (wValue.higher).  */
    report_id   = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 0);
 801856e:	2443      	movs	r4, #67	@ 0x43
 8018570:	193b      	adds	r3, r7, r4
 8018572:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018574:	2156      	movs	r1, #86	@ 0x56
 8018576:	5c52      	ldrb	r2, [r2, r1]
 8018578:	701a      	strb	r2, [r3, #0]
    report_type = *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE + 1);
 801857a:	2042      	movs	r0, #66	@ 0x42
 801857c:	183b      	adds	r3, r7, r0
 801857e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8018580:	2157      	movs	r1, #87	@ 0x57
 8018582:	5c52      	ldrb	r2, [r2, r1]
 8018584:	701a      	strb	r2, [r3, #0]

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8018586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018588:	2203      	movs	r2, #3
 801858a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Prepare the event data payload from the hid event structure.  Get a pointer to the buffer area.  */
    buffer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801858c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801858e:	68db      	ldr	r3, [r3, #12]
 8018590:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Initialize event fields.  */
    hid_event.ux_device_class_hid_event_report_id   = report_id;
 8018592:	193b      	adds	r3, r7, r4
 8018594:	781a      	ldrb	r2, [r3, #0]
 8018596:	2110      	movs	r1, #16
 8018598:	187b      	adds	r3, r7, r1
 801859a:	601a      	str	r2, [r3, #0]
    hid_event.ux_device_class_hid_event_report_type = report_type;
 801859c:	183b      	adds	r3, r7, r0
 801859e:	781a      	ldrb	r2, [r3, #0]
 80185a0:	187b      	adds	r3, r7, r1
 80185a2:	605a      	str	r2, [r3, #4]
    hid_event.ux_device_class_hid_event_length      = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;
 80185a4:	187b      	adds	r3, r7, r1
 80185a6:	2220      	movs	r2, #32
 80185a8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* If it's input report without ID try to get it from event queue head.  */
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 80185aa:	183b      	adds	r3, r7, r0
 80185ac:	781b      	ldrb	r3, [r3, #0]
 80185ae:	2b01      	cmp	r3, #1
 80185b0:	d10c      	bne.n	80185cc <_ux_device_class_hid_report_get+0x84>
        hid -> ux_device_class_hid_report_id != UX_TRUE)
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	6a1b      	ldr	r3, [r3, #32]
    if (report_type == UX_DEVICE_CLASS_HID_REPORT_TYPE_INPUT &&
 80185b6:	2b01      	cmp	r3, #1
 80185b8:	d008      	beq.n	80185cc <_ux_device_class_hid_report_get+0x84>

        /* Check if we have an event to report.  */
        status = _ux_device_class_hid_event_get(hid, &hid_event);
 80185ba:	187a      	adds	r2, r7, r1
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	0011      	movs	r1, r2
 80185c0:	0018      	movs	r0, r3
 80185c2:	f7ff fdaf 	bl	8018124 <_ux_device_class_hid_event_get>
 80185c6:	0003      	movs	r3, r0
 80185c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80185ca:	e00c      	b.n	80185e6 <_ux_device_class_hid_report_get+0x9e>
    /* Try to get event from application callback.  */
    else
    {
        
        /* Let application fill event.  */
        if (hid -> ux_device_class_hid_get_callback != UX_NULL)
 80185cc:	68fb      	ldr	r3, [r7, #12]
 80185ce:	691b      	ldr	r3, [r3, #16]
 80185d0:	2b00      	cmp	r3, #0
 80185d2:	d008      	beq.n	80185e6 <_ux_device_class_hid_report_get+0x9e>
            status = hid -> ux_device_class_hid_get_callback(hid, &hid_event);
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	691b      	ldr	r3, [r3, #16]
 80185d8:	2210      	movs	r2, #16
 80185da:	18b9      	adds	r1, r7, r2
 80185dc:	68fa      	ldr	r2, [r7, #12]
 80185de:	0010      	movs	r0, r2
 80185e0:	4798      	blx	r3
 80185e2:	0003      	movs	r3, r0
 80185e4:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    if (status == UX_SUCCESS)
 80185e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d124      	bne.n	8018636 <_ux_device_class_hid_report_get+0xee>
    {

        /* Get the length to send back to the host.  */
        if (host_length < hid_event.ux_device_class_hid_event_length)
 80185ec:	2310      	movs	r3, #16
 80185ee:	18fb      	adds	r3, r7, r3
 80185f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185f2:	683a      	ldr	r2, [r7, #0]
 80185f4:	429a      	cmp	r2, r3
 80185f6:	d202      	bcs.n	80185fe <_ux_device_class_hid_report_get+0xb6>
            hid_event_length =  host_length;
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80185fc:	e003      	b.n	8018606 <_ux_device_class_hid_report_get+0xbe>
        else
            hid_event_length =  hid_event.ux_device_class_hid_event_length;
 80185fe:	2310      	movs	r3, #16
 8018600:	18fb      	adds	r3, r7, r3
 8018602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018604:	657b      	str	r3, [r7, #84]	@ 0x54
        if (hid_event_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8018606:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018608:	2380      	movs	r3, #128	@ 0x80
 801860a:	005b      	lsls	r3, r3, #1
 801860c:	429a      	cmp	r2, r3
 801860e:	d902      	bls.n	8018616 <_ux_device_class_hid_report_get+0xce>
            hid_event_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8018610:	2380      	movs	r3, #128	@ 0x80
 8018612:	005b      	lsls	r3, r3, #1
 8018614:	657b      	str	r3, [r7, #84]	@ 0x54

        /* First reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8018616:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801861a:	2100      	movs	r1, #0
 801861c:	0018      	movs	r0, r3
 801861e:	f7ff f97d 	bl	801791c <_ux_utility_memory_set>

        /* Copy the event buffer into the target buffer.  */
        _ux_utility_memory_copy(buffer, hid_event.ux_device_class_hid_event_buffer, hid_event_length); /* Use case of memcpy is verified. */
 8018622:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8018624:	2310      	movs	r3, #16
 8018626:	18fb      	adds	r3, r7, r3
 8018628:	3308      	adds	r3, #8
 801862a:	0019      	movs	r1, r3
 801862c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801862e:	0018      	movs	r0, r3
 8018630:	f7ff f87c 	bl	801772c <_ux_utility_memory_copy>
 8018634:	e00e      	b.n	8018654 <_ux_device_class_hid_report_get+0x10c>
    {

        /* There's no event, so send back zero'd memory.  */

        /* Get the length to send back to the host.  */
        if (host_length < UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	2bff      	cmp	r3, #255	@ 0xff
 801863a:	d802      	bhi.n	8018642 <_ux_device_class_hid_report_get+0xfa>
            hid_event_length =  host_length;
 801863c:	683b      	ldr	r3, [r7, #0]
 801863e:	657b      	str	r3, [r7, #84]	@ 0x54
 8018640:	e002      	b.n	8018648 <_ux_device_class_hid_report_get+0x100>
        else
            hid_event_length =  UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 8018642:	2380      	movs	r3, #128	@ 0x80
 8018644:	005b      	lsls	r3, r3, #1
 8018646:	657b      	str	r3, [r7, #84]	@ 0x54

        /* Reset it.  */
        _ux_utility_memory_set(buffer, 0, hid_event_length); /* Use case of memset is verified. */
 8018648:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801864a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801864c:	2100      	movs	r1, #0
 801864e:	0018      	movs	r0, r3
 8018650:	f7ff f964 	bl	801791c <_ux_utility_memory_set>
    }

    /* We can send the report.  */
    status =  _ux_device_stack_transfer_request(transfer_request, hid_event_length, host_length);
 8018654:	683a      	ldr	r2, [r7, #0]
 8018656:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8018658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801865a:	0018      	movs	r0, r3
 801865c:	f004 f82c 	bl	801c6b8 <_ux_device_stack_transfer_request>
 8018660:	0003      	movs	r3, r0
 8018662:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Return the status to the caller.  */
    return(status);
 8018664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
}
 8018666:	0018      	movs	r0, r3
 8018668:	46bd      	mov	sp, r7
 801866a:	b017      	add	sp, #92	@ 0x5c
 801866c:	bd90      	pop	{r4, r7, pc}
 801866e:	46c0      	nop			@ (mov r8, r8)
 8018670:	200116a4 	.word	0x200116a4

08018674 <_ux_device_class_hid_report_set>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_report_set(UX_SLAVE_CLASS_HID *hid, ULONG descriptor_type, 
                                            ULONG request_index, ULONG host_length)
{
 8018674:	b590      	push	{r4, r7, lr}
 8018676:	b095      	sub	sp, #84	@ 0x54
 8018678:	af00      	add	r7, sp, #0
 801867a:	60f8      	str	r0, [r7, #12]
 801867c:	60b9      	str	r1, [r7, #8]
 801867e:	607a      	str	r2, [r7, #4]
 8018680:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_HID_REPORT_SET, hid, descriptor_type, request_index, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 8018682:	4b25      	ldr	r3, [pc, #148]	@ (8018718 <_ux_device_class_hid_report_set+0xa4>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	3320      	adds	r3, #32
 8018688:	64bb      	str	r3, [r7, #72]	@ 0x48
    
    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801868a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801868c:	333c      	adds	r3, #60	@ 0x3c
 801868e:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 8018690:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018692:	3330      	adds	r3, #48	@ 0x30
 8018694:	643b      	str	r3, [r7, #64]	@ 0x40
    
    /* Set the event type to OUTPUT.  */
    hid_event.ux_device_class_hid_event_report_type =  descriptor_type;
 8018696:	2114      	movs	r1, #20
 8018698:	187b      	adds	r3, r7, r1
 801869a:	68ba      	ldr	r2, [r7, #8]
 801869c:	605a      	str	r2, [r3, #4]
    
    /* Get HID data address.  */
    hid_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 801869e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186a0:	68db      	ldr	r3, [r3, #12]
 80186a2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for report ID in this HID descriptor.  */
    if (hid -> ux_device_class_hid_report_id == UX_TRUE)
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	6a1b      	ldr	r3, [r3, #32]
 80186a8:	2b01      	cmp	r3, #1
 80186aa:	d10d      	bne.n	80186c8 <_ux_device_class_hid_report_set+0x54>
    {
        /* Set the report ID, First byte of data payload.  */
        hid_event.ux_device_class_hid_event_report_id = (ULONG) *hid_buffer;
 80186ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80186ae:	781b      	ldrb	r3, [r3, #0]
 80186b0:	001a      	movs	r2, r3
 80186b2:	187b      	adds	r3, r7, r1
 80186b4:	601a      	str	r2, [r3, #0]

        /* Set the length = total length - report ID. */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length -1;
 80186b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186b8:	699b      	ldr	r3, [r3, #24]
 80186ba:	1e5a      	subs	r2, r3, #1
 80186bc:	187b      	adds	r3, r7, r1
 80186be:	629a      	str	r2, [r3, #40]	@ 0x28
    
        /* Set HID data after report ID.  */
        hid_buffer++;
 80186c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80186c2:	3301      	adds	r3, #1
 80186c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80186c6:	e007      	b.n	80186d8 <_ux_device_class_hid_report_set+0x64>
    }
        
    else
    {    
        /* Set the report ID, not used here.  */
        hid_event.ux_device_class_hid_event_report_id = 0;
 80186c8:	2114      	movs	r1, #20
 80186ca:	187b      	adds	r3, r7, r1
 80186cc:	2200      	movs	r2, #0
 80186ce:	601a      	str	r2, [r3, #0]

        /* Set the length.  */
        hid_event.ux_device_class_hid_event_length = transfer_request -> ux_slave_transfer_request_actual_length;
 80186d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80186d2:	699a      	ldr	r2, [r3, #24]
 80186d4:	187b      	adds	r3, r7, r1
 80186d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
        
    /* Copy the buffer received from the host.  Check for overflow. */
    if (hid_event.ux_device_class_hid_event_length > UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH)
 80186d8:	2214      	movs	r2, #20
 80186da:	18bb      	adds	r3, r7, r2
 80186dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80186de:	2b20      	cmp	r3, #32
 80186e0:	d902      	bls.n	80186e8 <_ux_device_class_hid_report_set+0x74>
    
        /* Overflow detected.  */
        hid_event.ux_device_class_hid_event_length = UX_DEVICE_CLASS_HID_EVENT_BUFFER_LENGTH;        
 80186e2:	18bb      	adds	r3, r7, r2
 80186e4:	2220      	movs	r2, #32
 80186e6:	629a      	str	r2, [r3, #40]	@ 0x28
        
    /* Now we can safely copy the payload.  */
    _ux_utility_memory_copy(hid_event.ux_device_class_hid_event_buffer, hid_buffer, 
 80186e8:	2414      	movs	r4, #20
 80186ea:	193b      	adds	r3, r7, r4
 80186ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80186ee:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80186f0:	193b      	adds	r3, r7, r4
 80186f2:	3308      	adds	r3, #8
 80186f4:	0018      	movs	r0, r3
 80186f6:	f7ff f819 	bl	801772c <_ux_utility_memory_copy>
                                hid_event.ux_device_class_hid_event_length); /* Use case of memcpy is verified. */

    /* If there is a callback defined by the application, send the hid event to it.  */
    if (hid -> ux_device_class_hid_callback != UX_NULL)
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	68db      	ldr	r3, [r3, #12]
 80186fe:	2b00      	cmp	r3, #0
 8018700:	d005      	beq.n	801870e <_ux_device_class_hid_report_set+0x9a>
    
        /* Callback exists. */
        hid -> ux_device_class_hid_callback(hid, &hid_event);
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	68db      	ldr	r3, [r3, #12]
 8018706:	1939      	adds	r1, r7, r4
 8018708:	68fa      	ldr	r2, [r7, #12]
 801870a:	0010      	movs	r0, r2
 801870c:	4798      	blx	r3
        
    /* Return the status to the caller.  */
    return(UX_SUCCESS);
 801870e:	2300      	movs	r3, #0
}
 8018710:	0018      	movs	r0, r3
 8018712:	46bd      	mov	sp, r7
 8018714:	b015      	add	sp, #84	@ 0x54
 8018716:	bd90      	pop	{r4, r7, pc}
 8018718:	200116a4 	.word	0x200116a4

0801871c <_ux_device_class_hid_uninitialize>:
/*                                            added interrupt OUT support,*/
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_hid_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 801871c:	b580      	push	{r7, lr}
 801871e:	b084      	sub	sp, #16
 8018720:	af00      	add	r7, sp, #0
 8018722:	6078      	str	r0, [r7, #4]
UX_SLAVE_CLASS_HID                      *hid;
UX_SLAVE_CLASS                          *class;


    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	6a1b      	ldr	r3, [r3, #32]
 8018728:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    hid = (UX_SLAVE_CLASS_HID *) class -> ux_slave_class_instance;
 801872a:	68fb      	ldr	r3, [r7, #12]
 801872c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801872e:	60bb      	str	r3, [r7, #8]

#if !defined(UX_DEVICE_STANDALONE)

    /* Remove HID thread.  */
    _ux_device_thread_delete(&class -> ux_slave_class_thread);
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	3350      	adds	r3, #80	@ 0x50
 8018734:	0018      	movs	r0, r3
 8018736:	f7ff fa80 	bl	8017c3a <_ux_utility_thread_delete>

    /* Remove the thread used by HID.  */
    _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 801873a:	68fa      	ldr	r2, [r7, #12]
 801873c:	2380      	movs	r3, #128	@ 0x80
 801873e:	005b      	lsls	r3, r3, #1
 8018740:	58d3      	ldr	r3, [r2, r3]
 8018742:	0018      	movs	r0, r3
 8018744:	f7ff f80e 	bl	8017764 <_ux_utility_memory_free>

    /* Delete the event flag group for the hid class.  */
    _ux_device_event_flags_delete(&hid -> ux_device_class_hid_event_flags_group);
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	3328      	adds	r3, #40	@ 0x28
 801874c:	0018      	movs	r0, r3
 801874e:	f7fe fdd2 	bl	80172f6 <_ux_utility_event_flags_delete>
#endif

    /* Free memory for the array. */
    _ux_utility_memory_free(hid -> ux_device_class_hid_event_array);
 8018752:	68bb      	ldr	r3, [r7, #8]
 8018754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018756:	0018      	movs	r0, r3
 8018758:	f7ff f804 	bl	8017764 <_ux_utility_memory_free>
        hid -> ux_device_class_hid_receiver ->
            ux_device_class_hid_receiver_uninitialize(hid -> ux_device_class_hid_receiver);
#endif

    /* Free the resources.  */
    _ux_utility_memory_free(hid);
 801875c:	68bb      	ldr	r3, [r7, #8]
 801875e:	0018      	movs	r0, r3
 8018760:	f7ff f800 	bl	8017764 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(UX_SUCCESS);
 8018764:	2300      	movs	r3, #0
}
 8018766:	0018      	movs	r0, r3
 8018768:	46bd      	mov	sp, r7
 801876a:	b004      	add	sp, #16
 801876c:	bd80      	pop	{r7, pc}

0801876e <_ux_device_class_storage_activate>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_activate(UX_SLAVE_CLASS_COMMAND *command)
{
 801876e:	b580      	push	{r7, lr}
 8018770:	b086      	sub	sp, #24
 8018772:	af00      	add	r7, sp, #0
 8018774:	6078      	str	r0, [r7, #4]
                                          
UINT                                    status = UX_SUCCESS;
 8018776:	2300      	movs	r3, #0
 8018778:	617b      	str	r3, [r7, #20]
UX_SLAVE_ENDPOINT                       *endpoint;
#endif


    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;
 801877a:	687b      	ldr	r3, [r7, #4]
 801877c:	6a1b      	ldr	r3, [r3, #32]
 801877e:	613b      	str	r3, [r7, #16]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class_inst -> ux_slave_class_instance;
 8018780:	693b      	ldr	r3, [r7, #16]
 8018782:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018784:	60fb      	str	r3, [r7, #12]

    /* Get the interface that owns this instance.  */
    interface =  (UX_SLAVE_INTERFACE  *) command -> ux_slave_class_command_interface;
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	689b      	ldr	r3, [r3, #8]
 801878a:	60bb      	str	r3, [r7, #8]
    
    /* Store the class instance into the interface.  */
    interface -> ux_slave_interface_class_instance =  (VOID *)storage;
 801878c:	68bb      	ldr	r3, [r7, #8]
 801878e:	68fa      	ldr	r2, [r7, #12]
 8018790:	609a      	str	r2, [r3, #8]
         
    /* Now the opposite, store the interface in the class instance.  */
    storage -> ux_slave_class_storage_interface =  interface;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	68ba      	ldr	r2, [r7, #8]
 8018796:	601a      	str	r2, [r3, #0]

#if !defined(UX_DEVICE_STANDALONE)

    /* Resume thread.  */
    _ux_device_thread_resume(&class_inst -> ux_slave_class_thread); 
 8018798:	693b      	ldr	r3, [r7, #16]
 801879a:	3350      	adds	r3, #80	@ 0x50
 801879c:	0018      	movs	r0, r3
 801879e:	f7ff fa66 	bl	8017c6e <_ux_utility_thread_resume>

    status = UX_SUCCESS;
#endif

    /* If there is a activate function call it.  */
    if (storage -> ux_slave_class_storage_instance_activate != UX_NULL)
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d004      	beq.n	80187b4 <_ux_device_class_storage_activate+0x46>
    {        
        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_activate(storage);
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80187ae:	68fa      	ldr	r2, [r7, #12]
 80187b0:	0010      	movs	r0, r2
 80187b2:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_INTERFACE, storage, 0, 0, 0)

    /* Return completion status.  */
    return(status);
 80187b4:	697b      	ldr	r3, [r7, #20]
}
 80187b6:	0018      	movs	r0, r3
 80187b8:	46bd      	mov	sp, r7
 80187ba:	b006      	add	sp, #24
 80187bc:	bd80      	pop	{r7, pc}
	...

080187c0 <_ux_device_class_storage_control_request>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_control_request(UX_SLAVE_CLASS_COMMAND *command)
{
 80187c0:	b580      	push	{r7, lr}
 80187c2:	b08c      	sub	sp, #48	@ 0x30
 80187c4:	af00      	add	r7, sp, #0
 80187c6:	6078      	str	r0, [r7, #4]
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;


    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 80187c8:	4b3b      	ldr	r3, [pc, #236]	@ (80188b8 <_ux_device_class_storage_control_request+0xf8>)
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	3320      	adds	r3, #32
 80187ce:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the pointer to the transfer request associated with the control endpoint.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 80187d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80187d2:	336c      	adds	r3, #108	@ 0x6c
 80187d4:	623b      	str	r3, [r7, #32]
    
    /* Extract the request type from the SETUP packet..   */
    request =  *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 80187d6:	6a3b      	ldr	r3, [r7, #32]
 80187d8:	2255      	movs	r2, #85	@ 0x55
 80187da:	5c9b      	ldrb	r3, [r3, r2]
 80187dc:	61fb      	str	r3, [r7, #28]
    request_value = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 80187de:	6a3b      	ldr	r3, [r7, #32]
 80187e0:	3354      	adds	r3, #84	@ 0x54
 80187e2:	3302      	adds	r3, #2
 80187e4:	0018      	movs	r0, r3
 80187e6:	f7ff f96e 	bl	8017ac6 <_ux_utility_short_get>
 80187ea:	0003      	movs	r3, r0
 80187ec:	61bb      	str	r3, [r7, #24]
    request_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 80187ee:	6a3b      	ldr	r3, [r7, #32]
 80187f0:	3354      	adds	r3, #84	@ 0x54
 80187f2:	3306      	adds	r3, #6
 80187f4:	0018      	movs	r0, r3
 80187f6:	f7ff f966 	bl	8017ac6 <_ux_utility_short_get>
 80187fa:	0003      	movs	r3, r0
 80187fc:	617b      	str	r3, [r7, #20]

    /* Check if wValue is valid.  */
    if (request_value != 0)
 80187fe:	69bb      	ldr	r3, [r7, #24]
 8018800:	2b00      	cmp	r3, #0
 8018802:	d001      	beq.n	8018808 <_ux_device_class_storage_control_request+0x48>
        return(UX_ERROR);
 8018804:	23ff      	movs	r3, #255	@ 0xff
 8018806:	e052      	b.n	80188ae <_ux_device_class_storage_control_request+0xee>

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6a1b      	ldr	r3, [r3, #32]
 801880c:	613b      	str	r3, [r7, #16]
    
    /* Get the storage instance from this class container.  */
    storage =  (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 801880e:	693b      	ldr	r3, [r7, #16]
 8018810:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018812:	60fb      	str	r3, [r7, #12]

    /* Here we proceed only the standard request we know of at the device level.  */
    switch (request)
 8018814:	69fb      	ldr	r3, [r7, #28]
 8018816:	2bfe      	cmp	r3, #254	@ 0xfe
 8018818:	d02f      	beq.n	801887a <_ux_device_class_storage_control_request+0xba>
 801881a:	69fb      	ldr	r3, [r7, #28]
 801881c:	2bff      	cmp	r3, #255	@ 0xff
 801881e:	d143      	bne.n	80188a8 <_ux_device_class_storage_control_request+0xe8>
    {

    case UX_SLAVE_CLASS_STORAGE_RESET:

        /* Check if wLength is valid.  */
        if (request_length != 0)
 8018820:	697b      	ldr	r3, [r7, #20]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d001      	beq.n	801882a <_ux_device_class_storage_control_request+0x6a>
            return(UX_ERROR);
 8018826:	23ff      	movs	r3, #255	@ 0xff
 8018828:	e041      	b.n	80188ae <_ux_device_class_storage_control_request+0xee>
        endpoint_in = storage -> ux_device_class_storage_ep_in;
        endpoint_out = storage -> ux_device_class_storage_ep_out;
#else

        /* We need the interface to the class.  */
        interface =  storage -> ux_slave_class_storage_interface;
 801882a:	68fb      	ldr	r3, [r7, #12]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	60bb      	str	r3, [r7, #8]
        
        /* Locate the endpoints.  */
        endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 8018830:	68bb      	ldr	r3, [r7, #8]
 8018832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018834:	62fb      	str	r3, [r7, #44]	@ 0x2c
        
        /* Check the endpoint direction, if IN we have the correct endpoint.  */
        if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8018836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018838:	695b      	ldr	r3, [r3, #20]
 801883a:	2280      	movs	r2, #128	@ 0x80
 801883c:	4013      	ands	r3, r2
 801883e:	d105      	bne.n	801884c <_ux_device_class_storage_control_request+0x8c>
        {

            /* Wrong direction, we found the OUT endpoint first.  */
            endpoint_out =  endpoint_in;
 8018840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018842:	62bb      	str	r3, [r7, #40]	@ 0x28
                
            /* So the next endpoint has to be the IN endpoint.  */
            endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 8018844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018848:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801884a:	e002      	b.n	8018852 <_ux_device_class_storage_control_request+0x92>
        }
        else
        {

            /* We found the endpoint IN first, so next endpoint is OUT.  */
            endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 801884c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801884e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018850:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
#endif
            
        /* First cancel any transfer on the endpoint OUT, from the host.  */
        transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 8018852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018854:	3330      	adds	r3, #48	@ 0x30
 8018856:	623b      	str	r3, [r7, #32]
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 8018858:	6a3b      	ldr	r3, [r7, #32]
 801885a:	2128      	movs	r1, #40	@ 0x28
 801885c:	0018      	movs	r0, r3
 801885e:	f003 fedf 	bl	801c620 <_ux_device_stack_transfer_abort>

        /* Then cancel any transfer on the endpoint IN, from the host.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8018862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018864:	3330      	adds	r3, #48	@ 0x30
 8018866:	623b      	str	r3, [r7, #32]
        _ux_device_stack_transfer_abort(transfer_request, UX_TRANSFER_APPLICATION_RESET);
 8018868:	6a3b      	ldr	r3, [r7, #32]
 801886a:	2128      	movs	r1, #40	@ 0x28
 801886c:	0018      	movs	r0, r3
 801886e:	f003 fed7 	bl	801c620 <_ux_device_stack_transfer_abort>

        /* Reset phase error.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8018872:	68fb      	ldr	r3, [r7, #12]
 8018874:	2200      	movs	r2, #0
 8018876:	651a      	str	r2, [r3, #80]	@ 0x50

        break;
 8018878:	e018      	b.n	80188ac <_ux_device_class_storage_control_request+0xec>

    case UX_SLAVE_CLASS_STORAGE_GET_MAX_LUN:

        /* Check if wLength is valid.  */
        if (request_length < 1)
 801887a:	697b      	ldr	r3, [r7, #20]
 801887c:	2b00      	cmp	r3, #0
 801887e:	d101      	bne.n	8018884 <_ux_device_class_storage_control_request+0xc4>
            return(UX_ERROR);
 8018880:	23ff      	movs	r3, #255	@ 0xff
 8018882:	e014      	b.n	80188ae <_ux_device_class_storage_control_request+0xee>

        /* Set the value of the number of LUN in the buffer. The max number of LUN is the
           number of declared LUN - 1.  */
        *transfer_request -> ux_slave_transfer_request_data_pointer =  (UCHAR)(storage -> ux_slave_class_storage_number_lun -1);
 8018884:	68fb      	ldr	r3, [r7, #12]
 8018886:	685b      	ldr	r3, [r3, #4]
 8018888:	b2da      	uxtb	r2, r3
 801888a:	6a3b      	ldr	r3, [r7, #32]
 801888c:	68db      	ldr	r3, [r3, #12]
 801888e:	3a01      	subs	r2, #1
 8018890:	b2d2      	uxtb	r2, r2
 8018892:	701a      	strb	r2, [r3, #0]

        /* Set the phase of the transfer to data out.  */
        transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 8018894:	6a3b      	ldr	r3, [r7, #32]
 8018896:	2203      	movs	r2, #3
 8018898:	629a      	str	r2, [r3, #40]	@ 0x28

        /* We can return the LUN number.  */
        _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801889a:	6a3b      	ldr	r3, [r7, #32]
 801889c:	2201      	movs	r2, #1
 801889e:	2101      	movs	r1, #1
 80188a0:	0018      	movs	r0, r3
 80188a2:	f003 ff09 	bl	801c6b8 <_ux_device_stack_transfer_request>
        break;
 80188a6:	e001      	b.n	80188ac <_ux_device_class_storage_control_request+0xec>

    default:

        /* Unknown function. It's not handled.  */
        return(UX_ERROR);
 80188a8:	23ff      	movs	r3, #255	@ 0xff
 80188aa:	e000      	b.n	80188ae <_ux_device_class_storage_control_request+0xee>
    }

    /* It's handled.  */
    return(UX_SUCCESS);
 80188ac:	2300      	movs	r3, #0
}
 80188ae:	0018      	movs	r0, r3
 80188b0:	46bd      	mov	sp, r7
 80188b2:	b00c      	add	sp, #48	@ 0x30
 80188b4:	bd80      	pop	{r7, pc}
 80188b6:	46c0      	nop			@ (mov r8, r8)
 80188b8:	200116a4 	.word	0x200116a4

080188bc <_ux_device_class_storage_csw_send>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_csw_send(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                UX_SLAVE_ENDPOINT *endpoint_in, UCHAR csw_status)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b088      	sub	sp, #32
 80188c0:	af00      	add	r7, sp, #0
 80188c2:	60f8      	str	r0, [r7, #12]
 80188c4:	60b9      	str	r1, [r7, #8]
 80188c6:	607a      	str	r2, [r7, #4]
 80188c8:	001a      	movs	r2, r3
 80188ca:	1cfb      	adds	r3, r7, #3
 80188cc:	701a      	strb	r2, [r3, #0]

UINT                    status = UX_SUCCESS;
 80188ce:	2300      	movs	r3, #0
 80188d0:	61fb      	str	r3, [r7, #28]
    storage -> ux_device_class_storage_ep_in -> ux_slave_endpoint_transfer_request.
            ux_slave_transfer_request_data_pointer = storage -> ux_device_class_storage_buffer[1];
#endif

    /* If CSW skipped, just return.  */
    if (UX_DEVICE_CLASS_STORAGE_CSW_SKIP(&storage -> ux_slave_class_storage_csw_status))
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	3350      	adds	r3, #80	@ 0x50
 80188d6:	3303      	adds	r3, #3
 80188d8:	781b      	ldrb	r3, [r3, #0]
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d001      	beq.n	80188e2 <_ux_device_class_storage_csw_send+0x26>
        return(UX_SUCCESS);
 80188de:	2300      	movs	r3, #0
 80188e0:	e031      	b.n	8018946 <_ux_device_class_storage_csw_send+0x8a>

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	3330      	adds	r3, #48	@ 0x30
 80188e6:	61bb      	str	r3, [r7, #24]

    /* Get CSW buffer pointer.  */
    csw_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80188e8:	69bb      	ldr	r3, [r7, #24]
 80188ea:	68db      	ldr	r3, [r3, #12]
 80188ec:	617b      	str	r3, [r7, #20]

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(csw_buffer, 0, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH); /* Use case of memset is verified. */
 80188ee:	697b      	ldr	r3, [r7, #20]
 80188f0:	220d      	movs	r2, #13
 80188f2:	2100      	movs	r1, #0
 80188f4:	0018      	movs	r0, r3
 80188f6:	f7ff f811 	bl	801791c <_ux_utility_memory_set>

    /* Store the signature of the CSW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE], UX_SLAVE_CLASS_STORAGE_CSW_SIGNATURE_MASK);
 80188fa:	4a15      	ldr	r2, [pc, #84]	@ (8018950 <_ux_device_class_storage_csw_send+0x94>)
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	0011      	movs	r1, r2
 8018900:	0018      	movs	r0, r3
 8018902:	f7fe fd7e 	bl	8017402 <_ux_utility_long_put>

    /* Store the SCSI tag from the CBW.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_TAG], storage -> ux_slave_class_storage_scsi_tag);
 8018906:	697b      	ldr	r3, [r7, #20]
 8018908:	1d1a      	adds	r2, r3, #4
 801890a:	68fb      	ldr	r3, [r7, #12]
 801890c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801890e:	0019      	movs	r1, r3
 8018910:	0010      	movs	r0, r2
 8018912:	f7fe fd76 	bl	8017402 <_ux_utility_long_put>

    /* Store the dCSWDataResidue.  */
    _ux_utility_long_put(&csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_DATA_RESIDUE], storage -> ux_slave_class_storage_csw_residue);
 8018916:	697b      	ldr	r3, [r7, #20]
 8018918:	3308      	adds	r3, #8
 801891a:	001a      	movs	r2, r3
 801891c:	68fb      	ldr	r3, [r7, #12]
 801891e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018920:	0019      	movs	r1, r3
 8018922:	0010      	movs	r0, r2
 8018924:	f7fe fd6d 	bl	8017402 <_ux_utility_long_put>

    /* Store the status of the previous operation.  */
    csw_buffer[UX_SLAVE_CLASS_STORAGE_CSW_STATUS] = (UCHAR)storage -> ux_slave_class_storage_csw_status;
 8018928:	68fb      	ldr	r3, [r7, #12]
 801892a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801892c:	697b      	ldr	r3, [r7, #20]
 801892e:	330c      	adds	r3, #12
 8018930:	b2d2      	uxtb	r2, r2
 8018932:	701a      	strb	r2, [r3, #0]

    /* We may be in a special state machine condition where the endpoint is stalled waiting for
       a CLEAR_FEATURE.  We will wait until the host clears the endpoint.  
       The transfer_request function does that.  */
    /* Send the CSW back to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, UX_SLAVE_CLASS_STORAGE_CSW_LENGTH, 
 8018934:	69bb      	ldr	r3, [r7, #24]
 8018936:	220d      	movs	r2, #13
 8018938:	210d      	movs	r1, #13
 801893a:	0018      	movs	r0, r3
 801893c:	f003 febc 	bl	801c6b8 <_ux_device_stack_transfer_request>
 8018940:	0003      	movs	r3, r0
 8018942:	61fb      	str	r3, [r7, #28]
                                    UX_SLAVE_CLASS_STORAGE_CSW_LENGTH);
#endif

    /* Return completion status.  */
    return(status);
 8018944:	69fb      	ldr	r3, [r7, #28]
}
 8018946:	0018      	movs	r0, r3
 8018948:	46bd      	mov	sp, r7
 801894a:	b008      	add	sp, #32
 801894c:	bd80      	pop	{r7, pc}
 801894e:	46c0      	nop			@ (mov r8, r8)
 8018950:	53425355 	.word	0x53425355

08018954 <_ux_device_class_storage_deactivate>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_deactivate(UX_SLAVE_CLASS_COMMAND *command)
{
 8018954:	b580      	push	{r7, lr}
 8018956:	b086      	sub	sp, #24
 8018958:	af00      	add	r7, sp, #0
 801895a:	6078      	str	r0, [r7, #4]
UX_SLAVE_ENDPOINT           *endpoint_in;
UX_SLAVE_ENDPOINT           *endpoint_out;
UX_SLAVE_CLASS              *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	6a1b      	ldr	r3, [r3, #32]
 8018960:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *)class -> ux_slave_class_instance;
 8018962:	68fb      	ldr	r3, [r7, #12]
 8018964:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018966:	60bb      	str	r3, [r7, #8]
    endpoint_in -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer =
                                storage -> ux_device_class_storage_buffer[1];
#else

    /* Locate the endpoints.  */
    endpoint_in =  storage -> ux_slave_class_storage_interface -> ux_slave_interface_first_endpoint;
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801896e:	617b      	str	r3, [r7, #20]
    
    /* Check the endpoint direction, if IN we have the correct endpoint.  */
    if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8018970:	697b      	ldr	r3, [r7, #20]
 8018972:	695b      	ldr	r3, [r3, #20]
 8018974:	2280      	movs	r2, #128	@ 0x80
 8018976:	4013      	ands	r3, r2
 8018978:	d105      	bne.n	8018986 <_ux_device_class_storage_deactivate+0x32>
    {

        /* Wrong direction, we found the OUT endpoint first.  */
        endpoint_out =  endpoint_in;
 801897a:	697b      	ldr	r3, [r7, #20]
 801897c:	613b      	str	r3, [r7, #16]
            
        /* So the next endpoint has to be the IN endpoint.  */
        endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 801897e:	693b      	ldr	r3, [r7, #16]
 8018980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018982:	617b      	str	r3, [r7, #20]
 8018984:	e002      	b.n	801898c <_ux_device_class_storage_deactivate+0x38>
    }
    else
    {

        /* We found the endpoint IN first, so next endpoint is OUT.  */
        endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 8018986:	697b      	ldr	r3, [r7, #20]
 8018988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801898a:	613b      	str	r3, [r7, #16]
    }
        
    /* Terminate the transactions pending on the endpoints.  */
    _ux_device_stack_transfer_all_request_abort(endpoint_in, UX_TRANSFER_BUS_RESET);
 801898c:	697b      	ldr	r3, [r7, #20]
 801898e:	2126      	movs	r1, #38	@ 0x26
 8018990:	0018      	movs	r0, r3
 8018992:	f003 fe7d 	bl	801c690 <_ux_device_stack_transfer_all_request_abort>
    _ux_device_stack_transfer_all_request_abort(endpoint_out, UX_TRANSFER_BUS_RESET);
 8018996:	693b      	ldr	r3, [r7, #16]
 8018998:	2126      	movs	r1, #38	@ 0x26
 801899a:	0018      	movs	r0, r3
 801899c:	f003 fe78 	bl	801c690 <_ux_device_stack_transfer_all_request_abort>
#endif

    /* If there is a deactivate function call it.  */
    if (storage -> ux_slave_class_storage_instance_deactivate != UX_NULL)
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d004      	beq.n	80189b2 <_ux_device_class_storage_deactivate+0x5e>
    {

        /* Invoke the application.  */
        storage -> ux_slave_class_storage_instance_deactivate(storage);
 80189a8:	68bb      	ldr	r3, [r7, #8]
 80189aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80189ac:	68ba      	ldr	r2, [r7, #8]
 80189ae:	0010      	movs	r0, r2
 80189b0:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(storage);

    /* Return completion status.  */
    return(UX_SUCCESS);
 80189b2:	2300      	movs	r3, #0
}
 80189b4:	0018      	movs	r0, r3
 80189b6:	46bd      	mov	sp, r7
 80189b8:	b006      	add	sp, #24
 80189ba:	bd80      	pop	{r7, pc}

080189bc <_ux_device_class_storage_entry>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_entry(UX_SLAVE_CLASS_COMMAND *command)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b084      	sub	sp, #16
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
UINT        status;


    /* The command request will tell us we need to do here, either a enumeration
       query, an activation or a deactivation.  */
    switch (command -> ux_slave_class_command_request)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	2b07      	cmp	r3, #7
 80189ca:	d834      	bhi.n	8018a36 <_ux_device_class_storage_entry+0x7a>
 80189cc:	009a      	lsls	r2, r3, #2
 80189ce:	4b1f      	ldr	r3, [pc, #124]	@ (8018a4c <_ux_device_class_storage_entry+0x90>)
 80189d0:	18d3      	adds	r3, r2, r3
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	469f      	mov	pc, r3
    {

    case UX_SLAVE_CLASS_COMMAND_INITIALIZE:

        /* Call the init function of the Storage class.  */
        status =  _ux_device_class_storage_initialize(command);
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	0018      	movs	r0, r3
 80189da:	f000 f859 	bl	8018a90 <_ux_device_class_storage_initialize>
 80189de:	0003      	movs	r3, r0
 80189e0:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	e02d      	b.n	8018a42 <_ux_device_class_storage_entry+0x86>
        
    case UX_SLAVE_CLASS_COMMAND_UNINITIALIZE:

        /* Call the init function of the Storage class.  */
        status =  _ux_device_class_storage_uninitialize(command);
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	0018      	movs	r0, r3
 80189ea:	f001 f8bd 	bl	8019b68 <_ux_device_class_storage_uninitialize>
 80189ee:	0003      	movs	r3, r0
 80189f0:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	e025      	b.n	8018a42 <_ux_device_class_storage_entry+0x86>
        

    case UX_SLAVE_CLASS_COMMAND_QUERY:

        /* Check the CLASS definition in the interface descriptor. */
        if (command -> ux_slave_class_command_class == UX_SLAVE_CLASS_STORAGE_CLASS)
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	695b      	ldr	r3, [r3, #20]
 80189fa:	2b08      	cmp	r3, #8
 80189fc:	d101      	bne.n	8018a02 <_ux_device_class_storage_entry+0x46>
            return(UX_SUCCESS);
 80189fe:	2300      	movs	r3, #0
 8018a00:	e01f      	b.n	8018a42 <_ux_device_class_storage_entry+0x86>
        else
            return(UX_NO_CLASS_MATCH);
 8018a02:	2357      	movs	r3, #87	@ 0x57
 8018a04:	e01d      	b.n	8018a42 <_ux_device_class_storage_entry+0x86>
    case UX_SLAVE_CLASS_COMMAND_ACTIVATE:

        /* The activate command is used when the host has sent a SET_CONFIGURATION command
           and this interface has to be mounted. Both Bulk endpoints have to be mounted
           and the storage thread needs to be activated.  */
        status =  _ux_device_class_storage_activate(command);
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	0018      	movs	r0, r3
 8018a0a:	f7ff feb0 	bl	801876e <_ux_device_class_storage_activate>
 8018a0e:	0003      	movs	r3, r0
 8018a10:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8018a12:	68fb      	ldr	r3, [r7, #12]
 8018a14:	e015      	b.n	8018a42 <_ux_device_class_storage_entry+0x86>

    case UX_SLAVE_CLASS_COMMAND_DEACTIVATE:

        /* The deactivate command is used when the device has been extracted.
           The device endpoints have to be dismounted and the storage thread canceled.  */
        status =  _ux_device_class_storage_deactivate(command);
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	0018      	movs	r0, r3
 8018a1a:	f7ff ff9b 	bl	8018954 <_ux_device_class_storage_deactivate>
 8018a1e:	0003      	movs	r3, r0
 8018a20:	60fb      	str	r3, [r7, #12]
        
        /* Return the completion status.  */
        return(status);
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	e00d      	b.n	8018a42 <_ux_device_class_storage_entry+0x86>

    case UX_SLAVE_CLASS_COMMAND_REQUEST:

        /* The request command is used when the host sends a command on the control endpoint.  */
        status = _ux_device_class_storage_control_request(command);
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	0018      	movs	r0, r3
 8018a2a:	f7ff fec9 	bl	80187c0 <_ux_device_class_storage_control_request>
 8018a2e:	0003      	movs	r3, r0
 8018a30:	60fb      	str	r3, [r7, #12]

        /* Return the completion status.  */
        return(status);
 8018a32:	68fb      	ldr	r3, [r7, #12]
 8018a34:	e005      	b.n	8018a42 <_ux_device_class_storage_entry+0x86>

    default: 

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8018a36:	2254      	movs	r2, #84	@ 0x54
 8018a38:	2107      	movs	r1, #7
 8018a3a:	2002      	movs	r0, #2
 8018a3c:	f7fe fb18 	bl	8017070 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        /* Return an error.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 8018a40:	2354      	movs	r3, #84	@ 0x54
    }   
}
 8018a42:	0018      	movs	r0, r3
 8018a44:	46bd      	mov	sp, r7
 8018a46:	b004      	add	sp, #16
 8018a48:	bd80      	pop	{r7, pc}
 8018a4a:	46c0      	nop			@ (mov r8, r8)
 8018a4c:	0801e5cc 	.word	0x0801e5cc

08018a50 <_ux_device_class_storage_format>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_format(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb)
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b084      	sub	sp, #16
 8018a54:	af00      	add	r7, sp, #0
 8018a56:	60f8      	str	r0, [r7, #12]
 8018a58:	60b9      	str	r1, [r7, #8]
 8018a5a:	607a      	str	r2, [r7, #4]
 8018a5c:	603b      	str	r3, [r7, #0]

#if !defined(UX_DEVICE_STANDALONE)

    /* This command is not yet supported. So Stall the endpoint. We stall the
       OUT endpoint because we expect the host to send parameters.  */
    _ux_device_stack_endpoint_stall(endpoint_out);
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	0018      	movs	r0, r3
 8018a62:	f003 f93d 	bl	801bce0 <_ux_device_stack_endpoint_stall>

    UX_PARAMETER_NOT_USED(endpoint_out);
#endif

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8018a66:	68f9      	ldr	r1, [r7, #12]
 8018a68:	68ba      	ldr	r2, [r7, #8]
 8018a6a:	0013      	movs	r3, r2
 8018a6c:	00db      	lsls	r3, r3, #3
 8018a6e:	1a9b      	subs	r3, r3, r2
 8018a70:	00db      	lsls	r3, r3, #3
 8018a72:	18cb      	adds	r3, r1, r3
 8018a74:	3320      	adds	r3, #32
 8018a76:	4a05      	ldr	r2, [pc, #20]	@ (8018a8c <_ux_device_class_storage_format+0x3c>)
 8018a78:	601a      	str	r2, [r3, #0]
                                               UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	2201      	movs	r2, #1
 8018a7e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error.  */
    return(UX_FUNCTION_NOT_SUPPORTED);
 8018a80:	2354      	movs	r3, #84	@ 0x54
}
 8018a82:	0018      	movs	r0, r3
 8018a84:	46bd      	mov	sp, r7
 8018a86:	b004      	add	sp, #16
 8018a88:	bd80      	pop	{r7, pc}
 8018a8a:	46c0      	nop			@ (mov r8, r8)
 8018a8c:	00012605 	.word	0x00012605

08018a90 <_ux_device_class_storage_initialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_initialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8018a90:	b5b0      	push	{r4, r5, r7, lr}
 8018a92:	b08e      	sub	sp, #56	@ 0x38
 8018a94:	af06      	add	r7, sp, #24
 8018a96:	6078      	str	r0, [r7, #4]

UINT                                    status = UX_SUCCESS;
 8018a98:	2300      	movs	r3, #0
 8018a9a:	61fb      	str	r3, [r7, #28]
UX_SLAVE_CLASS                          *class_inst;
ULONG                                   lun_index;


    /* Get the pointer to the application parameters for the storage class.  */
    storage_parameter =  command -> ux_slave_class_command_parameter;
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018aa0:	617b      	str	r3, [r7, #20]

    /* Ensure the number of LUN declared by the caller does not exceed the
       max number allowed for LUN storage.  */
    if (storage_parameter -> ux_slave_class_storage_parameter_number_lun > UX_MAX_SLAVE_LUN)
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	689b      	ldr	r3, [r3, #8]
 8018aa6:	2b01      	cmp	r3, #1
 8018aa8:	d901      	bls.n	8018aae <_ux_device_class_storage_initialize+0x1e>
        return UX_ERROR;
 8018aaa:	23ff      	movs	r3, #255	@ 0xff
 8018aac:	e16f      	b.n	8018d8e <_ux_device_class_storage_initialize+0x2fe>

    /* Get the class container.  */
    class_inst =  command -> ux_slave_class_command_class_ptr;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	6a1b      	ldr	r3, [r3, #32]
 8018ab2:	613b      	str	r3, [r7, #16]

    /* Create an instance of the device storage class.  */
    storage =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS_STORAGE));
 8018ab4:	226c      	movs	r2, #108	@ 0x6c
 8018ab6:	2100      	movs	r1, #0
 8018ab8:	2000      	movs	r0, #0
 8018aba:	f7fe fcf1 	bl	80174a0 <_ux_utility_memory_allocate>
 8018abe:	0003      	movs	r3, r0
 8018ac0:	60fb      	str	r3, [r7, #12]

    /* Check for successful allocation.  */
    if (storage == UX_NULL)
 8018ac2:	68fb      	ldr	r3, [r7, #12]
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d101      	bne.n	8018acc <_ux_device_class_storage_initialize+0x3c>
        return(UX_MEMORY_INSUFFICIENT);
 8018ac8:	2312      	movs	r3, #18
 8018aca:	e160      	b.n	8018d8e <_ux_device_class_storage_initialize+0x2fe>

#if !defined(UX_DEVICE_STANDALONE)

    /* Allocate some memory for the thread stack. */
    class_inst -> ux_slave_class_thread_stack = _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, UX_THREAD_STACK_SIZE);
 8018acc:	2380      	movs	r3, #128	@ 0x80
 8018ace:	00db      	lsls	r3, r3, #3
 8018ad0:	001a      	movs	r2, r3
 8018ad2:	2100      	movs	r1, #0
 8018ad4:	2000      	movs	r0, #0
 8018ad6:	f7fe fce3 	bl	80174a0 <_ux_utility_memory_allocate>
 8018ada:	0001      	movs	r1, r0
 8018adc:	693a      	ldr	r2, [r7, #16]
 8018ade:	2380      	movs	r3, #128	@ 0x80
 8018ae0:	005b      	lsls	r3, r3, #1
 8018ae2:	50d1      	str	r1, [r2, r3]

    /* If it's OK, create thread.  */
    if (class_inst -> ux_slave_class_thread_stack != UX_NULL)
 8018ae4:	693a      	ldr	r2, [r7, #16]
 8018ae6:	2380      	movs	r3, #128	@ 0x80
 8018ae8:	005b      	lsls	r3, r3, #1
 8018aea:	58d3      	ldr	r3, [r2, r3]
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	d01c      	beq.n	8018b2a <_ux_device_class_storage_initialize+0x9a>

        /* This instance needs to be running in a different thread. So start
           a new thread. We pass a pointer to the class to the new thread.  This thread
           does not start until we have a instance of the class. */
        status =  _ux_device_thread_create(&class_inst -> ux_slave_class_thread, "ux_slave_storage_thread",
 8018af0:	693b      	ldr	r3, [r7, #16]
 8018af2:	3350      	adds	r3, #80	@ 0x50
 8018af4:	0018      	movs	r0, r3
 8018af6:	693d      	ldr	r5, [r7, #16]
 8018af8:	693a      	ldr	r2, [r7, #16]
 8018afa:	2380      	movs	r3, #128	@ 0x80
 8018afc:	005b      	lsls	r3, r3, #1
 8018afe:	58d3      	ldr	r3, [r2, r3]
 8018b00:	4ca5      	ldr	r4, [pc, #660]	@ (8018d98 <_ux_device_class_storage_initialize+0x308>)
 8018b02:	49a6      	ldr	r1, [pc, #664]	@ (8018d9c <_ux_device_class_storage_initialize+0x30c>)
 8018b04:	2200      	movs	r2, #0
 8018b06:	9205      	str	r2, [sp, #20]
 8018b08:	2200      	movs	r2, #0
 8018b0a:	9204      	str	r2, [sp, #16]
 8018b0c:	2214      	movs	r2, #20
 8018b0e:	9203      	str	r2, [sp, #12]
 8018b10:	2214      	movs	r2, #20
 8018b12:	9202      	str	r2, [sp, #8]
 8018b14:	2280      	movs	r2, #128	@ 0x80
 8018b16:	00d2      	lsls	r2, r2, #3
 8018b18:	9201      	str	r2, [sp, #4]
 8018b1a:	9300      	str	r3, [sp, #0]
 8018b1c:	002b      	movs	r3, r5
 8018b1e:	0022      	movs	r2, r4
 8018b20:	f7ff f85f 	bl	8017be2 <_ux_utility_thread_create>
 8018b24:	0003      	movs	r3, r0
 8018b26:	61fb      	str	r3, [r7, #28]
 8018b28:	e001      	b.n	8018b2e <_ux_device_class_storage_initialize+0x9e>
                    _ux_device_class_storage_thread,
                    (ULONG) (ALIGN_TYPE) class_inst, (VOID *) class_inst -> ux_slave_class_thread_stack,
                    UX_THREAD_STACK_SIZE, UX_THREAD_PRIORITY_CLASS,
                    UX_THREAD_PRIORITY_CLASS, UX_NO_TIME_SLICE, UX_DONT_START);
    else
        status = UX_MEMORY_INSUFFICIENT;
 8018b2a:	2312      	movs	r3, #18
 8018b2c:	61fb      	str	r3, [r7, #28]

    status = UX_SUCCESS;
#endif

    /* If thread resources allocated, go on.  */
    if (status == UX_SUCCESS)
 8018b2e:	69fb      	ldr	r3, [r7, #28]
 8018b30:	2b00      	cmp	r3, #0
 8018b32:	d000      	beq.n	8018b36 <_ux_device_class_storage_initialize+0xa6>
 8018b34:	e11a      	b.n	8018d6c <_ux_device_class_storage_initialize+0x2dc>
    {

        UX_THREAD_EXTENSION_PTR_SET(&(class_inst -> ux_slave_class_thread), class_inst)

        /* Store the number of LUN declared.  */
        storage -> ux_slave_class_storage_number_lun = storage_parameter -> ux_slave_class_storage_parameter_number_lun;
 8018b36:	697b      	ldr	r3, [r7, #20]
 8018b38:	689a      	ldr	r2, [r3, #8]
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	605a      	str	r2, [r3, #4]

        /* Copy each individual LUN parameters.  */
        for (lun_index = 0; lun_index < storage -> ux_slave_class_storage_number_lun; lun_index++)
 8018b3e:	2300      	movs	r3, #0
 8018b40:	61bb      	str	r3, [r7, #24]
 8018b42:	e0c8      	b.n	8018cd6 <_ux_device_class_storage_initialize+0x246>
        {

            /* Check block length size. */
            if (storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8018b44:	6979      	ldr	r1, [r7, #20]
 8018b46:	69ba      	ldr	r2, [r7, #24]
 8018b48:	0013      	movs	r3, r2
 8018b4a:	00db      	lsls	r3, r3, #3
 8018b4c:	1a9b      	subs	r3, r3, r2
 8018b4e:	00db      	lsls	r3, r3, #3
 8018b50:	18cb      	adds	r3, r1, r3
 8018b52:	3310      	adds	r3, #16
 8018b54:	681a      	ldr	r2, [r3, #0]
 8018b56:	2380      	movs	r3, #128	@ 0x80
 8018b58:	011b      	lsls	r3, r3, #4
 8018b5a:	429a      	cmp	r2, r3
 8018b5c:	d902      	bls.n	8018b64 <_ux_device_class_storage_initialize+0xd4>
            {
                /* Cannot proceed.  */
                status = (UX_MEMORY_INSUFFICIENT);
 8018b5e:	2312      	movs	r3, #18
 8018b60:	61fb      	str	r3, [r7, #28]
                break;
 8018b62:	e0be      	b.n	8018ce2 <_ux_device_class_storage_initialize+0x252>
            }

            /* Store all the application parameter information about the media.  */
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_last_lba       = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_last_lba;
 8018b64:	6979      	ldr	r1, [r7, #20]
 8018b66:	69ba      	ldr	r2, [r7, #24]
 8018b68:	0013      	movs	r3, r2
 8018b6a:	00db      	lsls	r3, r3, #3
 8018b6c:	1a9b      	subs	r3, r3, r2
 8018b6e:	00db      	lsls	r3, r3, #3
 8018b70:	18cb      	adds	r3, r1, r3
 8018b72:	330c      	adds	r3, #12
 8018b74:	6819      	ldr	r1, [r3, #0]
 8018b76:	68f8      	ldr	r0, [r7, #12]
 8018b78:	69ba      	ldr	r2, [r7, #24]
 8018b7a:	0013      	movs	r3, r2
 8018b7c:	00db      	lsls	r3, r3, #3
 8018b7e:	1a9b      	subs	r3, r3, r2
 8018b80:	00db      	lsls	r3, r3, #3
 8018b82:	18c3      	adds	r3, r0, r3
 8018b84:	3308      	adds	r3, #8
 8018b86:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_block_length   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_block_length;
 8018b88:	6979      	ldr	r1, [r7, #20]
 8018b8a:	69ba      	ldr	r2, [r7, #24]
 8018b8c:	0013      	movs	r3, r2
 8018b8e:	00db      	lsls	r3, r3, #3
 8018b90:	1a9b      	subs	r3, r3, r2
 8018b92:	00db      	lsls	r3, r3, #3
 8018b94:	18cb      	adds	r3, r1, r3
 8018b96:	3310      	adds	r3, #16
 8018b98:	6819      	ldr	r1, [r3, #0]
 8018b9a:	68f8      	ldr	r0, [r7, #12]
 8018b9c:	69ba      	ldr	r2, [r7, #24]
 8018b9e:	0013      	movs	r3, r2
 8018ba0:	00db      	lsls	r3, r3, #3
 8018ba2:	1a9b      	subs	r3, r3, r2
 8018ba4:	00db      	lsls	r3, r3, #3
 8018ba6:	18c3      	adds	r3, r0, r3
 8018ba8:	330c      	adds	r3, #12
 8018baa:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_type           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_type;
 8018bac:	6979      	ldr	r1, [r7, #20]
 8018bae:	69ba      	ldr	r2, [r7, #24]
 8018bb0:	0013      	movs	r3, r2
 8018bb2:	00db      	lsls	r3, r3, #3
 8018bb4:	1a9b      	subs	r3, r3, r2
 8018bb6:	00db      	lsls	r3, r3, #3
 8018bb8:	18cb      	adds	r3, r1, r3
 8018bba:	3314      	adds	r3, #20
 8018bbc:	6819      	ldr	r1, [r3, #0]
 8018bbe:	68f8      	ldr	r0, [r7, #12]
 8018bc0:	69ba      	ldr	r2, [r7, #24]
 8018bc2:	0013      	movs	r3, r2
 8018bc4:	00db      	lsls	r3, r3, #3
 8018bc6:	1a9b      	subs	r3, r3, r2
 8018bc8:	00db      	lsls	r3, r3, #3
 8018bca:	18c3      	adds	r3, r0, r3
 8018bcc:	3310      	adds	r3, #16
 8018bce:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_removable_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_removable_flag;
 8018bd0:	6979      	ldr	r1, [r7, #20]
 8018bd2:	69ba      	ldr	r2, [r7, #24]
 8018bd4:	0013      	movs	r3, r2
 8018bd6:	00db      	lsls	r3, r3, #3
 8018bd8:	1a9b      	subs	r3, r3, r2
 8018bda:	00db      	lsls	r3, r3, #3
 8018bdc:	18cb      	adds	r3, r1, r3
 8018bde:	3318      	adds	r3, #24
 8018be0:	6819      	ldr	r1, [r3, #0]
 8018be2:	68f8      	ldr	r0, [r7, #12]
 8018be4:	69ba      	ldr	r2, [r7, #24]
 8018be6:	0013      	movs	r3, r2
 8018be8:	00db      	lsls	r3, r3, #3
 8018bea:	1a9b      	subs	r3, r3, r2
 8018bec:	00db      	lsls	r3, r3, #3
 8018bee:	18c3      	adds	r3, r0, r3
 8018bf0:	3314      	adds	r3, #20
 8018bf2:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read_only_flag = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read_only_flag;
 8018bf4:	6979      	ldr	r1, [r7, #20]
 8018bf6:	69ba      	ldr	r2, [r7, #24]
 8018bf8:	0013      	movs	r3, r2
 8018bfa:	00db      	lsls	r3, r3, #3
 8018bfc:	1a9b      	subs	r3, r3, r2
 8018bfe:	00db      	lsls	r3, r3, #3
 8018c00:	18cb      	adds	r3, r1, r3
 8018c02:	331c      	adds	r3, #28
 8018c04:	6819      	ldr	r1, [r3, #0]
 8018c06:	68f8      	ldr	r0, [r7, #12]
 8018c08:	69ba      	ldr	r2, [r7, #24]
 8018c0a:	0013      	movs	r3, r2
 8018c0c:	00db      	lsls	r3, r3, #3
 8018c0e:	1a9b      	subs	r3, r3, r2
 8018c10:	00db      	lsls	r3, r3, #3
 8018c12:	18c3      	adds	r3, r0, r3
 8018c14:	3318      	adds	r3, #24
 8018c16:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_read           = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_read;
 8018c18:	6979      	ldr	r1, [r7, #20]
 8018c1a:	69ba      	ldr	r2, [r7, #24]
 8018c1c:	0013      	movs	r3, r2
 8018c1e:	00db      	lsls	r3, r3, #3
 8018c20:	1a9b      	subs	r3, r3, r2
 8018c22:	00db      	lsls	r3, r3, #3
 8018c24:	18cb      	adds	r3, r1, r3
 8018c26:	3330      	adds	r3, #48	@ 0x30
 8018c28:	6819      	ldr	r1, [r3, #0]
 8018c2a:	68f8      	ldr	r0, [r7, #12]
 8018c2c:	69ba      	ldr	r2, [r7, #24]
 8018c2e:	0013      	movs	r3, r2
 8018c30:	00db      	lsls	r3, r3, #3
 8018c32:	1a9b      	subs	r3, r3, r2
 8018c34:	00db      	lsls	r3, r3, #3
 8018c36:	18c3      	adds	r3, r0, r3
 8018c38:	332c      	adds	r3, #44	@ 0x2c
 8018c3a:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_flush          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_flush;
 8018c3c:	6979      	ldr	r1, [r7, #20]
 8018c3e:	69ba      	ldr	r2, [r7, #24]
 8018c40:	0013      	movs	r3, r2
 8018c42:	00db      	lsls	r3, r3, #3
 8018c44:	1a9b      	subs	r3, r3, r2
 8018c46:	00db      	lsls	r3, r3, #3
 8018c48:	18cb      	adds	r3, r1, r3
 8018c4a:	3338      	adds	r3, #56	@ 0x38
 8018c4c:	6819      	ldr	r1, [r3, #0]
 8018c4e:	68f8      	ldr	r0, [r7, #12]
 8018c50:	69ba      	ldr	r2, [r7, #24]
 8018c52:	0013      	movs	r3, r2
 8018c54:	00db      	lsls	r3, r3, #3
 8018c56:	1a9b      	subs	r3, r3, r2
 8018c58:	00db      	lsls	r3, r3, #3
 8018c5a:	18c3      	adds	r3, r0, r3
 8018c5c:	3334      	adds	r3, #52	@ 0x34
 8018c5e:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_write          = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_write;
 8018c60:	6979      	ldr	r1, [r7, #20]
 8018c62:	69ba      	ldr	r2, [r7, #24]
 8018c64:	0013      	movs	r3, r2
 8018c66:	00db      	lsls	r3, r3, #3
 8018c68:	1a9b      	subs	r3, r3, r2
 8018c6a:	00db      	lsls	r3, r3, #3
 8018c6c:	18cb      	adds	r3, r1, r3
 8018c6e:	3334      	adds	r3, #52	@ 0x34
 8018c70:	6819      	ldr	r1, [r3, #0]
 8018c72:	68f8      	ldr	r0, [r7, #12]
 8018c74:	69ba      	ldr	r2, [r7, #24]
 8018c76:	0013      	movs	r3, r2
 8018c78:	00db      	lsls	r3, r3, #3
 8018c7a:	1a9b      	subs	r3, r3, r2
 8018c7c:	00db      	lsls	r3, r3, #3
 8018c7e:	18c3      	adds	r3, r0, r3
 8018c80:	3330      	adds	r3, #48	@ 0x30
 8018c82:	6019      	str	r1, [r3, #0]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_status         = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_status;
 8018c84:	6979      	ldr	r1, [r7, #20]
 8018c86:	69bb      	ldr	r3, [r7, #24]
 8018c88:	1c5a      	adds	r2, r3, #1
 8018c8a:	0013      	movs	r3, r2
 8018c8c:	00db      	lsls	r3, r3, #3
 8018c8e:	1a9b      	subs	r3, r3, r2
 8018c90:	00db      	lsls	r3, r3, #3
 8018c92:	18cb      	adds	r3, r1, r3
 8018c94:	3304      	adds	r3, #4
 8018c96:	6818      	ldr	r0, [r3, #0]
 8018c98:	68f9      	ldr	r1, [r7, #12]
 8018c9a:	69bb      	ldr	r3, [r7, #24]
 8018c9c:	1c5a      	adds	r2, r3, #1
 8018c9e:	0013      	movs	r3, r2
 8018ca0:	00db      	lsls	r3, r3, #3
 8018ca2:	1a9b      	subs	r3, r3, r2
 8018ca4:	00db      	lsls	r3, r3, #3
 8018ca6:	5058      	str	r0, [r3, r1]
            storage -> ux_slave_class_storage_lun[lun_index].ux_slave_class_storage_media_notification   = storage_parameter -> ux_slave_class_storage_parameter_lun[lun_index].ux_slave_class_storage_media_notification;
 8018ca8:	6979      	ldr	r1, [r7, #20]
 8018caa:	69bb      	ldr	r3, [r7, #24]
 8018cac:	1c5a      	adds	r2, r3, #1
 8018cae:	0013      	movs	r3, r2
 8018cb0:	00db      	lsls	r3, r3, #3
 8018cb2:	1a9b      	subs	r3, r3, r2
 8018cb4:	00db      	lsls	r3, r3, #3
 8018cb6:	18cb      	adds	r3, r1, r3
 8018cb8:	3308      	adds	r3, #8
 8018cba:	6819      	ldr	r1, [r3, #0]
 8018cbc:	68f8      	ldr	r0, [r7, #12]
 8018cbe:	69bb      	ldr	r3, [r7, #24]
 8018cc0:	1c5a      	adds	r2, r3, #1
 8018cc2:	0013      	movs	r3, r2
 8018cc4:	00db      	lsls	r3, r3, #3
 8018cc6:	1a9b      	subs	r3, r3, r2
 8018cc8:	00db      	lsls	r3, r3, #3
 8018cca:	18c3      	adds	r3, r0, r3
 8018ccc:	3304      	adds	r3, #4
 8018cce:	6019      	str	r1, [r3, #0]
        for (lun_index = 0; lun_index < storage -> ux_slave_class_storage_number_lun; lun_index++)
 8018cd0:	69bb      	ldr	r3, [r7, #24]
 8018cd2:	3301      	adds	r3, #1
 8018cd4:	61bb      	str	r3, [r7, #24]
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	685b      	ldr	r3, [r3, #4]
 8018cda:	69ba      	ldr	r2, [r7, #24]
 8018cdc:	429a      	cmp	r2, r3
 8018cde:	d200      	bcs.n	8018ce2 <_ux_device_class_storage_initialize+0x252>
 8018ce0:	e730      	b.n	8018b44 <_ux_device_class_storage_initialize+0xb4>
        }

        /* If it's OK, complete it.  */
        if (status == UX_SUCCESS)
 8018ce2:	69fb      	ldr	r3, [r7, #28]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d13c      	bne.n	8018d62 <_ux_device_class_storage_initialize+0x2d2>
        {

            /* Store the start and stop signals if needed by the application.  */
            storage -> ux_slave_class_storage_instance_activate = storage_parameter -> ux_slave_class_storage_instance_activate;
 8018ce8:	697b      	ldr	r3, [r7, #20]
 8018cea:	681a      	ldr	r2, [r3, #0]
 8018cec:	68fb      	ldr	r3, [r7, #12]
 8018cee:	655a      	str	r2, [r3, #84]	@ 0x54
            storage -> ux_slave_class_storage_instance_deactivate = storage_parameter -> ux_slave_class_storage_instance_deactivate;
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	685a      	ldr	r2, [r3, #4]
 8018cf4:	68fb      	ldr	r3, [r7, #12]
 8018cf6:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Store the vendor id, product id, product revision and product serial.  */
            if (storage_parameter -> ux_slave_class_storage_parameter_vendor_id)
 8018cf8:	697b      	ldr	r3, [r7, #20]
 8018cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d004      	beq.n	8018d0a <_ux_device_class_storage_initialize+0x27a>
                storage -> ux_slave_class_storage_vendor_id = storage_parameter -> ux_slave_class_storage_parameter_vendor_id;
 8018d00:	697b      	ldr	r3, [r7, #20]
 8018d02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8018d08:	e002      	b.n	8018d10 <_ux_device_class_storage_initialize+0x280>
            else
                storage -> ux_slave_class_storage_vendor_id = _ux_system_slave_class_storage_vendor_id;
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	4a24      	ldr	r2, [pc, #144]	@ (8018da0 <_ux_device_class_storage_initialize+0x310>)
 8018d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if (storage_parameter -> ux_slave_class_storage_parameter_product_id)
 8018d10:	697b      	ldr	r3, [r7, #20]
 8018d12:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d004      	beq.n	8018d22 <_ux_device_class_storage_initialize+0x292>
                storage -> ux_slave_class_storage_product_id = storage_parameter -> ux_slave_class_storage_parameter_product_id;
 8018d18:	697b      	ldr	r3, [r7, #20]
 8018d1a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	661a      	str	r2, [r3, #96]	@ 0x60
 8018d20:	e002      	b.n	8018d28 <_ux_device_class_storage_initialize+0x298>
            else
                storage -> ux_slave_class_storage_product_id = _ux_system_slave_class_storage_product_id;
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	4a1f      	ldr	r2, [pc, #124]	@ (8018da4 <_ux_device_class_storage_initialize+0x314>)
 8018d26:	661a      	str	r2, [r3, #96]	@ 0x60

            if (storage_parameter -> ux_slave_class_storage_parameter_product_rev)
 8018d28:	697b      	ldr	r3, [r7, #20]
 8018d2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d004      	beq.n	8018d3a <_ux_device_class_storage_initialize+0x2aa>
                storage -> ux_slave_class_storage_product_rev = storage_parameter -> ux_slave_class_storage_parameter_product_rev;
 8018d30:	697b      	ldr	r3, [r7, #20]
 8018d32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8018d34:	68fb      	ldr	r3, [r7, #12]
 8018d36:	665a      	str	r2, [r3, #100]	@ 0x64
 8018d38:	e002      	b.n	8018d40 <_ux_device_class_storage_initialize+0x2b0>
            else
                storage -> ux_slave_class_storage_product_rev = _ux_system_slave_class_storage_product_rev;
 8018d3a:	68fb      	ldr	r3, [r7, #12]
 8018d3c:	4a1a      	ldr	r2, [pc, #104]	@ (8018da8 <_ux_device_class_storage_initialize+0x318>)
 8018d3e:	665a      	str	r2, [r3, #100]	@ 0x64

            if (storage_parameter -> ux_slave_class_storage_parameter_product_serial)
 8018d40:	697b      	ldr	r3, [r7, #20]
 8018d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d004      	beq.n	8018d52 <_ux_device_class_storage_initialize+0x2c2>
                storage -> ux_slave_class_storage_product_serial = storage_parameter -> ux_slave_class_storage_parameter_product_serial;
 8018d48:	697b      	ldr	r3, [r7, #20]
 8018d4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	669a      	str	r2, [r3, #104]	@ 0x68
 8018d50:	e002      	b.n	8018d58 <_ux_device_class_storage_initialize+0x2c8>
            else
                storage -> ux_slave_class_storage_product_serial = _ux_system_slave_class_storage_product_serial;
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	4a15      	ldr	r2, [pc, #84]	@ (8018dac <_ux_device_class_storage_initialize+0x31c>)
 8018d56:	669a      	str	r2, [r3, #104]	@ 0x68

            /* Save the address of the STORAGE instance inside the STORAGE container.  */
            class_inst -> ux_slave_class_instance = (VOID *) storage;
 8018d58:	693b      	ldr	r3, [r7, #16]
 8018d5a:	68fa      	ldr	r2, [r7, #12]
 8018d5c:	649a      	str	r2, [r3, #72]	@ 0x48

            return(UX_SUCCESS);
 8018d5e:	2300      	movs	r3, #0
 8018d60:	e015      	b.n	8018d8e <_ux_device_class_storage_initialize+0x2fe>
        }

        /* Free thread resources.  */
        _ux_device_thread_delete(&class_inst -> ux_slave_class_thread);
 8018d62:	693b      	ldr	r3, [r7, #16]
 8018d64:	3350      	adds	r3, #80	@ 0x50
 8018d66:	0018      	movs	r0, r3
 8018d68:	f7fe ff67 	bl	8017c3a <_ux_utility_thread_delete>
    }

#if !defined(UX_DEVICE_STANDALONE)
    if (class_inst -> ux_slave_class_thread_stack != UX_NULL)
 8018d6c:	693a      	ldr	r2, [r7, #16]
 8018d6e:	2380      	movs	r3, #128	@ 0x80
 8018d70:	005b      	lsls	r3, r3, #1
 8018d72:	58d3      	ldr	r3, [r2, r3]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d005      	beq.n	8018d84 <_ux_device_class_storage_initialize+0x2f4>
        _ux_utility_memory_free(&class_inst -> ux_slave_class_thread_stack);
 8018d78:	693b      	ldr	r3, [r7, #16]
 8018d7a:	3301      	adds	r3, #1
 8018d7c:	33ff      	adds	r3, #255	@ 0xff
 8018d7e:	0018      	movs	r0, r3
 8018d80:	f7fe fcf0 	bl	8017764 <_ux_utility_memory_free>
#endif

    /* Free instance.  */
    _ux_utility_memory_free(storage);
 8018d84:	68fb      	ldr	r3, [r7, #12]
 8018d86:	0018      	movs	r0, r3
 8018d88:	f7fe fcec 	bl	8017764 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 8018d8c:	69fb      	ldr	r3, [r7, #28]
}
 8018d8e:	0018      	movs	r0, r3
 8018d90:	46bd      	mov	sp, r7
 8018d92:	b008      	add	sp, #32
 8018d94:	bdb0      	pop	{r4, r5, r7, pc}
 8018d96:	46c0      	nop			@ (mov r8, r8)
 8018d98:	080197f5 	.word	0x080197f5
 8018d9c:	0801e384 	.word	0x0801e384
 8018da0:	20000044 	.word	0x20000044
 8018da4:	20000050 	.word	0x20000050
 8018da8:	20000064 	.word	0x20000064
 8018dac:	2000006c 	.word	0x2000006c

08018db0 <_ux_device_class_storage_inquiry>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_inquiry(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b08a      	sub	sp, #40	@ 0x28
 8018db4:	af00      	add	r7, sp, #0
 8018db6:	60f8      	str	r0, [r7, #12]
 8018db8:	60b9      	str	r1, [r7, #8]
 8018dba:	607a      	str	r2, [r7, #4]
 8018dbc:	603b      	str	r3, [r7, #0]

UINT                    status = UX_SUCCESS;
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_INQUIRY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

#if !defined(UX_DEVICE_STANDALONE)

    /* Check direction.  */
    if (storage -> ux_slave_class_storage_host_length &&
 8018dc2:	68fb      	ldr	r3, [r7, #12]
 8018dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d00e      	beq.n	8018de8 <_ux_device_class_storage_inquiry+0x38>
        (storage -> ux_slave_class_storage_cbw_flags & 0x80) == 0)
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	2244      	movs	r2, #68	@ 0x44
 8018dce:	5c9b      	ldrb	r3, [r3, r2]
 8018dd0:	b25b      	sxtb	r3, r3
    if (storage -> ux_slave_class_storage_host_length &&
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	db08      	blt.n	8018de8 <_ux_device_class_storage_inquiry+0x38>
    {
        _ux_device_stack_endpoint_stall(endpoint_out);
 8018dd6:	683b      	ldr	r3, [r7, #0]
 8018dd8:	0018      	movs	r0, r3
 8018dda:	f002 ff81 	bl	801bce0 <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8018dde:	68fb      	ldr	r3, [r7, #12]
 8018de0:	2202      	movs	r2, #2
 8018de2:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 8018de4:	23ff      	movs	r3, #255	@ 0xff
 8018de6:	e0c9      	b.n	8018f7c <_ux_device_class_storage_inquiry+0x1cc>
    }
#endif

    /* From the SCSI Inquiry payload, get the page code.  */
    inquiry_page_code =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE);
 8018de8:	231f      	movs	r3, #31
 8018dea:	18fb      	adds	r3, r7, r3
 8018dec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018dee:	7892      	ldrb	r2, [r2, #2]
 8018df0:	701a      	strb	r2, [r3, #0]
    
    /* And the length to be returned. */
    inquiry_length =  storage -> ux_slave_class_storage_host_length;
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018df6:	623b      	str	r3, [r7, #32]

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	3330      	adds	r3, #48	@ 0x30
 8018dfc:	61bb      	str	r3, [r7, #24]

    /* Obtain inquiry buffer pointer.  */
    inquiry_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8018dfe:	69bb      	ldr	r3, [r7, #24]
 8018e00:	68db      	ldr	r3, [r3, #12]
 8018e02:	617b      	str	r3, [r7, #20]

    /* Ensure the data buffer is cleaned.  */
    _ux_utility_memory_set(inquiry_buffer, 0, UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 8018e04:	697b      	ldr	r3, [r7, #20]
 8018e06:	2224      	movs	r2, #36	@ 0x24
 8018e08:	2100      	movs	r1, #0
 8018e0a:	0018      	movs	r0, r3
 8018e0c:	f7fe fd86 	bl	801791c <_ux_utility_memory_set>

    /* Check for the maximum length to be returned. */
    if (inquiry_length > UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH)
 8018e10:	6a3b      	ldr	r3, [r7, #32]
 8018e12:	2b24      	cmp	r3, #36	@ 0x24
 8018e14:	d901      	bls.n	8018e1a <_ux_device_class_storage_inquiry+0x6a>
        inquiry_length = UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 8018e16:	2324      	movs	r3, #36	@ 0x24
 8018e18:	623b      	str	r3, [r7, #32]

    /* Default CSW to passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8018e1a:	68fb      	ldr	r3, [r7, #12]
 8018e1c:	2200      	movs	r2, #0
 8018e1e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Ensure we know about the page code.  */
    switch (inquiry_page_code)
 8018e20:	231f      	movs	r3, #31
 8018e22:	18fb      	adds	r3, r7, r3
 8018e24:	781b      	ldrb	r3, [r3, #0]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d002      	beq.n	8018e30 <_ux_device_class_storage_inquiry+0x80>
 8018e2a:	2b80      	cmp	r3, #128	@ 0x80
 8018e2c:	d05d      	beq.n	8018eea <_ux_device_class_storage_inquiry+0x13a>
 8018e2e:	e078      	b.n	8018f22 <_ux_device_class_storage_inquiry+0x172>
    {

    case UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_STANDARD:
            
        /* Store the product type.  */
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PERIPHERAL_TYPE] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type;
 8018e30:	68f9      	ldr	r1, [r7, #12]
 8018e32:	68ba      	ldr	r2, [r7, #8]
 8018e34:	0013      	movs	r3, r2
 8018e36:	00db      	lsls	r3, r3, #3
 8018e38:	1a9b      	subs	r3, r3, r2
 8018e3a:	00db      	lsls	r3, r3, #3
 8018e3c:	18cb      	adds	r3, r1, r3
 8018e3e:	3310      	adds	r3, #16
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	b2da      	uxtb	r2, r3
 8018e44:	697b      	ldr	r3, [r7, #20]
 8018e46:	701a      	strb	r2, [r3, #0]

        /* Store the Media Removable bit.  */
        inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_REMOVABLE_MEDIA] =  (UCHAR)storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_removable_flag;
 8018e48:	68f9      	ldr	r1, [r7, #12]
 8018e4a:	68ba      	ldr	r2, [r7, #8]
 8018e4c:	0013      	movs	r3, r2
 8018e4e:	00db      	lsls	r3, r3, #3
 8018e50:	1a9b      	subs	r3, r3, r2
 8018e52:	00db      	lsls	r3, r3, #3
 8018e54:	18cb      	adds	r3, r1, r3
 8018e56:	3314      	adds	r3, #20
 8018e58:	681a      	ldr	r2, [r3, #0]
 8018e5a:	697b      	ldr	r3, [r7, #20]
 8018e5c:	3301      	adds	r3, #1
 8018e5e:	b2d2      	uxtb	r2, r2
 8018e60:	701a      	strb	r2, [r3, #0]

        /* Store the Data Format bit.  */
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type == UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 8018e62:	68f9      	ldr	r1, [r7, #12]
 8018e64:	68ba      	ldr	r2, [r7, #8]
 8018e66:	0013      	movs	r3, r2
 8018e68:	00db      	lsls	r3, r3, #3
 8018e6a:	1a9b      	subs	r3, r3, r2
 8018e6c:	00db      	lsls	r3, r3, #3
 8018e6e:	18cb      	adds	r3, r1, r3
 8018e70:	3310      	adds	r3, #16
 8018e72:	681b      	ldr	r3, [r3, #0]
 8018e74:	2b05      	cmp	r3, #5
 8018e76:	d104      	bne.n	8018e82 <_ux_device_class_storage_inquiry+0xd2>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x32;
 8018e78:	697b      	ldr	r3, [r7, #20]
 8018e7a:	3303      	adds	r3, #3
 8018e7c:	2232      	movs	r2, #50	@ 0x32
 8018e7e:	701a      	strb	r2, [r3, #0]
 8018e80:	e003      	b.n	8018e8a <_ux_device_class_storage_inquiry+0xda>
        else
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_DATA_FORMAT] =  0x00;
 8018e82:	697b      	ldr	r3, [r7, #20]
 8018e84:	3303      	adds	r3, #3
 8018e86:	2200      	movs	r2, #0
 8018e88:	701a      	strb	r2, [r3, #0]

        /* Store the length of the response.  There is a hack here. For CD-ROM, the data lg is fixed to 0x5B !  */
        if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_type != UX_SLAVE_CLASS_STORAGE_MEDIA_CDROM)
 8018e8a:	68f9      	ldr	r1, [r7, #12]
 8018e8c:	68ba      	ldr	r2, [r7, #8]
 8018e8e:	0013      	movs	r3, r2
 8018e90:	00db      	lsls	r3, r3, #3
 8018e92:	1a9b      	subs	r3, r3, r2
 8018e94:	00db      	lsls	r3, r3, #3
 8018e96:	18cb      	adds	r3, r1, r3
 8018e98:	3310      	adds	r3, #16
 8018e9a:	681b      	ldr	r3, [r3, #0]
 8018e9c:	2b05      	cmp	r3, #5
 8018e9e:	d004      	beq.n	8018eaa <_ux_device_class_storage_inquiry+0xfa>
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH;
 8018ea0:	697b      	ldr	r3, [r7, #20]
 8018ea2:	3304      	adds	r3, #4
 8018ea4:	2224      	movs	r2, #36	@ 0x24
 8018ea6:	701a      	strb	r2, [r3, #0]
 8018ea8:	e003      	b.n	8018eb2 <_ux_device_class_storage_inquiry+0x102>
        else            
            inquiry_buffer[UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_ADDITIONAL_LENGTH] =  UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_LENGTH_CD_ROM;
 8018eaa:	697b      	ldr	r3, [r7, #20]
 8018eac:	3304      	adds	r3, #4
 8018eae:	225b      	movs	r2, #91	@ 0x5b
 8018eb0:	701a      	strb	r2, [r3, #0]

        /* Fill in the storage vendor ID.  */
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_VENDOR_INFORMATION,
 8018eb2:	697b      	ldr	r3, [r7, #20]
 8018eb4:	3308      	adds	r3, #8
 8018eb6:	0018      	movs	r0, r3
                                                                    storage -> ux_slave_class_storage_vendor_id, 8); /* Use case of memcpy is verified. */
 8018eb8:	68fb      	ldr	r3, [r7, #12]
 8018eba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_VENDOR_INFORMATION,
 8018ebc:	2208      	movs	r2, #8
 8018ebe:	0019      	movs	r1, r3
 8018ec0:	f7fe fc34 	bl	801772c <_ux_utility_memory_copy>

        /* Fill in the product vendor ID.  */
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_ID,
 8018ec4:	697b      	ldr	r3, [r7, #20]
 8018ec6:	3310      	adds	r3, #16
 8018ec8:	0018      	movs	r0, r3
                                                                    storage -> ux_slave_class_storage_product_id, 16); /* Use case of memcpy is verified. */
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_ID,
 8018ece:	2210      	movs	r2, #16
 8018ed0:	0019      	movs	r1, r3
 8018ed2:	f7fe fc2b 	bl	801772c <_ux_utility_memory_copy>

        /* Fill in the product revision number.  */
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_REVISION,
 8018ed6:	697b      	ldr	r3, [r7, #20]
 8018ed8:	3320      	adds	r3, #32
 8018eda:	0018      	movs	r0, r3
                                                                    storage -> ux_slave_class_storage_product_rev, 4); /* Use case of memcpy is verified. */
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
        _ux_utility_memory_copy(inquiry_buffer + UX_SLAVE_CLASS_STORAGE_INQUIRY_RESPONSE_PRODUCT_REVISION,
 8018ee0:	2204      	movs	r2, #4
 8018ee2:	0019      	movs	r1, r3
 8018ee4:	f7fe fc22 	bl	801772c <_ux_utility_memory_copy>

        break;
 8018ee8:	e030      	b.n	8018f4c <_ux_device_class_storage_inquiry+0x19c>

    case UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_SERIAL:

        /* Initialize the page code in response buffer.  */
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, UX_SLAVE_CLASS_STORAGE_INQUIRY_PAGE_CODE_SERIAL);
 8018eea:	69bb      	ldr	r3, [r7, #24]
 8018eec:	68db      	ldr	r3, [r3, #12]
 8018eee:	2180      	movs	r1, #128	@ 0x80
 8018ef0:	0018      	movs	r0, r3
 8018ef2:	f7fe fe1d 	bl	8017b30 <_ux_utility_short_put_big_endian>

        /* Initialize the length of the serial number in response buffer.  */
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer + 2, 20);
 8018ef6:	69bb      	ldr	r3, [r7, #24]
 8018ef8:	68db      	ldr	r3, [r3, #12]
 8018efa:	3302      	adds	r3, #2
 8018efc:	2114      	movs	r1, #20
 8018efe:	0018      	movs	r0, r3
 8018f00:	f7fe fe16 	bl	8017b30 <_ux_utility_short_put_big_endian>

        /* Copy the serial number buffer into the transfer request memory.  */
        _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer + 4, storage -> ux_slave_class_storage_product_serial, 20); /* Use case of memcpy is verified. */
 8018f04:	69bb      	ldr	r3, [r7, #24]
 8018f06:	68db      	ldr	r3, [r3, #12]
 8018f08:	1d18      	adds	r0, r3, #4
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8018f0e:	2214      	movs	r2, #20
 8018f10:	0019      	movs	r1, r3
 8018f12:	f7fe fc0b 	bl	801772c <_ux_utility_memory_copy>

        /* Send a data payload with the inquiry response buffer.  */
        if (inquiry_length > 24)
 8018f16:	6a3b      	ldr	r3, [r7, #32]
 8018f18:	2b18      	cmp	r3, #24
 8018f1a:	d916      	bls.n	8018f4a <_ux_device_class_storage_inquiry+0x19a>
            inquiry_length = 24;
 8018f1c:	2318      	movs	r3, #24
 8018f1e:	623b      	str	r3, [r7, #32]
    
        break;
 8018f20:	e013      	b.n	8018f4a <_ux_device_class_storage_inquiry+0x19a>

    default:
            
#if !defined(UX_DEVICE_STANDALONE)
        /* The page code is not supported.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	0018      	movs	r0, r3
 8018f26:	f002 fedb 	bl	801bce0 <_ux_device_stack_endpoint_stall>
#endif

        /* And update the REQUEST_SENSE codes.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8018f2a:	68f9      	ldr	r1, [r7, #12]
 8018f2c:	68ba      	ldr	r2, [r7, #8]
 8018f2e:	0013      	movs	r3, r2
 8018f30:	00db      	lsls	r3, r3, #3
 8018f32:	1a9b      	subs	r3, r3, r2
 8018f34:	00db      	lsls	r3, r3, #3
 8018f36:	18cb      	adds	r3, r1, r3
 8018f38:	3320      	adds	r3, #32
 8018f3a:	4a12      	ldr	r2, [pc, #72]	@ (8018f84 <_ux_device_class_storage_inquiry+0x1d4>)
 8018f3c:	601a      	str	r2, [r3, #0]
                                               UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

        /* Now we set the CSW with failure.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8018f3e:	68fb      	ldr	r3, [r7, #12]
 8018f40:	2201      	movs	r2, #1
 8018f42:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Return error.  */
        status =  UX_ERROR;
 8018f44:	23ff      	movs	r3, #255	@ 0xff
 8018f46:	627b      	str	r3, [r7, #36]	@ 0x24

        break;            
 8018f48:	e000      	b.n	8018f4c <_ux_device_class_storage_inquiry+0x19c>
        break;
 8018f4a:	46c0      	nop			@ (mov r8, r8)
    }    

    /* Error cases.  */
    if (status != UX_SUCCESS)
 8018f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d001      	beq.n	8018f56 <_ux_device_class_storage_inquiry+0x1a6>
        return(status);
 8018f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f54:	e012      	b.n	8018f7c <_ux_device_class_storage_inquiry+0x1cc>
    storage -> ux_device_class_storage_data_count = 0;

#else

    /* Send a data payload with the inquiry response buffer.  */
    if (inquiry_length)
 8018f56:	6a3b      	ldr	r3, [r7, #32]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d005      	beq.n	8018f68 <_ux_device_class_storage_inquiry+0x1b8>
        _ux_device_stack_transfer_request(transfer_request, inquiry_length, inquiry_length);
 8018f5c:	6a3a      	ldr	r2, [r7, #32]
 8018f5e:	6a39      	ldr	r1, [r7, #32]
 8018f60:	69bb      	ldr	r3, [r7, #24]
 8018f62:	0018      	movs	r0, r3
 8018f64:	f003 fba8 	bl	801c6b8 <_ux_device_stack_transfer_request>

    /* Check length.  */
    if (storage -> ux_slave_class_storage_host_length != inquiry_length)
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018f6c:	6a3a      	ldr	r2, [r7, #32]
 8018f6e:	429a      	cmp	r2, r3
 8018f70:	d003      	beq.n	8018f7a <_ux_device_class_storage_inquiry+0x1ca>
    {
        _ux_device_stack_endpoint_stall(endpoint_in);
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	0018      	movs	r0, r3
 8018f76:	f002 feb3 	bl	801bce0 <_ux_device_stack_endpoint_stall>
    }
#endif

    /* Return completion status.  */
    return(status);
 8018f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018f7c:	0018      	movs	r0, r3
 8018f7e:	46bd      	mov	sp, r7
 8018f80:	b00a      	add	sp, #40	@ 0x28
 8018f82:	bd80      	pop	{r7, pc}
 8018f84:	00012605 	.word	0x00012605

08018f88 <_ux_device_class_storage_mode_select>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_mode_select(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8018f88:	b580      	push	{r7, lr}
 8018f8a:	b084      	sub	sp, #16
 8018f8c:	af00      	add	r7, sp, #0
 8018f8e:	60f8      	str	r0, [r7, #12]
 8018f90:	60b9      	str	r1, [r7, #8]
 8018f92:	607a      	str	r2, [r7, #4]
 8018f94:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SELECT, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* This command is not yet supported. So Stall the endpoint.  */
    if (storage -> ux_slave_class_storage_host_length)
 8018f96:	68fb      	ldr	r3, [r7, #12]
 8018f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	d007      	beq.n	8018fae <_ux_device_class_storage_mode_select+0x26>
    {

#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_out);
 8018f9e:	683b      	ldr	r3, [r7, #0]
 8018fa0:	0018      	movs	r0, r3
 8018fa2:	f002 fe9d 	bl	801bce0 <_ux_device_stack_endpoint_stall>
#else
        UX_PARAMETER_NOT_USED(endpoint_out);
#endif

        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8018faa:	68fb      	ldr	r3, [r7, #12]
 8018fac:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* And update the REQUEST_SENSE codes.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8018fae:	68f9      	ldr	r1, [r7, #12]
 8018fb0:	68ba      	ldr	r2, [r7, #8]
 8018fb2:	0013      	movs	r3, r2
 8018fb4:	00db      	lsls	r3, r3, #3
 8018fb6:	1a9b      	subs	r3, r3, r2
 8018fb8:	00db      	lsls	r3, r3, #3
 8018fba:	18cb      	adds	r3, r1, r3
 8018fbc:	3320      	adds	r3, #32
 8018fbe:	4a07      	ldr	r2, [pc, #28]	@ (8018fdc <_ux_device_class_storage_mode_select+0x54>)
 8018fc0:	601a      	str	r2, [r3, #0]
                                            UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x05,0x26,0x01);

    /* Now we set the CSW with failure.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	2201      	movs	r2, #1
 8018fc6:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Error trap. */
    _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_FUNCTION_NOT_SUPPORTED);
 8018fc8:	2254      	movs	r2, #84	@ 0x54
 8018fca:	2107      	movs	r1, #7
 8018fcc:	2002      	movs	r0, #2
 8018fce:	f7fe f84f 	bl	8017070 <_ux_system_error_handler>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

    /* Return not supported error!  */
    return(UX_FUNCTION_NOT_SUPPORTED);
 8018fd2:	2354      	movs	r3, #84	@ 0x54
}    
 8018fd4:	0018      	movs	r0, r3
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	b004      	add	sp, #16
 8018fda:	bd80      	pop	{r7, pc}
 8018fdc:	00012605 	.word	0x00012605

08018fe0 <_ux_device_class_storage_mode_sense>:
UINT  _ux_device_class_storage_mode_sense(UX_SLAVE_CLASS_STORAGE *storage, 
                      ULONG               lun, 
                      UX_SLAVE_ENDPOINT   *endpoint_in,
                      UX_SLAVE_ENDPOINT   *endpoint_out, 
                      UCHAR               *cbwcb)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b090      	sub	sp, #64	@ 0x40
 8018fe4:	af00      	add	r7, sp, #0
 8018fe6:	60f8      	str	r0, [r7, #12]
 8018fe8:	60b9      	str	r1, [r7, #8]
 8018fea:	607a      	str	r2, [r7, #4]
 8018fec:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_MODE_SENSE, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	3330      	adds	r3, #48	@ 0x30
 8018ff2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the command format : we have 1a and 5a.  */
    mode_sense_command =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_OPERATION);
 8018ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ff6:	781b      	ldrb	r3, [r3, #0]
 8018ff8:	623b      	str	r3, [r7, #32]
    
    /* Extract the notification from the cbwcb.  */
    page_code =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PC_PAGE_CODE);
 8018ffa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8018ffc:	3302      	adds	r3, #2
 8018ffe:	781b      	ldrb	r3, [r3, #0]
 8019000:	61fb      	str	r3, [r7, #28]

    /* Check the command.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8019002:	6a3b      	ldr	r3, [r7, #32]
 8019004:	2b1a      	cmp	r3, #26
 8019006:	d108      	bne.n	801901a <_ux_device_class_storage_mode_sense+0x3a>
    {

        /* Extract the length to be returned by the cbwcb.  */
        mode_sense_reply_length =  (ULONG) *(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_6);
 8019008:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801900a:	3304      	adds	r3, #4
 801900c:	781b      	ldrb	r3, [r3, #0]
 801900e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_6;
 8019010:	2302      	movs	r3, #2
 8019012:	633b      	str	r3, [r7, #48]	@ 0x30
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_6;
 8019014:	2304      	movs	r3, #4
 8019016:	637b      	str	r3, [r7, #52]	@ 0x34
 8019018:	e00a      	b.n	8019030 <_ux_device_class_storage_mode_sense+0x50>

    else
    {

        /* Extract the length to be returned by the cbwcb.  */
        mode_sense_reply_length =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_MODE_SENSE_ALLOCATION_LENGTH_10);
 801901a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801901c:	3307      	adds	r3, #7
 801901e:	0018      	movs	r0, r3
 8019020:	f7fe fd6b 	bl	8017afa <_ux_utility_short_get_big_endian>
 8019024:	0003      	movs	r3, r0
 8019026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        flags_index = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAGS_10;
 8019028:	2303      	movs	r3, #3
 801902a:	633b      	str	r3, [r7, #48]	@ 0x30
        response_header_length = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_HEADER_LENGTH_10;
 801902c:	2308      	movs	r3, #8
 801902e:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    /* Ensure reply not exceed storage buffer.  */
    if (mode_sense_reply_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8019030:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019032:	2380      	movs	r3, #128	@ 0x80
 8019034:	011b      	lsls	r3, r3, #4
 8019036:	429a      	cmp	r2, r3
 8019038:	d902      	bls.n	8019040 <_ux_device_class_storage_mode_sense+0x60>
        mode_sense_reply_length = UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 801903a:	2380      	movs	r3, #128	@ 0x80
 801903c:	011b      	lsls	r3, r3, #4
 801903e:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Ensure memory buffer cleaned.  */
    _ux_utility_memory_set(transfer_request -> ux_slave_transfer_request_data_pointer, 0, mode_sense_reply_length); /* Use case of memset is verified. */
 8019040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019042:	68db      	ldr	r3, [r3, #12]
 8019044:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019046:	2100      	movs	r1, #0
 8019048:	0018      	movs	r0, r3
 801904a:	f7fe fc67 	bl	801791c <_ux_utility_memory_set>

    /* Establish READ ONLY flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 801904e:	68f9      	ldr	r1, [r7, #12]
 8019050:	68ba      	ldr	r2, [r7, #8]
 8019052:	0013      	movs	r3, r2
 8019054:	00db      	lsls	r3, r3, #3
 8019056:	1a9b      	subs	r3, r3, r2
 8019058:	00db      	lsls	r3, r3, #3
 801905a:	18cb      	adds	r3, r1, r3
 801905c:	3318      	adds	r3, #24
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	2b01      	cmp	r3, #1
 8019062:	d104      	bne.n	801906e <_ux_device_class_storage_mode_sense+0x8e>
    
        /* This device is Read Only.  */
        read_only_flag = UX_SLAVE_CLASS_STORAGE_MODE_SENSE_PARAMETER_FLAG_WP;
 8019064:	233b      	movs	r3, #59	@ 0x3b
 8019066:	18fb      	adds	r3, r7, r3
 8019068:	2280      	movs	r2, #128	@ 0x80
 801906a:	701a      	strb	r2, [r3, #0]
 801906c:	e003      	b.n	8019076 <_ux_device_class_storage_mode_sense+0x96>
    
    else
    
        /* This device can be written to.  */
        read_only_flag = 0;        
 801906e:	233b      	movs	r3, #59	@ 0x3b
 8019070:	18fb      	adds	r3, r7, r3
 8019072:	2200      	movs	r2, #0
 8019074:	701a      	strb	r2, [r3, #0]

    /* Build response based on expected page codes.  */

    /* Initialize length and page pointer.  */
    mode_data_length = response_header_length;
 8019076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019078:	62fb      	str	r3, [r7, #44]	@ 0x2c
    page_pointer = transfer_request -> ux_slave_transfer_request_data_pointer + response_header_length;
 801907a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801907c:	68da      	ldr	r2, [r3, #12]
 801907e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019080:	18d3      	adds	r3, r2, r3
 8019082:	62bb      	str	r3, [r7, #40]	@ 0x28
        page_pointer += page_length;
    }
#endif

    /* Caching mode page is returned if cache flush callback implemented.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush != UX_NULL &&
 8019084:	68f9      	ldr	r1, [r7, #12]
 8019086:	68ba      	ldr	r2, [r7, #8]
 8019088:	0013      	movs	r3, r2
 801908a:	00db      	lsls	r3, r3, #3
 801908c:	1a9b      	subs	r3, r3, r2
 801908e:	00db      	lsls	r3, r3, #3
 8019090:	18cb      	adds	r3, r1, r3
 8019092:	3334      	adds	r3, #52	@ 0x34
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	2b00      	cmp	r3, #0
 8019098:	d01f      	beq.n	80190da <_ux_device_class_storage_mode_sense+0xfa>
 801909a:	69fb      	ldr	r3, [r7, #28]
 801909c:	2b08      	cmp	r3, #8
 801909e:	d002      	beq.n	80190a6 <_ux_device_class_storage_mode_sense+0xc6>
        (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE ||
 80190a0:	69fb      	ldr	r3, [r7, #28]
 80190a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80190a4:	d119      	bne.n	80190da <_ux_device_class_storage_mode_sense+0xfa>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL))
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_CACHE_LENGTH;
 80190a6:	2314      	movs	r3, #20
 80190a8:	61bb      	str	r3, [r7, #24]

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_CACHE;
 80190aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190ac:	2208      	movs	r2, #8
 80190ae:	701a      	strb	r2, [r3, #0]

        /* Store the length of the page data.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_LENGTH) =
 80190b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190b2:	3301      	adds	r3, #1
 80190b4:	2212      	movs	r2, #18
 80190b6:	701a      	strb	r2, [r3, #0]
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_PAGE_LENGTH;

        /* Set the Write Cache Enabled (WCE) bit.  */
        *(page_pointer + UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAGS) |=
 80190b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190ba:	3302      	adds	r3, #2
 80190bc:	781a      	ldrb	r2, [r3, #0]
 80190be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190c0:	3302      	adds	r3, #2
 80190c2:	2104      	movs	r1, #4
 80190c4:	430a      	orrs	r2, r1
 80190c6:	b2d2      	uxtb	r2, r2
 80190c8:	701a      	strb	r2, [r3, #0]
                            UX_SLAVE_CLASS_STORAGE_CACHING_MODE_PAGE_FLAG_WCE;

        mode_data_length += page_length;
 80190ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80190cc:	69bb      	ldr	r3, [r7, #24]
 80190ce:	18d3      	adds	r3, r2, r3
 80190d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        page_pointer += page_length;
 80190d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80190d4:	69bb      	ldr	r3, [r7, #24]
 80190d6:	18d3      	adds	r3, r2, r3
 80190d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Informational Exceptions Control mode page.  */
    if (page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC ||
 80190da:	69fb      	ldr	r3, [r7, #28]
 80190dc:	2b1c      	cmp	r3, #28
 80190de:	d002      	beq.n	80190e6 <_ux_device_class_storage_mode_sense+0x106>
 80190e0:	69fb      	ldr	r3, [r7, #28]
 80190e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80190e4:	d110      	bne.n	8019108 <_ux_device_class_storage_mode_sense+0x128>
        page_code == UX_SLAVE_CLASS_STORAGE_PAGE_CODE_ALL)
    {
        page_length = USBX_DEVICE_CLASS_STORAGE_MODE_SENSE_PAGE_IEC_LENGTH;
 80190e6:	230c      	movs	r3, #12
 80190e8:	61bb      	str	r3, [r7, #24]

        /* Store page code.  */
        *(page_pointer) = UX_SLAVE_CLASS_STORAGE_PAGE_CODE_IEC;
 80190ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190ec:	221c      	movs	r2, #28
 80190ee:	701a      	strb	r2, [r3, #0]

        /* Store the length of the page data.  */
        *(page_pointer + 1) = UX_SLAVE_CLASS_STORAGE_IEC_MODE_PAGE_PAGE_LENGTH;
 80190f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80190f2:	3301      	adds	r3, #1
 80190f4:	220a      	movs	r2, #10
 80190f6:	701a      	strb	r2, [r3, #0]

        mode_data_length += page_length;
 80190f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80190fa:	69bb      	ldr	r3, [r7, #24]
 80190fc:	18d3      	adds	r3, r2, r3
 80190fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        page_pointer += page_length;
 8019100:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019102:	69bb      	ldr	r3, [r7, #24]
 8019104:	18d3      	adds	r3, r2, r3
 8019106:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Put the payload length in the header.  */
    if (mode_sense_command == UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT)
 8019108:	6a3b      	ldr	r3, [r7, #32]
 801910a:	2b1a      	cmp	r3, #26
 801910c:	d105      	bne.n	801911a <_ux_device_class_storage_mode_sense+0x13a>
        * transfer_request -> ux_slave_transfer_request_data_pointer = (UCHAR)(mode_data_length);
 801910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019110:	68db      	ldr	r3, [r3, #12]
 8019112:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019114:	b2d2      	uxtb	r2, r2
 8019116:	701a      	strb	r2, [r3, #0]
 8019118:	e007      	b.n	801912a <_ux_device_class_storage_mode_sense+0x14a>
    else
        _ux_utility_short_put_big_endian(transfer_request -> ux_slave_transfer_request_data_pointer, (USHORT)mode_data_length);
 801911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801911c:	68db      	ldr	r3, [r3, #12]
 801911e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019120:	b292      	uxth	r2, r2
 8019122:	0011      	movs	r1, r2
 8019124:	0018      	movs	r0, r3
 8019126:	f7fe fd03 	bl	8017b30 <_ux_utility_short_put_big_endian>

    /* Store the write protection flag.  */
    *(transfer_request -> ux_slave_transfer_request_data_pointer + flags_index) = read_only_flag;
 801912a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801912c:	68da      	ldr	r2, [r3, #12]
 801912e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019130:	18d3      	adds	r3, r2, r3
 8019132:	223b      	movs	r2, #59	@ 0x3b
 8019134:	18ba      	adds	r2, r7, r2
 8019136:	7812      	ldrb	r2, [r2, #0]
 8019138:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;

#else

    /* Send a payload with the response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, mode_sense_reply_length, mode_sense_reply_length); 
 801913a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801913c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801913e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019140:	0018      	movs	r0, r3
 8019142:	f003 fab9 	bl	801c6b8 <_ux_device_stack_transfer_request>
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019146:	68fb      	ldr	r3, [r7, #12]
 8019148:	2200      	movs	r2, #0
 801914a:	651a      	str	r2, [r3, #80]	@ 0x50
    status = UX_SUCCESS;
 801914c:	2300      	movs	r3, #0
 801914e:	617b      	str	r3, [r7, #20]

    /* Return completion status.  */
    return(status);
 8019150:	697b      	ldr	r3, [r7, #20]
}
 8019152:	0018      	movs	r0, r3
 8019154:	46bd      	mov	sp, r7
 8019156:	b010      	add	sp, #64	@ 0x40
 8019158:	bd80      	pop	{r7, pc}

0801915a <_ux_device_class_storage_prevent_allow_media_removal>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_prevent_allow_media_removal(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 801915a:	b580      	push	{r7, lr}
 801915c:	b084      	sub	sp, #16
 801915e:	af00      	add	r7, sp, #0
 8019160:	60f8      	str	r0, [r7, #12]
 8019162:	60b9      	str	r1, [r7, #8]
 8019164:	607a      	str	r2, [r7, #4]
 8019166:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_PREVENT_ALLOW_MEDIA_REMOVAL, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	2200      	movs	r2, #0
 801916c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801916e:	2300      	movs	r3, #0
}
 8019170:	0018      	movs	r0, r3
 8019172:	46bd      	mov	sp, r7
 8019174:	b004      	add	sp, #16
 8019176:	bd80      	pop	{r7, pc}

08019178 <_ux_device_class_storage_read>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 8019178:	b5b0      	push	{r4, r5, r7, lr}
 801917a:	b090      	sub	sp, #64	@ 0x40
 801917c:	af02      	add	r7, sp, #8
 801917e:	60f8      	str	r0, [r7, #12]
 8019180:	60b9      	str	r1, [r7, #8]
 8019182:	607a      	str	r2, [r7, #4]
 8019184:	603b      	str	r3, [r7, #0]


    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_LBA);
 8019186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019188:	3302      	adds	r3, #2
 801918a:	0018      	movs	r0, r3
 801918c:	f7fe f914 	bl	80173b8 <_ux_utility_long_get_big_endian>
 8019190:	0003      	movs	r3, r0
 8019192:	637b      	str	r3, [r7, #52]	@ 0x34

    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.  */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_READ16)
 8019194:	234c      	movs	r3, #76	@ 0x4c
 8019196:	18fb      	adds	r3, r7, r3
 8019198:	781b      	ldrb	r3, [r3, #0]
 801919a:	2b28      	cmp	r3, #40	@ 0x28
 801919c:	d107      	bne.n	80191ae <_ux_device_class_storage_read+0x36>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_16);
 801919e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80191a0:	3307      	adds	r3, #7
 80191a2:	0018      	movs	r0, r3
 80191a4:	f7fe fca9 	bl	8017afa <_ux_utility_short_get_big_endian>
 80191a8:	0003      	movs	r3, r0
 80191aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80191ac:	e006      	b.n	80191bc <_ux_device_class_storage_read+0x44>

    else        

        /* Get the number of blocks from the CBWCB in 32 bits.  */
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_READ_TRANSFER_LENGTH_32);
 80191ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80191b0:	3306      	adds	r3, #6
 80191b2:	0018      	movs	r0, r3
 80191b4:	f7fe f900 	bl	80173b8 <_ux_utility_long_get_big_endian>
 80191b8:	0003      	movs	r3, r0
 80191ba:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	3330      	adds	r3, #48	@ 0x30
 80191c0:	623b      	str	r3, [r7, #32]

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 80191c2:	68f9      	ldr	r1, [r7, #12]
 80191c4:	68ba      	ldr	r2, [r7, #8]
 80191c6:	0013      	movs	r3, r2
 80191c8:	00db      	lsls	r3, r3, #3
 80191ca:	1a9b      	subs	r3, r3, r2
 80191cc:	00db      	lsls	r3, r3, #3
 80191ce:	18cb      	adds	r3, r1, r3
 80191d0:	330c      	adds	r3, #12
 80191d2:	681a      	ldr	r2, [r3, #0]
 80191d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80191d6:	4353      	muls	r3, r2
 80191d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	2201      	movs	r2, #1
 80191de:	651a      	str	r2, [r3, #80]	@ 0x50
#else

    /* Check transfer length.  */

    /* Case (7).  Host length < device length.  */
    if (total_length > storage -> ux_slave_class_storage_host_length)
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80191e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80191e6:	429a      	cmp	r2, r3
 80191e8:	d908      	bls.n	80191fc <_ux_device_class_storage_read+0x84>
    {
        _ux_device_stack_endpoint_stall(endpoint_in);
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	0018      	movs	r0, r3
 80191ee:	f002 fd77 	bl	801bce0 <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 80191f2:	68fb      	ldr	r3, [r7, #12]
 80191f4:	2202      	movs	r2, #2
 80191f6:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 80191f8:	23ff      	movs	r3, #255	@ 0xff
 80191fa:	e0d4      	b.n	80193a6 <_ux_device_class_storage_read+0x22e>
    }

    /* Case (8). Hi <> Do.  */
    if ((storage -> ux_slave_class_storage_cbw_flags & 0x80) == 0)
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	2244      	movs	r2, #68	@ 0x44
 8019200:	5c9b      	ldrb	r3, [r3, r2]
 8019202:	b25b      	sxtb	r3, r3
 8019204:	2b00      	cmp	r3, #0
 8019206:	db08      	blt.n	801921a <_ux_device_class_storage_read+0xa2>
    {
        _ux_device_stack_endpoint_stall(endpoint_out);
 8019208:	683b      	ldr	r3, [r7, #0]
 801920a:	0018      	movs	r0, r3
 801920c:	f002 fd68 	bl	801bce0 <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8019210:	68fb      	ldr	r3, [r7, #12]
 8019212:	2202      	movs	r2, #2
 8019214:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 8019216:	23ff      	movs	r3, #255	@ 0xff
 8019218:	e0c5      	b.n	80193a6 <_ux_device_class_storage_read+0x22e>
    }

    /* It may take several transfers to send the requested data.  */
    done_length = 0;
 801921a:	2300      	movs	r3, #0
 801921c:	627b      	str	r3, [r7, #36]	@ 0x24
    while (total_number_blocks)
 801921e:	e0ab      	b.n	8019378 <_ux_device_class_storage_read+0x200>
    {

        /* Obtain the status of the device.  */
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 8019220:	68f9      	ldr	r1, [r7, #12]
 8019222:	68bb      	ldr	r3, [r7, #8]
 8019224:	1c5a      	adds	r2, r3, #1
 8019226:	0013      	movs	r3, r2
 8019228:	00db      	lsls	r3, r3, #3
 801922a:	1a9b      	subs	r3, r3, r2
 801922c:	00db      	lsls	r3, r3, #3
 801922e:	585c      	ldr	r4, [r3, r1]
 8019230:	68f9      	ldr	r1, [r7, #12]
 8019232:	68ba      	ldr	r2, [r7, #8]
 8019234:	0013      	movs	r3, r2
 8019236:	00db      	lsls	r3, r3, #3
 8019238:	1a9b      	subs	r3, r3, r2
 801923a:	00db      	lsls	r3, r3, #3
 801923c:	18cb      	adds	r3, r1, r3
 801923e:	331c      	adds	r3, #28
 8019240:	681a      	ldr	r2, [r3, #0]
 8019242:	2314      	movs	r3, #20
 8019244:	18fb      	adds	r3, r7, r3
 8019246:	68b9      	ldr	r1, [r7, #8]
 8019248:	68f8      	ldr	r0, [r7, #12]
 801924a:	47a0      	blx	r4
 801924c:	0003      	movs	r3, r0
 801924e:	61fb      	str	r3, [r7, #28]
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);
    
        /* Update the request sense.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8019250:	6979      	ldr	r1, [r7, #20]
 8019252:	68f8      	ldr	r0, [r7, #12]
 8019254:	68ba      	ldr	r2, [r7, #8]
 8019256:	0013      	movs	r3, r2
 8019258:	00db      	lsls	r3, r3, #3
 801925a:	1a9b      	subs	r3, r3, r2
 801925c:	00db      	lsls	r3, r3, #3
 801925e:	18c3      	adds	r3, r0, r3
 8019260:	3320      	adds	r3, #32
 8019262:	6019      	str	r1, [r3, #0]
    
        /* If there is a problem, return a failed command.  */
        if (status != UX_SUCCESS)
 8019264:	69fb      	ldr	r3, [r7, #28]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d00b      	beq.n	8019282 <_ux_device_class_storage_read+0x10a>
        {
    
            /* We have a problem, media status error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_in);
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	0018      	movs	r0, r3
 801926e:	f002 fd37 	bl	801bce0 <_ux_device_stack_endpoint_stall>

            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019278:	1ad2      	subs	r2, r2, r3
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	64da      	str	r2, [r3, #76]	@ 0x4c
    
            /* Return an error.  */
            return(UX_ERROR);
 801927e:	23ff      	movs	r3, #255	@ 0xff
 8019280:	e091      	b.n	80193a6 <_ux_device_class_storage_read+0x22e>
        }

        /* How much can we send in this transfer?  */
        if (total_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8019282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019284:	2380      	movs	r3, #128	@ 0x80
 8019286:	011b      	lsls	r3, r3, #4
 8019288:	429a      	cmp	r2, r3
 801928a:	d903      	bls.n	8019294 <_ux_device_class_storage_read+0x11c>

            /* Compute the transfer length based on the maximum allowed.  */
            transfer_length =  UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 801928c:	2380      	movs	r3, #128	@ 0x80
 801928e:	011b      	lsls	r3, r3, #4
 8019290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019292:	e001      	b.n	8019298 <_ux_device_class_storage_read+0x120>
            
        else

            /* Compute the transfer length based on what is left to transfer.  */
            transfer_length =  total_length;
 8019294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019296:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Compute the number of blocks to transfer.  */
        number_blocks = transfer_length / storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8019298:	68f9      	ldr	r1, [r7, #12]
 801929a:	68ba      	ldr	r2, [r7, #8]
 801929c:	0013      	movs	r3, r2
 801929e:	00db      	lsls	r3, r3, #3
 80192a0:	1a9b      	subs	r3, r3, r2
 80192a2:	00db      	lsls	r3, r3, #3
 80192a4:	18cb      	adds	r3, r1, r3
 80192a6:	330c      	adds	r3, #12
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	0019      	movs	r1, r3
 80192ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80192ae:	f7ed f8c9 	bl	8006444 <__udivsi3>
 80192b2:	0003      	movs	r3, r0
 80192b4:	61bb      	str	r3, [r7, #24]
        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ, storage, lun, transfer_request -> ux_slave_transfer_request_data_pointer, 
                                number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

        /* Execute the read command from the local media.  */
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read(storage, lun, 
 80192b6:	68f9      	ldr	r1, [r7, #12]
 80192b8:	68ba      	ldr	r2, [r7, #8]
 80192ba:	0013      	movs	r3, r2
 80192bc:	00db      	lsls	r3, r3, #3
 80192be:	1a9b      	subs	r3, r3, r2
 80192c0:	00db      	lsls	r3, r3, #3
 80192c2:	18cb      	adds	r3, r1, r3
 80192c4:	332c      	adds	r3, #44	@ 0x2c
 80192c6:	681c      	ldr	r4, [r3, #0]
 80192c8:	6a3b      	ldr	r3, [r7, #32]
 80192ca:	68da      	ldr	r2, [r3, #12]
 80192cc:	69bd      	ldr	r5, [r7, #24]
 80192ce:	68b9      	ldr	r1, [r7, #8]
 80192d0:	68f8      	ldr	r0, [r7, #12]
 80192d2:	2314      	movs	r3, #20
 80192d4:	18fb      	adds	r3, r7, r3
 80192d6:	9301      	str	r3, [sp, #4]
 80192d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80192da:	9300      	str	r3, [sp, #0]
 80192dc:	002b      	movs	r3, r5
 80192de:	47a0      	blx	r4
 80192e0:	0003      	movs	r3, r0
 80192e2:	61fb      	str	r3, [r7, #28]
                                                    transfer_request -> ux_slave_transfer_request_data_pointer, number_blocks, lba, &media_status); 

        /* If there is a problem, return a failed command.  */
        if (status != UX_SUCCESS)
 80192e4:	69fb      	ldr	r3, [r7, #28]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d015      	beq.n	8019316 <_ux_device_class_storage_read+0x19e>
        {
    
            /* We have a problem, request error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_in);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	0018      	movs	r0, r3
 80192ee:	f002 fcf7 	bl	801bce0 <_ux_device_stack_endpoint_stall>
    
            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80192f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80192f8:	1ad2      	subs	r2, r2, r3
 80192fa:	68fb      	ldr	r3, [r7, #12]
 80192fc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* And update the REQUEST_SENSE codes.  */
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 80192fe:	6979      	ldr	r1, [r7, #20]
 8019300:	68f8      	ldr	r0, [r7, #12]
 8019302:	68ba      	ldr	r2, [r7, #8]
 8019304:	0013      	movs	r3, r2
 8019306:	00db      	lsls	r3, r3, #3
 8019308:	1a9b      	subs	r3, r3, r2
 801930a:	00db      	lsls	r3, r3, #3
 801930c:	18c3      	adds	r3, r0, r3
 801930e:	3320      	adds	r3, #32
 8019310:	6019      	str	r1, [r3, #0]
    
            /* Return an error.  */
            return(UX_ERROR);
 8019312:	23ff      	movs	r3, #255	@ 0xff
 8019314:	e047      	b.n	80193a6 <_ux_device_class_storage_read+0x22e>
        }

        /* Sends the data payload back to the caller.  */
        status =  _ux_device_stack_transfer_request(transfer_request, transfer_length, transfer_length);
 8019316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019318:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801931a:	6a3b      	ldr	r3, [r7, #32]
 801931c:	0018      	movs	r0, r3
 801931e:	f003 f9cb 	bl	801c6b8 <_ux_device_stack_transfer_request>
 8019322:	0003      	movs	r3, r0
 8019324:	61fb      	str	r3, [r7, #28]

        /* Check the status.  */
        if(status != UX_SUCCESS)
 8019326:	69fb      	ldr	r3, [r7, #28]
 8019328:	2b00      	cmp	r3, #0
 801932a:	d015      	beq.n	8019358 <_ux_device_class_storage_read+0x1e0>
        {

            /* We have a problem, request error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_in);
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	0018      	movs	r0, r3
 8019330:	f002 fcd6 	bl	801bce0 <_ux_device_stack_endpoint_stall>
    
            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801933a:	1ad2      	subs	r2, r2, r3
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Update the REQUEST_SENSE codes.  */
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8019340:	68f9      	ldr	r1, [r7, #12]
 8019342:	68ba      	ldr	r2, [r7, #8]
 8019344:	0013      	movs	r3, r2
 8019346:	00db      	lsls	r3, r3, #3
 8019348:	1a9b      	subs	r3, r3, r2
 801934a:	00db      	lsls	r3, r3, #3
 801934c:	18cb      	adds	r3, r1, r3
 801934e:	3320      	adds	r3, #32
 8019350:	4a17      	ldr	r2, [pc, #92]	@ (80193b0 <_ux_device_class_storage_read+0x238>)
 8019352:	601a      	str	r2, [r3, #0]
                                                UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x02,0x54,0x00);

            /* Return an error.  */
            return(UX_ERROR);
 8019354:	23ff      	movs	r3, #255	@ 0xff
 8019356:	e026      	b.n	80193a6 <_ux_device_class_storage_read+0x22e>

        }

        /* Update the LBA address.  */
        lba += number_blocks;
 8019358:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801935a:	69bb      	ldr	r3, [r7, #24]
 801935c:	18d3      	adds	r3, r2, r3
 801935e:	637b      	str	r3, [r7, #52]	@ 0x34
        
        /* Update the length to remain.  */
        total_length -= transfer_length;        
 8019360:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8019362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019364:	1ad3      	subs	r3, r2, r3
 8019366:	62fb      	str	r3, [r7, #44]	@ 0x2c
        done_length += transfer_length;
 8019368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801936a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801936c:	18d3      	adds	r3, r2, r3
 801936e:	627b      	str	r3, [r7, #36]	@ 0x24
        
        /* Update the number of blocks to read.  */
        total_number_blocks -= number_blocks;
 8019370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019372:	69bb      	ldr	r3, [r7, #24]
 8019374:	1ad3      	subs	r3, r2, r3
 8019376:	633b      	str	r3, [r7, #48]	@ 0x30
    while (total_number_blocks)
 8019378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801937a:	2b00      	cmp	r3, #0
 801937c:	d000      	beq.n	8019380 <_ux_device_class_storage_read+0x208>
 801937e:	e74f      	b.n	8019220 <_ux_device_class_storage_read+0xa8>
    }

    /* Case (4), (5). Host length too large.  */
    if (storage -> ux_slave_class_storage_host_length > done_length)
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019384:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019386:	429a      	cmp	r2, r3
 8019388:	d209      	bcs.n	801939e <_ux_device_class_storage_read+0x226>
    {

        /* Stall Bulk-In.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	0018      	movs	r0, r3
 801938e:	f002 fca7 	bl	801bce0 <_ux_device_stack_endpoint_stall>

        /* Update residure.  */
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019392:	68fb      	ldr	r3, [r7, #12]
 8019394:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019398:	1ad2      	subs	r2, r2, r3
 801939a:	68fb      	ldr	r3, [r7, #12]
 801939c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

#endif /* else defined(UX_DEVICE_STANDALONE) */

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	2200      	movs	r2, #0
 80193a2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Return completion status.  */
    return(UX_SUCCESS);
 80193a4:	2300      	movs	r3, #0
}
 80193a6:	0018      	movs	r0, r3
 80193a8:	46bd      	mov	sp, r7
 80193aa:	b00e      	add	sp, #56	@ 0x38
 80193ac:	bdb0      	pop	{r4, r5, r7, pc}
 80193ae:	46c0      	nop			@ (mov r8, r8)
 80193b0:	00005402 	.word	0x00005402

080193b4 <_ux_device_class_storage_read_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 80193b4:	b590      	push	{r4, r7, lr}
 80193b6:	b089      	sub	sp, #36	@ 0x24
 80193b8:	af00      	add	r7, sp, #0
 80193ba:	60f8      	str	r0, [r7, #12]
 80193bc:	60b9      	str	r1, [r7, #8]
 80193be:	607a      	str	r2, [r7, #4]
 80193c0:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 80193c2:	68f9      	ldr	r1, [r7, #12]
 80193c4:	68bb      	ldr	r3, [r7, #8]
 80193c6:	1c5a      	adds	r2, r3, #1
 80193c8:	0013      	movs	r3, r2
 80193ca:	00db      	lsls	r3, r3, #3
 80193cc:	1a9b      	subs	r3, r3, r2
 80193ce:	00db      	lsls	r3, r3, #3
 80193d0:	585c      	ldr	r4, [r3, r1]
 80193d2:	68f9      	ldr	r1, [r7, #12]
 80193d4:	68ba      	ldr	r2, [r7, #8]
 80193d6:	0013      	movs	r3, r2
 80193d8:	00db      	lsls	r3, r3, #3
 80193da:	1a9b      	subs	r3, r3, r2
 80193dc:	00db      	lsls	r3, r3, #3
 80193de:	18cb      	adds	r3, r1, r3
 80193e0:	331c      	adds	r3, #28
 80193e2:	681a      	ldr	r2, [r3, #0]
 80193e4:	2310      	movs	r3, #16
 80193e6:	18fb      	adds	r3, r7, r3
 80193e8:	68b9      	ldr	r1, [r7, #8]
 80193ea:	68f8      	ldr	r0, [r7, #12]
 80193ec:	47a0      	blx	r4
 80193ee:	0003      	movs	r3, r0
 80193f0:	61fb      	str	r3, [r7, #28]
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 80193f2:	6939      	ldr	r1, [r7, #16]
 80193f4:	68f8      	ldr	r0, [r7, #12]
 80193f6:	68ba      	ldr	r2, [r7, #8]
 80193f8:	0013      	movs	r3, r2
 80193fa:	00db      	lsls	r3, r3, #3
 80193fc:	1a9b      	subs	r3, r3, r2
 80193fe:	00db      	lsls	r3, r3, #3
 8019400:	18c3      	adds	r3, r0, r3
 8019402:	3320      	adds	r3, #32
 8019404:	6019      	str	r1, [r3, #0]

    /* Check the status for error.  */
    if (status != UX_SUCCESS)
 8019406:	69fb      	ldr	r3, [r7, #28]
 8019408:	2b00      	cmp	r3, #0
 801940a:	d009      	beq.n	8019420 <_ux_device_class_storage_read_capacity+0x6c>
    {

#if !defined(UX_DEVICE_STANDALONE)

        /* We need to STALL the IN endpoint.  The endpoint will be reset by the host.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	0018      	movs	r0, r3
 8019410:	f002 fc66 	bl	801bce0 <_ux_device_stack_endpoint_stall>
#endif

        /* Now we set the CSW with Error.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8019414:	68fb      	ldr	r3, [r7, #12]
 8019416:	2201      	movs	r2, #1
 8019418:	651a      	str	r2, [r3, #80]	@ 0x50
        status = UX_SUCCESS;
 801941a:	2300      	movs	r3, #0
 801941c:	61fb      	str	r3, [r7, #28]
 801941e:	e032      	b.n	8019486 <_ux_device_class_storage_read_capacity+0xd2>
    }
    else
    {
    
        /* Obtain the pointer to the transfer request.  */
        transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	3330      	adds	r3, #48	@ 0x30
 8019424:	61bb      	str	r3, [r7, #24]

        /* Obtain read capacity response buffer.  */
        read_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 8019426:	69bb      	ldr	r3, [r7, #24]
 8019428:	68db      	ldr	r3, [r3, #12]
 801942a:	617b      	str	r3, [r7, #20]
    
        /* Ensure it is cleaned.  */
        _ux_utility_memory_set(read_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH); /* Use case of memcpy is verified. */
 801942c:	697b      	ldr	r3, [r7, #20]
 801942e:	2208      	movs	r2, #8
 8019430:	2100      	movs	r1, #0
 8019432:	0018      	movs	r0, r3
 8019434:	f7fe fa72 	bl	801791c <_ux_utility_memory_set>
    
        /* Insert the last LBA address in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LAST_LBA],
 8019438:	68f9      	ldr	r1, [r7, #12]
 801943a:	68ba      	ldr	r2, [r7, #8]
 801943c:	0013      	movs	r3, r2
 801943e:	00db      	lsls	r3, r3, #3
 8019440:	1a9b      	subs	r3, r3, r2
 8019442:	00db      	lsls	r3, r3, #3
 8019444:	18cb      	adds	r3, r1, r3
 8019446:	3308      	adds	r3, #8
 8019448:	681a      	ldr	r2, [r3, #0]
 801944a:	697b      	ldr	r3, [r7, #20]
 801944c:	0011      	movs	r1, r2
 801944e:	0018      	movs	r0, r3
 8019450:	f7fd fff9 	bl	8017446 <_ux_utility_long_put_big_endian>
                                        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);
    
        /* Insert the block length in the response.  */
        _ux_utility_long_put_big_endian(&read_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_BLOCK_SIZE],
 8019454:	697b      	ldr	r3, [r7, #20]
 8019456:	1d18      	adds	r0, r3, #4
 8019458:	68f9      	ldr	r1, [r7, #12]
 801945a:	68ba      	ldr	r2, [r7, #8]
 801945c:	0013      	movs	r3, r2
 801945e:	00db      	lsls	r3, r3, #3
 8019460:	1a9b      	subs	r3, r3, r2
 8019462:	00db      	lsls	r3, r3, #3
 8019464:	18cb      	adds	r3, r1, r3
 8019466:	330c      	adds	r3, #12
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	0019      	movs	r1, r3
 801946c:	f7fd ffeb 	bl	8017446 <_ux_utility_long_put_big_endian>
        UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);

#else

        /* Send a data payload with the read_capacity response buffer.  */
        _ux_device_stack_transfer_request(transfer_request, 
 8019470:	69bb      	ldr	r3, [r7, #24]
 8019472:	2208      	movs	r2, #8
 8019474:	2108      	movs	r1, #8
 8019476:	0018      	movs	r0, r3
 8019478:	f003 f91e 	bl	801c6b8 <_ux_device_stack_transfer_request>
                                      UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH,
                                      UX_SLAVE_CLASS_STORAGE_READ_CAPACITY_RESPONSE_LENGTH);
#endif

        /* Now we set the CSW with success.  */
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801947c:	68fb      	ldr	r3, [r7, #12]
 801947e:	2200      	movs	r2, #0
 8019480:	651a      	str	r2, [r3, #80]	@ 0x50
        status = UX_SUCCESS;
 8019482:	2300      	movs	r3, #0
 8019484:	61fb      	str	r3, [r7, #28]
    }
        
    /* Return completion status.  */
    return(status);
 8019486:	69fb      	ldr	r3, [r7, #28]
}
 8019488:	0018      	movs	r0, r3
 801948a:	46bd      	mov	sp, r7
 801948c:	b009      	add	sp, #36	@ 0x24
 801948e:	bd90      	pop	{r4, r7, pc}

08019490 <_ux_device_class_storage_read_format_capacity>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_read_format_capacity(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun,
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019490:	b580      	push	{r7, lr}
 8019492:	b088      	sub	sp, #32
 8019494:	af00      	add	r7, sp, #0
 8019496:	60f8      	str	r0, [r7, #12]
 8019498:	60b9      	str	r1, [r7, #8]
 801949a:	607a      	str	r2, [r7, #4]
 801949c:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_READ_FORMAT_CAPACITY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	3330      	adds	r3, #48	@ 0x30
 80194a2:	61fb      	str	r3, [r7, #28]

    /* Get read format capacity response buffer.  */
    read_format_capacity_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 80194a4:	69fb      	ldr	r3, [r7, #28]
 80194a6:	68db      	ldr	r3, [r3, #12]
 80194a8:	61bb      	str	r3, [r7, #24]

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(read_format_capacity_buffer, 0, UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH); /* Use case of memset is verified. */
 80194aa:	69bb      	ldr	r3, [r7, #24]
 80194ac:	220c      	movs	r2, #12
 80194ae:	2100      	movs	r1, #0
 80194b0:	0018      	movs	r0, r3
 80194b2:	f7fe fa33 	bl	801791c <_ux_utility_memory_set>

    /* Insert the size of the response block.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_SIZE], 8);
 80194b6:	69bb      	ldr	r3, [r7, #24]
 80194b8:	2108      	movs	r1, #8
 80194ba:	0018      	movs	r0, r3
 80194bc:	f7fd ffc3 	bl	8017446 <_ux_utility_long_put_big_endian>

    /* Insert the last LBA address in the response.  */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LAST_LBA],
 80194c0:	69bb      	ldr	r3, [r7, #24]
 80194c2:	1d18      	adds	r0, r3, #4
 80194c4:	68f9      	ldr	r1, [r7, #12]
 80194c6:	68ba      	ldr	r2, [r7, #8]
 80194c8:	0013      	movs	r3, r2
 80194ca:	00db      	lsls	r3, r3, #3
 80194cc:	1a9b      	subs	r3, r3, r2
 80194ce:	00db      	lsls	r3, r3, #3
 80194d0:	18cb      	adds	r3, r1, r3
 80194d2:	3308      	adds	r3, #8
 80194d4:	681b      	ldr	r3, [r3, #0]
 80194d6:	0019      	movs	r1, r3
 80194d8:	f7fd ffb5 	bl	8017446 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_last_lba);

    /* Insert the block length in the response.  This is in 3 bytes. */
    _ux_utility_long_put_big_endian(&read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_BLOCK_SIZE],
 80194dc:	69bb      	ldr	r3, [r7, #24]
 80194de:	3308      	adds	r3, #8
 80194e0:	0018      	movs	r0, r3
 80194e2:	68f9      	ldr	r1, [r7, #12]
 80194e4:	68ba      	ldr	r2, [r7, #8]
 80194e6:	0013      	movs	r3, r2
 80194e8:	00db      	lsls	r3, r3, #3
 80194ea:	1a9b      	subs	r3, r3, r2
 80194ec:	00db      	lsls	r3, r3, #3
 80194ee:	18cb      	adds	r3, r1, r3
 80194f0:	330c      	adds	r3, #12
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	0019      	movs	r1, r3
 80194f6:	f7fd ffa6 	bl	8017446 <_ux_utility_long_put_big_endian>
                                    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length);

    /* Insert the response code : always 2.  */
    read_format_capacity_buffer[UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_DESC_CODE] =  2;    
 80194fa:	69bb      	ldr	r3, [r7, #24]
 80194fc:	3308      	adds	r3, #8
 80194fe:	2202      	movs	r2, #2
 8019500:	701a      	strb	r2, [r3, #0]
    UX_SLAVE_TRANSFER_STATE_RESET(storage -> ux_device_class_storage_transfer);

#else

    /* Send a data payload with the read_capacity response buffer.  */
    _ux_device_stack_transfer_request(transfer_request, 
 8019502:	69fb      	ldr	r3, [r7, #28]
 8019504:	220c      	movs	r2, #12
 8019506:	210c      	movs	r1, #12
 8019508:	0018      	movs	r0, r3
 801950a:	f003 f8d5 	bl	801c6b8 <_ux_device_stack_transfer_request>
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH,
                                  UX_SLAVE_CLASS_STORAGE_READ_FORMAT_CAPACITY_RESPONSE_LENGTH);
#endif

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 801950e:	68fb      	ldr	r3, [r7, #12]
 8019510:	2200      	movs	r2, #0
 8019512:	651a      	str	r2, [r3, #80]	@ 0x50
    status = UX_SUCCESS;
 8019514:	2300      	movs	r3, #0
 8019516:	617b      	str	r3, [r7, #20]

    /* Return completion status.  */
    return(status);
 8019518:	697b      	ldr	r3, [r7, #20]
}
 801951a:	0018      	movs	r0, r3
 801951c:	46bd      	mov	sp, r7
 801951e:	b008      	add	sp, #32
 8019520:	bd80      	pop	{r7, pc}

08019522 <_ux_device_class_storage_request_sense>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_request_sense(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019522:	b590      	push	{r4, r7, lr}
 8019524:	b08b      	sub	sp, #44	@ 0x2c
 8019526:	af00      	add	r7, sp, #0
 8019528:	60f8      	str	r0, [r7, #12]
 801952a:	60b9      	str	r1, [r7, #8]
 801952c:	607a      	str	r2, [r7, #4]
 801952e:	603b      	str	r3, [r7, #0]

UINT                    status = UX_SUCCESS;
 8019530:	2300      	movs	r3, #0
 8019532:	623b      	str	r3, [r7, #32]

    UX_PARAMETER_NOT_USED(cbwcb);
    UX_PARAMETER_NOT_USED(endpoint_out);

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_in -> ux_slave_endpoint_transfer_request;
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	3330      	adds	r3, #48	@ 0x30
 8019538:	61fb      	str	r3, [r7, #28]

    /* Get length.  */
    sense_length = storage -> ux_slave_class_storage_host_length;
 801953a:	68fb      	ldr	r3, [r7, #12]
 801953c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801953e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (sense_length > UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH)
 8019540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019542:	2b12      	cmp	r3, #18
 8019544:	d901      	bls.n	801954a <_ux_device_class_storage_request_sense+0x28>
        sense_length = UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_LENGTH;
 8019546:	2312      	movs	r3, #18
 8019548:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Obtain sense buffer.  */
    sense_buffer = transfer_request -> ux_slave_transfer_request_data_pointer;
 801954a:	69fb      	ldr	r3, [r7, #28]
 801954c:	68db      	ldr	r3, [r3, #12]
 801954e:	61bb      	str	r3, [r7, #24]

    /* Ensure it is cleaned.  */
    _ux_utility_memory_set(sense_buffer, 0, sense_length); /* Use case of memset is verified. */
 8019550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019552:	69bb      	ldr	r3, [r7, #24]
 8019554:	2100      	movs	r1, #0
 8019556:	0018      	movs	r0, r3
 8019558:	f7fe f9e0 	bl	801791c <_ux_utility_memory_set>
    
    /* Initialize the response buffer with the error code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE] = 
 801955c:	69bb      	ldr	r3, [r7, #24]
 801955e:	2270      	movs	r2, #112	@ 0x70
 8019560:	701a      	strb	r2, [r3, #0]
                    UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ERROR_CODE_VALUE;

    /* Extract sense key, code, qualifier.  */
    key = UX_DEVICE_CLASS_STORAGE_SENSE_KEY(storage -> ux_slave_class_storage_lun[lun].
 8019562:	68f9      	ldr	r1, [r7, #12]
 8019564:	68ba      	ldr	r2, [r7, #8]
 8019566:	0013      	movs	r3, r2
 8019568:	00db      	lsls	r3, r3, #3
 801956a:	1a9b      	subs	r3, r3, r2
 801956c:	00db      	lsls	r3, r3, #3
 801956e:	18cb      	adds	r3, r1, r3
 8019570:	3320      	adds	r3, #32
 8019572:	681a      	ldr	r2, [r3, #0]
 8019574:	2017      	movs	r0, #23
 8019576:	183b      	adds	r3, r7, r0
 8019578:	701a      	strb	r2, [r3, #0]
                                            ux_slave_class_storage_request_sense_status);
    code = UX_DEVICE_CLASS_STORAGE_SENSE_CODE(storage -> ux_slave_class_storage_lun[lun].
 801957a:	68f9      	ldr	r1, [r7, #12]
 801957c:	68ba      	ldr	r2, [r7, #8]
 801957e:	0013      	movs	r3, r2
 8019580:	00db      	lsls	r3, r3, #3
 8019582:	1a9b      	subs	r3, r3, r2
 8019584:	00db      	lsls	r3, r3, #3
 8019586:	18cb      	adds	r3, r1, r3
 8019588:	3320      	adds	r3, #32
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	0a1a      	lsrs	r2, r3, #8
 801958e:	2416      	movs	r4, #22
 8019590:	193b      	adds	r3, r7, r4
 8019592:	701a      	strb	r2, [r3, #0]
                                            ux_slave_class_storage_request_sense_status);
    qualifier = UX_DEVICE_CLASS_STORAGE_SENSE_QUALIFIER(storage -> ux_slave_class_storage_lun[lun].
 8019594:	68f9      	ldr	r1, [r7, #12]
 8019596:	68ba      	ldr	r2, [r7, #8]
 8019598:	0013      	movs	r3, r2
 801959a:	00db      	lsls	r3, r3, #3
 801959c:	1a9b      	subs	r3, r3, r2
 801959e:	00db      	lsls	r3, r3, #3
 80195a0:	18cb      	adds	r3, r1, r3
 80195a2:	3320      	adds	r3, #32
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	0c1a      	lsrs	r2, r3, #16
 80195a8:	2115      	movs	r1, #21
 80195aa:	187b      	adds	r3, r7, r1
 80195ac:	701a      	strb	r2, [r3, #0]
                                            ux_slave_class_storage_request_sense_status);

    /* Initialize the response buffer with the sense key.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_SENSE_KEY] = key;
 80195ae:	69bb      	ldr	r3, [r7, #24]
 80195b0:	3302      	adds	r3, #2
 80195b2:	183a      	adds	r2, r7, r0
 80195b4:	7812      	ldrb	r2, [r2, #0]
 80195b6:	701a      	strb	r2, [r3, #0]

    /* Initialize the response buffer with the code.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_CODE] = code;
 80195b8:	69bb      	ldr	r3, [r7, #24]
 80195ba:	330c      	adds	r3, #12
 80195bc:	193a      	adds	r2, r7, r4
 80195be:	7812      	ldrb	r2, [r2, #0]
 80195c0:	701a      	strb	r2, [r3, #0]

    /* Initialize the response buffer with the code qualifier.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_CODE_QUALIFIER] = qualifier;
 80195c2:	69bb      	ldr	r3, [r7, #24]
 80195c4:	330d      	adds	r3, #13
 80195c6:	187a      	adds	r2, r7, r1
 80195c8:	7812      	ldrb	r2, [r2, #0]
 80195ca:	701a      	strb	r2, [r3, #0]
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_REQUEST_SENSE, storage, lun, 
                            key, code, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Initialize the response buffer with the additional length.  */
    sense_buffer[UX_SLAVE_CLASS_STORAGE_REQUEST_SENSE_RESPONSE_ADD_LENGTH] =  10;
 80195cc:	69bb      	ldr	r3, [r7, #24]
 80195ce:	3307      	adds	r3, #7
 80195d0:	220a      	movs	r2, #10
 80195d2:	701a      	strb	r2, [r3, #0]
    storage -> ux_device_class_storage_data_count = 0;

#else

    /* Send a data payload with the sense codes.  */
    if (sense_length)
 80195d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d005      	beq.n	80195e6 <_ux_device_class_storage_request_sense+0xc4>
        _ux_device_stack_transfer_request(transfer_request, sense_length, sense_length);
 80195da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80195dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80195de:	69fb      	ldr	r3, [r7, #28]
 80195e0:	0018      	movs	r0, r3
 80195e2:	f003 f869 	bl	801c6b8 <_ux_device_stack_transfer_request>

    /* Check length.  */
    if (storage -> ux_slave_class_storage_host_length != sense_length)
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80195ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80195ec:	429a      	cmp	r2, r3
 80195ee:	d006      	beq.n	80195fe <_ux_device_class_storage_request_sense+0xdc>
    {
        _ux_device_stack_endpoint_stall(endpoint_in);
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	0018      	movs	r0, r3
 80195f4:	f002 fb74 	bl	801bce0 <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 80195f8:	68fb      	ldr	r3, [r7, #12]
 80195fa:	2202      	movs	r2, #2
 80195fc:	651a      	str	r2, [r3, #80]	@ 0x50
    }
#endif

    /* Return completion status.  */    
    return(status);
 80195fe:	6a3b      	ldr	r3, [r7, #32]
}
 8019600:	0018      	movs	r0, r3
 8019602:	46bd      	mov	sp, r7
 8019604:	b00b      	add	sp, #44	@ 0x2c
 8019606:	bd90      	pop	{r4, r7, pc}

08019608 <_ux_device_class_storage_start_stop>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_start_stop(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                            UX_SLAVE_ENDPOINT *endpoint_in,
                                            UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	b084      	sub	sp, #16
 801960c:	af00      	add	r7, sp, #0
 801960e:	60f8      	str	r0, [r7, #12]
 8019610:	60b9      	str	r1, [r7, #8]
 8019612:	607a      	str	r2, [r7, #4]
 8019614:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_START_STOP, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	2200      	movs	r2, #0
 801961a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801961c:	2300      	movs	r3, #0
}
 801961e:	0018      	movs	r0, r3
 8019620:	46bd      	mov	sp, r7
 8019622:	b004      	add	sp, #16
 8019624:	bd80      	pop	{r7, pc}

08019626 <_ux_device_class_storage_synchronize_cache>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_synchronize_cache(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                                 UX_SLAVE_ENDPOINT *endpoint_in,
                                                 UX_SLAVE_ENDPOINT *endpoint_out, UCHAR *cbwcb, UCHAR scsi_command)
{
 8019626:	b5b0      	push	{r4, r5, r7, lr}
 8019628:	b08c      	sub	sp, #48	@ 0x30
 801962a:	af02      	add	r7, sp, #8
 801962c:	60f8      	str	r0, [r7, #12]
 801962e:	60b9      	str	r1, [r7, #8]
 8019630:	607a      	str	r2, [r7, #4]
 8019632:	603b      	str	r3, [r7, #0]

    UX_PARAMETER_NOT_USED(endpoint_out);
    UX_PARAMETER_NOT_USED(scsi_command);

    /* By default status is passed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019634:	68fb      	ldr	r3, [r7, #12]
 8019636:	2200      	movs	r2, #0
 8019638:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Is there not an implementation?  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush == UX_NULL)
 801963a:	68f9      	ldr	r1, [r7, #12]
 801963c:	68ba      	ldr	r2, [r7, #8]
 801963e:	0013      	movs	r3, r2
 8019640:	00db      	lsls	r3, r3, #3
 8019642:	1a9b      	subs	r3, r3, r2
 8019644:	00db      	lsls	r3, r3, #3
 8019646:	18cb      	adds	r3, r1, r3
 8019648:	3334      	adds	r3, #52	@ 0x34
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	2b00      	cmp	r3, #0
 801964e:	d101      	bne.n	8019654 <_ux_device_class_storage_synchronize_cache+0x2e>
    {

        /* This means the application is not using a cache.  */

        /* Return success.  */
        return(UX_SUCCESS);
 8019650:	2300      	movs	r3, #0
 8019652:	e087      	b.n	8019764 <_ux_device_class_storage_synchronize_cache+0x13e>
    }

    /* Get the LBA and number of blocks from the CBWCB in 16 bits.  */
    lba           =         _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_LBA);
 8019654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019656:	3302      	adds	r3, #2
 8019658:	0018      	movs	r0, r3
 801965a:	f7fd fead 	bl	80173b8 <_ux_utility_long_get_big_endian>
 801965e:	0003      	movs	r3, r0
 8019660:	627b      	str	r3, [r7, #36]	@ 0x24
    number_blocks = (USHORT)_ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_NUMBER_OF_BLOCKS);
 8019662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019664:	3307      	adds	r3, #7
 8019666:	0018      	movs	r0, r3
 8019668:	f7fe fa47 	bl	8017afa <_ux_utility_short_get_big_endian>
 801966c:	0002      	movs	r2, r0
 801966e:	2322      	movs	r3, #34	@ 0x22
 8019670:	18fb      	adds	r3, r7, r3
 8019672:	801a      	strh	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_SYNCHRONIZE_CACHE, storage, lun, lba, number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8019674:	68f9      	ldr	r1, [r7, #12]
 8019676:	68bb      	ldr	r3, [r7, #8]
 8019678:	1c5a      	adds	r2, r3, #1
 801967a:	0013      	movs	r3, r2
 801967c:	00db      	lsls	r3, r3, #3
 801967e:	1a9b      	subs	r3, r3, r2
 8019680:	00db      	lsls	r3, r3, #3
 8019682:	585c      	ldr	r4, [r3, r1]
 8019684:	68f9      	ldr	r1, [r7, #12]
 8019686:	68ba      	ldr	r2, [r7, #8]
 8019688:	0013      	movs	r3, r2
 801968a:	00db      	lsls	r3, r3, #3
 801968c:	1a9b      	subs	r3, r3, r2
 801968e:	00db      	lsls	r3, r3, #3
 8019690:	18cb      	adds	r3, r1, r3
 8019692:	331c      	adds	r3, #28
 8019694:	681a      	ldr	r2, [r3, #0]
 8019696:	2314      	movs	r3, #20
 8019698:	18fb      	adds	r3, r7, r3
 801969a:	68b9      	ldr	r1, [r7, #8]
 801969c:	68f8      	ldr	r0, [r7, #12]
 801969e:	47a0      	blx	r4
 80196a0:	0003      	movs	r3, r0
 80196a2:	61fb      	str	r3, [r7, #28]
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 80196a4:	6979      	ldr	r1, [r7, #20]
 80196a6:	68f8      	ldr	r0, [r7, #12]
 80196a8:	68ba      	ldr	r2, [r7, #8]
 80196aa:	0013      	movs	r3, r2
 80196ac:	00db      	lsls	r3, r3, #3
 80196ae:	1a9b      	subs	r3, r3, r2
 80196b0:	00db      	lsls	r3, r3, #3
 80196b2:	18c3      	adds	r3, r0, r3
 80196b4:	3320      	adds	r3, #32
 80196b6:	6019      	str	r1, [r3, #0]

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 80196b8:	69fb      	ldr	r3, [r7, #28]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d008      	beq.n	80196d0 <_ux_device_class_storage_synchronize_cache+0xaa>
    {

        /* We have a problem, media status error. Return a bad completion and wait for the
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_in);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	0018      	movs	r0, r3
 80196c2:	f002 fb0d 	bl	801bce0 <_ux_device_stack_endpoint_stall>
#else
        UX_PARAMETER_NOT_USED(endpoint_in);
        storage -> ux_device_class_storage_cmd_state = UX_DEVICE_CLASS_STORAGE_CMD_ERR;
#endif

        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	2201      	movs	r2, #1
 80196ca:	651a      	str	r2, [r3, #80]	@ 0x50

        /* We are done here.  */
        return(UX_ERROR);
 80196cc:	23ff      	movs	r3, #255	@ 0xff
 80196ce:	e049      	b.n	8019764 <_ux_device_class_storage_synchronize_cache+0x13e>
    storage -> ux_device_class_storage_cmd_n_lb = number_blocks;

#else

    /* Get the flags.  */
    flags =  *(cbwcb + UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS);
 80196d0:	211b      	movs	r1, #27
 80196d2:	187b      	adds	r3, r7, r1
 80196d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80196d6:	7852      	ldrb	r2, [r2, #1]
 80196d8:	701a      	strb	r2, [r3, #0]

    /* If the immediate bit is set, we return a CSW before flush.  */
    if ((flags & UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS_IMMED) != 0)
 80196da:	187b      	adds	r3, r7, r1
 80196dc:	781b      	ldrb	r3, [r3, #0]
 80196de:	2202      	movs	r2, #2
 80196e0:	4013      	ands	r3, r2
 80196e2:	d005      	beq.n	80196f0 <_ux_device_class_storage_synchronize_cache+0xca>
        _ux_device_class_storage_csw_send(storage, lun, endpoint_in, UX_SLAVE_CLASS_STORAGE_CSW_PASSED);
 80196e4:	687a      	ldr	r2, [r7, #4]
 80196e6:	68b9      	ldr	r1, [r7, #8]
 80196e8:	68f8      	ldr	r0, [r7, #12]
 80196ea:	2300      	movs	r3, #0
 80196ec:	f7ff f8e6 	bl	80188bc <_ux_device_class_storage_csw_send>

    /* Send the flush command to the local media.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_flush(storage, lun, number_blocks, lba, &media_status);
 80196f0:	68f9      	ldr	r1, [r7, #12]
 80196f2:	68ba      	ldr	r2, [r7, #8]
 80196f4:	0013      	movs	r3, r2
 80196f6:	00db      	lsls	r3, r3, #3
 80196f8:	1a9b      	subs	r3, r3, r2
 80196fa:	00db      	lsls	r3, r3, #3
 80196fc:	18cb      	adds	r3, r1, r3
 80196fe:	3334      	adds	r3, #52	@ 0x34
 8019700:	681c      	ldr	r4, [r3, #0]
 8019702:	2322      	movs	r3, #34	@ 0x22
 8019704:	18fb      	adds	r3, r7, r3
 8019706:	881a      	ldrh	r2, [r3, #0]
 8019708:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 801970a:	68b9      	ldr	r1, [r7, #8]
 801970c:	68f8      	ldr	r0, [r7, #12]
 801970e:	2314      	movs	r3, #20
 8019710:	18fb      	adds	r3, r7, r3
 8019712:	9300      	str	r3, [sp, #0]
 8019714:	002b      	movs	r3, r5
 8019716:	47a0      	blx	r4
 8019718:	0003      	movs	r3, r0
 801971a:	61fb      	str	r3, [r7, #28]

    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 801971c:	6979      	ldr	r1, [r7, #20]
 801971e:	68f8      	ldr	r0, [r7, #12]
 8019720:	68ba      	ldr	r2, [r7, #8]
 8019722:	0013      	movs	r3, r2
 8019724:	00db      	lsls	r3, r3, #3
 8019726:	1a9b      	subs	r3, r3, r2
 8019728:	00db      	lsls	r3, r3, #3
 801972a:	18c3      	adds	r3, r0, r3
 801972c:	3320      	adds	r3, #32
 801972e:	6019      	str	r1, [r3, #0]

    /* If the immediate bit is set, we are already done, no matter what local operation status is.  */
    if ((flags & UX_SLAVE_CLASS_STORAGE_SYNCHRONIZE_CACHE_FLAGS_IMMED) != 0)
 8019730:	231b      	movs	r3, #27
 8019732:	18fb      	adds	r3, r7, r3
 8019734:	781b      	ldrb	r3, [r3, #0]
 8019736:	2202      	movs	r2, #2
 8019738:	4013      	ands	r3, r2
 801973a:	d006      	beq.n	801974a <_ux_device_class_storage_synchronize_cache+0x124>
    {

        /* CSW skipped since already sent in this function.  */
        UX_DEVICE_CLASS_STORAGE_CSW_SKIP(&storage -> ux_slave_class_storage_csw_status) = UX_TRUE;
 801973c:	68fb      	ldr	r3, [r7, #12]
 801973e:	3350      	adds	r3, #80	@ 0x50
 8019740:	3303      	adds	r3, #3
 8019742:	2201      	movs	r2, #1
 8019744:	701a      	strb	r2, [r3, #0]
        return(status);
 8019746:	69fb      	ldr	r3, [r7, #28]
 8019748:	e00c      	b.n	8019764 <_ux_device_class_storage_synchronize_cache+0x13e>
    }

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 801974a:	69fb      	ldr	r3, [r7, #28]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d008      	beq.n	8019762 <_ux_device_class_storage_synchronize_cache+0x13c>
    {

        /* We have a problem, request error. Return a bad completion and wait for the
           REQUEST_SENSE command.  */
        _ux_device_stack_endpoint_stall(endpoint_in);
 8019750:	687b      	ldr	r3, [r7, #4]
 8019752:	0018      	movs	r0, r3
 8019754:	f002 fac4 	bl	801bce0 <_ux_device_stack_endpoint_stall>

        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8019758:	68fb      	ldr	r3, [r7, #12]
 801975a:	2201      	movs	r2, #1
 801975c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Return an error.  */
        return(UX_ERROR);
 801975e:	23ff      	movs	r3, #255	@ 0xff
 8019760:	e000      	b.n	8019764 <_ux_device_class_storage_synchronize_cache+0x13e>
    }
#endif

    /* Return completion status.  */
    return(status);
 8019762:	69fb      	ldr	r3, [r7, #28]
}
 8019764:	0018      	movs	r0, r3
 8019766:	46bd      	mov	sp, r7
 8019768:	b00a      	add	sp, #40	@ 0x28
 801976a:	bdb0      	pop	{r4, r5, r7, pc}

0801976c <_ux_device_class_storage_test_ready>:
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_test_ready(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, UX_SLAVE_ENDPOINT *endpoint_in,
                                          UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 801976c:	b590      	push	{r4, r7, lr}
 801976e:	b087      	sub	sp, #28
 8019770:	af00      	add	r7, sp, #0
 8019772:	60f8      	str	r0, [r7, #12]
 8019774:	60b9      	str	r1, [r7, #8]
 8019776:	607a      	str	r2, [r7, #4]
 8019778:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_TEST_READY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, lun, 
 801977a:	68f9      	ldr	r1, [r7, #12]
 801977c:	68bb      	ldr	r3, [r7, #8]
 801977e:	1c5a      	adds	r2, r3, #1
 8019780:	0013      	movs	r3, r2
 8019782:	00db      	lsls	r3, r3, #3
 8019784:	1a9b      	subs	r3, r3, r2
 8019786:	00db      	lsls	r3, r3, #3
 8019788:	585c      	ldr	r4, [r3, r1]
 801978a:	68f9      	ldr	r1, [r7, #12]
 801978c:	68ba      	ldr	r2, [r7, #8]
 801978e:	0013      	movs	r3, r2
 8019790:	00db      	lsls	r3, r3, #3
 8019792:	1a9b      	subs	r3, r3, r2
 8019794:	00db      	lsls	r3, r3, #3
 8019796:	18cb      	adds	r3, r1, r3
 8019798:	331c      	adds	r3, #28
 801979a:	681a      	ldr	r2, [r3, #0]
 801979c:	2310      	movs	r3, #16
 801979e:	18fb      	adds	r3, r7, r3
 80197a0:	68b9      	ldr	r1, [r7, #8]
 80197a2:	68f8      	ldr	r0, [r7, #12]
 80197a4:	47a0      	blx	r4
 80197a6:	0003      	movs	r3, r0
 80197a8:	617b      	str	r3, [r7, #20]
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);

    /* Set the sense/code/qualifier codes for the REQUEST_SENSE command.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 80197aa:	6939      	ldr	r1, [r7, #16]
 80197ac:	68f8      	ldr	r0, [r7, #12]
 80197ae:	68ba      	ldr	r2, [r7, #8]
 80197b0:	0013      	movs	r3, r2
 80197b2:	00db      	lsls	r3, r3, #3
 80197b4:	1a9b      	subs	r3, r3, r2
 80197b6:	00db      	lsls	r3, r3, #3
 80197b8:	18c3      	adds	r3, r0, r3
 80197ba:	3320      	adds	r3, #32
 80197bc:	6019      	str	r1, [r3, #0]

    /* Return CSW with success/error.  */
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
                            UX_SLAVE_CLASS_STORAGE_CSW_PASSED : UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 80197be:	697b      	ldr	r3, [r7, #20]
 80197c0:	1e5a      	subs	r2, r3, #1
 80197c2:	4193      	sbcs	r3, r2
 80197c4:	b2db      	uxtb	r3, r3
 80197c6:	001a      	movs	r2, r3
    storage -> ux_slave_class_storage_csw_status = (status == UX_SUCCESS) ?
 80197c8:	68fb      	ldr	r3, [r7, #12]
 80197ca:	651a      	str	r2, [r3, #80]	@ 0x50
    status = UX_SUCCESS;
 80197cc:	2300      	movs	r3, #0
 80197ce:	617b      	str	r3, [r7, #20]

#if !defined(UX_DEVICE_STANDALONE)

    /* Case (9) Ho > Dn.  */
    if (storage -> ux_slave_class_storage_host_length)
 80197d0:	68fb      	ldr	r3, [r7, #12]
 80197d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d007      	beq.n	80197e8 <_ux_device_class_storage_test_ready+0x7c>
    {
        _ux_device_stack_endpoint_stall(endpoint_out);
 80197d8:	683b      	ldr	r3, [r7, #0]
 80197da:	0018      	movs	r0, r3
 80197dc:	f002 fa80 	bl	801bce0 <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length;
 80197e0:	68fb      	ldr	r3, [r7, #12]
 80197e2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80197e4:	68fb      	ldr	r3, [r7, #12]
 80197e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
#endif

    /* Return completion status.  */
    return(status);
 80197e8:	697b      	ldr	r3, [r7, #20]
}
 80197ea:	0018      	movs	r0, r3
 80197ec:	46bd      	mov	sp, r7
 80197ee:	b007      	add	sp, #28
 80197f0:	bd90      	pop	{r4, r7, pc}
	...

080197f4 <_ux_device_class_storage_thread>:
/*                                            refined macros names,       */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
VOID  _ux_device_class_storage_thread(ULONG storage_class)
{
 80197f4:	b590      	push	{r4, r7, lr}
 80197f6:	b093      	sub	sp, #76	@ 0x4c
 80197f8:	af02      	add	r7, sp, #8
 80197fa:	6078      	str	r0, [r7, #4]
    /* This thread runs forever but can be suspended or resumed.  */
    while(1)
    {

        /* Cast properly the storage instance.  */
        UX_THREAD_EXTENSION_PTR_GET(class, UX_SLAVE_CLASS, storage_class)
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	633b      	str	r3, [r7, #48]	@ 0x30
        
        /* Get the storage instance from this class container.  */
        storage =  (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 8019800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019802:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019804:	62fb      	str	r3, [r7, #44]	@ 0x2c
    
        /* Get the pointer to the device.  */
        device =  &_ux_system_slave -> ux_system_slave_device;
 8019806:	4bd4      	ldr	r3, [pc, #848]	@ (8019b58 <_ux_device_class_storage_thread+0x364>)
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	3320      	adds	r3, #32
 801980c:	62bb      	str	r3, [r7, #40]	@ 0x28
        
        /* As long as the device is in the CONFIGURED state.  */
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801980e:	e197      	b.n	8019b40 <_ux_device_class_storage_thread+0x34c>
        { 

            /* We assume the worst situation.  */
            status =  UX_ERROR;
 8019810:	23ff      	movs	r3, #255	@ 0xff
 8019812:	637b      	str	r3, [r7, #52]	@ 0x34

            /* We are activated. We need the interface to the class.  */
            interface =  storage -> ux_slave_class_storage_interface;
 8019814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	627b      	str	r3, [r7, #36]	@ 0x24

            /* We assume the worst situation.  */
            status =  UX_ERROR;
 801981a:	23ff      	movs	r3, #255	@ 0xff
 801981c:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Locate the endpoints.  */
            endpoint_in =  interface -> ux_slave_interface_first_endpoint;
 801981e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019822:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Check the endpoint direction, if IN we have the correct endpoint.  */
            if ((endpoint_in -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) != UX_ENDPOINT_IN)
 8019824:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019826:	695b      	ldr	r3, [r3, #20]
 8019828:	2280      	movs	r2, #128	@ 0x80
 801982a:	4013      	ands	r3, r2
 801982c:	d105      	bne.n	801983a <_ux_device_class_storage_thread+0x46>
            {

                /* Wrong direction, we found the OUT endpoint first.  */
                endpoint_out =  endpoint_in;
 801982e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019830:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* So the next endpoint has to be the IN endpoint.  */
                endpoint_in =  endpoint_out -> ux_slave_endpoint_next_endpoint;
 8019832:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019838:	e002      	b.n	8019840 <_ux_device_class_storage_thread+0x4c>
            }
            else
            {

                /* We found the endpoint IN first, so next endpoint is OUT.  */
                endpoint_out =  endpoint_in -> ux_slave_endpoint_next_endpoint;
 801983a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801983c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801983e:	63bb      	str	r3, [r7, #56]	@ 0x38
            }

            /* All SCSI commands are on the endpoint OUT, from the host.  */
            transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 8019840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019842:	3330      	adds	r3, #48	@ 0x30
 8019844:	623b      	str	r3, [r7, #32]

            /* Check state, they must be both RESET.  */
            if (endpoint_out -> ux_slave_endpoint_state == UX_ENDPOINT_RESET &&
 8019846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019848:	685b      	ldr	r3, [r3, #4]
 801984a:	2b00      	cmp	r3, #0
 801984c:	d10c      	bne.n	8019868 <_ux_device_class_storage_thread+0x74>
                (UCHAR)storage -> ux_slave_class_storage_csw_status != UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR)
 801984e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019852:	b2db      	uxtb	r3, r3
            if (endpoint_out -> ux_slave_endpoint_state == UX_ENDPOINT_RESET &&
 8019854:	2b02      	cmp	r3, #2
 8019856:	d007      	beq.n	8019868 <_ux_device_class_storage_thread+0x74>
            {

                /* Send the request to the device controller.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 64, 64);
 8019858:	6a3b      	ldr	r3, [r7, #32]
 801985a:	2240      	movs	r2, #64	@ 0x40
 801985c:	2140      	movs	r1, #64	@ 0x40
 801985e:	0018      	movs	r0, r3
 8019860:	f002 ff2a 	bl	801c6b8 <_ux_device_stack_transfer_request>
 8019864:	0003      	movs	r3, r0
 8019866:	637b      	str	r3, [r7, #52]	@ 0x34

            }                
    
            /* Check the status. Our status is UX_ERROR if one of the endpoint was STALLED. We must wait for the host
               to clear the mess.   */    
            if (status == UX_SUCCESS)
 8019868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801986a:	2b00      	cmp	r3, #0
 801986c:	d000      	beq.n	8019870 <_ux_device_class_storage_thread+0x7c>
 801986e:	e155      	b.n	8019b1c <_ux_device_class_storage_thread+0x328>
            {

                /* Obtain the length of the transaction.  */
                length =  transfer_request -> ux_slave_transfer_request_actual_length;
 8019870:	6a3b      	ldr	r3, [r7, #32]
 8019872:	699b      	ldr	r3, [r3, #24]
 8019874:	61fb      	str	r3, [r7, #28]
                
                /* Obtain the buffer address containing the SCSI command.  */
                scsi_command =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8019876:	6a3b      	ldr	r3, [r7, #32]
 8019878:	68db      	ldr	r3, [r3, #12]
 801987a:	61bb      	str	r3, [r7, #24]
                
                /* Obtain the lun from the CBW.  */
                lun =  (ULONG) *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_LUN);
 801987c:	69bb      	ldr	r3, [r7, #24]
 801987e:	330d      	adds	r3, #13
 8019880:	781b      	ldrb	r3, [r3, #0]
 8019882:	617b      	str	r3, [r7, #20]
                storage -> ux_slave_class_storage_cbw_lun = (UCHAR)lun;
 8019884:	697b      	ldr	r3, [r7, #20]
 8019886:	b2d9      	uxtb	r1, r3
 8019888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801988a:	2245      	movs	r2, #69	@ 0x45
 801988c:	5499      	strb	r1, [r3, r2]
                
                /* We have to memorize the SCSI command tag for the CSW phase.  */
                storage -> ux_slave_class_storage_scsi_tag =  _ux_utility_long_get(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_TAG);
 801988e:	69bb      	ldr	r3, [r7, #24]
 8019890:	3304      	adds	r3, #4
 8019892:	0018      	movs	r0, r3
 8019894:	f7fd fd6c 	bl	8017370 <_ux_utility_long_get>
 8019898:	0002      	movs	r2, r0
 801989a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801989c:	649a      	str	r2, [r3, #72]	@ 0x48

                /* Get dCBWDataTransferLength: number of bytes to transfer.  */
                storage -> ux_slave_class_storage_host_length = _ux_utility_long_get(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_DATA_LENGTH);
 801989e:	69bb      	ldr	r3, [r7, #24]
 80198a0:	3308      	adds	r3, #8
 80198a2:	0018      	movs	r0, r3
 80198a4:	f7fd fd64 	bl	8017370 <_ux_utility_long_get>
 80198a8:	0002      	movs	r2, r0
 80198aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198ac:	641a      	str	r2, [r3, #64]	@ 0x40

                /* Save bmCBWFlags.  */
                storage -> ux_slave_class_storage_cbw_flags = *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_FLAGS);
 80198ae:	69bb      	ldr	r3, [r7, #24]
 80198b0:	7b19      	ldrb	r1, [r3, #12]
 80198b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198b4:	2244      	movs	r2, #68	@ 0x44
 80198b6:	5499      	strb	r1, [r3, r2]

                /* Reset CSW status.  */
                storage -> ux_slave_class_storage_csw_residue = 0;
 80198b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198ba:	2200      	movs	r2, #0
 80198bc:	64da      	str	r2, [r3, #76]	@ 0x4c
                storage -> ux_slave_class_storage_csw_status = 0;
 80198be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198c0:	2200      	movs	r2, #0
 80198c2:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Ensure the LUN number is within our declared values and check the command 
                   content and format. First we make sure we have a complete CBW.  */
                if ((lun < storage -> ux_slave_class_storage_number_lun) && (length == UX_SLAVE_CLASS_STORAGE_CBW_LENGTH))
 80198c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80198c6:	685b      	ldr	r3, [r3, #4]
 80198c8:	697a      	ldr	r2, [r7, #20]
 80198ca:	429a      	cmp	r2, r3
 80198cc:	d300      	bcc.n	80198d0 <_ux_device_class_storage_thread+0xdc>
 80198ce:	e121      	b.n	8019b14 <_ux_device_class_storage_thread+0x320>
 80198d0:	69fb      	ldr	r3, [r7, #28]
 80198d2:	2b1f      	cmp	r3, #31
 80198d4:	d000      	beq.n	80198d8 <_ux_device_class_storage_thread+0xe4>
 80198d6:	e11d      	b.n	8019b14 <_ux_device_class_storage_thread+0x320>
                {

                    /* The length of the CBW is correct, analyze the header.  */
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 80198d8:	69bb      	ldr	r3, [r7, #24]
 80198da:	0018      	movs	r0, r3
 80198dc:	f7fd fd48 	bl	8017370 <_ux_utility_long_get>
 80198e0:	0003      	movs	r3, r0
 80198e2:	4a9e      	ldr	r2, [pc, #632]	@ (8019b5c <_ux_device_class_storage_thread+0x368>)
 80198e4:	4293      	cmp	r3, r2
 80198e6:	d000      	beq.n	80198ea <_ux_device_class_storage_thread+0xf6>
 80198e8:	e110      	b.n	8019b0c <_ux_device_class_storage_thread+0x318>
                    {

                        /* Get the length of the CBWCB.  */
                        cbwcb_length =  (ULONG) *(scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB_LENGTH);
 80198ea:	69bb      	ldr	r3, [r7, #24]
 80198ec:	330e      	adds	r3, #14
 80198ee:	781b      	ldrb	r3, [r3, #0]
 80198f0:	613b      	str	r3, [r7, #16]
    
                        /* Check the length of the CBWCB to ensure there is at least a command.  */
                        if (cbwcb_length != 0)
 80198f2:	693b      	ldr	r3, [r7, #16]
 80198f4:	2b00      	cmp	r3, #0
 80198f6:	d100      	bne.n	80198fa <_ux_device_class_storage_thread+0x106>
 80198f8:	e104      	b.n	8019b04 <_ux_device_class_storage_thread+0x310>
                        {

                            /* Analyze the command stored in the CBWCB.  */
                            cbw_cb = scsi_command + UX_SLAVE_CLASS_STORAGE_CBW_CB;
 80198fa:	69bb      	ldr	r3, [r7, #24]
 80198fc:	330f      	adds	r3, #15
 80198fe:	60fb      	str	r3, [r7, #12]
                            switch (*(cbw_cb))
 8019900:	68fb      	ldr	r3, [r7, #12]
 8019902:	781b      	ldrb	r3, [r3, #0]
 8019904:	2baa      	cmp	r3, #170	@ 0xaa
 8019906:	d100      	bne.n	801990a <_ux_device_class_storage_thread+0x116>
 8019908:	e097      	b.n	8019a3a <_ux_device_class_storage_thread+0x246>
 801990a:	dd00      	ble.n	801990e <_ux_device_class_storage_thread+0x11a>
 801990c:	e0ba      	b.n	8019a84 <_ux_device_class_storage_thread+0x290>
 801990e:	2b5a      	cmp	r3, #90	@ 0x5a
 8019910:	dc0a      	bgt.n	8019928 <_ux_device_class_storage_thread+0x134>
 8019912:	2b00      	cmp	r3, #0
 8019914:	da00      	bge.n	8019918 <_ux_device_class_storage_thread+0x124>
 8019916:	e0b5      	b.n	8019a84 <_ux_device_class_storage_thread+0x290>
 8019918:	2b5a      	cmp	r3, #90	@ 0x5a
 801991a:	d900      	bls.n	801991e <_ux_device_class_storage_thread+0x12a>
 801991c:	e0b2      	b.n	8019a84 <_ux_device_class_storage_thread+0x290>
 801991e:	009a      	lsls	r2, r3, #2
 8019920:	4b8f      	ldr	r3, [pc, #572]	@ (8019b60 <_ux_device_class_storage_thread+0x36c>)
 8019922:	18d3      	adds	r3, r2, r3
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	469f      	mov	pc, r3
 8019928:	2ba8      	cmp	r3, #168	@ 0xa8
 801992a:	d06e      	beq.n	8019a0a <_ux_device_class_storage_thread+0x216>
 801992c:	e0aa      	b.n	8019a84 <_ux_device_class_storage_thread+0x290>
                            {

                            case UX_SLAVE_CLASS_STORAGE_SCSI_TEST_READY:

                                _ux_device_class_storage_test_ready(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801992e:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019930:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019932:	6979      	ldr	r1, [r7, #20]
 8019934:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019936:	68fb      	ldr	r3, [r7, #12]
 8019938:	9300      	str	r3, [sp, #0]
 801993a:	0023      	movs	r3, r4
 801993c:	f7ff ff16 	bl	801976c <_ux_device_class_storage_test_ready>
                                break;
 8019940:	e0ce      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
                                    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_REQUEST_SENSE:

                                _ux_device_class_storage_request_sense(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 8019942:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019944:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019946:	6979      	ldr	r1, [r7, #20]
 8019948:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	9300      	str	r3, [sp, #0]
 801994e:	0023      	movs	r3, r4
 8019950:	f7ff fde7 	bl	8019522 <_ux_device_class_storage_request_sense>
                                break;
 8019954:	e0c4      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_FORMAT:

                                _ux_device_class_storage_format(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 8019956:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801995a:	6979      	ldr	r1, [r7, #20]
 801995c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	9300      	str	r3, [sp, #0]
 8019962:	0023      	movs	r3, r4
 8019964:	f7ff f874 	bl	8018a50 <_ux_device_class_storage_format>
                                break;
 8019968:	e0ba      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_INQUIRY:

                                _ux_device_class_storage_inquiry(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801996a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 801996c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801996e:	6979      	ldr	r1, [r7, #20]
 8019970:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019972:	68fb      	ldr	r3, [r7, #12]
 8019974:	9300      	str	r3, [sp, #0]
 8019976:	0023      	movs	r3, r4
 8019978:	f7ff fa1a 	bl	8018db0 <_ux_device_class_storage_inquiry>
                                break;
 801997c:	e0b0      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_START_STOP:

                                _ux_device_class_storage_start_stop(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 801997e:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019980:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019982:	6979      	ldr	r1, [r7, #20]
 8019984:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019986:	68fb      	ldr	r3, [r7, #12]
 8019988:	9300      	str	r3, [sp, #0]
 801998a:	0023      	movs	r3, r4
 801998c:	f7ff fe3c 	bl	8019608 <_ux_device_class_storage_start_stop>
                                break;
 8019990:	e0a6      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
                                    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_PREVENT_ALLOW_MEDIA_REMOVAL:

                                _ux_device_class_storage_prevent_allow_media_removal(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 8019992:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019996:	6979      	ldr	r1, [r7, #20]
 8019998:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801999a:	68fb      	ldr	r3, [r7, #12]
 801999c:	9300      	str	r3, [sp, #0]
 801999e:	0023      	movs	r3, r4
 80199a0:	f7ff fbdb 	bl	801915a <_ux_device_class_storage_prevent_allow_media_removal>
                                break;
 80199a4:	e09c      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_READ_FORMAT_CAPACITY:

                                _ux_device_class_storage_read_format_capacity(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 80199a6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80199a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80199aa:	6979      	ldr	r1, [r7, #20]
 80199ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	9300      	str	r3, [sp, #0]
 80199b2:	0023      	movs	r3, r4
 80199b4:	f7ff fd6c 	bl	8019490 <_ux_device_class_storage_read_format_capacity>
                                break;
 80199b8:	e092      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_READ_CAPACITY:

                                _ux_device_class_storage_read_capacity(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 80199ba:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80199bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80199be:	6979      	ldr	r1, [r7, #20]
 80199c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80199c2:	68fb      	ldr	r3, [r7, #12]
 80199c4:	9300      	str	r3, [sp, #0]
 80199c6:	0023      	movs	r3, r4
 80199c8:	f7ff fcf4 	bl	80193b4 <_ux_device_class_storage_read_capacity>
                                break;
 80199cc:	e088      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_VERIFY:

                                _ux_device_class_storage_verify(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 80199ce:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80199d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80199d2:	6979      	ldr	r1, [r7, #20]
 80199d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	9300      	str	r3, [sp, #0]
 80199da:	0023      	movs	r3, r4
 80199dc:	f000 f8e6 	bl	8019bac <_ux_device_class_storage_verify>
                                break;
 80199e0:	e07e      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SELECT:

                                _ux_device_class_storage_mode_select(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 80199e2:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80199e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80199e6:	6979      	ldr	r1, [r7, #20]
 80199e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	9300      	str	r3, [sp, #0]
 80199ee:	0023      	movs	r3, r4
 80199f0:	f7ff faca 	bl	8018f88 <_ux_device_class_storage_mode_select>
                                break;
 80199f4:	e074      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE_SHORT:
                            case UX_SLAVE_CLASS_STORAGE_SCSI_MODE_SENSE:

                                _ux_device_class_storage_mode_sense(storage, lun, endpoint_in, endpoint_out, cbw_cb);
 80199f6:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80199f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80199fa:	6979      	ldr	r1, [r7, #20]
 80199fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	9300      	str	r3, [sp, #0]
 8019a02:	0023      	movs	r3, r4
 8019a04:	f7ff faec 	bl	8018fe0 <_ux_device_class_storage_mode_sense>
                                break;
 8019a08:	e06a      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_READ32:

                                _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbw_cb, 
 8019a0a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019a0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019a0e:	6979      	ldr	r1, [r7, #20]
 8019a10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019a12:	23a8      	movs	r3, #168	@ 0xa8
 8019a14:	9301      	str	r3, [sp, #4]
 8019a16:	68fb      	ldr	r3, [r7, #12]
 8019a18:	9300      	str	r3, [sp, #0]
 8019a1a:	0023      	movs	r3, r4
 8019a1c:	f7ff fbac 	bl	8019178 <_ux_device_class_storage_read>
                                                                UX_SLAVE_CLASS_STORAGE_SCSI_READ32);
                                break;
 8019a20:	e05e      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_READ16:

                                _ux_device_class_storage_read(storage, lun, endpoint_in, endpoint_out, cbw_cb, 
 8019a22:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019a24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019a26:	6979      	ldr	r1, [r7, #20]
 8019a28:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019a2a:	2328      	movs	r3, #40	@ 0x28
 8019a2c:	9301      	str	r3, [sp, #4]
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	9300      	str	r3, [sp, #0]
 8019a32:	0023      	movs	r3, r4
 8019a34:	f7ff fba0 	bl	8019178 <_ux_device_class_storage_read>
                                                                UX_SLAVE_CLASS_STORAGE_SCSI_READ16);
                                break;
 8019a38:	e052      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE32:

                                _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbw_cb,
 8019a3a:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019a3c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019a3e:	6979      	ldr	r1, [r7, #20]
 8019a40:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019a42:	23aa      	movs	r3, #170	@ 0xaa
 8019a44:	9301      	str	r3, [sp, #4]
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	9300      	str	r3, [sp, #0]
 8019a4a:	0023      	movs	r3, r4
 8019a4c:	f000 f8be 	bl	8019bcc <_ux_device_class_storage_write>
                                                                UX_SLAVE_CLASS_STORAGE_SCSI_WRITE32);
                                break;
 8019a50:	e046      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
    
                            case UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16:

                                _ux_device_class_storage_write(storage, lun, endpoint_in, endpoint_out, cbw_cb, 
 8019a52:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019a54:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019a56:	6979      	ldr	r1, [r7, #20]
 8019a58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019a5a:	232a      	movs	r3, #42	@ 0x2a
 8019a5c:	9301      	str	r3, [sp, #4]
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	9300      	str	r3, [sp, #0]
 8019a62:	0023      	movs	r3, r4
 8019a64:	f000 f8b2 	bl	8019bcc <_ux_device_class_storage_write>
                                                                UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16);
                                break;
 8019a68:	e03a      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>

                            case UX_SLAVE_CLASS_STORAGE_SCSI_SYNCHRONIZE_CACHE:

                                _ux_device_class_storage_synchronize_cache(storage, lun, endpoint_in, endpoint_out, cbw_cb, *(cbw_cb));
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	781b      	ldrb	r3, [r3, #0]
 8019a6e:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8019a70:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019a72:	6979      	ldr	r1, [r7, #20]
 8019a74:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019a76:	9301      	str	r3, [sp, #4]
 8019a78:	68fb      	ldr	r3, [r7, #12]
 8019a7a:	9300      	str	r3, [sp, #0]
 8019a7c:	0023      	movs	r3, r4
 8019a7e:	f7ff fdd2 	bl	8019626 <_ux_device_class_storage_synchronize_cache>
                                break;
 8019a82:	e02d      	b.n	8019ae0 <_ux_device_class_storage_thread+0x2ec>
                            /* fall through */
                            default:
    
                                /* The command is unknown or unsupported, so we stall the endpoint.  */

                                if (storage -> ux_slave_class_storage_host_length > 0 &&
 8019a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d00a      	beq.n	8019aa2 <_ux_device_class_storage_thread+0x2ae>
                                    ((storage -> ux_slave_class_storage_cbw_flags & 0x80) == 0))
 8019a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019a8e:	2244      	movs	r2, #68	@ 0x44
 8019a90:	5c9b      	ldrb	r3, [r3, r2]
 8019a92:	b25b      	sxtb	r3, r3
                                if (storage -> ux_slave_class_storage_host_length > 0 &&
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	db04      	blt.n	8019aa2 <_ux_device_class_storage_thread+0x2ae>

                                    /* Data-Out from host to device, stall OUT.  */
                                    _ux_device_stack_endpoint_stall(endpoint_out);
 8019a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019a9a:	0018      	movs	r0, r3
 8019a9c:	f002 f920 	bl	801bce0 <_ux_device_stack_endpoint_stall>
 8019aa0:	e003      	b.n	8019aaa <_ux_device_class_storage_thread+0x2b6>
                                else

                                    /* Data-In from device to host, stall IN.  */
                                    _ux_device_stack_endpoint_stall(endpoint_in);
 8019aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019aa4:	0018      	movs	r0, r3
 8019aa6:	f002 f91b 	bl	801bce0 <_ux_device_stack_endpoint_stall>
                                
                                /* Initialize the request sense keys.  */
                                storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8019aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019aac:	697a      	ldr	r2, [r7, #20]
 8019aae:	0013      	movs	r3, r2
 8019ab0:	00db      	lsls	r3, r3, #3
 8019ab2:	1a9b      	subs	r3, r3, r2
 8019ab4:	00db      	lsls	r3, r3, #3
 8019ab6:	18cb      	adds	r3, r1, r3
 8019ab8:	3320      	adds	r3, #32
 8019aba:	4a2a      	ldr	r2, [pc, #168]	@ (8019b64 <_ux_device_class_storage_thread+0x370>)
 8019abc:	601a      	str	r2, [r3, #0]
                                    UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(UX_SLAVE_CLASS_STORAGE_SENSE_KEY_ILLEGAL_REQUEST,
                                                                         UX_SLAVE_CLASS_STORAGE_ASC_KEY_INVALID_COMMAND,0);

                                /* This is the tricky part of the SCSI state machine. We must send the CSW BUT need to wait
                                   for the endpoint_in to be reset by the host.  */
                                while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8019abe:	e00a      	b.n	8019ad6 <_ux_device_class_storage_thread+0x2e2>
                                { 

                                    /* Check the endpoint state.  */
                                    if (endpoint_in -> ux_slave_endpoint_state == UX_ENDPOINT_RESET)
 8019ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019ac2:	685b      	ldr	r3, [r3, #4]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d104      	bne.n	8019ad2 <_ux_device_class_storage_thread+0x2de>
                                    {

                                        /* Now we set the CSW with failure.  */
                                        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8019ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019aca:	2201      	movs	r2, #1
 8019acc:	651a      	str	r2, [r3, #80]	@ 0x50
                                        break;
 8019ace:	46c0      	nop			@ (mov r8, r8)
                                    else

                                        /* We must therefore wait a while.  */
                                        _ux_device_thread_relinquish();
                                }
                                break;
 8019ad0:	e005      	b.n	8019ade <_ux_device_class_storage_thread+0x2ea>
                                        _ux_device_thread_relinquish();
 8019ad2:	f7fe f8c5 	bl	8017c60 <_ux_utility_thread_relinquish>
                                while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8019ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	2b03      	cmp	r3, #3
 8019adc:	d0f0      	beq.n	8019ac0 <_ux_device_class_storage_thread+0x2cc>
                                break;
 8019ade:	46c0      	nop			@ (mov r8, r8)
                            }

                            /* Send CSW if not SYNC_CACHE.  */
                            status = _ux_device_class_storage_csw_send(storage, lun, endpoint_in, 0 /* Don't care */);
 8019ae0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019ae2:	6979      	ldr	r1, [r7, #20]
 8019ae4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	f7fe fee8 	bl	80188bc <_ux_device_class_storage_csw_send>
 8019aec:	0003      	movs	r3, r0
 8019aee:	637b      	str	r3, [r7, #52]	@ 0x34

                            /* Check error code. */
                            if (status != UX_SUCCESS)
 8019af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d023      	beq.n	8019b3e <_ux_device_class_storage_thread+0x34a>

                                /* Error trap. */
                                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, status);
 8019af6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019af8:	001a      	movs	r2, r3
 8019afa:	2107      	movs	r1, #7
 8019afc:	2002      	movs	r0, #2
 8019afe:	f7fd fab7 	bl	8017070 <_ux_system_error_handler>
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 8019b02:	e01c      	b.n	8019b3e <_ux_device_class_storage_thread+0x34a>
                        }
                        else

                            /* Phase error!  */
                            storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8019b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b06:	2202      	movs	r2, #2
 8019b08:	651a      	str	r2, [r3, #80]	@ 0x50
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 8019b0a:	e018      	b.n	8019b3e <_ux_device_class_storage_thread+0x34a>
                    }
                    
                    else

                        /* Phase error!  */
                        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8019b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b0e:	2202      	movs	r2, #2
 8019b10:	651a      	str	r2, [r3, #80]	@ 0x50
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 8019b12:	e014      	b.n	8019b3e <_ux_device_class_storage_thread+0x34a>
                }
                else

                    /* Phase error!  */
                    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8019b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b16:	2202      	movs	r2, #2
 8019b18:	651a      	str	r2, [r3, #80]	@ 0x50
 8019b1a:	e011      	b.n	8019b40 <_ux_device_class_storage_thread+0x34c>
            }
            else
            {

                if ((UCHAR)storage -> ux_slave_class_storage_csw_status == UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR)
 8019b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	2b02      	cmp	r3, #2
 8019b24:	d107      	bne.n	8019b36 <_ux_device_class_storage_thread+0x342>
                {

                    /* We should keep the endpoints stalled.  */
                    _ux_device_stack_endpoint_stall(endpoint_out);
 8019b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019b28:	0018      	movs	r0, r3
 8019b2a:	f002 f8d9 	bl	801bce0 <_ux_device_stack_endpoint_stall>
                    _ux_device_stack_endpoint_stall(endpoint_in);
 8019b2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019b30:	0018      	movs	r0, r3
 8019b32:	f002 f8d5 	bl	801bce0 <_ux_device_stack_endpoint_stall>
                }

                /* We must therefore wait a while.  */
                _ux_utility_delay_ms(2);
 8019b36:	2002      	movs	r0, #2
 8019b38:	f7fd fb70 	bl	801721c <_ux_utility_delay_ms>
 8019b3c:	e000      	b.n	8019b40 <_ux_device_class_storage_thread+0x34c>
                    if (_ux_utility_long_get(scsi_command) == UX_SLAVE_CLASS_STORAGE_CBW_SIGNATURE_MASK)
 8019b3e:	46c0      	nop			@ (mov r8, r8)
        while (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 8019b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019b42:	681b      	ldr	r3, [r3, #0]
 8019b44:	2b03      	cmp	r3, #3
 8019b46:	d100      	bne.n	8019b4a <_ux_device_class_storage_thread+0x356>
 8019b48:	e662      	b.n	8019810 <_ux_device_class_storage_thread+0x1c>
            }
        }

        /* We need to suspend ourselves. We will be resumed by the 
           device enumeration module.  */
        _ux_device_thread_suspend(&class -> ux_slave_class_thread);
 8019b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019b4c:	3350      	adds	r3, #80	@ 0x50
 8019b4e:	0018      	movs	r0, r3
 8019b50:	f7fe f89c 	bl	8017c8c <_ux_utility_thread_suspend>
        UX_THREAD_EXTENSION_PTR_GET(class, UX_SLAVE_CLASS, storage_class)
 8019b54:	e652      	b.n	80197fc <_ux_device_class_storage_thread+0x8>
 8019b56:	46c0      	nop			@ (mov r8, r8)
 8019b58:	200116a4 	.word	0x200116a4
 8019b5c:	43425355 	.word	0x43425355
 8019b60:	0801e5ec 	.word	0x0801e5ec
 8019b64:	00002005 	.word	0x00002005

08019b68 <_ux_device_class_storage_uninitialize>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_uninitialize(UX_SLAVE_CLASS_COMMAND *command)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b084      	sub	sp, #16
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	6078      	str	r0, [r7, #4]
                                          
UX_SLAVE_CLASS_STORAGE                  *storage;
UX_SLAVE_CLASS                          *class;

    /* Get the class container.  */
    class =  command -> ux_slave_class_command_class_ptr;
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	6a1b      	ldr	r3, [r3, #32]
 8019b74:	60fb      	str	r3, [r7, #12]

    /* Get the class instance in the container.  */
    storage = (UX_SLAVE_CLASS_STORAGE *) class -> ux_slave_class_instance;
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019b7a:	60bb      	str	r3, [r7, #8]
    
    /* Sanity check.  */
    if (storage != UX_NULL)
 8019b7c:	68bb      	ldr	r3, [r7, #8]
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d00f      	beq.n	8019ba2 <_ux_device_class_storage_uninitialize+0x3a>
    {

        /* Remove STORAGE thread.  */
        _ux_device_thread_delete(&class -> ux_slave_class_thread);
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	3350      	adds	r3, #80	@ 0x50
 8019b86:	0018      	movs	r0, r3
 8019b88:	f7fe f857 	bl	8017c3a <_ux_utility_thread_delete>

#if !(defined(UX_DEVICE_STANDALONE) || defined(UX_STANDALONE))    
        /* Remove the thread used by STORAGE.  */
        _ux_utility_memory_free(class -> ux_slave_class_thread_stack);
 8019b8c:	68fa      	ldr	r2, [r7, #12]
 8019b8e:	2380      	movs	r3, #128	@ 0x80
 8019b90:	005b      	lsls	r3, r3, #1
 8019b92:	58d3      	ldr	r3, [r2, r3]
 8019b94:	0018      	movs	r0, r3
 8019b96:	f7fd fde5 	bl	8017764 <_ux_utility_memory_free>
#endif

        /* Free the resources.  */
        _ux_utility_memory_free(storage);
 8019b9a:	68bb      	ldr	r3, [r7, #8]
 8019b9c:	0018      	movs	r0, r3
 8019b9e:	f7fd fde1 	bl	8017764 <_ux_utility_memory_free>
    }
    
    /* Return completion status.  */
    return(UX_SUCCESS);
 8019ba2:	2300      	movs	r3, #0
}
 8019ba4:	0018      	movs	r0, r3
 8019ba6:	46bd      	mov	sp, r7
 8019ba8:	b004      	add	sp, #16
 8019baa:	bd80      	pop	{r7, pc}

08019bac <_ux_device_class_storage_verify>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_verify(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                      UX_SLAVE_ENDPOINT *endpoint_in,
                                      UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb)
{
 8019bac:	b580      	push	{r7, lr}
 8019bae:	b084      	sub	sp, #16
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	60f8      	str	r0, [r7, #12]
 8019bb4:	60b9      	str	r1, [r7, #8]
 8019bb6:	607a      	str	r2, [r7, #4]
 8019bb8:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_VERIFY, storage, lun, 0, 0, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* We set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	2200      	movs	r2, #0
 8019bbe:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Return success!  */
    return(UX_SUCCESS);
 8019bc0:	2300      	movs	r3, #0
}
 8019bc2:	0018      	movs	r0, r3
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	b004      	add	sp, #16
 8019bc8:	bd80      	pop	{r7, pc}
	...

08019bcc <_ux_device_class_storage_write>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_class_storage_write(UX_SLAVE_CLASS_STORAGE *storage, ULONG lun, 
                                    UX_SLAVE_ENDPOINT *endpoint_in,
                                    UX_SLAVE_ENDPOINT *endpoint_out, UCHAR * cbwcb, UCHAR scsi_command)
{
 8019bcc:	b5b0      	push	{r4, r5, r7, lr}
 8019bce:	b090      	sub	sp, #64	@ 0x40
 8019bd0:	af02      	add	r7, sp, #8
 8019bd2:	60f8      	str	r0, [r7, #12]
 8019bd4:	60b9      	str	r1, [r7, #8]
 8019bd6:	607a      	str	r2, [r7, #4]
 8019bd8:	603b      	str	r3, [r7, #0]


    UX_PARAMETER_NOT_USED(endpoint_in);

    /* Get the LBA from the CBWCB.  */
    lba =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_LBA);
 8019bda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019bdc:	3302      	adds	r3, #2
 8019bde:	0018      	movs	r0, r3
 8019be0:	f7fd fbea 	bl	80173b8 <_ux_utility_long_get_big_endian>
 8019be4:	0003      	movs	r3, r0
 8019be6:	633b      	str	r3, [r7, #48]	@ 0x30
    
    /* The type of commands will tell us the width of the field containing the number
       of sectors to read.   */
    if (scsi_command == UX_SLAVE_CLASS_STORAGE_SCSI_WRITE16)
 8019be8:	234c      	movs	r3, #76	@ 0x4c
 8019bea:	18fb      	adds	r3, r7, r3
 8019bec:	781b      	ldrb	r3, [r3, #0]
 8019bee:	2b2a      	cmp	r3, #42	@ 0x2a
 8019bf0:	d107      	bne.n	8019c02 <_ux_device_class_storage_write+0x36>

        /* Get the number of blocks from the CBWCB in 16 bits.  */
        total_number_blocks =  _ux_utility_short_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_16);
 8019bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019bf4:	3307      	adds	r3, #7
 8019bf6:	0018      	movs	r0, r3
 8019bf8:	f7fd ff7f 	bl	8017afa <_ux_utility_short_get_big_endian>
 8019bfc:	0003      	movs	r3, r0
 8019bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019c00:	e006      	b.n	8019c10 <_ux_device_class_storage_write+0x44>

    else        

        /* Get the number of blocks from the CBWCB in 32 bits.  */
        total_number_blocks =  _ux_utility_long_get_big_endian(cbwcb + UX_SLAVE_CLASS_STORAGE_WRITE_TRANSFER_LENGTH_32);
 8019c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8019c04:	3306      	adds	r3, #6
 8019c06:	0018      	movs	r0, r3
 8019c08:	f7fd fbd6 	bl	80173b8 <_ux_utility_long_get_big_endian>
 8019c0c:	0003      	movs	r3, r0
 8019c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_CLASS_STORAGE_WRITE, storage, lun, lba, total_number_blocks, UX_TRACE_DEVICE_CLASS_EVENTS, 0, 0)

    /* Obtain the pointer to the transfer request.  */
    transfer_request =  &endpoint_out -> ux_slave_endpoint_transfer_request;
 8019c10:	683b      	ldr	r3, [r7, #0]
 8019c12:	3330      	adds	r3, #48	@ 0x30
 8019c14:	61fb      	str	r3, [r7, #28]

    /* Obtain the status of the device.  */
    status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_status(storage, 
 8019c16:	68f9      	ldr	r1, [r7, #12]
 8019c18:	68bb      	ldr	r3, [r7, #8]
 8019c1a:	1c5a      	adds	r2, r3, #1
 8019c1c:	0013      	movs	r3, r2
 8019c1e:	00db      	lsls	r3, r3, #3
 8019c20:	1a9b      	subs	r3, r3, r2
 8019c22:	00db      	lsls	r3, r3, #3
 8019c24:	585c      	ldr	r4, [r3, r1]
 8019c26:	68f9      	ldr	r1, [r7, #12]
 8019c28:	68ba      	ldr	r2, [r7, #8]
 8019c2a:	0013      	movs	r3, r2
 8019c2c:	00db      	lsls	r3, r3, #3
 8019c2e:	1a9b      	subs	r3, r3, r2
 8019c30:	00db      	lsls	r3, r3, #3
 8019c32:	18cb      	adds	r3, r1, r3
 8019c34:	331c      	adds	r3, #28
 8019c36:	681a      	ldr	r2, [r3, #0]
 8019c38:	2314      	movs	r3, #20
 8019c3a:	18fb      	adds	r3, r7, r3
 8019c3c:	68b9      	ldr	r1, [r7, #8]
 8019c3e:	68f8      	ldr	r0, [r7, #12]
 8019c40:	47a0      	blx	r4
 8019c42:	0003      	movs	r3, r0
 8019c44:	637b      	str	r3, [r7, #52]	@ 0x34
                            lun, storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_id, &media_status);
    
    /* Update the request sense.  */
    storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8019c46:	6979      	ldr	r1, [r7, #20]
 8019c48:	68f8      	ldr	r0, [r7, #12]
 8019c4a:	68ba      	ldr	r2, [r7, #8]
 8019c4c:	0013      	movs	r3, r2
 8019c4e:	00db      	lsls	r3, r3, #3
 8019c50:	1a9b      	subs	r3, r3, r2
 8019c52:	00db      	lsls	r3, r3, #3
 8019c54:	18c3      	adds	r3, r0, r3
 8019c56:	3320      	adds	r3, #32
 8019c58:	6019      	str	r1, [r3, #0]

    /* Default CSW to failed.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_FAILED;
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	2201      	movs	r2, #1
 8019c5e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* If there is a problem, return a failed command.  */
    if (status != UX_SUCCESS)
 8019c60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d005      	beq.n	8019c72 <_ux_device_class_storage_write+0xa6>
    {

        /* We have a problem, media status error. Return a bad completion and wait for the
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_out);
 8019c66:	683b      	ldr	r3, [r7, #0]
 8019c68:	0018      	movs	r0, r3
 8019c6a:	f002 f839 	bl	801bce0 <_ux_device_stack_endpoint_stall>
#endif

        /* We are done here.  */
        return(UX_ERROR);
 8019c6e:	23ff      	movs	r3, #255	@ 0xff
 8019c70:	e0d4      	b.n	8019e1c <_ux_device_class_storage_write+0x250>
    }

    /* Check Read Only flag.  */
    if (storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_read_only_flag == UX_TRUE)
 8019c72:	68f9      	ldr	r1, [r7, #12]
 8019c74:	68ba      	ldr	r2, [r7, #8]
 8019c76:	0013      	movs	r3, r2
 8019c78:	00db      	lsls	r3, r3, #3
 8019c7a:	1a9b      	subs	r3, r3, r2
 8019c7c:	00db      	lsls	r3, r3, #3
 8019c7e:	18cb      	adds	r3, r1, r3
 8019c80:	3318      	adds	r3, #24
 8019c82:	681b      	ldr	r3, [r3, #0]
 8019c84:	2b01      	cmp	r3, #1
 8019c86:	d10f      	bne.n	8019ca8 <_ux_device_class_storage_write+0xdc>
    {

        /* Update the request sense.  */
        storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8019c88:	68f9      	ldr	r1, [r7, #12]
 8019c8a:	68ba      	ldr	r2, [r7, #8]
 8019c8c:	0013      	movs	r3, r2
 8019c8e:	00db      	lsls	r3, r3, #3
 8019c90:	1a9b      	subs	r3, r3, r2
 8019c92:	00db      	lsls	r3, r3, #3
 8019c94:	18cb      	adds	r3, r1, r3
 8019c96:	3320      	adds	r3, #32
 8019c98:	4a62      	ldr	r2, [pc, #392]	@ (8019e24 <_ux_device_class_storage_write+0x258>)
 8019c9a:	601a      	str	r2, [r3, #0]
                                            UX_SLAVE_CLASS_STORAGE_REQUEST_CODE_MEDIA_PROTECTED,0);

        /* We have a problem, cannot write to RO drive. Return a bad completion and wait for the
           REQUEST_SENSE command.  */
#if !defined(UX_DEVICE_STANDALONE)
        _ux_device_stack_endpoint_stall(endpoint_out);
 8019c9c:	683b      	ldr	r3, [r7, #0]
 8019c9e:	0018      	movs	r0, r3
 8019ca0:	f002 f81e 	bl	801bce0 <_ux_device_stack_endpoint_stall>
#endif

        /* We are done here.  */
        return(UX_ERROR);
 8019ca4:	23ff      	movs	r3, #255	@ 0xff
 8019ca6:	e0b9      	b.n	8019e1c <_ux_device_class_storage_write+0x250>
    }

    /* Compute the total length to transfer and how much remains.  */
    total_length =  total_number_blocks * storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8019ca8:	68f9      	ldr	r1, [r7, #12]
 8019caa:	68ba      	ldr	r2, [r7, #8]
 8019cac:	0013      	movs	r3, r2
 8019cae:	00db      	lsls	r3, r3, #3
 8019cb0:	1a9b      	subs	r3, r3, r2
 8019cb2:	00db      	lsls	r3, r3, #3
 8019cb4:	18cb      	adds	r3, r1, r3
 8019cb6:	330c      	adds	r3, #12
 8019cb8:	681a      	ldr	r2, [r3, #0]
 8019cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019cbc:	4353      	muls	r3, r2
 8019cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
#else

    /* Check transfer length.  */

    /* Case (3) Hn < Do.  */
    if (total_length > storage -> ux_slave_class_storage_host_length)
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019cc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019cc6:	429a      	cmp	r2, r3
 8019cc8:	d908      	bls.n	8019cdc <_ux_device_class_storage_write+0x110>
    {
        _ux_device_stack_endpoint_stall(endpoint_out);
 8019cca:	683b      	ldr	r3, [r7, #0]
 8019ccc:	0018      	movs	r0, r3
 8019cce:	f002 f807 	bl	801bce0 <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	2202      	movs	r2, #2
 8019cd6:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 8019cd8:	23ff      	movs	r3, #255	@ 0xff
 8019cda:	e09f      	b.n	8019e1c <_ux_device_class_storage_write+0x250>
    }

    /* Case (8). Hi <> Do.  */
    if ((storage -> ux_slave_class_storage_cbw_flags & 0x80) != 0)
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	2244      	movs	r2, #68	@ 0x44
 8019ce0:	5c9b      	ldrb	r3, [r3, r2]
 8019ce2:	b25b      	sxtb	r3, r3
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	da08      	bge.n	8019cfa <_ux_device_class_storage_write+0x12e>
    {
        _ux_device_stack_endpoint_stall(endpoint_in);
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	0018      	movs	r0, r3
 8019cec:	f001 fff8 	bl	801bce0 <_ux_device_stack_endpoint_stall>
        storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PHASE_ERROR;
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	2202      	movs	r2, #2
 8019cf4:	651a      	str	r2, [r3, #80]	@ 0x50
        return(UX_ERROR);
 8019cf6:	23ff      	movs	r3, #255	@ 0xff
 8019cf8:	e090      	b.n	8019e1c <_ux_device_class_storage_write+0x250>
    }

    /* Default status to success.  */
    status =  UX_SUCCESS;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* It may take several transfers to send the requested data.  */
    done_length = 0;
 8019cfe:	2300      	movs	r3, #0
 8019d00:	623b      	str	r3, [r7, #32]
    while (total_length)
 8019d02:	e076      	b.n	8019df2 <_ux_device_class_storage_write+0x226>
    {

        /* How much can we receive in this transfer?  */
        if (total_length > UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE)
 8019d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019d06:	2380      	movs	r3, #128	@ 0x80
 8019d08:	011b      	lsls	r3, r3, #4
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d903      	bls.n	8019d16 <_ux_device_class_storage_write+0x14a>
            transfer_length =  UX_SLAVE_CLASS_STORAGE_BUFFER_SIZE;
 8019d0e:	2380      	movs	r3, #128	@ 0x80
 8019d10:	011b      	lsls	r3, r3, #4
 8019d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8019d14:	e001      	b.n	8019d1a <_ux_device_class_storage_write+0x14e>
        else
            transfer_length =  total_length;
 8019d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019d18:	627b      	str	r3, [r7, #36]	@ 0x24
        
        /* Get the data payload from the host.  */
        status =  _ux_device_stack_transfer_request(transfer_request, transfer_length, transfer_length);
 8019d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8019d1e:	69fb      	ldr	r3, [r7, #28]
 8019d20:	0018      	movs	r0, r3
 8019d22:	f002 fcc9 	bl	801c6b8 <_ux_device_stack_transfer_request>
 8019d26:	0003      	movs	r3, r0
 8019d28:	637b      	str	r3, [r7, #52]	@ 0x34
        
        /* Check the status.  */
        if (status != UX_SUCCESS)
 8019d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d015      	beq.n	8019d5c <_ux_device_class_storage_write+0x190>
        {

            /* We have a problem, request error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_out);
 8019d30:	683b      	ldr	r3, [r7, #0]
 8019d32:	0018      	movs	r0, r3
 8019d34:	f001 ffd4 	bl	801bce0 <_ux_device_stack_endpoint_stall>

            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019d38:	68fb      	ldr	r3, [r7, #12]
 8019d3a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019d3c:	6a3b      	ldr	r3, [r7, #32]
 8019d3e:	1ad2      	subs	r2, r2, r3
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* And update the REQUEST_SENSE codes.  */
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status =
 8019d44:	68f9      	ldr	r1, [r7, #12]
 8019d46:	68ba      	ldr	r2, [r7, #8]
 8019d48:	0013      	movs	r3, r2
 8019d4a:	00db      	lsls	r3, r3, #3
 8019d4c:	1a9b      	subs	r3, r3, r2
 8019d4e:	00db      	lsls	r3, r3, #3
 8019d50:	18cb      	adds	r3, r1, r3
 8019d52:	3320      	adds	r3, #32
 8019d54:	4a34      	ldr	r2, [pc, #208]	@ (8019e28 <_ux_device_class_storage_write+0x25c>)
 8019d56:	601a      	str	r2, [r3, #0]
                                                UX_DEVICE_CLASS_STORAGE_SENSE_STATUS(0x02,0x54,0x00);
    
            /* Return an error.  */
            return(UX_ERROR);
 8019d58:	23ff      	movs	r3, #255	@ 0xff
 8019d5a:	e05f      	b.n	8019e1c <_ux_device_class_storage_write+0x250>
        }

        /* Compute the number of blocks to transfer.  */
        number_blocks = transfer_length / storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_block_length;
 8019d5c:	68f9      	ldr	r1, [r7, #12]
 8019d5e:	68ba      	ldr	r2, [r7, #8]
 8019d60:	0013      	movs	r3, r2
 8019d62:	00db      	lsls	r3, r3, #3
 8019d64:	1a9b      	subs	r3, r3, r2
 8019d66:	00db      	lsls	r3, r3, #3
 8019d68:	18cb      	adds	r3, r1, r3
 8019d6a:	330c      	adds	r3, #12
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	0019      	movs	r1, r3
 8019d70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8019d72:	f7ec fb67 	bl	8006444 <__udivsi3>
 8019d76:	0003      	movs	r3, r0
 8019d78:	61bb      	str	r3, [r7, #24]
        
        /* Execute the write command to the local media.  */
        status =  storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_media_write(storage, lun, transfer_request -> ux_slave_transfer_request_data_pointer, number_blocks, lba, &media_status);
 8019d7a:	68f9      	ldr	r1, [r7, #12]
 8019d7c:	68ba      	ldr	r2, [r7, #8]
 8019d7e:	0013      	movs	r3, r2
 8019d80:	00db      	lsls	r3, r3, #3
 8019d82:	1a9b      	subs	r3, r3, r2
 8019d84:	00db      	lsls	r3, r3, #3
 8019d86:	18cb      	adds	r3, r1, r3
 8019d88:	3330      	adds	r3, #48	@ 0x30
 8019d8a:	681c      	ldr	r4, [r3, #0]
 8019d8c:	69fb      	ldr	r3, [r7, #28]
 8019d8e:	68da      	ldr	r2, [r3, #12]
 8019d90:	69bd      	ldr	r5, [r7, #24]
 8019d92:	68b9      	ldr	r1, [r7, #8]
 8019d94:	68f8      	ldr	r0, [r7, #12]
 8019d96:	2314      	movs	r3, #20
 8019d98:	18fb      	adds	r3, r7, r3
 8019d9a:	9301      	str	r3, [sp, #4]
 8019d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d9e:	9300      	str	r3, [sp, #0]
 8019da0:	002b      	movs	r3, r5
 8019da2:	47a0      	blx	r4
 8019da4:	0003      	movs	r3, r0
 8019da6:	637b      	str	r3, [r7, #52]	@ 0x34
    
        /* If there is a problem, return a failed command.  */
        if (status != UX_SUCCESS)
 8019da8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d015      	beq.n	8019dda <_ux_device_class_storage_write+0x20e>
        {
    
            /* We have a problem, request error. Return a bad completion and wait for the
               REQUEST_SENSE command.  */
            _ux_device_stack_endpoint_stall(endpoint_out);
 8019dae:	683b      	ldr	r3, [r7, #0]
 8019db0:	0018      	movs	r0, r3
 8019db2:	f001 ff95 	bl	801bce0 <_ux_device_stack_endpoint_stall>
    
            /* Update residue.  */
            storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019db6:	68fb      	ldr	r3, [r7, #12]
 8019db8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019dba:	6a3b      	ldr	r3, [r7, #32]
 8019dbc:	1ad2      	subs	r2, r2, r3
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* And update the REQUEST_SENSE codes.  */
            storage -> ux_slave_class_storage_lun[lun].ux_slave_class_storage_request_sense_status = media_status;
 8019dc2:	6979      	ldr	r1, [r7, #20]
 8019dc4:	68f8      	ldr	r0, [r7, #12]
 8019dc6:	68ba      	ldr	r2, [r7, #8]
 8019dc8:	0013      	movs	r3, r2
 8019dca:	00db      	lsls	r3, r3, #3
 8019dcc:	1a9b      	subs	r3, r3, r2
 8019dce:	00db      	lsls	r3, r3, #3
 8019dd0:	18c3      	adds	r3, r0, r3
 8019dd2:	3320      	adds	r3, #32
 8019dd4:	6019      	str	r1, [r3, #0]
    
            /* Return an error.  */
            return(UX_ERROR);
 8019dd6:	23ff      	movs	r3, #255	@ 0xff
 8019dd8:	e020      	b.n	8019e1c <_ux_device_class_storage_write+0x250>
        }

        /* Update the lba.  */
        lba += number_blocks;
 8019dda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019ddc:	69bb      	ldr	r3, [r7, #24]
 8019dde:	18d3      	adds	r3, r2, r3
 8019de0:	633b      	str	r3, [r7, #48]	@ 0x30
        
        /* Update the length to remain.  */
        total_length -= transfer_length;
 8019de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8019de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019de6:	1ad3      	subs	r3, r2, r3
 8019de8:	62bb      	str	r3, [r7, #40]	@ 0x28
        done_length += transfer_length;
 8019dea:	6a3a      	ldr	r2, [r7, #32]
 8019dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019dee:	18d3      	adds	r3, r2, r3
 8019df0:	623b      	str	r3, [r7, #32]
    while (total_length)
 8019df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d185      	bne.n	8019d04 <_ux_device_class_storage_write+0x138>
    }

    /* Update residue.  */
    storage -> ux_slave_class_storage_csw_residue = storage -> ux_slave_class_storage_host_length - done_length;
 8019df8:	68fb      	ldr	r3, [r7, #12]
 8019dfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019dfc:	6a3b      	ldr	r3, [r7, #32]
 8019dfe:	1ad2      	subs	r2, r2, r3
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Case (9), (11). If host expects more transfer, stall it.  */
    if (storage -> ux_slave_class_storage_csw_residue)
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019e08:	2b00      	cmp	r3, #0
 8019e0a:	d003      	beq.n	8019e14 <_ux_device_class_storage_write+0x248>
        _ux_device_stack_endpoint_stall(endpoint_out);
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	0018      	movs	r0, r3
 8019e10:	f001 ff66 	bl	801bce0 <_ux_device_stack_endpoint_stall>

#endif /* else defined(UX_DEVICE_STANDALONE) */

    /* Now we set the CSW with success.  */
    storage -> ux_slave_class_storage_csw_status = UX_SLAVE_CLASS_STORAGE_CSW_PASSED;
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	2200      	movs	r2, #0
 8019e18:	651a      	str	r2, [r3, #80]	@ 0x50
                                    
    /* Return completion status.  */
    return(status);
 8019e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8019e1c:	0018      	movs	r0, r3
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	b00e      	add	sp, #56	@ 0x38
 8019e22:	bdb0      	pop	{r4, r5, r7, pc}
 8019e24:	00002707 	.word	0x00002707
 8019e28:	00005402 	.word	0x00005402

08019e2c <_ux_dcd_stm32_setup_in>:
#include "ux_device_stack.h"
#include "ux_utility.h"


static inline void _ux_dcd_stm32_setup_in(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request)
{
 8019e2c:	b580      	push	{r7, lr}
 8019e2e:	b082      	sub	sp, #8
 8019e30:	af00      	add	r7, sp, #0
 8019e32:	6078      	str	r0, [r7, #4]
 8019e34:	6039      	str	r1, [r7, #0]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	2280      	movs	r2, #128	@ 0x80
 8019e3a:	729a      	strb	r2, [r3, #10]

    /* Set the state to TX.  */
    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_DATA_TX;
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	2201      	movs	r2, #1
 8019e40:	721a      	strb	r2, [r3, #8]

    /* Call the Control Transfer dispatcher.  */
    _ux_device_stack_control_request_process(transfer_request);
 8019e42:	683b      	ldr	r3, [r7, #0]
 8019e44:	0018      	movs	r0, r3
 8019e46:	f001 fb53 	bl	801b4f0 <_ux_device_stack_control_request_process>
}
 8019e4a:	46c0      	nop			@ (mov r8, r8)
 8019e4c:	46bd      	mov	sp, r7
 8019e4e:	b002      	add	sp, #8
 8019e50:	bd80      	pop	{r7, pc}

08019e52 <_ux_dcd_stm32_setup_out>:

static inline void _ux_dcd_stm32_setup_out(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                           PCD_HandleTypeDef *hpcd)
{
 8019e52:	b580      	push	{r7, lr}
 8019e54:	b084      	sub	sp, #16
 8019e56:	af00      	add	r7, sp, #0
 8019e58:	60f8      	str	r0, [r7, #12]
 8019e5a:	60b9      	str	r1, [r7, #8]
 8019e5c:	607a      	str	r2, [r7, #4]

    /* Set the completion code to no error.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8019e5e:	68bb      	ldr	r3, [r7, #8]
 8019e60:	2200      	movs	r2, #0
 8019e62:	625a      	str	r2, [r3, #36]	@ 0x24

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
        in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	2280      	movs	r2, #128	@ 0x80
 8019e68:	729a      	strb	r2, [r3, #10]

    /* We are using a Control endpoint on a OUT transaction and there was a payload.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8019e6a:	68bb      	ldr	r3, [r7, #8]
 8019e6c:	0018      	movs	r0, r3
 8019e6e:	f001 fb3f 	bl	801b4f0 <_ux_device_stack_control_request_process>
 8019e72:	1e03      	subs	r3, r0, #0
 8019e74:	d108      	bne.n	8019e88 <_ux_dcd_stm32_setup_out+0x36>
    {

        /* Set the state to STATUS phase TX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_TX;
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	2203      	movs	r2, #3
 8019e7a:	721a      	strb	r2, [r3, #8]

        /* Arm the status transfer.  */
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8019e7c:	6878      	ldr	r0, [r7, #4]
 8019e7e:	2300      	movs	r3, #0
 8019e80:	2200      	movs	r2, #0
 8019e82:	2100      	movs	r1, #0
 8019e84:	f7ef fde3 	bl	8009a4e <HAL_PCD_EP_Transmit>
    }
}
 8019e88:	46c0      	nop			@ (mov r8, r8)
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	b004      	add	sp, #16
 8019e8e:	bd80      	pop	{r7, pc}

08019e90 <_ux_dcd_stm32_setup_status>:

static inline void _ux_dcd_stm32_setup_status(UX_DCD_STM32_ED * ed, UX_SLAVE_TRANSFER *transfer_request,
                                              PCD_HandleTypeDef *hpcd)
{
 8019e90:	b580      	push	{r7, lr}
 8019e92:	b084      	sub	sp, #16
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	60f8      	str	r0, [r7, #12]
 8019e98:	60b9      	str	r1, [r7, #8]
 8019e9a:	607a      	str	r2, [r7, #4]

    /* The endpoint is IN.  This is important to memorize the direction for the control endpoint
            in case of a STALL. */
    ed -> ux_dcd_stm32_ed_direction = UX_ENDPOINT_IN;
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	2280      	movs	r2, #128	@ 0x80
 8019ea0:	729a      	strb	r2, [r3, #10]

    /* Call the Control Transfer dispatcher.  */
    if (_ux_device_stack_control_request_process(transfer_request) == UX_SUCCESS)
 8019ea2:	68bb      	ldr	r3, [r7, #8]
 8019ea4:	0018      	movs	r0, r3
 8019ea6:	f001 fb23 	bl	801b4f0 <_ux_device_stack_control_request_process>
 8019eaa:	1e03      	subs	r3, r0, #0
 8019eac:	d108      	bne.n	8019ec0 <_ux_dcd_stm32_setup_status+0x30>
    {

        /* Set the state to STATUS RX.  */
        ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	2204      	movs	r2, #4
 8019eb2:	721a      	strb	r2, [r3, #8]
        HAL_PCD_EP_Transmit(hpcd, 0x00U, UX_NULL, 0U);
 8019eb4:	6878      	ldr	r0, [r7, #4]
 8019eb6:	2300      	movs	r3, #0
 8019eb8:	2200      	movs	r2, #0
 8019eba:	2100      	movs	r1, #0
 8019ebc:	f7ef fdc7 	bl	8009a4e <HAL_PCD_EP_Transmit>
    }
}
 8019ec0:	46c0      	nop			@ (mov r8, r8)
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	b004      	add	sp, #16
 8019ec6:	bd80      	pop	{r7, pc}

08019ec8 <HAL_PCD_SetupStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b088      	sub	sp, #32
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	6078      	str	r0, [r7, #4]
UX_SLAVE_TRANSFER       *transfer_request;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8019ed0:	4b3e      	ldr	r3, [pc, #248]	@ (8019fcc <HAL_PCD_SetupStageCallback+0x104>)
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8019ed6:	69fb      	ldr	r3, [r7, #28]
 8019ed8:	69db      	ldr	r3, [r3, #28]
 8019eda:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[0];
 8019edc:	69bb      	ldr	r3, [r7, #24]
 8019ede:	3304      	adds	r3, #4
 8019ee0:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request;
 8019ee2:	697b      	ldr	r3, [r7, #20]
 8019ee4:	681b      	ldr	r3, [r3, #0]
 8019ee6:	3330      	adds	r3, #48	@ 0x30
 8019ee8:	613b      	str	r3, [r7, #16]

    /* Copy setup data to transfer request.  */
    _ux_utility_memory_copy(transfer_request->ux_slave_transfer_request_setup, hpcd -> Setup, UX_SETUP_SIZE);
 8019eea:	693b      	ldr	r3, [r7, #16]
 8019eec:	3354      	adds	r3, #84	@ 0x54
 8019eee:	0018      	movs	r0, r3
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	22a7      	movs	r2, #167	@ 0xa7
 8019ef4:	0092      	lsls	r2, r2, #2
 8019ef6:	4694      	mov	ip, r2
 8019ef8:	4463      	add	r3, ip
 8019efa:	2208      	movs	r2, #8
 8019efc:	0019      	movs	r1, r3
 8019efe:	f7fd fc15 	bl	801772c <_ux_utility_memory_copy>

    /* Clear the length of the data received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8019f02:	693b      	ldr	r3, [r7, #16]
 8019f04:	2200      	movs	r2, #0
 8019f06:	619a      	str	r2, [r3, #24]

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 8019f08:	693b      	ldr	r3, [r7, #16]
 8019f0a:	2201      	movs	r2, #1
 8019f0c:	605a      	str	r2, [r3, #4]

    /* Mark the transfer as successful.  */
    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 8019f0e:	693b      	ldr	r3, [r7, #16]
 8019f10:	2200      	movs	r2, #0
 8019f12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 8019f14:	697b      	ldr	r3, [r7, #20]
 8019f16:	685b      	ldr	r3, [r3, #4]
 8019f18:	220e      	movs	r2, #14
 8019f1a:	4393      	bics	r3, r2
 8019f1c:	001a      	movs	r2, r3
 8019f1e:	697b      	ldr	r3, [r7, #20]
 8019f20:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_TRANSFER |
                                      UX_DCD_STM32_ED_STATUS_DONE);

    /* Check if the transaction is IN.  */
    if (*transfer_request -> ux_slave_transfer_request_setup & UX_REQUEST_IN)
 8019f22:	693b      	ldr	r3, [r7, #16]
 8019f24:	2254      	movs	r2, #84	@ 0x54
 8019f26:	5c9b      	ldrb	r3, [r3, r2]
 8019f28:	b25b      	sxtb	r3, r3
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	da06      	bge.n	8019f3c <HAL_PCD_SetupStageCallback+0x74>
    {
#if defined(UX_DEVICE_STANDALONE)
        ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_IN;
#else
        _ux_dcd_stm32_setup_in(ed, transfer_request);
 8019f2e:	693a      	ldr	r2, [r7, #16]
 8019f30:	697b      	ldr	r3, [r7, #20]
 8019f32:	0011      	movs	r1, r2
 8019f34:	0018      	movs	r0, r3
 8019f36:	f7ff ff79 	bl	8019e2c <_ux_dcd_stm32_setup_in>
 8019f3a:	e043      	b.n	8019fc4 <HAL_PCD_SetupStageCallback+0xfc>
    else
    {

        /* The endpoint is OUT.  This is important to memorize the direction for the control endpoint
           in case of a STALL. */
        ed -> ux_dcd_stm32_ed_direction  = UX_ENDPOINT_OUT;
 8019f3c:	697b      	ldr	r3, [r7, #20]
 8019f3e:	2200      	movs	r2, #0
 8019f40:	729a      	strb	r2, [r3, #10]

        /* We are in a OUT transaction. Check if there is a data payload. If so, wait for the payload
           to be delivered.  */
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8019f42:	693b      	ldr	r3, [r7, #16]
 8019f44:	225a      	movs	r2, #90	@ 0x5a
 8019f46:	5c9b      	ldrb	r3, [r3, r2]
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d10b      	bne.n	8019f64 <HAL_PCD_SetupStageCallback+0x9c>
            *(transfer_request -> ux_slave_transfer_request_setup + 7) == 0)
 8019f4c:	693b      	ldr	r3, [r7, #16]
 8019f4e:	225b      	movs	r2, #91	@ 0x5b
 8019f50:	5c9b      	ldrb	r3, [r3, r2]
        if (*(transfer_request -> ux_slave_transfer_request_setup + 6) == 0 &&
 8019f52:	2b00      	cmp	r3, #0
 8019f54:	d106      	bne.n	8019f64 <HAL_PCD_SetupStageCallback+0x9c>
        {
#if defined(UX_DEVICE_STANDALONE)
            ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#else
            _ux_dcd_stm32_setup_status(ed, transfer_request, hpcd);
 8019f56:	687a      	ldr	r2, [r7, #4]
 8019f58:	6939      	ldr	r1, [r7, #16]
 8019f5a:	697b      	ldr	r3, [r7, #20]
 8019f5c:	0018      	movs	r0, r3
 8019f5e:	f7ff ff97 	bl	8019e90 <_ux_dcd_stm32_setup_status>
 8019f62:	e02f      	b.n	8019fc4 <HAL_PCD_SetupStageCallback+0xfc>
        }
        else
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 8019f64:	693b      	ldr	r3, [r7, #16]
 8019f66:	689b      	ldr	r3, [r3, #8]
 8019f68:	60fb      	str	r3, [r7, #12]

            /* Get the length we expect from the SETUP packet.  */
            transfer_request -> ux_slave_transfer_request_requested_length = _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + 6);
 8019f6a:	693b      	ldr	r3, [r7, #16]
 8019f6c:	3354      	adds	r3, #84	@ 0x54
 8019f6e:	3306      	adds	r3, #6
 8019f70:	0018      	movs	r0, r3
 8019f72:	f7fd fda8 	bl	8017ac6 <_ux_utility_short_get>
 8019f76:	0002      	movs	r2, r0
 8019f78:	693b      	ldr	r3, [r7, #16]
 8019f7a:	615a      	str	r2, [r3, #20]

            /* Check if we have enough space for the request.  */
            if (transfer_request -> ux_slave_transfer_request_requested_length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 8019f7c:	693b      	ldr	r3, [r7, #16]
 8019f7e:	695a      	ldr	r2, [r3, #20]
 8019f80:	2380      	movs	r3, #128	@ 0x80
 8019f82:	005b      	lsls	r3, r3, #1
 8019f84:	429a      	cmp	r2, r3
 8019f86:	d909      	bls.n	8019f9c <HAL_PCD_SetupStageCallback+0xd4>
            {

                /* No space available, stall the endpoint.  */
                _ux_dcd_stm32_endpoint_stall(dcd_stm32, endpoint);
 8019f88:	68fa      	ldr	r2, [r7, #12]
 8019f8a:	69bb      	ldr	r3, [r7, #24]
 8019f8c:	0011      	movs	r1, r2
 8019f8e:	0018      	movs	r0, r3
 8019f90:	f000 fa32 	bl	801a3f8 <_ux_dcd_stm32_endpoint_stall>

                /* Next phase is a SETUP.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 8019f94:	697b      	ldr	r3, [r7, #20]
 8019f96:	2200      	movs	r2, #0
 8019f98:	721a      	strb	r2, [r3, #8]
#if defined(UX_DEVICE_STANDALONE)
                ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_STATUS;
#endif

                /* We are done.  */
                return;
 8019f9a:	e013      	b.n	8019fc4 <HAL_PCD_SetupStageCallback+0xfc>
            }
            else
            {

                /* Reset what we have received so far.  */
                transfer_request -> ux_slave_transfer_request_actual_length =  0;
 8019f9c:	693b      	ldr	r3, [r7, #16]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	619a      	str	r2, [r3, #24]

                /* And reprogram the current buffer address to the beginning of the buffer.  */
                transfer_request -> ux_slave_transfer_request_current_data_pointer =  transfer_request -> ux_slave_transfer_request_data_pointer;
 8019fa2:	693b      	ldr	r3, [r7, #16]
 8019fa4:	68da      	ldr	r2, [r3, #12]
 8019fa6:	693b      	ldr	r3, [r7, #16]
 8019fa8:	611a      	str	r2, [r3, #16]

                /* Receive data.  */
                HAL_PCD_EP_Receive(hpcd,
                            endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Receive(hpcd,
 8019fae:	b2d9      	uxtb	r1, r3
                            transfer_request -> ux_slave_transfer_request_current_data_pointer,
 8019fb0:	693b      	ldr	r3, [r7, #16]
 8019fb2:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Receive(hpcd,
 8019fb4:	693b      	ldr	r3, [r7, #16]
 8019fb6:	695b      	ldr	r3, [r3, #20]
 8019fb8:	6878      	ldr	r0, [r7, #4]
 8019fba:	f7ef fcf7 	bl	80099ac <HAL_PCD_EP_Receive>
                            transfer_request -> ux_slave_transfer_request_requested_length);

                /* Set the state to RX.  */
                ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_DATA_RX;
 8019fbe:	697b      	ldr	r3, [r7, #20]
 8019fc0:	2202      	movs	r2, #2
 8019fc2:	721a      	strb	r2, [r3, #8]
            }
        }
    }
}
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	b008      	add	sp, #32
 8019fc8:	bd80      	pop	{r7, pc}
 8019fca:	46c0      	nop			@ (mov r8, r8)
 8019fcc:	200116a4 	.word	0x200116a4

08019fd0 <HAL_PCD_DataInStageCallback>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8019fd0:	b580      	push	{r7, lr}
 8019fd2:	b088      	sub	sp, #32
 8019fd4:	af00      	add	r7, sp, #0
 8019fd6:	6078      	str	r0, [r7, #4]
 8019fd8:	000a      	movs	r2, r1
 8019fda:	1cfb      	adds	r3, r7, #3
 8019fdc:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 8019fde:	4b46      	ldr	r3, [pc, #280]	@ (801a0f8 <HAL_PCD_DataInStageCallback+0x128>)
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 8019fe4:	69bb      	ldr	r3, [r7, #24]
 8019fe6:	69db      	ldr	r3, [r3, #28]
 8019fe8:	617b      	str	r3, [r7, #20]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if ((epnum & 0xF) != 0)
        ed =  &dcd_stm32 -> ux_dcd_stm32_ed_in[epnum & 0xF];
    else
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    ed =  &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 8019fea:	1cfb      	adds	r3, r7, #3
 8019fec:	781b      	ldrb	r3, [r3, #0]
 8019fee:	220f      	movs	r2, #15
 8019ff0:	401a      	ands	r2, r3
 8019ff2:	0013      	movs	r3, r2
 8019ff4:	005b      	lsls	r3, r3, #1
 8019ff6:	189b      	adds	r3, r3, r2
 8019ff8:	009b      	lsls	r3, r3, #2
 8019ffa:	697a      	ldr	r2, [r7, #20]
 8019ffc:	18d3      	adds	r3, r2, r3
 8019ffe:	3304      	adds	r3, #4
 801a000:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the transfer request.  */
    transfer_request =  &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	3330      	adds	r3, #48	@ 0x30
 801a008:	60fb      	str	r3, [r7, #12]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801a00a:	1cfb      	adds	r3, r7, #3
 801a00c:	781b      	ldrb	r3, [r3, #0]
 801a00e:	2b00      	cmp	r3, #0
 801a010:	d15e      	bne.n	801a0d0 <HAL_PCD_DataInStageCallback+0x100>
    {

        /* Get the pointer to the logical endpoint from the transfer request.  */
        endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801a012:	68fb      	ldr	r3, [r7, #12]
 801a014:	689b      	ldr	r3, [r3, #8]
 801a016:	60bb      	str	r3, [r7, #8]

        /* Check if we need to send data again on control endpoint. */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_TX)
 801a018:	693b      	ldr	r3, [r7, #16]
 801a01a:	7a1b      	ldrb	r3, [r3, #8]
 801a01c:	2b01      	cmp	r3, #1
 801a01e:	d166      	bne.n	801a0ee <HAL_PCD_DataInStageCallback+0x11e>
        {

            /* Arm Status transfer.  */
            HAL_PCD_EP_Receive(hpcd, 0, 0, 0);
 801a020:	6878      	ldr	r0, [r7, #4]
 801a022:	2300      	movs	r3, #0
 801a024:	2200      	movs	r2, #0
 801a026:	2100      	movs	r1, #0
 801a028:	f7ef fcc0 	bl	80099ac <HAL_PCD_EP_Receive>

            /* Are we done with this transfer ? */
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 801a02c:	68fb      	ldr	r3, [r7, #12]
 801a02e:	69da      	ldr	r2, [r3, #28]
                endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 801a030:	68bb      	ldr	r3, [r7, #8]
 801a032:	69db      	ldr	r3, [r3, #28]
            if (transfer_request -> ux_slave_transfer_request_in_transfer_length <=
 801a034:	429a      	cmp	r2, r3
 801a036:	d826      	bhi.n	801a086 <HAL_PCD_DataInStageCallback+0xb6>
            {

                /* There is no data to send but we may need to send a Zero Length Packet.  */
                if (transfer_request -> ux_slave_transfer_request_force_zlp ==  UX_TRUE)
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a03c:	2b01      	cmp	r3, #1
 801a03e:	d10b      	bne.n	801a058 <HAL_PCD_DataInStageCallback+0x88>
                {

                    /* Arm a ZLP packet on IN.  */
                    HAL_PCD_EP_Transmit(hpcd,
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress, 0, 0);
 801a040:	68bb      	ldr	r3, [r7, #8]
 801a042:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Transmit(hpcd,
 801a044:	b2d9      	uxtb	r1, r3
 801a046:	6878      	ldr	r0, [r7, #4]
 801a048:	2300      	movs	r3, #0
 801a04a:	2200      	movs	r2, #0
 801a04c:	f7ef fcff 	bl	8009a4e <HAL_PCD_EP_Transmit>

                    /* Reset the ZLP condition.  */
                    transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 801a050:	68fb      	ldr	r3, [r7, #12]
 801a052:	2200      	movs	r2, #0
 801a054:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif /* defined(UX_DEVICE_STANDALONE) */
    }
}
 801a056:	e04a      	b.n	801a0ee <HAL_PCD_DataInStageCallback+0x11e>
                    transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801a058:	68fb      	ldr	r3, [r7, #12]
 801a05a:	2200      	movs	r2, #0
 801a05c:	625a      	str	r2, [r3, #36]	@ 0x24
                    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	2202      	movs	r2, #2
 801a062:	601a      	str	r2, [r3, #0]
                        transfer_request -> ux_slave_transfer_request_requested_length;
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	695a      	ldr	r2, [r3, #20]
                    transfer_request -> ux_slave_transfer_request_actual_length =
 801a068:	68fb      	ldr	r3, [r7, #12]
 801a06a:	619a      	str	r2, [r3, #24]
                    if (transfer_request -> ux_slave_transfer_request_completion_function)
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a070:	2b00      	cmp	r3, #0
 801a072:	d004      	beq.n	801a07e <HAL_PCD_DataInStageCallback+0xae>
                        transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 801a074:	68fb      	ldr	r3, [r7, #12]
 801a076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a078:	68fa      	ldr	r2, [r7, #12]
 801a07a:	0010      	movs	r0, r2
 801a07c:	4798      	blx	r3
                    ed -> ux_dcd_stm32_ed_state = UX_DCD_STM32_ED_STATE_STATUS_RX;
 801a07e:	693b      	ldr	r3, [r7, #16]
 801a080:	2204      	movs	r2, #4
 801a082:	721a      	strb	r2, [r3, #8]
}
 801a084:	e033      	b.n	801a0ee <HAL_PCD_DataInStageCallback+0x11e>
                transfer_length = transfer_request -> ux_slave_transfer_request_in_transfer_length - endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	69da      	ldr	r2, [r3, #28]
 801a08a:	68bb      	ldr	r3, [r7, #8]
 801a08c:	69db      	ldr	r3, [r3, #28]
 801a08e:	1ad3      	subs	r3, r2, r3
 801a090:	61fb      	str	r3, [r7, #28]
                if (transfer_length > endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize)
 801a092:	68bb      	ldr	r3, [r7, #8]
 801a094:	69db      	ldr	r3, [r3, #28]
 801a096:	69fa      	ldr	r2, [r7, #28]
 801a098:	429a      	cmp	r2, r3
 801a09a:	d902      	bls.n	801a0a2 <HAL_PCD_DataInStageCallback+0xd2>
                    transfer_length =  endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801a09c:	68bb      	ldr	r3, [r7, #8]
 801a09e:	69db      	ldr	r3, [r3, #28]
 801a0a0:	61fb      	str	r3, [r7, #28]
                transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801a0a2:	68fb      	ldr	r3, [r7, #12]
 801a0a4:	691a      	ldr	r2, [r3, #16]
 801a0a6:	68bb      	ldr	r3, [r7, #8]
 801a0a8:	69db      	ldr	r3, [r3, #28]
 801a0aa:	18d2      	adds	r2, r2, r3
 801a0ac:	68fb      	ldr	r3, [r7, #12]
 801a0ae:	611a      	str	r2, [r3, #16]
                transfer_request -> ux_slave_transfer_request_in_transfer_length -= transfer_length;
 801a0b0:	68fb      	ldr	r3, [r7, #12]
 801a0b2:	69da      	ldr	r2, [r3, #28]
 801a0b4:	69fb      	ldr	r3, [r7, #28]
 801a0b6:	1ad2      	subs	r2, r2, r3
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	61da      	str	r2, [r3, #28]
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 801a0bc:	68bb      	ldr	r3, [r7, #8]
 801a0be:	695b      	ldr	r3, [r3, #20]
                HAL_PCD_EP_Transmit(hpcd,
 801a0c0:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_current_data_pointer,
 801a0c2:	68fb      	ldr	r3, [r7, #12]
 801a0c4:	691a      	ldr	r2, [r3, #16]
                HAL_PCD_EP_Transmit(hpcd,
 801a0c6:	69fb      	ldr	r3, [r7, #28]
 801a0c8:	6878      	ldr	r0, [r7, #4]
 801a0ca:	f7ef fcc0 	bl	8009a4e <HAL_PCD_EP_Transmit>
}
 801a0ce:	e00e      	b.n	801a0ee <HAL_PCD_DataInStageCallback+0x11e>
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	2200      	movs	r2, #0
 801a0d4:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801a0d6:	68fb      	ldr	r3, [r7, #12]
 801a0d8:	2202      	movs	r2, #2
 801a0da:	601a      	str	r2, [r3, #0]
            transfer_request -> ux_slave_transfer_request_requested_length;
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	695a      	ldr	r2, [r3, #20]
        transfer_request -> ux_slave_transfer_request_actual_length =
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	619a      	str	r2, [r3, #24]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	3330      	adds	r3, #48	@ 0x30
 801a0e8:	0018      	movs	r0, r3
 801a0ea:	f7fd fcdd 	bl	8017aa8 <_ux_utility_semaphore_put>
}
 801a0ee:	46c0      	nop			@ (mov r8, r8)
 801a0f0:	46bd      	mov	sp, r7
 801a0f2:	b008      	add	sp, #32
 801a0f4:	bd80      	pop	{r7, pc}
 801a0f6:	46c0      	nop			@ (mov r8, r8)
 801a0f8:	200116a4 	.word	0x200116a4

0801a0fc <HAL_PCD_DataOutStageCallback>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 801a0fc:	b580      	push	{r7, lr}
 801a0fe:	b088      	sub	sp, #32
 801a100:	af00      	add	r7, sp, #0
 801a102:	6078      	str	r0, [r7, #4]
 801a104:	000a      	movs	r2, r1
 801a106:	1cfb      	adds	r3, r7, #3
 801a108:	701a      	strb	r2, [r3, #0]
ULONG                   transfer_length;
UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the DCD.  */
    dcd = &_ux_system_slave -> ux_system_slave_dcd;
 801a10a:	4b40      	ldr	r3, [pc, #256]	@ (801a20c <HAL_PCD_DataOutStageCallback+0x110>)
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801a110:	69fb      	ldr	r3, [r7, #28]
 801a112:	69db      	ldr	r3, [r3, #28]
 801a114:	61bb      	str	r3, [r7, #24]

    /* Fetch the address of the physical endpoint.  */
    ed = &dcd_stm32 -> ux_dcd_stm32_ed[epnum & 0xF];
 801a116:	1cfb      	adds	r3, r7, #3
 801a118:	781b      	ldrb	r3, [r3, #0]
 801a11a:	220f      	movs	r2, #15
 801a11c:	401a      	ands	r2, r3
 801a11e:	0013      	movs	r3, r2
 801a120:	005b      	lsls	r3, r3, #1
 801a122:	189b      	adds	r3, r3, r2
 801a124:	009b      	lsls	r3, r3, #2
 801a126:	69ba      	ldr	r2, [r7, #24]
 801a128:	18d3      	adds	r3, r2, r3
 801a12a:	3304      	adds	r3, #4
 801a12c:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the transfer request.  */
    transfer_request = &(ed -> ux_dcd_stm32_ed_endpoint -> ux_slave_endpoint_transfer_request);
 801a12e:	697b      	ldr	r3, [r7, #20]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	3330      	adds	r3, #48	@ 0x30
 801a134:	613b      	str	r3, [r7, #16]

    /* Endpoint 0 is different.  */
    if (epnum == 0U)
 801a136:	1cfb      	adds	r3, r7, #3
 801a138:	781b      	ldrb	r3, [r3, #0]
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d14c      	bne.n	801a1d8 <HAL_PCD_DataOutStageCallback+0xdc>
    {

        /* Check if we have received something on endpoint 0 during data phase .  */
        if (ed -> ux_dcd_stm32_ed_state == UX_DCD_STM32_ED_STATE_DATA_RX)
 801a13e:	697b      	ldr	r3, [r7, #20]
 801a140:	7a1b      	ldrb	r3, [r3, #8]
 801a142:	2b02      	cmp	r3, #2
 801a144:	d15d      	bne.n	801a202 <HAL_PCD_DataOutStageCallback+0x106>
        {

            /* Get the pointer to the logical endpoint from the transfer request.  */
            endpoint = transfer_request -> ux_slave_transfer_request_endpoint;
 801a146:	693b      	ldr	r3, [r7, #16]
 801a148:	689b      	ldr	r3, [r3, #8]
 801a14a:	60fb      	str	r3, [r7, #12]

            /* Read the received data length for the Control endpoint.  */
            transfer_length = HAL_PCD_EP_GetRxCount(hpcd, epnum);
 801a14c:	1cfb      	adds	r3, r7, #3
 801a14e:	781a      	ldrb	r2, [r3, #0]
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	0011      	movs	r1, r2
 801a154:	0018      	movs	r0, r3
 801a156:	f7ef fc61 	bl	8009a1c <HAL_PCD_EP_GetRxCount>
 801a15a:	0003      	movs	r3, r0
 801a15c:	60bb      	str	r3, [r7, #8]

            /* Update the length of the data received.  */
            transfer_request -> ux_slave_transfer_request_actual_length += transfer_length;
 801a15e:	693b      	ldr	r3, [r7, #16]
 801a160:	699a      	ldr	r2, [r3, #24]
 801a162:	68bb      	ldr	r3, [r7, #8]
 801a164:	18d2      	adds	r2, r2, r3
 801a166:	693b      	ldr	r3, [r7, #16]
 801a168:	619a      	str	r2, [r3, #24]

            /* Can we accept this much?  */
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 801a16a:	693b      	ldr	r3, [r7, #16]
 801a16c:	699a      	ldr	r2, [r3, #24]
                transfer_request -> ux_slave_transfer_request_requested_length)
 801a16e:	693b      	ldr	r3, [r7, #16]
 801a170:	695b      	ldr	r3, [r3, #20]
            if (transfer_request -> ux_slave_transfer_request_actual_length <=
 801a172:	429a      	cmp	r2, r3
 801a174:	d823      	bhi.n	801a1be <HAL_PCD_DataOutStageCallback+0xc2>
            {

                /* Are we done with this transfer ? */
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 801a176:	693b      	ldr	r3, [r7, #16]
 801a178:	699a      	ldr	r2, [r3, #24]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 801a17a:	693b      	ldr	r3, [r7, #16]
 801a17c:	695b      	ldr	r3, [r3, #20]
                if ((transfer_request -> ux_slave_transfer_request_actual_length ==
 801a17e:	429a      	cmp	r2, r3
 801a180:	d004      	beq.n	801a18c <HAL_PCD_DataOutStageCallback+0x90>
                    (transfer_length != endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize))
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	69db      	ldr	r3, [r3, #28]
                     transfer_request -> ux_slave_transfer_request_requested_length) ||
 801a186:	68ba      	ldr	r2, [r7, #8]
 801a188:	429a      	cmp	r2, r3
 801a18a:	d006      	beq.n	801a19a <HAL_PCD_DataOutStageCallback+0x9e>
                {
#if defined(UX_DEVICE_STANDALONE)
                    ed -> ux_dcd_stm32_ed_status |= UX_DCD_STM32_ED_STATUS_SETUP_OUT;
#else
                    _ux_dcd_stm32_setup_out(ed, transfer_request, hpcd);
 801a18c:	687a      	ldr	r2, [r7, #4]
 801a18e:	6939      	ldr	r1, [r7, #16]
 801a190:	697b      	ldr	r3, [r7, #20]
 801a192:	0018      	movs	r0, r3
 801a194:	f7ff fe5d 	bl	8019e52 <_ux_dcd_stm32_setup_out>
        /* Non control endpoint operation, use semaphore.  */
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
#endif
    }

}
 801a198:	e033      	b.n	801a202 <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_current_data_pointer += endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize;
 801a19a:	693b      	ldr	r3, [r7, #16]
 801a19c:	691a      	ldr	r2, [r3, #16]
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	69db      	ldr	r3, [r3, #28]
 801a1a2:	18d2      	adds	r2, r2, r3
 801a1a4:	693b      	ldr	r3, [r7, #16]
 801a1a6:	611a      	str	r2, [r3, #16]
                                endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801a1a8:	68fb      	ldr	r3, [r7, #12]
 801a1aa:	695b      	ldr	r3, [r3, #20]
                    HAL_PCD_EP_Receive(hpcd,
 801a1ac:	b2d9      	uxtb	r1, r3
                                transfer_request -> ux_slave_transfer_request_current_data_pointer,
 801a1ae:	693b      	ldr	r3, [r7, #16]
 801a1b0:	691a      	ldr	r2, [r3, #16]
                    HAL_PCD_EP_Receive(hpcd,
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	69db      	ldr	r3, [r3, #28]
 801a1b6:	6878      	ldr	r0, [r7, #4]
 801a1b8:	f7ef fbf8 	bl	80099ac <HAL_PCD_EP_Receive>
}
 801a1bc:	e021      	b.n	801a202 <HAL_PCD_DataOutStageCallback+0x106>
                transfer_request -> ux_slave_transfer_request_completion_code =  UX_TRANSFER_BUFFER_OVERFLOW;
 801a1be:	693b      	ldr	r3, [r7, #16]
 801a1c0:	2227      	movs	r2, #39	@ 0x27
 801a1c2:	625a      	str	r2, [r3, #36]	@ 0x24
                if (transfer_request -> ux_slave_transfer_request_completion_function)
 801a1c4:	693b      	ldr	r3, [r7, #16]
 801a1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d01a      	beq.n	801a202 <HAL_PCD_DataOutStageCallback+0x106>
                    transfer_request -> ux_slave_transfer_request_completion_function (transfer_request) ;
 801a1cc:	693b      	ldr	r3, [r7, #16]
 801a1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a1d0:	693a      	ldr	r2, [r7, #16]
 801a1d2:	0010      	movs	r0, r2
 801a1d4:	4798      	blx	r3
}
 801a1d6:	e014      	b.n	801a202 <HAL_PCD_DataOutStageCallback+0x106>
        transfer_request -> ux_slave_transfer_request_actual_length =  HAL_PCD_EP_GetRxCount(hpcd, epnum);
 801a1d8:	1cfb      	adds	r3, r7, #3
 801a1da:	781a      	ldrb	r2, [r3, #0]
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	0011      	movs	r1, r2
 801a1e0:	0018      	movs	r0, r3
 801a1e2:	f7ef fc1b 	bl	8009a1c <HAL_PCD_EP_GetRxCount>
 801a1e6:	0002      	movs	r2, r0
 801a1e8:	693b      	ldr	r3, [r7, #16]
 801a1ea:	619a      	str	r2, [r3, #24]
        transfer_request -> ux_slave_transfer_request_completion_code =  UX_SUCCESS;
 801a1ec:	693b      	ldr	r3, [r7, #16]
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	625a      	str	r2, [r3, #36]	@ 0x24
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_COMPLETED;
 801a1f2:	693b      	ldr	r3, [r7, #16]
 801a1f4:	2202      	movs	r2, #2
 801a1f6:	601a      	str	r2, [r3, #0]
        _ux_utility_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801a1f8:	693b      	ldr	r3, [r7, #16]
 801a1fa:	3330      	adds	r3, #48	@ 0x30
 801a1fc:	0018      	movs	r0, r3
 801a1fe:	f7fd fc53 	bl	8017aa8 <_ux_utility_semaphore_put>
}
 801a202:	46c0      	nop			@ (mov r8, r8)
 801a204:	46bd      	mov	sp, r7
 801a206:	b008      	add	sp, #32
 801a208:	bd80      	pop	{r7, pc}
 801a20a:	46c0      	nop			@ (mov r8, r8)
 801a20c:	200116a4 	.word	0x200116a4

0801a210 <HAL_PCD_ResetCallback>:
/*  01-31-2022     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b082      	sub	sp, #8
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]

    /* If the device is attached or configured, we need to disconnect it.  */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state !=  UX_DEVICE_RESET)
 801a218:	4b11      	ldr	r3, [pc, #68]	@ (801a260 <HAL_PCD_ResetCallback+0x50>)
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	6a1b      	ldr	r3, [r3, #32]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d001      	beq.n	801a226 <HAL_PCD_ResetCallback+0x16>
    {

        /* Disconnect the device.  */
        _ux_device_stack_disconnect();
 801a222:	f001 fcfb 	bl	801bc1c <_ux_device_stack_disconnect>
    }

    /* Set USB Current Speed */
    switch(hpcd -> Init.speed)
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	79db      	ldrb	r3, [r3, #7]
 801a22a:	2b02      	cmp	r3, #2
 801a22c:	d106      	bne.n	801a23c <HAL_PCD_ResetCallback+0x2c>
        break;
#endif
    case PCD_SPEED_FULL:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801a22e:	4b0c      	ldr	r3, [pc, #48]	@ (801a260 <HAL_PCD_ResetCallback+0x50>)
 801a230:	681a      	ldr	r2, [r3, #0]
 801a232:	23d0      	movs	r3, #208	@ 0xd0
 801a234:	005b      	lsls	r3, r3, #1
 801a236:	2101      	movs	r1, #1
 801a238:	50d1      	str	r1, [r2, r3]
        break;
 801a23a:	e006      	b.n	801a24a <HAL_PCD_ResetCallback+0x3a>

    default:

        /* We are connected at full speed.  */
        _ux_system_slave -> ux_system_slave_speed =  UX_FULL_SPEED_DEVICE;
 801a23c:	4b08      	ldr	r3, [pc, #32]	@ (801a260 <HAL_PCD_ResetCallback+0x50>)
 801a23e:	681a      	ldr	r2, [r3, #0]
 801a240:	23d0      	movs	r3, #208	@ 0xd0
 801a242:	005b      	lsls	r3, r3, #1
 801a244:	2101      	movs	r1, #1
 801a246:	50d1      	str	r1, [r2, r3]
        break;
 801a248:	46c0      	nop			@ (mov r8, r8)
    }

    /* Complete the device initialization.  */
    _ux_dcd_stm32_initialize_complete();
 801a24a:	f000 f9fd 	bl	801a648 <_ux_dcd_stm32_initialize_complete>

    /* Mark the device as attached now.  */
    _ux_system_slave -> ux_system_slave_device.ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801a24e:	4b04      	ldr	r3, [pc, #16]	@ (801a260 <HAL_PCD_ResetCallback+0x50>)
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	2201      	movs	r2, #1
 801a254:	621a      	str	r2, [r3, #32]
}
 801a256:	46c0      	nop			@ (mov r8, r8)
 801a258:	46bd      	mov	sp, r7
 801a25a:	b002      	add	sp, #8
 801a25c:	bd80      	pop	{r7, pc}
 801a25e:	46c0      	nop			@ (mov r8, r8)
 801a260:	200116a4 	.word	0x200116a4

0801a264 <_stm32_ed_get>:
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
    PCD_HandleTypeDef   *pcd_handle;
} UX_DCD_STM32;

static inline struct UX_DCD_STM32_ED_STRUCT *_stm32_ed_get(UX_DCD_STM32 *dcd_stm32, ULONG ep_addr)
{
 801a264:	b580      	push	{r7, lr}
 801a266:	b084      	sub	sp, #16
 801a268:	af00      	add	r7, sp, #0
 801a26a:	6078      	str	r0, [r7, #4]
 801a26c:	6039      	str	r1, [r7, #0]
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
ULONG ep_dir = ep_addr & 0x80u;
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */
ULONG ep_num = ep_addr & 0x7Fu;
 801a26e:	683b      	ldr	r3, [r7, #0]
 801a270:	227f      	movs	r2, #127	@ 0x7f
 801a272:	4013      	ands	r3, r2
 801a274:	60fb      	str	r3, [r7, #12]

    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	2b07      	cmp	r3, #7
 801a27a:	d806      	bhi.n	801a28a <_stm32_ed_get+0x26>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a280:	791b      	ldrb	r3, [r3, #4]
 801a282:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801a284:	68fb      	ldr	r3, [r7, #12]
 801a286:	4293      	cmp	r3, r2
 801a288:	d301      	bcc.n	801a28e <_stm32_ed_get+0x2a>
        return(UX_NULL);
 801a28a:	2300      	movs	r3, #0
 801a28c:	e007      	b.n	801a29e <_stm32_ed_get+0x3a>
#if defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT)
    if (ep_dir)
        return(&dcd_stm32->ux_dcd_stm32_ed_in[ep_num]);
#endif /* defined(UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT) */

    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 801a28e:	68fa      	ldr	r2, [r7, #12]
 801a290:	0013      	movs	r3, r2
 801a292:	005b      	lsls	r3, r3, #1
 801a294:	189b      	adds	r3, r3, r2
 801a296:	009b      	lsls	r3, r3, #2
 801a298:	687a      	ldr	r2, [r7, #4]
 801a29a:	18d3      	adds	r3, r2, r3
 801a29c:	3304      	adds	r3, #4
}
 801a29e:	0018      	movs	r0, r3
 801a2a0:	46bd      	mov	sp, r7
 801a2a2:	b004      	add	sp, #16
 801a2a4:	bd80      	pop	{r7, pc}

0801a2a6 <_ux_dcd_stm32_endpoint_create>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_create(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801a2a6:	b590      	push	{r4, r7, lr}
 801a2a8:	b085      	sub	sp, #20
 801a2aa:	af00      	add	r7, sp, #0
 801a2ac:	6078      	str	r0, [r7, #4]
 801a2ae:	6039      	str	r1, [r7, #0]
UX_DCD_STM32_ED     *ed;
ULONG               stm32_endpoint_index;


    /* The endpoint index in the array of the STM32 must match the endpoint number.  */
    stm32_endpoint_index =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & ~UX_ENDPOINT_DIRECTION;
 801a2b0:	683b      	ldr	r3, [r7, #0]
 801a2b2:	695b      	ldr	r3, [r3, #20]
 801a2b4:	2280      	movs	r2, #128	@ 0x80
 801a2b6:	4393      	bics	r3, r2
 801a2b8:	60fb      	str	r3, [r7, #12]

    /* Get STM32 ED.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	695a      	ldr	r2, [r3, #20]
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	0011      	movs	r1, r2
 801a2c2:	0018      	movs	r0, r3
 801a2c4:	f7ff ffce 	bl	801a264 <_stm32_ed_get>
 801a2c8:	0003      	movs	r3, r0
 801a2ca:	60bb      	str	r3, [r7, #8]

    if (ed == UX_NULL)
 801a2cc:	68bb      	ldr	r3, [r7, #8]
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d101      	bne.n	801a2d6 <_ux_dcd_stm32_endpoint_create+0x30>
        return(UX_NO_ED_AVAILABLE);
 801a2d2:	2314      	movs	r3, #20
 801a2d4:	e032      	b.n	801a33c <_ux_dcd_stm32_endpoint_create+0x96>

    /* Check the endpoint status, if it is free, reserve it. If not reject this endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801a2d6:	68bb      	ldr	r3, [r7, #8]
 801a2d8:	685b      	ldr	r3, [r3, #4]
 801a2da:	2201      	movs	r2, #1
 801a2dc:	4013      	ands	r3, r2
 801a2de:	d12c      	bne.n	801a33a <_ux_dcd_stm32_endpoint_create+0x94>
    {

        /* We can use this endpoint.  */
        ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_USED;
 801a2e0:	68bb      	ldr	r3, [r7, #8]
 801a2e2:	685b      	ldr	r3, [r3, #4]
 801a2e4:	2201      	movs	r2, #1
 801a2e6:	431a      	orrs	r2, r3
 801a2e8:	68bb      	ldr	r3, [r7, #8]
 801a2ea:	605a      	str	r2, [r3, #4]

        /* Keep the physical endpoint address in the endpoint container.  */
        endpoint -> ux_slave_endpoint_ed =  (VOID *) ed;
 801a2ec:	683b      	ldr	r3, [r7, #0]
 801a2ee:	68ba      	ldr	r2, [r7, #8]
 801a2f0:	609a      	str	r2, [r3, #8]

        /* Save the endpoint pointer.  */
        ed -> ux_dcd_stm32_ed_endpoint =  endpoint;
 801a2f2:	68bb      	ldr	r3, [r7, #8]
 801a2f4:	683a      	ldr	r2, [r7, #0]
 801a2f6:	601a      	str	r2, [r3, #0]

        /* And its index.  */
        ed -> ux_dcd_stm32_ed_index =  stm32_endpoint_index;
 801a2f8:	68fb      	ldr	r3, [r7, #12]
 801a2fa:	b2da      	uxtb	r2, r3
 801a2fc:	68bb      	ldr	r3, [r7, #8]
 801a2fe:	725a      	strb	r2, [r3, #9]

        /* And its direction.  */
        ed -> ux_dcd_stm32_ed_direction =  endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION;
 801a300:	683b      	ldr	r3, [r7, #0]
 801a302:	695b      	ldr	r3, [r3, #20]
 801a304:	b2db      	uxtb	r3, r3
 801a306:	227f      	movs	r2, #127	@ 0x7f
 801a308:	4393      	bics	r3, r2
 801a30a:	b2da      	uxtb	r2, r3
 801a30c:	68bb      	ldr	r3, [r7, #8]
 801a30e:	729a      	strb	r2, [r3, #10]

        /* Check if it is non-control endpoint.  */
        if (stm32_endpoint_index != 0)
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	2b00      	cmp	r3, #0
 801a314:	d00f      	beq.n	801a336 <_ux_dcd_stm32_endpoint_create+0x90>
        {

            /* Open the endpoint.  */
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801a31a:	683b      	ldr	r3, [r7, #0]
 801a31c:	695b      	ldr	r3, [r3, #20]
 801a31e:	b2d9      	uxtb	r1, r3
                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize,
 801a320:	683b      	ldr	r3, [r7, #0]
 801a322:	69db      	ldr	r3, [r3, #28]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801a324:	b29a      	uxth	r2, r3
                            endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE);
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	699b      	ldr	r3, [r3, #24]
            HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress,
 801a32a:	b2db      	uxtb	r3, r3
 801a32c:	2403      	movs	r4, #3
 801a32e:	4023      	ands	r3, r4
 801a330:	b2db      	uxtb	r3, r3
 801a332:	f7ef fa77 	bl	8009824 <HAL_PCD_EP_Open>
        }

        /* Return successful completion.  */
        return(UX_SUCCESS);
 801a336:	2300      	movs	r3, #0
 801a338:	e000      	b.n	801a33c <_ux_dcd_stm32_endpoint_create+0x96>
    }

    /* Return an error.  */
    return(UX_NO_ED_AVAILABLE);
 801a33a:	2314      	movs	r3, #20
}
 801a33c:	0018      	movs	r0, r3
 801a33e:	46bd      	mov	sp, r7
 801a340:	b005      	add	sp, #20
 801a342:	bd90      	pop	{r4, r7, pc}

0801a344 <_ux_dcd_stm32_endpoint_destroy>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_destroy(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b084      	sub	sp, #16
 801a348:	af00      	add	r7, sp, #0
 801a34a:	6078      	str	r0, [r7, #4]
 801a34c:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Keep the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801a34e:	683b      	ldr	r3, [r7, #0]
 801a350:	689b      	ldr	r3, [r3, #8]
 801a352:	60fb      	str	r3, [r7, #12]

    /* We can free this endpoint.  */
    ed -> ux_dcd_stm32_ed_status =  UX_DCD_STM32_ED_STATUS_UNUSED;
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	2200      	movs	r2, #0
 801a358:	605a      	str	r2, [r3, #4]

    /* Deactivate the endpoint.  */
    HAL_PCD_EP_Close(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801a35e:	683b      	ldr	r3, [r7, #0]
 801a360:	695b      	ldr	r3, [r3, #20]
 801a362:	b2db      	uxtb	r3, r3
 801a364:	0019      	movs	r1, r3
 801a366:	0010      	movs	r0, r2
 801a368:	f7ef facd 	bl	8009906 <HAL_PCD_EP_Close>

    /* This function never fails.  */
    return(UX_SUCCESS);
 801a36c:	2300      	movs	r3, #0
}
 801a36e:	0018      	movs	r0, r3
 801a370:	46bd      	mov	sp, r7
 801a372:	b004      	add	sp, #16
 801a374:	bd80      	pop	{r7, pc}
	...

0801a378 <_ux_dcd_stm32_endpoint_reset>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_reset(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	b086      	sub	sp, #24
 801a37c:	af00      	add	r7, sp, #0
 801a37e:	6078      	str	r0, [r7, #4]
 801a380:	6039      	str	r1, [r7, #0]
UX_INTERRUPT_SAVE_AREA
UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801a382:	683b      	ldr	r3, [r7, #0]
 801a384:	689b      	ldr	r3, [r3, #8]
 801a386:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801a388:	f3ef 8310 	mrs	r3, PRIMASK
 801a38c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801a38e:	b672      	cpsid	i
    return(primask_value);
 801a390:	68fb      	ldr	r3, [r7, #12]

    UX_DISABLE
 801a392:	613b      	str	r3, [r7, #16]

    /* Set the status of the endpoint to not stalled.  */
    ed -> ux_dcd_stm32_ed_status &= ~(UX_DCD_STM32_ED_STATUS_STALLED |
 801a394:	697b      	ldr	r3, [r7, #20]
 801a396:	685b      	ldr	r3, [r3, #4]
 801a398:	4a16      	ldr	r2, [pc, #88]	@ (801a3f4 <_ux_dcd_stm32_endpoint_reset+0x7c>)
 801a39a:	401a      	ands	r2, r3
 801a39c:	697b      	ldr	r3, [r7, #20]
 801a39e:	605a      	str	r2, [r3, #4]
                                      UX_DCD_STM32_ED_STATUS_DONE |
                                      UX_DCD_STM32_ED_STATUS_SETUP);

    /* Set the state of the endpoint to IDLE.  */
    ed -> ux_dcd_stm32_ed_state =  UX_DCD_STM32_ED_STATE_IDLE;
 801a3a0:	697b      	ldr	r3, [r7, #20]
 801a3a2:	2200      	movs	r2, #0
 801a3a4:	721a      	strb	r2, [r3, #8]

    /* Clear STALL condition.  */
    HAL_PCD_EP_ClrStall(dcd_stm32 -> pcd_handle, endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress);
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801a3aa:	683b      	ldr	r3, [r7, #0]
 801a3ac:	695b      	ldr	r3, [r3, #20]
 801a3ae:	b2db      	uxtb	r3, r3
 801a3b0:	0019      	movs	r1, r3
 801a3b2:	0010      	movs	r0, r2
 801a3b4:	f7ef fbe6 	bl	8009b84 <HAL_PCD_EP_ClrStall>

    /* Flush buffer.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801a3bc:	683b      	ldr	r3, [r7, #0]
 801a3be:	695b      	ldr	r3, [r3, #20]
 801a3c0:	b2db      	uxtb	r3, r3
 801a3c2:	0019      	movs	r1, r3
 801a3c4:	0010      	movs	r0, r2
 801a3c6:	f7ef fc76 	bl	8009cb6 <HAL_PCD_EP_Flush>

#ifndef UX_DEVICE_STANDALONE

    /* Wakeup pending thread.  */
    if (endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore.tx_semaphore_suspended_count)
 801a3ca:	683b      	ldr	r3, [r7, #0]
 801a3cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d004      	beq.n	801a3dc <_ux_dcd_stm32_endpoint_reset+0x64>
        _ux_utility_semaphore_put(&endpoint -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801a3d2:	683b      	ldr	r3, [r7, #0]
 801a3d4:	3360      	adds	r3, #96	@ 0x60
 801a3d6:	0018      	movs	r0, r3
 801a3d8:	f7fd fb66 	bl	8017aa8 <_ux_utility_semaphore_put>
 801a3dc:	693b      	ldr	r3, [r7, #16]
 801a3de:	60bb      	str	r3, [r7, #8]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801a3e0:	68bb      	ldr	r3, [r7, #8]
 801a3e2:	f383 8810 	msr	PRIMASK, r3
}
 801a3e6:	46c0      	nop			@ (mov r8, r8)
#endif

    UX_RESTORE

    /* This function never fails.  */
    return(UX_SUCCESS);
 801a3e8:	2300      	movs	r3, #0
}
 801a3ea:	0018      	movs	r0, r3
 801a3ec:	46bd      	mov	sp, r7
 801a3ee:	b006      	add	sp, #24
 801a3f0:	bd80      	pop	{r7, pc}
 801a3f2:	46c0      	nop			@ (mov r8, r8)
 801a3f4:	fffffcf3 	.word	0xfffffcf3

0801a3f8 <_ux_dcd_stm32_endpoint_stall>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_stall(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_ENDPOINT *endpoint)
{
 801a3f8:	b580      	push	{r7, lr}
 801a3fa:	b084      	sub	sp, #16
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
 801a400:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED     *ed;


    /* Get the physical endpoint address in the endpoint container.  */
    ed =  (UX_DCD_STM32_ED *) endpoint -> ux_slave_endpoint_ed;
 801a402:	683b      	ldr	r3, [r7, #0]
 801a404:	689b      	ldr	r3, [r3, #8]
 801a406:	60fb      	str	r3, [r7, #12]

    /* Set the endpoint to stall.  */
    ed -> ux_dcd_stm32_ed_status |=  UX_DCD_STM32_ED_STATUS_STALLED;
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	685b      	ldr	r3, [r3, #4]
 801a40c:	2204      	movs	r2, #4
 801a40e:	431a      	orrs	r2, r3
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	605a      	str	r2, [r3, #4]

    /* Stall the endpoint.  */
    HAL_PCD_EP_SetStall(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress | ed -> ux_dcd_stm32_ed_direction);
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801a418:	683b      	ldr	r3, [r7, #0]
 801a41a:	695b      	ldr	r3, [r3, #20]
 801a41c:	b2da      	uxtb	r2, r3
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	7a9b      	ldrb	r3, [r3, #10]
 801a422:	4313      	orrs	r3, r2
 801a424:	b2db      	uxtb	r3, r3
 801a426:	0019      	movs	r1, r3
 801a428:	f7ef fb4e 	bl	8009ac8 <HAL_PCD_EP_SetStall>

    /* This function never fails.  */
    return(UX_SUCCESS);
 801a42c:	2300      	movs	r3, #0
}
 801a42e:	0018      	movs	r0, r3
 801a430:	46bd      	mov	sp, r7
 801a432:	b004      	add	sp, #16
 801a434:	bd80      	pop	{r7, pc}

0801a436 <_stm32_ed_get>:
{
 801a436:	b580      	push	{r7, lr}
 801a438:	b084      	sub	sp, #16
 801a43a:	af00      	add	r7, sp, #0
 801a43c:	6078      	str	r0, [r7, #4]
 801a43e:	6039      	str	r1, [r7, #0]
ULONG ep_num = ep_addr & 0x7Fu;
 801a440:	683b      	ldr	r3, [r7, #0]
 801a442:	227f      	movs	r2, #127	@ 0x7f
 801a444:	4013      	ands	r3, r2
 801a446:	60fb      	str	r3, [r7, #12]
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	2b07      	cmp	r3, #7
 801a44c:	d806      	bhi.n	801a45c <_stm32_ed_get+0x26>
        ep_num >= dcd_stm32->pcd_handle->Init.dev_endpoints)
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a452:	791b      	ldrb	r3, [r3, #4]
 801a454:	001a      	movs	r2, r3
    if (ep_num >= UX_DCD_STM32_MAX_ED ||
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	4293      	cmp	r3, r2
 801a45a:	d301      	bcc.n	801a460 <_stm32_ed_get+0x2a>
        return(UX_NULL);
 801a45c:	2300      	movs	r3, #0
 801a45e:	e007      	b.n	801a470 <_stm32_ed_get+0x3a>
    return(&dcd_stm32->ux_dcd_stm32_ed[ep_num]);
 801a460:	68fa      	ldr	r2, [r7, #12]
 801a462:	0013      	movs	r3, r2
 801a464:	005b      	lsls	r3, r3, #1
 801a466:	189b      	adds	r3, r3, r2
 801a468:	009b      	lsls	r3, r3, #2
 801a46a:	687a      	ldr	r2, [r7, #4]
 801a46c:	18d3      	adds	r3, r2, r3
 801a46e:	3304      	adds	r3, #4
}
 801a470:	0018      	movs	r0, r3
 801a472:	46bd      	mov	sp, r7
 801a474:	b004      	add	sp, #16
 801a476:	bd80      	pop	{r7, pc}

0801a478 <_ux_dcd_stm32_endpoint_status>:
/*                                            added bi-dir EP support,    */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_endpoint_status(UX_DCD_STM32 *dcd_stm32, ULONG endpoint_index)
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	b084      	sub	sp, #16
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
 801a480:	6039      	str	r1, [r7, #0]

UX_DCD_STM32_ED      *ed;


    /* Fetch the address of the physical endpoint.  */
    ed = _stm32_ed_get(dcd_stm32, endpoint_index);
 801a482:	683a      	ldr	r2, [r7, #0]
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	0011      	movs	r1, r2
 801a488:	0018      	movs	r0, r3
 801a48a:	f7ff ffd4 	bl	801a436 <_stm32_ed_get>
 801a48e:	0003      	movs	r3, r0
 801a490:	60fb      	str	r3, [r7, #12]

    /* Check the endpoint status, if it is free, we have a illegal endpoint.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_USED) == 0)
 801a492:	68fb      	ldr	r3, [r7, #12]
 801a494:	685b      	ldr	r3, [r3, #4]
 801a496:	2201      	movs	r2, #1
 801a498:	4013      	ands	r3, r2
 801a49a:	d101      	bne.n	801a4a0 <_ux_dcd_stm32_endpoint_status+0x28>
        return(UX_ERROR);
 801a49c:	23ff      	movs	r3, #255	@ 0xff
 801a49e:	e007      	b.n	801a4b0 <_ux_dcd_stm32_endpoint_status+0x38>

    /* Check if the endpoint is stalled.  */
    if ((ed -> ux_dcd_stm32_ed_status & UX_DCD_STM32_ED_STATUS_STALLED) == 0)
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	685b      	ldr	r3, [r3, #4]
 801a4a4:	2204      	movs	r2, #4
 801a4a6:	4013      	ands	r3, r2
 801a4a8:	d101      	bne.n	801a4ae <_ux_dcd_stm32_endpoint_status+0x36>
        return(UX_FALSE);
 801a4aa:	2300      	movs	r3, #0
 801a4ac:	e000      	b.n	801a4b0 <_ux_dcd_stm32_endpoint_status+0x38>
    else
        return(UX_TRUE);
 801a4ae:	2301      	movs	r3, #1
}
 801a4b0:	0018      	movs	r0, r3
 801a4b2:	46bd      	mov	sp, r7
 801a4b4:	b004      	add	sp, #16
 801a4b6:	bd80      	pop	{r7, pc}

0801a4b8 <_ux_dcd_stm32_frame_number_get>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_frame_number_get(UX_DCD_STM32 *dcd_stm32, ULONG *frame_number)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b082      	sub	sp, #8
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]
 801a4c0:	6039      	str	r1, [r7, #0]

    /* This function never fails. */
    return(UX_SUCCESS);
 801a4c2:	2300      	movs	r3, #0
}
 801a4c4:	0018      	movs	r0, r3
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	b002      	add	sp, #8
 801a4ca:	bd80      	pop	{r7, pc}

0801a4cc <_ux_dcd_stm32_function>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_function(UX_SLAVE_DCD *dcd, UINT function, VOID *parameter)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b086      	sub	sp, #24
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	60f8      	str	r0, [r7, #12]
 801a4d4:	60b9      	str	r1, [r7, #8]
 801a4d6:	607a      	str	r2, [r7, #4]
UINT             status;
UX_DCD_STM32     *dcd_stm32;


    /* Check the status of the controller.  */
    if (dcd -> ux_slave_dcd_status == UX_UNUSED)
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d106      	bne.n	801a4ee <_ux_dcd_stm32_function+0x22>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_CONTROLLER_UNKNOWN);
 801a4e0:	2255      	movs	r2, #85	@ 0x55
 801a4e2:	2102      	movs	r1, #2
 801a4e4:	2002      	movs	r0, #2
 801a4e6:	f7fc fdc3 	bl	8017070 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_CONTROLLER_UNKNOWN, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_CONTROLLER_UNKNOWN);
 801a4ea:	2355      	movs	r3, #85	@ 0x55
 801a4ec:	e075      	b.n	801a5da <_ux_dcd_stm32_function+0x10e>
    }

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 =  (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	69db      	ldr	r3, [r3, #28]
 801a4f2:	613b      	str	r3, [r7, #16]

    /* Look at the function and route it.  */
    switch(function)
 801a4f4:	68bb      	ldr	r3, [r7, #8]
 801a4f6:	3b0a      	subs	r3, #10
 801a4f8:	2b0b      	cmp	r3, #11
 801a4fa:	d865      	bhi.n	801a5c8 <_ux_dcd_stm32_function+0xfc>
 801a4fc:	009a      	lsls	r2, r3, #2
 801a4fe:	4b39      	ldr	r3, [pc, #228]	@ (801a5e4 <_ux_dcd_stm32_function+0x118>)
 801a500:	18d3      	adds	r3, r2, r3
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	469f      	mov	pc, r3
    {

    case UX_DCD_GET_FRAME_NUMBER:

        status =  _ux_dcd_stm32_frame_number_get(dcd_stm32, (ULONG *) parameter);
 801a506:	687a      	ldr	r2, [r7, #4]
 801a508:	693b      	ldr	r3, [r7, #16]
 801a50a:	0011      	movs	r1, r2
 801a50c:	0018      	movs	r0, r3
 801a50e:	f7ff ffd3 	bl	801a4b8 <_ux_dcd_stm32_frame_number_get>
 801a512:	0003      	movs	r3, r0
 801a514:	617b      	str	r3, [r7, #20]
        break;
 801a516:	e05f      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>
    case UX_DCD_TRANSFER_REQUEST:

#if defined(UX_DEVICE_STANDALONE)
        status =  _ux_dcd_stm32_transfer_run(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
#else
        status =  _ux_dcd_stm32_transfer_request(dcd_stm32, (UX_SLAVE_TRANSFER *) parameter);
 801a518:	687a      	ldr	r2, [r7, #4]
 801a51a:	693b      	ldr	r3, [r7, #16]
 801a51c:	0011      	movs	r1, r2
 801a51e:	0018      	movs	r0, r3
 801a520:	f000 f989 	bl	801a836 <_ux_dcd_stm32_transfer_request>
 801a524:	0003      	movs	r3, r0
 801a526:	617b      	str	r3, [r7, #20]
#endif /* defined(UX_DEVICE_STANDALONE) */
        break;
 801a528:	e056      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_TRANSFER_ABORT:
        status = _ux_dcd_stm32_transfer_abort(dcd_stm32, parameter);
 801a52a:	687a      	ldr	r2, [r7, #4]
 801a52c:	693b      	ldr	r3, [r7, #16]
 801a52e:	0011      	movs	r1, r2
 801a530:	0018      	movs	r0, r3
 801a532:	f000 f961 	bl	801a7f8 <_ux_dcd_stm32_transfer_abort>
 801a536:	0003      	movs	r3, r0
 801a538:	617b      	str	r3, [r7, #20]
        break;
 801a53a:	e04d      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_CREATE_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_create(dcd_stm32, parameter);
 801a53c:	687a      	ldr	r2, [r7, #4]
 801a53e:	693b      	ldr	r3, [r7, #16]
 801a540:	0011      	movs	r1, r2
 801a542:	0018      	movs	r0, r3
 801a544:	f7ff feaf 	bl	801a2a6 <_ux_dcd_stm32_endpoint_create>
 801a548:	0003      	movs	r3, r0
 801a54a:	617b      	str	r3, [r7, #20]
        break;
 801a54c:	e044      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_DESTROY_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_destroy(dcd_stm32, parameter);
 801a54e:	687a      	ldr	r2, [r7, #4]
 801a550:	693b      	ldr	r3, [r7, #16]
 801a552:	0011      	movs	r1, r2
 801a554:	0018      	movs	r0, r3
 801a556:	f7ff fef5 	bl	801a344 <_ux_dcd_stm32_endpoint_destroy>
 801a55a:	0003      	movs	r3, r0
 801a55c:	617b      	str	r3, [r7, #20]
        break;
 801a55e:	e03b      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_RESET_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_reset(dcd_stm32, parameter);
 801a560:	687a      	ldr	r2, [r7, #4]
 801a562:	693b      	ldr	r3, [r7, #16]
 801a564:	0011      	movs	r1, r2
 801a566:	0018      	movs	r0, r3
 801a568:	f7ff ff06 	bl	801a378 <_ux_dcd_stm32_endpoint_reset>
 801a56c:	0003      	movs	r3, r0
 801a56e:	617b      	str	r3, [r7, #20]
        break;
 801a570:	e032      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_STALL_ENDPOINT:

        status =  _ux_dcd_stm32_endpoint_stall(dcd_stm32, parameter);
 801a572:	687a      	ldr	r2, [r7, #4]
 801a574:	693b      	ldr	r3, [r7, #16]
 801a576:	0011      	movs	r1, r2
 801a578:	0018      	movs	r0, r3
 801a57a:	f7ff ff3d 	bl	801a3f8 <_ux_dcd_stm32_endpoint_stall>
 801a57e:	0003      	movs	r3, r0
 801a580:	617b      	str	r3, [r7, #20]
        break;
 801a582:	e029      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_SET_DEVICE_ADDRESS:

        status =  HAL_PCD_SetAddress(dcd_stm32 -> pcd_handle, (uint8_t)(ULONG) parameter);
 801a584:	693b      	ldr	r3, [r7, #16]
 801a586:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a588:	687a      	ldr	r2, [r7, #4]
 801a58a:	b2d2      	uxtb	r2, r2
 801a58c:	0011      	movs	r1, r2
 801a58e:	0018      	movs	r0, r3
 801a590:	f7ef f91e 	bl	80097d0 <HAL_PCD_SetAddress>
 801a594:	0003      	movs	r3, r0
 801a596:	617b      	str	r3, [r7, #20]
        break;
 801a598:	e01e      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_CHANGE_STATE:

        if ((ULONG) parameter == UX_DEVICE_FORCE_DISCONNECT)
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	2b0b      	cmp	r3, #11
 801a59e:	d107      	bne.n	801a5b0 <_ux_dcd_stm32_function+0xe4>
        {
          /* Disconnect the USB device */
          status =  HAL_PCD_Stop(dcd_stm32 -> pcd_handle);
 801a5a0:	693b      	ldr	r3, [r7, #16]
 801a5a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a5a4:	0018      	movs	r0, r3
 801a5a6:	f7ee ffc0 	bl	800952a <HAL_PCD_Stop>
 801a5aa:	0003      	movs	r3, r0
 801a5ac:	617b      	str	r3, [r7, #20]
        else
        {
          status = UX_SUCCESS;
        }

        break;
 801a5ae:	e013      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>
          status = UX_SUCCESS;
 801a5b0:	2300      	movs	r3, #0
 801a5b2:	617b      	str	r3, [r7, #20]
        break;
 801a5b4:	e010      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>

    case UX_DCD_ENDPOINT_STATUS:

        status =  _ux_dcd_stm32_endpoint_status(dcd_stm32, (ULONG) parameter);
 801a5b6:	687a      	ldr	r2, [r7, #4]
 801a5b8:	693b      	ldr	r3, [r7, #16]
 801a5ba:	0011      	movs	r1, r2
 801a5bc:	0018      	movs	r0, r3
 801a5be:	f7ff ff5b 	bl	801a478 <_ux_dcd_stm32_endpoint_status>
 801a5c2:	0003      	movs	r3, r0
 801a5c4:	617b      	str	r3, [r7, #20]
        break;
 801a5c6:	e007      	b.n	801a5d8 <_ux_dcd_stm32_function+0x10c>
#endif /* defined(UX_DEVICE_STANDALONE) */

    default:

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DCD, UX_FUNCTION_NOT_SUPPORTED);
 801a5c8:	2254      	movs	r2, #84	@ 0x54
 801a5ca:	2102      	movs	r1, #2
 801a5cc:	2002      	movs	r0, #2
 801a5ce:	f7fc fd4f 	bl	8017070 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_FUNCTION_NOT_SUPPORTED, 0, 0, 0, UX_TRACE_ERRORS, 0, 0)

        status =  UX_FUNCTION_NOT_SUPPORTED;
 801a5d2:	2354      	movs	r3, #84	@ 0x54
 801a5d4:	617b      	str	r3, [r7, #20]
        break;
 801a5d6:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return completion status.  */
    return(status);
 801a5d8:	697b      	ldr	r3, [r7, #20]
}
 801a5da:	0018      	movs	r0, r3
 801a5dc:	46bd      	mov	sp, r7
 801a5de:	b006      	add	sp, #24
 801a5e0:	bd80      	pop	{r7, pc}
 801a5e2:	46c0      	nop			@ (mov r8, r8)
 801a5e4:	0801e758 	.word	0x0801e758

0801a5e8 <_ux_dcd_stm32_initialize>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize(ULONG dcd_io, ULONG parameter)
{
 801a5e8:	b580      	push	{r7, lr}
 801a5ea:	b084      	sub	sp, #16
 801a5ec:	af00      	add	r7, sp, #0
 801a5ee:	6078      	str	r0, [r7, #4]
 801a5f0:	6039      	str	r1, [r7, #0]


    UX_PARAMETER_NOT_USED(dcd_io);

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801a5f2:	4b13      	ldr	r3, [pc, #76]	@ (801a640 <_ux_dcd_stm32_initialize+0x58>)
 801a5f4:	681b      	ldr	r3, [r3, #0]
 801a5f6:	60fb      	str	r3, [r7, #12]

    /* The controller initialized here is of STM32 type.  */
    dcd -> ux_slave_dcd_controller_type =  UX_DCD_STM32_SLAVE_CONTROLLER;
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	2280      	movs	r2, #128	@ 0x80
 801a5fc:	605a      	str	r2, [r3, #4]

    /* Allocate memory for this STM32 DCD instance.  */
    dcd_stm32 =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_DCD_STM32));
 801a5fe:	2268      	movs	r2, #104	@ 0x68
 801a600:	2100      	movs	r1, #0
 801a602:	2000      	movs	r0, #0
 801a604:	f7fc ff4c 	bl	80174a0 <_ux_utility_memory_allocate>
 801a608:	0003      	movs	r3, r0
 801a60a:	60bb      	str	r3, [r7, #8]

    /* Check if memory was properly allocated.  */
    if(dcd_stm32 == UX_NULL)
 801a60c:	68bb      	ldr	r3, [r7, #8]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d101      	bne.n	801a616 <_ux_dcd_stm32_initialize+0x2e>
        return(UX_MEMORY_INSUFFICIENT);
 801a612:	2312      	movs	r3, #18
 801a614:	e00f      	b.n	801a636 <_ux_dcd_stm32_initialize+0x4e>

    /* Set the pointer to the STM32 DCD.  */
    dcd -> ux_slave_dcd_controller_hardware =  (VOID *) dcd_stm32;
 801a616:	68fb      	ldr	r3, [r7, #12]
 801a618:	68ba      	ldr	r2, [r7, #8]
 801a61a:	61da      	str	r2, [r3, #28]

    /* Set the generic DCD owner for the STM32 DCD.  */
    dcd_stm32 -> ux_dcd_stm32_dcd_owner =  dcd;
 801a61c:	68bb      	ldr	r3, [r7, #8]
 801a61e:	68fa      	ldr	r2, [r7, #12]
 801a620:	601a      	str	r2, [r3, #0]

    /* Initialize the function collector for this DCD.  */
    dcd -> ux_slave_dcd_function =  _ux_dcd_stm32_function;
 801a622:	68fb      	ldr	r3, [r7, #12]
 801a624:	4a07      	ldr	r2, [pc, #28]	@ (801a644 <_ux_dcd_stm32_initialize+0x5c>)
 801a626:	619a      	str	r2, [r3, #24]

    dcd_stm32 -> pcd_handle = (PCD_HandleTypeDef *)parameter;
 801a628:	683a      	ldr	r2, [r7, #0]
 801a62a:	68bb      	ldr	r3, [r7, #8]
 801a62c:	665a      	str	r2, [r3, #100]	@ 0x64

    /* Set the state of the controller to OPERATIONAL now.  */
    dcd -> ux_slave_dcd_status =  UX_DCD_STATUS_OPERATIONAL;
 801a62e:	68fb      	ldr	r3, [r7, #12]
 801a630:	2201      	movs	r2, #1
 801a632:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801a634:	2300      	movs	r3, #0
}
 801a636:	0018      	movs	r0, r3
 801a638:	46bd      	mov	sp, r7
 801a63a:	b004      	add	sp, #16
 801a63c:	bd80      	pop	{r7, pc}
 801a63e:	46c0      	nop			@ (mov r8, r8)
 801a640:	200116a4 	.word	0x200116a4
 801a644:	0801a4cd 	.word	0x0801a4cd

0801a648 <_ux_dcd_stm32_initialize_complete>:
/*                                            drive the controller,       */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_initialize_complete(VOID)
{
 801a648:	b580      	push	{r7, lr}
 801a64a:	b086      	sub	sp, #24
 801a64c:	af00      	add	r7, sp, #0
UCHAR                     *device_framework;
UX_SLAVE_TRANSFER       *transfer_request;


    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801a64e:	4b68      	ldr	r3, [pc, #416]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	617b      	str	r3, [r7, #20]

    /* Get the pointer to the STM32 DCD.  */
    dcd_stm32 = (UX_DCD_STM32 *) dcd -> ux_slave_dcd_controller_hardware;
 801a654:	697b      	ldr	r3, [r7, #20]
 801a656:	69db      	ldr	r3, [r3, #28]
 801a658:	613b      	str	r3, [r7, #16]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801a65a:	4b65      	ldr	r3, [pc, #404]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	3320      	adds	r3, #32
 801a660:	60fb      	str	r3, [r7, #12]

    /* Are we in DFU mode ? If so, check if we are in a Reset mode.  */
    if (_ux_system_slave -> ux_system_slave_device_dfu_state_machine == UX_SYSTEM_DFU_STATE_APP_DETACH)
 801a662:	4b63      	ldr	r3, [pc, #396]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a664:	681a      	ldr	r2, [r3, #0]
 801a666:	23de      	movs	r3, #222	@ 0xde
 801a668:	005b      	lsls	r3, r3, #1
 801a66a:	58d3      	ldr	r3, [r2, r3]
 801a66c:	2b01      	cmp	r3, #1
 801a66e:	d114      	bne.n	801a69a <_ux_dcd_stm32_initialize_complete+0x52>
    {

        /* The device is now in DFU reset mode. Switch to the DFU device framework.  */
        _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_dfu_framework;
 801a670:	4b5f      	ldr	r3, [pc, #380]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a672:	6819      	ldr	r1, [r3, #0]
 801a674:	4b5e      	ldr	r3, [pc, #376]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a676:	681a      	ldr	r2, [r3, #0]
 801a678:	23a8      	movs	r3, #168	@ 0xa8
 801a67a:	005b      	lsls	r3, r3, #1
 801a67c:	58c9      	ldr	r1, [r1, r3]
 801a67e:	2394      	movs	r3, #148	@ 0x94
 801a680:	005b      	lsls	r3, r3, #1
 801a682:	50d1      	str	r1, [r2, r3]
        _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_dfu_framework_length;
 801a684:	4b5a      	ldr	r3, [pc, #360]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a686:	6819      	ldr	r1, [r3, #0]
 801a688:	4b59      	ldr	r3, [pc, #356]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a68a:	681a      	ldr	r2, [r3, #0]
 801a68c:	23aa      	movs	r3, #170	@ 0xaa
 801a68e:	005b      	lsls	r3, r3, #1
 801a690:	58c9      	ldr	r1, [r1, r3]
 801a692:	2396      	movs	r3, #150	@ 0x96
 801a694:	005b      	lsls	r3, r3, #1
 801a696:	50d1      	str	r1, [r2, r3]
 801a698:	e035      	b.n	801a706 <_ux_dcd_stm32_initialize_complete+0xbe>
    }
    else
    {

        /* Set State to App Idle. */
        _ux_system_slave -> ux_system_slave_device_dfu_state_machine = UX_SYSTEM_DFU_STATE_APP_IDLE;
 801a69a:	4b55      	ldr	r3, [pc, #340]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a69c:	681a      	ldr	r2, [r3, #0]
 801a69e:	23de      	movs	r3, #222	@ 0xde
 801a6a0:	005b      	lsls	r3, r3, #1
 801a6a2:	2100      	movs	r1, #0
 801a6a4:	50d1      	str	r1, [r2, r3]

        /* Check the speed and set the correct descriptor.  */
        if (_ux_system_slave -> ux_system_slave_speed ==  UX_FULL_SPEED_DEVICE)
 801a6a6:	4b52      	ldr	r3, [pc, #328]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6a8:	681a      	ldr	r2, [r3, #0]
 801a6aa:	23d0      	movs	r3, #208	@ 0xd0
 801a6ac:	005b      	lsls	r3, r3, #1
 801a6ae:	58d3      	ldr	r3, [r2, r3]
 801a6b0:	2b01      	cmp	r3, #1
 801a6b2:	d114      	bne.n	801a6de <_ux_dcd_stm32_initialize_complete+0x96>
        {

            /* The device is operating at full speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801a6b4:	4b4e      	ldr	r3, [pc, #312]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6b6:	6819      	ldr	r1, [r3, #0]
 801a6b8:	4b4d      	ldr	r3, [pc, #308]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6ba:	681a      	ldr	r2, [r3, #0]
 801a6bc:	2398      	movs	r3, #152	@ 0x98
 801a6be:	005b      	lsls	r3, r3, #1
 801a6c0:	58c9      	ldr	r1, [r1, r3]
 801a6c2:	2394      	movs	r3, #148	@ 0x94
 801a6c4:	005b      	lsls	r3, r3, #1
 801a6c6:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801a6c8:	4b49      	ldr	r3, [pc, #292]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6ca:	6819      	ldr	r1, [r3, #0]
 801a6cc:	4b48      	ldr	r3, [pc, #288]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6ce:	681a      	ldr	r2, [r3, #0]
 801a6d0:	239a      	movs	r3, #154	@ 0x9a
 801a6d2:	005b      	lsls	r3, r3, #1
 801a6d4:	58c9      	ldr	r1, [r1, r3]
 801a6d6:	2396      	movs	r3, #150	@ 0x96
 801a6d8:	005b      	lsls	r3, r3, #1
 801a6da:	50d1      	str	r1, [r2, r3]
 801a6dc:	e013      	b.n	801a706 <_ux_dcd_stm32_initialize_complete+0xbe>
        }
        else
        {

            /* The device is operating at high speed.  */
            _ux_system_slave -> ux_system_slave_device_framework =  _ux_system_slave -> ux_system_slave_device_framework_high_speed;
 801a6de:	4b44      	ldr	r3, [pc, #272]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6e0:	6819      	ldr	r1, [r3, #0]
 801a6e2:	4b43      	ldr	r3, [pc, #268]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6e4:	681a      	ldr	r2, [r3, #0]
 801a6e6:	239c      	movs	r3, #156	@ 0x9c
 801a6e8:	005b      	lsls	r3, r3, #1
 801a6ea:	58c9      	ldr	r1, [r1, r3]
 801a6ec:	2394      	movs	r3, #148	@ 0x94
 801a6ee:	005b      	lsls	r3, r3, #1
 801a6f0:	50d1      	str	r1, [r2, r3]
            _ux_system_slave -> ux_system_slave_device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_high_speed;
 801a6f2:	4b3f      	ldr	r3, [pc, #252]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6f4:	6819      	ldr	r1, [r3, #0]
 801a6f6:	4b3e      	ldr	r3, [pc, #248]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a6f8:	681a      	ldr	r2, [r3, #0]
 801a6fa:	239e      	movs	r3, #158	@ 0x9e
 801a6fc:	005b      	lsls	r3, r3, #1
 801a6fe:	58c9      	ldr	r1, [r1, r3]
 801a700:	2396      	movs	r3, #150	@ 0x96
 801a702:	005b      	lsls	r3, r3, #1
 801a704:	50d1      	str	r1, [r2, r3]
        }
    }

    /* Get the device framework pointer.  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801a706:	4b3a      	ldr	r3, [pc, #232]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a708:	681a      	ldr	r2, [r3, #0]
 801a70a:	2394      	movs	r3, #148	@ 0x94
 801a70c:	005b      	lsls	r3, r3, #1
 801a70e:	58d3      	ldr	r3, [r2, r3]
 801a710:	60bb      	str	r3, [r7, #8]

    /* And create the decompressed device descriptor structure.  */
    _ux_utility_descriptor_parse(device_framework,
                                _ux_system_device_descriptor_structure,
                                UX_DEVICE_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &device -> ux_slave_device_descriptor);
 801a712:	68fb      	ldr	r3, [r7, #12]
 801a714:	3304      	adds	r3, #4
    _ux_utility_descriptor_parse(device_framework,
 801a716:	4937      	ldr	r1, [pc, #220]	@ (801a7f4 <_ux_dcd_stm32_initialize_complete+0x1ac>)
 801a718:	68b8      	ldr	r0, [r7, #8]
 801a71a:	220e      	movs	r2, #14
 801a71c:	f7fc fd97 	bl	801724e <_ux_utility_descriptor_parse>

    /* Now we create a transfer request to accept the first SETUP packet
       and get the ball running. First get the address of the endpoint
       transfer request container.  */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	336c      	adds	r3, #108	@ 0x6c
 801a724:	607b      	str	r3, [r7, #4]

    /* Set the timeout to be for Control Endpoint.  */
    transfer_request -> ux_slave_transfer_request_timeout =  UX_MS_TO_TICK(UX_CONTROL_TRANSFER_TIMEOUT);
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	22fa      	movs	r2, #250	@ 0xfa
 801a72a:	0092      	lsls	r2, r2, #2
 801a72c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Adjust the current data pointer as well.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	611a      	str	r2, [r3, #16]

    /* Update the transfer request endpoint pointer with the default endpoint.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	333c      	adds	r3, #60	@ 0x3c
 801a73a:	001a      	movs	r2, r3
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	609a      	str	r2, [r3, #8]

    /* The control endpoint max packet size needs to be filled manually in its descriptor.  */
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	689b      	ldr	r3, [r3, #8]
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 801a744:	68fa      	ldr	r2, [r7, #12]
 801a746:	69d2      	ldr	r2, [r2, #28]
    transfer_request -> ux_slave_transfer_request_endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize =
 801a748:	61da      	str	r2, [r3, #28]

    /* On the control endpoint, always expect the maximum.  */
    transfer_request -> ux_slave_transfer_request_requested_length =
                                device -> ux_slave_device_descriptor.bMaxPacketSize0;
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	69da      	ldr	r2, [r3, #28]
    transfer_request -> ux_slave_transfer_request_requested_length =
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	615a      	str	r2, [r3, #20]

    /* Attach the control endpoint to the transfer request.  */
    transfer_request -> ux_slave_transfer_request_endpoint =  &device -> ux_slave_device_control_endpoint;
 801a752:	68fb      	ldr	r3, [r7, #12]
 801a754:	333c      	adds	r3, #60	@ 0x3c
 801a756:	001a      	movs	r2, r3
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	609a      	str	r2, [r3, #8]

    /* Create the default control endpoint attached to the device.
       Once this endpoint is enabled, the host can then send a setup packet
       The device controller will receive it and will call the setup function
       module.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	699b      	ldr	r3, [r3, #24]
                                    (VOID *) &device -> ux_slave_device_control_endpoint);
 801a760:	68fa      	ldr	r2, [r7, #12]
 801a762:	323c      	adds	r2, #60	@ 0x3c
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT,
 801a764:	6978      	ldr	r0, [r7, #20]
 801a766:	210e      	movs	r1, #14
 801a768:	4798      	blx	r3

    /* Open Control OUT endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x00U);
 801a76a:	693b      	ldr	r3, [r7, #16]
 801a76c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a76e:	2100      	movs	r1, #0
 801a770:	0018      	movs	r0, r3
 801a772:	f7ef faa0 	bl	8009cb6 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x00U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801a776:	693b      	ldr	r3, [r7, #16]
 801a778:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801a77a:	68fb      	ldr	r3, [r7, #12]
 801a77c:	69db      	ldr	r3, [r3, #28]
 801a77e:	b29a      	uxth	r2, r3
 801a780:	2300      	movs	r3, #0
 801a782:	2100      	movs	r1, #0
 801a784:	f7ef f84e 	bl	8009824 <HAL_PCD_EP_Open>

    /* Open Control IN endpoint.  */
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, 0x80U);
 801a788:	693b      	ldr	r3, [r7, #16]
 801a78a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a78c:	2180      	movs	r1, #128	@ 0x80
 801a78e:	0018      	movs	r0, r3
 801a790:	f7ef fa91 	bl	8009cb6 <HAL_PCD_EP_Flush>
    HAL_PCD_EP_Open(dcd_stm32 -> pcd_handle, 0x80U, device -> ux_slave_device_descriptor.bMaxPacketSize0, UX_CONTROL_ENDPOINT);
 801a794:	693b      	ldr	r3, [r7, #16]
 801a796:	6e58      	ldr	r0, [r3, #100]	@ 0x64
 801a798:	68fb      	ldr	r3, [r7, #12]
 801a79a:	69db      	ldr	r3, [r3, #28]
 801a79c:	b29a      	uxth	r2, r3
 801a79e:	2300      	movs	r3, #0
 801a7a0:	2180      	movs	r1, #128	@ 0x80
 801a7a2:	f7ef f83f 	bl	8009824 <HAL_PCD_EP_Open>

    /* Ensure the control endpoint is properly reset.  */
    device -> ux_slave_device_control_endpoint.ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Mark the phase as SETUP.  */
    transfer_request -> ux_slave_transfer_request_type =  UX_TRANSFER_PHASE_SETUP;
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	2201      	movs	r2, #1
 801a7b0:	605a      	str	r2, [r3, #4]

    /* Mark this transfer request as pending.  */
    transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING;
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	2201      	movs	r2, #1
 801a7b6:	601a      	str	r2, [r3, #0]

    /* Ask for 8 bytes of the SETUP packet.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    UX_SETUP_SIZE;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	2208      	movs	r2, #8
 801a7bc:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  UX_SETUP_SIZE;
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	2208      	movs	r2, #8
 801a7c2:	61da      	str	r2, [r3, #28]

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	2200      	movs	r2, #0
 801a7c8:	619a      	str	r2, [r3, #24]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801a7ca:	4b09      	ldr	r3, [pc, #36]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a7cc:	681a      	ldr	r2, [r3, #0]
 801a7ce:	23e2      	movs	r3, #226	@ 0xe2
 801a7d0:	005b      	lsls	r3, r3, #1
 801a7d2:	58d3      	ldr	r3, [r2, r3]
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d006      	beq.n	801a7e6 <_ux_dcd_stm32_initialize_complete+0x19e>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_ATTACHED);
 801a7d8:	4b05      	ldr	r3, [pc, #20]	@ (801a7f0 <_ux_dcd_stm32_initialize_complete+0x1a8>)
 801a7da:	681a      	ldr	r2, [r3, #0]
 801a7dc:	23e2      	movs	r3, #226	@ 0xe2
 801a7de:	005b      	lsls	r3, r3, #1
 801a7e0:	58d3      	ldr	r3, [r2, r3]
 801a7e2:	2001      	movs	r0, #1
 801a7e4:	4798      	blx	r3

    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_REGISTER(UX_TRACE_DEVICE_OBJECT_TYPE_DEVICE, device, 0, 0, 0)

    /* We are now ready for the USB device to accept the first packet when connected.  */
    return(UX_SUCCESS);
 801a7e6:	2300      	movs	r3, #0
}
 801a7e8:	0018      	movs	r0, r3
 801a7ea:	46bd      	mov	sp, r7
 801a7ec:	b006      	add	sp, #24
 801a7ee:	bd80      	pop	{r7, pc}
 801a7f0:	200116a4 	.word	0x200116a4
 801a7f4:	2000001c 	.word	0x2000001c

0801a7f8 <_ux_dcd_stm32_transfer_abort>:
/*                                                                        */
/*  01-31-2022     Chaoqiong Xiao           Initial Version 6.1.10        */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_abort(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b084      	sub	sp, #16
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	6078      	str	r0, [r7, #4]
 801a800:	6039      	str	r1, [r7, #0]

UX_SLAVE_ENDPOINT       *endpoint;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801a802:	683b      	ldr	r3, [r7, #0]
 801a804:	689b      	ldr	r3, [r3, #8]
 801a806:	60fb      	str	r3, [r7, #12]

    HAL_PCD_EP_Abort(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801a80c:	68fb      	ldr	r3, [r7, #12]
 801a80e:	695b      	ldr	r3, [r3, #20]
 801a810:	b2db      	uxtb	r3, r3
 801a812:	0019      	movs	r1, r3
 801a814:	0010      	movs	r0, r2
 801a816:	f7ef fa15 	bl	8009c44 <HAL_PCD_EP_Abort>
    HAL_PCD_EP_Flush(dcd_stm32 -> pcd_handle, endpoint->ux_slave_endpoint_descriptor.bEndpointAddress);
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	695b      	ldr	r3, [r3, #20]
 801a822:	b2db      	uxtb	r3, r3
 801a824:	0019      	movs	r1, r3
 801a826:	0010      	movs	r0, r2
 801a828:	f7ef fa45 	bl	8009cb6 <HAL_PCD_EP_Flush>

    /* No semaphore put here since it's already done in stack.  */

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 801a82c:	2300      	movs	r3, #0
}
 801a82e:	0018      	movs	r0, r3
 801a830:	46bd      	mov	sp, r7
 801a832:	b004      	add	sp, #16
 801a834:	bd80      	pop	{r7, pc}

0801a836 <_ux_dcd_stm32_transfer_request>:
/*                                            controller,                 */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_dcd_stm32_transfer_request(UX_DCD_STM32 *dcd_stm32, UX_SLAVE_TRANSFER *transfer_request)
{
 801a836:	b580      	push	{r7, lr}
 801a838:	b084      	sub	sp, #16
 801a83a:	af00      	add	r7, sp, #0
 801a83c:	6078      	str	r0, [r7, #4]
 801a83e:	6039      	str	r1, [r7, #0]
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;


    /* Get the pointer to the logical endpoint from the transfer request.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801a840:	683b      	ldr	r3, [r7, #0]
 801a842:	689b      	ldr	r3, [r3, #8]
 801a844:	60fb      	str	r3, [r7, #12]

    /* Check for transfer direction.  Is this a IN endpoint ? */
    if (transfer_request -> ux_slave_transfer_request_phase == UX_TRANSFER_PHASE_DATA_OUT)
 801a846:	683b      	ldr	r3, [r7, #0]
 801a848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a84a:	2b03      	cmp	r3, #3
 801a84c:	d12c      	bne.n	801a8a8 <_ux_dcd_stm32_transfer_request+0x72>
    {

        /* Transmit data.  */
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	6e58      	ldr	r0, [r3, #100]	@ 0x64
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801a856:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801a858:	683b      	ldr	r3, [r7, #0]
 801a85a:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Transmit(dcd_stm32 -> pcd_handle,
 801a85c:	683b      	ldr	r3, [r7, #0]
 801a85e:	695b      	ldr	r3, [r3, #20]
 801a860:	f7ef f8f5 	bl	8009a4e <HAL_PCD_EP_Transmit>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 801a864:	68fb      	ldr	r3, [r7, #12]
 801a866:	695b      	ldr	r3, [r3, #20]
 801a868:	2280      	movs	r2, #128	@ 0x80
 801a86a:	4393      	bics	r3, r2
 801a86c:	d045      	beq.n	801a8fa <_ux_dcd_stm32_transfer_request+0xc4>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801a86e:	683b      	ldr	r3, [r7, #0]
 801a870:	3330      	adds	r3, #48	@ 0x30
 801a872:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 801a874:	683b      	ldr	r3, [r7, #0]
 801a876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801a878:	0019      	movs	r1, r3
 801a87a:	0010      	movs	r0, r2
 801a87c:	f7fd f8d8 	bl	8017a30 <_ux_utility_semaphore_get>
 801a880:	0003      	movs	r3, r0
 801a882:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 801a884:	68bb      	ldr	r3, [r7, #8]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d001      	beq.n	801a88e <_ux_dcd_stm32_transfer_request+0x58>
                return(status);
 801a88a:	68bb      	ldr	r3, [r7, #8]
 801a88c:	e036      	b.n	801a8fc <_ux_dcd_stm32_transfer_request+0xc6>

            transfer_request -> ux_slave_transfer_request_actual_length = transfer_request->ux_slave_transfer_request_requested_length;
 801a88e:	683b      	ldr	r3, [r7, #0]
 801a890:	695a      	ldr	r2, [r3, #20]
 801a892:	683b      	ldr	r3, [r7, #0]
 801a894:	619a      	str	r2, [r3, #24]

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 801a896:	683b      	ldr	r3, [r7, #0]
 801a898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a89a:	2b00      	cmp	r3, #0
 801a89c:	d002      	beq.n	801a8a4 <_ux_dcd_stm32_transfer_request+0x6e>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 801a89e:	683b      	ldr	r3, [r7, #0]
 801a8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a8a2:	e02b      	b.n	801a8fc <_ux_dcd_stm32_transfer_request+0xc6>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	e029      	b.n	801a8fc <_ux_dcd_stm32_transfer_request+0xc6>
    else
    {

        /* We have a request for a SETUP or OUT Endpoint.  */
        /* Receive data.  */
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	6e58      	ldr	r0, [r3, #100]	@ 0x64
                            endpoint->ux_slave_endpoint_descriptor.bEndpointAddress,
 801a8ac:	68fb      	ldr	r3, [r7, #12]
 801a8ae:	695b      	ldr	r3, [r3, #20]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801a8b0:	b2d9      	uxtb	r1, r3
                            transfer_request->ux_slave_transfer_request_data_pointer,
 801a8b2:	683b      	ldr	r3, [r7, #0]
 801a8b4:	68da      	ldr	r2, [r3, #12]
        HAL_PCD_EP_Receive(dcd_stm32 -> pcd_handle,
 801a8b6:	683b      	ldr	r3, [r7, #0]
 801a8b8:	695b      	ldr	r3, [r3, #20]
 801a8ba:	f7ef f877 	bl	80099ac <HAL_PCD_EP_Receive>
                            transfer_request->ux_slave_transfer_request_requested_length);

        /* If the endpoint is a Control endpoint, all this is happening under Interrupt and there is no
           thread to suspend.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & (UINT)~UX_ENDPOINT_DIRECTION) != 0)
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	695b      	ldr	r3, [r3, #20]
 801a8c2:	2280      	movs	r2, #128	@ 0x80
 801a8c4:	4393      	bics	r3, r2
 801a8c6:	d018      	beq.n	801a8fa <_ux_dcd_stm32_transfer_request+0xc4>
        {

            /* We should wait for the semaphore to wake us up.  */
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801a8c8:	683b      	ldr	r3, [r7, #0]
 801a8ca:	3330      	adds	r3, #48	@ 0x30
 801a8cc:	001a      	movs	r2, r3
                                                (ULONG)transfer_request -> ux_slave_transfer_request_timeout);
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
            status =  _ux_utility_semaphore_get(&transfer_request -> ux_slave_transfer_request_semaphore,
 801a8d2:	0019      	movs	r1, r3
 801a8d4:	0010      	movs	r0, r2
 801a8d6:	f7fd f8ab 	bl	8017a30 <_ux_utility_semaphore_get>
 801a8da:	0003      	movs	r3, r0
 801a8dc:	60bb      	str	r3, [r7, #8]

            /* Check the completion code. */
            if (status != UX_SUCCESS)
 801a8de:	68bb      	ldr	r3, [r7, #8]
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d001      	beq.n	801a8e8 <_ux_dcd_stm32_transfer_request+0xb2>
                return(status);
 801a8e4:	68bb      	ldr	r3, [r7, #8]
 801a8e6:	e009      	b.n	801a8fc <_ux_dcd_stm32_transfer_request+0xc6>

            /* Check the transfer request completion code. We may have had a BUS reset or
               a device disconnection.  */
            if (transfer_request -> ux_slave_transfer_request_completion_code != UX_SUCCESS)
 801a8e8:	683b      	ldr	r3, [r7, #0]
 801a8ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d002      	beq.n	801a8f6 <_ux_dcd_stm32_transfer_request+0xc0>
                return(transfer_request -> ux_slave_transfer_request_completion_code);
 801a8f0:	683b      	ldr	r3, [r7, #0]
 801a8f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a8f4:	e002      	b.n	801a8fc <_ux_dcd_stm32_transfer_request+0xc6>

            /* Return to caller with success.  */
            return(UX_SUCCESS);
 801a8f6:	2300      	movs	r3, #0
 801a8f8:	e000      	b.n	801a8fc <_ux_dcd_stm32_transfer_request+0xc6>
        }
    }

    /* Return to caller with success.  */
    return(UX_SUCCESS);
 801a8fa:	2300      	movs	r3, #0
}
 801a8fc:	0018      	movs	r0, r3
 801a8fe:	46bd      	mov	sp, r7
 801a900:	b004      	add	sp, #16
 801a902:	bd80      	pop	{r7, pc}

0801a904 <_ux_device_stack_alternate_setting_get>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_get(ULONG interface_value)
{
 801a904:	b580      	push	{r7, lr}
 801a906:	b088      	sub	sp, #32
 801a908:	af00      	add	r7, sp, #0
 801a90a:	6078      	str	r0, [r7, #4]
                                
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_GET, interface_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801a90c:	4b1c      	ldr	r3, [pc, #112]	@ (801a980 <_ux_device_stack_alternate_setting_get+0x7c>)
 801a90e:	681b      	ldr	r3, [r3, #0]
 801a910:	3320      	adds	r3, #32
 801a912:	61bb      	str	r3, [r7, #24]

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801a914:	69bb      	ldr	r3, [r7, #24]
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	2b03      	cmp	r3, #3
 801a91a:	d12b      	bne.n	801a974 <_ux_device_stack_alternate_setting_get+0x70>
    {

        /* Obtain the pointer to the first interface attached.  */
        interface =  device -> ux_slave_device_first_interface;
 801a91c:	69bb      	ldr	r3, [r7, #24]
 801a91e:	22f0      	movs	r2, #240	@ 0xf0
 801a920:	589b      	ldr	r3, [r3, r2]
 801a922:	61fb      	str	r3, [r7, #28]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Start parsing each interface.  */
        while (interface != UX_NULL)
 801a924:	e023      	b.n	801a96e <_ux_device_stack_alternate_setting_get+0x6a>
        if (interface != UX_NULL)
#endif
        {

            /* Check if this is the interface we have an inquiry for.  */
            if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801a926:	69fb      	ldr	r3, [r7, #28]
 801a928:	695b      	ldr	r3, [r3, #20]
 801a92a:	687a      	ldr	r2, [r7, #4]
 801a92c:	429a      	cmp	r2, r3
 801a92e:	d11b      	bne.n	801a968 <_ux_device_stack_alternate_setting_get+0x64>
            {

                /* Get the control endpoint of the device.  */                
                endpoint =  &device -> ux_slave_device_control_endpoint;
 801a930:	69bb      	ldr	r3, [r7, #24]
 801a932:	333c      	adds	r3, #60	@ 0x3c
 801a934:	617b      	str	r3, [r7, #20]

                /* Get the pointer to the transfer request associated with the endpoint.  */
                transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801a936:	697b      	ldr	r3, [r7, #20]
 801a938:	3330      	adds	r3, #48	@ 0x30
 801a93a:	613b      	str	r3, [r7, #16]

                /* Set the value of the alternate setting in the buffer.  */
                *transfer_request -> ux_slave_transfer_request_data_pointer =
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 801a93c:	69fb      	ldr	r3, [r7, #28]
 801a93e:	699a      	ldr	r2, [r3, #24]
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 801a940:	693b      	ldr	r3, [r7, #16]
 801a942:	68db      	ldr	r3, [r3, #12]
                            (UCHAR) interface -> ux_slave_interface_descriptor.bAlternateSetting;
 801a944:	b2d2      	uxtb	r2, r2
                *transfer_request -> ux_slave_transfer_request_data_pointer =
 801a946:	701a      	strb	r2, [r3, #0]

                /* Setup the length appropriately.  */
                transfer_request -> ux_slave_transfer_request_requested_length =  1;
 801a948:	693b      	ldr	r3, [r7, #16]
 801a94a:	2201      	movs	r2, #1
 801a94c:	615a      	str	r2, [r3, #20]

                /* Set the phase of the transfer to data out.  */
                transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801a94e:	693b      	ldr	r3, [r7, #16]
 801a950:	2203      	movs	r2, #3
 801a952:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Send the descriptor with the appropriate length to the host.  */
                status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801a954:	693b      	ldr	r3, [r7, #16]
 801a956:	2201      	movs	r2, #1
 801a958:	2101      	movs	r1, #1
 801a95a:	0018      	movs	r0, r3
 801a95c:	f001 feac 	bl	801c6b8 <_ux_device_stack_transfer_request>
 801a960:	0003      	movs	r3, r0
 801a962:	60fb      	str	r3, [r7, #12]

                /* Return the function status.  */
                return(status);
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	e006      	b.n	801a976 <_ux_device_stack_alternate_setting_get+0x72>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 801a968:	69fb      	ldr	r3, [r7, #28]
 801a96a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a96c:	61fb      	str	r3, [r7, #28]
        while (interface != UX_NULL)
 801a96e:	69fb      	ldr	r3, [r7, #28]
 801a970:	2b00      	cmp	r3, #0
 801a972:	d1d8      	bne.n	801a926 <_ux_device_stack_alternate_setting_get+0x22>
#endif
        }
    }

    /* Return error completion. */
    return(UX_ERROR);
 801a974:	23ff      	movs	r3, #255	@ 0xff
}
 801a976:	0018      	movs	r0, r3
 801a978:	46bd      	mov	sp, r7
 801a97a:	b008      	add	sp, #32
 801a97c:	bd80      	pop	{r7, pc}
 801a97e:	46c0      	nop			@ (mov r8, r8)
 801a980:	200116a4 	.word	0x200116a4

0801a984 <_ux_device_stack_alternate_setting_set>:
/*                                            calculated payload size,    */
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_alternate_setting_set(ULONG interface_value, ULONG alternate_setting_value)
{
 801a984:	b590      	push	{r4, r7, lr}
 801a986:	b0af      	sub	sp, #188	@ 0xbc
 801a988:	af00      	add	r7, sp, #0
 801a98a:	6078      	str	r0, [r7, #4]
 801a98c:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ALTERNATE_SETTING_SET, interface_value, alternate_setting_value, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801a98e:	4bdd      	ldr	r3, [pc, #884]	@ (801ad04 <_ux_device_stack_alternate_setting_set+0x380>)
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	3320      	adds	r3, #32
 801a994:	2298      	movs	r2, #152	@ 0x98
 801a996:	18b9      	adds	r1, r7, r2
 801a998:	600b      	str	r3, [r1, #0]

    /* Protocol error must be reported when it's unconfigured */
    if (device -> ux_slave_device_state != UX_DEVICE_CONFIGURED)
 801a99a:	18bb      	adds	r3, r7, r2
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	2b03      	cmp	r3, #3
 801a9a2:	d001      	beq.n	801a9a8 <_ux_device_stack_alternate_setting_set+0x24>
        return(UX_FUNCTION_NOT_SUPPORTED);
 801a9a4:	2354      	movs	r3, #84	@ 0x54
 801a9a6:	e26e      	b.n	801ae86 <_ux_device_stack_alternate_setting_set+0x502>

    /* Find the current interface.  */
    interface =  device -> ux_slave_device_first_interface;
 801a9a8:	2398      	movs	r3, #152	@ 0x98
 801a9aa:	18fb      	adds	r3, r7, r3
 801a9ac:	681b      	ldr	r3, [r3, #0]
 801a9ae:	22f0      	movs	r2, #240	@ 0xf0
 801a9b0:	589b      	ldr	r3, [r3, r2]
 801a9b2:	22b4      	movs	r2, #180	@ 0xb4
 801a9b4:	18ba      	adds	r2, r7, r2
 801a9b6:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    /* Scan all interfaces if any. */
    while (interface != UX_NULL)
 801a9b8:	e00b      	b.n	801a9d2 <_ux_device_stack_alternate_setting_set+0x4e>
    {

        if (interface -> ux_slave_interface_descriptor.bInterfaceNumber == interface_value)
 801a9ba:	21b4      	movs	r1, #180	@ 0xb4
 801a9bc:	187b      	adds	r3, r7, r1
 801a9be:	681b      	ldr	r3, [r3, #0]
 801a9c0:	695b      	ldr	r3, [r3, #20]
 801a9c2:	687a      	ldr	r2, [r7, #4]
 801a9c4:	429a      	cmp	r2, r3
 801a9c6:	d00a      	beq.n	801a9de <_ux_device_stack_alternate_setting_set+0x5a>
            break;
        else
            interface =  interface -> ux_slave_interface_next_interface;
 801a9c8:	187b      	adds	r3, r7, r1
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a9ce:	187a      	adds	r2, r7, r1
 801a9d0:	6013      	str	r3, [r2, #0]
    while (interface != UX_NULL)
 801a9d2:	23b4      	movs	r3, #180	@ 0xb4
 801a9d4:	18fb      	adds	r3, r7, r3
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d1ee      	bne.n	801a9ba <_ux_device_stack_alternate_setting_set+0x36>
 801a9dc:	e000      	b.n	801a9e0 <_ux_device_stack_alternate_setting_set+0x5c>
            break;
 801a9de:	46c0      	nop			@ (mov r8, r8)
        interface = UX_NULL;
#endif

    /* We must have found the interface pointer for the interface value
       requested by the caller.  */
    if (interface == UX_NULL)
 801a9e0:	23b4      	movs	r3, #180	@ 0xb4
 801a9e2:	18fb      	adds	r3, r7, r3
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	2b00      	cmp	r3, #0
 801a9e8:	d106      	bne.n	801a9f8 <_ux_device_stack_alternate_setting_set+0x74>
    {

        /* Error trap. */
        _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_CLASS, UX_INTERFACE_HANDLE_UNKNOWN);
 801a9ea:	2252      	movs	r2, #82	@ 0x52
 801a9ec:	2107      	movs	r1, #7
 801a9ee:	2002      	movs	r0, #2
 801a9f0:	f7fc fb3e 	bl	8017070 <_ux_system_error_handler>

        /* If trace is enabled, insert this event into the trace buffer.  */
        UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_INTERFACE_HANDLE_UNKNOWN, interface, 0, 0, UX_TRACE_ERRORS, 0, 0)

        return(UX_INTERFACE_HANDLE_UNKNOWN);
 801a9f4:	2352      	movs	r3, #82	@ 0x52
 801a9f6:	e246      	b.n	801ae86 <_ux_device_stack_alternate_setting_set+0x502>
    }

    /* If the host is requesting a change of alternate setting to the current one,
       we do not need to do any work.  */
    if (interface -> ux_slave_interface_descriptor.bAlternateSetting == alternate_setting_value)
 801a9f8:	23b4      	movs	r3, #180	@ 0xb4
 801a9fa:	18fb      	adds	r3, r7, r3
 801a9fc:	681b      	ldr	r3, [r3, #0]
 801a9fe:	699b      	ldr	r3, [r3, #24]
 801aa00:	683a      	ldr	r2, [r7, #0]
 801aa02:	429a      	cmp	r2, r3
 801aa04:	d101      	bne.n	801aa0a <_ux_device_stack_alternate_setting_set+0x86>
        return(UX_SUCCESS);       
 801aa06:	2300      	movs	r3, #0
 801aa08:	e23d      	b.n	801ae86 <_ux_device_stack_alternate_setting_set+0x502>

    return(UX_FUNCTION_NOT_SUPPORTED);
#else

    /* Get the pointer to the DCD. */
    dcd =  &_ux_system_slave->ux_system_slave_dcd;
 801aa0a:	4bbe      	ldr	r3, [pc, #760]	@ (801ad04 <_ux_device_stack_alternate_setting_set+0x380>)
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	2294      	movs	r2, #148	@ 0x94
 801aa10:	18ba      	adds	r2, r7, r2
 801aa12:	6013      	str	r3, [r2, #0]

    /* We may have multiple configurations!  */
    device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801aa14:	4bbb      	ldr	r3, [pc, #748]	@ (801ad04 <_ux_device_stack_alternate_setting_set+0x380>)
 801aa16:	681a      	ldr	r2, [r3, #0]
 801aa18:	2394      	movs	r3, #148	@ 0x94
 801aa1a:	005b      	lsls	r3, r3, #1
 801aa1c:	58d3      	ldr	r3, [r2, r3]
 801aa1e:	22b0      	movs	r2, #176	@ 0xb0
 801aa20:	18ba      	adds	r2, r7, r2
 801aa22:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801aa24:	4bb7      	ldr	r3, [pc, #732]	@ (801ad04 <_ux_device_stack_alternate_setting_set+0x380>)
 801aa26:	681a      	ldr	r2, [r3, #0]
 801aa28:	2396      	movs	r3, #150	@ 0x96
 801aa2a:	005b      	lsls	r3, r3, #1
 801aa2c:	58d3      	ldr	r3, [r2, r3]
 801aa2e:	22ac      	movs	r2, #172	@ 0xac
 801aa30:	18ba      	adds	r2, r7, r2
 801aa32:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor. */
    while (device_framework_length != 0)
 801aa34:	e220      	b.n	801ae78 <_ux_device_stack_alternate_setting_set+0x4f4>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801aa36:	20b0      	movs	r0, #176	@ 0xb0
 801aa38:	183b      	adds	r3, r7, r0
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	781b      	ldrb	r3, [r3, #0]
 801aa3e:	2290      	movs	r2, #144	@ 0x90
 801aa40:	18ba      	adds	r2, r7, r2
 801aa42:	6013      	str	r3, [r2, #0]

        /* And its length.  */
        descriptor_type =*  (device_framework + 1);
 801aa44:	218f      	movs	r1, #143	@ 0x8f
 801aa46:	187b      	adds	r3, r7, r1
 801aa48:	183a      	adds	r2, r7, r0
 801aa4a:	6812      	ldr	r2, [r2, #0]
 801aa4c:	7852      	ldrb	r2, [r2, #1]
 801aa4e:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is a configuration descriptor. */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801aa50:	187b      	adds	r3, r7, r1
 801aa52:	781b      	ldrb	r3, [r3, #0]
 801aa54:	2b02      	cmp	r3, #2
 801aa56:	d000      	beq.n	801aa5a <_ux_device_stack_alternate_setting_set+0xd6>
 801aa58:	e1fd      	b.n	801ae56 <_ux_device_stack_alternate_setting_set+0x4d2>
        {

            /* Parse the descriptor in something more readable. */
            _ux_utility_descriptor_parse(device_framework,
 801aa5a:	2458      	movs	r4, #88	@ 0x58
 801aa5c:	193b      	adds	r3, r7, r4
 801aa5e:	49aa      	ldr	r1, [pc, #680]	@ (801ad08 <_ux_device_stack_alternate_setting_set+0x384>)
 801aa60:	183a      	adds	r2, r7, r0
 801aa62:	6810      	ldr	r0, [r2, #0]
 801aa64:	2208      	movs	r2, #8
 801aa66:	f7fc fbf2 	bl	801724e <_ux_utility_descriptor_parse>
                        _ux_system_configuration_descriptor_structure,
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value.  */
            if (configuration_descriptor.bConfigurationValue == device -> ux_slave_device_configuration_selected)
 801aa6a:	0020      	movs	r0, r4
 801aa6c:	183b      	adds	r3, r7, r0
 801aa6e:	691a      	ldr	r2, [r3, #16]
 801aa70:	2398      	movs	r3, #152	@ 0x98
 801aa72:	18fb      	adds	r3, r7, r3
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	21cc      	movs	r1, #204	@ 0xcc
 801aa78:	585b      	ldr	r3, [r3, r1]
 801aa7a:	429a      	cmp	r2, r3
 801aa7c:	d000      	beq.n	801aa80 <_ux_device_stack_alternate_setting_set+0xfc>
 801aa7e:	e1ea      	b.n	801ae56 <_ux_device_stack_alternate_setting_set+0x4d2>
            {

                /* Limit the search in current configuration descriptor. */
                device_framework_length = configuration_descriptor.wTotalLength;
 801aa80:	183b      	adds	r3, r7, r0
 801aa82:	689b      	ldr	r3, [r3, #8]
 801aa84:	22ac      	movs	r2, #172	@ 0xac
 801aa86:	18ba      	adds	r2, r7, r2
 801aa88:	6013      	str	r3, [r2, #0]

                /* We have found the configuration value that was selected by the host   
                   We need to scan all the interface descriptors following this
                   configuration descriptor and locate the interface for which the alternate
                   setting must be changed. */
                while (device_framework_length != 0)
 801aa8a:	e1dd      	b.n	801ae48 <_ux_device_stack_alternate_setting_set+0x4c4>
                {

                    /* Get the length of the current descriptor.  */
                    descriptor_length =  (ULONG) *device_framework;
 801aa8c:	20b0      	movs	r0, #176	@ 0xb0
 801aa8e:	183b      	adds	r3, r7, r0
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	781b      	ldrb	r3, [r3, #0]
 801aa94:	2290      	movs	r2, #144	@ 0x90
 801aa96:	18ba      	adds	r2, r7, r2
 801aa98:	6013      	str	r3, [r2, #0]

                    /* And its type.  */
                    descriptor_type = *(device_framework + 1); 
 801aa9a:	218f      	movs	r1, #143	@ 0x8f
 801aa9c:	187b      	adds	r3, r7, r1
 801aa9e:	183a      	adds	r2, r7, r0
 801aaa0:	6812      	ldr	r2, [r2, #0]
 801aaa2:	7852      	ldrb	r2, [r2, #1]
 801aaa4:	701a      	strb	r2, [r3, #0]
                
                    /* Check if this is an interface descriptor. */
                    if (descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 801aaa6:	187b      	adds	r3, r7, r1
 801aaa8:	781b      	ldrb	r3, [r3, #0]
 801aaaa:	2b04      	cmp	r3, #4
 801aaac:	d000      	beq.n	801aab0 <_ux_device_stack_alternate_setting_set+0x12c>
 801aaae:	e1ba      	b.n	801ae26 <_ux_device_stack_alternate_setting_set+0x4a2>
                    {

                        /* Parse the descriptor in something more readable. */
                        _ux_utility_descriptor_parse(device_framework,
 801aab0:	2434      	movs	r4, #52	@ 0x34
 801aab2:	193b      	adds	r3, r7, r4
 801aab4:	4995      	ldr	r1, [pc, #596]	@ (801ad0c <_ux_device_stack_alternate_setting_set+0x388>)
 801aab6:	183a      	adds	r2, r7, r0
 801aab8:	6810      	ldr	r0, [r2, #0]
 801aaba:	2209      	movs	r2, #9
 801aabc:	f7fc fbc7 	bl	801724e <_ux_utility_descriptor_parse>
                                    _ux_system_interface_descriptor_structure,
                                    UX_INTERFACE_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &interface_descriptor);

                        /* Check if this is the interface we are searching. */
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 801aac0:	193b      	adds	r3, r7, r4
 801aac2:	689b      	ldr	r3, [r3, #8]
 801aac4:	687a      	ldr	r2, [r7, #4]
 801aac6:	429a      	cmp	r2, r3
 801aac8:	d000      	beq.n	801aacc <_ux_device_stack_alternate_setting_set+0x148>
 801aaca:	e1ac      	b.n	801ae26 <_ux_device_stack_alternate_setting_set+0x4a2>
                            interface_descriptor.bAlternateSetting == alternate_setting_value)
 801aacc:	193b      	adds	r3, r7, r4
 801aace:	68db      	ldr	r3, [r3, #12]
                        if (interface_descriptor.bInterfaceNumber == interface_value &&
 801aad0:	683a      	ldr	r2, [r7, #0]
 801aad2:	429a      	cmp	r2, r3
 801aad4:	d000      	beq.n	801aad8 <_ux_device_stack_alternate_setting_set+0x154>
 801aad6:	e1a6      	b.n	801ae26 <_ux_device_stack_alternate_setting_set+0x4a2>
                        {

                            /* We have found the right interface and alternate setting. Before
                               we mount all the endpoints for this interface, we need to
                               unmount the endpoints associated with the previous alternate setting.  */
                            endpoint =  interface -> ux_slave_interface_first_endpoint;
 801aad8:	23b4      	movs	r3, #180	@ 0xb4
 801aada:	18fb      	adds	r3, r7, r3
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801aae0:	22a8      	movs	r2, #168	@ 0xa8
 801aae2:	18ba      	adds	r2, r7, r2
 801aae4:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 801aae6:	e02c      	b.n	801ab42 <_ux_device_stack_alternate_setting_set+0x1be>
                            {

                                /* Abort any pending transfer.  */
                                _ux_device_stack_transfer_all_request_abort(endpoint, UX_TRANSFER_BUS_RESET);
 801aae8:	24a8      	movs	r4, #168	@ 0xa8
 801aaea:	193b      	adds	r3, r7, r4
 801aaec:	681b      	ldr	r3, [r3, #0]
 801aaee:	2126      	movs	r1, #38	@ 0x26
 801aaf0:	0018      	movs	r0, r3
 801aaf2:	f001 fdcd 	bl	801c690 <_ux_device_stack_transfer_all_request_abort>

                                /* The device controller must be called to destroy the endpoint.  */
                                dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, (VOID *) endpoint);
 801aaf6:	2194      	movs	r1, #148	@ 0x94
 801aaf8:	187b      	adds	r3, r7, r1
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	699b      	ldr	r3, [r3, #24]
 801aafe:	193a      	adds	r2, r7, r4
 801ab00:	6812      	ldr	r2, [r2, #0]
 801ab02:	1879      	adds	r1, r7, r1
 801ab04:	6808      	ldr	r0, [r1, #0]
 801ab06:	210f      	movs	r1, #15
 801ab08:	4798      	blx	r3

                                /* Get the next endpoint.  */
                                next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801ab0a:	193b      	adds	r3, r7, r4
 801ab0c:	681b      	ldr	r3, [r3, #0]
 801ab0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ab10:	67bb      	str	r3, [r7, #120]	@ 0x78
                
                                /* Free the endpoint.  */
                                endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801ab12:	0021      	movs	r1, r4
 801ab14:	187b      	adds	r3, r7, r1
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	2200      	movs	r2, #0
 801ab1a:	601a      	str	r2, [r3, #0]
                        
                                /* Make sure the endpoint instance is now cleaned up.  */
                                endpoint -> ux_slave_endpoint_state =  0;
 801ab1c:	187b      	adds	r3, r7, r1
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	2200      	movs	r2, #0
 801ab22:	605a      	str	r2, [r3, #4]
                                endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801ab24:	187b      	adds	r3, r7, r1
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	2200      	movs	r2, #0
 801ab2a:	625a      	str	r2, [r3, #36]	@ 0x24
                                endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 801ab2c:	187b      	adds	r3, r7, r1
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	2200      	movs	r2, #0
 801ab32:	629a      	str	r2, [r3, #40]	@ 0x28
                                endpoint -> ux_slave_endpoint_device =  UX_NULL;
 801ab34:	187b      	adds	r3, r7, r1
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	2200      	movs	r2, #0
 801ab3a:	62da      	str	r2, [r3, #44]	@ 0x2c
                                                        
                                /* Now we refresh the endpoint pointer.  */
                                endpoint =  next_endpoint;
 801ab3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ab3e:	187a      	adds	r2, r7, r1
 801ab40:	6013      	str	r3, [r2, #0]
                            while (endpoint != UX_NULL)
 801ab42:	23a8      	movs	r3, #168	@ 0xa8
 801ab44:	18fb      	adds	r3, r7, r3
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	2b00      	cmp	r3, #0
 801ab4a:	d1cd      	bne.n	801aae8 <_ux_device_stack_alternate_setting_set+0x164>
                            }

                            /* Now clear the interface endpoint entry.  */
                            interface -> ux_slave_interface_first_endpoint = UX_NULL;
 801ab4c:	23b4      	movs	r3, #180	@ 0xb4
 801ab4e:	18fb      	adds	r3, r7, r3
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	2200      	movs	r2, #0
 801ab54:	635a      	str	r2, [r3, #52]	@ 0x34

                            /* Point beyond the interface descriptor.  */
                            device_framework_length -=  (ULONG) *device_framework;
 801ab56:	21b0      	movs	r1, #176	@ 0xb0
 801ab58:	187b      	adds	r3, r7, r1
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	781b      	ldrb	r3, [r3, #0]
 801ab5e:	001a      	movs	r2, r3
 801ab60:	20ac      	movs	r0, #172	@ 0xac
 801ab62:	183b      	adds	r3, r7, r0
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	1a9b      	subs	r3, r3, r2
 801ab68:	183a      	adds	r2, r7, r0
 801ab6a:	6013      	str	r3, [r2, #0]
                            device_framework +=  (ULONG) *device_framework;
 801ab6c:	187b      	adds	r3, r7, r1
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	781b      	ldrb	r3, [r3, #0]
 801ab72:	001a      	movs	r2, r3
 801ab74:	187b      	adds	r3, r7, r1
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	189b      	adds	r3, r3, r2
 801ab7a:	187a      	adds	r2, r7, r1
 801ab7c:	6013      	str	r3, [r2, #0]
                        
                            /* Parse the device framework and locate endpoint descriptor(s).  */
                            while (device_framework_length != 0)
 801ab7e:	e10a      	b.n	801ad96 <_ux_device_stack_alternate_setting_set+0x412>
                            {
                        
                                /* Get the length of the current descriptor.  */
                                descriptor_length =  (ULONG) *device_framework;
 801ab80:	22b0      	movs	r2, #176	@ 0xb0
 801ab82:	18bb      	adds	r3, r7, r2
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	781b      	ldrb	r3, [r3, #0]
 801ab88:	2190      	movs	r1, #144	@ 0x90
 801ab8a:	1879      	adds	r1, r7, r1
 801ab8c:	600b      	str	r3, [r1, #0]
                        
                                /* And its type.  */
                                descriptor_type =  *(device_framework + 1);
 801ab8e:	218f      	movs	r1, #143	@ 0x8f
 801ab90:	187b      	adds	r3, r7, r1
 801ab92:	18ba      	adds	r2, r7, r2
 801ab94:	6812      	ldr	r2, [r2, #0]
 801ab96:	7852      	ldrb	r2, [r2, #1]
 801ab98:	701a      	strb	r2, [r3, #0]
                                        
                                /* Check if this is an endpoint descriptor.  */
                                switch(descriptor_type)
 801ab9a:	187b      	adds	r3, r7, r1
 801ab9c:	781b      	ldrb	r3, [r3, #0]
 801ab9e:	2b05      	cmp	r3, #5
 801aba0:	d008      	beq.n	801abb4 <_ux_device_stack_alternate_setting_set+0x230>
 801aba2:	dd00      	ble.n	801aba6 <_ux_device_stack_alternate_setting_set+0x222>
 801aba4:	e0e5      	b.n	801ad72 <_ux_device_stack_alternate_setting_set+0x3ee>
 801aba6:	2b02      	cmp	r3, #2
 801aba8:	d100      	bne.n	801abac <_ux_device_stack_alternate_setting_set+0x228>
 801abaa:	e0db      	b.n	801ad64 <_ux_device_stack_alternate_setting_set+0x3e0>
 801abac:	2b04      	cmp	r3, #4
 801abae:	d100      	bne.n	801abb2 <_ux_device_stack_alternate_setting_set+0x22e>
 801abb0:	e0d8      	b.n	801ad64 <_ux_device_stack_alternate_setting_set+0x3e0>


                                default:
                                
                                    /* We have found another descriptor embedded in the interface. Ignore it.  */
                                    break;
 801abb2:	e0de      	b.n	801ad72 <_ux_device_stack_alternate_setting_set+0x3ee>
                                    endpoint = device -> ux_slave_device_endpoints_pool;
 801abb4:	2198      	movs	r1, #152	@ 0x98
 801abb6:	187b      	adds	r3, r7, r1
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	22fc      	movs	r2, #252	@ 0xfc
 801abbc:	589b      	ldr	r3, [r3, r2]
 801abbe:	22a8      	movs	r2, #168	@ 0xa8
 801abc0:	18ba      	adds	r2, r7, r2
 801abc2:	6013      	str	r3, [r2, #0]
                                    endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 801abc4:	187b      	adds	r3, r7, r1
 801abc6:	681a      	ldr	r2, [r3, #0]
 801abc8:	2380      	movs	r3, #128	@ 0x80
 801abca:	005b      	lsls	r3, r3, #1
 801abcc:	58d3      	ldr	r3, [r2, r3]
 801abce:	22a0      	movs	r2, #160	@ 0xa0
 801abd0:	18ba      	adds	r2, r7, r2
 801abd2:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 801abd4:	e016      	b.n	801ac04 <_ux_device_stack_alternate_setting_set+0x280>
                                        if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 801abd6:	22a8      	movs	r2, #168	@ 0xa8
 801abd8:	18bb      	adds	r3, r7, r2
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	2b00      	cmp	r3, #0
 801abe0:	d104      	bne.n	801abec <_ux_device_stack_alternate_setting_set+0x268>
                                            endpoint ->    ux_slave_endpoint_status = UX_USED;
 801abe2:	18bb      	adds	r3, r7, r2
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	2201      	movs	r2, #1
 801abe8:	601a      	str	r2, [r3, #0]
                                            break;
 801abea:	e010      	b.n	801ac0e <_ux_device_stack_alternate_setting_set+0x28a>
                                        endpoint++;
 801abec:	22a8      	movs	r2, #168	@ 0xa8
 801abee:	18bb      	adds	r3, r7, r2
 801abf0:	681b      	ldr	r3, [r3, #0]
 801abf2:	3390      	adds	r3, #144	@ 0x90
 801abf4:	18ba      	adds	r2, r7, r2
 801abf6:	6013      	str	r3, [r2, #0]
                                       endpoints_pool_number--; 
 801abf8:	22a0      	movs	r2, #160	@ 0xa0
 801abfa:	18bb      	adds	r3, r7, r2
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	3b01      	subs	r3, #1
 801ac00:	18ba      	adds	r2, r7, r2
 801ac02:	6013      	str	r3, [r2, #0]
                                    while (endpoints_pool_number != 0)
 801ac04:	23a0      	movs	r3, #160	@ 0xa0
 801ac06:	18fb      	adds	r3, r7, r3
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	d1e3      	bne.n	801abd6 <_ux_device_stack_alternate_setting_set+0x252>
                                    if (endpoints_pool_number == 0)
 801ac0e:	23a0      	movs	r3, #160	@ 0xa0
 801ac10:	18fb      	adds	r3, r7, r3
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	d101      	bne.n	801ac1c <_ux_device_stack_alternate_setting_set+0x298>
                                        return(UX_MEMORY_INSUFFICIENT);
 801ac18:	2312      	movs	r3, #18
 801ac1a:	e134      	b.n	801ae86 <_ux_device_stack_alternate_setting_set+0x502>
                                                    (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 801ac1c:	24a8      	movs	r4, #168	@ 0xa8
 801ac1e:	193b      	adds	r3, r7, r4
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	330c      	adds	r3, #12
                                    _ux_utility_descriptor_parse(device_framework,
 801ac24:	493a      	ldr	r1, [pc, #232]	@ (801ad10 <_ux_device_stack_alternate_setting_set+0x38c>)
 801ac26:	22b0      	movs	r2, #176	@ 0xb0
 801ac28:	18ba      	adds	r2, r7, r2
 801ac2a:	6810      	ldr	r0, [r2, #0]
 801ac2c:	2206      	movs	r2, #6
 801ac2e:	f7fc fb0e 	bl	801724e <_ux_utility_descriptor_parse>
                                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801ac32:	0021      	movs	r1, r4
 801ac34:	187b      	adds	r3, r7, r1
 801ac36:	681b      	ldr	r3, [r3, #0]
 801ac38:	3330      	adds	r3, #48	@ 0x30
 801ac3a:	2280      	movs	r2, #128	@ 0x80
 801ac3c:	18ba      	adds	r2, r7, r2
 801ac3e:	6013      	str	r3, [r2, #0]
                                            endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801ac40:	187b      	adds	r3, r7, r1
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	69db      	ldr	r3, [r3, #28]
                                    max_transfer_length =
 801ac46:	055b      	lsls	r3, r3, #21
 801ac48:	0d5b      	lsrs	r3, r3, #21
 801ac4a:	209c      	movs	r0, #156	@ 0x9c
 801ac4c:	183a      	adds	r2, r7, r0
 801ac4e:	6013      	str	r3, [r2, #0]
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801ac50:	4b2c      	ldr	r3, [pc, #176]	@ (801ad04 <_ux_device_stack_alternate_setting_set+0x380>)
 801ac52:	681a      	ldr	r2, [r3, #0]
 801ac54:	23d0      	movs	r3, #208	@ 0xd0
 801ac56:	005b      	lsls	r3, r3, #1
 801ac58:	58d3      	ldr	r3, [r2, r3]
 801ac5a:	2b02      	cmp	r3, #2
 801ac5c:	d11b      	bne.n	801ac96 <_ux_device_stack_alternate_setting_set+0x312>
                                        (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 801ac5e:	187b      	adds	r3, r7, r1
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	699b      	ldr	r3, [r3, #24]
 801ac64:	2201      	movs	r2, #1
 801ac66:	4013      	ands	r3, r2
                                    if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801ac68:	d015      	beq.n	801ac96 <_ux_device_stack_alternate_setting_set+0x312>
                                        n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801ac6a:	187b      	adds	r3, r7, r1
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	69da      	ldr	r2, [r3, #28]
 801ac70:	23c0      	movs	r3, #192	@ 0xc0
 801ac72:	015b      	lsls	r3, r3, #5
 801ac74:	4013      	ands	r3, r2
 801ac76:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                        if (n_trans)
 801ac78:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac7a:	2b00      	cmp	r3, #0
 801ac7c:	d00b      	beq.n	801ac96 <_ux_device_stack_alternate_setting_set+0x312>
                                            n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 801ac7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac80:	0adb      	lsrs	r3, r3, #11
 801ac82:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                            n_trans ++;
 801ac84:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801ac86:	3301      	adds	r3, #1
 801ac88:	67fb      	str	r3, [r7, #124]	@ 0x7c
                                            max_transfer_length *= n_trans;
 801ac8a:	183b      	adds	r3, r7, r0
 801ac8c:	681b      	ldr	r3, [r3, #0]
 801ac8e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801ac90:	4353      	muls	r3, r2
 801ac92:	183a      	adds	r2, r7, r0
 801ac94:	6013      	str	r3, [r2, #0]
                                    transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 801ac96:	2180      	movs	r1, #128	@ 0x80
 801ac98:	187b      	adds	r3, r7, r1
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	229c      	movs	r2, #156	@ 0x9c
 801ac9e:	18ba      	adds	r2, r7, r2
 801aca0:	6812      	ldr	r2, [r2, #0]
 801aca2:	621a      	str	r2, [r3, #32]
                                    transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 801aca4:	187b      	adds	r3, r7, r1
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	24a8      	movs	r4, #168	@ 0xa8
 801acaa:	193a      	adds	r2, r7, r4
 801acac:	6812      	ldr	r2, [r2, #0]
 801acae:	609a      	str	r2, [r3, #8]
                                    transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 801acb0:	187b      	adds	r3, r7, r1
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	2201      	movs	r2, #1
 801acb6:	4252      	negs	r2, r2
 801acb8:	64da      	str	r2, [r3, #76]	@ 0x4c
                                    endpoint -> ux_slave_endpoint_interface =  interface;
 801acba:	193b      	adds	r3, r7, r4
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	22b4      	movs	r2, #180	@ 0xb4
 801acc0:	18ba      	adds	r2, r7, r2
 801acc2:	6812      	ldr	r2, [r2, #0]
 801acc4:	629a      	str	r2, [r3, #40]	@ 0x28
                                    endpoint -> ux_slave_endpoint_device =  device;
 801acc6:	193b      	adds	r3, r7, r4
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	2298      	movs	r2, #152	@ 0x98
 801accc:	18ba      	adds	r2, r7, r2
 801acce:	6812      	ldr	r2, [r2, #0]
 801acd0:	62da      	str	r2, [r3, #44]	@ 0x2c
                                    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 801acd2:	2194      	movs	r1, #148	@ 0x94
 801acd4:	187b      	adds	r3, r7, r1
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	699b      	ldr	r3, [r3, #24]
 801acda:	193a      	adds	r2, r7, r4
 801acdc:	6812      	ldr	r2, [r2, #0]
 801acde:	1879      	adds	r1, r7, r1
 801ace0:	6808      	ldr	r0, [r1, #0]
 801ace2:	210e      	movs	r1, #14
 801ace4:	4798      	blx	r3
 801ace6:	0003      	movs	r3, r0
 801ace8:	2184      	movs	r1, #132	@ 0x84
 801acea:	187a      	adds	r2, r7, r1
 801acec:	6013      	str	r3, [r2, #0]
                                    if (status != UX_SUCCESS)
 801acee:	187b      	adds	r3, r7, r1
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d00e      	beq.n	801ad14 <_ux_device_stack_alternate_setting_set+0x390>
                                        endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 801acf6:	193b      	adds	r3, r7, r4
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	2200      	movs	r2, #0
 801acfc:	601a      	str	r2, [r3, #0]
                                        return(status);
 801acfe:	187b      	adds	r3, r7, r1
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	e0c0      	b.n	801ae86 <_ux_device_stack_alternate_setting_set+0x502>
 801ad04:	200116a4 	.word	0x200116a4
 801ad08:	2000002c 	.word	0x2000002c
 801ad0c:	20000034 	.word	0x20000034
 801ad10:	20000014 	.word	0x20000014
                                    if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 801ad14:	22b4      	movs	r2, #180	@ 0xb4
 801ad16:	18bb      	adds	r3, r7, r2
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ad1c:	2b00      	cmp	r3, #0
 801ad1e:	d106      	bne.n	801ad2e <_ux_device_stack_alternate_setting_set+0x3aa>
                                        interface -> ux_slave_interface_first_endpoint =  endpoint;
 801ad20:	18bb      	adds	r3, r7, r2
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	22a8      	movs	r2, #168	@ 0xa8
 801ad26:	18ba      	adds	r2, r7, r2
 801ad28:	6812      	ldr	r2, [r2, #0]
 801ad2a:	635a      	str	r2, [r3, #52]	@ 0x34
                                    break;
 801ad2c:	e022      	b.n	801ad74 <_ux_device_stack_alternate_setting_set+0x3f0>
                                        endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 801ad2e:	23b4      	movs	r3, #180	@ 0xb4
 801ad30:	18fb      	adds	r3, r7, r3
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ad36:	22a4      	movs	r2, #164	@ 0xa4
 801ad38:	18ba      	adds	r2, r7, r2
 801ad3a:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801ad3c:	e005      	b.n	801ad4a <_ux_device_stack_alternate_setting_set+0x3c6>
                                            endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 801ad3e:	22a4      	movs	r2, #164	@ 0xa4
 801ad40:	18bb      	adds	r3, r7, r2
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad46:	18ba      	adds	r2, r7, r2
 801ad48:	6013      	str	r3, [r2, #0]
                                        while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801ad4a:	22a4      	movs	r2, #164	@ 0xa4
 801ad4c:	18bb      	adds	r3, r7, r2
 801ad4e:	681b      	ldr	r3, [r3, #0]
 801ad50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d1f3      	bne.n	801ad3e <_ux_device_stack_alternate_setting_set+0x3ba>
                                        endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801ad56:	18bb      	adds	r3, r7, r2
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	22a8      	movs	r2, #168	@ 0xa8
 801ad5c:	18ba      	adds	r2, r7, r2
 801ad5e:	6812      	ldr	r2, [r2, #0]
 801ad60:	625a      	str	r2, [r3, #36]	@ 0x24
                                    break;
 801ad62:	e007      	b.n	801ad74 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    device_framework_length =  descriptor_length;
 801ad64:	2390      	movs	r3, #144	@ 0x90
 801ad66:	18fb      	adds	r3, r7, r3
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	22ac      	movs	r2, #172	@ 0xac
 801ad6c:	18ba      	adds	r2, r7, r2
 801ad6e:	6013      	str	r3, [r2, #0]
                                    break;
 801ad70:	e000      	b.n	801ad74 <_ux_device_stack_alternate_setting_set+0x3f0>
                                    break;
 801ad72:	46c0      	nop			@ (mov r8, r8)
                                }
                        
                                /* Adjust what is left of the device framework.  */
                                device_framework_length -=  descriptor_length;
 801ad74:	21ac      	movs	r1, #172	@ 0xac
 801ad76:	187b      	adds	r3, r7, r1
 801ad78:	681a      	ldr	r2, [r3, #0]
 801ad7a:	2090      	movs	r0, #144	@ 0x90
 801ad7c:	183b      	adds	r3, r7, r0
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	1ad3      	subs	r3, r2, r3
 801ad82:	187a      	adds	r2, r7, r1
 801ad84:	6013      	str	r3, [r2, #0]
                        
                                /* Point to the next descriptor.  */
                                device_framework +=  descriptor_length;
 801ad86:	21b0      	movs	r1, #176	@ 0xb0
 801ad88:	187b      	adds	r3, r7, r1
 801ad8a:	681a      	ldr	r2, [r3, #0]
 801ad8c:	183b      	adds	r3, r7, r0
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	18d3      	adds	r3, r2, r3
 801ad92:	187a      	adds	r2, r7, r1
 801ad94:	6013      	str	r3, [r2, #0]
                            while (device_framework_length != 0)
 801ad96:	23ac      	movs	r3, #172	@ 0xac
 801ad98:	18fb      	adds	r3, r7, r3
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d000      	beq.n	801ada2 <_ux_device_stack_alternate_setting_set+0x41e>
 801ada0:	e6ee      	b.n	801ab80 <_ux_device_stack_alternate_setting_set+0x1fc>
                            }

                            /* The interface descriptor in the current class must be changed to the new alternate setting.  */
                            _ux_utility_memory_copy(&interface -> ux_slave_interface_descriptor, &interface_descriptor, sizeof(UX_INTERFACE_DESCRIPTOR)); /* Use case of memcpy is verified. */
 801ada2:	24b4      	movs	r4, #180	@ 0xb4
 801ada4:	193b      	adds	r3, r7, r4
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	330c      	adds	r3, #12
 801adaa:	2234      	movs	r2, #52	@ 0x34
 801adac:	18b9      	adds	r1, r7, r2
 801adae:	2224      	movs	r2, #36	@ 0x24
 801adb0:	0018      	movs	r0, r3
 801adb2:	f7fc fcbb 	bl	801772c <_ux_utility_memory_copy>
                            
                            /* Get the class for the interface.  */
                            class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 801adb6:	4b36      	ldr	r3, [pc, #216]	@ (801ae90 <_ux_device_stack_alternate_setting_set+0x50c>)
 801adb8:	681a      	ldr	r2, [r3, #0]
 801adba:	193b      	adds	r3, r7, r4
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	695b      	ldr	r3, [r3, #20]
 801adc0:	3358      	adds	r3, #88	@ 0x58
 801adc2:	009b      	lsls	r3, r3, #2
 801adc4:	589b      	ldr	r3, [r3, r2]
 801adc6:	2288      	movs	r2, #136	@ 0x88
 801adc8:	18b9      	adds	r1, r7, r2
 801adca:	600b      	str	r3, [r1, #0]

                            /* Check if class driver is available. */
                            if (class == UX_NULL || class -> ux_slave_class_status == UX_UNUSED)
 801adcc:	18bb      	adds	r3, r7, r2
 801adce:	681b      	ldr	r3, [r3, #0]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d004      	beq.n	801adde <_ux_device_stack_alternate_setting_set+0x45a>
 801add4:	18bb      	adds	r3, r7, r2
 801add6:	681b      	ldr	r3, [r3, #0]
 801add8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801adda:	2b00      	cmp	r3, #0
 801addc:	d101      	bne.n	801ade2 <_ux_device_stack_alternate_setting_set+0x45e>
                            {

                                return (UX_NO_CLASS_MATCH);
 801adde:	2357      	movs	r3, #87	@ 0x57
 801ade0:	e051      	b.n	801ae86 <_ux_device_stack_alternate_setting_set+0x502>
                            }
                        
                            /* The interface attached to this configuration must be changed at the class
                               level.  */
                            class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_CHANGE;
 801ade2:	2008      	movs	r0, #8
 801ade4:	183b      	adds	r3, r7, r0
 801ade6:	2206      	movs	r2, #6
 801ade8:	601a      	str	r2, [r3, #0]
                            class_command.ux_slave_class_command_interface =   (VOID *) interface;
 801adea:	183b      	adds	r3, r7, r0
 801adec:	21b4      	movs	r1, #180	@ 0xb4
 801adee:	187a      	adds	r2, r7, r1
 801adf0:	6812      	ldr	r2, [r2, #0]
 801adf2:	609a      	str	r2, [r3, #8]

                            /* And store it.  */
                            class_command.ux_slave_class_command_class_ptr =  class;
 801adf4:	183b      	adds	r3, r7, r0
 801adf6:	2488      	movs	r4, #136	@ 0x88
 801adf8:	193a      	adds	r2, r7, r4
 801adfa:	6812      	ldr	r2, [r2, #0]
 801adfc:	621a      	str	r2, [r3, #32]
                            
                            /* We can now memorize the interface pointer associated with this class.  */
                            class -> ux_slave_class_interface = interface;
 801adfe:	193b      	adds	r3, r7, r4
 801ae00:	681a      	ldr	r2, [r3, #0]
 801ae02:	2388      	movs	r3, #136	@ 0x88
 801ae04:	005b      	lsls	r3, r3, #1
 801ae06:	1879      	adds	r1, r7, r1
 801ae08:	6809      	ldr	r1, [r1, #0]
 801ae0a:	50d1      	str	r1, [r2, r3]
                            
                            /* We have found a potential candidate. Call this registered class entry function to change the alternate setting.  */
                            status = class -> ux_slave_class_entry_function(&class_command);
 801ae0c:	193b      	adds	r3, r7, r4
 801ae0e:	681b      	ldr	r3, [r3, #0]
 801ae10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ae12:	183a      	adds	r2, r7, r0
 801ae14:	0010      	movs	r0, r2
 801ae16:	4798      	blx	r3
 801ae18:	0003      	movs	r3, r0
 801ae1a:	2284      	movs	r2, #132	@ 0x84
 801ae1c:	18b9      	adds	r1, r7, r2
 801ae1e:	600b      	str	r3, [r1, #0]

                            /* We are done here.  */
                            return(status); 
 801ae20:	18bb      	adds	r3, r7, r2
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	e02f      	b.n	801ae86 <_ux_device_stack_alternate_setting_set+0x502>
                        }
                    }               

                    /* Adjust what is left of the device framework.  */
                    device_framework_length -=  descriptor_length;
 801ae26:	21ac      	movs	r1, #172	@ 0xac
 801ae28:	187b      	adds	r3, r7, r1
 801ae2a:	681a      	ldr	r2, [r3, #0]
 801ae2c:	2090      	movs	r0, #144	@ 0x90
 801ae2e:	183b      	adds	r3, r7, r0
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	1ad3      	subs	r3, r2, r3
 801ae34:	187a      	adds	r2, r7, r1
 801ae36:	6013      	str	r3, [r2, #0]

                    /* Point to the next descriptor.  */
                    device_framework +=  descriptor_length;
 801ae38:	21b0      	movs	r1, #176	@ 0xb0
 801ae3a:	187b      	adds	r3, r7, r1
 801ae3c:	681a      	ldr	r2, [r3, #0]
 801ae3e:	183b      	adds	r3, r7, r0
 801ae40:	681b      	ldr	r3, [r3, #0]
 801ae42:	18d3      	adds	r3, r2, r3
 801ae44:	187a      	adds	r2, r7, r1
 801ae46:	6013      	str	r3, [r2, #0]
                while (device_framework_length != 0)
 801ae48:	23ac      	movs	r3, #172	@ 0xac
 801ae4a:	18fb      	adds	r3, r7, r3
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d000      	beq.n	801ae54 <_ux_device_stack_alternate_setting_set+0x4d0>
 801ae52:	e61b      	b.n	801aa8c <_ux_device_stack_alternate_setting_set+0x108>
                }

                /* In case alter setting not found, report protocol error. */
                break;
 801ae54:	e016      	b.n	801ae84 <_ux_device_stack_alternate_setting_set+0x500>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801ae56:	21ac      	movs	r1, #172	@ 0xac
 801ae58:	187b      	adds	r3, r7, r1
 801ae5a:	681a      	ldr	r2, [r3, #0]
 801ae5c:	2090      	movs	r0, #144	@ 0x90
 801ae5e:	183b      	adds	r3, r7, r0
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	1ad3      	subs	r3, r2, r3
 801ae64:	187a      	adds	r2, r7, r1
 801ae66:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 801ae68:	21b0      	movs	r1, #176	@ 0xb0
 801ae6a:	187b      	adds	r3, r7, r1
 801ae6c:	681a      	ldr	r2, [r3, #0]
 801ae6e:	183b      	adds	r3, r7, r0
 801ae70:	681b      	ldr	r3, [r3, #0]
 801ae72:	18d3      	adds	r3, r2, r3
 801ae74:	187a      	adds	r2, r7, r1
 801ae76:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 801ae78:	23ac      	movs	r3, #172	@ 0xac
 801ae7a:	18fb      	adds	r3, r7, r3
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d000      	beq.n	801ae84 <_ux_device_stack_alternate_setting_set+0x500>
 801ae82:	e5d8      	b.n	801aa36 <_ux_device_stack_alternate_setting_set+0xb2>
    }

    /* Return error completion.  */
    return(UX_ERROR);
 801ae84:	23ff      	movs	r3, #255	@ 0xff
#endif
}
 801ae86:	0018      	movs	r0, r3
 801ae88:	46bd      	mov	sp, r7
 801ae8a:	b02f      	add	sp, #188	@ 0xbc
 801ae8c:	bd90      	pop	{r4, r7, pc}
 801ae8e:	46c0      	nop			@ (mov r8, r8)
 801ae90:	200116a4 	.word	0x200116a4

0801ae94 <_ux_device_stack_class_register>:
UINT  _ux_device_stack_class_register(UCHAR *class_name,
                        UINT (*class_entry_function)(struct UX_SLAVE_CLASS_COMMAND_STRUCT *),
                        ULONG configuration_number,
                        ULONG interface_number,
                        VOID *parameter)
{
 801ae94:	b580      	push	{r7, lr}
 801ae96:	b094      	sub	sp, #80	@ 0x50
 801ae98:	af00      	add	r7, sp, #0
 801ae9a:	60f8      	str	r0, [r7, #12]
 801ae9c:	60b9      	str	r1, [r7, #8]
 801ae9e:	607a      	str	r2, [r7, #4]
 801aea0:	603b      	str	r3, [r7, #0]

UX_SLAVE_CLASS              *class_inst;
UINT                        status;
UX_SLAVE_CLASS_COMMAND      command;
UINT                        class_name_length =  0;
 801aea2:	2300      	movs	r3, #0
 801aea4:	617b      	str	r3, [r7, #20]
ULONG                       class_index;
#endif


    /* Get the length of the class name (exclude null-terminator).  */
    status =  _ux_utility_string_length_check(class_name, &class_name_length, UX_MAX_CLASS_NAME_LENGTH);
 801aea6:	2314      	movs	r3, #20
 801aea8:	18f9      	adds	r1, r7, r3
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	223f      	movs	r2, #63	@ 0x3f
 801aeae:	0018      	movs	r0, r3
 801aeb0:	f7fc fe6a 	bl	8017b88 <_ux_utility_string_length_check>
 801aeb4:	0003      	movs	r3, r0
 801aeb6:	647b      	str	r3, [r7, #68]	@ 0x44
    if (status)
 801aeb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	d001      	beq.n	801aec2 <_ux_device_stack_class_register+0x2e>
        return(status);
 801aebe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aec0:	e04f      	b.n	801af62 <_ux_device_stack_class_register+0xce>

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLASS_REGISTER, class_name, interface_number, parameter, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get first class.  */
    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801aec2:	4b2a      	ldr	r3, [pc, #168]	@ (801af6c <_ux_device_stack_class_register+0xd8>)
 801aec4:	681a      	ldr	r2, [r3, #0]
 801aec6:	23ae      	movs	r3, #174	@ 0xae
 801aec8:	005b      	lsls	r3, r3, #1
 801aeca:	58d3      	ldr	r3, [r2, r3]
 801aecc:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
    /* We need to parse the class table to find an empty spot.  */
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801aece:	2300      	movs	r3, #0
 801aed0:	64bb      	str	r3, [r7, #72]	@ 0x48
 801aed2:	e03d      	b.n	801af50 <_ux_device_stack_class_register+0xbc>
    {
#endif

        /* Check if this class is already used.  */
        if (class_inst -> ux_slave_class_status == UX_UNUSED)
 801aed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aed6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d132      	bne.n	801af42 <_ux_device_stack_class_register+0xae>

#if defined(UX_NAME_REFERENCED_BY_POINTER)
            class_inst -> ux_slave_class_name = (const UCHAR *)class_name;
#else
            /* We have found a free container for the class. Copy the name (with null-terminator).  */
            _ux_utility_memory_copy(class_inst -> ux_slave_class_name, class_name, class_name_length + 1); /* Use case of memcpy is verified. */
 801aedc:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 801aede:	697b      	ldr	r3, [r7, #20]
 801aee0:	1c5a      	adds	r2, r3, #1
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	0019      	movs	r1, r3
 801aee6:	f7fc fc21 	bl	801772c <_ux_utility_memory_copy>
#endif
            
            /* Memorize the entry function of this class.  */
            class_inst -> ux_slave_class_entry_function =  class_entry_function;
 801aeea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aeec:	68ba      	ldr	r2, [r7, #8]
 801aeee:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Memorize the pointer to the application parameter.  */
            class_inst -> ux_slave_class_interface_parameter =  parameter;
 801aef0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801aef2:	2382      	movs	r3, #130	@ 0x82
 801aef4:	005b      	lsls	r3, r3, #1
 801aef6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801aef8:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the configuration number on which this instance will be called.  */
            class_inst -> ux_slave_class_configuration_number =  configuration_number;
 801aefa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801aefc:	2386      	movs	r3, #134	@ 0x86
 801aefe:	005b      	lsls	r3, r3, #1
 801af00:	6879      	ldr	r1, [r7, #4]
 801af02:	50d1      	str	r1, [r2, r3]
            
            /* Memorize the interface number on which this instance will be called.  */
            class_inst -> ux_slave_class_interface_number =  interface_number;
 801af04:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801af06:	2384      	movs	r3, #132	@ 0x84
 801af08:	005b      	lsls	r3, r3, #1
 801af0a:	6839      	ldr	r1, [r7, #0]
 801af0c:	50d1      	str	r1, [r2, r3]
            
            /* Build all the fields of the Class Command to initialize the class.  */
            command.ux_slave_class_command_request    =  UX_SLAVE_CLASS_COMMAND_INITIALIZE;
 801af0e:	2118      	movs	r1, #24
 801af10:	187b      	adds	r3, r7, r1
 801af12:	2205      	movs	r2, #5
 801af14:	601a      	str	r2, [r3, #0]
            command.ux_slave_class_command_parameter  =  parameter;
 801af16:	187b      	adds	r3, r7, r1
 801af18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801af1a:	625a      	str	r2, [r3, #36]	@ 0x24
            command.ux_slave_class_command_class_ptr  =  class_inst;
 801af1c:	187b      	adds	r3, r7, r1
 801af1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801af20:	621a      	str	r2, [r3, #32]

            /* Call the class initialization routine.  */
            status = class_entry_function(&command);
 801af22:	187a      	adds	r2, r7, r1
 801af24:	68bb      	ldr	r3, [r7, #8]
 801af26:	0010      	movs	r0, r2
 801af28:	4798      	blx	r3
 801af2a:	0003      	movs	r3, r0
 801af2c:	647b      	str	r3, [r7, #68]	@ 0x44
            
            /* Check the status.  */
            if (status != UX_SUCCESS)
 801af2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801af30:	2b00      	cmp	r3, #0
 801af32:	d001      	beq.n	801af38 <_ux_device_stack_class_register+0xa4>
                return(status);
 801af34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801af36:	e014      	b.n	801af62 <_ux_device_stack_class_register+0xce>
            
            /* Make this class used now.  */
            class_inst -> ux_slave_class_status = UX_USED;
 801af38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801af3a:	2201      	movs	r2, #1
 801af3c:	641a      	str	r2, [r3, #64]	@ 0x40

            /* Return successful completion.  */
            return(UX_SUCCESS);
 801af3e:	2300      	movs	r3, #0
 801af40:	e00f      	b.n	801af62 <_ux_device_stack_class_register+0xce>
        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
        /* Move to the next class.  */
        class_inst ++;
 801af42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801af44:	3315      	adds	r3, #21
 801af46:	33ff      	adds	r3, #255	@ 0xff
 801af48:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801af4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801af4c:	3301      	adds	r3, #1
 801af4e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801af50:	4b06      	ldr	r3, [pc, #24]	@ (801af6c <_ux_device_stack_class_register+0xd8>)
 801af52:	681a      	ldr	r2, [r3, #0]
 801af54:	23ac      	movs	r3, #172	@ 0xac
 801af56:	005b      	lsls	r3, r3, #1
 801af58:	58d3      	ldr	r3, [r2, r3]
 801af5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801af5c:	429a      	cmp	r2, r3
 801af5e:	d3b9      	bcc.n	801aed4 <_ux_device_stack_class_register+0x40>
    }    
#endif

    /* No more entries in the class table.  */
    return(UX_MEMORY_INSUFFICIENT);
 801af60:	2312      	movs	r3, #18
}
 801af62:	0018      	movs	r0, r3
 801af64:	46bd      	mov	sp, r7
 801af66:	b014      	add	sp, #80	@ 0x50
 801af68:	bd80      	pop	{r7, pc}
 801af6a:	46c0      	nop			@ (mov r8, r8)
 801af6c:	200116a4 	.word	0x200116a4

0801af70 <_ux_device_stack_clear_feature>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_clear_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 801af70:	b580      	push	{r7, lr}
 801af72:	b08a      	sub	sp, #40	@ 0x28
 801af74:	af00      	add	r7, sp, #0
 801af76:	60f8      	str	r0, [r7, #12]
 801af78:	60b9      	str	r1, [r7, #8]
 801af7a:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CLEAR_FEATURE, request_type, request_value, request_index, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801af7c:	4b2b      	ldr	r3, [pc, #172]	@ (801b02c <_ux_device_stack_clear_feature+0xbc>)
 801af7e:	681b      	ldr	r3, [r3, #0]
 801af80:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801af82:	4b2a      	ldr	r3, [pc, #168]	@ (801b02c <_ux_device_stack_clear_feature+0xbc>)
 801af84:	681b      	ldr	r3, [r3, #0]
 801af86:	3320      	adds	r3, #32
 801af88:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801af8a:	69bb      	ldr	r3, [r7, #24]
 801af8c:	333c      	adds	r3, #60	@ 0x3c
 801af8e:	617b      	str	r3, [r7, #20]

    /* The request can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801af90:	68fb      	ldr	r3, [r7, #12]
 801af92:	2203      	movs	r2, #3
 801af94:	4013      	ands	r3, r2
 801af96:	d002      	beq.n	801af9e <_ux_device_stack_clear_feature+0x2e>
 801af98:	2b02      	cmp	r3, #2
 801af9a:	d013      	beq.n	801afc4 <_ux_device_stack_clear_feature+0x54>
 801af9c:	e037      	b.n	801b00e <_ux_device_stack_clear_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 801af9e:	68bb      	ldr	r3, [r7, #8]
 801afa0:	2b01      	cmp	r3, #1
 801afa2:	d13c      	bne.n	801b01e <_ux_device_stack_clear_feature+0xae>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 801afa4:	4b21      	ldr	r3, [pc, #132]	@ (801b02c <_ux_device_stack_clear_feature+0xbc>)
 801afa6:	681a      	ldr	r2, [r3, #0]
 801afa8:	23d4      	movs	r3, #212	@ 0xd4
 801afaa:	005b      	lsls	r3, r3, #1
 801afac:	58d3      	ldr	r3, [r2, r3]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d006      	beq.n	801afc0 <_ux_device_stack_clear_feature+0x50>
            {

                /* Disable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_FALSE;
 801afb2:	4b1e      	ldr	r3, [pc, #120]	@ (801b02c <_ux_device_stack_clear_feature+0xbc>)
 801afb4:	681a      	ldr	r2, [r3, #0]
 801afb6:	23d6      	movs	r3, #214	@ 0xd6
 801afb8:	005b      	lsls	r3, r3, #1
 801afba:	2100      	movs	r1, #0
 801afbc:	50d1      	str	r1, [r2, r3]

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
        }

        break;
 801afbe:	e02e      	b.n	801b01e <_ux_device_stack_clear_feature+0xae>
                return (UX_FUNCTION_NOT_SUPPORTED);
 801afc0:	2354      	movs	r3, #84	@ 0x54
 801afc2:	e02e      	b.n	801b022 <_ux_device_stack_clear_feature+0xb2>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only clear feature for endpoint is ENDPOINT_STALL. This clears
           the endpoint of the stall situation and resets its data toggle. 
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 801afc4:	69bb      	ldr	r3, [r7, #24]
 801afc6:	22f0      	movs	r2, #240	@ 0xf0
 801afc8:	589b      	ldr	r3, [r3, r2]
 801afca:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 801afcc:	e01c      	b.n	801b008 <_ux_device_stack_clear_feature+0x98>
        {
#endif

            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 801afce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801afd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801afd2:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 801afd4:	e012      	b.n	801affc <_ux_device_stack_clear_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 801afd6:	6a3b      	ldr	r3, [r7, #32]
 801afd8:	695b      	ldr	r3, [r3, #20]
 801afda:	687a      	ldr	r2, [r7, #4]
 801afdc:	429a      	cmp	r2, r3
 801afde:	d10a      	bne.n	801aff6 <_ux_device_stack_clear_feature+0x86>
                {

                    /* Reset the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_RESET_ENDPOINT, endpoint_target);
 801afe0:	69fb      	ldr	r3, [r7, #28]
 801afe2:	699b      	ldr	r3, [r3, #24]
 801afe4:	6a3a      	ldr	r2, [r7, #32]
 801afe6:	69f8      	ldr	r0, [r7, #28]
 801afe8:	2110      	movs	r1, #16
 801afea:	4798      	blx	r3
                    
                    /* Mark its state now.  */
                    endpoint_target -> ux_slave_endpoint_state = UX_ENDPOINT_RESET;
 801afec:	6a3b      	ldr	r3, [r7, #32]
 801afee:	2200      	movs	r2, #0
 801aff0:	605a      	str	r2, [r3, #4]

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 801aff2:	2300      	movs	r3, #0
 801aff4:	e015      	b.n	801b022 <_ux_device_stack_clear_feature+0xb2>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801aff6:	6a3b      	ldr	r3, [r7, #32]
 801aff8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801affa:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 801affc:	6a3b      	ldr	r3, [r7, #32]
 801affe:	2b00      	cmp	r3, #0
 801b000:	d1e9      	bne.n	801afd6 <_ux_device_stack_clear_feature+0x66>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 801b002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b006:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface != UX_NULL)
 801b008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d1df      	bne.n	801afce <_ux_device_stack_clear_feature+0x5e>

    /* We get here when the endpoint is wrong. Should not happen though.  */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801b00e:	69fb      	ldr	r3, [r7, #28]
 801b010:	699b      	ldr	r3, [r3, #24]
 801b012:	697a      	ldr	r2, [r7, #20]
 801b014:	69f8      	ldr	r0, [r7, #28]
 801b016:	2114      	movs	r1, #20
 801b018:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801b01a:	2300      	movs	r3, #0
 801b01c:	e001      	b.n	801b022 <_ux_device_stack_clear_feature+0xb2>
        break;
 801b01e:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the function status.  */
    return(UX_SUCCESS);
 801b020:	2300      	movs	r3, #0
}
 801b022:	0018      	movs	r0, r3
 801b024:	46bd      	mov	sp, r7
 801b026:	b00a      	add	sp, #40	@ 0x28
 801b028:	bd80      	pop	{r7, pc}
 801b02a:	46c0      	nop			@ (mov r8, r8)
 801b02c:	200116a4 	.word	0x200116a4

0801b030 <_ux_device_stack_configuration_get>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_get(VOID)
{
 801b030:	b580      	push	{r7, lr}
 801b032:	b084      	sub	sp, #16
 801b034:	af00      	add	r7, sp, #0
UX_SLAVE_DEVICE         *device;
UX_SLAVE_ENDPOINT       *endpoint;
UINT                    status;

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801b036:	4b10      	ldr	r3, [pc, #64]	@ (801b078 <_ux_device_stack_configuration_get+0x48>)
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	3320      	adds	r3, #32
 801b03c:	60fb      	str	r3, [r7, #12]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	333c      	adds	r3, #60	@ 0x3c
 801b042:	60bb      	str	r3, [r7, #8]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801b044:	68bb      	ldr	r3, [r7, #8]
 801b046:	3330      	adds	r3, #48	@ 0x30
 801b048:	607b      	str	r3, [r7, #4]

    /* Set the value of the configuration in the buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =
                (UCHAR) device -> ux_slave_device_configuration_selected;
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	22cc      	movs	r2, #204	@ 0xcc
 801b04e:	589a      	ldr	r2, [r3, r2]
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	68db      	ldr	r3, [r3, #12]
                (UCHAR) device -> ux_slave_device_configuration_selected;
 801b054:	b2d2      	uxtb	r2, r2
    *transfer_request -> ux_slave_transfer_request_data_pointer =
 801b056:	701a      	strb	r2, [r3, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_GET, device -> ux_slave_device_configuration_selected, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801b058:	687b      	ldr	r3, [r7, #4]
 801b05a:	2203      	movs	r2, #3
 801b05c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, 1, 1);
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	2201      	movs	r2, #1
 801b062:	2101      	movs	r1, #1
 801b064:	0018      	movs	r0, r3
 801b066:	f001 fb27 	bl	801c6b8 <_ux_device_stack_transfer_request>
 801b06a:	0003      	movs	r3, r0
 801b06c:	603b      	str	r3, [r7, #0]

    /* Return the function status.  */
    return(status);
 801b06e:	683b      	ldr	r3, [r7, #0]
}
 801b070:	0018      	movs	r0, r3
 801b072:	46bd      	mov	sp, r7
 801b074:	b004      	add	sp, #16
 801b076:	bd80      	pop	{r7, pc}
 801b078:	200116a4 	.word	0x200116a4

0801b07c <_ux_device_stack_configuration_set>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_configuration_set(ULONG configuration_value)
{
 801b07c:	b590      	push	{r4, r7, lr}
 801b07e:	b0ad      	sub	sp, #180	@ 0xb4
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
UX_SLAVE_DCD                    *dcd;
UCHAR *                         device_framework;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
UCHAR                           descriptor_type;
UX_CONFIGURATION_DESCRIPTOR     configuration_descriptor = { 0 };
 801b084:	2358      	movs	r3, #88	@ 0x58
 801b086:	18fb      	adds	r3, r7, r3
 801b088:	0018      	movs	r0, r3
 801b08a:	2320      	movs	r3, #32
 801b08c:	001a      	movs	r2, r3
 801b08e:	2100      	movs	r1, #0
 801b090:	f003 f894 	bl	801e1bc <memset>
UX_SLAVE_INTERFACE              *interface; 
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE              *next_interface; 
#endif
UX_SLAVE_CLASS                  *class_inst;
UX_SLAVE_CLASS                  *current_class =  UX_NULL;
 801b094:	2300      	movs	r3, #0
 801b096:	229c      	movs	r2, #156	@ 0x9c
 801b098:	18ba      	adds	r2, r7, r2
 801b09a:	6013      	str	r3, [r2, #0]
UX_SLAVE_CLASS_COMMAND          class_command;
UX_SLAVE_DEVICE                 *device;
ULONG                           iad_flag;
ULONG                           iad_first_interface =  0;
 801b09c:	2300      	movs	r3, #0
 801b09e:	2294      	movs	r2, #148	@ 0x94
 801b0a0:	18ba      	adds	r2, r7, r2
 801b0a2:	6013      	str	r3, [r2, #0]
ULONG                           iad_number_interfaces =  0;
 801b0a4:	2300      	movs	r3, #0
 801b0a6:	2290      	movs	r2, #144	@ 0x90
 801b0a8:	18ba      	adds	r2, r7, r2
 801b0aa:	6013      	str	r3, [r2, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_CONFIGURATION_SET, configuration_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801b0ac:	4bd4      	ldr	r3, [pc, #848]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	2288      	movs	r2, #136	@ 0x88
 801b0b2:	18ba      	adds	r2, r7, r2
 801b0b4:	6013      	str	r3, [r2, #0]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801b0b6:	4bd2      	ldr	r3, [pc, #840]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	3320      	adds	r3, #32
 801b0bc:	2284      	movs	r2, #132	@ 0x84
 801b0be:	18b9      	adds	r1, r7, r2
 801b0c0:	600b      	str	r3, [r1, #0]
    
    /* Reset the IAD flag.  */
    iad_flag =  UX_FALSE;
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	2198      	movs	r1, #152	@ 0x98
 801b0c6:	1879      	adds	r1, r7, r1
 801b0c8:	600b      	str	r3, [r1, #0]

    /* If the configuration value is already selected, keep it.  */
    if (device -> ux_slave_device_configuration_selected == configuration_value)
 801b0ca:	18bb      	adds	r3, r7, r2
 801b0cc:	681b      	ldr	r3, [r3, #0]
 801b0ce:	22cc      	movs	r2, #204	@ 0xcc
 801b0d0:	589b      	ldr	r3, [r3, r2]
 801b0d2:	687a      	ldr	r2, [r7, #4]
 801b0d4:	429a      	cmp	r2, r3
 801b0d6:	d101      	bne.n	801b0dc <_ux_device_stack_configuration_set+0x60>
        return(UX_SUCCESS);
 801b0d8:	2300      	movs	r3, #0
 801b0da:	e202      	b.n	801b4e2 <_ux_device_stack_configuration_set+0x466>

    /* We may have multiple configurations !, the index will tell us what
       configuration descriptor we need to return.  */
    device_framework = _ux_system_slave -> ux_system_slave_device_framework;
 801b0dc:	4bc8      	ldr	r3, [pc, #800]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b0de:	681a      	ldr	r2, [r3, #0]
 801b0e0:	2394      	movs	r3, #148	@ 0x94
 801b0e2:	005b      	lsls	r3, r3, #1
 801b0e4:	58d3      	ldr	r3, [r2, r3]
 801b0e6:	22ac      	movs	r2, #172	@ 0xac
 801b0e8:	18ba      	adds	r2, r7, r2
 801b0ea:	6013      	str	r3, [r2, #0]
    device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801b0ec:	4bc4      	ldr	r3, [pc, #784]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b0ee:	681a      	ldr	r2, [r3, #0]
 801b0f0:	2396      	movs	r3, #150	@ 0x96
 801b0f2:	005b      	lsls	r3, r3, #1
 801b0f4:	58d3      	ldr	r3, [r2, r3]
 801b0f6:	22a8      	movs	r2, #168	@ 0xa8
 801b0f8:	18ba      	adds	r2, r7, r2
 801b0fa:	6013      	str	r3, [r2, #0]

    /* Parse the device framework and locate a configuration descriptor.  */
    while (device_framework_length != 0)
 801b0fc:	e02e      	b.n	801b15c <_ux_device_stack_configuration_set+0xe0>
    {
        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801b0fe:	20ac      	movs	r0, #172	@ 0xac
 801b100:	183b      	adds	r3, r7, r0
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	781b      	ldrb	r3, [r3, #0]
 801b106:	2280      	movs	r2, #128	@ 0x80
 801b108:	18ba      	adds	r2, r7, r2
 801b10a:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801b10c:	217f      	movs	r1, #127	@ 0x7f
 801b10e:	187b      	adds	r3, r7, r1
 801b110:	183a      	adds	r2, r7, r0
 801b112:	6812      	ldr	r2, [r2, #0]
 801b114:	7852      	ldrb	r2, [r2, #1]
 801b116:	701a      	strb	r2, [r3, #0]

        /* Check if this is a configuration descriptor.  */
        if (descriptor_type == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801b118:	187b      	adds	r3, r7, r1
 801b11a:	781b      	ldrb	r3, [r3, #0]
 801b11c:	2b02      	cmp	r3, #2
 801b11e:	d10c      	bne.n	801b13a <_ux_device_stack_configuration_set+0xbe>
        {
            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 801b120:	2458      	movs	r4, #88	@ 0x58
 801b122:	193b      	adds	r3, r7, r4
 801b124:	49b7      	ldr	r1, [pc, #732]	@ (801b404 <_ux_device_stack_configuration_set+0x388>)
 801b126:	183a      	adds	r2, r7, r0
 801b128:	6810      	ldr	r0, [r2, #0]
 801b12a:	2208      	movs	r2, #8
 801b12c:	f7fc f88f 	bl	801724e <_ux_utility_descriptor_parse>
                        UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &configuration_descriptor);

            /* Now we need to check the configuration value. It has
               to be the same as the one specified in the setup function.  */
            if (configuration_descriptor.bConfigurationValue == configuration_value)
 801b130:	193b      	adds	r3, r7, r4
 801b132:	691b      	ldr	r3, [r3, #16]
 801b134:	687a      	ldr	r2, [r7, #4]
 801b136:	429a      	cmp	r2, r3
 801b138:	d016      	beq.n	801b168 <_ux_device_stack_configuration_set+0xec>
                /* The configuration is found. */
                break;
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -= descriptor_length;
 801b13a:	21a8      	movs	r1, #168	@ 0xa8
 801b13c:	187b      	adds	r3, r7, r1
 801b13e:	681a      	ldr	r2, [r3, #0]
 801b140:	2080      	movs	r0, #128	@ 0x80
 801b142:	183b      	adds	r3, r7, r0
 801b144:	681b      	ldr	r3, [r3, #0]
 801b146:	1ad3      	subs	r3, r2, r3
 801b148:	187a      	adds	r2, r7, r1
 801b14a:	6013      	str	r3, [r2, #0]
        /* Point to the next descriptor.  */
        device_framework += descriptor_length;
 801b14c:	21ac      	movs	r1, #172	@ 0xac
 801b14e:	187b      	adds	r3, r7, r1
 801b150:	681a      	ldr	r2, [r3, #0]
 801b152:	183b      	adds	r3, r7, r0
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	18d3      	adds	r3, r2, r3
 801b158:	187a      	adds	r2, r7, r1
 801b15a:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 801b15c:	23a8      	movs	r3, #168	@ 0xa8
 801b15e:	18fb      	adds	r3, r7, r3
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	2b00      	cmp	r3, #0
 801b164:	d1cb      	bne.n	801b0fe <_ux_device_stack_configuration_set+0x82>
 801b166:	e000      	b.n	801b16a <_ux_device_stack_configuration_set+0xee>
                break;
 801b168:	46c0      	nop			@ (mov r8, r8)
    }

    /* Configuration not found. */
    if (device_framework_length == 0 && configuration_value != 0)
 801b16a:	23a8      	movs	r3, #168	@ 0xa8
 801b16c:	18fb      	adds	r3, r7, r3
 801b16e:	681b      	ldr	r3, [r3, #0]
 801b170:	2b00      	cmp	r3, #0
 801b172:	d104      	bne.n	801b17e <_ux_device_stack_configuration_set+0x102>
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	2b00      	cmp	r3, #0
 801b178:	d001      	beq.n	801b17e <_ux_device_stack_configuration_set+0x102>
        return(UX_ERROR);
 801b17a:	23ff      	movs	r3, #255	@ 0xff
 801b17c:	e1b1      	b.n	801b4e2 <_ux_device_stack_configuration_set+0x466>

    /* We unmount the configuration if there is previous configuration selected. */
    if (device -> ux_slave_device_configuration_selected)
 801b17e:	2184      	movs	r1, #132	@ 0x84
 801b180:	187b      	adds	r3, r7, r1
 801b182:	681b      	ldr	r3, [r3, #0]
 801b184:	22cc      	movs	r2, #204	@ 0xcc
 801b186:	589b      	ldr	r3, [r3, r2]
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d038      	beq.n	801b1fe <_ux_device_stack_configuration_set+0x182>
    {

        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 801b18c:	187b      	adds	r3, r7, r1
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	22f0      	movs	r2, #240	@ 0xf0
 801b192:	589b      	ldr	r3, [r3, r2]
 801b194:	22a4      	movs	r2, #164	@ 0xa4
 801b196:	18ba      	adds	r2, r7, r2
 801b198:	6013      	str	r3, [r2, #0]

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Deactivate all the interfaces if any.  */
        while (interface != UX_NULL)
 801b19a:	e02b      	b.n	801b1f4 <_ux_device_stack_configuration_set+0x178>
        {
#endif
            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 801b19c:	2108      	movs	r1, #8
 801b19e:	187b      	adds	r3, r7, r1
 801b1a0:	2203      	movs	r2, #3
 801b1a2:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 801b1a4:	187b      	adds	r3, r7, r1
 801b1a6:	20a4      	movs	r0, #164	@ 0xa4
 801b1a8:	183a      	adds	r2, r7, r0
 801b1aa:	6812      	ldr	r2, [r2, #0]
 801b1ac:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class_inst =  interface -> ux_slave_interface_class;
 801b1ae:	183b      	adds	r3, r7, r0
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	685b      	ldr	r3, [r3, #4]
 801b1b4:	22a0      	movs	r2, #160	@ 0xa0
 801b1b6:	18b8      	adds	r0, r7, r2
 801b1b8:	6003      	str	r3, [r0, #0]

            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class_inst;
 801b1ba:	187b      	adds	r3, r7, r1
 801b1bc:	0010      	movs	r0, r2
 801b1be:	18ba      	adds	r2, r7, r2
 801b1c0:	6812      	ldr	r2, [r2, #0]
 801b1c2:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class_inst != UX_NULL)
 801b1c4:	0002      	movs	r2, r0
 801b1c6:	18bb      	adds	r3, r7, r2
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d005      	beq.n	801b1da <_ux_device_stack_configuration_set+0x15e>

                /* Call the class with the DEACTIVATE signal.  */
                class_inst -> ux_slave_class_entry_function(&class_command);
 801b1ce:	18bb      	adds	r3, r7, r2
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b1d4:	187a      	adds	r2, r7, r1
 801b1d6:	0010      	movs	r0, r2
 801b1d8:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 801b1da:	24a4      	movs	r4, #164	@ 0xa4
 801b1dc:	193b      	adds	r3, r7, r4
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b1e2:	67bb      	str	r3, [r7, #120]	@ 0x78
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 801b1e4:	193b      	adds	r3, r7, r4
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	0018      	movs	r0, r3
 801b1ea:	f000 ffff 	bl	801c1ec <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 801b1ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b1f0:	193a      	adds	r2, r7, r4
 801b1f2:	6013      	str	r3, [r2, #0]
        while (interface != UX_NULL)
 801b1f4:	23a4      	movs	r3, #164	@ 0xa4
 801b1f6:	18fb      	adds	r3, r7, r3
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d1ce      	bne.n	801b19c <_ux_device_stack_configuration_set+0x120>
#endif

    }

    /* No configuration is selected.  */
    device -> ux_slave_device_configuration_selected =  0;
 801b1fe:	2084      	movs	r0, #132	@ 0x84
 801b200:	183b      	adds	r3, r7, r0
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	22cc      	movs	r2, #204	@ 0xcc
 801b206:	2100      	movs	r1, #0
 801b208:	5099      	str	r1, [r3, r2]

    /* Mark the device as attached now. */
    device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801b20a:	183b      	adds	r3, r7, r0
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	2201      	movs	r2, #1
 801b210:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_ATTACHED);
 801b212:	2288      	movs	r2, #136	@ 0x88
 801b214:	18bb      	adds	r3, r7, r2
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	699b      	ldr	r3, [r3, #24]
 801b21a:	18ba      	adds	r2, r7, r2
 801b21c:	6810      	ldr	r0, [r2, #0]
 801b21e:	2201      	movs	r2, #1
 801b220:	2113      	movs	r1, #19
 801b222:	4798      	blx	r3

    /* If the host tries to unconfigure, we are done. */
    if (configuration_value == 0)
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	2b00      	cmp	r3, #0
 801b228:	d101      	bne.n	801b22e <_ux_device_stack_configuration_set+0x1b2>
        return(UX_SUCCESS);
 801b22a:	2300      	movs	r3, #0
 801b22c:	e159      	b.n	801b4e2 <_ux_device_stack_configuration_set+0x466>

    /* Memorize the configuration selected.  */
    device -> ux_slave_device_configuration_selected =  configuration_value;
 801b22e:	2084      	movs	r0, #132	@ 0x84
 801b230:	183b      	adds	r3, r7, r0
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	21cc      	movs	r1, #204	@ 0xcc
 801b236:	687a      	ldr	r2, [r7, #4]
 801b238:	505a      	str	r2, [r3, r1]
    /* We have found the configuration value requested by the host.
       Create the configuration descriptor and attach it to the device.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_configuration_descriptor_structure,
                UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                (UCHAR *) &device -> ux_slave_device_configuration_descriptor);
 801b23a:	183b      	adds	r3, r7, r0
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	33d0      	adds	r3, #208	@ 0xd0
    _ux_utility_descriptor_parse(device_framework,
 801b240:	4970      	ldr	r1, [pc, #448]	@ (801b404 <_ux_device_stack_configuration_set+0x388>)
 801b242:	22ac      	movs	r2, #172	@ 0xac
 801b244:	18ba      	adds	r2, r7, r2
 801b246:	6810      	ldr	r0, [r2, #0]
 801b248:	2208      	movs	r2, #8
 801b24a:	f7fc f800 	bl	801724e <_ux_utility_descriptor_parse>

    /* Configuration character D6 is for Self-powered */
    _ux_system_slave -> ux_system_slave_power_state = (configuration_descriptor.bmAttributes & 0x40) ? UX_DEVICE_SELF_POWERED : UX_DEVICE_BUS_POWERED;
 801b24e:	2358      	movs	r3, #88	@ 0x58
 801b250:	18fb      	adds	r3, r7, r3
 801b252:	699b      	ldr	r3, [r3, #24]
 801b254:	2240      	movs	r2, #64	@ 0x40
 801b256:	4013      	ands	r3, r2
 801b258:	d001      	beq.n	801b25e <_ux_device_stack_configuration_set+0x1e2>
 801b25a:	2202      	movs	r2, #2
 801b25c:	e000      	b.n	801b260 <_ux_device_stack_configuration_set+0x1e4>
 801b25e:	2201      	movs	r2, #1
 801b260:	4b67      	ldr	r3, [pc, #412]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b262:	6819      	ldr	r1, [r3, #0]
 801b264:	23d2      	movs	r3, #210	@ 0xd2
 801b266:	005b      	lsls	r3, r3, #1
 801b268:	50ca      	str	r2, [r1, r3]

    /* Configuration character D5 is for Remote Wakeup */
    _ux_system_slave -> ux_system_slave_remote_wakeup_capability = (configuration_descriptor.bmAttributes & 0x20) ? UX_TRUE : UX_FALSE;
 801b26a:	2058      	movs	r0, #88	@ 0x58
 801b26c:	183b      	adds	r3, r7, r0
 801b26e:	699b      	ldr	r3, [r3, #24]
 801b270:	0959      	lsrs	r1, r3, #5
 801b272:	4b63      	ldr	r3, [pc, #396]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b274:	681a      	ldr	r2, [r3, #0]
 801b276:	2301      	movs	r3, #1
 801b278:	4019      	ands	r1, r3
 801b27a:	23d4      	movs	r3, #212	@ 0xd4
 801b27c:	005b      	lsls	r3, r3, #1
 801b27e:	50d1      	str	r1, [r2, r3]

    /* Search only in current configuration */
    device_framework_length =  configuration_descriptor.wTotalLength;
 801b280:	183b      	adds	r3, r7, r0
 801b282:	689b      	ldr	r3, [r3, #8]
 801b284:	22a8      	movs	r2, #168	@ 0xa8
 801b286:	18ba      	adds	r2, r7, r2
 801b288:	6013      	str	r3, [r2, #0]

    /*  We need to scan all the interface descriptors following this
        configuration descriptor and enable all endpoints associated
        with the default alternate setting of each interface.  */
    while (device_framework_length != 0)
 801b28a:	e115      	b.n	801b4b8 <_ux_device_stack_configuration_set+0x43c>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801b28c:	21ac      	movs	r1, #172	@ 0xac
 801b28e:	187b      	adds	r3, r7, r1
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	781b      	ldrb	r3, [r3, #0]
 801b294:	2280      	movs	r2, #128	@ 0x80
 801b296:	18ba      	adds	r2, r7, r2
 801b298:	6013      	str	r3, [r2, #0]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801b29a:	207f      	movs	r0, #127	@ 0x7f
 801b29c:	183b      	adds	r3, r7, r0
 801b29e:	187a      	adds	r2, r7, r1
 801b2a0:	6812      	ldr	r2, [r2, #0]
 801b2a2:	7852      	ldrb	r2, [r2, #1]
 801b2a4:	701a      	strb	r2, [r3, #0]

        /* Check if this is an interface association descriptor.  */
        if(descriptor_type == UX_INTERFACE_ASSOCIATION_DESCRIPTOR_ITEM)
 801b2a6:	183b      	adds	r3, r7, r0
 801b2a8:	781b      	ldrb	r3, [r3, #0]
 801b2aa:	2b0b      	cmp	r3, #11
 801b2ac:	d111      	bne.n	801b2d2 <_ux_device_stack_configuration_set+0x256>
        {

            /* Set the IAD flag.  */
            iad_flag = UX_TRUE;
 801b2ae:	2301      	movs	r3, #1
 801b2b0:	2298      	movs	r2, #152	@ 0x98
 801b2b2:	18ba      	adds	r2, r7, r2
 801b2b4:	6013      	str	r3, [r2, #0]

            /* Get the first interface we have in the IAD. */
            iad_first_interface = (ULONG)  *(device_framework + 2);
 801b2b6:	187b      	adds	r3, r7, r1
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	3302      	adds	r3, #2
 801b2bc:	781b      	ldrb	r3, [r3, #0]
 801b2be:	2294      	movs	r2, #148	@ 0x94
 801b2c0:	18ba      	adds	r2, r7, r2
 801b2c2:	6013      	str	r3, [r2, #0]

            /* Get the number of interfaces we have in the IAD. */
            iad_number_interfaces = (ULONG)  *(device_framework + 3);
 801b2c4:	187b      	adds	r3, r7, r1
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	3303      	adds	r3, #3
 801b2ca:	781b      	ldrb	r3, [r3, #0]
 801b2cc:	2290      	movs	r2, #144	@ 0x90
 801b2ce:	18ba      	adds	r2, r7, r2
 801b2d0:	6013      	str	r3, [r2, #0]
        }

        /* Check if this is an interface descriptor.  */
        if(descriptor_type == UX_INTERFACE_DESCRIPTOR_ITEM)
 801b2d2:	237f      	movs	r3, #127	@ 0x7f
 801b2d4:	18fb      	adds	r3, r7, r3
 801b2d6:	781b      	ldrb	r3, [r3, #0]
 801b2d8:	2b04      	cmp	r3, #4
 801b2da:	d000      	beq.n	801b2de <_ux_device_stack_configuration_set+0x262>
 801b2dc:	e0db      	b.n	801b496 <_ux_device_stack_configuration_set+0x41a>
        {

            /* Parse the descriptor in something more readable.  */
            _ux_utility_descriptor_parse(device_framework,
 801b2de:	2434      	movs	r4, #52	@ 0x34
 801b2e0:	193b      	adds	r3, r7, r4
 801b2e2:	4949      	ldr	r1, [pc, #292]	@ (801b408 <_ux_device_stack_configuration_set+0x38c>)
 801b2e4:	22ac      	movs	r2, #172	@ 0xac
 801b2e6:	18ba      	adds	r2, r7, r2
 801b2e8:	6810      	ldr	r0, [r2, #0]
 801b2ea:	2209      	movs	r2, #9
 801b2ec:	f7fb ffaf 	bl	801724e <_ux_utility_descriptor_parse>
                        UX_INTERFACE_DESCRIPTOR_ENTRIES,
                        (UCHAR *) &interface_descriptor);

            /* If the alternate setting is 0 for this interface, we need to
               memorize its class association and start it.  */
            if (interface_descriptor.bAlternateSetting == 0)
 801b2f0:	0022      	movs	r2, r4
 801b2f2:	18bb      	adds	r3, r7, r2
 801b2f4:	68db      	ldr	r3, [r3, #12]
 801b2f6:	2b00      	cmp	r3, #0
 801b2f8:	d000      	beq.n	801b2fc <_ux_device_stack_configuration_set+0x280>
 801b2fa:	e0cc      	b.n	801b496 <_ux_device_stack_configuration_set+0x41a>
            {

                /* Are we in a IAD scenario ? */
                if (iad_flag == UX_TRUE)
 801b2fc:	2398      	movs	r3, #152	@ 0x98
 801b2fe:	18fb      	adds	r3, r7, r3
 801b300:	681b      	ldr	r3, [r3, #0]
 801b302:	2b01      	cmp	r3, #1
 801b304:	d16f      	bne.n	801b3e6 <_ux_device_stack_configuration_set+0x36a>
                {

                    /* Check if this is the first interface from the IAD. In this case,
                       we need to match a class to this interface.  */
                    if (interface_descriptor.bInterfaceNumber == iad_first_interface)
 801b306:	18bb      	adds	r3, r7, r2
 801b308:	689b      	ldr	r3, [r3, #8]
 801b30a:	2294      	movs	r2, #148	@ 0x94
 801b30c:	18ba      	adds	r2, r7, r2
 801b30e:	6812      	ldr	r2, [r2, #0]
 801b310:	429a      	cmp	r2, r3
 801b312:	d14e      	bne.n	801b3b2 <_ux_device_stack_configuration_set+0x336>
                    {

                        /* First interface. Scan the list of classes to find a match.  */
                        class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801b314:	4b3a      	ldr	r3, [pc, #232]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b316:	681a      	ldr	r2, [r3, #0]
 801b318:	23ae      	movs	r3, #174	@ 0xae
 801b31a:	005b      	lsls	r3, r3, #1
 801b31c:	58d3      	ldr	r3, [r2, r3]
 801b31e:	22a0      	movs	r2, #160	@ 0xa0
 801b320:	18ba      	adds	r2, r7, r2
 801b322:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Parse all the class drivers.  */
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801b324:	2300      	movs	r3, #0
 801b326:	228c      	movs	r2, #140	@ 0x8c
 801b328:	18ba      	adds	r2, r7, r2
 801b32a:	6013      	str	r3, [r2, #0]
 801b32c:	e036      	b.n	801b39c <_ux_device_stack_configuration_set+0x320>
                        {
#endif

                            /* Check if this class driver is used.  */
                            if (class_inst -> ux_slave_class_status == UX_USED)
 801b32e:	21a0      	movs	r1, #160	@ 0xa0
 801b330:	187b      	adds	r3, r7, r1
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b336:	2b01      	cmp	r3, #1
 801b338:	d123      	bne.n	801b382 <_ux_device_stack_configuration_set+0x306>
                            {

                                /* Check if this is the same interface for the same configuration. */
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801b33a:	2434      	movs	r4, #52	@ 0x34
 801b33c:	193b      	adds	r3, r7, r4
 801b33e:	689a      	ldr	r2, [r3, #8]
 801b340:	0008      	movs	r0, r1
 801b342:	187b      	adds	r3, r7, r1
 801b344:	6819      	ldr	r1, [r3, #0]
 801b346:	2384      	movs	r3, #132	@ 0x84
 801b348:	005b      	lsls	r3, r3, #1
 801b34a:	58cb      	ldr	r3, [r1, r3]
 801b34c:	429a      	cmp	r2, r3
 801b34e:	d118      	bne.n	801b382 <_ux_device_stack_configuration_set+0x306>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 801b350:	0001      	movs	r1, r0
 801b352:	187b      	adds	r3, r7, r1
 801b354:	681a      	ldr	r2, [r3, #0]
 801b356:	2386      	movs	r3, #134	@ 0x86
 801b358:	005b      	lsls	r3, r3, #1
 801b35a:	58d3      	ldr	r3, [r2, r3]
                                if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801b35c:	687a      	ldr	r2, [r7, #4]
 801b35e:	429a      	cmp	r2, r3
 801b360:	d10f      	bne.n	801b382 <_ux_device_stack_configuration_set+0x306>
                                {

                                    /* Memorize the class in the class/interface array.  */
                                    _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 801b362:	4b27      	ldr	r3, [pc, #156]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b364:	681a      	ldr	r2, [r3, #0]
 801b366:	193b      	adds	r3, r7, r4
 801b368:	689b      	ldr	r3, [r3, #8]
 801b36a:	3358      	adds	r3, #88	@ 0x58
 801b36c:	009b      	lsls	r3, r3, #2
 801b36e:	0008      	movs	r0, r1
 801b370:	1879      	adds	r1, r7, r1
 801b372:	6809      	ldr	r1, [r1, #0]
 801b374:	5099      	str	r1, [r3, r2]

                                    /* And again as the current class.  */
                                    current_class = class_inst;
 801b376:	183b      	adds	r3, r7, r0
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	229c      	movs	r2, #156	@ 0x9c
 801b37c:	18ba      	adds	r2, r7, r2
 801b37e:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                    /* We are done here.  */
                                    break;
 801b380:	e022      	b.n	801b3c8 <_ux_device_stack_configuration_set+0x34c>
                                }
                            }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                            /* Move to the next registered class.  */
                            class_inst ++;
 801b382:	22a0      	movs	r2, #160	@ 0xa0
 801b384:	18bb      	adds	r3, r7, r2
 801b386:	681b      	ldr	r3, [r3, #0]
 801b388:	3315      	adds	r3, #21
 801b38a:	33ff      	adds	r3, #255	@ 0xff
 801b38c:	18ba      	adds	r2, r7, r2
 801b38e:	6013      	str	r3, [r2, #0]
                        for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801b390:	228c      	movs	r2, #140	@ 0x8c
 801b392:	18bb      	adds	r3, r7, r2
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	3301      	adds	r3, #1
 801b398:	18ba      	adds	r2, r7, r2
 801b39a:	6013      	str	r3, [r2, #0]
 801b39c:	4b18      	ldr	r3, [pc, #96]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b39e:	681a      	ldr	r2, [r3, #0]
 801b3a0:	23ac      	movs	r3, #172	@ 0xac
 801b3a2:	005b      	lsls	r3, r3, #1
 801b3a4:	58d3      	ldr	r3, [r2, r3]
 801b3a6:	228c      	movs	r2, #140	@ 0x8c
 801b3a8:	18ba      	adds	r2, r7, r2
 801b3aa:	6812      	ldr	r2, [r2, #0]
 801b3ac:	429a      	cmp	r2, r3
 801b3ae:	d3be      	bcc.n	801b32e <_ux_device_stack_configuration_set+0x2b2>
 801b3b0:	e00a      	b.n	801b3c8 <_ux_device_stack_configuration_set+0x34c>
#endif
                    }
                    else

                        /* Memorize the class in the class/interface array.  We use the current class. */
                        _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = current_class;
 801b3b2:	4b13      	ldr	r3, [pc, #76]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b3b4:	681a      	ldr	r2, [r3, #0]
 801b3b6:	2334      	movs	r3, #52	@ 0x34
 801b3b8:	18fb      	adds	r3, r7, r3
 801b3ba:	689b      	ldr	r3, [r3, #8]
 801b3bc:	3358      	adds	r3, #88	@ 0x58
 801b3be:	009b      	lsls	r3, r3, #2
 801b3c0:	219c      	movs	r1, #156	@ 0x9c
 801b3c2:	1879      	adds	r1, r7, r1
 801b3c4:	6809      	ldr	r1, [r1, #0]
 801b3c6:	5099      	str	r1, [r3, r2]

                    /* Decrement the number of interfaces found in the same IAD.  */
                    iad_number_interfaces--;
 801b3c8:	2290      	movs	r2, #144	@ 0x90
 801b3ca:	18bb      	adds	r3, r7, r2
 801b3cc:	681b      	ldr	r3, [r3, #0]
 801b3ce:	3b01      	subs	r3, #1
 801b3d0:	18b9      	adds	r1, r7, r2
 801b3d2:	600b      	str	r3, [r1, #0]

                    /* If none are left, get out of the IAD state machine.  */
                    if (iad_number_interfaces == 0)
 801b3d4:	18bb      	adds	r3, r7, r2
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d152      	bne.n	801b482 <_ux_device_stack_configuration_set+0x406>

                        /* We have exhausted the interfaces within the IAD.  */
                        iad_flag = UX_FALSE;
 801b3dc:	2300      	movs	r3, #0
 801b3de:	2298      	movs	r2, #152	@ 0x98
 801b3e0:	18ba      	adds	r2, r7, r2
 801b3e2:	6013      	str	r3, [r2, #0]
 801b3e4:	e04d      	b.n	801b482 <_ux_device_stack_configuration_set+0x406>
                }
                else
                {

                    /* First interface. Scan the list of classes to find a match.  */
                    class_inst =  _ux_system_slave -> ux_system_slave_class_array;
 801b3e6:	4b06      	ldr	r3, [pc, #24]	@ (801b400 <_ux_device_stack_configuration_set+0x384>)
 801b3e8:	681a      	ldr	r2, [r3, #0]
 801b3ea:	23ae      	movs	r3, #174	@ 0xae
 801b3ec:	005b      	lsls	r3, r3, #1
 801b3ee:	58d3      	ldr	r3, [r2, r3]
 801b3f0:	22a0      	movs	r2, #160	@ 0xa0
 801b3f2:	18ba      	adds	r2, r7, r2
 801b3f4:	6013      	str	r3, [r2, #0]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                    /* Parse all the class drivers.  */
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801b3f6:	2300      	movs	r3, #0
 801b3f8:	228c      	movs	r2, #140	@ 0x8c
 801b3fa:	18ba      	adds	r2, r7, r2
 801b3fc:	6013      	str	r3, [r2, #0]
 801b3fe:	e036      	b.n	801b46e <_ux_device_stack_configuration_set+0x3f2>
 801b400:	200116a4 	.word	0x200116a4
 801b404:	2000002c 	.word	0x2000002c
 801b408:	20000034 	.word	0x20000034
                    {
#endif

                        /* Check if this class driver is used.  */
                        if (class_inst -> ux_slave_class_status == UX_USED)
 801b40c:	21a0      	movs	r1, #160	@ 0xa0
 801b40e:	187b      	adds	r3, r7, r1
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b414:	2b01      	cmp	r3, #1
 801b416:	d11d      	bne.n	801b454 <_ux_device_stack_configuration_set+0x3d8>
                        {

                            /* Check if this is the same interface for the same configuration. */
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801b418:	2434      	movs	r4, #52	@ 0x34
 801b41a:	193b      	adds	r3, r7, r4
 801b41c:	689a      	ldr	r2, [r3, #8]
 801b41e:	0008      	movs	r0, r1
 801b420:	187b      	adds	r3, r7, r1
 801b422:	6819      	ldr	r1, [r3, #0]
 801b424:	2384      	movs	r3, #132	@ 0x84
 801b426:	005b      	lsls	r3, r3, #1
 801b428:	58cb      	ldr	r3, [r1, r3]
 801b42a:	429a      	cmp	r2, r3
 801b42c:	d112      	bne.n	801b454 <_ux_device_stack_configuration_set+0x3d8>
                                    (configuration_value == class_inst -> ux_slave_class_configuration_number))
 801b42e:	0001      	movs	r1, r0
 801b430:	187b      	adds	r3, r7, r1
 801b432:	681a      	ldr	r2, [r3, #0]
 801b434:	2386      	movs	r3, #134	@ 0x86
 801b436:	005b      	lsls	r3, r3, #1
 801b438:	58d3      	ldr	r3, [r2, r3]
                            if ((interface_descriptor.bInterfaceNumber == class_inst -> ux_slave_class_interface_number) &&
 801b43a:	687a      	ldr	r2, [r7, #4]
 801b43c:	429a      	cmp	r2, r3
 801b43e:	d109      	bne.n	801b454 <_ux_device_stack_configuration_set+0x3d8>
                            {

                                /* Memorize the class in the class/interface array.  */
                                _ux_system_slave -> ux_system_slave_interface_class_array[interface_descriptor.bInterfaceNumber] = class_inst;
 801b440:	4b2a      	ldr	r3, [pc, #168]	@ (801b4ec <_ux_device_stack_configuration_set+0x470>)
 801b442:	681a      	ldr	r2, [r3, #0]
 801b444:	193b      	adds	r3, r7, r4
 801b446:	689b      	ldr	r3, [r3, #8]
 801b448:	3358      	adds	r3, #88	@ 0x58
 801b44a:	009b      	lsls	r3, r3, #2
 801b44c:	1879      	adds	r1, r7, r1
 801b44e:	6809      	ldr	r1, [r1, #0]
 801b450:	5099      	str	r1, [r3, r2]

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                                /* We are done here.  */
                                break;
 801b452:	e016      	b.n	801b482 <_ux_device_stack_configuration_set+0x406>
                            }
                        }

#if UX_MAX_SLAVE_CLASS_DRIVER > 1
                        /* Move to the next registered class.  */
                        class_inst ++;
 801b454:	22a0      	movs	r2, #160	@ 0xa0
 801b456:	18bb      	adds	r3, r7, r2
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	3315      	adds	r3, #21
 801b45c:	33ff      	adds	r3, #255	@ 0xff
 801b45e:	18ba      	adds	r2, r7, r2
 801b460:	6013      	str	r3, [r2, #0]
                    for (class_index = 0; class_index < _ux_system_slave -> ux_system_slave_max_class; class_index++)
 801b462:	228c      	movs	r2, #140	@ 0x8c
 801b464:	18bb      	adds	r3, r7, r2
 801b466:	681b      	ldr	r3, [r3, #0]
 801b468:	3301      	adds	r3, #1
 801b46a:	18ba      	adds	r2, r7, r2
 801b46c:	6013      	str	r3, [r2, #0]
 801b46e:	4b1f      	ldr	r3, [pc, #124]	@ (801b4ec <_ux_device_stack_configuration_set+0x470>)
 801b470:	681a      	ldr	r2, [r3, #0]
 801b472:	23ac      	movs	r3, #172	@ 0xac
 801b474:	005b      	lsls	r3, r3, #1
 801b476:	58d3      	ldr	r3, [r2, r3]
 801b478:	228c      	movs	r2, #140	@ 0x8c
 801b47a:	18ba      	adds	r2, r7, r2
 801b47c:	6812      	ldr	r2, [r2, #0]
 801b47e:	429a      	cmp	r2, r3
 801b480:	d3c4      	bcc.n	801b40c <_ux_device_stack_configuration_set+0x390>
                    }
#endif
                }

                /* Set the interface.  */
                _ux_device_stack_interface_set(device_framework, device_framework_length, 0);
 801b482:	23a8      	movs	r3, #168	@ 0xa8
 801b484:	18fb      	adds	r3, r7, r3
 801b486:	6819      	ldr	r1, [r3, #0]
 801b488:	23ac      	movs	r3, #172	@ 0xac
 801b48a:	18fb      	adds	r3, r7, r3
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	2200      	movs	r2, #0
 801b490:	0018      	movs	r0, r3
 801b492:	f000 fef3 	bl	801c27c <_ux_device_stack_interface_set>
            }
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801b496:	21a8      	movs	r1, #168	@ 0xa8
 801b498:	187b      	adds	r3, r7, r1
 801b49a:	681a      	ldr	r2, [r3, #0]
 801b49c:	2080      	movs	r0, #128	@ 0x80
 801b49e:	183b      	adds	r3, r7, r0
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	1ad3      	subs	r3, r2, r3
 801b4a4:	187a      	adds	r2, r7, r1
 801b4a6:	6013      	str	r3, [r2, #0]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 801b4a8:	21ac      	movs	r1, #172	@ 0xac
 801b4aa:	187b      	adds	r3, r7, r1
 801b4ac:	681a      	ldr	r2, [r3, #0]
 801b4ae:	183b      	adds	r3, r7, r0
 801b4b0:	681b      	ldr	r3, [r3, #0]
 801b4b2:	18d3      	adds	r3, r2, r3
 801b4b4:	187a      	adds	r2, r7, r1
 801b4b6:	6013      	str	r3, [r2, #0]
    while (device_framework_length != 0)
 801b4b8:	23a8      	movs	r3, #168	@ 0xa8
 801b4ba:	18fb      	adds	r3, r7, r3
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d000      	beq.n	801b4c4 <_ux_device_stack_configuration_set+0x448>
 801b4c2:	e6e3      	b.n	801b28c <_ux_device_stack_configuration_set+0x210>
    }

    /* Mark the device as configured now. */
    device -> ux_slave_device_state =  UX_DEVICE_CONFIGURED;
 801b4c4:	2384      	movs	r3, #132	@ 0x84
 801b4c6:	18fb      	adds	r3, r7, r3
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	2203      	movs	r2, #3
 801b4cc:	601a      	str	r2, [r3, #0]

    /* The DCD needs to update the device state too.  */
    dcd -> ux_slave_dcd_function(dcd, UX_DCD_CHANGE_STATE, (VOID *) UX_DEVICE_CONFIGURED);
 801b4ce:	2288      	movs	r2, #136	@ 0x88
 801b4d0:	18bb      	adds	r3, r7, r2
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	699b      	ldr	r3, [r3, #24]
 801b4d6:	18ba      	adds	r2, r7, r2
 801b4d8:	6810      	ldr	r0, [r2, #0]
 801b4da:	2203      	movs	r2, #3
 801b4dc:	2113      	movs	r1, #19
 801b4de:	4798      	blx	r3

    /* Configuration mounted. */
    return(UX_SUCCESS);
 801b4e0:	2300      	movs	r3, #0
}
 801b4e2:	0018      	movs	r0, r3
 801b4e4:	46bd      	mov	sp, r7
 801b4e6:	b02d      	add	sp, #180	@ 0xb4
 801b4e8:	bd90      	pop	{r4, r7, pc}
 801b4ea:	46c0      	nop			@ (mov r8, r8)
 801b4ec:	200116a4 	.word	0x200116a4

0801b4f0 <_ux_device_stack_control_request_process>:
/*                                            added printer support,      */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_control_request_process(UX_SLAVE_TRANSFER *transfer_request)
{
 801b4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b4f2:	b09d      	sub	sp, #116	@ 0x74
 801b4f4:	af02      	add	r7, sp, #8
 801b4f6:	6078      	str	r0, [r7, #4]
ULONG                       request;
ULONG                       request_value;
ULONG                       request_index;
ULONG                       request_length;
ULONG                       class_index;
UINT                        status =  UX_ERROR;
 801b4f8:	23ff      	movs	r3, #255	@ 0xff
 801b4fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
UX_SLAVE_ENDPOINT           *endpoint;
ULONG                       application_data_length;

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801b4fc:	4ba1      	ldr	r3, [pc, #644]	@ (801b784 <_ux_device_stack_control_request_process+0x294>)
 801b4fe:	681b      	ldr	r3, [r3, #0]
 801b500:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801b502:	4ba0      	ldr	r3, [pc, #640]	@ (801b784 <_ux_device_stack_control_request_process+0x294>)
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	3320      	adds	r3, #32
 801b508:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Ensure that the Setup request has been received correctly.  */
    if (transfer_request -> ux_slave_transfer_request_completion_code == UX_SUCCESS)
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d000      	beq.n	801b514 <_ux_device_stack_control_request_process+0x24>
 801b512:	e132      	b.n	801b77a <_ux_device_stack_control_request_process+0x28a>
    {

        /* Seems so far, the Setup request is valid. Extract all fields of
           the request.  */
        request_type   =   *transfer_request -> ux_slave_transfer_request_setup;
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	2254      	movs	r2, #84	@ 0x54
 801b518:	5c9b      	ldrb	r3, [r3, r2]
 801b51a:	667b      	str	r3, [r7, #100]	@ 0x64
        request        =   *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_REQUEST);
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	2255      	movs	r2, #85	@ 0x55
 801b520:	5c9b      	ldrb	r3, [r3, r2]
 801b522:	653b      	str	r3, [r7, #80]	@ 0x50
        request_value  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_VALUE);
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	3354      	adds	r3, #84	@ 0x54
 801b528:	3302      	adds	r3, #2
 801b52a:	0018      	movs	r0, r3
 801b52c:	f7fc facb 	bl	8017ac6 <_ux_utility_short_get>
 801b530:	0003      	movs	r3, r0
 801b532:	64fb      	str	r3, [r7, #76]	@ 0x4c
        request_index  =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX);
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	3354      	adds	r3, #84	@ 0x54
 801b538:	3304      	adds	r3, #4
 801b53a:	0018      	movs	r0, r3
 801b53c:	f7fc fac3 	bl	8017ac6 <_ux_utility_short_get>
 801b540:	0003      	movs	r3, r0
 801b542:	64bb      	str	r3, [r7, #72]	@ 0x48
        request_length =   _ux_utility_short_get(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_LENGTH);
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	3354      	adds	r3, #84	@ 0x54
 801b548:	3306      	adds	r3, #6
 801b54a:	0018      	movs	r0, r3
 801b54c:	f7fc fabb 	bl	8017ac6 <_ux_utility_short_get>
 801b550:	0003      	movs	r3, r0
 801b552:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Filter for GET_DESCRIPTOR/SET_DESCRIPTOR commands. If the descriptor to be returned is not a standard descriptor,
           treat the command as a CLASS command.  */
        if ((request == UX_GET_DESCRIPTOR || request == UX_SET_DESCRIPTOR) && (((request_value >> 8) & UX_REQUEST_TYPE) != UX_REQUEST_TYPE_STANDARD))
 801b554:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b556:	2b06      	cmp	r3, #6
 801b558:	d002      	beq.n	801b560 <_ux_device_stack_control_request_process+0x70>
 801b55a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b55c:	2b07      	cmp	r3, #7
 801b55e:	d10c      	bne.n	801b57a <_ux_device_stack_control_request_process+0x8a>
 801b560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b562:	0a1b      	lsrs	r3, r3, #8
 801b564:	2260      	movs	r2, #96	@ 0x60
 801b566:	4013      	ands	r3, r2
 801b568:	d007      	beq.n	801b57a <_ux_device_stack_control_request_process+0x8a>
        {        

            /* This request is to be handled by the class layer.  */
            request_type &=  (UINT)~UX_REQUEST_TYPE;
 801b56a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b56c:	2260      	movs	r2, #96	@ 0x60
 801b56e:	4393      	bics	r3, r2
 801b570:	667b      	str	r3, [r7, #100]	@ 0x64
            request_type |= UX_REQUEST_TYPE_CLASS;
 801b572:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b574:	2220      	movs	r2, #32
 801b576:	4313      	orrs	r3, r2
 801b578:	667b      	str	r3, [r7, #100]	@ 0x64
        }                   

        /* Check if there is a vendor registered function at the application layer.  If the request
           is VENDOR and the request match, pass the request to the application.  */
        if ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR)
 801b57a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b57c:	2260      	movs	r2, #96	@ 0x60
 801b57e:	4013      	ands	r3, r2
 801b580:	2b40      	cmp	r3, #64	@ 0x40
 801b582:	d139      	bne.n	801b5f8 <_ux_device_stack_control_request_process+0x108>
        {

            /* Check the request demanded and compare it to the application registered one.  */
            if (request == _ux_system_slave -> ux_system_slave_device_vendor_request)
 801b584:	4b7f      	ldr	r3, [pc, #508]	@ (801b784 <_ux_device_stack_control_request_process+0x294>)
 801b586:	681a      	ldr	r2, [r3, #0]
 801b588:	23e4      	movs	r3, #228	@ 0xe4
 801b58a:	005b      	lsls	r3, r3, #1
 801b58c:	58d3      	ldr	r3, [r2, r3]
 801b58e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801b590:	429a      	cmp	r2, r3
 801b592:	d131      	bne.n	801b5f8 <_ux_device_stack_control_request_process+0x108>
            {

                /* This is a Microsoft extended function. It happens before the device is configured. 
                   The request is passed to the application directly.  */
                application_data_length = UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH;
 801b594:	2380      	movs	r3, #128	@ 0x80
 801b596:	005b      	lsls	r3, r3, #1
 801b598:	60fb      	str	r3, [r7, #12]
                status = _ux_system_slave -> ux_system_slave_device_vendor_request_function(request, request_value, 
 801b59a:	4b7a      	ldr	r3, [pc, #488]	@ (801b784 <_ux_device_stack_control_request_process+0x294>)
 801b59c:	681a      	ldr	r2, [r3, #0]
 801b59e:	23e6      	movs	r3, #230	@ 0xe6
 801b5a0:	005b      	lsls	r3, r3, #1
 801b5a2:	58d4      	ldr	r4, [r2, r3]
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	68db      	ldr	r3, [r3, #12]
 801b5a8:	6c7e      	ldr	r6, [r7, #68]	@ 0x44
 801b5aa:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 801b5ac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801b5ae:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 801b5b0:	220c      	movs	r2, #12
 801b5b2:	18ba      	adds	r2, r7, r2
 801b5b4:	9201      	str	r2, [sp, #4]
 801b5b6:	9300      	str	r3, [sp, #0]
 801b5b8:	0033      	movs	r3, r6
 801b5ba:	002a      	movs	r2, r5
 801b5bc:	47a0      	blx	r4
 801b5be:	0003      	movs	r3, r0
 801b5c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                                                                                            request_index, request_length, 
                                                                                            transfer_request -> ux_slave_transfer_request_data_pointer,
                                                                                            &application_data_length);

                /* Check the status from the application.  */
                if (status == UX_SUCCESS)
 801b5c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d110      	bne.n	801b5ea <_ux_device_stack_control_request_process+0xfa>
                {
                
                    /* Get the control endpoint associated with the device.  */
                    endpoint =  &device -> ux_slave_device_control_endpoint;
 801b5c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b5ca:	333c      	adds	r3, #60	@ 0x3c
 801b5cc:	643b      	str	r3, [r7, #64]	@ 0x40
    
                    /* Get the pointer to the transfer request associated with the control endpoint.  */
                    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801b5ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801b5d0:	3330      	adds	r3, #48	@ 0x30
 801b5d2:	607b      	str	r3, [r7, #4]
    
                    /* Set the direction to OUT.  */
                    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	2203      	movs	r2, #3
 801b5d8:	629a      	str	r2, [r3, #40]	@ 0x28

                    /* Perform the data transfer.  */
                    _ux_device_stack_transfer_request(transfer_request, application_data_length, request_length);
 801b5da:	68f9      	ldr	r1, [r7, #12]
 801b5dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	0018      	movs	r0, r3
 801b5e2:	f001 f869 	bl	801c6b8 <_ux_device_stack_transfer_request>

                    /* We are done here.  */
                    return(UX_SUCCESS);
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	e0c8      	b.n	801b77c <_ux_device_stack_control_request_process+0x28c>
                }
                else
                {

                    /* The application did not like the vendor command format, stall the control endpoint.  */
                    _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801b5ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b5ec:	333c      	adds	r3, #60	@ 0x3c
 801b5ee:	0018      	movs	r0, r3
 801b5f0:	f000 fb76 	bl	801bce0 <_ux_device_stack_endpoint_stall>
                    
                    /* We are done here.  */
                    return(UX_SUCCESS);
 801b5f4:	2300      	movs	r3, #0
 801b5f6:	e0c1      	b.n	801b77c <_ux_device_stack_control_request_process+0x28c>
            }
        }

        /* Check the destination of the request. If the request is of type CLASS or VENDOR_SPECIFIC,
           the function has to be passed to the class layer.  */
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 801b5f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b5fa:	2260      	movs	r2, #96	@ 0x60
 801b5fc:	4013      	ands	r3, r2
 801b5fe:	2b20      	cmp	r3, #32
 801b600:	d004      	beq.n	801b60c <_ux_device_stack_control_request_process+0x11c>
            ((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_VENDOR))
 801b602:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b604:	2260      	movs	r2, #96	@ 0x60
 801b606:	4013      	ands	r3, r2
        if (((request_type & UX_REQUEST_TYPE) == UX_REQUEST_TYPE_CLASS) ||
 801b608:	2b40      	cmp	r3, #64	@ 0x40
 801b60a:	d150      	bne.n	801b6ae <_ux_device_stack_control_request_process+0x1be>
        {

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_REQUEST;
 801b60c:	2310      	movs	r3, #16
 801b60e:	18fb      	adds	r3, r7, r3
 801b610:	2204      	movs	r2, #4
 801b612:	601a      	str	r2, [r3, #0]

            /* We need to find which class this request is for.  */
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 801b614:	2300      	movs	r3, #0
 801b616:	663b      	str	r3, [r7, #96]	@ 0x60
 801b618:	e03a      	b.n	801b690 <_ux_device_stack_control_request_process+0x1a0>
            {

                /* Get the class for the interface.  */
                class =  _ux_system_slave -> ux_system_slave_interface_class_array[class_index];
 801b61a:	4b5a      	ldr	r3, [pc, #360]	@ (801b784 <_ux_device_stack_control_request_process+0x294>)
 801b61c:	681b      	ldr	r3, [r3, #0]
 801b61e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b620:	3258      	adds	r2, #88	@ 0x58
 801b622:	0092      	lsls	r2, r2, #2
 801b624:	58d3      	ldr	r3, [r2, r3]
 801b626:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* If class is not ready, try next.  */
                if (class == UX_NULL)
 801b628:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d02a      	beq.n	801b684 <_ux_device_stack_control_request_process+0x194>
                    continue;

                /* Is the request target to an interface?  */
                if ((request_type & UX_REQUEST_TARGET) == UX_REQUEST_TARGET_INTERFACE)
 801b62e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b630:	2203      	movs	r2, #3
 801b632:	4013      	ands	r3, r2
 801b634:	2b01      	cmp	r3, #1
 801b636:	d116      	bne.n	801b666 <_ux_device_stack_control_request_process+0x176>
                       the request is for. So if the current index does not match 
                       the request index, we should go to the next one.  */
                    /* For printer class (0x07) GET_DEVICE_ID (0x00) the high byte of 
                       wIndex is interface index (for recommended index sequence the interface
                       number is same as interface index inside configuration).  */
                    if (((request_index & 0xFF) != class_index) ||
 801b638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b63a:	22ff      	movs	r2, #255	@ 0xff
 801b63c:	4013      	ands	r3, r2
 801b63e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801b640:	429a      	cmp	r2, r3
 801b642:	d121      	bne.n	801b688 <_ux_device_stack_control_request_process+0x198>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 801b644:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b646:	2388      	movs	r3, #136	@ 0x88
 801b648:	005b      	lsls	r3, r3, #1
 801b64a:	58d3      	ldr	r3, [r2, r3]
 801b64c:	6a1b      	ldr	r3, [r3, #32]
                    if (((request_index & 0xFF) != class_index) ||
 801b64e:	2b07      	cmp	r3, #7
 801b650:	d109      	bne.n	801b666 <_ux_device_stack_control_request_process+0x176>
                        ((class -> ux_slave_class_interface -> ux_slave_interface_descriptor.bInterfaceClass == 0x07) &&
 801b652:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b654:	2b00      	cmp	r3, #0
 801b656:	d106      	bne.n	801b666 <_ux_device_stack_control_request_process+0x176>
                         (request == 0x00) &&
                         *(transfer_request -> ux_slave_transfer_request_setup + UX_SETUP_INDEX + 1) != class_index))
 801b658:	687b      	ldr	r3, [r7, #4]
 801b65a:	2259      	movs	r2, #89	@ 0x59
 801b65c:	5c9b      	ldrb	r3, [r3, r2]
 801b65e:	001a      	movs	r2, r3
                         (request == 0x00) &&
 801b660:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b662:	4293      	cmp	r3, r2
 801b664:	d110      	bne.n	801b688 <_ux_device_stack_control_request_process+0x198>
                        continue;
                }

                /* Memorize the class in the command.  */
                class_command.ux_slave_class_command_class_ptr = class;
 801b666:	2110      	movs	r1, #16
 801b668:	187b      	adds	r3, r7, r1
 801b66a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b66c:	621a      	str	r2, [r3, #32]

                /* We have found a potential candidate. Call this registered class entry function.  */
                status = class -> ux_slave_class_entry_function(&class_command);
 801b66e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801b670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b672:	187a      	adds	r2, r7, r1
 801b674:	0010      	movs	r0, r2
 801b676:	4798      	blx	r3
 801b678:	0003      	movs	r3, r0
 801b67a:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* The status simply tells us if the registered class handled the 
                   command - if there was an issue processing the command, it would've 
                   stalled the control endpoint, notifying the host (and not us).  */
                if (status == UX_SUCCESS)
 801b67c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d00a      	beq.n	801b698 <_ux_device_stack_control_request_process+0x1a8>
 801b682:	e002      	b.n	801b68a <_ux_device_stack_control_request_process+0x19a>
                    continue;
 801b684:	46c0      	nop			@ (mov r8, r8)
 801b686:	e000      	b.n	801b68a <_ux_device_stack_control_request_process+0x19a>
                        continue;
 801b688:	46c0      	nop			@ (mov r8, r8)
            for (class_index = 0; class_index < UX_MAX_SLAVE_INTERFACES; class_index ++)
 801b68a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b68c:	3301      	adds	r3, #1
 801b68e:	663b      	str	r3, [r7, #96]	@ 0x60
 801b690:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801b692:	2b0f      	cmp	r3, #15
 801b694:	d9c1      	bls.n	801b61a <_ux_device_stack_control_request_process+0x12a>
 801b696:	e000      	b.n	801b69a <_ux_device_stack_control_request_process+0x1aa>

                    /* We are done, break the loop!  */
                    break;
 801b698:	46c0      	nop			@ (mov r8, r8)

                /* Not handled, try next.  */
            }

            /* If no class handled the command, then we have an error here.  */
            if (status != UX_SUCCESS)
 801b69a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d004      	beq.n	801b6aa <_ux_device_stack_control_request_process+0x1ba>

                /* We stall the command (request not supported).  */
                _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801b6a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b6a2:	333c      	adds	r3, #60	@ 0x3c
 801b6a4:	0018      	movs	r0, r3
 801b6a6:	f000 fb1b 	bl	801bce0 <_ux_device_stack_endpoint_stall>

            /* We are done for class/vendor request.  */
            return(status);
 801b6aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b6ac:	e066      	b.n	801b77c <_ux_device_stack_control_request_process+0x28c>
        }

        /* At this point, the request must be a standard request that the device stack should handle.  */
        switch (request)
 801b6ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b6b0:	2b0c      	cmp	r3, #12
 801b6b2:	d857      	bhi.n	801b764 <_ux_device_stack_control_request_process+0x274>
 801b6b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b6b6:	009a      	lsls	r2, r3, #2
 801b6b8:	4b33      	ldr	r3, [pc, #204]	@ (801b788 <_ux_device_stack_control_request_process+0x298>)
 801b6ba:	18d3      	adds	r3, r2, r3
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	469f      	mov	pc, r3
        {

        case UX_GET_STATUS:

            status =  _ux_device_stack_get_status(request_type, request_index, request_length);
 801b6c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b6c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801b6c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b6c6:	0018      	movs	r0, r3
 801b6c8:	f000 fb40 	bl	801bd4c <_ux_device_stack_get_status>
 801b6cc:	0003      	movs	r3, r0
 801b6ce:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b6d0:	e04b      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        case UX_CLEAR_FEATURE:

            status =  _ux_device_stack_clear_feature(request_type, request_value, request_index);
 801b6d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b6d4:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801b6d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b6d8:	0018      	movs	r0, r3
 801b6da:	f7ff fc49 	bl	801af70 <_ux_device_stack_clear_feature>
 801b6de:	0003      	movs	r3, r0
 801b6e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b6e2:	e042      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_FEATURE:

            status =  _ux_device_stack_set_feature(request_type, request_value, request_index);
 801b6e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801b6e6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801b6e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801b6ea:	0018      	movs	r0, r3
 801b6ec:	f000 ff3c 	bl	801c568 <_ux_device_stack_set_feature>
 801b6f0:	0003      	movs	r3, r0
 801b6f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b6f4:	e039      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_ADDRESS:
        
            /* Memorize the address. Some controllers memorize the address here. Some don't.  */
            dcd -> ux_slave_dcd_device_address =  request_value;
 801b6f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b6f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b6fa:	615a      	str	r2, [r3, #20]

            /* Force the new address.  */
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_SET_DEVICE_ADDRESS, (VOID *) (ALIGN_TYPE) request_value);
 801b6fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b6fe:	699b      	ldr	r3, [r3, #24]
 801b700:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b702:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801b704:	2111      	movs	r1, #17
 801b706:	4798      	blx	r3
 801b708:	0003      	movs	r3, r0
 801b70a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b70c:	e02d      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_DESCRIPTOR:

            status =  _ux_device_stack_descriptor_send(request_value, request_index, request_length);
 801b70e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801b710:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801b712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b714:	0018      	movs	r0, r3
 801b716:	f000 f839 	bl	801b78c <_ux_device_stack_descriptor_send>
 801b71a:	0003      	movs	r3, r0
 801b71c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b71e:	e024      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_DESCRIPTOR:

            status = UX_FUNCTION_NOT_SUPPORTED;
 801b720:	2354      	movs	r3, #84	@ 0x54
 801b722:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b724:	e021      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_CONFIGURATION:

            status =  _ux_device_stack_configuration_get();
 801b726:	f7ff fc83 	bl	801b030 <_ux_device_stack_configuration_get>
 801b72a:	0003      	movs	r3, r0
 801b72c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b72e:	e01c      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        case UX_SET_CONFIGURATION:

            status =  _ux_device_stack_configuration_set(request_value);
 801b730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b732:	0018      	movs	r0, r3
 801b734:	f7ff fca2 	bl	801b07c <_ux_device_stack_configuration_set>
 801b738:	0003      	movs	r3, r0
 801b73a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b73c:	e015      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        case UX_GET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_get(request_index);
 801b73e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b740:	0018      	movs	r0, r3
 801b742:	f7ff f8df 	bl	801a904 <_ux_device_stack_alternate_setting_get>
 801b746:	0003      	movs	r3, r0
 801b748:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b74a:	e00e      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>
                
        case UX_SET_INTERFACE:

            status =  _ux_device_stack_alternate_setting_set(request_index,request_value);
 801b74c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801b74e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801b750:	0011      	movs	r1, r2
 801b752:	0018      	movs	r0, r3
 801b754:	f7ff f916 	bl	801a984 <_ux_device_stack_alternate_setting_set>
 801b758:	0003      	movs	r3, r0
 801b75a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b75c:	e005      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>
                

        case UX_SYNCH_FRAME:

            status = UX_SUCCESS;
 801b75e:	2300      	movs	r3, #0
 801b760:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b762:	e002      	b.n	801b76a <_ux_device_stack_control_request_process+0x27a>

        default :

            status = UX_FUNCTION_NOT_SUPPORTED;
 801b764:	2354      	movs	r3, #84	@ 0x54
 801b766:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801b768:	46c0      	nop			@ (mov r8, r8)
        }

        if (status != UX_SUCCESS)
 801b76a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d004      	beq.n	801b77a <_ux_device_stack_control_request_process+0x28a>

            /* Stall the control endpoint to issue protocol error. */
            _ux_device_stack_endpoint_stall(&device -> ux_slave_device_control_endpoint);
 801b770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b772:	333c      	adds	r3, #60	@ 0x3c
 801b774:	0018      	movs	r0, r3
 801b776:	f000 fab3 	bl	801bce0 <_ux_device_stack_endpoint_stall>
    }

    /* Return the function status.  */
    return(status);
 801b77a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801b77c:	0018      	movs	r0, r3
 801b77e:	46bd      	mov	sp, r7
 801b780:	b01b      	add	sp, #108	@ 0x6c
 801b782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b784:	200116a4 	.word	0x200116a4
 801b788:	0801e788 	.word	0x0801e788

0801b78c <_ux_device_stack_descriptor_send>:
/*                                            added BOS support,          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_descriptor_send(ULONG descriptor_type, ULONG request_index, ULONG host_length)
{
 801b78c:	b590      	push	{r4, r7, lr}
 801b78e:	b0a3      	sub	sp, #140	@ 0x8c
 801b790:	af00      	add	r7, sp, #0
 801b792:	60f8      	str	r0, [r7, #12]
 801b794:	60b9      	str	r1, [r7, #8]
 801b796:	607a      	str	r2, [r7, #4]
UCHAR                           *device_framework;
UCHAR                           *device_framework_end;
ULONG                           device_framework_length;
ULONG                           descriptor_length;
ULONG                           target_descriptor_length;
UINT                            status =  UX_ERROR;
 801b798:	23ff      	movs	r3, #255	@ 0xff
 801b79a:	673b      	str	r3, [r7, #112]	@ 0x70

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_DESCRIPTOR_SEND, descriptor_type, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801b79c:	4bde      	ldr	r3, [pc, #888]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801b79e:	681b      	ldr	r3, [r3, #0]
 801b7a0:	65fb      	str	r3, [r7, #92]	@ 0x5c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801b7a2:	4bdd      	ldr	r3, [pc, #884]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801b7a4:	681b      	ldr	r3, [r3, #0]
 801b7a6:	3320      	adds	r3, #32
 801b7a8:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Get the control endpoint associated with the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801b7aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801b7ac:	333c      	adds	r3, #60	@ 0x3c
 801b7ae:	657b      	str	r3, [r7, #84]	@ 0x54

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801b7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801b7b2:	3330      	adds	r3, #48	@ 0x30
 801b7b4:	653b      	str	r3, [r7, #80]	@ 0x50

    /* Set the direction to OUT.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801b7b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b7b8:	2203      	movs	r2, #3
 801b7ba:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Isolate the descriptor index.  */
    descriptor_index =  descriptor_type & 0xff;
 801b7bc:	68fb      	ldr	r3, [r7, #12]
 801b7be:	22ff      	movs	r2, #255	@ 0xff
 801b7c0:	4013      	ands	r3, r2
 801b7c2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Reset the parsed index.  */
    parsed_descriptor_index =  0;
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	2284      	movs	r2, #132	@ 0x84
 801b7c8:	18ba      	adds	r2, r7, r2
 801b7ca:	6013      	str	r3, [r2, #0]

    /* Shift the descriptor type in the low byte field.  */
    descriptor_type =  (UCHAR) ((descriptor_type >> 8) & 0xff);
 801b7cc:	68fb      	ldr	r3, [r7, #12]
 801b7ce:	0a1b      	lsrs	r3, r3, #8
 801b7d0:	b2db      	uxtb	r3, r3
 801b7d2:	60fb      	str	r3, [r7, #12]

    /* Default descriptor length is host length.  */
    length =  host_length;
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* What type of descriptor do we need to return?  */
    switch (descriptor_type)
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	2b0f      	cmp	r3, #15
 801b7dc:	d900      	bls.n	801b7e0 <_ux_device_stack_descriptor_send+0x54>
 801b7de:	e20c      	b.n	801bbfa <_ux_device_stack_descriptor_send+0x46e>
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	009a      	lsls	r2, r3, #2
 801b7e4:	4bcd      	ldr	r3, [pc, #820]	@ (801bb1c <_ux_device_stack_descriptor_send+0x390>)
 801b7e6:	18d3      	adds	r3, r2, r3
 801b7e8:	681b      	ldr	r3, [r3, #0]
 801b7ea:	469f      	mov	pc, r3
    {

    case UX_DEVICE_DESCRIPTOR_ITEM:

		/* Setup device descriptor length.  */
        if (host_length > UX_DEVICE_DESCRIPTOR_LENGTH)
 801b7ec:	687b      	ldr	r3, [r7, #4]
 801b7ee:	2b12      	cmp	r3, #18
 801b7f0:	d901      	bls.n	801b7f6 <_ux_device_stack_descriptor_send+0x6a>
            length =  UX_DEVICE_DESCRIPTOR_LENGTH;
 801b7f2:	2312      	movs	r3, #18
 801b7f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Fall through.  */
    case UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM:

        /* Setup qualifier descriptor length.  */
        if (descriptor_type == UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM &&
 801b7f6:	68fb      	ldr	r3, [r7, #12]
 801b7f8:	2b06      	cmp	r3, #6
 801b7fa:	d104      	bne.n	801b806 <_ux_device_stack_descriptor_send+0x7a>
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	2b0a      	cmp	r3, #10
 801b800:	d901      	bls.n	801b806 <_ux_device_stack_descriptor_send+0x7a>
            host_length > UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH)
            length =  UX_DEVICE_QUALIFIER_DESCRIPTOR_LENGTH;
 801b802:	230a      	movs	r3, #10
 801b804:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Fall through.  */
    case UX_OTG_DESCRIPTOR_ITEM:

        /* Setup OTG descriptor length.  */
        if (descriptor_type == UX_OTG_DESCRIPTOR_ITEM &&
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	2b09      	cmp	r3, #9
 801b80a:	d104      	bne.n	801b816 <_ux_device_stack_descriptor_send+0x8a>
 801b80c:	687b      	ldr	r3, [r7, #4]
 801b80e:	2b05      	cmp	r3, #5
 801b810:	d901      	bls.n	801b816 <_ux_device_stack_descriptor_send+0x8a>
            host_length > UX_OTG_DESCRIPTOR_LENGTH)
            length =  UX_OTG_DESCRIPTOR_LENGTH;
 801b812:	2305      	movs	r3, #5
 801b814:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* We may or may not have a device qualifier descriptor.  */
        device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801b816:	4bc0      	ldr	r3, [pc, #768]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801b818:	681a      	ldr	r2, [r3, #0]
 801b81a:	2394      	movs	r3, #148	@ 0x94
 801b81c:	005b      	lsls	r3, r3, #1
 801b81e:	58d3      	ldr	r3, [r2, r3]
 801b820:	2180      	movs	r1, #128	@ 0x80
 801b822:	187a      	adds	r2, r7, r1
 801b824:	6013      	str	r3, [r2, #0]
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801b826:	4bbc      	ldr	r3, [pc, #752]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801b828:	681a      	ldr	r2, [r3, #0]
 801b82a:	2396      	movs	r3, #150	@ 0x96
 801b82c:	005b      	lsls	r3, r3, #1
 801b82e:	58d3      	ldr	r3, [r2, r3]
 801b830:	67bb      	str	r3, [r7, #120]	@ 0x78
        device_framework_end = device_framework + device_framework_length;
 801b832:	187b      	adds	r3, r7, r1
 801b834:	681a      	ldr	r2, [r3, #0]
 801b836:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b838:	18d3      	adds	r3, r2, r3
 801b83a:	67fb      	str	r3, [r7, #124]	@ 0x7c

        /* Parse the device framework and locate a device qualifier descriptor.  */
        while (device_framework < device_framework_end)
 801b83c:	e029      	b.n	801b892 <_ux_device_stack_descriptor_send+0x106>
        {

            /* Get descriptor length.  */
            descriptor_length =  (ULONG) *device_framework;
 801b83e:	2180      	movs	r1, #128	@ 0x80
 801b840:	187b      	adds	r3, r7, r1
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	781b      	ldrb	r3, [r3, #0]
 801b846:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Check if this is a descriptor expected.  */
            if (*(device_framework + 1) == descriptor_type)
 801b848:	187b      	adds	r3, r7, r1
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	3301      	adds	r3, #1
 801b84e:	781b      	ldrb	r3, [r3, #0]
 801b850:	001a      	movs	r2, r3
 801b852:	68fb      	ldr	r3, [r7, #12]
 801b854:	4293      	cmp	r3, r2
 801b856:	d111      	bne.n	801b87c <_ux_device_stack_descriptor_send+0xf0>
            {

                /* Copy the device descriptor into the transfer request memory.  */
                _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801b858:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b85a:	68db      	ldr	r3, [r3, #12]
 801b85c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b85e:	1879      	adds	r1, r7, r1
 801b860:	6809      	ldr	r1, [r1, #0]
 801b862:	0018      	movs	r0, r3
 801b864:	f7fb ff62 	bl	801772c <_ux_utility_memory_copy>
                                                device_framework, length); /* Use case of memcpy is verified. */

                /* Perform the data transfer.  */
                status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801b868:	687a      	ldr	r2, [r7, #4]
 801b86a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801b86c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b86e:	0018      	movs	r0, r3
 801b870:	f000 ff22 	bl	801c6b8 <_ux_device_stack_transfer_request>
 801b874:	0003      	movs	r3, r0
 801b876:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 801b878:	46c0      	nop			@ (mov r8, r8)
            device_framework_length -=  descriptor_length;

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
        }
        break;
 801b87a:	e1c9      	b.n	801bc10 <_ux_device_stack_descriptor_send+0x484>
            device_framework_length -=  descriptor_length;
 801b87c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801b87e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b880:	1ad3      	subs	r3, r2, r3
 801b882:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework +=  descriptor_length;
 801b884:	2180      	movs	r1, #128	@ 0x80
 801b886:	187b      	adds	r3, r7, r1
 801b888:	681a      	ldr	r2, [r3, #0]
 801b88a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b88c:	18d3      	adds	r3, r2, r3
 801b88e:	187a      	adds	r2, r7, r1
 801b890:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 801b892:	2380      	movs	r3, #128	@ 0x80
 801b894:	18fb      	adds	r3, r7, r3
 801b896:	681a      	ldr	r2, [r3, #0]
 801b898:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b89a:	429a      	cmp	r2, r3
 801b89c:	d3cf      	bcc.n	801b83e <_ux_device_stack_descriptor_send+0xb2>
        break;
 801b89e:	e1b7      	b.n	801bc10 <_ux_device_stack_descriptor_send+0x484>
#endif
    case UX_OTHER_SPEED_DESCRIPTOR_ITEM:
        /* Fall through.  */
    case UX_CONFIGURATION_DESCRIPTOR_ITEM:

        if (descriptor_type == UX_OTHER_SPEED_DESCRIPTOR_ITEM)
 801b8a0:	68fb      	ldr	r3, [r7, #12]
 801b8a2:	2b07      	cmp	r3, #7
 801b8a4:	d113      	bne.n	801b8ce <_ux_device_stack_descriptor_send+0x142>
        {

            /* This request is used by the host to find out the capability of this device
            if it was running at full speed. The behavior is the same as in a GET_CONFIGURATIOn descriptor
            but we do not use the current device framework but rather the full speed framework. */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801b8a6:	4b9c      	ldr	r3, [pc, #624]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801b8a8:	681a      	ldr	r2, [r3, #0]
 801b8aa:	2398      	movs	r3, #152	@ 0x98
 801b8ac:	005b      	lsls	r3, r3, #1
 801b8ae:	58d3      	ldr	r3, [r2, r3]
 801b8b0:	2180      	movs	r1, #128	@ 0x80
 801b8b2:	187a      	adds	r2, r7, r1
 801b8b4:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801b8b6:	4b98      	ldr	r3, [pc, #608]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801b8b8:	681a      	ldr	r2, [r3, #0]
 801b8ba:	239a      	movs	r3, #154	@ 0x9a
 801b8bc:	005b      	lsls	r3, r3, #1
 801b8be:	58d3      	ldr	r3, [r2, r3]
 801b8c0:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework_end = device_framework + device_framework_length;
 801b8c2:	187b      	adds	r3, r7, r1
 801b8c4:	681a      	ldr	r2, [r3, #0]
 801b8c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b8c8:	18d3      	adds	r3, r2, r3
 801b8ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801b8cc:	e05b      	b.n	801b986 <_ux_device_stack_descriptor_send+0x1fa>
        else
        {

            /* We may have multiple configurations !, the index will tell us what
            configuration descriptor we need to return.  */
            device_framework =  _ux_system_slave -> ux_system_slave_device_framework;
 801b8ce:	4b92      	ldr	r3, [pc, #584]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801b8d0:	681a      	ldr	r2, [r3, #0]
 801b8d2:	2394      	movs	r3, #148	@ 0x94
 801b8d4:	005b      	lsls	r3, r3, #1
 801b8d6:	58d3      	ldr	r3, [r2, r3]
 801b8d8:	2180      	movs	r1, #128	@ 0x80
 801b8da:	187a      	adds	r2, r7, r1
 801b8dc:	6013      	str	r3, [r2, #0]
            device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length;
 801b8de:	4b8e      	ldr	r3, [pc, #568]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801b8e0:	681a      	ldr	r2, [r3, #0]
 801b8e2:	2396      	movs	r3, #150	@ 0x96
 801b8e4:	005b      	lsls	r3, r3, #1
 801b8e6:	58d3      	ldr	r3, [r2, r3]
 801b8e8:	67bb      	str	r3, [r7, #120]	@ 0x78
            device_framework_end = device_framework + device_framework_length;
 801b8ea:	187b      	adds	r3, r7, r1
 801b8ec:	681a      	ldr	r2, [r3, #0]
 801b8ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801b8f0:	18d3      	adds	r3, r2, r3
 801b8f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }

        /* Parse the device framework and locate a configuration descriptor.  */
        while (device_framework < device_framework_end)
 801b8f4:	e047      	b.n	801b986 <_ux_device_stack_descriptor_send+0x1fa>
        {

            /* Get descriptor length. */
            descriptor_length =  (ULONG) *device_framework;
 801b8f6:	2280      	movs	r2, #128	@ 0x80
 801b8f8:	18bb      	adds	r3, r7, r2
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	781b      	ldrb	r3, [r3, #0]
 801b8fe:	647b      	str	r3, [r7, #68]	@ 0x44

#ifndef UX_BOS_SUPPORT_DISABLE

            /* Check if we are finding BOS descriptor.  */
            if (descriptor_type == UX_BOS_DESCRIPTOR_ITEM)
 801b900:	68fb      	ldr	r3, [r7, #12]
 801b902:	2b0f      	cmp	r3, #15
 801b904:	d113      	bne.n	801b92e <_ux_device_stack_descriptor_send+0x1a2>
            {
                if (*(device_framework + 1) == UX_BOS_DESCRIPTOR_ITEM)
 801b906:	18bb      	adds	r3, r7, r2
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	3301      	adds	r3, #1
 801b90c:	781b      	ldrb	r3, [r3, #0]
 801b90e:	2b0f      	cmp	r3, #15
 801b910:	d12e      	bne.n	801b970 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Parse the BOS descriptor.  */
                    _ux_utility_descriptor_parse(device_framework,
 801b912:	2414      	movs	r4, #20
 801b914:	193b      	adds	r3, r7, r4
 801b916:	4982      	ldr	r1, [pc, #520]	@ (801bb20 <_ux_device_stack_descriptor_send+0x394>)
 801b918:	18ba      	adds	r2, r7, r2
 801b91a:	6810      	ldr	r0, [r2, #0]
 801b91c:	2204      	movs	r2, #4
 801b91e:	f7fb fc96 	bl	801724e <_ux_utility_descriptor_parse>
                                _ux_system_bos_descriptor_structure,
                                UX_BOS_DESCRIPTOR_ENTRIES,
                                (UCHAR *) &bos_descriptor);

                    /* Get the length of entire BOS descriptor.  */
                    target_descriptor_length = bos_descriptor.wTotalLength;
 801b922:	193b      	adds	r3, r7, r4
 801b924:	689b      	ldr	r3, [r3, #8]
 801b926:	677b      	str	r3, [r7, #116]	@ 0x74

                    /* Descriptor is found.  */
                    status = UX_SUCCESS;
 801b928:	2300      	movs	r3, #0
 801b92a:	673b      	str	r3, [r7, #112]	@ 0x70
                    break;
 801b92c:	e031      	b.n	801b992 <_ux_device_stack_descriptor_send+0x206>

                /* Check if this is a configuration descriptor.  We are cheating here. Instead of creating
                a OTHER SPEED descriptor, we simply scan the configuration descriptor for the Full Speed
                framework and return this configuration after we manually changed the configuration descriptor
                item into a Other Speed Descriptor. */
                if (*(device_framework + 1) == UX_CONFIGURATION_DESCRIPTOR_ITEM)
 801b92e:	2080      	movs	r0, #128	@ 0x80
 801b930:	183b      	adds	r3, r7, r0
 801b932:	681b      	ldr	r3, [r3, #0]
 801b934:	3301      	adds	r3, #1
 801b936:	781b      	ldrb	r3, [r3, #0]
 801b938:	2b02      	cmp	r3, #2
 801b93a:	d119      	bne.n	801b970 <_ux_device_stack_descriptor_send+0x1e4>
                {

                    /* Check the index. It must be the same as the one requested.  */
                    if (parsed_descriptor_index == descriptor_index)
 801b93c:	2384      	movs	r3, #132	@ 0x84
 801b93e:	18fb      	adds	r3, r7, r3
 801b940:	681a      	ldr	r2, [r3, #0]
 801b942:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801b944:	429a      	cmp	r2, r3
 801b946:	d10d      	bne.n	801b964 <_ux_device_stack_descriptor_send+0x1d8>
                    {

                        /* Parse the configuration descriptor. */
                        _ux_utility_descriptor_parse(device_framework,
 801b948:	2424      	movs	r4, #36	@ 0x24
 801b94a:	193b      	adds	r3, r7, r4
 801b94c:	4975      	ldr	r1, [pc, #468]	@ (801bb24 <_ux_device_stack_descriptor_send+0x398>)
 801b94e:	183a      	adds	r2, r7, r0
 801b950:	6810      	ldr	r0, [r2, #0]
 801b952:	2208      	movs	r2, #8
 801b954:	f7fb fc7b 	bl	801724e <_ux_utility_descriptor_parse>
                                    _ux_system_configuration_descriptor_structure,
                                    UX_CONFIGURATION_DESCRIPTOR_ENTRIES,
                                    (UCHAR *) &configuration_descriptor);

                        /* Get the length of entire configuration descriptor.  */
                        target_descriptor_length = configuration_descriptor.wTotalLength;
 801b958:	193b      	adds	r3, r7, r4
 801b95a:	689b      	ldr	r3, [r3, #8]
 801b95c:	677b      	str	r3, [r7, #116]	@ 0x74

                        /* Descriptor is found.  */
                        status = UX_SUCCESS;
 801b95e:	2300      	movs	r3, #0
 801b960:	673b      	str	r3, [r7, #112]	@ 0x70
                        break;
 801b962:	e016      	b.n	801b992 <_ux_device_stack_descriptor_send+0x206>
                    }
                    else
                    {

                        /* There may be more configuration descriptors in this framework.  */
                        parsed_descriptor_index++;
 801b964:	2284      	movs	r2, #132	@ 0x84
 801b966:	18bb      	adds	r3, r7, r2
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	3301      	adds	r3, #1
 801b96c:	18ba      	adds	r2, r7, r2
 801b96e:	6013      	str	r3, [r2, #0]
                    }
                }
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 801b970:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 801b972:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b974:	1ad3      	subs	r3, r2, r3
 801b976:	67bb      	str	r3, [r7, #120]	@ 0x78

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 801b978:	2180      	movs	r1, #128	@ 0x80
 801b97a:	187b      	adds	r3, r7, r1
 801b97c:	681a      	ldr	r2, [r3, #0]
 801b97e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801b980:	18d3      	adds	r3, r2, r3
 801b982:	187a      	adds	r2, r7, r1
 801b984:	6013      	str	r3, [r2, #0]
        while (device_framework < device_framework_end)
 801b986:	2380      	movs	r3, #128	@ 0x80
 801b988:	18fb      	adds	r3, r7, r3
 801b98a:	681a      	ldr	r2, [r3, #0]
 801b98c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801b98e:	429a      	cmp	r2, r3
 801b990:	d3b1      	bcc.n	801b8f6 <_ux_device_stack_descriptor_send+0x16a>
        }

        /* Send the descriptor.  */
        if (status == UX_SUCCESS)
 801b992:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801b994:	2b00      	cmp	r3, #0
 801b996:	d000      	beq.n	801b99a <_ux_device_stack_descriptor_send+0x20e>
 801b998:	e137      	b.n	801bc0a <_ux_device_stack_descriptor_send+0x47e>
        {

            /* Ensure the host does not demand a length beyond our descriptor (Windows does that)
                and do not return more than what is allowed.  */
            if (target_descriptor_length < host_length)
 801b99a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	429a      	cmp	r2, r3
 801b9a0:	d202      	bcs.n	801b9a8 <_ux_device_stack_descriptor_send+0x21c>
                length =  target_descriptor_length;
 801b9a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801b9a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801b9a6:	e001      	b.n	801b9ac <_ux_device_stack_descriptor_send+0x220>
            else
                length =  host_length;
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* Check buffer length, since total descriptors length may exceed buffer...  */
            if (length > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801b9ac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b9ae:	2380      	movs	r3, #128	@ 0x80
 801b9b0:	005b      	lsls	r3, r3, #1
 801b9b2:	429a      	cmp	r2, r3
 801b9b4:	d90d      	bls.n	801b9d2 <_ux_device_stack_descriptor_send+0x246>
            {
                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801b9b6:	2212      	movs	r2, #18
 801b9b8:	2109      	movs	r1, #9
 801b9ba:	2002      	movs	r0, #2
 801b9bc:	f7fb fb58 	bl	8017070 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801b9c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801b9c2:	699b      	ldr	r3, [r3, #24]
 801b9c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801b9c6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801b9c8:	2114      	movs	r1, #20
 801b9ca:	4798      	blx	r3
 801b9cc:	0003      	movs	r3, r0
 801b9ce:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 801b9d0:	e11e      	b.n	801bc10 <_ux_device_stack_descriptor_send+0x484>
            }

            /* Copy the device descriptor into the transfer request memory.  */
            _ux_utility_memory_copy(transfer_request -> ux_slave_transfer_request_data_pointer,
 801b9d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b9d4:	68db      	ldr	r3, [r3, #12]
 801b9d6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801b9d8:	2180      	movs	r1, #128	@ 0x80
 801b9da:	1879      	adds	r1, r7, r1
 801b9dc:	6809      	ldr	r1, [r1, #0]
 801b9de:	0018      	movs	r0, r3
 801b9e0:	f7fb fea4 	bl	801772c <_ux_utility_memory_copy>
                                device_framework, length); /* Use case of memcpy is verified. */

            /* Now we need to hack the found descriptor because this request expect a requested
                descriptor type instead of the regular descriptor.  */
            *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) = (UCHAR)descriptor_type;
 801b9e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b9e6:	68db      	ldr	r3, [r3, #12]
 801b9e8:	3301      	adds	r3, #1
 801b9ea:	68fa      	ldr	r2, [r7, #12]
 801b9ec:	b2d2      	uxtb	r2, r2
 801b9ee:	701a      	strb	r2, [r3, #0]

            /* We can return the configuration descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801b9f0:	687a      	ldr	r2, [r7, #4]
 801b9f2:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801b9f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801b9f6:	0018      	movs	r0, r3
 801b9f8:	f000 fe5e 	bl	801c6b8 <_ux_device_stack_transfer_request>
 801b9fc:	0003      	movs	r3, r0
 801b9fe:	673b      	str	r3, [r7, #112]	@ 0x70
        }
        break;
 801ba00:	e103      	b.n	801bc0a <_ux_device_stack_descriptor_send+0x47e>

    case UX_STRING_DESCRIPTOR_ITEM:

        /* We need to filter for the index 0 which is the language ID string.  */
        if (descriptor_index == 0)
 801ba02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801ba04:	2b00      	cmp	r3, #0
 801ba06:	d153      	bne.n	801bab0 <_ux_device_stack_descriptor_send+0x324>
        {

            /* We need to check request buffer size in case it's possible exceed. */
            if (_ux_system_slave -> ux_system_slave_language_id_framework_length + 2 > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801ba08:	4b43      	ldr	r3, [pc, #268]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801ba0a:	681a      	ldr	r2, [r3, #0]
 801ba0c:	23a6      	movs	r3, #166	@ 0xa6
 801ba0e:	005b      	lsls	r3, r3, #1
 801ba10:	58d3      	ldr	r3, [r2, r3]
 801ba12:	1c9a      	adds	r2, r3, #2
 801ba14:	2380      	movs	r3, #128	@ 0x80
 801ba16:	005b      	lsls	r3, r3, #1
 801ba18:	429a      	cmp	r2, r3
 801ba1a:	d90d      	bls.n	801ba38 <_ux_device_stack_descriptor_send+0x2ac>
            {

                /* Error trap. */
                _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801ba1c:	2212      	movs	r2, #18
 801ba1e:	2109      	movs	r1, #9
 801ba20:	2002      	movs	r0, #2
 801ba22:	f7fb fb25 	bl	8017070 <_ux_system_error_handler>

                /* If trace is enabled, insert this event into the trace buffer.  */
                UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device, 0, 0, UX_TRACE_ERRORS, 0, 0)

                /* Stall the endpoint.  */
                status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801ba26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ba28:	699b      	ldr	r3, [r3, #24]
 801ba2a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801ba2c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801ba2e:	2114      	movs	r1, #20
 801ba30:	4798      	blx	r3
 801ba32:	0003      	movs	r3, r0
 801ba34:	673b      	str	r3, [r7, #112]	@ 0x70
                break;
 801ba36:	e0eb      	b.n	801bc10 <_ux_device_stack_descriptor_send+0x484>
            }

            /* We have a request to send back the language ID list. Use the transfer request buffer.  */
            string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801ba38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801ba3a:	68db      	ldr	r3, [r3, #12]
 801ba3c:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Store the total length of the response.  */
            *string_memory =  (UCHAR)(_ux_system_slave -> ux_system_slave_language_id_framework_length + 2);
 801ba3e:	4b36      	ldr	r3, [pc, #216]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801ba40:	681a      	ldr	r2, [r3, #0]
 801ba42:	23a6      	movs	r3, #166	@ 0xa6
 801ba44:	005b      	lsls	r3, r3, #1
 801ba46:	58d3      	ldr	r3, [r2, r3]
 801ba48:	b2db      	uxtb	r3, r3
 801ba4a:	3302      	adds	r3, #2
 801ba4c:	b2da      	uxtb	r2, r3
 801ba4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ba50:	701a      	strb	r2, [r3, #0]

            /* Store the descriptor type.  */
            *(string_memory +1) =  UX_STRING_DESCRIPTOR_ITEM;
 801ba52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ba54:	3301      	adds	r3, #1
 801ba56:	2203      	movs	r2, #3
 801ba58:	701a      	strb	r2, [r3, #0]

            /* Store the language ID into the buffer.  */
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 801ba5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801ba5c:	1c98      	adds	r0, r3, #2
 801ba5e:	4b2e      	ldr	r3, [pc, #184]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801ba60:	681a      	ldr	r2, [r3, #0]
 801ba62:	23a4      	movs	r3, #164	@ 0xa4
 801ba64:	005b      	lsls	r3, r3, #1
 801ba66:	58d1      	ldr	r1, [r2, r3]
                                                        _ux_system_slave -> ux_system_slave_language_id_framework_length); /* Use case of memcpy is verified. */
 801ba68:	4b2b      	ldr	r3, [pc, #172]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801ba6a:	681a      	ldr	r2, [r3, #0]
            _ux_utility_memory_copy(string_memory+2, _ux_system_slave -> ux_system_slave_language_id_framework,
 801ba6c:	23a6      	movs	r3, #166	@ 0xa6
 801ba6e:	005b      	lsls	r3, r3, #1
 801ba70:	58d3      	ldr	r3, [r2, r3]
 801ba72:	001a      	movs	r2, r3
 801ba74:	f7fb fe5a 	bl	801772c <_ux_utility_memory_copy>

            /* Filter the length asked/required.  */
            if (host_length > _ux_system_slave -> ux_system_slave_language_id_framework_length + 2)
 801ba78:	4b27      	ldr	r3, [pc, #156]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801ba7a:	681a      	ldr	r2, [r3, #0]
 801ba7c:	23a6      	movs	r3, #166	@ 0xa6
 801ba7e:	005b      	lsls	r3, r3, #1
 801ba80:	58d3      	ldr	r3, [r2, r3]
 801ba82:	3302      	adds	r3, #2
 801ba84:	687a      	ldr	r2, [r7, #4]
 801ba86:	429a      	cmp	r2, r3
 801ba88:	d907      	bls.n	801ba9a <_ux_device_stack_descriptor_send+0x30e>
                length =  _ux_system_slave -> ux_system_slave_language_id_framework_length + 2;
 801ba8a:	4b23      	ldr	r3, [pc, #140]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801ba8c:	681a      	ldr	r2, [r3, #0]
 801ba8e:	23a6      	movs	r3, #166	@ 0xa6
 801ba90:	005b      	lsls	r3, r3, #1
 801ba92:	58d3      	ldr	r3, [r2, r3]
 801ba94:	3302      	adds	r3, #2
 801ba96:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801ba98:	e001      	b.n	801ba9e <_ux_device_stack_descriptor_send+0x312>
            else
                length =  host_length;
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	66fb      	str	r3, [r7, #108]	@ 0x6c

            /* We can return the string language ID descriptor.  */
            status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801ba9e:	687a      	ldr	r2, [r7, #4]
 801baa0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801baa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801baa4:	0018      	movs	r0, r3
 801baa6:	f000 fe07 	bl	801c6b8 <_ux_device_stack_transfer_request>
 801baaa:	0003      	movs	r3, r0
 801baac:	673b      	str	r3, [r7, #112]	@ 0x70
                /* Could not find the required string index. Stall the endpoint.  */
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
                return(UX_ERROR);
            }
        }
        break;
 801baae:	e0ae      	b.n	801bc0e <_ux_device_stack_descriptor_send+0x482>
            string_framework =  _ux_system_slave -> ux_system_slave_string_framework;
 801bab0:	4b19      	ldr	r3, [pc, #100]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801bab2:	681a      	ldr	r2, [r3, #0]
 801bab4:	23a0      	movs	r3, #160	@ 0xa0
 801bab6:	005b      	lsls	r3, r3, #1
 801bab8:	58d3      	ldr	r3, [r2, r3]
 801baba:	66bb      	str	r3, [r7, #104]	@ 0x68
            string_framework_length =  _ux_system_slave -> ux_system_slave_string_framework_length;
 801babc:	4b16      	ldr	r3, [pc, #88]	@ (801bb18 <_ux_device_stack_descriptor_send+0x38c>)
 801babe:	681a      	ldr	r2, [r3, #0]
 801bac0:	23a2      	movs	r3, #162	@ 0xa2
 801bac2:	005b      	lsls	r3, r3, #1
 801bac4:	58d3      	ldr	r3, [r2, r3]
 801bac6:	667b      	str	r3, [r7, #100]	@ 0x64
            while (string_framework_length != 0)
 801bac8:	e088      	b.n	801bbdc <_ux_device_stack_descriptor_send+0x450>
                if (_ux_utility_short_get(string_framework) == request_index)
 801baca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bacc:	0018      	movs	r0, r3
 801bace:	f7fb fffa 	bl	8017ac6 <_ux_utility_short_get>
 801bad2:	0002      	movs	r2, r0
 801bad4:	68bb      	ldr	r3, [r7, #8]
 801bad6:	4293      	cmp	r3, r2
 801bad8:	d000      	beq.n	801badc <_ux_device_stack_descriptor_send+0x350>
 801bada:	e070      	b.n	801bbbe <_ux_device_stack_descriptor_send+0x432>
                    if (*(string_framework + 2) == descriptor_index)
 801badc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bade:	3302      	adds	r3, #2
 801bae0:	781b      	ldrb	r3, [r3, #0]
 801bae2:	001a      	movs	r2, r3
 801bae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801bae6:	4293      	cmp	r3, r2
 801bae8:	d169      	bne.n	801bbbe <_ux_device_stack_descriptor_send+0x432>
                        if (((*(string_framework + 3)*2) + 2) > UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH)
 801baea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801baec:	3303      	adds	r3, #3
 801baee:	781b      	ldrb	r3, [r3, #0]
 801baf0:	3301      	adds	r3, #1
 801baf2:	005a      	lsls	r2, r3, #1
 801baf4:	2380      	movs	r3, #128	@ 0x80
 801baf6:	005b      	lsls	r3, r3, #1
 801baf8:	429a      	cmp	r2, r3
 801bafa:	dd15      	ble.n	801bb28 <_ux_device_stack_descriptor_send+0x39c>
                            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_DEVICE_STACK, UX_MEMORY_INSUFFICIENT);
 801bafc:	2212      	movs	r2, #18
 801bafe:	2109      	movs	r1, #9
 801bb00:	2002      	movs	r0, #2
 801bb02:	f7fb fab5 	bl	8017070 <_ux_system_error_handler>
                            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801bb06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bb08:	699b      	ldr	r3, [r3, #24]
 801bb0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bb0c:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801bb0e:	2114      	movs	r1, #20
 801bb10:	4798      	blx	r3
 801bb12:	0003      	movs	r3, r0
 801bb14:	673b      	str	r3, [r7, #112]	@ 0x70
                            break;
 801bb16:	e065      	b.n	801bbe4 <_ux_device_stack_descriptor_send+0x458>
 801bb18:	200116a4 	.word	0x200116a4
 801bb1c:	0801e7bc 	.word	0x0801e7bc
 801bb20:	20000040 	.word	0x20000040
 801bb24:	2000002c 	.word	0x2000002c
                        string_memory =  transfer_request -> ux_slave_transfer_request_data_pointer;
 801bb28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bb2a:	68db      	ldr	r3, [r3, #12]
 801bb2c:	64bb      	str	r3, [r7, #72]	@ 0x48
                        *string_memory =  (UCHAR)((*(string_framework + 3)*2) + 2);
 801bb2e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bb30:	3303      	adds	r3, #3
 801bb32:	781b      	ldrb	r3, [r3, #0]
 801bb34:	3301      	adds	r3, #1
 801bb36:	b2db      	uxtb	r3, r3
 801bb38:	18db      	adds	r3, r3, r3
 801bb3a:	b2da      	uxtb	r2, r3
 801bb3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bb3e:	701a      	strb	r2, [r3, #0]
                        *(string_memory + 1) =  UX_STRING_DESCRIPTOR_ITEM;
 801bb40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bb42:	3301      	adds	r3, #1
 801bb44:	2203      	movs	r2, #3
 801bb46:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 801bb48:	2300      	movs	r3, #0
 801bb4a:	663b      	str	r3, [r7, #96]	@ 0x60
 801bb4c:	e015      	b.n	801bb7a <_ux_device_stack_descriptor_send+0x3ee>
                            *(string_memory + 2 + (string_length * 2)) =  *(string_framework + 4 + string_length);
 801bb4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bb50:	3304      	adds	r3, #4
 801bb52:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bb54:	18d2      	adds	r2, r2, r3
 801bb56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bb58:	3301      	adds	r3, #1
 801bb5a:	005b      	lsls	r3, r3, #1
 801bb5c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801bb5e:	18cb      	adds	r3, r1, r3
 801bb60:	7812      	ldrb	r2, [r2, #0]
 801bb62:	701a      	strb	r2, [r3, #0]
                            *(string_memory + 2 + (string_length * 2) + 1) =  0;
 801bb64:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bb66:	3301      	adds	r3, #1
 801bb68:	005b      	lsls	r3, r3, #1
 801bb6a:	3301      	adds	r3, #1
 801bb6c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801bb6e:	18d3      	adds	r3, r2, r3
 801bb70:	2200      	movs	r2, #0
 801bb72:	701a      	strb	r2, [r3, #0]
                        for (string_length = 0; string_length <  *(string_framework + 3) ; string_length ++)
 801bb74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bb76:	3301      	adds	r3, #1
 801bb78:	663b      	str	r3, [r7, #96]	@ 0x60
 801bb7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bb7c:	3303      	adds	r3, #3
 801bb7e:	781b      	ldrb	r3, [r3, #0]
 801bb80:	001a      	movs	r2, r3
 801bb82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801bb84:	4293      	cmp	r3, r2
 801bb86:	d3e2      	bcc.n	801bb4e <_ux_device_stack_descriptor_send+0x3c2>
                        if (host_length > (UINT)((*(string_framework + 3)*2) + 2))
 801bb88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bb8a:	3303      	adds	r3, #3
 801bb8c:	781b      	ldrb	r3, [r3, #0]
 801bb8e:	3301      	adds	r3, #1
 801bb90:	005b      	lsls	r3, r3, #1
 801bb92:	001a      	movs	r2, r3
 801bb94:	687b      	ldr	r3, [r7, #4]
 801bb96:	4293      	cmp	r3, r2
 801bb98:	d906      	bls.n	801bba8 <_ux_device_stack_descriptor_send+0x41c>
                            length =  (ULONG)((*(string_framework + 3)*2) + 2);
 801bb9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bb9c:	3303      	adds	r3, #3
 801bb9e:	781b      	ldrb	r3, [r3, #0]
 801bba0:	3301      	adds	r3, #1
 801bba2:	005b      	lsls	r3, r3, #1
 801bba4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801bba6:	e001      	b.n	801bbac <_ux_device_stack_descriptor_send+0x420>
                            length =  host_length;
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	66fb      	str	r3, [r7, #108]	@ 0x6c
                        status =  _ux_device_stack_transfer_request(transfer_request, length, host_length);
 801bbac:	687a      	ldr	r2, [r7, #4]
 801bbae:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801bbb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801bbb2:	0018      	movs	r0, r3
 801bbb4:	f000 fd80 	bl	801c6b8 <_ux_device_stack_transfer_request>
 801bbb8:	0003      	movs	r3, r0
 801bbba:	673b      	str	r3, [r7, #112]	@ 0x70
                        break;
 801bbbc:	e012      	b.n	801bbe4 <_ux_device_stack_descriptor_send+0x458>
                string_framework_length -=  (ULONG) *(string_framework + 3) + 4;
 801bbbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bbc0:	3303      	adds	r3, #3
 801bbc2:	781b      	ldrb	r3, [r3, #0]
 801bbc4:	001a      	movs	r2, r3
 801bbc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bbc8:	1a9b      	subs	r3, r3, r2
 801bbca:	3b04      	subs	r3, #4
 801bbcc:	667b      	str	r3, [r7, #100]	@ 0x64
                string_framework +=  (ULONG) *(string_framework + 3) + 4;
 801bbce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801bbd0:	3303      	adds	r3, #3
 801bbd2:	781b      	ldrb	r3, [r3, #0]
 801bbd4:	3304      	adds	r3, #4
 801bbd6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801bbd8:	18d3      	adds	r3, r2, r3
 801bbda:	66bb      	str	r3, [r7, #104]	@ 0x68
            while (string_framework_length != 0)
 801bbdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d000      	beq.n	801bbe4 <_ux_device_stack_descriptor_send+0x458>
 801bbe2:	e772      	b.n	801baca <_ux_device_stack_descriptor_send+0x33e>
            if (string_framework_length == 0)
 801bbe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	d111      	bne.n	801bc0e <_ux_device_stack_descriptor_send+0x482>
                dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801bbea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bbec:	699b      	ldr	r3, [r3, #24]
 801bbee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bbf0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801bbf2:	2114      	movs	r1, #20
 801bbf4:	4798      	blx	r3
                return(UX_ERROR);
 801bbf6:	23ff      	movs	r3, #255	@ 0xff
 801bbf8:	e00b      	b.n	801bc12 <_ux_device_stack_descriptor_send+0x486>

    default:

        /* Stall the endpoint.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801bbfa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801bbfc:	699b      	ldr	r3, [r3, #24]
 801bbfe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801bc00:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 801bc02:	2114      	movs	r1, #20
 801bc04:	4798      	blx	r3
        return(UX_ERROR);
 801bc06:	23ff      	movs	r3, #255	@ 0xff
 801bc08:	e003      	b.n	801bc12 <_ux_device_stack_descriptor_send+0x486>
        break;
 801bc0a:	46c0      	nop			@ (mov r8, r8)
 801bc0c:	e000      	b.n	801bc10 <_ux_device_stack_descriptor_send+0x484>
        break;
 801bc0e:	46c0      	nop			@ (mov r8, r8)
    }

    /* Return the status to the caller.  */
    return(status);
 801bc10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
}
 801bc12:	0018      	movs	r0, r3
 801bc14:	46bd      	mov	sp, r7
 801bc16:	b023      	add	sp, #140	@ 0x8c
 801bc18:	bd90      	pop	{r4, r7, pc}
 801bc1a:	46c0      	nop			@ (mov r8, r8)

0801bc1c <_ux_device_stack_disconnect>:
/*                                            definitions,                */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_disconnect(VOID)
{
 801bc1c:	b580      	push	{r7, lr}
 801bc1e:	b092      	sub	sp, #72	@ 0x48
 801bc20:	af00      	add	r7, sp, #0
#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
UX_SLAVE_INTERFACE          *next_interface; 
#endif
UX_SLAVE_CLASS              *class;
UX_SLAVE_CLASS_COMMAND      class_command;
UINT                        status = UX_ERROR;
 801bc22:	23ff      	movs	r3, #255	@ 0xff
 801bc24:	643b      	str	r3, [r7, #64]	@ 0x40
                        
    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801bc26:	4b2d      	ldr	r3, [pc, #180]	@ (801bcdc <_ux_device_stack_disconnect+0xc0>)
 801bc28:	681b      	ldr	r3, [r3, #0]
 801bc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801bc2c:	4b2b      	ldr	r3, [pc, #172]	@ (801bcdc <_ux_device_stack_disconnect+0xc0>)
 801bc2e:	681b      	ldr	r3, [r3, #0]
 801bc30:	3320      	adds	r3, #32
 801bc32:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* If trace is enabled, register this object.  */
    UX_TRACE_OBJECT_UNREGISTER(device);

    /* If the device was in the configured state, there may be interfaces
       attached to the configuration.  */
    if (device -> ux_slave_device_state == UX_DEVICE_CONFIGURED)
 801bc34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc36:	681b      	ldr	r3, [r3, #0]
 801bc38:	2b03      	cmp	r3, #3
 801bc3a:	d127      	bne.n	801bc8c <_ux_device_stack_disconnect+0x70>
    {
        /* Get the pointer to the first interface.  */
        interface =  device -> ux_slave_device_first_interface;
 801bc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc3e:	22f0      	movs	r2, #240	@ 0xf0
 801bc40:	589b      	ldr	r3, [r3, r2]
 801bc42:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        /* Parse all the interfaces if any.  */
        while (interface != UX_NULL)
 801bc44:	e01c      	b.n	801bc80 <_ux_device_stack_disconnect+0x64>
        {
#endif

            /* Build all the fields of the Class Command.  */
            class_command.ux_slave_class_command_request =   UX_SLAVE_CLASS_COMMAND_DEACTIVATE;
 801bc46:	1d3b      	adds	r3, r7, #4
 801bc48:	2203      	movs	r2, #3
 801bc4a:	601a      	str	r2, [r3, #0]
            class_command.ux_slave_class_command_interface =  (VOID *) interface;
 801bc4c:	1d3b      	adds	r3, r7, #4
 801bc4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801bc50:	609a      	str	r2, [r3, #8]

            /* Get the pointer to the class container of this interface.  */
            class =  interface -> ux_slave_interface_class;
 801bc52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bc54:	685b      	ldr	r3, [r3, #4]
 801bc56:	637b      	str	r3, [r7, #52]	@ 0x34
            
            /* Store the class container. */
            class_command.ux_slave_class_command_class_ptr =  class;
 801bc58:	1d3b      	adds	r3, r7, #4
 801bc5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bc5c:	621a      	str	r2, [r3, #32]

            /* If there is a class container for this instance, deactivate it.  */
            if (class != UX_NULL)
 801bc5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bc60:	2b00      	cmp	r3, #0
 801bc62:	d004      	beq.n	801bc6e <_ux_device_stack_disconnect+0x52>
            
                /* Call the class with the DEACTIVATE signal.  */
                class -> ux_slave_class_entry_function(&class_command);
 801bc64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bc66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bc68:	1d3a      	adds	r2, r7, #4
 801bc6a:	0010      	movs	r0, r2
 801bc6c:	4798      	blx	r3

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Get the next interface.  */
            next_interface =  interface -> ux_slave_interface_next_interface;
 801bc6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bc70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bc72:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

            /* Remove the interface and all endpoints associated with it.  */
            _ux_device_stack_interface_delete(interface);
 801bc74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bc76:	0018      	movs	r0, r3
 801bc78:	f000 fab8 	bl	801c1ec <_ux_device_stack_interface_delete>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Now we refresh the interface pointer.  */
            interface =  next_interface;
 801bc7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bc7e:	647b      	str	r3, [r7, #68]	@ 0x44
        while (interface != UX_NULL)
 801bc80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bc82:	2b00      	cmp	r3, #0
 801bc84:	d1df      	bne.n	801bc46 <_ux_device_stack_disconnect+0x2a>
        }
#endif

        /* Mark the device as attached now.  */
        device -> ux_slave_device_state =  UX_DEVICE_ATTACHED;
 801bc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc88:	2201      	movs	r2, #1
 801bc8a:	601a      	str	r2, [r3, #0]
    }

    /* If the device was attached, we need to destroy the control endpoint.  */
    if (device -> ux_slave_device_state == UX_DEVICE_ATTACHED)
 801bc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	2b01      	cmp	r3, #1
 801bc92:	d108      	bne.n	801bca6 <_ux_device_stack_disconnect+0x8a>

        /* Now we can destroy the default control endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 801bc94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bc96:	699b      	ldr	r3, [r3, #24]
                                (VOID *) &device -> ux_slave_device_control_endpoint);
 801bc98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bc9a:	323c      	adds	r2, #60	@ 0x3c
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT,
 801bc9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801bc9e:	210f      	movs	r1, #15
 801bca0:	4798      	blx	r3
 801bca2:	0003      	movs	r3, r0
 801bca4:	643b      	str	r3, [r7, #64]	@ 0x40

    /* We are reverting to configuration 0.  */
    device -> ux_slave_device_configuration_selected =  0;
 801bca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bca8:	22cc      	movs	r2, #204	@ 0xcc
 801bcaa:	2100      	movs	r1, #0
 801bcac:	5099      	str	r1, [r3, r2]

    /* Set the device to be non attached.  */
    device -> ux_slave_device_state =  UX_DEVICE_RESET;
 801bcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bcb0:	2200      	movs	r2, #0
 801bcb2:	601a      	str	r2, [r3, #0]

    /* Check the status change callback.  */
    if(_ux_system_slave -> ux_system_slave_change_function != UX_NULL)
 801bcb4:	4b09      	ldr	r3, [pc, #36]	@ (801bcdc <_ux_device_stack_disconnect+0xc0>)
 801bcb6:	681a      	ldr	r2, [r3, #0]
 801bcb8:	23e2      	movs	r3, #226	@ 0xe2
 801bcba:	005b      	lsls	r3, r3, #1
 801bcbc:	58d3      	ldr	r3, [r2, r3]
 801bcbe:	2b00      	cmp	r3, #0
 801bcc0:	d006      	beq.n	801bcd0 <_ux_device_stack_disconnect+0xb4>
    {

        /* Inform the application if a callback function was programmed.  */
        _ux_system_slave -> ux_system_slave_change_function(UX_DEVICE_REMOVED);
 801bcc2:	4b06      	ldr	r3, [pc, #24]	@ (801bcdc <_ux_device_stack_disconnect+0xc0>)
 801bcc4:	681a      	ldr	r2, [r3, #0]
 801bcc6:	23e2      	movs	r3, #226	@ 0xe2
 801bcc8:	005b      	lsls	r3, r3, #1
 801bcca:	58d3      	ldr	r3, [r2, r3]
 801bccc:	200a      	movs	r0, #10
 801bcce:	4798      	blx	r3
    }

    /* Return the status to the caller.  */
    return(status);
 801bcd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
}
 801bcd2:	0018      	movs	r0, r3
 801bcd4:	46bd      	mov	sp, r7
 801bcd6:	b012      	add	sp, #72	@ 0x48
 801bcd8:	bd80      	pop	{r7, pc}
 801bcda:	46c0      	nop			@ (mov r8, r8)
 801bcdc:	200116a4 	.word	0x200116a4

0801bce0 <_ux_device_stack_endpoint_stall>:
/*                                            added standalone support,   */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_endpoint_stall(UX_SLAVE_ENDPOINT *endpoint)
{
 801bce0:	b580      	push	{r7, lr}
 801bce2:	b088      	sub	sp, #32
 801bce4:	af00      	add	r7, sp, #0
 801bce6:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_ENDPOINT_STALL, endpoint, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801bce8:	4b17      	ldr	r3, [pc, #92]	@ (801bd48 <_ux_device_stack_endpoint_stall+0x68>)
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	61bb      	str	r3, [r7, #24]

    /* Assume device is in an invalid state here in order to reduce code in following 
       section where interrupts are disabled.  */
    status =  UX_ERROR;
 801bcee:	23ff      	movs	r3, #255	@ 0xff
 801bcf0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801bcf2:	f3ef 8310 	mrs	r3, PRIMASK
 801bcf6:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801bcf8:	b672      	cpsid	i
    return(primask_value);
 801bcfa:	693b      	ldr	r3, [r7, #16]

    /* Ensure we don't change the endpoint's state after disconnection routine
       resets it.  */
    UX_DISABLE
 801bcfc:	617b      	str	r3, [r7, #20]

    /* Check if the device is in a valid state; as soon as the device is out 
       of the RESET state, transfers occur and thus endpoints may be stalled. */
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 801bcfe:	4b12      	ldr	r3, [pc, #72]	@ (801bd48 <_ux_device_stack_endpoint_stall+0x68>)
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	6a1b      	ldr	r3, [r3, #32]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d013      	beq.n	801bd30 <_ux_device_stack_endpoint_stall+0x50>
        endpoint -> ux_slave_endpoint_state != UX_ENDPOINT_HALTED)
 801bd08:	687b      	ldr	r3, [r7, #4]
 801bd0a:	685b      	ldr	r3, [r3, #4]
    if (_ux_system_slave -> ux_system_slave_device.ux_slave_device_state != UX_DEVICE_RESET &&
 801bd0c:	2b02      	cmp	r3, #2
 801bd0e:	d00f      	beq.n	801bd30 <_ux_device_stack_endpoint_stall+0x50>
    {

        /* Stall the endpoint.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801bd10:	69bb      	ldr	r3, [r7, #24]
 801bd12:	699b      	ldr	r3, [r3, #24]
 801bd14:	687a      	ldr	r2, [r7, #4]
 801bd16:	69b8      	ldr	r0, [r7, #24]
 801bd18:	2114      	movs	r1, #20
 801bd1a:	4798      	blx	r3
 801bd1c:	0003      	movs	r3, r0
 801bd1e:	61fb      	str	r3, [r7, #28]

        /* Mark the endpoint state.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) !=
 801bd20:	687b      	ldr	r3, [r7, #4]
 801bd22:	699b      	ldr	r3, [r3, #24]
 801bd24:	2203      	movs	r2, #3
 801bd26:	4013      	ands	r3, r2
 801bd28:	d002      	beq.n	801bd30 <_ux_device_stack_endpoint_stall+0x50>
            UX_CONTROL_ENDPOINT)
            endpoint -> ux_slave_endpoint_state =  UX_ENDPOINT_HALTED;
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	2202      	movs	r2, #2
 801bd2e:	605a      	str	r2, [r3, #4]
 801bd30:	697b      	ldr	r3, [r7, #20]
 801bd32:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801bd34:	68fb      	ldr	r3, [r7, #12]
 801bd36:	f383 8810 	msr	PRIMASK, r3
}
 801bd3a:	46c0      	nop			@ (mov r8, r8)

    /* Restore interrupts.  */
    UX_RESTORE

    /* Return completion status.  */
    return(status);       
 801bd3c:	69fb      	ldr	r3, [r7, #28]
}
 801bd3e:	0018      	movs	r0, r3
 801bd40:	46bd      	mov	sp, r7
 801bd42:	b008      	add	sp, #32
 801bd44:	bd80      	pop	{r7, pc}
 801bd46:	46c0      	nop			@ (mov r8, r8)
 801bd48:	200116a4 	.word	0x200116a4

0801bd4c <_ux_device_stack_get_status>:
/*                                            supported bi-dir-endpoints, */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_get_status(ULONG request_type, ULONG request_index, ULONG request_length)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b08a      	sub	sp, #40	@ 0x28
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	60f8      	str	r0, [r7, #12]
 801bd54:	60b9      	str	r1, [r7, #8]
 801bd56:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_GET_STATUS, request_type, request_index, request_length, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801bd58:	4b3d      	ldr	r3, [pc, #244]	@ (801be50 <_ux_device_stack_get_status+0x104>)
 801bd5a:	681b      	ldr	r3, [r3, #0]
 801bd5c:	623b      	str	r3, [r7, #32]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801bd5e:	4b3c      	ldr	r3, [pc, #240]	@ (801be50 <_ux_device_stack_get_status+0x104>)
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	3320      	adds	r3, #32
 801bd64:	61fb      	str	r3, [r7, #28]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801bd66:	69fb      	ldr	r3, [r7, #28]
 801bd68:	333c      	adds	r3, #60	@ 0x3c
 801bd6a:	61bb      	str	r3, [r7, #24]

    /* Get the pointer to the transfer request associated with the endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801bd6c:	69bb      	ldr	r3, [r7, #24]
 801bd6e:	3330      	adds	r3, #48	@ 0x30
 801bd70:	617b      	str	r3, [r7, #20]

    /* Reset the status buffer.  */
    *transfer_request -> ux_slave_transfer_request_data_pointer =  0;
 801bd72:	697b      	ldr	r3, [r7, #20]
 801bd74:	68db      	ldr	r3, [r3, #12]
 801bd76:	2200      	movs	r2, #0
 801bd78:	701a      	strb	r2, [r3, #0]
    *(transfer_request -> ux_slave_transfer_request_data_pointer + 1) =  0;
 801bd7a:	697b      	ldr	r3, [r7, #20]
 801bd7c:	68db      	ldr	r3, [r3, #12]
 801bd7e:	3301      	adds	r3, #1
 801bd80:	2200      	movs	r2, #0
 801bd82:	701a      	strb	r2, [r3, #0]
    
    /* The default length for GET_STATUS is 2, except for OTG get Status.  */
    data_length = 2;
 801bd84:	2302      	movs	r3, #2
 801bd86:	627b      	str	r3, [r7, #36]	@ 0x24
    
    /* The status can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	2203      	movs	r2, #3
 801bd8c:	4013      	ands	r3, r2
 801bd8e:	d002      	beq.n	801bd96 <_ux_device_stack_get_status+0x4a>
 801bd90:	2b02      	cmp	r3, #2
 801bd92:	d024      	beq.n	801bdde <_ux_device_stack_get_status+0x92>
 801bd94:	e040      	b.n	801be18 <_ux_device_stack_get_status+0xcc>
    
    case UX_REQUEST_TARGET_DEVICE:

        /* When the device is probed, it is either for the power/remote capabilities or OTG role swap.  
           We differentiate with the Windex, 0 or OTG status Selector.  */
        if (request_index == UX_OTG_STATUS_SELECTOR)
 801bd96:	68ba      	ldr	r2, [r7, #8]
 801bd98:	23f0      	movs	r3, #240	@ 0xf0
 801bd9a:	021b      	lsls	r3, r3, #8
 801bd9c:	429a      	cmp	r2, r3
 801bd9e:	d102      	bne.n	801bda6 <_ux_device_stack_get_status+0x5a>
        {

            /* Set the data length to 1.  */
            data_length = 1;
 801bda0:	2301      	movs	r3, #1
 801bda2:	627b      	str	r3, [r7, #36]	@ 0x24

            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
        }
        
        break;
 801bda4:	e040      	b.n	801be28 <_ux_device_stack_get_status+0xdc>
            if (_ux_system_slave -> ux_system_slave_power_state == UX_DEVICE_SELF_POWERED)
 801bda6:	4b2a      	ldr	r3, [pc, #168]	@ (801be50 <_ux_device_stack_get_status+0x104>)
 801bda8:	681a      	ldr	r2, [r3, #0]
 801bdaa:	23d2      	movs	r3, #210	@ 0xd2
 801bdac:	005b      	lsls	r3, r3, #1
 801bdae:	58d3      	ldr	r3, [r2, r3]
 801bdb0:	2b02      	cmp	r3, #2
 801bdb2:	d103      	bne.n	801bdbc <_ux_device_stack_get_status+0x70>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 801bdb4:	697b      	ldr	r3, [r7, #20]
 801bdb6:	68db      	ldr	r3, [r3, #12]
 801bdb8:	2201      	movs	r2, #1
 801bdba:	701a      	strb	r2, [r3, #0]
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_enabled)
 801bdbc:	4b24      	ldr	r3, [pc, #144]	@ (801be50 <_ux_device_stack_get_status+0x104>)
 801bdbe:	681a      	ldr	r2, [r3, #0]
 801bdc0:	23d6      	movs	r3, #214	@ 0xd6
 801bdc2:	005b      	lsls	r3, r3, #1
 801bdc4:	58d3      	ldr	r3, [r2, r3]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d02e      	beq.n	801be28 <_ux_device_stack_get_status+0xdc>
                *transfer_request -> ux_slave_transfer_request_data_pointer |=  2;
 801bdca:	697b      	ldr	r3, [r7, #20]
 801bdcc:	68db      	ldr	r3, [r3, #12]
 801bdce:	781a      	ldrb	r2, [r3, #0]
 801bdd0:	697b      	ldr	r3, [r7, #20]
 801bdd2:	68db      	ldr	r3, [r3, #12]
 801bdd4:	2102      	movs	r1, #2
 801bdd6:	430a      	orrs	r2, r1
 801bdd8:	b2d2      	uxtb	r2, r2
 801bdda:	701a      	strb	r2, [r3, #0]
        break;
 801bddc:	e024      	b.n	801be28 <_ux_device_stack_get_status+0xdc>

#ifndef UX_DEVICE_BIDIRECTIONAL_ENDPOINT_SUPPORT

        /* This feature returns the halt state of a specific endpoint.  The endpoint index
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index & (UINT)~UX_ENDPOINT_DIRECTION));
 801bdde:	6a3b      	ldr	r3, [r7, #32]
 801bde0:	699b      	ldr	r3, [r3, #24]
 801bde2:	68ba      	ldr	r2, [r7, #8]
 801bde4:	2180      	movs	r1, #128	@ 0x80
 801bde6:	438a      	bics	r2, r1
 801bde8:	6a38      	ldr	r0, [r7, #32]
 801bdea:	2115      	movs	r1, #21
 801bdec:	4798      	blx	r3
 801bdee:	0003      	movs	r3, r0
 801bdf0:	613b      	str	r3, [r7, #16]
           is used to retrieve the endpoint container.  */
        status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_ENDPOINT_STATUS, (VOID *)(ALIGN_TYPE)(request_index));
#endif

        /* Check the status. We may have a unknown endpoint.  */
        if (status != UX_ERROR)
 801bdf2:	693b      	ldr	r3, [r7, #16]
 801bdf4:	2bff      	cmp	r3, #255	@ 0xff
 801bdf6:	d007      	beq.n	801be08 <_ux_device_stack_get_status+0xbc>
        {

            if (status == UX_TRUE)
 801bdf8:	693b      	ldr	r3, [r7, #16]
 801bdfa:	2b01      	cmp	r3, #1
 801bdfc:	d116      	bne.n	801be2c <_ux_device_stack_get_status+0xe0>
                *transfer_request -> ux_slave_transfer_request_data_pointer =  1;
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	68db      	ldr	r3, [r3, #12]
 801be02:	2201      	movs	r2, #1
 801be04:	701a      	strb	r2, [r3, #0]
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
    
            /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
            return(UX_SUCCESS);            
        }
        break;
 801be06:	e011      	b.n	801be2c <_ux_device_stack_get_status+0xe0>
            dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801be08:	6a3b      	ldr	r3, [r7, #32]
 801be0a:	699b      	ldr	r3, [r3, #24]
 801be0c:	69ba      	ldr	r2, [r7, #24]
 801be0e:	6a38      	ldr	r0, [r7, #32]
 801be10:	2114      	movs	r1, #20
 801be12:	4798      	blx	r3
            return(UX_SUCCESS);            
 801be14:	2300      	movs	r3, #0
 801be16:	e016      	b.n	801be46 <_ux_device_stack_get_status+0xfa>

    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801be18:	6a3b      	ldr	r3, [r7, #32]
 801be1a:	699b      	ldr	r3, [r3, #24]
 801be1c:	69ba      	ldr	r2, [r7, #24]
 801be1e:	6a38      	ldr	r0, [r7, #32]
 801be20:	2114      	movs	r1, #20
 801be22:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801be24:	2300      	movs	r3, #0
 801be26:	e00e      	b.n	801be46 <_ux_device_stack_get_status+0xfa>
        break;
 801be28:	46c0      	nop			@ (mov r8, r8)
 801be2a:	e000      	b.n	801be2e <_ux_device_stack_get_status+0xe2>
        break;
 801be2c:	46c0      	nop			@ (mov r8, r8)
    }
    
    /* Set the phase of the transfer to data out.  */
    transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801be2e:	697b      	ldr	r3, [r7, #20]
 801be30:	2203      	movs	r2, #3
 801be32:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Send the descriptor with the appropriate length to the host.  */
    status =  _ux_device_stack_transfer_request(transfer_request, data_length, data_length);
 801be34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801be36:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801be38:	697b      	ldr	r3, [r7, #20]
 801be3a:	0018      	movs	r0, r3
 801be3c:	f000 fc3c 	bl	801c6b8 <_ux_device_stack_transfer_request>
 801be40:	0003      	movs	r3, r0
 801be42:	613b      	str	r3, [r7, #16]

    /* Return the function status.  */
    return(status);
 801be44:	693b      	ldr	r3, [r7, #16]
}
 801be46:	0018      	movs	r0, r3
 801be48:	46bd      	mov	sp, r7
 801be4a:	b00a      	add	sp, #40	@ 0x28
 801be4c:	bd80      	pop	{r7, pc}
 801be4e:	46c0      	nop			@ (mov r8, r8)
 801be50:	200116a4 	.word	0x200116a4

0801be54 <_ux_device_stack_initialize>:
UINT  _ux_device_stack_initialize(UCHAR * device_framework_high_speed, ULONG device_framework_length_high_speed,
                                  UCHAR * device_framework_full_speed, ULONG device_framework_length_full_speed,
                                  UCHAR * string_framework, ULONG string_framework_length,
                                  UCHAR * language_id_framework, ULONG language_id_framework_length,
                                  UINT (*ux_system_slave_change_function)(ULONG))
{
 801be54:	b580      	push	{r7, lr}
 801be56:	b094      	sub	sp, #80	@ 0x50
 801be58:	af00      	add	r7, sp, #0
 801be5a:	60f8      	str	r0, [r7, #12]
 801be5c:	60b9      	str	r1, [r7, #8]
 801be5e:	607a      	str	r2, [r7, #4]
 801be60:	603b      	str	r3, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INITIALIZE, 0, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device. */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801be62:	4bbe      	ldr	r3, [pc, #760]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801be64:	681b      	ldr	r3, [r3, #0]
 801be66:	3320      	adds	r3, #32
 801be68:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Store the high speed device framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_high_speed =             device_framework_high_speed;
 801be6a:	4bbc      	ldr	r3, [pc, #752]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801be6c:	681a      	ldr	r2, [r3, #0]
 801be6e:	239c      	movs	r3, #156	@ 0x9c
 801be70:	005b      	lsls	r3, r3, #1
 801be72:	68f9      	ldr	r1, [r7, #12]
 801be74:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_high_speed =      device_framework_length_high_speed;
 801be76:	4bb9      	ldr	r3, [pc, #740]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801be78:	681a      	ldr	r2, [r3, #0]
 801be7a:	239e      	movs	r3, #158	@ 0x9e
 801be7c:	005b      	lsls	r3, r3, #1
 801be7e:	68b9      	ldr	r1, [r7, #8]
 801be80:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_device_framework_full_speed =             device_framework_full_speed;
 801be82:	4bb6      	ldr	r3, [pc, #728]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801be84:	681a      	ldr	r2, [r3, #0]
 801be86:	2398      	movs	r3, #152	@ 0x98
 801be88:	005b      	lsls	r3, r3, #1
 801be8a:	6879      	ldr	r1, [r7, #4]
 801be8c:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_device_framework_length_full_speed =      device_framework_length_full_speed;
 801be8e:	4bb3      	ldr	r3, [pc, #716]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801be90:	681a      	ldr	r2, [r3, #0]
 801be92:	239a      	movs	r3, #154	@ 0x9a
 801be94:	005b      	lsls	r3, r3, #1
 801be96:	6839      	ldr	r1, [r7, #0]
 801be98:	50d1      	str	r1, [r2, r3]

    /* Store the string framework address and length in the project structure.  */
    _ux_system_slave -> ux_system_slave_string_framework =                         string_framework;
 801be9a:	4bb0      	ldr	r3, [pc, #704]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801be9c:	681a      	ldr	r2, [r3, #0]
 801be9e:	23a0      	movs	r3, #160	@ 0xa0
 801bea0:	005b      	lsls	r3, r3, #1
 801bea2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801bea4:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_string_framework_length =                  string_framework_length;
 801bea6:	4bad      	ldr	r3, [pc, #692]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801bea8:	681a      	ldr	r2, [r3, #0]
 801beaa:	23a2      	movs	r3, #162	@ 0xa2
 801beac:	005b      	lsls	r3, r3, #1
 801beae:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 801beb0:	50d1      	str	r1, [r2, r3]

    /* Store the language ID list in the project structure.  */
    _ux_system_slave -> ux_system_slave_language_id_framework =                 language_id_framework;
 801beb2:	4baa      	ldr	r3, [pc, #680]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801beb4:	681a      	ldr	r2, [r3, #0]
 801beb6:	23a4      	movs	r3, #164	@ 0xa4
 801beb8:	005b      	lsls	r3, r3, #1
 801beba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 801bebc:	50d1      	str	r1, [r2, r3]
    _ux_system_slave -> ux_system_slave_language_id_framework_length =          language_id_framework_length;
 801bebe:	4ba7      	ldr	r3, [pc, #668]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801bec0:	681a      	ldr	r2, [r3, #0]
 801bec2:	23a6      	movs	r3, #166	@ 0xa6
 801bec4:	005b      	lsls	r3, r3, #1
 801bec6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801bec8:	50d1      	str	r1, [r2, r3]

    /* Store the max number of slave class drivers in the project structure.  */
    UX_SYSTEM_DEVICE_MAX_CLASS_SET(UX_MAX_SLAVE_CLASS_DRIVER);
 801beca:	4ba4      	ldr	r3, [pc, #656]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801becc:	681a      	ldr	r2, [r3, #0]
 801bece:	23ac      	movs	r3, #172	@ 0xac
 801bed0:	005b      	lsls	r3, r3, #1
 801bed2:	2103      	movs	r1, #3
 801bed4:	50d1      	str	r1, [r2, r3]
    
    /* Store the device state change function callback.  */
    _ux_system_slave -> ux_system_slave_change_function =  ux_system_slave_change_function;
 801bed6:	4ba1      	ldr	r3, [pc, #644]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801bed8:	681a      	ldr	r2, [r3, #0]
 801beda:	23e2      	movs	r3, #226	@ 0xe2
 801bedc:	005b      	lsls	r3, r3, #1
 801bede:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801bee0:	50d1      	str	r1, [r2, r3]

    /* Allocate memory for the classes.
     * sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER) overflow is checked
     * outside of the function.
     */
    memory =  _ux_utility_memory_allocate(UX_NO_ALIGN, UX_REGULAR_MEMORY, sizeof(UX_SLAVE_CLASS) * UX_MAX_SLAVE_CLASS_DRIVER);
 801bee2:	23cf      	movs	r3, #207	@ 0xcf
 801bee4:	009b      	lsls	r3, r3, #2
 801bee6:	001a      	movs	r2, r3
 801bee8:	2100      	movs	r1, #0
 801beea:	2000      	movs	r0, #0
 801beec:	f7fb fad8 	bl	80174a0 <_ux_utility_memory_allocate>
 801bef0:	0003      	movs	r3, r0
 801bef2:	623b      	str	r3, [r7, #32]
    if (memory == UX_NULL)
 801bef4:	6a3b      	ldr	r3, [r7, #32]
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	d101      	bne.n	801befe <_ux_device_stack_initialize+0xaa>
        return(UX_MEMORY_INSUFFICIENT);
 801befa:	2312      	movs	r3, #18
 801befc:	e170      	b.n	801c1e0 <_ux_device_stack_initialize+0x38c>
    
    /* Save this memory allocation in the USBX project.  */
    _ux_system_slave -> ux_system_slave_class_array =  (UX_SLAVE_CLASS *) ((void *) memory);
 801befe:	4b97      	ldr	r3, [pc, #604]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801bf00:	681a      	ldr	r2, [r3, #0]
 801bf02:	23ae      	movs	r3, #174	@ 0xae
 801bf04:	005b      	lsls	r3, r3, #1
 801bf06:	6a39      	ldr	r1, [r7, #32]
 801bf08:	50d1      	str	r1, [r2, r3]

    /* Allocate some memory for the Control Endpoint.  First get the address of the transfer request for the 
       control endpoint. */
    transfer_request =  &device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request;
 801bf0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf0c:	336c      	adds	r3, #108	@ 0x6c
 801bf0e:	61fb      	str	r3, [r7, #28]

    /* Acquire a buffer for the size of the endpoint.  */
    transfer_request -> ux_slave_transfer_request_data_pointer =
          _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_CONTROL_MAX_LENGTH);
 801bf10:	2380      	movs	r3, #128	@ 0x80
 801bf12:	005b      	lsls	r3, r3, #1
 801bf14:	001a      	movs	r2, r3
 801bf16:	2101      	movs	r1, #1
 801bf18:	2000      	movs	r0, #0
 801bf1a:	f7fb fac1 	bl	80174a0 <_ux_utility_memory_allocate>
 801bf1e:	0002      	movs	r2, r0
    transfer_request -> ux_slave_transfer_request_data_pointer =
 801bf20:	69fb      	ldr	r3, [r7, #28]
 801bf22:	60da      	str	r2, [r3, #12]

    /* Ensure we have enough memory.  */
    if (transfer_request -> ux_slave_transfer_request_data_pointer == UX_NULL)
 801bf24:	69fb      	ldr	r3, [r7, #28]
 801bf26:	68db      	ldr	r3, [r3, #12]
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	d102      	bne.n	801bf32 <_ux_device_stack_initialize+0xde>
        status = UX_MEMORY_INSUFFICIENT;
 801bf2c:	2312      	movs	r3, #18
 801bf2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 801bf30:	e001      	b.n	801bf36 <_ux_device_stack_initialize+0xe2>
    else
        status = UX_SUCCESS;
 801bf32:	2300      	movs	r3, #0
 801bf34:	64bb      	str	r3, [r7, #72]	@ 0x48
    interfaces_found = UX_MAX_SLAVE_INTERFACES;
    endpoints_found = UX_MAX_DEVICE_ENDPOINTS;
#else

    /* Reset all values we are using during the scanning of the framework.  */
    interfaces_found                   =  0;
 801bf36:	2300      	movs	r3, #0
 801bf38:	647b      	str	r3, [r7, #68]	@ 0x44
    endpoints_found                    =  0;
 801bf3a:	2300      	movs	r3, #0
 801bf3c:	643b      	str	r3, [r7, #64]	@ 0x40
    max_interface_number               =  0;
 801bf3e:	2300      	movs	r3, #0
 801bf40:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Go on to scan interfaces if no error.  */
    if (status == UX_SUCCESS)
 801bf42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801bf44:	2b00      	cmp	r3, #0
 801bf46:	d000      	beq.n	801bf4a <_ux_device_stack_initialize+0xf6>
 801bf48:	e094      	b.n	801c074 <_ux_device_stack_initialize+0x220>
    {

        /* We need to determine the maximum number of interfaces and endpoints declared in the device framework.  
        This mechanism requires that both framework behave the same way regarding the number of interfaces
        and endpoints.  */
        device_framework        =  _ux_system_slave -> ux_system_slave_device_framework_full_speed;
 801bf4a:	4b84      	ldr	r3, [pc, #528]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801bf4c:	681a      	ldr	r2, [r3, #0]
 801bf4e:	2398      	movs	r3, #152	@ 0x98
 801bf50:	005b      	lsls	r3, r3, #1
 801bf52:	58d3      	ldr	r3, [r2, r3]
 801bf54:	62fb      	str	r3, [r7, #44]	@ 0x2c
        device_framework_length =  _ux_system_slave -> ux_system_slave_device_framework_length_full_speed;
 801bf56:	4b81      	ldr	r3, [pc, #516]	@ (801c15c <_ux_device_stack_initialize+0x308>)
 801bf58:	681a      	ldr	r2, [r3, #0]
 801bf5a:	239a      	movs	r3, #154	@ 0x9a
 801bf5c:	005b      	lsls	r3, r3, #1
 801bf5e:	58d3      	ldr	r3, [r2, r3]
 801bf60:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* Reset all values we are using during the scanning of the framework.  */
        local_interfaces_found             =  0;
 801bf62:	2300      	movs	r3, #0
 801bf64:	63bb      	str	r3, [r7, #56]	@ 0x38
        local_endpoints_found              =  0;
 801bf66:	2300      	movs	r3, #0
 801bf68:	637b      	str	r3, [r7, #52]	@ 0x34
        endpoints_in_interface_found       =  0;
 801bf6a:	2300      	movs	r3, #0
 801bf6c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Parse the device framework and locate interfaces and endpoint descriptor(s).  */
        while (device_framework_length != 0)
 801bf6e:	e057      	b.n	801c020 <_ux_device_stack_initialize+0x1cc>
        {

            /* Get the length of this descriptor.  */
            descriptor_length =  (ULONG) *device_framework;
 801bf70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf72:	781b      	ldrb	r3, [r3, #0]
 801bf74:	61bb      	str	r3, [r7, #24]
        
            /* And its type.  */
            descriptor_type =  *(device_framework + 1);
 801bf76:	2117      	movs	r1, #23
 801bf78:	187b      	adds	r3, r7, r1
 801bf7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801bf7c:	7852      	ldrb	r2, [r2, #1]
 801bf7e:	701a      	strb	r2, [r3, #0]
                    
            /* Check if this is an endpoint descriptor.  */
            switch(descriptor_type)
 801bf80:	187b      	adds	r3, r7, r1
 801bf82:	781b      	ldrb	r3, [r3, #0]
 801bf84:	2b02      	cmp	r3, #2
 801bf86:	d029      	beq.n	801bfdc <_ux_device_stack_initialize+0x188>
 801bf88:	2b04      	cmp	r3, #4
 801bf8a:	d13e      	bne.n	801c00a <_ux_device_stack_initialize+0x1b6>

            case UX_INTERFACE_DESCRIPTOR_ITEM:

                /* Check if this is alternate setting 0. If not, do not add another interface found.  
                If this is alternate setting 0, reset the endpoints count for this interface.  */
                if (*(device_framework + 3) == 0)
 801bf8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bf8e:	3303      	adds	r3, #3
 801bf90:	781b      	ldrb	r3, [r3, #0]
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	d10b      	bne.n	801bfae <_ux_device_stack_initialize+0x15a>
                {

                    /* Add the cumulated number of endpoints in the previous interface.  */
                    local_endpoints_found += endpoints_in_interface_found;
 801bf96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bf98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bf9a:	18d3      	adds	r3, r2, r3
 801bf9c:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Read the number of endpoints for this alternate setting.  */
                    endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 801bf9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfa0:	3304      	adds	r3, #4
 801bfa2:	781b      	ldrb	r3, [r3, #0]
 801bfa4:	633b      	str	r3, [r7, #48]	@ 0x30
                    
                    /* Increment the number of interfaces found in the current configuration.  */
                    local_interfaces_found++;
 801bfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfa8:	3301      	adds	r3, #1
 801bfaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 801bfac:	e00a      	b.n	801bfc4 <_ux_device_stack_initialize+0x170>
                }                
                else
                {

                    /* Compare the number of endpoints found in this non 0 alternate setting.  */
                    if (endpoints_in_interface_found < (ULONG) *(device_framework + 4))
 801bfae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfb0:	3304      	adds	r3, #4
 801bfb2:	781b      	ldrb	r3, [r3, #0]
 801bfb4:	001a      	movs	r2, r3
 801bfb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bfb8:	4293      	cmp	r3, r2
 801bfba:	d203      	bcs.n	801bfc4 <_ux_device_stack_initialize+0x170>
                    
                        /* Adjust the number of maximum endpoints in this interface.  */
                        endpoints_in_interface_found = (ULONG) *(device_framework + 4);
 801bfbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfbe:	3304      	adds	r3, #4
 801bfc0:	781b      	ldrb	r3, [r3, #0]
 801bfc2:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                /* Check and update max interface number.  */
                if (*(device_framework + 2) > max_interface_number)
 801bfc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfc6:	3302      	adds	r3, #2
 801bfc8:	781b      	ldrb	r3, [r3, #0]
 801bfca:	001a      	movs	r2, r3
 801bfcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801bfce:	4293      	cmp	r3, r2
 801bfd0:	d21d      	bcs.n	801c00e <_ux_device_stack_initialize+0x1ba>
                    max_interface_number = *(device_framework + 2);
 801bfd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfd4:	3302      	adds	r3, #2
 801bfd6:	781b      	ldrb	r3, [r3, #0]
 801bfd8:	63fb      	str	r3, [r7, #60]	@ 0x3c

                break;
 801bfda:	e018      	b.n	801c00e <_ux_device_stack_initialize+0x1ba>

            case UX_CONFIGURATION_DESCRIPTOR_ITEM:

                /* Check if the number of interfaces found in this configuration is the maximum so far. */
                if (local_interfaces_found > interfaces_found)
 801bfdc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801bfde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801bfe0:	429a      	cmp	r2, r3
 801bfe2:	d901      	bls.n	801bfe8 <_ux_device_stack_initialize+0x194>
                    
                    /* We need to adjust the number of maximum interfaces.  */
                    interfaces_found =  local_interfaces_found;
 801bfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801bfe6:	647b      	str	r3, [r7, #68]	@ 0x44

                /* We have a new configuration. We need to reset the number of local interfaces. */
                local_interfaces_found =  0;
 801bfe8:	2300      	movs	r3, #0
 801bfea:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Add the cumulated number of endpoints in the previous interface.  */
                local_endpoints_found += endpoints_in_interface_found;
 801bfec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bfee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bff0:	18d3      	adds	r3, r2, r3
 801bff2:	637b      	str	r3, [r7, #52]	@ 0x34

                /* Check if the number of endpoints found in the previous configuration is the maximum so far. */
                if (local_endpoints_found > endpoints_found)
 801bff4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801bff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801bff8:	429a      	cmp	r2, r3
 801bffa:	d901      	bls.n	801c000 <_ux_device_stack_initialize+0x1ac>
                    
                    /* We need to adjust the number of maximum endpoints.  */
                    endpoints_found =  local_endpoints_found;
 801bffc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801bffe:	643b      	str	r3, [r7, #64]	@ 0x40

                /* We have a new configuration. We need to reset the number of local endpoints. */
                local_endpoints_found         =  0;
 801c000:	2300      	movs	r3, #0
 801c002:	637b      	str	r3, [r7, #52]	@ 0x34
                endpoints_in_interface_found  =  0;
 801c004:	2300      	movs	r3, #0
 801c006:	633b      	str	r3, [r7, #48]	@ 0x30

                break;
 801c008:	e002      	b.n	801c010 <_ux_device_stack_initialize+0x1bc>

            default:
                break;
 801c00a:	46c0      	nop			@ (mov r8, r8)
 801c00c:	e000      	b.n	801c010 <_ux_device_stack_initialize+0x1bc>
                break;
 801c00e:	46c0      	nop			@ (mov r8, r8)
            }

            /* Adjust what is left of the device framework.  */
            device_framework_length -=  descriptor_length;
 801c010:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801c012:	69bb      	ldr	r3, [r7, #24]
 801c014:	1ad3      	subs	r3, r2, r3
 801c016:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Point to the next descriptor.  */
            device_framework +=  descriptor_length;
 801c018:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c01a:	69bb      	ldr	r3, [r7, #24]
 801c01c:	18d3      	adds	r3, r2, r3
 801c01e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while (device_framework_length != 0)
 801c020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c022:	2b00      	cmp	r3, #0
 801c024:	d1a4      	bne.n	801bf70 <_ux_device_stack_initialize+0x11c>
        }
        
        /* Add the cumulated number of endpoints in the previous interface.  */
        local_endpoints_found += endpoints_in_interface_found;
 801c026:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c02a:	18d3      	adds	r3, r2, r3
 801c02c:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Check if the number of endpoints found in the previous interface is the maximum so far. */
        if (local_endpoints_found > endpoints_found)
 801c02e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801c030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c032:	429a      	cmp	r2, r3
 801c034:	d901      	bls.n	801c03a <_ux_device_stack_initialize+0x1e6>
                    
            /* We need to adjust the number of maximum endpoints.  */
            endpoints_found =  local_endpoints_found;
 801c036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c038:	643b      	str	r3, [r7, #64]	@ 0x40


        /* Check if the number of interfaces found in this configuration is the maximum so far. */
        if (local_interfaces_found > interfaces_found)
 801c03a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c03c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c03e:	429a      	cmp	r2, r3
 801c040:	d901      	bls.n	801c046 <_ux_device_stack_initialize+0x1f2>
            
            /* We need to adjust the number of maximum interfaces.  */
            interfaces_found =  local_interfaces_found;
 801c042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c044:	647b      	str	r3, [r7, #68]	@ 0x44

        /* We do a sanity check on the finding. At least there must be one interface but endpoints are
        not necessary.  */
        if (interfaces_found == 0)
 801c046:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d106      	bne.n	801c05a <_ux_device_stack_initialize+0x206>
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_DESCRIPTOR_CORRUPTED);
 801c04c:	2242      	movs	r2, #66	@ 0x42
 801c04e:	2103      	movs	r1, #3
 801c050:	2002      	movs	r0, #2
 801c052:	f7fb f80d 	bl	8017070 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_DESCRIPTOR_CORRUPTED, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_DESCRIPTOR_CORRUPTED;
 801c056:	2342      	movs	r3, #66	@ 0x42
 801c058:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* We do a sanity check on the finding. Max interface number should not exceed limit.  */
        if (status == UX_SUCCESS &&
 801c05a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d109      	bne.n	801c074 <_ux_device_stack_initialize+0x220>
 801c060:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c062:	2b0f      	cmp	r3, #15
 801c064:	d906      	bls.n	801c074 <_ux_device_stack_initialize+0x220>
            max_interface_number >= UX_MAX_SLAVE_INTERFACES)
        {

            /* Error trap. */
            _ux_system_error_handler(UX_SYSTEM_LEVEL_THREAD, UX_SYSTEM_CONTEXT_INIT, UX_MEMORY_INSUFFICIENT);
 801c066:	2212      	movs	r2, #18
 801c068:	2103      	movs	r1, #3
 801c06a:	2002      	movs	r0, #2
 801c06c:	f7fb f800 	bl	8017070 <_ux_system_error_handler>

            /* If trace is enabled, insert this event into the trace buffer.  */
            UX_TRACE_IN_LINE_INSERT(UX_TRACE_ERROR, UX_MEMORY_INSUFFICIENT, device_framework, 0, 0, UX_TRACE_ERRORS, 0, 0)

            status = UX_MEMORY_INSUFFICIENT;
 801c070:	2312      	movs	r3, #18
 801c072:	64bb      	str	r3, [r7, #72]	@ 0x48
        }
    }
#endif

    /* Go on to allocate interfaces pool if no error.  */
    if (status == UX_SUCCESS)
 801c074:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c076:	2b00      	cmp	r3, #0
 801c078:	d11a      	bne.n	801c0b0 <_ux_device_stack_initialize+0x25c>
    {

        /* Memorize both pool sizes.  */
        device -> ux_slave_device_interfaces_pool_number = interfaces_found;
 801c07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c07c:	21f8      	movs	r1, #248	@ 0xf8
 801c07e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c080:	505a      	str	r2, [r3, r1]
        device -> ux_slave_device_endpoints_pool_number  = endpoints_found;
 801c082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c084:	2380      	movs	r3, #128	@ 0x80
 801c086:	005b      	lsls	r3, r3, #1
 801c088:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801c08a:	50d1      	str	r1, [r2, r3]

        /* We assign a pool for the interfaces.  */
        interfaces_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, interfaces_found, sizeof(UX_SLAVE_INTERFACE));
 801c08c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c08e:	2338      	movs	r3, #56	@ 0x38
 801c090:	2100      	movs	r1, #0
 801c092:	2000      	movs	r0, #0
 801c094:	f7fb fb0c 	bl	80176b0 <_ux_utility_memory_allocate_mulc_safe>
 801c098:	0003      	movs	r3, r0
 801c09a:	613b      	str	r3, [r7, #16]
        if (interfaces_pool == UX_NULL)
 801c09c:	693b      	ldr	r3, [r7, #16]
 801c09e:	2b00      	cmp	r3, #0
 801c0a0:	d102      	bne.n	801c0a8 <_ux_device_stack_initialize+0x254>
            status = UX_MEMORY_INSUFFICIENT;
 801c0a2:	2312      	movs	r3, #18
 801c0a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c0a6:	e003      	b.n	801c0b0 <_ux_device_stack_initialize+0x25c>
        else

            /* Save the interface pool address in the device container.  */
            device -> ux_slave_device_interfaces_pool =  interfaces_pool;
 801c0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0aa:	21f4      	movs	r1, #244	@ 0xf4
 801c0ac:	693a      	ldr	r2, [r7, #16]
 801c0ae:	505a      	str	r2, [r3, r1]
    }

    /* Do we need an endpoint pool ?  */
    if (endpoints_found != 0 && status == UX_SUCCESS)
 801c0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	d046      	beq.n	801c144 <_ux_device_stack_initialize+0x2f0>
 801c0b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c0b8:	2b00      	cmp	r3, #0
 801c0ba:	d143      	bne.n	801c144 <_ux_device_stack_initialize+0x2f0>
    {

        /* We assign a pool for the endpoints.  */
        endpoints_pool =  _ux_utility_memory_allocate_mulc_safe(UX_NO_ALIGN, UX_REGULAR_MEMORY, endpoints_found, sizeof(UX_SLAVE_ENDPOINT));
 801c0bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c0be:	2390      	movs	r3, #144	@ 0x90
 801c0c0:	2100      	movs	r1, #0
 801c0c2:	2000      	movs	r0, #0
 801c0c4:	f7fb faf4 	bl	80176b0 <_ux_utility_memory_allocate_mulc_safe>
 801c0c8:	0003      	movs	r3, r0
 801c0ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (endpoints_pool == UX_NULL)
 801c0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d102      	bne.n	801c0d8 <_ux_device_stack_initialize+0x284>
            status = UX_MEMORY_INSUFFICIENT;
 801c0d2:	2312      	movs	r3, #18
 801c0d4:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (endpoints_pool == UX_NULL)
 801c0d6:	e037      	b.n	801c148 <_ux_device_stack_initialize+0x2f4>
        else
        {

            /* Save the endpoint pool address in the device container.  */
            device -> ux_slave_device_endpoints_pool =  endpoints_pool;
 801c0d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0da:	21fc      	movs	r1, #252	@ 0xfc
 801c0dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c0de:	505a      	str	r2, [r3, r1]

            /* We need to assign a transfer buffer to each endpoint. Each endpoint is assigned the
            maximum buffer size.  We also assign the semaphore used by the endpoint to synchronize transfer
            completion. */
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 801c0e0:	e022      	b.n	801c128 <_ux_device_stack_initialize+0x2d4>
            {

                /* Obtain some memory.  */
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
                                _ux_utility_memory_allocate(UX_NO_ALIGN, UX_CACHE_SAFE_MEMORY, UX_SLAVE_REQUEST_DATA_MAX_LENGTH);
 801c0e2:	2380      	movs	r3, #128	@ 0x80
 801c0e4:	011b      	lsls	r3, r3, #4
 801c0e6:	001a      	movs	r2, r3
 801c0e8:	2101      	movs	r1, #1
 801c0ea:	2000      	movs	r0, #0
 801c0ec:	f7fb f9d8 	bl	80174a0 <_ux_utility_memory_allocate>
 801c0f0:	0002      	movs	r2, r0
                endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer = 
 801c0f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c0f4:	63da      	str	r2, [r3, #60]	@ 0x3c

                /* Ensure we could allocate memory.  */
                if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer == UX_NULL)
 801c0f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c0f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c0fa:	2b00      	cmp	r3, #0
 801c0fc:	d102      	bne.n	801c104 <_ux_device_stack_initialize+0x2b0>
                {
                    status = UX_MEMORY_INSUFFICIENT;
 801c0fe:	2312      	movs	r3, #18
 801c100:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 801c102:	e01e      	b.n	801c142 <_ux_device_stack_initialize+0x2ee>
                }
        
                /* Create the semaphore for the endpoint.  */
                status =  _ux_device_semaphore_create(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore,
 801c104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c106:	3360      	adds	r3, #96	@ 0x60
 801c108:	4915      	ldr	r1, [pc, #84]	@ (801c160 <_ux_device_stack_initialize+0x30c>)
 801c10a:	2200      	movs	r2, #0
 801c10c:	0018      	movs	r0, r3
 801c10e:	f7fb fc63 	bl	80179d8 <_ux_utility_semaphore_create>
 801c112:	0003      	movs	r3, r0
 801c114:	64bb      	str	r3, [r7, #72]	@ 0x48
                                                    "ux_transfer_request_semaphore", 0);

                /* Check completion status.  */
                if (status != UX_SUCCESS)
 801c116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d002      	beq.n	801c122 <_ux_device_stack_initialize+0x2ce>
                {
                    status = UX_SEMAPHORE_ERROR;
 801c11c:	2315      	movs	r3, #21
 801c11e:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 801c120:	e00f      	b.n	801c142 <_ux_device_stack_initialize+0x2ee>
                }
        
                /* Next endpoint.  */
                endpoints_pool++;
 801c122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c124:	3390      	adds	r3, #144	@ 0x90
 801c126:	64fb      	str	r3, [r7, #76]	@ 0x4c
            while (endpoints_pool < (device -> ux_slave_device_endpoints_pool + endpoints_found))
 801c128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c12a:	22fc      	movs	r2, #252	@ 0xfc
 801c12c:	5899      	ldr	r1, [r3, r2]
 801c12e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801c130:	0013      	movs	r3, r2
 801c132:	00db      	lsls	r3, r3, #3
 801c134:	189b      	adds	r3, r3, r2
 801c136:	011b      	lsls	r3, r3, #4
 801c138:	18cb      	adds	r3, r1, r3
 801c13a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c13c:	429a      	cmp	r2, r3
 801c13e:	d3d0      	bcc.n	801c0e2 <_ux_device_stack_initialize+0x28e>
        if (endpoints_pool == UX_NULL)
 801c140:	e002      	b.n	801c148 <_ux_device_stack_initialize+0x2f4>
 801c142:	e001      	b.n	801c148 <_ux_device_stack_initialize+0x2f4>
            }
        }
    }
    else
        endpoints_pool = UX_NULL;
 801c144:	2300      	movs	r3, #0
 801c146:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Return successful completion.  */
    if (status == UX_SUCCESS)
 801c148:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d101      	bne.n	801c152 <_ux_device_stack_initialize+0x2fe>
        return(UX_SUCCESS);
 801c14e:	2300      	movs	r3, #0
 801c150:	e046      	b.n	801c1e0 <_ux_device_stack_initialize+0x38c>
    
    /* Free resources when there is error.  */

    /* Free device -> ux_slave_device_endpoints_pool.  */
    if (endpoints_pool)
 801c152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c154:	2b00      	cmp	r3, #0
 801c156:	d026      	beq.n	801c1a6 <_ux_device_stack_initialize+0x352>
    {

        /* In error cases creating endpoint resources, endpoints_pool is endpoint that failed.
         * Previously allocated things should be freed.  */
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 801c158:	e019      	b.n	801c18e <_ux_device_stack_initialize+0x33a>
 801c15a:	46c0      	nop			@ (mov r8, r8)
 801c15c:	200116a4 	.word	0x200116a4
 801c160:	0801e39c 	.word	0x0801e39c
        {

            /* Delete ux_slave_transfer_request_semaphore.  */
            if (_ux_device_semaphore_created(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore))
 801c164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801c168:	2b00      	cmp	r3, #0
 801c16a:	d004      	beq.n	801c176 <_ux_device_stack_initialize+0x322>
                _ux_device_semaphore_delete(&endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_semaphore);
 801c16c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c16e:	3360      	adds	r3, #96	@ 0x60
 801c170:	0018      	movs	r0, r3
 801c172:	f7fb fc4d 	bl	8017a10 <_ux_utility_semaphore_delete>

            /* Free ux_slave_transfer_request_data_pointer buffer.  */
            if (endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 801c176:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c178:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d004      	beq.n	801c188 <_ux_device_stack_initialize+0x334>
                _ux_utility_memory_free(endpoints_pool -> ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 801c17e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c180:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c182:	0018      	movs	r0, r3
 801c184:	f7fb faee 	bl	8017764 <_ux_utility_memory_free>

            /* Move to previous endpoint.  */
            endpoints_pool --;
 801c188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801c18a:	3b90      	subs	r3, #144	@ 0x90
 801c18c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        while(endpoints_pool >= device -> ux_slave_device_endpoints_pool)
 801c18e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c190:	22fc      	movs	r2, #252	@ 0xfc
 801c192:	589b      	ldr	r3, [r3, r2]
 801c194:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801c196:	429a      	cmp	r2, r3
 801c198:	d2e4      	bcs.n	801c164 <_ux_device_stack_initialize+0x310>
        }

        _ux_utility_memory_free(device -> ux_slave_device_endpoints_pool);
 801c19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c19c:	22fc      	movs	r2, #252	@ 0xfc
 801c19e:	589b      	ldr	r3, [r3, r2]
 801c1a0:	0018      	movs	r0, r3
 801c1a2:	f7fb fadf 	bl	8017764 <_ux_utility_memory_free>
    }

    /* Free device -> ux_slave_device_interfaces_pool.  */
    if (device -> ux_slave_device_interfaces_pool)
 801c1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1a8:	22f4      	movs	r2, #244	@ 0xf4
 801c1aa:	589b      	ldr	r3, [r3, r2]
 801c1ac:	2b00      	cmp	r3, #0
 801c1ae:	d005      	beq.n	801c1bc <_ux_device_stack_initialize+0x368>
        _ux_utility_memory_free(device -> ux_slave_device_interfaces_pool);
 801c1b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1b2:	22f4      	movs	r2, #244	@ 0xf4
 801c1b4:	589b      	ldr	r3, [r3, r2]
 801c1b6:	0018      	movs	r0, r3
 801c1b8:	f7fb fad4 	bl	8017764 <_ux_utility_memory_free>

    /* Free device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer.  */
    if (device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer)
 801c1bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c1c0:	2b00      	cmp	r3, #0
 801c1c2:	d004      	beq.n	801c1ce <_ux_device_stack_initialize+0x37a>
        _ux_utility_memory_free(device -> ux_slave_device_control_endpoint.ux_slave_endpoint_transfer_request.ux_slave_transfer_request_data_pointer);
 801c1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c1c8:	0018      	movs	r0, r3
 801c1ca:	f7fb facb 	bl	8017764 <_ux_utility_memory_free>

    /* Free _ux_system_slave -> ux_system_slave_class_array.  */
    _ux_utility_memory_free(_ux_system_slave -> ux_system_slave_class_array);
 801c1ce:	4b06      	ldr	r3, [pc, #24]	@ (801c1e8 <_ux_device_stack_initialize+0x394>)
 801c1d0:	681a      	ldr	r2, [r3, #0]
 801c1d2:	23ae      	movs	r3, #174	@ 0xae
 801c1d4:	005b      	lsls	r3, r3, #1
 801c1d6:	58d3      	ldr	r3, [r2, r3]
 801c1d8:	0018      	movs	r0, r3
 801c1da:	f7fb fac3 	bl	8017764 <_ux_utility_memory_free>

    /* Return completion status.  */
    return(status);
 801c1de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 801c1e0:	0018      	movs	r0, r3
 801c1e2:	46bd      	mov	sp, r7
 801c1e4:	b014      	add	sp, #80	@ 0x50
 801c1e6:	bd80      	pop	{r7, pc}
 801c1e8:	200116a4 	.word	0x200116a4

0801c1ec <_ux_device_stack_interface_delete>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_delete(UX_SLAVE_INTERFACE *interface)
{
 801c1ec:	b580      	push	{r7, lr}
 801c1ee:	b086      	sub	sp, #24
 801c1f0:	af00      	add	r7, sp, #0
 801c1f2:	6078      	str	r0, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_DELETE, interface, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801c1f4:	4b20      	ldr	r3, [pc, #128]	@ (801c278 <_ux_device_stack_interface_delete+0x8c>)
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	3320      	adds	r3, #32
 801c1fa:	613b      	str	r3, [r7, #16]

    /* Find the first endpoints associated with this interface.  */    
    next_endpoint =  interface -> ux_slave_interface_first_endpoint;        
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c200:	617b      	str	r3, [r7, #20]
    
    /* Parse all the endpoints.  */    
    while (next_endpoint != UX_NULL)
 801c202:	e01c      	b.n	801c23e <_ux_device_stack_interface_delete+0x52>
    {

        /* Save this endpoint.  */
        endpoint =  next_endpoint;
 801c204:	697b      	ldr	r3, [r7, #20]
 801c206:	60fb      	str	r3, [r7, #12]
        
        /* Find the next endpoint.  */
        next_endpoint =  endpoint -> ux_slave_endpoint_next_endpoint;
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c20c:	617b      	str	r3, [r7, #20]
        
        /* Get the pointer to the DCD.  */
        dcd =  &_ux_system_slave->ux_system_slave_dcd;
 801c20e:	4b1a      	ldr	r3, [pc, #104]	@ (801c278 <_ux_device_stack_interface_delete+0x8c>)
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	60bb      	str	r3, [r7, #8]

        /* The endpoint must be destroyed.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_DESTROY_ENDPOINT, endpoint);
 801c214:	68bb      	ldr	r3, [r7, #8]
 801c216:	699b      	ldr	r3, [r3, #24]
 801c218:	68fa      	ldr	r2, [r7, #12]
 801c21a:	68b8      	ldr	r0, [r7, #8]
 801c21c:	210f      	movs	r1, #15
 801c21e:	4798      	blx	r3

        /* Free the endpoint.  */
        endpoint -> ux_slave_endpoint_status =  UX_UNUSED;
 801c220:	68fb      	ldr	r3, [r7, #12]
 801c222:	2200      	movs	r2, #0
 801c224:	601a      	str	r2, [r3, #0]

        /* Make sure the endpoint instance is now cleaned up.  */
        endpoint -> ux_slave_endpoint_state =  0;
 801c226:	68fb      	ldr	r3, [r7, #12]
 801c228:	2200      	movs	r2, #0
 801c22a:	605a      	str	r2, [r3, #4]
        endpoint -> ux_slave_endpoint_next_endpoint =  UX_NULL;
 801c22c:	68fb      	ldr	r3, [r7, #12]
 801c22e:	2200      	movs	r2, #0
 801c230:	625a      	str	r2, [r3, #36]	@ 0x24
        endpoint -> ux_slave_endpoint_interface =  UX_NULL;
 801c232:	68fb      	ldr	r3, [r7, #12]
 801c234:	2200      	movs	r2, #0
 801c236:	629a      	str	r2, [r3, #40]	@ 0x28
        endpoint -> ux_slave_endpoint_device =  UX_NULL;
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	2200      	movs	r2, #0
 801c23c:	62da      	str	r2, [r3, #44]	@ 0x2c
    while (next_endpoint != UX_NULL)
 801c23e:	697b      	ldr	r3, [r7, #20]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d1df      	bne.n	801c204 <_ux_device_stack_interface_delete+0x18>
    }        

    /* It's always from first one (to delete).  */
    /* Rebuild the first link.  */
    device -> ux_slave_device_first_interface =  interface -> ux_slave_interface_next_interface;
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801c248:	693b      	ldr	r3, [r7, #16]
 801c24a:	21f0      	movs	r1, #240	@ 0xf0
 801c24c:	505a      	str	r2, [r3, r1]

    /* The interface is removed from the link, its memory must be cleaned and returned to the pool.  */
    interface -> ux_slave_interface_class          =  UX_NULL;
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	2200      	movs	r2, #0
 801c252:	605a      	str	r2, [r3, #4]
    interface -> ux_slave_interface_class_instance =  UX_NULL;
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	2200      	movs	r2, #0
 801c258:	609a      	str	r2, [r3, #8]
    interface -> ux_slave_interface_next_interface =  UX_NULL;
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	2200      	movs	r2, #0
 801c25e:	631a      	str	r2, [r3, #48]	@ 0x30
    interface -> ux_slave_interface_first_endpoint =  UX_NULL;
 801c260:	687b      	ldr	r3, [r7, #4]
 801c262:	2200      	movs	r2, #0
 801c264:	635a      	str	r2, [r3, #52]	@ 0x34
    interface -> ux_slave_interface_status         =  UX_UNUSED;
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	2200      	movs	r2, #0
 801c26a:	601a      	str	r2, [r3, #0]

    /* Return successful completion.  */    
    return(UX_SUCCESS);       
 801c26c:	2300      	movs	r3, #0
}
 801c26e:	0018      	movs	r0, r3
 801c270:	46bd      	mov	sp, r7
 801c272:	b006      	add	sp, #24
 801c274:	bd80      	pop	{r7, pc}
 801c276:	46c0      	nop			@ (mov r8, r8)
 801c278:	200116a4 	.word	0x200116a4

0801c27c <_ux_device_stack_interface_set>:
/*                                            resulting in version 6.1.9  */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_set(UCHAR * device_framework, ULONG device_framework_length,
                                                    ULONG alternate_setting_value)
{
 801c27c:	b580      	push	{r7, lr}
 801c27e:	b092      	sub	sp, #72	@ 0x48
 801c280:	af00      	add	r7, sp, #0
 801c282:	60f8      	str	r0, [r7, #12]
 801c284:	60b9      	str	r1, [r7, #8]
 801c286:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_INTERFACE_SET, alternate_setting_value, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801c288:	4b86      	ldr	r3, [pc, #536]	@ (801c4a4 <_ux_device_stack_interface_set+0x228>)
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801c28e:	4b85      	ldr	r3, [pc, #532]	@ (801c4a4 <_ux_device_stack_interface_set+0x228>)
 801c290:	681b      	ldr	r3, [r3, #0]
 801c292:	3320      	adds	r3, #32
 801c294:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Find a free interface in the pool and hook it to the 
       existing interface.  */
    interface = device -> ux_slave_device_interfaces_pool;
 801c296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c298:	22f4      	movs	r2, #244	@ 0xf4
 801c29a:	589b      	ldr	r3, [r3, r2]
 801c29c:	647b      	str	r3, [r7, #68]	@ 0x44

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
    interfaces_pool_number = device -> ux_slave_device_interfaces_pool_number;
 801c29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2a0:	22f8      	movs	r2, #248	@ 0xf8
 801c2a2:	589b      	ldr	r3, [r3, r2]
 801c2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 801c2a6:	e009      	b.n	801c2bc <_ux_device_stack_interface_set+0x40>
    {
        /* Check if this interface is free.  */
        if (interface -> ux_slave_interface_status == UX_UNUSED)
 801c2a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	2b00      	cmp	r3, #0
 801c2ae:	d009      	beq.n	801c2c4 <_ux_device_stack_interface_set+0x48>
            break;
    
        /* Try the next interface.  */
        interface++;
 801c2b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c2b2:	3338      	adds	r3, #56	@ 0x38
 801c2b4:	647b      	str	r3, [r7, #68]	@ 0x44
        
        /* Decrement the number of interfaces left to scan in the pool.  */
        interfaces_pool_number--;
 801c2b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c2b8:	3b01      	subs	r3, #1
 801c2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (interfaces_pool_number != 0)
 801c2bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c2be:	2b00      	cmp	r3, #0
 801c2c0:	d1f2      	bne.n	801c2a8 <_ux_device_stack_interface_set+0x2c>
 801c2c2:	e000      	b.n	801c2c6 <_ux_device_stack_interface_set+0x4a>
            break;
 801c2c4:	46c0      	nop			@ (mov r8, r8)
    }

    /* Did we find a free interface ?  */
    if (interfaces_pool_number == 0)
 801c2c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d101      	bne.n	801c2d0 <_ux_device_stack_interface_set+0x54>
        return(UX_MEMORY_INSUFFICIENT);
 801c2cc:	2312      	movs	r3, #18
 801c2ce:	e0e5      	b.n	801c49c <_ux_device_stack_interface_set+0x220>
        return(UX_MEMORY_INSUFFICIENT);
    
#endif

    /* Mark this interface as used now.  */
    interface -> ux_slave_interface_status = UX_USED;
 801c2d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c2d2:	2201      	movs	r2, #1
 801c2d4:	601a      	str	r2, [r3, #0]

    /* Parse the descriptor in something more readable.  */
    _ux_utility_descriptor_parse(device_framework,
                _ux_system_interface_descriptor_structure,
                UX_INTERFACE_DESCRIPTOR_ENTRIES,
                (UCHAR *) &interface -> ux_slave_interface_descriptor);
 801c2d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c2d8:	330c      	adds	r3, #12
    _ux_utility_descriptor_parse(device_framework,
 801c2da:	4973      	ldr	r1, [pc, #460]	@ (801c4a8 <_ux_device_stack_interface_set+0x22c>)
 801c2dc:	68f8      	ldr	r0, [r7, #12]
 801c2de:	2209      	movs	r2, #9
 801c2e0:	f7fa ffb5 	bl	801724e <_ux_utility_descriptor_parse>

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1

    /* Attach this interface to the end of the interface chain.  */
    if (device -> ux_slave_device_first_interface == UX_NULL)
 801c2e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2e6:	22f0      	movs	r2, #240	@ 0xf0
 801c2e8:	589b      	ldr	r3, [r3, r2]
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d104      	bne.n	801c2f8 <_ux_device_stack_interface_set+0x7c>
    {

        device -> ux_slave_device_first_interface =  interface;
 801c2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2f0:	21f0      	movs	r1, #240	@ 0xf0
 801c2f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c2f4:	505a      	str	r2, [r3, r1]
 801c2f6:	e00e      	b.n	801c316 <_ux_device_stack_interface_set+0x9a>
    }
    else
    {
        /* Multiple interfaces exist, so find the end of the chain.  */
        interface_link =  device -> ux_slave_device_first_interface;
 801c2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c2fa:	22f0      	movs	r2, #240	@ 0xf0
 801c2fc:	589b      	ldr	r3, [r3, r2]
 801c2fe:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 801c300:	e002      	b.n	801c308 <_ux_device_stack_interface_set+0x8c>
            interface_link =  interface_link -> ux_slave_interface_next_interface;
 801c302:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c306:	643b      	str	r3, [r7, #64]	@ 0x40
        while (interface_link -> ux_slave_interface_next_interface != UX_NULL)
 801c308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c30a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d1f8      	bne.n	801c302 <_ux_device_stack_interface_set+0x86>
        interface_link -> ux_slave_interface_next_interface =  interface;
 801c310:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801c312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c314:	631a      	str	r2, [r3, #48]	@ 0x30
    /* It must be very first one.  */
    device -> ux_slave_device_first_interface = interface;
#endif

    /* Point beyond the interface descriptor.  */
    device_framework_length -=  (ULONG) *device_framework;
 801c316:	68fb      	ldr	r3, [r7, #12]
 801c318:	781b      	ldrb	r3, [r3, #0]
 801c31a:	001a      	movs	r2, r3
 801c31c:	68bb      	ldr	r3, [r7, #8]
 801c31e:	1a9b      	subs	r3, r3, r2
 801c320:	60bb      	str	r3, [r7, #8]
    device_framework +=  (ULONG) *device_framework;
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	781b      	ldrb	r3, [r3, #0]
 801c326:	001a      	movs	r2, r3
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	189b      	adds	r3, r3, r2
 801c32c:	60fb      	str	r3, [r7, #12]

    /* Parse the device framework and locate endpoint descriptor(s).  */
    while (device_framework_length != 0)
 801c32e:	e0aa      	b.n	801c486 <_ux_device_stack_interface_set+0x20a>
    {

        /* Get the length of the current descriptor.  */
        descriptor_length =  (ULONG) *device_framework;
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	781b      	ldrb	r3, [r3, #0]
 801c334:	61fb      	str	r3, [r7, #28]

        /* And its type.  */
        descriptor_type =  *(device_framework + 1);
 801c336:	211b      	movs	r1, #27
 801c338:	187b      	adds	r3, r7, r1
 801c33a:	68fa      	ldr	r2, [r7, #12]
 801c33c:	7852      	ldrb	r2, [r2, #1]
 801c33e:	701a      	strb	r2, [r3, #0]
                
        /* Check if this is an endpoint descriptor.  */
        switch(descriptor_type)
 801c340:	187b      	adds	r3, r7, r1
 801c342:	781b      	ldrb	r3, [r3, #0]
 801c344:	2b05      	cmp	r3, #5
 801c346:	d008      	beq.n	801c35a <_ux_device_stack_interface_set+0xde>
 801c348:	dd00      	ble.n	801c34c <_ux_device_stack_interface_set+0xd0>
 801c34a:	e093      	b.n	801c474 <_ux_device_stack_interface_set+0x1f8>
 801c34c:	2b02      	cmp	r3, #2
 801c34e:	d100      	bne.n	801c352 <_ux_device_stack_interface_set+0xd6>
 801c350:	e088      	b.n	801c464 <_ux_device_stack_interface_set+0x1e8>
 801c352:	2b04      	cmp	r3, #4
 801c354:	d100      	bne.n	801c358 <_ux_device_stack_interface_set+0xdc>
 801c356:	e085      	b.n	801c464 <_ux_device_stack_interface_set+0x1e8>

            /* Return the status to the caller.  */
            return(status);

        default:
            break;
 801c358:	e08c      	b.n	801c474 <_ux_device_stack_interface_set+0x1f8>
            endpoint = device -> ux_slave_device_endpoints_pool;
 801c35a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c35c:	22fc      	movs	r2, #252	@ 0xfc
 801c35e:	589b      	ldr	r3, [r3, r2]
 801c360:	63bb      	str	r3, [r7, #56]	@ 0x38
            endpoints_pool_number = device -> ux_slave_device_endpoints_pool_number;
 801c362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c364:	2380      	movs	r3, #128	@ 0x80
 801c366:	005b      	lsls	r3, r3, #1
 801c368:	58d3      	ldr	r3, [r2, r3]
 801c36a:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 801c36c:	e00d      	b.n	801c38a <_ux_device_stack_interface_set+0x10e>
                if (endpoint ->    ux_slave_endpoint_status == UX_UNUSED)
 801c36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	2b00      	cmp	r3, #0
 801c374:	d103      	bne.n	801c37e <_ux_device_stack_interface_set+0x102>
                    endpoint ->    ux_slave_endpoint_status = UX_USED;
 801c376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c378:	2201      	movs	r2, #1
 801c37a:	601a      	str	r2, [r3, #0]
                    break;
 801c37c:	e008      	b.n	801c390 <_ux_device_stack_interface_set+0x114>
                endpoint++;
 801c37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c380:	3390      	adds	r3, #144	@ 0x90
 801c382:	63bb      	str	r3, [r7, #56]	@ 0x38
               endpoints_pool_number--; 
 801c384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c386:	3b01      	subs	r3, #1
 801c388:	633b      	str	r3, [r7, #48]	@ 0x30
            while (endpoints_pool_number != 0)
 801c38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c38c:	2b00      	cmp	r3, #0
 801c38e:	d1ee      	bne.n	801c36e <_ux_device_stack_interface_set+0xf2>
            if (endpoints_pool_number == 0)
 801c390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c392:	2b00      	cmp	r3, #0
 801c394:	d101      	bne.n	801c39a <_ux_device_stack_interface_set+0x11e>
                return(UX_MEMORY_INSUFFICIENT);
 801c396:	2312      	movs	r3, #18
 801c398:	e080      	b.n	801c49c <_ux_device_stack_interface_set+0x220>
                            (UCHAR *) &endpoint -> ux_slave_endpoint_descriptor);
 801c39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c39c:	330c      	adds	r3, #12
            _ux_utility_descriptor_parse(device_framework,
 801c39e:	4943      	ldr	r1, [pc, #268]	@ (801c4ac <_ux_device_stack_interface_set+0x230>)
 801c3a0:	68f8      	ldr	r0, [r7, #12]
 801c3a2:	2206      	movs	r2, #6
 801c3a4:	f7fa ff53 	bl	801724e <_ux_utility_descriptor_parse>
            transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801c3a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3aa:	3330      	adds	r3, #48	@ 0x30
 801c3ac:	617b      	str	r3, [r7, #20]
                    endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801c3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3b0:	69db      	ldr	r3, [r3, #28]
            max_transfer_length =
 801c3b2:	055b      	lsls	r3, r3, #21
 801c3b4:	0d5b      	lsrs	r3, r3, #21
 801c3b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801c3b8:	4b3a      	ldr	r3, [pc, #232]	@ (801c4a4 <_ux_device_stack_interface_set+0x228>)
 801c3ba:	681a      	ldr	r2, [r3, #0]
 801c3bc:	23d0      	movs	r3, #208	@ 0xd0
 801c3be:	005b      	lsls	r3, r3, #1
 801c3c0:	58d3      	ldr	r3, [r2, r3]
 801c3c2:	2b02      	cmp	r3, #2
 801c3c4:	d117      	bne.n	801c3f6 <_ux_device_stack_interface_set+0x17a>
                (endpoint -> ux_slave_endpoint_descriptor.bmAttributes & 0x1u))
 801c3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3c8:	699b      	ldr	r3, [r3, #24]
 801c3ca:	2201      	movs	r2, #1
 801c3cc:	4013      	ands	r3, r2
            if ((_ux_system_slave -> ux_system_slave_speed == UX_HIGH_SPEED_DEVICE) &&
 801c3ce:	d012      	beq.n	801c3f6 <_ux_device_stack_interface_set+0x17a>
                n_trans = endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize &
 801c3d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c3d2:	69da      	ldr	r2, [r3, #28]
 801c3d4:	23c0      	movs	r3, #192	@ 0xc0
 801c3d6:	015b      	lsls	r3, r3, #5
 801c3d8:	4013      	ands	r3, r2
 801c3da:	613b      	str	r3, [r7, #16]
                if (n_trans)
 801c3dc:	693b      	ldr	r3, [r7, #16]
 801c3de:	2b00      	cmp	r3, #0
 801c3e0:	d009      	beq.n	801c3f6 <_ux_device_stack_interface_set+0x17a>
                    n_trans >>= UX_MAX_NUMBER_OF_TRANSACTIONS_SHIFT;
 801c3e2:	693b      	ldr	r3, [r7, #16]
 801c3e4:	0adb      	lsrs	r3, r3, #11
 801c3e6:	613b      	str	r3, [r7, #16]
                    n_trans ++;
 801c3e8:	693b      	ldr	r3, [r7, #16]
 801c3ea:	3301      	adds	r3, #1
 801c3ec:	613b      	str	r3, [r7, #16]
                    max_transfer_length *= n_trans;
 801c3ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3f0:	693a      	ldr	r2, [r7, #16]
 801c3f2:	4353      	muls	r3, r2
 801c3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            transfer_request -> ux_slave_transfer_request_transfer_length = max_transfer_length;
 801c3f6:	697b      	ldr	r3, [r7, #20]
 801c3f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c3fa:	621a      	str	r2, [r3, #32]
            transfer_request -> ux_slave_transfer_request_endpoint =  endpoint;
 801c3fc:	697b      	ldr	r3, [r7, #20]
 801c3fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c400:	609a      	str	r2, [r3, #8]
            transfer_request -> ux_slave_transfer_request_timeout = UX_WAIT_FOREVER;
 801c402:	697b      	ldr	r3, [r7, #20]
 801c404:	2201      	movs	r2, #1
 801c406:	4252      	negs	r2, r2
 801c408:	64da      	str	r2, [r3, #76]	@ 0x4c
            endpoint -> ux_slave_endpoint_interface =  interface;
 801c40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c40c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801c40e:	629a      	str	r2, [r3, #40]	@ 0x28
            endpoint -> ux_slave_endpoint_device =  device;
 801c410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c412:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c414:	62da      	str	r2, [r3, #44]	@ 0x2c
            status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_CREATE_ENDPOINT, (VOID *) endpoint); 
 801c416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c418:	699b      	ldr	r3, [r3, #24]
 801c41a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c41c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c41e:	210e      	movs	r1, #14
 801c420:	4798      	blx	r3
 801c422:	0003      	movs	r3, r0
 801c424:	623b      	str	r3, [r7, #32]
            if (status != UX_SUCCESS)
 801c426:	6a3b      	ldr	r3, [r7, #32]
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d004      	beq.n	801c436 <_ux_device_stack_interface_set+0x1ba>
                endpoint -> ux_slave_endpoint_status = UX_UNUSED;
 801c42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c42e:	2200      	movs	r2, #0
 801c430:	601a      	str	r2, [r3, #0]
                return(status);
 801c432:	6a3b      	ldr	r3, [r7, #32]
 801c434:	e032      	b.n	801c49c <_ux_device_stack_interface_set+0x220>
            if (interface -> ux_slave_interface_first_endpoint == UX_NULL)
 801c436:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d103      	bne.n	801c446 <_ux_device_stack_interface_set+0x1ca>
                interface -> ux_slave_interface_first_endpoint =  endpoint;
 801c43e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c440:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c442:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 801c444:	e017      	b.n	801c476 <_ux_device_stack_interface_set+0x1fa>
                endpoint_link =  interface -> ux_slave_interface_first_endpoint;
 801c446:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c448:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c44a:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801c44c:	e002      	b.n	801c454 <_ux_device_stack_interface_set+0x1d8>
                    endpoint_link =  endpoint_link -> ux_slave_endpoint_next_endpoint;
 801c44e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c452:	637b      	str	r3, [r7, #52]	@ 0x34
                while (endpoint_link -> ux_slave_endpoint_next_endpoint != UX_NULL)
 801c454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c458:	2b00      	cmp	r3, #0
 801c45a:	d1f8      	bne.n	801c44e <_ux_device_stack_interface_set+0x1d2>
                endpoint_link -> ux_slave_endpoint_next_endpoint =  endpoint;
 801c45c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c45e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801c460:	625a      	str	r2, [r3, #36]	@ 0x24
            break;
 801c462:	e008      	b.n	801c476 <_ux_device_stack_interface_set+0x1fa>
            status =  _ux_device_stack_interface_start(interface);
 801c464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c466:	0018      	movs	r0, r3
 801c468:	f000 f822 	bl	801c4b0 <_ux_device_stack_interface_start>
 801c46c:	0003      	movs	r3, r0
 801c46e:	623b      	str	r3, [r7, #32]
            return(status);
 801c470:	6a3b      	ldr	r3, [r7, #32]
 801c472:	e013      	b.n	801c49c <_ux_device_stack_interface_set+0x220>
            break;
 801c474:	46c0      	nop			@ (mov r8, r8)
        }

        /* Adjust what is left of the device framework.  */
        device_framework_length -=  descriptor_length;
 801c476:	68ba      	ldr	r2, [r7, #8]
 801c478:	69fb      	ldr	r3, [r7, #28]
 801c47a:	1ad3      	subs	r3, r2, r3
 801c47c:	60bb      	str	r3, [r7, #8]

        /* Point to the next descriptor.  */
        device_framework +=  descriptor_length;
 801c47e:	68fa      	ldr	r2, [r7, #12]
 801c480:	69fb      	ldr	r3, [r7, #28]
 801c482:	18d3      	adds	r3, r2, r3
 801c484:	60fb      	str	r3, [r7, #12]
    while (device_framework_length != 0)
 801c486:	68bb      	ldr	r3, [r7, #8]
 801c488:	2b00      	cmp	r3, #0
 801c48a:	d000      	beq.n	801c48e <_ux_device_stack_interface_set+0x212>
 801c48c:	e750      	b.n	801c330 <_ux_device_stack_interface_set+0xb4>
    }

    /* The interface attached to this configuration must be started at the class
       level.  */
    status =  _ux_device_stack_interface_start(interface);
 801c48e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801c490:	0018      	movs	r0, r3
 801c492:	f000 f80d 	bl	801c4b0 <_ux_device_stack_interface_start>
 801c496:	0003      	movs	r3, r0
 801c498:	623b      	str	r3, [r7, #32]

    /* Return the status to the caller.  */
    return(status);
 801c49a:	6a3b      	ldr	r3, [r7, #32]
}
 801c49c:	0018      	movs	r0, r3
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	b012      	add	sp, #72	@ 0x48
 801c4a2:	bd80      	pop	{r7, pc}
 801c4a4:	200116a4 	.word	0x200116a4
 801c4a8:	20000034 	.word	0x20000034
 801c4ac:	20000014 	.word	0x20000014

0801c4b0 <_ux_device_stack_interface_start>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_interface_start(UX_SLAVE_INTERFACE *interface)
{
 801c4b0:	b590      	push	{r4, r7, lr}
 801c4b2:	b091      	sub	sp, #68	@ 0x44
 801c4b4:	af00      	add	r7, sp, #0
 801c4b6:	6078      	str	r0, [r7, #4]
UINT                        status;
UX_SLAVE_CLASS_COMMAND      class_command;


    /* Get the class for the interface.  */
    class =  _ux_system_slave -> ux_system_slave_interface_class_array[interface -> ux_slave_interface_descriptor.bInterfaceNumber];
 801c4b8:	4b2a      	ldr	r3, [pc, #168]	@ (801c564 <_ux_device_stack_interface_start+0xb4>)
 801c4ba:	681a      	ldr	r2, [r3, #0]
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	695b      	ldr	r3, [r3, #20]
 801c4c0:	3358      	adds	r3, #88	@ 0x58
 801c4c2:	009b      	lsls	r3, r3, #2
 801c4c4:	589b      	ldr	r3, [r3, r2]
 801c4c6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* Check if class driver is available. */
    if (class == UX_NULL)
 801c4c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d101      	bne.n	801c4d2 <_ux_device_stack_interface_start+0x22>

        /* There is no class driver supported. */
        return (UX_NO_CLASS_MATCH);
 801c4ce:	2357      	movs	r3, #87	@ 0x57
 801c4d0:	e044      	b.n	801c55c <_ux_device_stack_interface_start+0xac>

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801c4d2:	4b24      	ldr	r3, [pc, #144]	@ (801c564 <_ux_device_stack_interface_start+0xb4>)
 801c4d4:	681b      	ldr	r3, [r3, #0]
 801c4d6:	3320      	adds	r3, #32
 801c4d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Build all the fields of the Class Command.  */
    class_command.ux_slave_class_command_request   =    UX_SLAVE_CLASS_COMMAND_QUERY;
 801c4da:	2008      	movs	r0, #8
 801c4dc:	183b      	adds	r3, r7, r0
 801c4de:	2201      	movs	r2, #1
 801c4e0:	601a      	str	r2, [r3, #0]
    class_command.ux_slave_class_command_interface =   (VOID *)interface;
 801c4e2:	183b      	adds	r3, r7, r0
 801c4e4:	687a      	ldr	r2, [r7, #4]
 801c4e6:	609a      	str	r2, [r3, #8]
    class_command.ux_slave_class_command_class     =   interface -> ux_slave_interface_descriptor.bInterfaceClass;
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	6a1a      	ldr	r2, [r3, #32]
 801c4ec:	183b      	adds	r3, r7, r0
 801c4ee:	615a      	str	r2, [r3, #20]
    class_command.ux_slave_class_command_subclass  =   interface -> ux_slave_interface_descriptor.bInterfaceSubClass;
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c4f4:	183b      	adds	r3, r7, r0
 801c4f6:	619a      	str	r2, [r3, #24]
    class_command.ux_slave_class_command_protocol  =   interface -> ux_slave_interface_descriptor.bInterfaceProtocol;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c4fc:	183b      	adds	r3, r7, r0
 801c4fe:	61da      	str	r2, [r3, #28]
    class_command.ux_slave_class_command_vid       =   device -> ux_slave_device_descriptor.idVendor;
 801c500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c502:	6a1a      	ldr	r2, [r3, #32]
 801c504:	183b      	adds	r3, r7, r0
 801c506:	611a      	str	r2, [r3, #16]
    class_command.ux_slave_class_command_pid       =   device -> ux_slave_device_descriptor.idProduct;
 801c508:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801c50a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801c50c:	183b      	adds	r3, r7, r0
 801c50e:	60da      	str	r2, [r3, #12]

    /* We can now memorize the interface pointer associated with this class.  */
    class -> ux_slave_class_interface = interface;
 801c510:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c512:	2388      	movs	r3, #136	@ 0x88
 801c514:	005b      	lsls	r3, r3, #1
 801c516:	6879      	ldr	r1, [r7, #4]
 801c518:	50d1      	str	r1, [r2, r3]
    
    /* We have found a potential candidate. Call this registered class entry function.  */
    status = class -> ux_slave_class_entry_function(&class_command);
 801c51a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c51e:	0004      	movs	r4, r0
 801c520:	183a      	adds	r2, r7, r0
 801c522:	0010      	movs	r0, r2
 801c524:	4798      	blx	r3
 801c526:	0003      	movs	r3, r0
 801c528:	637b      	str	r3, [r7, #52]	@ 0x34

    /* The status tells us if the registered class wants to own this class.  */
    if (status == UX_SUCCESS)
 801c52a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d114      	bne.n	801c55a <_ux_device_stack_interface_start+0xaa>
    {

        /* Store the class container. */
        class_command.ux_slave_class_command_class_ptr =  class;
 801c530:	193b      	adds	r3, r7, r4
 801c532:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c534:	621a      	str	r2, [r3, #32]
        
        /* Store the command.  */
        class_command.ux_slave_class_command_request =  UX_SLAVE_CLASS_COMMAND_ACTIVATE;
 801c536:	193b      	adds	r3, r7, r4
 801c538:	2202      	movs	r2, #2
 801c53a:	601a      	str	r2, [r3, #0]
        
        /* Activate the class.  */
        status = class -> ux_slave_class_entry_function(&class_command);
 801c53c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801c53e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c540:	193a      	adds	r2, r7, r4
 801c542:	0010      	movs	r0, r2
 801c544:	4798      	blx	r3
 801c546:	0003      	movs	r3, r0
 801c548:	637b      	str	r3, [r7, #52]	@ 0x34

        /* If the class was successfully activated, set the class for the interface.  */
        if(status == UX_SUCCESS)
 801c54a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c54c:	2b00      	cmp	r3, #0
 801c54e:	d102      	bne.n	801c556 <_ux_device_stack_interface_start+0xa6>
            interface -> ux_slave_interface_class =  class;
 801c550:	687b      	ldr	r3, [r7, #4]
 801c552:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801c554:	605a      	str	r2, [r3, #4]

        return(status); 
 801c556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c558:	e000      	b.n	801c55c <_ux_device_stack_interface_start+0xac>
    }

    /* There is no driver who want to own this class!  */
    return(UX_NO_CLASS_MATCH);
 801c55a:	2357      	movs	r3, #87	@ 0x57
}
 801c55c:	0018      	movs	r0, r3
 801c55e:	46bd      	mov	sp, r7
 801c560:	b011      	add	sp, #68	@ 0x44
 801c562:	bd90      	pop	{r4, r7, pc}
 801c564:	200116a4 	.word	0x200116a4

0801c568 <_ux_device_stack_set_feature>:
/*                                            supported device requests,  */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_set_feature(ULONG request_type, ULONG request_value, ULONG request_index)
{
 801c568:	b580      	push	{r7, lr}
 801c56a:	b08a      	sub	sp, #40	@ 0x28
 801c56c:	af00      	add	r7, sp, #0
 801c56e:	60f8      	str	r0, [r7, #12]
 801c570:	60b9      	str	r1, [r7, #8]
 801c572:	607a      	str	r2, [r7, #4]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_SET_FEATURE, request_value, request_index, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801c574:	4b29      	ldr	r3, [pc, #164]	@ (801c61c <_ux_device_stack_set_feature+0xb4>)
 801c576:	681b      	ldr	r3, [r3, #0]
 801c578:	61fb      	str	r3, [r7, #28]

    /* Get the pointer to the device.  */
    device =  &_ux_system_slave -> ux_system_slave_device;
 801c57a:	4b28      	ldr	r3, [pc, #160]	@ (801c61c <_ux_device_stack_set_feature+0xb4>)
 801c57c:	681b      	ldr	r3, [r3, #0]
 801c57e:	3320      	adds	r3, #32
 801c580:	61bb      	str	r3, [r7, #24]

    /* Get the control endpoint for the device.  */
    endpoint =  &device -> ux_slave_device_control_endpoint;
 801c582:	69bb      	ldr	r3, [r7, #24]
 801c584:	333c      	adds	r3, #60	@ 0x3c
 801c586:	617b      	str	r3, [r7, #20]

    /* The feature can be for either the device or the endpoint.  */
    switch (request_type & UX_REQUEST_TARGET)
 801c588:	68fb      	ldr	r3, [r7, #12]
 801c58a:	2203      	movs	r2, #3
 801c58c:	4013      	ands	r3, r2
 801c58e:	d002      	beq.n	801c596 <_ux_device_stack_set_feature+0x2e>
 801c590:	2b02      	cmp	r3, #2
 801c592:	d016      	beq.n	801c5c2 <_ux_device_stack_set_feature+0x5a>
 801c594:	e037      	b.n	801c606 <_ux_device_stack_set_feature+0x9e>
    {
    
    case UX_REQUEST_TARGET_DEVICE:

        /* Check if we have a DEVICE_REMOTE_WAKEUP Feature.  */
        if (request_value == UX_REQUEST_FEATURE_DEVICE_REMOTE_WAKEUP)
 801c596:	68bb      	ldr	r3, [r7, #8]
 801c598:	2b01      	cmp	r3, #1
 801c59a:	d110      	bne.n	801c5be <_ux_device_stack_set_feature+0x56>
        {

            /* Check if we have the capability. */
            if (_ux_system_slave -> ux_system_slave_remote_wakeup_capability)
 801c59c:	4b1f      	ldr	r3, [pc, #124]	@ (801c61c <_ux_device_stack_set_feature+0xb4>)
 801c59e:	681a      	ldr	r2, [r3, #0]
 801c5a0:	23d4      	movs	r3, #212	@ 0xd4
 801c5a2:	005b      	lsls	r3, r3, #1
 801c5a4:	58d3      	ldr	r3, [r2, r3]
 801c5a6:	2b00      	cmp	r3, #0
 801c5a8:	d007      	beq.n	801c5ba <_ux_device_stack_set_feature+0x52>
            {

                /* Enable the feature. */
                _ux_system_slave -> ux_system_slave_remote_wakeup_enabled = UX_TRUE;
 801c5aa:	4b1c      	ldr	r3, [pc, #112]	@ (801c61c <_ux_device_stack_set_feature+0xb4>)
 801c5ac:	681a      	ldr	r2, [r3, #0]
 801c5ae:	23d6      	movs	r3, #214	@ 0xd6
 801c5b0:	005b      	lsls	r3, r3, #1
 801c5b2:	2101      	movs	r1, #1
 801c5b4:	50d1      	str	r1, [r2, r3]

                /* OK. */
                return (UX_SUCCESS);
 801c5b6:	2300      	movs	r3, #0
 801c5b8:	e02c      	b.n	801c614 <_ux_device_stack_set_feature+0xac>
            }
            else

                /* Protocol error. */
                return (UX_FUNCTION_NOT_SUPPORTED);
 801c5ba:	2354      	movs	r3, #84	@ 0x54
 801c5bc:	e02a      	b.n	801c614 <_ux_device_stack_set_feature+0xac>
            return(UX_SUCCESS);
        }
#endif

        /* Request value not supported.  */
        return(UX_FUNCTION_NOT_SUPPORTED);
 801c5be:	2354      	movs	r3, #84	@ 0x54
 801c5c0:	e028      	b.n	801c614 <_ux_device_stack_set_feature+0xac>
    case UX_REQUEST_TARGET_ENDPOINT:

        /* The only set feature for endpoint is ENDPOINT_STALL. This forces
           the endpoint to the stall situation.
           We need to find the endpoint through the interface(s). */
        interface =  device -> ux_slave_device_first_interface;
 801c5c2:	69bb      	ldr	r3, [r7, #24]
 801c5c4:	22f0      	movs	r2, #240	@ 0xf0
 801c5c6:	589b      	ldr	r3, [r3, r2]
 801c5c8:	627b      	str	r3, [r7, #36]	@ 0x24

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
        while (interface != UX_NULL)
 801c5ca:	e019      	b.n	801c600 <_ux_device_stack_set_feature+0x98>
        {
#endif
            /* Get the first endpoint for this interface.  */
            endpoint_target =  interface -> ux_slave_interface_first_endpoint;
 801c5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c5d0:	623b      	str	r3, [r7, #32]
                
            /* Parse all the endpoints.  */
            while (endpoint_target != UX_NULL)
 801c5d2:	e00f      	b.n	801c5f4 <_ux_device_stack_set_feature+0x8c>
            {

                /* Check the endpoint index.  */
                if (endpoint_target -> ux_slave_endpoint_descriptor.bEndpointAddress == request_index)
 801c5d4:	6a3b      	ldr	r3, [r7, #32]
 801c5d6:	695b      	ldr	r3, [r3, #20]
 801c5d8:	687a      	ldr	r2, [r7, #4]
 801c5da:	429a      	cmp	r2, r3
 801c5dc:	d107      	bne.n	801c5ee <_ux_device_stack_set_feature+0x86>
                {

                    /* Stall the endpoint.  */
                    dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint_target);
 801c5de:	69fb      	ldr	r3, [r7, #28]
 801c5e0:	699b      	ldr	r3, [r3, #24]
 801c5e2:	6a3a      	ldr	r2, [r7, #32]
 801c5e4:	69f8      	ldr	r0, [r7, #28]
 801c5e6:	2114      	movs	r1, #20
 801c5e8:	4798      	blx	r3

                    /* Return the function status.  */
                    return(UX_SUCCESS);
 801c5ea:	2300      	movs	r3, #0
 801c5ec:	e012      	b.n	801c614 <_ux_device_stack_set_feature+0xac>
                }

                /* Next endpoint.  */
                endpoint_target =  endpoint_target -> ux_slave_endpoint_next_endpoint;
 801c5ee:	6a3b      	ldr	r3, [r7, #32]
 801c5f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c5f2:	623b      	str	r3, [r7, #32]
            while (endpoint_target != UX_NULL)
 801c5f4:	6a3b      	ldr	r3, [r7, #32]
 801c5f6:	2b00      	cmp	r3, #0
 801c5f8:	d1ec      	bne.n	801c5d4 <_ux_device_stack_set_feature+0x6c>
            }

#if !defined(UX_DEVICE_INITIALIZE_FRAMEWORK_SCAN_DISABLE) || UX_MAX_DEVICE_INTERFACES > 1
            /* Next interface.  */
            interface =  interface -> ux_slave_interface_next_interface;
 801c5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c5fe:	627b      	str	r3, [r7, #36]	@ 0x24
        while (interface != UX_NULL)
 801c600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c602:	2b00      	cmp	r3, #0
 801c604:	d1e2      	bne.n	801c5cc <_ux_device_stack_set_feature+0x64>
        /* Intentionally fall through into the default case. */
        /* fall through */
    default:
        
        /* We stall the command.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_STALL_ENDPOINT, endpoint);
 801c606:	69fb      	ldr	r3, [r7, #28]
 801c608:	699b      	ldr	r3, [r3, #24]
 801c60a:	697a      	ldr	r2, [r7, #20]
 801c60c:	69f8      	ldr	r0, [r7, #28]
 801c60e:	2114      	movs	r1, #20
 801c610:	4798      	blx	r3
    
        /* No more work to do here.  The command failed but the upper layer does not depend on it.  */
        return(UX_SUCCESS);            
 801c612:	2300      	movs	r3, #0
    }
}
 801c614:	0018      	movs	r0, r3
 801c616:	46bd      	mov	sp, r7
 801c618:	b00a      	add	sp, #40	@ 0x28
 801c61a:	bd80      	pop	{r7, pc}
 801c61c:	200116a4 	.word	0x200116a4

0801c620 <_ux_device_stack_transfer_abort>:
/*                                            assigned aborting code,     */
/*                                            resulting in version 6.1.10 */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_abort(UX_SLAVE_TRANSFER *transfer_request, ULONG completion_code)
{
 801c620:	b580      	push	{r7, lr}
 801c622:	b088      	sub	sp, #32
 801c624:	af00      	add	r7, sp, #0
 801c626:	6078      	str	r0, [r7, #4]
 801c628:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ABORT, transfer_request, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801c62a:	4b18      	ldr	r3, [pc, #96]	@ (801c68c <_ux_device_stack_transfer_abort+0x6c>)
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	61fb      	str	r3, [r7, #28]

    /* Sets the completion code due to bus reset.  */
    transfer_request -> ux_slave_transfer_request_completion_code = completion_code;
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	683a      	ldr	r2, [r7, #0]
 801c634:	625a      	str	r2, [r3, #36]	@ 0x24
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c636:	f3ef 8310 	mrs	r3, PRIMASK
 801c63a:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c63c:	b672      	cpsid	i
    return(primask_value);
 801c63e:	697b      	ldr	r3, [r7, #20]

    /* Ensure we're not preempted by the transfer completion ISR.  */
    UX_DISABLE
 801c640:	61bb      	str	r3, [r7, #24]

    /* It's possible the transfer already completed. Ensure it hasn't before doing the abort.  */
    if (transfer_request -> ux_slave_transfer_request_status == UX_TRANSFER_STATUS_PENDING)
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	681b      	ldr	r3, [r3, #0]
 801c646:	2b01      	cmp	r3, #1
 801c648:	d114      	bne.n	801c674 <_ux_device_stack_transfer_abort+0x54>
    {

        /* Call the DCD if necessary for cleaning up the pending transfer.  */
        dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_ABORT, (VOID *) transfer_request);
 801c64a:	69fb      	ldr	r3, [r7, #28]
 801c64c:	699b      	ldr	r3, [r3, #24]
 801c64e:	687a      	ldr	r2, [r7, #4]
 801c650:	69f8      	ldr	r0, [r7, #28]
 801c652:	210d      	movs	r1, #13
 801c654:	4798      	blx	r3
 801c656:	69bb      	ldr	r3, [r7, #24]
 801c658:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c65a:	693b      	ldr	r3, [r7, #16]
 801c65c:	f383 8810 	msr	PRIMASK, r3
}
 801c660:	46c0      	nop			@ (mov r8, r8)

        /* We need to set the completion code for the transfer to aborted. Note
           that the transfer request function cannot simultaneously modify this 
           because if the transfer was pending, then the transfer's thread is 
           currently waiting for it to complete.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_ABORT;
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	2204      	movs	r2, #4
 801c666:	601a      	str	r2, [r3, #0]

        /* Wake up the device driver who is waiting on the semaphore.  */
        _ux_device_semaphore_put(&transfer_request -> ux_slave_transfer_request_semaphore);
 801c668:	687b      	ldr	r3, [r7, #4]
 801c66a:	3330      	adds	r3, #48	@ 0x30
 801c66c:	0018      	movs	r0, r3
 801c66e:	f7fb fa1b 	bl	8017aa8 <_ux_utility_semaphore_put>
 801c672:	e005      	b.n	801c680 <_ux_device_stack_transfer_abort+0x60>
 801c674:	69bb      	ldr	r3, [r7, #24]
 801c676:	60fb      	str	r3, [r7, #12]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c678:	68fb      	ldr	r3, [r7, #12]
 801c67a:	f383 8810 	msr	PRIMASK, r3
}
 801c67e:	46c0      	nop			@ (mov r8, r8)
        /* Restore interrupts.  */
        UX_RESTORE
    }

    /* This function never fails.  */
    return(UX_SUCCESS);       
 801c680:	2300      	movs	r3, #0
}
 801c682:	0018      	movs	r0, r3
 801c684:	46bd      	mov	sp, r7
 801c686:	b008      	add	sp, #32
 801c688:	bd80      	pop	{r7, pc}
 801c68a:	46c0      	nop			@ (mov r8, r8)
 801c68c:	200116a4 	.word	0x200116a4

0801c690 <_ux_device_stack_transfer_all_request_abort>:
/*  09-30-2020     Chaoqiong Xiao           Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_all_request_abort(UX_SLAVE_ENDPOINT *endpoint, ULONG completion_code)
{
 801c690:	b580      	push	{r7, lr}
 801c692:	b084      	sub	sp, #16
 801c694:	af00      	add	r7, sp, #0
 801c696:	6078      	str	r0, [r7, #4]
 801c698:	6039      	str	r1, [r7, #0]

    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_ALL_REQUEST_ABORT, endpoint, completion_code, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the transfer request for this endpoint.  */
    transfer_request =  &endpoint -> ux_slave_endpoint_transfer_request;
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	3330      	adds	r3, #48	@ 0x30
 801c69e:	60fb      	str	r3, [r7, #12]
    
    /* Abort this request.  */
    _ux_device_stack_transfer_abort(transfer_request, completion_code);
 801c6a0:	683a      	ldr	r2, [r7, #0]
 801c6a2:	68fb      	ldr	r3, [r7, #12]
 801c6a4:	0011      	movs	r1, r2
 801c6a6:	0018      	movs	r0, r3
 801c6a8:	f7ff ffba 	bl	801c620 <_ux_device_stack_transfer_abort>

    /* Return successful completion.  */
    return(UX_SUCCESS);
 801c6ac:	2300      	movs	r3, #0
}
 801c6ae:	0018      	movs	r0, r3
 801c6b0:	46bd      	mov	sp, r7
 801c6b2:	b004      	add	sp, #16
 801c6b4:	bd80      	pop	{r7, pc}
	...

0801c6b8 <_ux_device_stack_transfer_request>:
/*                                                                        */
/**************************************************************************/
UINT  _ux_device_stack_transfer_request(UX_SLAVE_TRANSFER *transfer_request, 
                                            ULONG slave_length, 
                                            ULONG host_length)
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b08c      	sub	sp, #48	@ 0x30
 801c6bc:	af00      	add	r7, sp, #0
 801c6be:	60f8      	str	r0, [r7, #12]
 801c6c0:	60b9      	str	r1, [r7, #8]
 801c6c2:	607a      	str	r2, [r7, #4]
UX_SLAVE_ENDPOINT       *endpoint;
ULONG                   device_state;


    /* Do we have to skip this transfer?  */
    if (transfer_request -> ux_slave_transfer_request_status_phase_ignore == UX_TRUE)
 801c6c4:	68fb      	ldr	r3, [r7, #12]
 801c6c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c6c8:	2b01      	cmp	r3, #1
 801c6ca:	d101      	bne.n	801c6d0 <_ux_device_stack_transfer_request+0x18>
        return(UX_SUCCESS);
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	e073      	b.n	801c7b8 <_ux_device_stack_transfer_request+0x100>
    __asm__ volatile (" MRS  %0,PRIMASK ": "=r" (primask_value) );
 801c6d0:	f3ef 8310 	mrs	r3, PRIMASK
 801c6d4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile (" CPSID i" : : : "memory" );
 801c6d6:	b672      	cpsid	i
    return(primask_value);
 801c6d8:	69bb      	ldr	r3, [r7, #24]

    /* Disable interrupts to prevent the disconnection ISR from preempting us
       while we check the device state and set the transfer status.  */
    UX_DISABLE
 801c6da:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Get the device state.  */
    device_state =  _ux_system_slave -> ux_system_slave_device.ux_slave_device_state;
 801c6dc:	4b38      	ldr	r3, [pc, #224]	@ (801c7c0 <_ux_device_stack_transfer_request+0x108>)
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	6a1b      	ldr	r3, [r3, #32]
 801c6e2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* We can only transfer when the device is ATTACHED, ADDRESSED OR CONFIGURED.  */
    if ((device_state == UX_DEVICE_ATTACHED) || (device_state == UX_DEVICE_ADDRESSED)
 801c6e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6e6:	2b01      	cmp	r3, #1
 801c6e8:	d005      	beq.n	801c6f6 <_ux_device_stack_transfer_request+0x3e>
 801c6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6ec:	2b02      	cmp	r3, #2
 801c6ee:	d002      	beq.n	801c6f6 <_ux_device_stack_transfer_request+0x3e>
            || (device_state == UX_DEVICE_CONFIGURED))
 801c6f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6f2:	2b03      	cmp	r3, #3
 801c6f4:	d114      	bne.n	801c720 <_ux_device_stack_transfer_request+0x68>

        /* Set the transfer to pending.  */
        transfer_request -> ux_slave_transfer_request_status =  UX_TRANSFER_STATUS_PENDING; 
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	2201      	movs	r2, #1
 801c6fa:	601a      	str	r2, [r3, #0]
 801c6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6fe:	617b      	str	r3, [r7, #20]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c700:	697b      	ldr	r3, [r7, #20]
 801c702:	f383 8810 	msr	PRIMASK, r3
}
 801c706:	46c0      	nop			@ (mov r8, r8)
                    
    /* If trace is enabled, insert this event into the trace buffer.  */
    UX_TRACE_IN_LINE_INSERT(UX_TRACE_DEVICE_STACK_TRANSFER_REQUEST, transfer_request, 0, 0, 0, UX_TRACE_DEVICE_STACK_EVENTS, 0, 0)

    /* Get the pointer to the DCD.  */
    dcd =  &_ux_system_slave -> ux_system_slave_dcd;
 801c708:	4b2d      	ldr	r3, [pc, #180]	@ (801c7c0 <_ux_device_stack_transfer_request+0x108>)
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Get the endpoint associated with this transaction.  */
    endpoint =  transfer_request -> ux_slave_transfer_request_endpoint;
 801c70e:	68fb      	ldr	r3, [r7, #12]
 801c710:	689b      	ldr	r3, [r3, #8]
 801c712:	623b      	str	r3, [r7, #32]
    
    /* If the endpoint is non Control, check the endpoint direction and set the data phase direction.  */
    if ((endpoint -> ux_slave_endpoint_descriptor.bmAttributes & UX_MASK_ENDPOINT_TYPE) != UX_CONTROL_ENDPOINT)
 801c714:	6a3b      	ldr	r3, [r7, #32]
 801c716:	699b      	ldr	r3, [r3, #24]
 801c718:	2203      	movs	r2, #3
 801c71a:	4013      	ands	r3, r2
 801c71c:	d10b      	bne.n	801c736 <_ux_device_stack_transfer_request+0x7e>
 801c71e:	e01a      	b.n	801c756 <_ux_device_stack_transfer_request+0x9e>
 801c720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c722:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  PRIMASK,%0": : "r" (primask_value): "memory" );
 801c724:	693b      	ldr	r3, [r7, #16]
 801c726:	f383 8810 	msr	PRIMASK, r3
}
 801c72a:	46c0      	nop			@ (mov r8, r8)
        return(UX_TRANSFER_NOT_READY);
 801c72c:	2325      	movs	r3, #37	@ 0x25
 801c72e:	e043      	b.n	801c7b8 <_ux_device_stack_transfer_request+0x100>
        /* Check if the endpoint is STALLED. In this case, we must refuse the transaction until the endpoint
           has been reset by the host.  */
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)

            /* Wait for 100ms for endpoint to be reset by a CLEAR_FEATURE command.  */
            _ux_utility_delay_ms(100);
 801c730:	2064      	movs	r0, #100	@ 0x64
 801c732:	f7fa fd73 	bl	801721c <_ux_utility_delay_ms>
        while (endpoint -> ux_slave_endpoint_state == UX_ENDPOINT_HALTED)
 801c736:	6a3b      	ldr	r3, [r7, #32]
 801c738:	685b      	ldr	r3, [r3, #4]
 801c73a:	2b02      	cmp	r3, #2
 801c73c:	d0f8      	beq.n	801c730 <_ux_device_stack_transfer_request+0x78>

        /* Isolate the direction from the endpoint address.  */
        if ((endpoint -> ux_slave_endpoint_descriptor.bEndpointAddress & UX_ENDPOINT_DIRECTION) == UX_ENDPOINT_IN)
 801c73e:	6a3b      	ldr	r3, [r7, #32]
 801c740:	695b      	ldr	r3, [r3, #20]
 801c742:	2280      	movs	r2, #128	@ 0x80
 801c744:	4013      	ands	r3, r2
 801c746:	d003      	beq.n	801c750 <_ux_device_stack_transfer_request+0x98>
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_OUT;
 801c748:	68fb      	ldr	r3, [r7, #12]
 801c74a:	2203      	movs	r2, #3
 801c74c:	629a      	str	r2, [r3, #40]	@ 0x28
 801c74e:	e002      	b.n	801c756 <_ux_device_stack_transfer_request+0x9e>
        else    
            transfer_request -> ux_slave_transfer_request_phase =  UX_TRANSFER_PHASE_DATA_IN;
 801c750:	68fb      	ldr	r3, [r7, #12]
 801c752:	2202      	movs	r2, #2
 801c754:	629a      	str	r2, [r3, #40]	@ 0x28

    /* See if we need to force a zero length packet at the end of the transfer. 
       This happens on a DATA IN and when the host requested length is not met
       and the last packet is on a boundary. If slave_length is zero, then it is 
       a explicit ZLP request, no need to force ZLP.  */
    if ((transfer_request -> ux_slave_transfer_request_phase ==  UX_TRANSFER_PHASE_DATA_OUT) &&
 801c756:	68fb      	ldr	r3, [r7, #12]
 801c758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c75a:	2b03      	cmp	r3, #3
 801c75c:	d113      	bne.n	801c786 <_ux_device_stack_transfer_request+0xce>
 801c75e:	68bb      	ldr	r3, [r7, #8]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d010      	beq.n	801c786 <_ux_device_stack_transfer_request+0xce>
        (slave_length != 0) && (host_length != slave_length) && 
 801c764:	687a      	ldr	r2, [r7, #4]
 801c766:	68bb      	ldr	r3, [r7, #8]
 801c768:	429a      	cmp	r2, r3
 801c76a:	d00c      	beq.n	801c786 <_ux_device_stack_transfer_request+0xce>
        (slave_length % endpoint -> ux_slave_endpoint_descriptor.wMaxPacketSize) == 0)
 801c76c:	6a3b      	ldr	r3, [r7, #32]
 801c76e:	69da      	ldr	r2, [r3, #28]
 801c770:	68bb      	ldr	r3, [r7, #8]
 801c772:	0011      	movs	r1, r2
 801c774:	0018      	movs	r0, r3
 801c776:	f7e9 feeb 	bl	8006550 <__aeabi_uidivmod>
 801c77a:	1e0b      	subs	r3, r1, #0
        (slave_length != 0) && (host_length != slave_length) && 
 801c77c:	d103      	bne.n	801c786 <_ux_device_stack_transfer_request+0xce>
    {

        /* If so force Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_TRUE;
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	2201      	movs	r2, #1
 801c782:	651a      	str	r2, [r3, #80]	@ 0x50
 801c784:	e002      	b.n	801c78c <_ux_device_stack_transfer_request+0xd4>
    }
    else
    {

        /* Condition is not met, do not force a Zero Length Packet.  */
        transfer_request -> ux_slave_transfer_request_force_zlp =  UX_FALSE;
 801c786:	68fb      	ldr	r3, [r7, #12]
 801c788:	2200      	movs	r2, #0
 801c78a:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Reset the number of bytes sent/received.  */
    transfer_request -> ux_slave_transfer_request_actual_length =  0;
 801c78c:	68fb      	ldr	r3, [r7, #12]
 801c78e:	2200      	movs	r2, #0
 801c790:	619a      	str	r2, [r3, #24]

    /* Determine how many bytes to send in this transaction.  We keep track of the original
        length and have a working length.  */
    transfer_request -> ux_slave_transfer_request_requested_length =    slave_length;
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	68ba      	ldr	r2, [r7, #8]
 801c796:	615a      	str	r2, [r3, #20]
    transfer_request -> ux_slave_transfer_request_in_transfer_length =  slave_length;
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	68ba      	ldr	r2, [r7, #8]
 801c79c:	61da      	str	r2, [r3, #28]

    /* Save the buffer pointer.  */
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
                            transfer_request -> ux_slave_transfer_request_data_pointer;
 801c79e:	68fb      	ldr	r3, [r7, #12]
 801c7a0:	68da      	ldr	r2, [r3, #12]
    transfer_request -> ux_slave_transfer_request_current_data_pointer =  
 801c7a2:	68fb      	ldr	r3, [r7, #12]
 801c7a4:	611a      	str	r2, [r3, #16]

    /* Call the DCD driver transfer function.   */
    status =  dcd -> ux_slave_dcd_function(dcd, UX_DCD_TRANSFER_REQUEST, transfer_request);
 801c7a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7a8:	699b      	ldr	r3, [r3, #24]
 801c7aa:	68fa      	ldr	r2, [r7, #12]
 801c7ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c7ae:	210c      	movs	r1, #12
 801c7b0:	4798      	blx	r3
 801c7b2:	0003      	movs	r3, r0
 801c7b4:	61fb      	str	r3, [r7, #28]

    /* And return the status.  */
    return(status);
 801c7b6:	69fb      	ldr	r3, [r7, #28]

#endif
}
 801c7b8:	0018      	movs	r0, r3
 801c7ba:	46bd      	mov	sp, r7
 801c7bc:	b00c      	add	sp, #48	@ 0x30
 801c7be:	bd80      	pop	{r7, pc}
 801c7c0:	200116a4 	.word	0x200116a4

0801c7c4 <USBPD_PreInitOs>:
/* Private functions ---------------------------------------------------------*/

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
unsigned int USBPD_PreInitOs(void)
{
 801c7c4:	b580      	push	{r7, lr}
 801c7c6:	af00      	add	r7, sp, #0
  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 801c7c8:	f7f9 fab8 	bl	8015d3c <USBPD_HW_IF_GlobalHwInit>
 /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 801c7cc:	f000 f808 	bl	801c7e0 <USBPD_DPM_InitCore>
 801c7d0:	1e03      	subs	r3, r0, #0
 801c7d2:	d001      	beq.n	801c7d8 <USBPD_PreInitOs+0x14>
  {
    return USBPD_ERROR;
 801c7d4:	2302      	movs	r3, #2
 801c7d6:	e000      	b.n	801c7da <USBPD_PreInitOs+0x16>
  }

  return USBPD_OK;
 801c7d8:	2300      	movs	r3, #0
}
 801c7da:	0018      	movs	r0, r3
 801c7dc:	46bd      	mov	sp, r7
 801c7de:	bd80      	pop	{r7, pc}

0801c7e0 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 801c7e0:	b5b0      	push	{r4, r5, r7, lr}
 801c7e2:	b082      	sub	sp, #8
 801c7e4:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 801c7e6:	1dfb      	adds	r3, r7, #7
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	701a      	strb	r2, [r3, #0]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(LIB_ID))
 801c7ec:	4b62      	ldr	r3, [pc, #392]	@ (801c978 <USBPD_DPM_InitCore+0x198>)
 801c7ee:	0018      	movs	r0, r3
 801c7f0:	f7e4 ffa8 	bl	8001744 <USBPD_PE_CheckLIB>
 801c7f4:	0003      	movs	r3, r0
 801c7f6:	2b01      	cmp	r3, #1
 801c7f8:	d003      	beq.n	801c802 <USBPD_DPM_InitCore+0x22>
  {
    _retr = USBPD_ERROR;
 801c7fa:	1dfb      	adds	r3, r7, #7
 801c7fc:	2202      	movs	r2, #2
 801c7fe:	701a      	strb	r2, [r3, #0]
    goto error;
 801c800:	e0b4      	b.n	801c96c <USBPD_DPM_InitCore+0x18c>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 801c802:	f7e4 ffad 	bl	8001760 <USBPD_PE_GetMemoryConsumption>
 801c806:	0003      	movs	r3, r0
 801c808:	603b      	str	r3, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801c80a:	1dbb      	adds	r3, r7, #6
 801c80c:	2200      	movs	r2, #0
 801c80e:	701a      	strb	r2, [r3, #0]
 801c810:	e0a6      	b.n	801c960 <USBPD_DPM_InitCore+0x180>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 801c812:	1dbb      	adds	r3, r7, #6
 801c814:	781b      	ldrb	r3, [r3, #0]
 801c816:	4a59      	ldr	r2, [pc, #356]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c818:	009b      	lsls	r3, r3, #2
 801c81a:	18d3      	adds	r3, r2, r3
 801c81c:	785a      	ldrb	r2, [r3, #1]
 801c81e:	2108      	movs	r1, #8
 801c820:	438a      	bics	r2, r1
 801c822:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 801c824:	1dbb      	adds	r3, r7, #6
 801c826:	781a      	ldrb	r2, [r3, #0]
 801c828:	1dbb      	adds	r3, r7, #6
 801c82a:	7818      	ldrb	r0, [r3, #0]
 801c82c:	4954      	ldr	r1, [pc, #336]	@ (801c980 <USBPD_DPM_InitCore+0x1a0>)
 801c82e:	0013      	movs	r3, r2
 801c830:	005b      	lsls	r3, r3, #1
 801c832:	189b      	adds	r3, r3, r2
 801c834:	009b      	lsls	r3, r3, #2
 801c836:	18cb      	adds	r3, r1, r3
 801c838:	791b      	ldrb	r3, [r3, #4]
 801c83a:	079b      	lsls	r3, r3, #30
 801c83c:	0f9b      	lsrs	r3, r3, #30
 801c83e:	b2d9      	uxtb	r1, r3
 801c840:	4b4e      	ldr	r3, [pc, #312]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c842:	0082      	lsls	r2, r0, #2
 801c844:	2003      	movs	r0, #3
 801c846:	4001      	ands	r1, r0
 801c848:	000c      	movs	r4, r1
 801c84a:	5cd1      	ldrb	r1, [r2, r3]
 801c84c:	2003      	movs	r0, #3
 801c84e:	4381      	bics	r1, r0
 801c850:	1c08      	adds	r0, r1, #0
 801c852:	1c21      	adds	r1, r4, #0
 801c854:	4301      	orrs	r1, r0
 801c856:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 801c858:	1dbb      	adds	r3, r7, #6
 801c85a:	781a      	ldrb	r2, [r3, #0]
 801c85c:	1dbb      	adds	r3, r7, #6
 801c85e:	7818      	ldrb	r0, [r3, #0]
 801c860:	4947      	ldr	r1, [pc, #284]	@ (801c980 <USBPD_DPM_InitCore+0x1a0>)
 801c862:	0013      	movs	r3, r2
 801c864:	005b      	lsls	r3, r3, #1
 801c866:	189b      	adds	r3, r3, r2
 801c868:	009b      	lsls	r3, r3, #2
 801c86a:	18cb      	adds	r3, r1, r3
 801c86c:	791b      	ldrb	r3, [r3, #4]
 801c86e:	075b      	lsls	r3, r3, #29
 801c870:	0fdb      	lsrs	r3, r3, #31
 801c872:	b2d9      	uxtb	r1, r3
 801c874:	4b41      	ldr	r3, [pc, #260]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c876:	0082      	lsls	r2, r0, #2
 801c878:	2001      	movs	r0, #1
 801c87a:	4001      	ands	r1, r0
 801c87c:	008c      	lsls	r4, r1, #2
 801c87e:	5cd1      	ldrb	r1, [r2, r3]
 801c880:	2004      	movs	r0, #4
 801c882:	4381      	bics	r1, r0
 801c884:	1c08      	adds	r0, r1, #0
 801c886:	1c21      	adds	r1, r4, #0
 801c888:	4301      	orrs	r1, r0
 801c88a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 801c88c:	1dbb      	adds	r3, r7, #6
 801c88e:	781a      	ldrb	r2, [r3, #0]
 801c890:	4b3a      	ldr	r3, [pc, #232]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c892:	0092      	lsls	r2, r2, #2
 801c894:	5cd1      	ldrb	r1, [r2, r3]
 801c896:	2010      	movs	r0, #16
 801c898:	4381      	bics	r1, r0
 801c89a:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 801c89c:	1dbb      	adds	r3, r7, #6
 801c89e:	781a      	ldrb	r2, [r3, #0]
 801c8a0:	4b36      	ldr	r3, [pc, #216]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c8a2:	0092      	lsls	r2, r2, #2
 801c8a4:	5cd1      	ldrb	r1, [r2, r3]
 801c8a6:	203f      	movs	r0, #63	@ 0x3f
 801c8a8:	4001      	ands	r1, r0
 801c8aa:	54d1      	strb	r1, [r2, r3]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 801c8ac:	1dbb      	adds	r3, r7, #6
 801c8ae:	781b      	ldrb	r3, [r3, #0]
 801c8b0:	4a32      	ldr	r2, [pc, #200]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c8b2:	009b      	lsls	r3, r3, #2
 801c8b4:	18d3      	adds	r3, r2, r3
 801c8b6:	785a      	ldrb	r2, [r3, #1]
 801c8b8:	2160      	movs	r1, #96	@ 0x60
 801c8ba:	438a      	bics	r2, r1
 801c8bc:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 801c8be:	1dbb      	adds	r3, r7, #6
 801c8c0:	781b      	ldrb	r3, [r3, #0]
 801c8c2:	4a2e      	ldr	r2, [pc, #184]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c8c4:	009b      	lsls	r3, r3, #2
 801c8c6:	18d3      	adds	r3, r2, r3
 801c8c8:	785a      	ldrb	r2, [r3, #1]
 801c8ca:	217f      	movs	r1, #127	@ 0x7f
 801c8cc:	400a      	ands	r2, r1
 801c8ce:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index,
 801c8d0:	1dbb      	adds	r3, r7, #6
 801c8d2:	781a      	ldrb	r2, [r3, #0]
 801c8d4:	0013      	movs	r3, r2
 801c8d6:	005b      	lsls	r3, r3, #1
 801c8d8:	189b      	adds	r3, r3, r2
 801c8da:	009b      	lsls	r3, r3, #2
 801c8dc:	4a28      	ldr	r2, [pc, #160]	@ (801c980 <USBPD_DPM_InitCore+0x1a0>)
 801c8de:	189c      	adds	r4, r3, r2
 801c8e0:	1dbb      	adds	r3, r7, #6
 801c8e2:	781b      	ldrb	r3, [r3, #0]
 801c8e4:	009a      	lsls	r2, r3, #2
 801c8e6:	4b25      	ldr	r3, [pc, #148]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c8e8:	18d2      	adds	r2, r2, r3
 801c8ea:	4926      	ldr	r1, [pc, #152]	@ (801c984 <USBPD_DPM_InitCore+0x1a4>)
 801c8ec:	1dbb      	adds	r3, r7, #6
 801c8ee:	7818      	ldrb	r0, [r3, #0]
 801c8f0:	0013      	movs	r3, r2
 801c8f2:	0022      	movs	r2, r4
 801c8f4:	f7e3 fd3c 	bl	8000370 <USBPD_CAD_Init>
 801c8f8:	1e03      	subs	r3, r0, #0
 801c8fa:	d003      	beq.n	801c904 <USBPD_DPM_InitCore+0x124>
 801c8fc:	1dfb      	adds	r3, r7, #7
 801c8fe:	2202      	movs	r2, #2
 801c900:	701a      	strb	r2, [r3, #0]
 801c902:	e033      	b.n	801c96c <USBPD_DPM_InitCore+0x18c>
                                           &CAD_cbs,
                                           &DPM_Settings[_port_index],
                                           &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 801c904:	1dbb      	adds	r3, r7, #6
 801c906:	781a      	ldrb	r2, [r3, #0]
 801c908:	0013      	movs	r3, r2
 801c90a:	005b      	lsls	r3, r3, #1
 801c90c:	189b      	adds	r3, r3, r2
 801c90e:	009b      	lsls	r3, r3, #2
 801c910:	4a1b      	ldr	r2, [pc, #108]	@ (801c980 <USBPD_DPM_InitCore+0x1a0>)
 801c912:	1899      	adds	r1, r3, r2
 801c914:	1dbb      	adds	r3, r7, #6
 801c916:	781b      	ldrb	r3, [r3, #0]
 801c918:	009a      	lsls	r2, r3, #2
 801c91a:	4b18      	ldr	r3, [pc, #96]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c91c:	18d2      	adds	r2, r2, r3
 801c91e:	1dfc      	adds	r4, r7, #7
 801c920:	4d19      	ldr	r5, [pc, #100]	@ (801c988 <USBPD_DPM_InitCore+0x1a8>)
 801c922:	1dbb      	adds	r3, r7, #6
 801c924:	7818      	ldrb	r0, [r3, #0]
 801c926:	002b      	movs	r3, r5
 801c928:	f7e3 fe00 	bl	800052c <USBPD_PE_Init>
 801c92c:	0003      	movs	r3, r0
 801c92e:	7023      	strb	r3, [r4, #0]
 801c930:	1dfb      	adds	r3, r7, #7
 801c932:	781b      	ldrb	r3, [r3, #0]
 801c934:	2b00      	cmp	r3, #0
 801c936:	d119      	bne.n	801c96c <USBPD_DPM_InitCore+0x18c>
                                         &DPM_Params[_port_index], &dpmCallbacks));

    /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 801c938:	1dbb      	adds	r3, r7, #6
 801c93a:	781b      	ldrb	r3, [r3, #0]
 801c93c:	4a0f      	ldr	r2, [pc, #60]	@ (801c97c <USBPD_DPM_InitCore+0x19c>)
 801c93e:	009b      	lsls	r3, r3, #2
 801c940:	18d3      	adds	r3, r2, r3
 801c942:	785a      	ldrb	r2, [r3, #1]
 801c944:	2108      	movs	r1, #8
 801c946:	430a      	orrs	r2, r1
 801c948:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
    USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 801c94a:	1dbb      	adds	r3, r7, #6
 801c94c:	781b      	ldrb	r3, [r3, #0]
 801c94e:	2101      	movs	r1, #1
 801c950:	0018      	movs	r0, r3
 801c952:	f7e3 fd3a 	bl	80003ca <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 801c956:	1dbb      	adds	r3, r7, #6
 801c958:	1dba      	adds	r2, r7, #6
 801c95a:	7812      	ldrb	r2, [r2, #0]
 801c95c:	3201      	adds	r2, #1
 801c95e:	701a      	strb	r2, [r3, #0]
 801c960:	1dbb      	adds	r3, r7, #6
 801c962:	781b      	ldrb	r3, [r3, #0]
 801c964:	2b01      	cmp	r3, #1
 801c966:	d800      	bhi.n	801c96a <USBPD_DPM_InitCore+0x18a>
 801c968:	e753      	b.n	801c812 <USBPD_DPM_InitCore+0x32>

#ifdef _LOW_POWER
  USBPD_LOWPOWER_Init();
#endif /* _LOW_POWER */

error :
 801c96a:	46c0      	nop			@ (mov r8, r8)
  return _retr;
 801c96c:	1dfb      	adds	r3, r7, #7
 801c96e:	781b      	ldrb	r3, [r3, #0]
}
 801c970:	0018      	movs	r0, r3
 801c972:	46bd      	mov	sp, r7
 801c974:	b002      	add	sp, #8
 801c976:	bdb0      	pop	{r4, r5, r7, pc}
 801c978:	30410000 	.word	0x30410000
 801c97c:	200118b0 	.word	0x200118b0
 801c980:	200000b0 	.word	0x200000b0
 801c984:	0801e7fc 	.word	0x0801e7fc
 801c988:	0801e804 	.word	0x0801e804

0801c98c <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 801c98c:	b580      	push	{r7, lr}
 801c98e:	b084      	sub	sp, #16
 801c990:	af00      	add	r7, sp, #0
 801c992:	0002      	movs	r2, r0
 801c994:	1dfb      	adds	r3, r7, #7
 801c996:	701a      	strb	r2, [r3, #0]
  OS_PUT_MESSAGE_QUEUE(PEQueueId[PortNum], 0xFFFFU, 0U);
 801c998:	4b09      	ldr	r3, [pc, #36]	@ (801c9c0 <USBPD_PE_TaskWakeUp+0x34>)
 801c99a:	60fb      	str	r3, [r7, #12]
 801c99c:	1dfb      	adds	r3, r7, #7
 801c99e:	781a      	ldrb	r2, [r3, #0]
 801c9a0:	0013      	movs	r3, r2
 801c9a2:	00db      	lsls	r3, r3, #3
 801c9a4:	1a9b      	subs	r3, r3, r2
 801c9a6:	00db      	lsls	r3, r3, #3
 801c9a8:	4a06      	ldr	r2, [pc, #24]	@ (801c9c4 <USBPD_PE_TaskWakeUp+0x38>)
 801c9aa:	189b      	adds	r3, r3, r2
 801c9ac:	220c      	movs	r2, #12
 801c9ae:	18b9      	adds	r1, r7, r2
 801c9b0:	2200      	movs	r2, #0
 801c9b2:	0018      	movs	r0, r3
 801c9b4:	f7f6 fc18 	bl	80131e8 <_txe_queue_send>
}
 801c9b8:	46c0      	nop			@ (mov r8, r8)
 801c9ba:	46bd      	mov	sp, r7
 801c9bc:	b004      	add	sp, #16
 801c9be:	bd80      	pop	{r7, pc}
 801c9c0:	0000ffff 	.word	0x0000ffff
 801c9c4:	20011840 	.word	0x20011840

0801c9c8 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 801c9c8:	b580      	push	{r7, lr}
 801c9ca:	b082      	sub	sp, #8
 801c9cc:	af00      	add	r7, sp, #0
  OS_PUT_MESSAGE_QUEUE(CADQueueId, 0xFFFF, 0);
 801c9ce:	4b06      	ldr	r3, [pc, #24]	@ (801c9e8 <USBPD_DPM_CADTaskWakeUp+0x20>)
 801c9d0:	607b      	str	r3, [r7, #4]
 801c9d2:	1d39      	adds	r1, r7, #4
 801c9d4:	4b05      	ldr	r3, [pc, #20]	@ (801c9ec <USBPD_DPM_CADTaskWakeUp+0x24>)
 801c9d6:	2200      	movs	r2, #0
 801c9d8:	0018      	movs	r0, r3
 801c9da:	f7f6 fc05 	bl	80131e8 <_txe_queue_send>
}
 801c9de:	46c0      	nop			@ (mov r8, r8)
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	b002      	add	sp, #8
 801c9e4:	bd80      	pop	{r7, pc}
 801c9e6:	46c0      	nop			@ (mov r8, r8)
 801c9e8:	0000ffff 	.word	0x0000ffff
 801c9ec:	20011808 	.word	0x20011808

0801c9f0 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 801c9f0:	b580      	push	{r7, lr}
 801c9f2:	b084      	sub	sp, #16
 801c9f4:	af00      	add	r7, sp, #0
 801c9f6:	603a      	str	r2, [r7, #0]
 801c9f8:	1dfb      	adds	r3, r7, #7
 801c9fa:	1c02      	adds	r2, r0, #0
 801c9fc:	701a      	strb	r2, [r3, #0]
 801c9fe:	1dbb      	adds	r3, r7, #6
 801ca00:	1c0a      	adds	r2, r1, #0
 801ca02:	701a      	strb	r2, [r3, #0]
 /* _TRACE */
  (void)(Cc);
  switch (State)
 801ca04:	1dbb      	adds	r3, r7, #6
 801ca06:	781b      	ldrb	r3, [r3, #0]
 801ca08:	2b04      	cmp	r3, #4
 801ca0a:	d009      	beq.n	801ca20 <USBPD_DPM_CADCallback+0x30>
 801ca0c:	dd00      	ble.n	801ca10 <USBPD_DPM_CADCallback+0x20>
 801ca0e:	e06f      	b.n	801caf0 <USBPD_DPM_CADCallback+0x100>
 801ca10:	2b03      	cmp	r3, #3
 801ca12:	d01d      	beq.n	801ca50 <USBPD_DPM_CADCallback+0x60>
 801ca14:	dc6c      	bgt.n	801caf0 <USBPD_DPM_CADCallback+0x100>
 801ca16:	2b01      	cmp	r3, #1
 801ca18:	d01a      	beq.n	801ca50 <USBPD_DPM_CADCallback+0x60>
 801ca1a:	2b02      	cmp	r3, #2
 801ca1c:	d00c      	beq.n	801ca38 <USBPD_DPM_CADCallback+0x48>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
      break;
    }
    default :
      /* nothing to do */
      break;
 801ca1e:	e067      	b.n	801caf0 <USBPD_DPM_CADCallback+0x100>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTEMC);
 801ca20:	1dfb      	adds	r3, r7, #7
 801ca22:	781b      	ldrb	r3, [r3, #0]
 801ca24:	2104      	movs	r1, #4
 801ca26:	0018      	movs	r0, r3
 801ca28:	f000 f980 	bl	801cd2c <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801ca2c:	1dfb      	adds	r3, r7, #7
 801ca2e:	781b      	ldrb	r3, [r3, #0]
 801ca30:	0018      	movs	r0, r3
 801ca32:	f000 f867 	bl	801cb04 <DPM_StartPETask>
      break;
 801ca36:	e05c      	b.n	801caf2 <USBPD_DPM_CADCallback+0x102>
      USBPD_DPM_UserCableDetection(PortNum, USBPD_CAD_EVENT_ATTACHED);
 801ca38:	1dfb      	adds	r3, r7, #7
 801ca3a:	781b      	ldrb	r3, [r3, #0]
 801ca3c:	2102      	movs	r1, #2
 801ca3e:	0018      	movs	r0, r3
 801ca40:	f000 f974 	bl	801cd2c <USBPD_DPM_UserCableDetection>
      DPM_StartPETask(PortNum);
 801ca44:	1dfb      	adds	r3, r7, #7
 801ca46:	781b      	ldrb	r3, [r3, #0]
 801ca48:	0018      	movs	r0, r3
 801ca4a:	f000 f85b 	bl	801cb04 <DPM_StartPETask>
      break;
 801ca4e:	e050      	b.n	801caf2 <USBPD_DPM_CADCallback+0x102>
      uint8_t _timeout = 0;
 801ca50:	230f      	movs	r3, #15
 801ca52:	18fb      	adds	r3, r7, r3
 801ca54:	2200      	movs	r2, #0
 801ca56:	701a      	strb	r2, [r3, #0]
      USBPD_PE_TaskWakeUp(PortNum);
 801ca58:	1dfb      	adds	r3, r7, #7
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	0018      	movs	r0, r3
 801ca5e:	f7ff ff95 	bl	801c98c <USBPD_PE_TaskWakeUp>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801ca62:	e016      	b.n	801ca92 <USBPD_DPM_CADCallback+0xa2>
        (void)OS_DELAY(1);
 801ca64:	2001      	movs	r0, #1
 801ca66:	f7f5 f8eb 	bl	8011c40 <_tx_thread_sleep>
        _timeout++;
 801ca6a:	210f      	movs	r1, #15
 801ca6c:	187b      	adds	r3, r7, r1
 801ca6e:	781a      	ldrb	r2, [r3, #0]
 801ca70:	187b      	adds	r3, r7, r1
 801ca72:	3201      	adds	r2, #1
 801ca74:	701a      	strb	r2, [r3, #0]
        if (_timeout > 30u)
 801ca76:	187b      	adds	r3, r7, r1
 801ca78:	781b      	ldrb	r3, [r3, #0]
 801ca7a:	2b1e      	cmp	r3, #30
 801ca7c:	d909      	bls.n	801ca92 <USBPD_DPM_CADCallback+0xa2>
          (void)OS_TASK_SUSPEND(&DPM_PEThreadId_Table[PortNum]);
 801ca7e:	1dfb      	adds	r3, r7, #7
 801ca80:	781b      	ldrb	r3, [r3, #0]
 801ca82:	22b0      	movs	r2, #176	@ 0xb0
 801ca84:	435a      	muls	r2, r3
 801ca86:	4b1d      	ldr	r3, [pc, #116]	@ (801cafc <USBPD_DPM_CADCallback+0x10c>)
 801ca88:	18d3      	adds	r3, r2, r3
 801ca8a:	0018      	movs	r0, r3
 801ca8c:	f7f6 feba 	bl	8013804 <_txe_thread_suspend>
          break;
 801ca90:	e009      	b.n	801caa6 <USBPD_DPM_CADCallback+0xb6>
      while (!OS_TASK_IS_SUPENDED(DPM_PEThreadId_Table[PortNum]))
 801ca92:	1dfb      	adds	r3, r7, #7
 801ca94:	781b      	ldrb	r3, [r3, #0]
 801ca96:	4a19      	ldr	r2, [pc, #100]	@ (801cafc <USBPD_DPM_CADCallback+0x10c>)
 801ca98:	21b0      	movs	r1, #176	@ 0xb0
 801ca9a:	434b      	muls	r3, r1
 801ca9c:	18d3      	adds	r3, r2, r3
 801ca9e:	3330      	adds	r3, #48	@ 0x30
 801caa0:	681b      	ldr	r3, [r3, #0]
 801caa2:	2b03      	cmp	r3, #3
 801caa4:	d1de      	bne.n	801ca64 <USBPD_DPM_CADCallback+0x74>
      USBPD_PE_StateMachine_Stop(PortNum);
 801caa6:	1dfb      	adds	r3, r7, #7
 801caa8:	781b      	ldrb	r3, [r3, #0]
 801caaa:	0018      	movs	r0, r3
 801caac:	f7e3 fe09 	bl	80006c2 <USBPD_PE_StateMachine_Stop>
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 801cab0:	1dfb      	adds	r3, r7, #7
 801cab2:	781a      	ldrb	r2, [r3, #0]
 801cab4:	4b12      	ldr	r3, [pc, #72]	@ (801cb00 <USBPD_DPM_CADCallback+0x110>)
 801cab6:	0092      	lsls	r2, r2, #2
 801cab8:	5cd1      	ldrb	r1, [r2, r3]
 801caba:	2010      	movs	r0, #16
 801cabc:	4381      	bics	r1, r0
 801cabe:	54d1      	strb	r1, [r2, r3]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 801cac0:	1dfb      	adds	r3, r7, #7
 801cac2:	781b      	ldrb	r3, [r3, #0]
 801cac4:	4a0e      	ldr	r2, [pc, #56]	@ (801cb00 <USBPD_DPM_CADCallback+0x110>)
 801cac6:	009b      	lsls	r3, r3, #2
 801cac8:	18d3      	adds	r3, r2, r3
 801caca:	785a      	ldrb	r2, [r3, #1]
 801cacc:	2107      	movs	r1, #7
 801cace:	438a      	bics	r2, r1
 801cad0:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 801cad2:	1dbb      	adds	r3, r7, #6
 801cad4:	781a      	ldrb	r2, [r3, #0]
 801cad6:	1dfb      	adds	r3, r7, #7
 801cad8:	781b      	ldrb	r3, [r3, #0]
 801cada:	0011      	movs	r1, r2
 801cadc:	0018      	movs	r0, r3
 801cade:	f000 f925 	bl	801cd2c <USBPD_DPM_UserCableDetection>
      USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_STOP);
 801cae2:	1dfb      	adds	r3, r7, #7
 801cae4:	781b      	ldrb	r3, [r3, #0]
 801cae6:	2169      	movs	r1, #105	@ 0x69
 801cae8:	0018      	movs	r0, r3
 801caea:	f000 f92c 	bl	801cd46 <USBPD_DPM_Notification>
      break;
 801caee:	e000      	b.n	801caf2 <USBPD_DPM_CADCallback+0x102>
      break;
 801caf0:	46c0      	nop			@ (mov r8, r8)
  }
}
 801caf2:	46c0      	nop			@ (mov r8, r8)
 801caf4:	46bd      	mov	sp, r7
 801caf6:	b004      	add	sp, #16
 801caf8:	bd80      	pop	{r7, pc}
 801cafa:	46c0      	nop			@ (mov r8, r8)
 801cafc:	200116a8 	.word	0x200116a8
 801cb00:	200118b0 	.word	0x200118b0

0801cb04 <DPM_StartPETask>:

static void DPM_StartPETask(uint8_t PortNum)
{
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b082      	sub	sp, #8
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	0002      	movs	r2, r0
 801cb0c:	1dfb      	adds	r3, r7, #7
 801cb0e:	701a      	strb	r2, [r3, #0]
  USBPD_PE_StateMachine_Reset(PortNum);
 801cb10:	1dfb      	adds	r3, r7, #7
 801cb12:	781b      	ldrb	r3, [r3, #0]
 801cb14:	0018      	movs	r0, r3
 801cb16:	f7e3 fdce 	bl	80006b6 <USBPD_PE_StateMachine_Reset>
  /* Resume the PE task */
  switch (PortNum)
 801cb1a:	1dfb      	adds	r3, r7, #7
 801cb1c:	781b      	ldrb	r3, [r3, #0]
 801cb1e:	2b01      	cmp	r3, #1
 801cb20:	d809      	bhi.n	801cb36 <DPM_StartPETask+0x32>
  {
    case USBPD_PORT_0:
    case USBPD_PORT_1:
    {
      OS_TASK_RESUME(DPM_PEThreadId_Table[PortNum]);
 801cb22:	1dfb      	adds	r3, r7, #7
 801cb24:	781b      	ldrb	r3, [r3, #0]
 801cb26:	22b0      	movs	r2, #176	@ 0xb0
 801cb28:	435a      	muls	r2, r3
 801cb2a:	4b09      	ldr	r3, [pc, #36]	@ (801cb50 <DPM_StartPETask+0x4c>)
 801cb2c:	18d3      	adds	r3, r2, r3
 801cb2e:	0018      	movs	r0, r3
 801cb30:	f7f6 fe48 	bl	80137c4 <_txe_thread_resume>
      break;
 801cb34:	e002      	b.n	801cb3c <DPM_StartPETask+0x38>
    }
    default :
    {
      USBPD_DPM_ErrorHandler();
 801cb36:	f000 f80d 	bl	801cb54 <USBPD_DPM_ErrorHandler>
      break;
 801cb3a:	46c0      	nop			@ (mov r8, r8)
    }
  }
 /* _RTOS || THREADX */
  USBPD_DPM_Notification(PortNum, USBPD_NOTIFY_USBSTACK_START);
 801cb3c:	1dfb      	adds	r3, r7, #7
 801cb3e:	781b      	ldrb	r3, [r3, #0]
 801cb40:	2168      	movs	r1, #104	@ 0x68
 801cb42:	0018      	movs	r0, r3
 801cb44:	f000 f8ff 	bl	801cd46 <USBPD_DPM_Notification>
}
 801cb48:	46c0      	nop			@ (mov r8, r8)
 801cb4a:	46bd      	mov	sp, r7
 801cb4c:	b002      	add	sp, #8
 801cb4e:	bd80      	pop	{r7, pc}
 801cb50:	200116a8 	.word	0x200116a8

0801cb54 <USBPD_DPM_ErrorHandler>:
 /* USBPDCORE_LIB_NO_PD */

__WEAK void USBPD_DPM_ErrorHandler(void)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	af00      	add	r7, sp, #0
  /* This function is called to block application execution
     in case of an unexpected behavior
     another solution could be to reset application */
  while (1u == 1u) {};
 801cb58:	46c0      	nop			@ (mov r8, r8)
 801cb5a:	e7fd      	b.n	801cb58 <USBPD_DPM_ErrorHandler+0x4>

0801cb5c <USBPD_PWR_IF_SetProfile>:
  * @brief  Sets the required power profile, now it works only with Fixed ones
  * @param  PortNum Port number
  * @retval USBPD status
*/
USBPD_StatusTypeDef USBPD_PWR_IF_SetProfile(uint8_t PortNum)
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	b084      	sub	sp, #16
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	0002      	movs	r2, r0
 801cb64:	1dfb      	adds	r3, r7, #7
 801cb66:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SetProfile */
  USBPD_StatusTypeDef      _status = USBPD_ERROR;
 801cb68:	210f      	movs	r1, #15
 801cb6a:	187b      	adds	r3, r7, r1
 801cb6c:	2202      	movs	r2, #2
 801cb6e:	701a      	strb	r2, [r3, #0]
/*   if (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum, 5000, 3000, 3000))
  {
     _status = USBPD_OK;
  }
 */
   return _status;
 801cb70:	187b      	adds	r3, r7, r1
 801cb72:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SetProfile */
}
 801cb74:	0018      	movs	r0, r3
 801cb76:	46bd      	mov	sp, r7
 801cb78:	b004      	add	sp, #16
 801cb7a:	bd80      	pop	{r7, pc}

0801cb7c <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801cb7c:	b580      	push	{r7, lr}
 801cb7e:	b084      	sub	sp, #16
 801cb80:	af00      	add	r7, sp, #0
 801cb82:	0002      	movs	r2, r0
 801cb84:	1dfb      	adds	r3, r7, #7
 801cb86:	701a      	strb	r2, [r3, #0]
 801cb88:	1dbb      	adds	r3, r7, #6
 801cb8a:	1c0a      	adds	r2, r1, #0
 801cb8c:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 801cb8e:	230f      	movs	r3, #15
 801cb90:	18fb      	adds	r3, r7, r3
 801cb92:	2202      	movs	r2, #2
 801cb94:	701a      	strb	r2, [r3, #0]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 801cb96:	1dfb      	adds	r3, r7, #7
 801cb98:	781b      	ldrb	r3, [r3, #0]
 801cb9a:	2b01      	cmp	r3, #1
 801cb9c:	d901      	bls.n	801cba2 <USBPD_PWR_IF_SupplyReady+0x26>
  {
    return USBPD_ERROR;
 801cb9e:	2302      	movs	r3, #2
 801cba0:	e024      	b.n	801cbec <USBPD_PWR_IF_SupplyReady+0x70>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 801cba2:	1dfb      	adds	r3, r7, #7
 801cba4:	781b      	ldrb	r3, [r3, #0]
 801cba6:	2208      	movs	r2, #8
 801cba8:	18ba      	adds	r2, r7, r2
 801cbaa:	0011      	movs	r1, r2
 801cbac:	0018      	movs	r0, r3
 801cbae:	f000 fa40 	bl	801d032 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 801cbb2:	1dbb      	adds	r3, r7, #6
 801cbb4:	781b      	ldrb	r3, [r3, #0]
 801cbb6:	2b00      	cmp	r3, #0
 801cbb8:	d10a      	bne.n	801cbd0 <USBPD_PWR_IF_SupplyReady+0x54>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801cbba:	68bb      	ldr	r3, [r7, #8]
 801cbbc:	4a0d      	ldr	r2, [pc, #52]	@ (801cbf4 <USBPD_PWR_IF_SupplyReady+0x78>)
 801cbbe:	4293      	cmp	r3, r2
 801cbc0:	d801      	bhi.n	801cbc6 <USBPD_PWR_IF_SupplyReady+0x4a>
 801cbc2:	2200      	movs	r2, #0
 801cbc4:	e000      	b.n	801cbc8 <USBPD_PWR_IF_SupplyReady+0x4c>
 801cbc6:	2202      	movs	r2, #2
 801cbc8:	230f      	movs	r3, #15
 801cbca:	18fb      	adds	r3, r7, r3
 801cbcc:	701a      	strb	r2, [r3, #0]
 801cbce:	e00a      	b.n	801cbe6 <USBPD_PWR_IF_SupplyReady+0x6a>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801cbd0:	68ba      	ldr	r2, [r7, #8]
 801cbd2:	23af      	movs	r3, #175	@ 0xaf
 801cbd4:	011b      	lsls	r3, r3, #4
 801cbd6:	429a      	cmp	r2, r3
 801cbd8:	d901      	bls.n	801cbde <USBPD_PWR_IF_SupplyReady+0x62>
 801cbda:	2200      	movs	r2, #0
 801cbdc:	e000      	b.n	801cbe0 <USBPD_PWR_IF_SupplyReady+0x64>
 801cbde:	2202      	movs	r2, #2
 801cbe0:	230f      	movs	r3, #15
 801cbe2:	18fb      	adds	r3, r7, r3
 801cbe4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 801cbe6:	230f      	movs	r3, #15
 801cbe8:	18fb      	adds	r3, r7, r3
 801cbea:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 801cbec:	0018      	movs	r0, r3
 801cbee:	46bd      	mov	sp, r7
 801cbf0:	b004      	add	sp, #16
 801cbf2:	bd80      	pop	{r7, pc}
 801cbf4:	000002ed 	.word	0x000002ed

0801cbf8 <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801cbf8:	b590      	push	{r4, r7, lr}
 801cbfa:	b085      	sub	sp, #20
 801cbfc:	af00      	add	r7, sp, #0
 801cbfe:	60ba      	str	r2, [r7, #8]
 801cc00:	607b      	str	r3, [r7, #4]
 801cc02:	240f      	movs	r4, #15
 801cc04:	193b      	adds	r3, r7, r4
 801cc06:	1c02      	adds	r2, r0, #0
 801cc08:	701a      	strb	r2, [r3, #0]
 801cc0a:	200e      	movs	r0, #14
 801cc0c:	183b      	adds	r3, r7, r0
 801cc0e:	1c0a      	adds	r2, r1, #0
 801cc10:	701a      	strb	r2, [r3, #0]
  if (USBPD_PORT_0 == PortNum)
 801cc12:	193b      	adds	r3, r7, r4
 801cc14:	781b      	ldrb	r3, [r3, #0]
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d117      	bne.n	801cc4a <USBPD_PWR_IF_GetPortPDOs+0x52>
  {
    if (DataId == USBPD_CORE_DATATYPE_SRC_PDO)
 801cc1a:	183b      	adds	r3, r7, r0
 801cc1c:	781b      	ldrb	r3, [r3, #0]
 801cc1e:	2b00      	cmp	r3, #0
 801cc20:	d109      	bne.n	801cc36 <USBPD_PWR_IF_GetPortPDOs+0x3e>
    {
      *Size = PORT0_NB_SOURCEPDO;
 801cc22:	687b      	ldr	r3, [r7, #4]
 801cc24:	2201      	movs	r2, #1
 801cc26:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSRC, sizeof(uint32_t) * PORT0_NB_SOURCEPDO);
 801cc28:	4916      	ldr	r1, [pc, #88]	@ (801cc84 <USBPD_PWR_IF_GetPortPDOs+0x8c>)
 801cc2a:	68bb      	ldr	r3, [r7, #8]
 801cc2c:	2204      	movs	r2, #4
 801cc2e:	0018      	movs	r0, r3
 801cc30:	f001 fb1a 	bl	801e268 <memcpy>
    }
  }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 801cc34:	e021      	b.n	801cc7a <USBPD_PWR_IF_GetPortPDOs+0x82>
      *Size = PORT0_NB_SINKPDO;
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	2201      	movs	r2, #1
 801cc3a:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * PORT0_NB_SINKPDO);
 801cc3c:	4912      	ldr	r1, [pc, #72]	@ (801cc88 <USBPD_PWR_IF_GetPortPDOs+0x90>)
 801cc3e:	68bb      	ldr	r3, [r7, #8]
 801cc40:	2204      	movs	r2, #4
 801cc42:	0018      	movs	r0, r3
 801cc44:	f001 fb10 	bl	801e268 <memcpy>
}
 801cc48:	e017      	b.n	801cc7a <USBPD_PWR_IF_GetPortPDOs+0x82>
    if (DataId == USBPD_CORE_DATATYPE_SRC_PDO)
 801cc4a:	230e      	movs	r3, #14
 801cc4c:	18fb      	adds	r3, r7, r3
 801cc4e:	781b      	ldrb	r3, [r3, #0]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d109      	bne.n	801cc68 <USBPD_PWR_IF_GetPortPDOs+0x70>
      *Size = PORT1_NB_SOURCEPDO;
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	2201      	movs	r2, #1
 801cc58:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT1_PDO_ListSRC, sizeof(uint32_t) * PORT1_NB_SOURCEPDO);
 801cc5a:	490c      	ldr	r1, [pc, #48]	@ (801cc8c <USBPD_PWR_IF_GetPortPDOs+0x94>)
 801cc5c:	68bb      	ldr	r3, [r7, #8]
 801cc5e:	2204      	movs	r2, #4
 801cc60:	0018      	movs	r0, r3
 801cc62:	f001 fb01 	bl	801e268 <memcpy>
}
 801cc66:	e008      	b.n	801cc7a <USBPD_PWR_IF_GetPortPDOs+0x82>
      *Size = PORT1_NB_SINKPDO;
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	2201      	movs	r2, #1
 801cc6c:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT1_PDO_ListSNK, sizeof(uint32_t) * PORT1_NB_SINKPDO);
 801cc6e:	4908      	ldr	r1, [pc, #32]	@ (801cc90 <USBPD_PWR_IF_GetPortPDOs+0x98>)
 801cc70:	68bb      	ldr	r3, [r7, #8]
 801cc72:	2204      	movs	r2, #4
 801cc74:	0018      	movs	r0, r3
 801cc76:	f001 faf7 	bl	801e268 <memcpy>
}
 801cc7a:	46c0      	nop			@ (mov r8, r8)
 801cc7c:	46bd      	mov	sp, r7
 801cc7e:	b005      	add	sp, #20
 801cc80:	bd90      	pop	{r4, r7, pc}
 801cc82:	46c0      	nop			@ (mov r8, r8)
 801cc84:	20000170 	.word	0x20000170
 801cc88:	2000018c 	.word	0x2000018c
 801cc8c:	200001a8 	.word	0x200001a8
 801cc90:	200001c4 	.word	0x200001c4

0801cc94 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 801cc94:	b580      	push	{r7, lr}
 801cc96:	b084      	sub	sp, #16
 801cc98:	af00      	add	r7, sp, #0
 801cc9a:	0002      	movs	r2, r0
 801cc9c:	1dfb      	adds	r3, r7, #7
 801cc9e:	701a      	strb	r2, [r3, #0]
 801cca0:	1dbb      	adds	r3, r7, #6
 801cca2:	1c0a      	adds	r2, r1, #0
 801cca4:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 801cca6:	230f      	movs	r3, #15
 801cca8:	18fb      	adds	r3, r7, r3
 801ccaa:	2200      	movs	r2, #0
 801ccac:	701a      	strb	r2, [r3, #0]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 801ccae:	1dfb      	adds	r3, r7, #7
 801ccb0:	781b      	ldrb	r3, [r3, #0]
 801ccb2:	0018      	movs	r0, r3
 801ccb4:	f7f9 fea0 	bl	80169f8 <HW_IF_PWR_GetVoltage>
 801ccb8:	0003      	movs	r3, r0
 801ccba:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 801ccbc:	1dbb      	adds	r3, r7, #6
 801ccbe:	781b      	ldrb	r3, [r3, #0]
 801ccc0:	2b02      	cmp	r3, #2
 801ccc2:	d018      	beq.n	801ccf6 <USBPD_PWR_IF_GetVBUSStatus+0x62>
 801ccc4:	dc21      	bgt.n	801cd0a <USBPD_PWR_IF_GetVBUSStatus+0x76>
 801ccc6:	2b00      	cmp	r3, #0
 801ccc8:	d002      	beq.n	801ccd0 <USBPD_PWR_IF_GetVBUSStatus+0x3c>
 801ccca:	2b01      	cmp	r3, #1
 801cccc:	d009      	beq.n	801cce2 <USBPD_PWR_IF_GetVBUSStatus+0x4e>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 801ccce:	e01c      	b.n	801cd0a <USBPD_PWR_IF_GetVBUSStatus+0x76>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801ccd0:	68bb      	ldr	r3, [r7, #8]
 801ccd2:	4a15      	ldr	r2, [pc, #84]	@ (801cd28 <USBPD_PWR_IF_GetVBUSStatus+0x94>)
 801ccd4:	4293      	cmp	r3, r2
 801ccd6:	d81a      	bhi.n	801cd0e <USBPD_PWR_IF_GetVBUSStatus+0x7a>
 801ccd8:	230f      	movs	r3, #15
 801ccda:	18fb      	adds	r3, r7, r3
 801ccdc:	2201      	movs	r2, #1
 801ccde:	701a      	strb	r2, [r3, #0]
    break;
 801cce0:	e015      	b.n	801cd0e <USBPD_PWR_IF_GetVBUSStatus+0x7a>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801cce2:	68ba      	ldr	r2, [r7, #8]
 801cce4:	23af      	movs	r3, #175	@ 0xaf
 801cce6:	011b      	lsls	r3, r3, #4
 801cce8:	429a      	cmp	r2, r3
 801ccea:	d312      	bcc.n	801cd12 <USBPD_PWR_IF_GetVBUSStatus+0x7e>
 801ccec:	230f      	movs	r3, #15
 801ccee:	18fb      	adds	r3, r7, r3
 801ccf0:	2201      	movs	r2, #1
 801ccf2:	701a      	strb	r2, [r3, #0]
    break;
 801ccf4:	e00d      	b.n	801cd12 <USBPD_PWR_IF_GetVBUSStatus+0x7e>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 801ccf6:	68ba      	ldr	r2, [r7, #8]
 801ccf8:	23af      	movs	r3, #175	@ 0xaf
 801ccfa:	011b      	lsls	r3, r3, #4
 801ccfc:	429a      	cmp	r2, r3
 801ccfe:	d20a      	bcs.n	801cd16 <USBPD_PWR_IF_GetVBUSStatus+0x82>
 801cd00:	230f      	movs	r3, #15
 801cd02:	18fb      	adds	r3, r7, r3
 801cd04:	2201      	movs	r2, #1
 801cd06:	701a      	strb	r2, [r3, #0]
    break;
 801cd08:	e005      	b.n	801cd16 <USBPD_PWR_IF_GetVBUSStatus+0x82>
    break;
 801cd0a:	46c0      	nop			@ (mov r8, r8)
 801cd0c:	e004      	b.n	801cd18 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801cd0e:	46c0      	nop			@ (mov r8, r8)
 801cd10:	e002      	b.n	801cd18 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801cd12:	46c0      	nop			@ (mov r8, r8)
 801cd14:	e000      	b.n	801cd18 <USBPD_PWR_IF_GetVBUSStatus+0x84>
    break;
 801cd16:	46c0      	nop			@ (mov r8, r8)
  }
  return _status;
 801cd18:	230f      	movs	r3, #15
 801cd1a:	18fb      	adds	r3, r7, r3
 801cd1c:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 801cd1e:	0018      	movs	r0, r3
 801cd20:	46bd      	mov	sp, r7
 801cd22:	b004      	add	sp, #16
 801cd24:	bd80      	pop	{r7, pc}
 801cd26:	46c0      	nop			@ (mov r8, r8)
 801cd28:	000002ed 	.word	0x000002ed

0801cd2c <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b082      	sub	sp, #8
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	0002      	movs	r2, r0
 801cd34:	1dfb      	adds	r3, r7, #7
 801cd36:	701a      	strb	r2, [r3, #0]
 801cd38:	1dbb      	adds	r3, r7, #6
 801cd3a:	1c0a      	adds	r2, r1, #0
 801cd3c:	701a      	strb	r2, [r3, #0]
      // }
      // break;
    // }
  // }
/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801cd3e:	46c0      	nop			@ (mov r8, r8)
 801cd40:	46bd      	mov	sp, r7
 801cd42:	b002      	add	sp, #8
 801cd44:	bd80      	pop	{r7, pc}

0801cd46 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 801cd46:	b580      	push	{r7, lr}
 801cd48:	b082      	sub	sp, #8
 801cd4a:	af00      	add	r7, sp, #0
 801cd4c:	0002      	movs	r2, r0
 801cd4e:	1dfb      	adds	r3, r7, #7
 801cd50:	701a      	strb	r2, [r3, #0]
 801cd52:	1dbb      	adds	r3, r7, #6
 801cd54:	1c0a      	adds	r2, r1, #0
 801cd56:	701a      	strb	r2, [r3, #0]
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
      break;
 801cd58:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_Notification */
}
 801cd5a:	46c0      	nop			@ (mov r8, r8)
 801cd5c:	46bd      	mov	sp, r7
 801cd5e:	b002      	add	sp, #8
 801cd60:	bd80      	pop	{r7, pc}

0801cd62 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 801cd62:	b580      	push	{r7, lr}
 801cd64:	b082      	sub	sp, #8
 801cd66:	af00      	add	r7, sp, #0
 801cd68:	6039      	str	r1, [r7, #0]
 801cd6a:	0011      	movs	r1, r2
 801cd6c:	1dfb      	adds	r3, r7, #7
 801cd6e:	1c02      	adds	r2, r0, #0
 801cd70:	701a      	strb	r2, [r3, #0]
 801cd72:	1dbb      	adds	r3, r7, #6
 801cd74:	1c0a      	adds	r2, r1, #0
 801cd76:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_HardReset");
/* USER CODE END USBPD_DPM_HardReset */
}
 801cd78:	46c0      	nop			@ (mov r8, r8)
 801cd7a:	46bd      	mov	sp, r7
 801cd7c:	b002      	add	sp, #8
 801cd7e:	bd80      	pop	{r7, pc}

0801cd80 <USBPD_DPM_SetupNewPower>:
  * @brief  Request the DPM to setup the new power level.
  * @param  PortNum The current port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_SetupNewPower(uint8_t PortNum)
{
 801cd80:	b580      	push	{r7, lr}
 801cd82:	b082      	sub	sp, #8
 801cd84:	af00      	add	r7, sp, #0
 801cd86:	0002      	movs	r2, r0
 801cd88:	1dfb      	adds	r3, r7, #7
 801cd8a:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SetupNewPower */
  return USBPD_PWR_IF_SetProfile(PortNum);
 801cd8c:	1dfb      	adds	r3, r7, #7
 801cd8e:	781b      	ldrb	r3, [r3, #0]
 801cd90:	0018      	movs	r0, r3
 801cd92:	f7ff fee3 	bl	801cb5c <USBPD_PWR_IF_SetProfile>
 801cd96:	0003      	movs	r3, r0
/* USER CODE END USBPD_DPM_SetupNewPower */
}
 801cd98:	0018      	movs	r0, r3
 801cd9a:	46bd      	mov	sp, r7
 801cd9c:	b002      	add	sp, #8
 801cd9e:	bd80      	pop	{r7, pc}

0801cda0 <USBPD_DPM_EvaluatePowerRoleSwap>:
  * @brief  Evaluate the swap request from PE.
  * @param  PortNum The current port number
  * @retval USBPD_ACCEPT, USBPD_WAIT, USBPD_REJECT
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluatePowerRoleSwap(uint8_t PortNum)
{
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b082      	sub	sp, #8
 801cda4:	af00      	add	r7, sp, #0
 801cda6:	0002      	movs	r2, r0
 801cda8:	1dfb      	adds	r3, r7, #7
 801cdaa:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluatePowerRoleSwap */
  return USBPD_ACCEPT;
 801cdac:	230a      	movs	r3, #10
/* USER CODE END USBPD_DPM_EvaluatePowerRoleSwap */
}
 801cdae:	0018      	movs	r0, r3
 801cdb0:	46bd      	mov	sp, r7
 801cdb2:	b002      	add	sp, #8
 801cdb4:	bd80      	pop	{r7, pc}

0801cdb6 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 801cdb6:	b5b0      	push	{r4, r5, r7, lr}
 801cdb8:	b084      	sub	sp, #16
 801cdba:	af00      	add	r7, sp, #0
 801cdbc:	60ba      	str	r2, [r7, #8]
 801cdbe:	607b      	str	r3, [r7, #4]
 801cdc0:	250f      	movs	r5, #15
 801cdc2:	197b      	adds	r3, r7, r5
 801cdc4:	1c02      	adds	r2, r0, #0
 801cdc6:	701a      	strb	r2, [r3, #0]
 801cdc8:	200e      	movs	r0, #14
 801cdca:	183b      	adds	r3, r7, r0
 801cdcc:	1c0a      	adds	r2, r1, #0
 801cdce:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 801cdd0:	0001      	movs	r1, r0
 801cdd2:	187b      	adds	r3, r7, r1
 801cdd4:	781b      	ldrb	r3, [r3, #0]
 801cdd6:	2b01      	cmp	r3, #1
 801cdd8:	d10e      	bne.n	801cdf8 <USBPD_DPM_GetDataInfo+0x42>
  {
  case USBPD_CORE_DATATYPE_SNK_PDO:           /*!< Handling of port Sink PDO, requested by get sink capa*/
	  USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 801cdda:	687c      	ldr	r4, [r7, #4]
 801cddc:	68ba      	ldr	r2, [r7, #8]
 801cdde:	187b      	adds	r3, r7, r1
 801cde0:	7819      	ldrb	r1, [r3, #0]
 801cde2:	197b      	adds	r3, r7, r5
 801cde4:	7818      	ldrb	r0, [r3, #0]
 801cde6:	0023      	movs	r3, r4
 801cde8:	f7ff ff06 	bl	801cbf8 <USBPD_PWR_IF_GetPortPDOs>
	  *Size *= 4;
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	681b      	ldr	r3, [r3, #0]
 801cdf0:	009a      	lsls	r2, r3, #2
 801cdf2:	687b      	ldr	r3, [r7, #4]
 801cdf4:	601a      	str	r2, [r3, #0]
	  break;
 801cdf6:	e000      	b.n	801cdfa <USBPD_DPM_GetDataInfo+0x44>
    // break;
//  case USBPD_CORE_BATTERY_CAPABILITY:         /*!< Retrieve of Battery capability message content      */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_GetDataInfo:%d", DataId);
    break;
 801cdf8:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 801cdfa:	46c0      	nop			@ (mov r8, r8)
 801cdfc:	46bd      	mov	sp, r7
 801cdfe:	b004      	add	sp, #16
 801ce00:	bdb0      	pop	{r4, r5, r7, pc}

0801ce02 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 801ce02:	b580      	push	{r7, lr}
 801ce04:	b084      	sub	sp, #16
 801ce06:	af00      	add	r7, sp, #0
 801ce08:	60ba      	str	r2, [r7, #8]
 801ce0a:	607b      	str	r3, [r7, #4]
 801ce0c:	230f      	movs	r3, #15
 801ce0e:	18fb      	adds	r3, r7, r3
 801ce10:	1c02      	adds	r2, r0, #0
 801ce12:	701a      	strb	r2, [r3, #0]
 801ce14:	230e      	movs	r3, #14
 801ce16:	18fb      	adds	r3, r7, r3
 801ce18:	1c0a      	adds	r2, r1, #0
 801ce1a:	701a      	strb	r2, [r3, #0]
    // break;
//  case USBPD_CORE_SNK_EXTENDED_CAPA:          /*!< Storing of Sink Extended capability message content       */
    // break;
  default:
    DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SetDataInfo:%d", DataId);
    break;
 801ce1c:	46c0      	nop			@ (mov r8, r8)
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

}
 801ce1e:	46c0      	nop			@ (mov r8, r8)
 801ce20:	46bd      	mov	sp, r7
 801ce22:	b004      	add	sp, #16
 801ce24:	bd80      	pop	{r7, pc}

0801ce26 <USBPD_DPM_EvaluateRequest>:
  * @param  PortNum Port number
  * @param  PtrPowerObject  Pointer on the power data object
  * @retval USBPD status : USBPD_ACCEPT, USBPD_REJECT, USBPD_WAIT, USBPD_GOTOMIN
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateRequest(uint8_t PortNum, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801ce26:	b580      	push	{r7, lr}
 801ce28:	b082      	sub	sp, #8
 801ce2a:	af00      	add	r7, sp, #0
 801ce2c:	0002      	movs	r2, r0
 801ce2e:	6039      	str	r1, [r7, #0]
 801ce30:	1dfb      	adds	r3, r7, #7
 801ce32:	701a      	strb	r2, [r3, #0]
    Set power data object to initialize value.
    This parameter is used by the stack to start or not tPPSTimeout
    (in case of USBPD_CORE_PDO_TYPE_APDO, stack will wait for periodic request
    from the port partner in PPS mode).
  */
  *PtrPowerObject = USBPD_CORE_PDO_TYPE_FIXED;
 801ce34:	683b      	ldr	r3, [r7, #0]
 801ce36:	2200      	movs	r2, #0
 801ce38:	601a      	str	r2, [r3, #0]

  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_EvaluateRequest");
  return USBPD_REJECT;
 801ce3a:	230c      	movs	r3, #12
/* USER CODE END USBPD_DPM_EvaluateRequest */
}
 801ce3c:	0018      	movs	r0, r3
 801ce3e:	46bd      	mov	sp, r7
 801ce40:	b002      	add	sp, #8
 801ce42:	bd80      	pop	{r7, pc}

0801ce44 <USBPD_DPM_SNK_EvaluateCapabilities>:
  * @param  PtrRequestData  Pointer on selected request data object
  * @param  PtrPowerObjectType  Pointer on the power data object
  * @retval None
  */
void USBPD_DPM_SNK_EvaluateCapabilities(uint8_t PortNum, uint32_t *PtrRequestData, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObjectType)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b084      	sub	sp, #16
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	60b9      	str	r1, [r7, #8]
 801ce4c:	607a      	str	r2, [r7, #4]
 801ce4e:	230f      	movs	r3, #15
 801ce50:	18fb      	adds	r3, r7, r3
 801ce52:	1c02      	adds	r2, r0, #0
 801ce54:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_SNK_EvaluateCapabilities */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_SNK_EvaluateCapabilities");
/* USER CODE END USBPD_DPM_SNK_EvaluateCapabilities */
}
 801ce56:	46c0      	nop			@ (mov r8, r8)
 801ce58:	46bd      	mov	sp, r7
 801ce5a:	b004      	add	sp, #16
 801ce5c:	bd80      	pop	{r7, pc}

0801ce5e <USBPD_DPM_PowerRoleSwap>:
  * @param  CurrentRole the current role
  * @param  Status status on power role swap event
  * @retval None
  */
void USBPD_DPM_PowerRoleSwap(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_PRS_Status_TypeDef Status)
{
 801ce5e:	b580      	push	{r7, lr}
 801ce60:	b082      	sub	sp, #8
 801ce62:	af00      	add	r7, sp, #0
 801ce64:	6039      	str	r1, [r7, #0]
 801ce66:	0011      	movs	r1, r2
 801ce68:	1dfb      	adds	r3, r7, #7
 801ce6a:	1c02      	adds	r2, r0, #0
 801ce6c:	701a      	strb	r2, [r3, #0]
 801ce6e:	1dbb      	adds	r3, r7, #6
 801ce70:	1c0a      	adds	r2, r1, #0
 801ce72:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_PowerRoleSwap */
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_PowerRoleSwap");
/* USER CODE END USBPD_DPM_PowerRoleSwap */
}
 801ce74:	46c0      	nop			@ (mov r8, r8)
 801ce76:	46bd      	mov	sp, r7
 801ce78:	b002      	add	sp, #8
 801ce7a:	bd80      	pop	{r7, pc}

0801ce7c <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 801ce7c:	b590      	push	{r4, r7, lr}
 801ce7e:	b083      	sub	sp, #12
 801ce80:	af00      	add	r7, sp, #0
 801ce82:	0004      	movs	r4, r0
 801ce84:	0008      	movs	r0, r1
 801ce86:	603a      	str	r2, [r7, #0]
 801ce88:	0019      	movs	r1, r3
 801ce8a:	1dfb      	adds	r3, r7, #7
 801ce8c:	1c22      	adds	r2, r4, #0
 801ce8e:	701a      	strb	r2, [r3, #0]
 801ce90:	1dbb      	adds	r3, r7, #6
 801ce92:	1c02      	adds	r2, r0, #0
 801ce94:	701a      	strb	r2, [r3, #0]
 801ce96:	1d3b      	adds	r3, r7, #4
 801ce98:	1c0a      	adds	r2, r1, #0
 801ce9a:	801a      	strh	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801ce9c:	46c0      	nop			@ (mov r8, r8)
 801ce9e:	46bd      	mov	sp, r7
 801cea0:	b003      	add	sp, #12
 801cea2:	bd90      	pop	{r4, r7, pc}

0801cea4 <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801cea4:	b580      	push	{r7, lr}
 801cea6:	b082      	sub	sp, #8
 801cea8:	af00      	add	r7, sp, #0
 801ceaa:	0002      	movs	r2, r0
 801ceac:	1dfb      	adds	r3, r7, #7
 801ceae:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 801ceb0:	1dfb      	adds	r3, r7, #7
 801ceb2:	781b      	ldrb	r3, [r3, #0]
 801ceb4:	0018      	movs	r0, r3
 801ceb6:	f7e3 fb25 	bl	8000504 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 801ceba:	46c0      	nop			@ (mov r8, r8)
 801cebc:	46bd      	mov	sp, r7
 801cebe:	b002      	add	sp, #8
 801cec0:	bd80      	pop	{r7, pc}
	...

0801cec4 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 801cec4:	b580      	push	{r7, lr}
 801cec6:	b084      	sub	sp, #16
 801cec8:	af00      	add	r7, sp, #0
 801ceca:	0002      	movs	r2, r0
 801cecc:	1dfb      	adds	r3, r7, #7
 801cece:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 801ced0:	230f      	movs	r3, #15
 801ced2:	18fb      	adds	r3, r7, r3
 801ced4:	220c      	movs	r2, #12
 801ced6:	701a      	strb	r2, [r3, #0]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 801ced8:	1dfb      	adds	r3, r7, #7
 801ceda:	781a      	ldrb	r2, [r3, #0]
 801cedc:	4b2c      	ldr	r3, [pc, #176]	@ (801cf90 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801cede:	2154      	movs	r1, #84	@ 0x54
 801cee0:	434a      	muls	r2, r1
 801cee2:	5cd3      	ldrb	r3, [r2, r3]
 801cee4:	07db      	lsls	r3, r3, #31
 801cee6:	0fdb      	lsrs	r3, r3, #31
 801cee8:	b2db      	uxtb	r3, r3
 801ceea:	2b00      	cmp	r3, #0
 801ceec:	d015      	beq.n	801cf1a <USBPD_DPM_EvaluateDataRoleSwap+0x56>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 801ceee:	1dfb      	adds	r3, r7, #7
 801cef0:	781a      	ldrb	r2, [r3, #0]
 801cef2:	4b27      	ldr	r3, [pc, #156]	@ (801cf90 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801cef4:	2154      	movs	r1, #84	@ 0x54
 801cef6:	434a      	muls	r2, r1
 801cef8:	5cd3      	ldrb	r3, [r2, r3]
 801cefa:	075b      	lsls	r3, r3, #29
 801cefc:	0fdb      	lsrs	r3, r3, #31
 801cefe:	b2db      	uxtb	r3, r3
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d10f      	bne.n	801cf24 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 801cf04:	1dfb      	adds	r3, r7, #7
 801cf06:	781a      	ldrb	r2, [r3, #0]
 801cf08:	4b21      	ldr	r3, [pc, #132]	@ (801cf90 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801cf0a:	2154      	movs	r1, #84	@ 0x54
 801cf0c:	434a      	muls	r2, r1
 801cf0e:	5cd3      	ldrb	r3, [r2, r3]
 801cf10:	071b      	lsls	r3, r3, #28
 801cf12:	0fdb      	lsrs	r3, r3, #31
 801cf14:	b2db      	uxtb	r3, r3
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d104      	bne.n	801cf24 <USBPD_DPM_EvaluateDataRoleSwap+0x60>
  {
    status = USBPD_NOTSUPPORTED;
 801cf1a:	230f      	movs	r3, #15
 801cf1c:	18fb      	adds	r3, r7, r3
 801cf1e:	2201      	movs	r2, #1
 801cf20:	701a      	strb	r2, [r3, #0]
 801cf22:	e02d      	b.n	801cf80 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 801cf24:	1dfb      	adds	r3, r7, #7
 801cf26:	781a      	ldrb	r2, [r3, #0]
 801cf28:	4b19      	ldr	r3, [pc, #100]	@ (801cf90 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801cf2a:	2154      	movs	r1, #84	@ 0x54
 801cf2c:	434a      	muls	r2, r1
 801cf2e:	5cd3      	ldrb	r3, [r2, r3]
 801cf30:	075b      	lsls	r3, r3, #29
 801cf32:	0fdb      	lsrs	r3, r3, #31
 801cf34:	b2db      	uxtb	r3, r3
 801cf36:	2b01      	cmp	r3, #1
 801cf38:	d109      	bne.n	801cf4e <USBPD_DPM_EvaluateDataRoleSwap+0x8a>
 801cf3a:	1dfb      	adds	r3, r7, #7
 801cf3c:	781a      	ldrb	r2, [r3, #0]
 801cf3e:	4b15      	ldr	r3, [pc, #84]	@ (801cf94 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801cf40:	0092      	lsls	r2, r2, #2
 801cf42:	5cd3      	ldrb	r3, [r2, r3]
 801cf44:	071b      	lsls	r3, r3, #28
 801cf46:	0fdb      	lsrs	r3, r3, #31
 801cf48:	b2db      	uxtb	r3, r3
 801cf4a:	2b00      	cmp	r3, #0
 801cf4c:	d014      	beq.n	801cf78 <USBPD_DPM_EvaluateDataRoleSwap+0xb4>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 801cf4e:	1dfb      	adds	r3, r7, #7
 801cf50:	781a      	ldrb	r2, [r3, #0]
 801cf52:	4b0f      	ldr	r3, [pc, #60]	@ (801cf90 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801cf54:	2154      	movs	r1, #84	@ 0x54
 801cf56:	434a      	muls	r2, r1
 801cf58:	5cd3      	ldrb	r3, [r2, r3]
 801cf5a:	071b      	lsls	r3, r3, #28
 801cf5c:	0fdb      	lsrs	r3, r3, #31
 801cf5e:	b2db      	uxtb	r3, r3
 801cf60:	2b01      	cmp	r3, #1
 801cf62:	d10d      	bne.n	801cf80 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
 801cf64:	1dfb      	adds	r3, r7, #7
 801cf66:	781a      	ldrb	r2, [r3, #0]
 801cf68:	4b0a      	ldr	r3, [pc, #40]	@ (801cf94 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 801cf6a:	0092      	lsls	r2, r2, #2
 801cf6c:	5cd3      	ldrb	r3, [r2, r3]
 801cf6e:	071b      	lsls	r3, r3, #28
 801cf70:	0fdb      	lsrs	r3, r3, #31
 801cf72:	b2db      	uxtb	r3, r3
 801cf74:	2b01      	cmp	r3, #1
 801cf76:	d103      	bne.n	801cf80 <USBPD_DPM_EvaluateDataRoleSwap+0xbc>
    {
      status = USBPD_ACCEPT;
 801cf78:	230f      	movs	r3, #15
 801cf7a:	18fb      	adds	r3, r7, r3
 801cf7c:	220a      	movs	r2, #10
 801cf7e:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 801cf80:	230f      	movs	r3, #15
 801cf82:	18fb      	adds	r3, r7, r3
 801cf84:	781b      	ldrb	r3, [r3, #0]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 801cf86:	0018      	movs	r0, r3
 801cf88:	46bd      	mov	sp, r7
 801cf8a:	b004      	add	sp, #16
 801cf8c:	bd80      	pop	{r7, pc}
 801cf8e:	46c0      	nop			@ (mov r8, r8)
 801cf90:	200000c8 	.word	0x200000c8
 801cf94:	200118b0 	.word	0x200118b0

0801cf98 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 801cf98:	b580      	push	{r7, lr}
 801cf9a:	b082      	sub	sp, #8
 801cf9c:	af00      	add	r7, sp, #0
 801cf9e:	0002      	movs	r2, r0
 801cfa0:	1dfb      	adds	r3, r7, #7
 801cfa2:	701a      	strb	r2, [r3, #0]
 801cfa4:	1dbb      	adds	r3, r7, #6
 801cfa6:	1c0a      	adds	r2, r1, #0
 801cfa8:	701a      	strb	r2, [r3, #0]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 801cfaa:	1dbb      	adds	r3, r7, #6
 801cfac:	781a      	ldrb	r2, [r3, #0]
 801cfae:	1dfb      	adds	r3, r7, #7
 801cfb0:	781b      	ldrb	r3, [r3, #0]
 801cfb2:	0011      	movs	r1, r2
 801cfb4:	0018      	movs	r0, r3
 801cfb6:	f7ff fde1 	bl	801cb7c <USBPD_PWR_IF_SupplyReady>
 801cfba:	0003      	movs	r3, r0
 801cfbc:	425a      	negs	r2, r3
 801cfbe:	4153      	adcs	r3, r2
 801cfc0:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 801cfc2:	0018      	movs	r0, r3
 801cfc4:	46bd      	mov	sp, r7
 801cfc6:	b002      	add	sp, #8
 801cfc8:	bd80      	pop	{r7, pc}

0801cfca <BSP_USBPD_PWR_Init>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_Init(uint32_t Instance)
{
 801cfca:	b580      	push	{r7, lr}
 801cfcc:	b084      	sub	sp, #16
 801cfce:	af00      	add	r7, sp, #0
 801cfd0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_Init */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801cfd2:	2300      	movs	r3, #0
 801cfd4:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801cfd6:	687b      	ldr	r3, [r7, #4]
 801cfd8:	2b01      	cmp	r3, #1
 801cfda:	d902      	bls.n	801cfe2 <BSP_USBPD_PWR_Init+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801cfdc:	2302      	movs	r3, #2
 801cfde:	425b      	negs	r3, r3
 801cfe0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 801cfe2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_Init */
}
 801cfe4:	0018      	movs	r0, r3
 801cfe6:	46bd      	mov	sp, r7
 801cfe8:	b004      	add	sp, #16
 801cfea:	bd80      	pop	{r7, pc}

0801cfec <BSP_USBPD_PWR_VBUSInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSInit(uint32_t Instance)
{
 801cfec:	b580      	push	{r7, lr}
 801cfee:	b084      	sub	sp, #16
 801cff0:	af00      	add	r7, sp, #0
 801cff2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801cff4:	2300      	movs	r3, #0
 801cff6:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	2b01      	cmp	r3, #1
 801cffc:	d902      	bls.n	801d004 <BSP_USBPD_PWR_VBUSInit+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801cffe:	2302      	movs	r3, #2
 801d000:	425b      	negs	r3, r3
 801d002:	60fb      	str	r3, [r7, #12]
      inside this function
    !!! */
    PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSInit");
  }

  return ret;
 801d004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSInit */
}
 801d006:	0018      	movs	r0, r3
 801d008:	46bd      	mov	sp, r7
 801d00a:	b004      	add	sp, #16
 801d00c:	bd80      	pop	{r7, pc}

0801d00e <BSP_USBPD_PWR_VBUSDeInit>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t Instance)
{
 801d00e:	b580      	push	{r7, lr}
 801d010:	b084      	sub	sp, #16
 801d012:	af00      	add	r7, sp, #0
 801d014:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSDeInit */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 801d016:	230b      	movs	r3, #11
 801d018:	425b      	negs	r3, r3
 801d01a:	60fb      	str	r3, [r7, #12]

  if (Instance >= USBPD_PWR_INSTANCES_NBR)
 801d01c:	687b      	ldr	r3, [r7, #4]
 801d01e:	2b01      	cmp	r3, #1
 801d020:	d902      	bls.n	801d028 <BSP_USBPD_PWR_VBUSDeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d022:	2302      	movs	r3, #2
 801d024:	425b      	negs	r3, r3
 801d026:	60fb      	str	r3, [r7, #12]
  /* !!!
      BSP_PWR_VBUSDeInit is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSDeInit");
  return ret;
 801d028:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSDeInit */
}
 801d02a:	0018      	movs	r0, r3
 801d02c:	46bd      	mov	sp, r7
 801d02e:	b004      	add	sp, #16
 801d030:	bd80      	pop	{r7, pc}

0801d032 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_2
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
__weak int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t Instance, uint32_t *pVoltage)
{
 801d032:	b580      	push	{r7, lr}
 801d034:	b084      	sub	sp, #16
 801d036:	af00      	add	r7, sp, #0
 801d038:	6078      	str	r0, [r7, #4]
 801d03a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN BSP_USBPD_PWR_VBUSGetVoltage */
  /* Check if instance is valid       */
  int32_t ret = BSP_ERROR_NONE;
 801d03c:	2300      	movs	r3, #0
 801d03e:	60fb      	str	r3, [r7, #12]

  if ((Instance >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	2b01      	cmp	r3, #1
 801d044:	d802      	bhi.n	801d04c <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 801d046:	683b      	ldr	r3, [r7, #0]
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d102      	bne.n	801d052 <BSP_USBPD_PWR_VBUSGetVoltage+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801d04c:	2302      	movs	r3, #2
 801d04e:	425b      	negs	r3, r3
 801d050:	60fb      	str	r3, [r7, #12]
  }
  *pVoltage = 0u;
 801d052:	683b      	ldr	r3, [r7, #0]
 801d054:	2200      	movs	r2, #0
 801d056:	601a      	str	r2, [r3, #0]
  /* !!!
      BSP_PWR_VBUSGetVoltage is obsolete. You may need to move your user code
      inside this function
   !!! */
  PWR_DEBUG_TRACE(Instance, "ADVICE: Update BSP_USBPD_PWR_VBUSGetVoltage");
  return ret;
 801d058:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE END BSP_USBPD_PWR_VBUSGetVoltage */
}
 801d05a:	0018      	movs	r0, r3
 801d05c:	46bd      	mov	sp, r7
 801d05e:	b004      	add	sp, #16
 801d060:	bd80      	pop	{r7, pc}

0801d062 <MX_USBX_Device_Init>:
  * @brief  Application USBX Device Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT MX_USBX_Device_Init(VOID *memory_ptr)
{
 801d062:	b580      	push	{r7, lr}
 801d064:	b084      	sub	sp, #16
 801d066:	af00      	add	r7, sp, #0
 801d068:	6078      	str	r0, [r7, #4]
  UINT ret = UX_SUCCESS;
 801d06a:	2300      	movs	r3, #0
 801d06c:	60fb      	str	r3, [r7, #12]
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN MX_USBX_Device_MEM_POOL */
  (void)byte_pool;
  /* USER CODE END MX_USBX_Device_MEM_POOL */

  /* USER CODE BEGIN MX_USBX_Device_Init */
usb_init(memory_ptr);
 801d072:	687b      	ldr	r3, [r7, #4]
 801d074:	0018      	movs	r0, r3
 801d076:	f7e9 fd31 	bl	8006adc <usb_init>
/* USER CODE END MX_USBX_Device_Init */

  return ret;
 801d07a:	68fb      	ldr	r3, [r7, #12]
}
 801d07c:	0018      	movs	r0, r3
 801d07e:	46bd      	mov	sp, r7
 801d080:	b004      	add	sp, #16
 801d082:	bd80      	pop	{r7, pc}

0801d084 <USBD_Get_Device_Framework_Speed>:
 * @param  Speed : HIGH or FULL SPEED flag
 * @param  length : length of HIGH or FULL SPEED array
 * @retval Pointer to descriptor buffer
 */
uint8_t *USBD_Get_Device_Framework_Speed(uint8_t Speed, ULONG *Length)
{
 801d084:	b580      	push	{r7, lr}
 801d086:	b084      	sub	sp, #16
 801d088:	af00      	add	r7, sp, #0
 801d08a:	0002      	movs	r2, r0
 801d08c:	6039      	str	r1, [r7, #0]
 801d08e:	1dfb      	adds	r3, r7, #7
 801d090:	701a      	strb	r2, [r3, #0]
	uint8_t *pFrameWork = NULL;
 801d092:	2300      	movs	r3, #0
 801d094:	60fb      	str	r3, [r7, #12]
	/* USER CODE BEGIN Device_Framework0 */

	/* USER TAG BEGIN Device_Framework0 */

	if (USBD_FULL_SPEED == Speed)
 801d096:	1dfb      	adds	r3, r7, #7
 801d098:	781b      	ldrb	r3, [r3, #0]
 801d09a:	2b00      	cmp	r3, #0
 801d09c:	d116      	bne.n	801d0cc <USBD_Get_Device_Framework_Speed+0x48>
	{
		USBD_Device_Framework_Builder(&USBD_Device_FS, pDevFrameWorkDesc_FS,
 801d09e:	4b19      	ldr	r3, [pc, #100]	@ (801d104 <USBD_Get_Device_Framework_Speed+0x80>)
 801d0a0:	6819      	ldr	r1, [r3, #0]
 801d0a2:	1dfb      	adds	r3, r7, #7
 801d0a4:	781b      	ldrb	r3, [r3, #0]
 801d0a6:	4a18      	ldr	r2, [pc, #96]	@ (801d108 <USBD_Get_Device_Framework_Speed+0x84>)
 801d0a8:	4818      	ldr	r0, [pc, #96]	@ (801d10c <USBD_Get_Device_Framework_Speed+0x88>)
 801d0aa:	f000 f9fd 	bl	801d4a8 <USBD_Device_Framework_Builder>
				UserClassInstance, Speed);

		/* Get the length of USBD_device_framework_full_speed */
		*Length = (ULONG)(USBD_Device_FS.CurrDevDescSz + USBD_Device_FS.CurrConfDescSz);
 801d0ae:	4a17      	ldr	r2, [pc, #92]	@ (801d10c <USBD_Get_Device_Framework_Speed+0x88>)
 801d0b0:	2390      	movs	r3, #144	@ 0x90
 801d0b2:	005b      	lsls	r3, r3, #1
 801d0b4:	58d2      	ldr	r2, [r2, r3]
 801d0b6:	4915      	ldr	r1, [pc, #84]	@ (801d10c <USBD_Get_Device_Framework_Speed+0x88>)
 801d0b8:	2392      	movs	r3, #146	@ 0x92
 801d0ba:	005b      	lsls	r3, r3, #1
 801d0bc:	58cb      	ldr	r3, [r1, r3]
 801d0be:	18d2      	adds	r2, r2, r3
 801d0c0:	683b      	ldr	r3, [r7, #0]
 801d0c2:	601a      	str	r2, [r3, #0]

		pFrameWork = pDevFrameWorkDesc_FS;
 801d0c4:	4b0f      	ldr	r3, [pc, #60]	@ (801d104 <USBD_Get_Device_Framework_Speed+0x80>)
 801d0c6:	681b      	ldr	r3, [r3, #0]
 801d0c8:	60fb      	str	r3, [r7, #12]
 801d0ca:	e015      	b.n	801d0f8 <USBD_Get_Device_Framework_Speed+0x74>
	}
	else
	{
		USBD_Device_Framework_Builder(&USBD_Device_HS, pDevFrameWorkDesc_HS,
 801d0cc:	4b10      	ldr	r3, [pc, #64]	@ (801d110 <USBD_Get_Device_Framework_Speed+0x8c>)
 801d0ce:	6819      	ldr	r1, [r3, #0]
 801d0d0:	1dfb      	adds	r3, r7, #7
 801d0d2:	781b      	ldrb	r3, [r3, #0]
 801d0d4:	4a0c      	ldr	r2, [pc, #48]	@ (801d108 <USBD_Get_Device_Framework_Speed+0x84>)
 801d0d6:	480f      	ldr	r0, [pc, #60]	@ (801d114 <USBD_Get_Device_Framework_Speed+0x90>)
 801d0d8:	f000 f9e6 	bl	801d4a8 <USBD_Device_Framework_Builder>
				UserClassInstance, Speed);

		/* Get the length of USBD_device_framework_high_speed */
		*Length = (ULONG)(USBD_Device_HS.CurrDevDescSz + USBD_Device_HS.CurrConfDescSz);
 801d0dc:	4a0d      	ldr	r2, [pc, #52]	@ (801d114 <USBD_Get_Device_Framework_Speed+0x90>)
 801d0de:	2390      	movs	r3, #144	@ 0x90
 801d0e0:	005b      	lsls	r3, r3, #1
 801d0e2:	58d2      	ldr	r2, [r2, r3]
 801d0e4:	490b      	ldr	r1, [pc, #44]	@ (801d114 <USBD_Get_Device_Framework_Speed+0x90>)
 801d0e6:	2392      	movs	r3, #146	@ 0x92
 801d0e8:	005b      	lsls	r3, r3, #1
 801d0ea:	58cb      	ldr	r3, [r1, r3]
 801d0ec:	18d2      	adds	r2, r2, r3
 801d0ee:	683b      	ldr	r3, [r7, #0]
 801d0f0:	601a      	str	r2, [r3, #0]

		pFrameWork = pDevFrameWorkDesc_HS;
 801d0f2:	4b07      	ldr	r3, [pc, #28]	@ (801d110 <USBD_Get_Device_Framework_Speed+0x8c>)
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	60fb      	str	r3, [r7, #12]
	}
	/* USER CODE Device_Framework1 */

	/* USER CODE Device_Framework1 */
	return pFrameWork;
 801d0f8:	68fb      	ldr	r3, [r7, #12]
}
 801d0fa:	0018      	movs	r0, r3
 801d0fc:	46bd      	mov	sp, r7
 801d0fe:	b004      	add	sp, #16
 801d100:	bd80      	pop	{r7, pc}
 801d102:	46c0      	nop			@ (mov r8, r8)
 801d104:	200001f0 	.word	0x200001f0
 801d108:	200001e0 	.word	0x200001e0
 801d10c:	200118b8 	.word	0x200118b8
 801d110:	200001f4 	.word	0x200001f4
 801d114:	200119e0 	.word	0x200119e0

0801d118 <USBD_Get_String_Framework>:
 *         Return the language_id_framework
 * @param  Length : Length of String_Framework
 * @retval Pointer to language_id_framework buffer
 */
uint8_t *USBD_Get_String_Framework(ULONG *Length)
{
 801d118:	b5b0      	push	{r4, r5, r7, lr}
 801d11a:	b084      	sub	sp, #16
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	6078      	str	r0, [r7, #4]
	uint16_t len = 0U;
 801d120:	250c      	movs	r5, #12
 801d122:	197b      	adds	r3, r7, r5
 801d124:	2200      	movs	r2, #0
 801d126:	801a      	strh	r2, [r3, #0]
	uint8_t count = 0U;
 801d128:	240f      	movs	r4, #15
 801d12a:	193b      	adds	r3, r7, r4
 801d12c:	2200      	movs	r2, #0
 801d12e:	701a      	strb	r2, [r3, #0]
	/* USER CODE String_Framework0 */

	/* USER CODE String_Framework0 */

	/* Set the Manufacturer language Id and index in USBD_string_framework */
	USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801d130:	193b      	adds	r3, r7, r4
 801d132:	781b      	ldrb	r3, [r3, #0]
 801d134:	193a      	adds	r2, r7, r4
 801d136:	1c59      	adds	r1, r3, #1
 801d138:	7011      	strb	r1, [r2, #0]
 801d13a:	001a      	movs	r2, r3
 801d13c:	4b43      	ldr	r3, [pc, #268]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d13e:	2109      	movs	r1, #9
 801d140:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801d142:	193b      	adds	r3, r7, r4
 801d144:	781b      	ldrb	r3, [r3, #0]
 801d146:	193a      	adds	r2, r7, r4
 801d148:	1c59      	adds	r1, r3, #1
 801d14a:	7011      	strb	r1, [r2, #0]
 801d14c:	001a      	movs	r2, r3
 801d14e:	4b3f      	ldr	r3, [pc, #252]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d150:	2104      	movs	r1, #4
 801d152:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_IDX_MFC_STR;
 801d154:	193b      	adds	r3, r7, r4
 801d156:	781b      	ldrb	r3, [r3, #0]
 801d158:	193a      	adds	r2, r7, r4
 801d15a:	1c59      	adds	r1, r3, #1
 801d15c:	7011      	strb	r1, [r2, #0]
 801d15e:	001a      	movs	r2, r3
 801d160:	4b3a      	ldr	r3, [pc, #232]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d162:	2101      	movs	r1, #1
 801d164:	5499      	strb	r1, [r3, r2]

	/* Set the Manufacturer string in string_framework */
	USBD_Desc_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_string_framework + count, &len);
 801d166:	193b      	adds	r3, r7, r4
 801d168:	781a      	ldrb	r2, [r3, #0]
 801d16a:	4b38      	ldr	r3, [pc, #224]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d16c:	18d1      	adds	r1, r2, r3
 801d16e:	197a      	adds	r2, r7, r5
 801d170:	4b37      	ldr	r3, [pc, #220]	@ (801d250 <USBD_Get_String_Framework+0x138>)
 801d172:	0018      	movs	r0, r3
 801d174:	f000 f93d 	bl	801d3f2 <USBD_Desc_GetString>

	/* Set the Product language Id and index in USBD_string_framework */
	count += len + 1;
 801d178:	197b      	adds	r3, r7, r5
 801d17a:	881b      	ldrh	r3, [r3, #0]
 801d17c:	b2da      	uxtb	r2, r3
 801d17e:	193b      	adds	r3, r7, r4
 801d180:	781b      	ldrb	r3, [r3, #0]
 801d182:	18d3      	adds	r3, r2, r3
 801d184:	b2da      	uxtb	r2, r3
 801d186:	193b      	adds	r3, r7, r4
 801d188:	3201      	adds	r2, #1
 801d18a:	701a      	strb	r2, [r3, #0]
	USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801d18c:	193b      	adds	r3, r7, r4
 801d18e:	781b      	ldrb	r3, [r3, #0]
 801d190:	193a      	adds	r2, r7, r4
 801d192:	1c59      	adds	r1, r3, #1
 801d194:	7011      	strb	r1, [r2, #0]
 801d196:	001a      	movs	r2, r3
 801d198:	4b2c      	ldr	r3, [pc, #176]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d19a:	2109      	movs	r1, #9
 801d19c:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801d19e:	193b      	adds	r3, r7, r4
 801d1a0:	781b      	ldrb	r3, [r3, #0]
 801d1a2:	193a      	adds	r2, r7, r4
 801d1a4:	1c59      	adds	r1, r3, #1
 801d1a6:	7011      	strb	r1, [r2, #0]
 801d1a8:	001a      	movs	r2, r3
 801d1aa:	4b28      	ldr	r3, [pc, #160]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d1ac:	2104      	movs	r1, #4
 801d1ae:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_IDX_PRODUCT_STR;
 801d1b0:	193b      	adds	r3, r7, r4
 801d1b2:	781b      	ldrb	r3, [r3, #0]
 801d1b4:	193a      	adds	r2, r7, r4
 801d1b6:	1c59      	adds	r1, r3, #1
 801d1b8:	7011      	strb	r1, [r2, #0]
 801d1ba:	001a      	movs	r2, r3
 801d1bc:	4b23      	ldr	r3, [pc, #140]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d1be:	2102      	movs	r1, #2
 801d1c0:	5499      	strb	r1, [r3, r2]

	/* Set the Product string in USBD_string_framework */
	USBD_Desc_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_string_framework + count, &len);
 801d1c2:	193b      	adds	r3, r7, r4
 801d1c4:	781a      	ldrb	r2, [r3, #0]
 801d1c6:	4b21      	ldr	r3, [pc, #132]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d1c8:	18d1      	adds	r1, r2, r3
 801d1ca:	197a      	adds	r2, r7, r5
 801d1cc:	4b21      	ldr	r3, [pc, #132]	@ (801d254 <USBD_Get_String_Framework+0x13c>)
 801d1ce:	0018      	movs	r0, r3
 801d1d0:	f000 f90f 	bl	801d3f2 <USBD_Desc_GetString>

	/* Set Serial language Id and index in string_framework */
	count += len + 1;
 801d1d4:	197b      	adds	r3, r7, r5
 801d1d6:	881b      	ldrh	r3, [r3, #0]
 801d1d8:	b2da      	uxtb	r2, r3
 801d1da:	193b      	adds	r3, r7, r4
 801d1dc:	781b      	ldrb	r3, [r3, #0]
 801d1de:	18d3      	adds	r3, r2, r3
 801d1e0:	b2da      	uxtb	r2, r3
 801d1e2:	193b      	adds	r3, r7, r4
 801d1e4:	3201      	adds	r2, #1
 801d1e6:	701a      	strb	r2, [r3, #0]
	USBD_string_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801d1e8:	193b      	adds	r3, r7, r4
 801d1ea:	781b      	ldrb	r3, [r3, #0]
 801d1ec:	0020      	movs	r0, r4
 801d1ee:	193a      	adds	r2, r7, r4
 801d1f0:	1c59      	adds	r1, r3, #1
 801d1f2:	7011      	strb	r1, [r2, #0]
 801d1f4:	001a      	movs	r2, r3
 801d1f6:	4b15      	ldr	r3, [pc, #84]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d1f8:	2109      	movs	r1, #9
 801d1fa:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_LANGID_STRING >> 8;
 801d1fc:	183b      	adds	r3, r7, r0
 801d1fe:	781b      	ldrb	r3, [r3, #0]
 801d200:	183a      	adds	r2, r7, r0
 801d202:	1c59      	adds	r1, r3, #1
 801d204:	7011      	strb	r1, [r2, #0]
 801d206:	001a      	movs	r2, r3
 801d208:	4b10      	ldr	r3, [pc, #64]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d20a:	2104      	movs	r1, #4
 801d20c:	5499      	strb	r1, [r3, r2]
	USBD_string_framework[count++] = USBD_IDX_SERIAL_STR;
 801d20e:	183b      	adds	r3, r7, r0
 801d210:	781b      	ldrb	r3, [r3, #0]
 801d212:	183a      	adds	r2, r7, r0
 801d214:	1c59      	adds	r1, r3, #1
 801d216:	7011      	strb	r1, [r2, #0]
 801d218:	001a      	movs	r2, r3
 801d21a:	4b0c      	ldr	r3, [pc, #48]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d21c:	2103      	movs	r1, #3
 801d21e:	5499      	strb	r1, [r3, r2]

	/* Set the Serial number in USBD_string_framework */
	USBD_Desc_GetString((uint8_t *)USBD_SERIAL_NUMBER, USBD_string_framework + count, &len);
 801d220:	183b      	adds	r3, r7, r0
 801d222:	781a      	ldrb	r2, [r3, #0]
 801d224:	4b09      	ldr	r3, [pc, #36]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d226:	18d1      	adds	r1, r2, r3
 801d228:	197a      	adds	r2, r7, r5
 801d22a:	4b0b      	ldr	r3, [pc, #44]	@ (801d258 <USBD_Get_String_Framework+0x140>)
 801d22c:	0018      	movs	r0, r3
 801d22e:	f000 f8e0 	bl	801d3f2 <USBD_Desc_GetString>
	/* USER CODE String_Framework1 */

	/* USER CODE String_Framework1 */

	/* Get the length of USBD_string_framework */
	*Length = strlen((const char *)USBD_string_framework);
 801d232:	4b06      	ldr	r3, [pc, #24]	@ (801d24c <USBD_Get_String_Framework+0x134>)
 801d234:	0018      	movs	r0, r3
 801d236:	f7e9 f8fd 	bl	8006434 <strlen>
 801d23a:	0002      	movs	r2, r0
 801d23c:	687b      	ldr	r3, [r7, #4]
 801d23e:	601a      	str	r2, [r3, #0]

	return USBD_string_framework;
 801d240:	4b02      	ldr	r3, [pc, #8]	@ (801d24c <USBD_Get_String_Framework+0x134>)
}
 801d242:	0018      	movs	r0, r3
 801d244:	46bd      	mov	sp, r7
 801d246:	b004      	add	sp, #16
 801d248:	bdb0      	pop	{r4, r5, r7, pc}
 801d24a:	46c0      	nop			@ (mov r8, r8)
 801d24c:	20011c98 	.word	0x20011c98
 801d250:	0801e3bc 	.word	0x0801e3bc
 801d254:	0801e3d0 	.word	0x0801e3d0
 801d258:	0801e3e8 	.word	0x0801e3e8

0801d25c <USBD_Get_Language_Id_Framework>:
 *         Return the language_id_framework
 * @param  Length : Length of Language_Id_Framework
 * @retval Pointer to language_id_framework buffer
 */
uint8_t *USBD_Get_Language_Id_Framework(ULONG *Length)
{
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b084      	sub	sp, #16
 801d260:	af00      	add	r7, sp, #0
 801d262:	6078      	str	r0, [r7, #4]
	uint8_t count = 0U;
 801d264:	200f      	movs	r0, #15
 801d266:	183b      	adds	r3, r7, r0
 801d268:	2200      	movs	r2, #0
 801d26a:	701a      	strb	r2, [r3, #0]

	/* Set the language Id in USBD_language_id_framework */
	USBD_language_id_framework[count++] = USBD_LANGID_STRING & 0xFF;
 801d26c:	183b      	adds	r3, r7, r0
 801d26e:	781b      	ldrb	r3, [r3, #0]
 801d270:	183a      	adds	r2, r7, r0
 801d272:	1c59      	adds	r1, r3, #1
 801d274:	7011      	strb	r1, [r2, #0]
 801d276:	001a      	movs	r2, r3
 801d278:	4b0b      	ldr	r3, [pc, #44]	@ (801d2a8 <USBD_Get_Language_Id_Framework+0x4c>)
 801d27a:	2109      	movs	r1, #9
 801d27c:	5499      	strb	r1, [r3, r2]
	USBD_language_id_framework[count++] = USBD_LANGID_STRING >> 8;
 801d27e:	183b      	adds	r3, r7, r0
 801d280:	781b      	ldrb	r3, [r3, #0]
 801d282:	183a      	adds	r2, r7, r0
 801d284:	1c59      	adds	r1, r3, #1
 801d286:	7011      	strb	r1, [r2, #0]
 801d288:	001a      	movs	r2, r3
 801d28a:	4b07      	ldr	r3, [pc, #28]	@ (801d2a8 <USBD_Get_Language_Id_Framework+0x4c>)
 801d28c:	2104      	movs	r1, #4
 801d28e:	5499      	strb	r1, [r3, r2]

	/* Get the length of USBD_language_id_framework */
	*Length = strlen((const char *)USBD_language_id_framework);
 801d290:	4b05      	ldr	r3, [pc, #20]	@ (801d2a8 <USBD_Get_Language_Id_Framework+0x4c>)
 801d292:	0018      	movs	r0, r3
 801d294:	f7e9 f8ce 	bl	8006434 <strlen>
 801d298:	0002      	movs	r2, r0
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	601a      	str	r2, [r3, #0]

	return USBD_language_id_framework;
 801d29e:	4b02      	ldr	r3, [pc, #8]	@ (801d2a8 <USBD_Get_Language_Id_Framework+0x4c>)
}
 801d2a0:	0018      	movs	r0, r3
 801d2a2:	46bd      	mov	sp, r7
 801d2a4:	b004      	add	sp, #16
 801d2a6:	bd80      	pop	{r7, pc}
 801d2a8:	20011d98 	.word	0x20011d98

0801d2ac <USBD_Get_Interface_Number>:
 * @param  class_type : Device class type
 * @param  interface_type : Device interface type
 * @retval interface number
 */
uint16_t USBD_Get_Interface_Number(uint8_t class_type, uint8_t interface_type)
{
 801d2ac:	b590      	push	{r4, r7, lr}
 801d2ae:	b085      	sub	sp, #20
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	0002      	movs	r2, r0
 801d2b4:	1dfb      	adds	r3, r7, #7
 801d2b6:	701a      	strb	r2, [r3, #0]
 801d2b8:	1dbb      	adds	r3, r7, #6
 801d2ba:	1c0a      	adds	r2, r1, #0
 801d2bc:	701a      	strb	r2, [r3, #0]
	uint8_t itf_num = 0U;
 801d2be:	230f      	movs	r3, #15
 801d2c0:	18fb      	adds	r3, r7, r3
 801d2c2:	2200      	movs	r2, #0
 801d2c4:	701a      	strb	r2, [r3, #0]
	uint8_t idx = 0U;
 801d2c6:	210e      	movs	r1, #14
 801d2c8:	187b      	adds	r3, r7, r1
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	701a      	strb	r2, [r3, #0]

	/* USER CODE BEGIN USBD_Get_Interface_Number0 */

	/* USER CODE BEGIN USBD_Get_Interface_Number0 */

	for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 801d2ce:	187b      	adds	r3, r7, r1
 801d2d0:	2200      	movs	r2, #0
 801d2d2:	701a      	strb	r2, [r3, #0]
 801d2d4:	e02a      	b.n	801d32c <USBD_Get_Interface_Number+0x80>
	{
		if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 801d2d6:	200e      	movs	r0, #14
 801d2d8:	183b      	adds	r3, r7, r0
 801d2da:	781b      	ldrb	r3, [r3, #0]
 801d2dc:	4a1a      	ldr	r2, [pc, #104]	@ (801d348 <USBD_Get_Interface_Number+0x9c>)
 801d2de:	215c      	movs	r1, #92	@ 0x5c
 801d2e0:	434b      	muls	r3, r1
 801d2e2:	18d3      	adds	r3, r2, r3
 801d2e4:	330c      	adds	r3, #12
 801d2e6:	781b      	ldrb	r3, [r3, #0]
 801d2e8:	1dfa      	adds	r2, r7, #7
 801d2ea:	7812      	ldrb	r2, [r2, #0]
 801d2ec:	429a      	cmp	r2, r3
 801d2ee:	d117      	bne.n	801d320 <USBD_Get_Interface_Number+0x74>
				(USBD_Device_FS.tclasslist[idx].InterfaceType == interface_type))
 801d2f0:	183b      	adds	r3, r7, r0
 801d2f2:	781b      	ldrb	r3, [r3, #0]
 801d2f4:	4a14      	ldr	r2, [pc, #80]	@ (801d348 <USBD_Get_Interface_Number+0x9c>)
 801d2f6:	215c      	movs	r1, #92	@ 0x5c
 801d2f8:	434b      	muls	r3, r1
 801d2fa:	18d3      	adds	r3, r2, r3
 801d2fc:	3314      	adds	r3, #20
 801d2fe:	781b      	ldrb	r3, [r3, #0]
		if ((USBD_Device_FS.tclasslist[idx].ClassType == class_type) &&
 801d300:	1dba      	adds	r2, r7, #6
 801d302:	7812      	ldrb	r2, [r2, #0]
 801d304:	429a      	cmp	r2, r3
 801d306:	d10b      	bne.n	801d320 <USBD_Get_Interface_Number+0x74>
		{
			itf_num = USBD_Device_FS.tclasslist[idx].Ifs[0];
 801d308:	183b      	adds	r3, r7, r0
 801d30a:	781a      	ldrb	r2, [r3, #0]
 801d30c:	230f      	movs	r3, #15
 801d30e:	18fb      	adds	r3, r7, r3
 801d310:	490d      	ldr	r1, [pc, #52]	@ (801d348 <USBD_Get_Interface_Number+0x9c>)
 801d312:	205a      	movs	r0, #90	@ 0x5a
 801d314:	245c      	movs	r4, #92	@ 0x5c
 801d316:	4362      	muls	r2, r4
 801d318:	188a      	adds	r2, r1, r2
 801d31a:	1812      	adds	r2, r2, r0
 801d31c:	7812      	ldrb	r2, [r2, #0]
 801d31e:	701a      	strb	r2, [r3, #0]
	for(idx = 0; idx < USBD_MAX_SUPPORTED_CLASS; idx++)
 801d320:	210e      	movs	r1, #14
 801d322:	187b      	adds	r3, r7, r1
 801d324:	781a      	ldrb	r2, [r3, #0]
 801d326:	187b      	adds	r3, r7, r1
 801d328:	3201      	adds	r2, #1
 801d32a:	701a      	strb	r2, [r3, #0]
 801d32c:	230e      	movs	r3, #14
 801d32e:	18fb      	adds	r3, r7, r3
 801d330:	781b      	ldrb	r3, [r3, #0]
 801d332:	2b02      	cmp	r3, #2
 801d334:	d9cf      	bls.n	801d2d6 <USBD_Get_Interface_Number+0x2a>

	/* USER CODE BEGIN USBD_Get_Interface_Number1 */

	/* USER CODE BEGIN USBD_Get_Interface_Number1 */

	return itf_num;
 801d336:	230f      	movs	r3, #15
 801d338:	18fb      	adds	r3, r7, r3
 801d33a:	781b      	ldrb	r3, [r3, #0]
 801d33c:	b29b      	uxth	r3, r3
}
 801d33e:	0018      	movs	r0, r3
 801d340:	46bd      	mov	sp, r7
 801d342:	b005      	add	sp, #20
 801d344:	bd90      	pop	{r4, r7, pc}
 801d346:	46c0      	nop			@ (mov r8, r8)
 801d348:	200118b8 	.word	0x200118b8

0801d34c <USBD_Get_Configuration_Number>:
 * @param  class_type : Device class type
 * @param  interface_type : Device interface type
 * @retval configuration number
 */
uint16_t USBD_Get_Configuration_Number(uint8_t class_type, uint8_t interface_type)
{
 801d34c:	b580      	push	{r7, lr}
 801d34e:	b084      	sub	sp, #16
 801d350:	af00      	add	r7, sp, #0
 801d352:	0002      	movs	r2, r0
 801d354:	1dfb      	adds	r3, r7, #7
 801d356:	701a      	strb	r2, [r3, #0]
 801d358:	1dbb      	adds	r3, r7, #6
 801d35a:	1c0a      	adds	r2, r1, #0
 801d35c:	701a      	strb	r2, [r3, #0]
	uint8_t cfg_num = 1U;
 801d35e:	210f      	movs	r1, #15
 801d360:	187b      	adds	r3, r7, r1
 801d362:	2201      	movs	r2, #1
 801d364:	701a      	strb	r2, [r3, #0]

	/* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

	/* USER CODE BEGIN USBD_Get_CONFIGURATION_Number1 */

	return cfg_num;
 801d366:	187b      	adds	r3, r7, r1
 801d368:	781b      	ldrb	r3, [r3, #0]
 801d36a:	b29b      	uxth	r3, r3
}
 801d36c:	0018      	movs	r0, r3
 801d36e:	46bd      	mov	sp, r7
 801d370:	b004      	add	sp, #16
 801d372:	bd80      	pop	{r7, pc}

0801d374 <USBD_HID_ReportDesc>:
 *         Return the device HID Report Descriptor
 * @param  hid_type : HID Device type
 * @retval Pointer to HID Report Descriptor buffer
 */
uint8_t *USBD_HID_ReportDesc(uint8_t hid_type)
{
 801d374:	b580      	push	{r7, lr}
 801d376:	b084      	sub	sp, #16
 801d378:	af00      	add	r7, sp, #0
 801d37a:	0002      	movs	r2, r0
 801d37c:	1dfb      	adds	r3, r7, #7
 801d37e:	701a      	strb	r2, [r3, #0]
	uint8_t *pHidReportDesc = NULL;
 801d380:	2300      	movs	r3, #0
 801d382:	60fb      	str	r3, [r7, #12]

	/* USER CODE HidReportDesc0 */

	/* USER CODE HidReportDesc0 */

	switch(hid_type)
 801d384:	1dfb      	adds	r3, r7, #7
 801d386:	781b      	ldrb	r3, [r3, #0]
 801d388:	2b01      	cmp	r3, #1
 801d38a:	d004      	beq.n	801d396 <USBD_HID_ReportDesc+0x22>
 801d38c:	2b02      	cmp	r3, #2
 801d38e:	d105      	bne.n	801d39c <USBD_HID_ReportDesc+0x28>
	{
	case INTERFACE_HID_MOUSE:
		pHidReportDesc = USBD_HID_MOUSE_ReportDesc;
 801d390:	4b05      	ldr	r3, [pc, #20]	@ (801d3a8 <USBD_HID_ReportDesc+0x34>)
 801d392:	60fb      	str	r3, [r7, #12]
		break;
 801d394:	e003      	b.n	801d39e <USBD_HID_ReportDesc+0x2a>

	case INTERFACE_HID_KEYBOARD:
		pHidReportDesc = USBD_HID_KEYBOARD_ReportDesc;
 801d396:	4b05      	ldr	r3, [pc, #20]	@ (801d3ac <USBD_HID_ReportDesc+0x38>)
 801d398:	60fb      	str	r3, [r7, #12]
		break;
 801d39a:	e000      	b.n	801d39e <USBD_HID_ReportDesc+0x2a>

	default:
		break;
 801d39c:	46c0      	nop			@ (mov r8, r8)

	/* USER CODE HidReportDesc1 */

	/* USER CODE HidReportDesc1 */

	return pHidReportDesc;
 801d39e:	68fb      	ldr	r3, [r7, #12]
}
 801d3a0:	0018      	movs	r0, r3
 801d3a2:	46bd      	mov	sp, r7
 801d3a4:	b004      	add	sp, #16
 801d3a6:	bd80      	pop	{r7, pc}
 801d3a8:	200001f8 	.word	0x200001f8
 801d3ac:	20000244 	.word	0x20000244

0801d3b0 <USBD_HID_ReportDesc_length>:
 *         Return the device HID Report Descriptor
 * @param  hid_type : HID Device type
 * @retval Size of HID Report Descriptor buffer
 */
uint16_t USBD_HID_ReportDesc_length(uint8_t hid_type)
{
 801d3b0:	b580      	push	{r7, lr}
 801d3b2:	b084      	sub	sp, #16
 801d3b4:	af00      	add	r7, sp, #0
 801d3b6:	0002      	movs	r2, r0
 801d3b8:	1dfb      	adds	r3, r7, #7
 801d3ba:	701a      	strb	r2, [r3, #0]
	uint16_t ReportDesc_Size = 0;
 801d3bc:	210e      	movs	r1, #14
 801d3be:	187b      	adds	r3, r7, r1
 801d3c0:	2200      	movs	r2, #0
 801d3c2:	801a      	strh	r2, [r3, #0]

	/* USER CODE ReportDesc_Size0 */

	/* USER CODE ReportDesc_Size0 */

	switch(hid_type)
 801d3c4:	1dfb      	adds	r3, r7, #7
 801d3c6:	781b      	ldrb	r3, [r3, #0]
 801d3c8:	2b01      	cmp	r3, #1
 801d3ca:	d005      	beq.n	801d3d8 <USBD_HID_ReportDesc_length+0x28>
 801d3cc:	2b02      	cmp	r3, #2
 801d3ce:	d108      	bne.n	801d3e2 <USBD_HID_ReportDesc_length+0x32>
	{
	case INTERFACE_HID_MOUSE:
		ReportDesc_Size = sizeof(USBD_HID_MOUSE_ReportDesc);
 801d3d0:	187b      	adds	r3, r7, r1
 801d3d2:	224a      	movs	r2, #74	@ 0x4a
 801d3d4:	801a      	strh	r2, [r3, #0]
		break;
 801d3d6:	e005      	b.n	801d3e4 <USBD_HID_ReportDesc_length+0x34>

	case INTERFACE_HID_KEYBOARD:
		ReportDesc_Size = sizeof(USBD_HID_KEYBOARD_ReportDesc);
 801d3d8:	230e      	movs	r3, #14
 801d3da:	18fb      	adds	r3, r7, r3
 801d3dc:	222d      	movs	r2, #45	@ 0x2d
 801d3de:	801a      	strh	r2, [r3, #0]
		break;
 801d3e0:	e000      	b.n	801d3e4 <USBD_HID_ReportDesc_length+0x34>

	default:
		break;
 801d3e2:	46c0      	nop			@ (mov r8, r8)

	/* USER CODE ReportDesc_Size1 */

	/* USER CODE ReportDesc_Size1 */

	return ReportDesc_Size;
 801d3e4:	230e      	movs	r3, #14
 801d3e6:	18fb      	adds	r3, r7, r3
 801d3e8:	881b      	ldrh	r3, [r3, #0]
}
 801d3ea:	0018      	movs	r0, r3
 801d3ec:	46bd      	mov	sp, r7
 801d3ee:	b004      	add	sp, #16
 801d3f0:	bd80      	pop	{r7, pc}

0801d3f2 <USBD_Desc_GetString>:
 * @param  Unicode : Formatted string buffer (Unicode)
 * @param  len : descriptor length
 * @retval None
 */
static void USBD_Desc_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d3f2:	b590      	push	{r4, r7, lr}
 801d3f4:	b087      	sub	sp, #28
 801d3f6:	af00      	add	r7, sp, #0
 801d3f8:	60f8      	str	r0, [r7, #12]
 801d3fa:	60b9      	str	r1, [r7, #8]
 801d3fc:	607a      	str	r2, [r7, #4]
	uint8_t idx = 0U;
 801d3fe:	2417      	movs	r4, #23
 801d400:	193b      	adds	r3, r7, r4
 801d402:	2200      	movs	r2, #0
 801d404:	701a      	strb	r2, [r3, #0]
	uint8_t *pdesc;

	if (desc == NULL)
 801d406:	68fb      	ldr	r3, [r7, #12]
 801d408:	2b00      	cmp	r3, #0
 801d40a:	d029      	beq.n	801d460 <USBD_Desc_GetString+0x6e>
	{
		return;
	}

	pdesc = desc;
 801d40c:	68fb      	ldr	r3, [r7, #12]
 801d40e:	613b      	str	r3, [r7, #16]
	*len = (uint16_t)USBD_Desc_GetLen(pdesc);
 801d410:	693b      	ldr	r3, [r7, #16]
 801d412:	0018      	movs	r0, r3
 801d414:	f000 f828 	bl	801d468 <USBD_Desc_GetLen>
 801d418:	0003      	movs	r3, r0
 801d41a:	001a      	movs	r2, r3
 801d41c:	687b      	ldr	r3, [r7, #4]
 801d41e:	801a      	strh	r2, [r3, #0]

	unicode[idx++] = *(uint8_t *)len;
 801d420:	193b      	adds	r3, r7, r4
 801d422:	781b      	ldrb	r3, [r3, #0]
 801d424:	193a      	adds	r2, r7, r4
 801d426:	1c59      	adds	r1, r3, #1
 801d428:	7011      	strb	r1, [r2, #0]
 801d42a:	001a      	movs	r2, r3
 801d42c:	68bb      	ldr	r3, [r7, #8]
 801d42e:	189b      	adds	r3, r3, r2
 801d430:	687a      	ldr	r2, [r7, #4]
 801d432:	7812      	ldrb	r2, [r2, #0]
 801d434:	701a      	strb	r2, [r3, #0]

	while (*pdesc != (uint8_t)'\0')
 801d436:	e00e      	b.n	801d456 <USBD_Desc_GetString+0x64>
	{
		unicode[idx++] = *pdesc;
 801d438:	2217      	movs	r2, #23
 801d43a:	18bb      	adds	r3, r7, r2
 801d43c:	781b      	ldrb	r3, [r3, #0]
 801d43e:	18ba      	adds	r2, r7, r2
 801d440:	1c59      	adds	r1, r3, #1
 801d442:	7011      	strb	r1, [r2, #0]
 801d444:	001a      	movs	r2, r3
 801d446:	68bb      	ldr	r3, [r7, #8]
 801d448:	189b      	adds	r3, r3, r2
 801d44a:	693a      	ldr	r2, [r7, #16]
 801d44c:	7812      	ldrb	r2, [r2, #0]
 801d44e:	701a      	strb	r2, [r3, #0]
		pdesc++;
 801d450:	693b      	ldr	r3, [r7, #16]
 801d452:	3301      	adds	r3, #1
 801d454:	613b      	str	r3, [r7, #16]
	while (*pdesc != (uint8_t)'\0')
 801d456:	693b      	ldr	r3, [r7, #16]
 801d458:	781b      	ldrb	r3, [r3, #0]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d1ec      	bne.n	801d438 <USBD_Desc_GetString+0x46>
 801d45e:	e000      	b.n	801d462 <USBD_Desc_GetString+0x70>
		return;
 801d460:	46c0      	nop			@ (mov r8, r8)
	}
}
 801d462:	46bd      	mov	sp, r7
 801d464:	b007      	add	sp, #28
 801d466:	bd90      	pop	{r4, r7, pc}

0801d468 <USBD_Desc_GetLen>:
 *         return the string length
 * @param  buf : pointer to the ASCII string buffer
 * @retval string length
 */
static uint8_t USBD_Desc_GetLen(uint8_t *buf)
{
 801d468:	b580      	push	{r7, lr}
 801d46a:	b084      	sub	sp, #16
 801d46c:	af00      	add	r7, sp, #0
 801d46e:	6078      	str	r0, [r7, #4]
	uint8_t  len = 0U;
 801d470:	230f      	movs	r3, #15
 801d472:	18fb      	adds	r3, r7, r3
 801d474:	2200      	movs	r2, #0
 801d476:	701a      	strb	r2, [r3, #0]
	uint8_t *pbuff = buf;
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	60bb      	str	r3, [r7, #8]

	while (*pbuff != (uint8_t)'\0')
 801d47c:	e008      	b.n	801d490 <USBD_Desc_GetLen+0x28>
	{
		len++;
 801d47e:	210f      	movs	r1, #15
 801d480:	187b      	adds	r3, r7, r1
 801d482:	781a      	ldrb	r2, [r3, #0]
 801d484:	187b      	adds	r3, r7, r1
 801d486:	3201      	adds	r2, #1
 801d488:	701a      	strb	r2, [r3, #0]
		pbuff++;
 801d48a:	68bb      	ldr	r3, [r7, #8]
 801d48c:	3301      	adds	r3, #1
 801d48e:	60bb      	str	r3, [r7, #8]
	while (*pbuff != (uint8_t)'\0')
 801d490:	68bb      	ldr	r3, [r7, #8]
 801d492:	781b      	ldrb	r3, [r3, #0]
 801d494:	2b00      	cmp	r3, #0
 801d496:	d1f2      	bne.n	801d47e <USBD_Desc_GetLen+0x16>
	}

	return len;
 801d498:	230f      	movs	r3, #15
 801d49a:	18fb      	adds	r3, r7, r3
 801d49c:	781b      	ldrb	r3, [r3, #0]
}
 801d49e:	0018      	movs	r0, r3
 801d4a0:	46bd      	mov	sp, r7
 801d4a2:	b004      	add	sp, #16
 801d4a4:	bd80      	pop	{r7, pc}
	...

0801d4a8 <USBD_Device_Framework_Builder>:
 */
static uint8_t *USBD_Device_Framework_Builder(USBD_DevClassHandleTypeDef *pdev,
		uint8_t *pDevFrameWorkDesc,
		uint8_t *UserClassInstance,
		uint8_t Speed)
{
 801d4a8:	b580      	push	{r7, lr}
 801d4aa:	b088      	sub	sp, #32
 801d4ac:	af02      	add	r7, sp, #8
 801d4ae:	60f8      	str	r0, [r7, #12]
 801d4b0:	60b9      	str	r1, [r7, #8]
 801d4b2:	607a      	str	r2, [r7, #4]
 801d4b4:	001a      	movs	r2, r3
 801d4b6:	1cfb      	adds	r3, r7, #3
 801d4b8:	701a      	strb	r2, [r3, #0]
	static USBD_DeviceDescTypedef   *pDevDesc;
	static USBD_DevQualiDescTypedef *pDevQualDesc;
	uint8_t Idx_Instance = 0U;
 801d4ba:	2317      	movs	r3, #23
 801d4bc:	18fb      	adds	r3, r7, r3
 801d4be:	2200      	movs	r2, #0
 801d4c0:	701a      	strb	r2, [r3, #0]

	/* Set Dev and conf descriptors size to 0 */
	pdev->CurrConfDescSz = 0U;
 801d4c2:	68fa      	ldr	r2, [r7, #12]
 801d4c4:	2392      	movs	r3, #146	@ 0x92
 801d4c6:	005b      	lsls	r3, r3, #1
 801d4c8:	2100      	movs	r1, #0
 801d4ca:	50d1      	str	r1, [r2, r3]
	pdev->CurrDevDescSz = 0U;
 801d4cc:	68fa      	ldr	r2, [r7, #12]
 801d4ce:	2390      	movs	r3, #144	@ 0x90
 801d4d0:	005b      	lsls	r3, r3, #1
 801d4d2:	2100      	movs	r1, #0
 801d4d4:	50d1      	str	r1, [r2, r3]

	/* Set the pointer to the device descriptor area*/
	pDevDesc = (USBD_DeviceDescTypedef *)pDevFrameWorkDesc;
 801d4d6:	4b89      	ldr	r3, [pc, #548]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d4d8:	68ba      	ldr	r2, [r7, #8]
 801d4da:	601a      	str	r2, [r3, #0]

	/* Start building the generic device descriptor common part */
	pDevDesc->bLength = (uint8_t)sizeof(USBD_DeviceDescTypedef);
 801d4dc:	4b87      	ldr	r3, [pc, #540]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d4de:	681b      	ldr	r3, [r3, #0]
 801d4e0:	2212      	movs	r2, #18
 801d4e2:	701a      	strb	r2, [r3, #0]
	pDevDesc->bDescriptorType = UX_DEVICE_DESCRIPTOR_ITEM;
 801d4e4:	4b85      	ldr	r3, [pc, #532]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d4e6:	681b      	ldr	r3, [r3, #0]
 801d4e8:	2201      	movs	r2, #1
 801d4ea:	705a      	strb	r2, [r3, #1]
	pDevDesc->bcdUSB = USB_BCDUSB;
 801d4ec:	4b83      	ldr	r3, [pc, #524]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d4ee:	681b      	ldr	r3, [r3, #0]
 801d4f0:	789a      	ldrb	r2, [r3, #2]
 801d4f2:	2100      	movs	r1, #0
 801d4f4:	400a      	ands	r2, r1
 801d4f6:	709a      	strb	r2, [r3, #2]
 801d4f8:	78da      	ldrb	r2, [r3, #3]
 801d4fa:	2100      	movs	r1, #0
 801d4fc:	400a      	ands	r2, r1
 801d4fe:	1c11      	adds	r1, r2, #0
 801d500:	2202      	movs	r2, #2
 801d502:	430a      	orrs	r2, r1
 801d504:	70da      	strb	r2, [r3, #3]
	pDevDesc->bDeviceClass = 0x00;
 801d506:	4b7d      	ldr	r3, [pc, #500]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d508:	681b      	ldr	r3, [r3, #0]
 801d50a:	2200      	movs	r2, #0
 801d50c:	711a      	strb	r2, [r3, #4]
	pDevDesc->bDeviceSubClass = 0x00;
 801d50e:	4b7b      	ldr	r3, [pc, #492]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d510:	681b      	ldr	r3, [r3, #0]
 801d512:	2200      	movs	r2, #0
 801d514:	715a      	strb	r2, [r3, #5]
	pDevDesc->bDeviceProtocol = 0x00;
 801d516:	4b79      	ldr	r3, [pc, #484]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d518:	681b      	ldr	r3, [r3, #0]
 801d51a:	2200      	movs	r2, #0
 801d51c:	719a      	strb	r2, [r3, #6]
	pDevDesc->bMaxPacketSize = USBD_MAX_EP0_SIZE;
 801d51e:	4b77      	ldr	r3, [pc, #476]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	2240      	movs	r2, #64	@ 0x40
 801d524:	71da      	strb	r2, [r3, #7]
	pDevDesc->idVendor = USBD_VID;
 801d526:	4b75      	ldr	r3, [pc, #468]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d528:	681b      	ldr	r3, [r3, #0]
 801d52a:	7a1a      	ldrb	r2, [r3, #8]
 801d52c:	2100      	movs	r1, #0
 801d52e:	400a      	ands	r2, r1
 801d530:	1c11      	adds	r1, r2, #0
 801d532:	227d      	movs	r2, #125	@ 0x7d
 801d534:	4252      	negs	r2, r2
 801d536:	430a      	orrs	r2, r1
 801d538:	721a      	strb	r2, [r3, #8]
 801d53a:	7a5a      	ldrb	r2, [r3, #9]
 801d53c:	2100      	movs	r1, #0
 801d53e:	400a      	ands	r2, r1
 801d540:	1c11      	adds	r1, r2, #0
 801d542:	2204      	movs	r2, #4
 801d544:	430a      	orrs	r2, r1
 801d546:	725a      	strb	r2, [r3, #9]
	pDevDesc->idProduct = USBD_PID;
 801d548:	4b6c      	ldr	r3, [pc, #432]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	7a9a      	ldrb	r2, [r3, #10]
 801d54e:	2100      	movs	r1, #0
 801d550:	400a      	ands	r2, r1
 801d552:	1c11      	adds	r1, r2, #0
 801d554:	2250      	movs	r2, #80	@ 0x50
 801d556:	430a      	orrs	r2, r1
 801d558:	729a      	strb	r2, [r3, #10]
 801d55a:	7ada      	ldrb	r2, [r3, #11]
 801d55c:	2100      	movs	r1, #0
 801d55e:	400a      	ands	r2, r1
 801d560:	1c11      	adds	r1, r2, #0
 801d562:	2257      	movs	r2, #87	@ 0x57
 801d564:	430a      	orrs	r2, r1
 801d566:	72da      	strb	r2, [r3, #11]
	pDevDesc->bcdDevice = 0x0200;
 801d568:	4b64      	ldr	r3, [pc, #400]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d56a:	681b      	ldr	r3, [r3, #0]
 801d56c:	7b1a      	ldrb	r2, [r3, #12]
 801d56e:	2100      	movs	r1, #0
 801d570:	400a      	ands	r2, r1
 801d572:	731a      	strb	r2, [r3, #12]
 801d574:	7b5a      	ldrb	r2, [r3, #13]
 801d576:	2100      	movs	r1, #0
 801d578:	400a      	ands	r2, r1
 801d57a:	1c11      	adds	r1, r2, #0
 801d57c:	2202      	movs	r2, #2
 801d57e:	430a      	orrs	r2, r1
 801d580:	735a      	strb	r2, [r3, #13]
	pDevDesc->iManufacturer = USBD_IDX_MFC_STR;
 801d582:	4b5e      	ldr	r3, [pc, #376]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d584:	681b      	ldr	r3, [r3, #0]
 801d586:	2201      	movs	r2, #1
 801d588:	739a      	strb	r2, [r3, #14]
	pDevDesc->iProduct = USBD_IDX_PRODUCT_STR;
 801d58a:	4b5c      	ldr	r3, [pc, #368]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d58c:	681b      	ldr	r3, [r3, #0]
 801d58e:	2202      	movs	r2, #2
 801d590:	73da      	strb	r2, [r3, #15]
	pDevDesc->iSerialNumber = USBD_IDX_SERIAL_STR;
 801d592:	4b5a      	ldr	r3, [pc, #360]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d594:	681b      	ldr	r3, [r3, #0]
 801d596:	2203      	movs	r2, #3
 801d598:	741a      	strb	r2, [r3, #16]
	pDevDesc->bNumConfigurations = USBD_MAX_NUM_CONFIGURATION;
 801d59a:	4b58      	ldr	r3, [pc, #352]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	2201      	movs	r2, #1
 801d5a0:	745a      	strb	r2, [r3, #17]
	pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DeviceDescTypedef);
 801d5a2:	68fa      	ldr	r2, [r7, #12]
 801d5a4:	2390      	movs	r3, #144	@ 0x90
 801d5a6:	005b      	lsls	r3, r3, #1
 801d5a8:	58d3      	ldr	r3, [r2, r3]
 801d5aa:	3312      	adds	r3, #18
 801d5ac:	0019      	movs	r1, r3
 801d5ae:	68fa      	ldr	r2, [r7, #12]
 801d5b0:	2390      	movs	r3, #144	@ 0x90
 801d5b2:	005b      	lsls	r3, r3, #1
 801d5b4:	50d1      	str	r1, [r2, r3]

	/* Check if USBx is in high speed mode to add qualifier descriptor */
	if (Speed == USBD_HIGH_SPEED)
 801d5b6:	1cfb      	adds	r3, r7, #3
 801d5b8:	781b      	ldrb	r3, [r3, #0]
 801d5ba:	2b01      	cmp	r3, #1
 801d5bc:	d172      	bne.n	801d6a4 <USBD_Device_Framework_Builder+0x1fc>
	{
		pDevQualDesc = (USBD_DevQualiDescTypedef *)(pDevFrameWorkDesc + pdev->CurrDevDescSz);
 801d5be:	68fa      	ldr	r2, [r7, #12]
 801d5c0:	2390      	movs	r3, #144	@ 0x90
 801d5c2:	005b      	lsls	r3, r3, #1
 801d5c4:	58d3      	ldr	r3, [r2, r3]
 801d5c6:	68ba      	ldr	r2, [r7, #8]
 801d5c8:	18d2      	adds	r2, r2, r3
 801d5ca:	4b4d      	ldr	r3, [pc, #308]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d5cc:	601a      	str	r2, [r3, #0]
		pDevQualDesc->bLength = (uint8_t)sizeof(USBD_DevQualiDescTypedef);
 801d5ce:	4b4c      	ldr	r3, [pc, #304]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	220a      	movs	r2, #10
 801d5d4:	701a      	strb	r2, [r3, #0]
		pDevQualDesc->bDescriptorType = UX_DEVICE_QUALIFIER_DESCRIPTOR_ITEM;
 801d5d6:	4b4a      	ldr	r3, [pc, #296]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d5d8:	681b      	ldr	r3, [r3, #0]
 801d5da:	2206      	movs	r2, #6
 801d5dc:	705a      	strb	r2, [r3, #1]
		pDevQualDesc->bcdDevice = 0x0200;
 801d5de:	4b48      	ldr	r3, [pc, #288]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d5e0:	681b      	ldr	r3, [r3, #0]
 801d5e2:	789a      	ldrb	r2, [r3, #2]
 801d5e4:	2100      	movs	r1, #0
 801d5e6:	400a      	ands	r2, r1
 801d5e8:	709a      	strb	r2, [r3, #2]
 801d5ea:	78da      	ldrb	r2, [r3, #3]
 801d5ec:	2100      	movs	r1, #0
 801d5ee:	400a      	ands	r2, r1
 801d5f0:	1c11      	adds	r1, r2, #0
 801d5f2:	2202      	movs	r2, #2
 801d5f4:	430a      	orrs	r2, r1
 801d5f6:	70da      	strb	r2, [r3, #3]
		pDevQualDesc->Class = 0x00;
 801d5f8:	4b41      	ldr	r3, [pc, #260]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	2200      	movs	r2, #0
 801d5fe:	711a      	strb	r2, [r3, #4]
		pDevQualDesc->SubClass = 0x00;
 801d600:	4b3f      	ldr	r3, [pc, #252]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d602:	681b      	ldr	r3, [r3, #0]
 801d604:	2200      	movs	r2, #0
 801d606:	715a      	strb	r2, [r3, #5]
		pDevQualDesc->Protocol = 0x00;
 801d608:	4b3d      	ldr	r3, [pc, #244]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d60a:	681b      	ldr	r3, [r3, #0]
 801d60c:	2200      	movs	r2, #0
 801d60e:	719a      	strb	r2, [r3, #6]
		pDevQualDesc->bMaxPacketSize = 0x40;
 801d610:	4b3b      	ldr	r3, [pc, #236]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	2240      	movs	r2, #64	@ 0x40
 801d616:	71da      	strb	r2, [r3, #7]
		pDevQualDesc->bNumConfigurations = 0x01;
 801d618:	4b39      	ldr	r3, [pc, #228]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d61a:	681b      	ldr	r3, [r3, #0]
 801d61c:	2201      	movs	r2, #1
 801d61e:	721a      	strb	r2, [r3, #8]
		pDevQualDesc->bReserved = 0x00;
 801d620:	4b37      	ldr	r3, [pc, #220]	@ (801d700 <USBD_Device_Framework_Builder+0x258>)
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	2200      	movs	r2, #0
 801d626:	725a      	strb	r2, [r3, #9]
		pdev->CurrDevDescSz += (uint32_t)sizeof(USBD_DevQualiDescTypedef);
 801d628:	68fa      	ldr	r2, [r7, #12]
 801d62a:	2390      	movs	r3, #144	@ 0x90
 801d62c:	005b      	lsls	r3, r3, #1
 801d62e:	58d3      	ldr	r3, [r2, r3]
 801d630:	330a      	adds	r3, #10
 801d632:	0019      	movs	r1, r3
 801d634:	68fa      	ldr	r2, [r7, #12]
 801d636:	2390      	movs	r3, #144	@ 0x90
 801d638:	005b      	lsls	r3, r3, #1
 801d63a:	50d1      	str	r1, [r2, r3]
	}

	/* Build the device framework */
	while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801d63c:	e032      	b.n	801d6a4 <USBD_Device_Framework_Builder+0x1fc>
	{
		if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801d63e:	68fb      	ldr	r3, [r7, #12]
 801d640:	685b      	ldr	r3, [r3, #4]
 801d642:	2b02      	cmp	r3, #2
 801d644:	d828      	bhi.n	801d698 <USBD_Device_Framework_Builder+0x1f0>
				(pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	689b      	ldr	r3, [r3, #8]
		if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801d64a:	2b02      	cmp	r3, #2
 801d64c:	d824      	bhi.n	801d698 <USBD_Device_Framework_Builder+0x1f0>
				(UserClassInstance[Idx_Instance] != CLASS_TYPE_NONE))
 801d64e:	2117      	movs	r1, #23
 801d650:	187b      	adds	r3, r7, r1
 801d652:	781b      	ldrb	r3, [r3, #0]
 801d654:	687a      	ldr	r2, [r7, #4]
 801d656:	18d3      	adds	r3, r2, r3
 801d658:	781b      	ldrb	r3, [r3, #0]
				(pdev->NumClasses < USBD_MAX_SUPPORTED_CLASS) &&
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d01c      	beq.n	801d698 <USBD_Device_Framework_Builder+0x1f0>
		{
			/* Call the composite class builder */
			(void)USBD_FrameWork_AddClass(pdev,
					(USBD_CompositeClassTypeDef)UserClassInstance[Idx_Instance],
 801d65e:	187b      	adds	r3, r7, r1
 801d660:	781b      	ldrb	r3, [r3, #0]
 801d662:	687a      	ldr	r2, [r7, #4]
 801d664:	18d3      	adds	r3, r2, r3
			(void)USBD_FrameWork_AddClass(pdev,
 801d666:	7819      	ldrb	r1, [r3, #0]
					0, Speed,
					(pDevFrameWorkDesc + pdev->CurrDevDescSz));
 801d668:	68fa      	ldr	r2, [r7, #12]
 801d66a:	2390      	movs	r3, #144	@ 0x90
 801d66c:	005b      	lsls	r3, r3, #1
 801d66e:	58d3      	ldr	r3, [r2, r3]
			(void)USBD_FrameWork_AddClass(pdev,
 801d670:	68ba      	ldr	r2, [r7, #8]
 801d672:	18d3      	adds	r3, r2, r3
 801d674:	1cfa      	adds	r2, r7, #3
 801d676:	7812      	ldrb	r2, [r2, #0]
 801d678:	68f8      	ldr	r0, [r7, #12]
 801d67a:	9300      	str	r3, [sp, #0]
 801d67c:	0013      	movs	r3, r2
 801d67e:	2200      	movs	r2, #0
 801d680:	f000 f840 	bl	801d704 <USBD_FrameWork_AddClass>

			/* Increment the ClassId for the next occurrence */
			pdev->classId ++;
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	685b      	ldr	r3, [r3, #4]
 801d688:	1c5a      	adds	r2, r3, #1
 801d68a:	68fb      	ldr	r3, [r7, #12]
 801d68c:	605a      	str	r2, [r3, #4]
			pdev->NumClasses ++;
 801d68e:	68fb      	ldr	r3, [r7, #12]
 801d690:	689b      	ldr	r3, [r3, #8]
 801d692:	1c5a      	adds	r2, r3, #1
 801d694:	68fb      	ldr	r3, [r7, #12]
 801d696:	609a      	str	r2, [r3, #8]
		}

		Idx_Instance++;
 801d698:	2117      	movs	r1, #23
 801d69a:	187b      	adds	r3, r7, r1
 801d69c:	781a      	ldrb	r2, [r3, #0]
 801d69e:	187b      	adds	r3, r7, r1
 801d6a0:	3201      	adds	r2, #1
 801d6a2:	701a      	strb	r2, [r3, #0]
	while (Idx_Instance < USBD_MAX_SUPPORTED_CLASS)
 801d6a4:	2317      	movs	r3, #23
 801d6a6:	18fb      	adds	r3, r7, r3
 801d6a8:	781b      	ldrb	r3, [r3, #0]
 801d6aa:	2b02      	cmp	r3, #2
 801d6ac:	d9c7      	bls.n	801d63e <USBD_Device_Framework_Builder+0x196>
	}

	/* Check if there is a composite class and update device class */
	if (pdev->NumClasses > 1)
 801d6ae:	68fb      	ldr	r3, [r7, #12]
 801d6b0:	689b      	ldr	r3, [r3, #8]
 801d6b2:	2b01      	cmp	r3, #1
 801d6b4:	d90c      	bls.n	801d6d0 <USBD_Device_Framework_Builder+0x228>
	{
		pDevDesc->bDeviceClass = 0xEF;
 801d6b6:	4b11      	ldr	r3, [pc, #68]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d6b8:	681b      	ldr	r3, [r3, #0]
 801d6ba:	22ef      	movs	r2, #239	@ 0xef
 801d6bc:	711a      	strb	r2, [r3, #4]
		pDevDesc->bDeviceSubClass = 0x02;
 801d6be:	4b0f      	ldr	r3, [pc, #60]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	2202      	movs	r2, #2
 801d6c4:	715a      	strb	r2, [r3, #5]
		pDevDesc->bDeviceProtocol = 0x01;
 801d6c6:	4b0d      	ldr	r3, [pc, #52]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d6c8:	681b      	ldr	r3, [r3, #0]
 801d6ca:	2201      	movs	r2, #1
 801d6cc:	719a      	strb	r2, [r3, #6]
 801d6ce:	e00f      	b.n	801d6f0 <USBD_Device_Framework_Builder+0x248>
	}
	else
	{
		/* Check if the CDC ACM class is set and update device class */
		if (UserClassInstance[0] == CLASS_TYPE_CDC_ACM)
 801d6d0:	687b      	ldr	r3, [r7, #4]
 801d6d2:	781b      	ldrb	r3, [r3, #0]
 801d6d4:	2b02      	cmp	r3, #2
 801d6d6:	d10b      	bne.n	801d6f0 <USBD_Device_Framework_Builder+0x248>
		{
			pDevDesc->bDeviceClass = 0x02;
 801d6d8:	4b08      	ldr	r3, [pc, #32]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	2202      	movs	r2, #2
 801d6de:	711a      	strb	r2, [r3, #4]
			pDevDesc->bDeviceSubClass = 0x02;
 801d6e0:	4b06      	ldr	r3, [pc, #24]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d6e2:	681b      	ldr	r3, [r3, #0]
 801d6e4:	2202      	movs	r2, #2
 801d6e6:	715a      	strb	r2, [r3, #5]
			pDevDesc->bDeviceProtocol = 0x00;
 801d6e8:	4b04      	ldr	r3, [pc, #16]	@ (801d6fc <USBD_Device_Framework_Builder+0x254>)
 801d6ea:	681b      	ldr	r3, [r3, #0]
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	719a      	strb	r2, [r3, #6]
		}
	}

	return pDevFrameWorkDesc;
 801d6f0:	68bb      	ldr	r3, [r7, #8]
}
 801d6f2:	0018      	movs	r0, r3
 801d6f4:	46bd      	mov	sp, r7
 801d6f6:	b006      	add	sp, #24
 801d6f8:	bd80      	pop	{r7, pc}
 801d6fa:	46c0      	nop			@ (mov r8, r8)
 801d6fc:	20011d9c 	.word	0x20011d9c
 801d700:	20011da0 	.word	0x20011da0

0801d704 <USBD_FrameWork_AddClass>:
 */
uint8_t  USBD_FrameWork_AddClass(USBD_DevClassHandleTypeDef *pdev,
		USBD_CompositeClassTypeDef class,
		uint8_t cfgidx, uint8_t Speed,
		uint8_t *pCmpstConfDesc)
{
 801d704:	b590      	push	{r4, r7, lr}
 801d706:	b083      	sub	sp, #12
 801d708:	af00      	add	r7, sp, #0
 801d70a:	6078      	str	r0, [r7, #4]
 801d70c:	000c      	movs	r4, r1
 801d70e:	0010      	movs	r0, r2
 801d710:	0019      	movs	r1, r3
 801d712:	1cfb      	adds	r3, r7, #3
 801d714:	1c22      	adds	r2, r4, #0
 801d716:	701a      	strb	r2, [r3, #0]
 801d718:	1cbb      	adds	r3, r7, #2
 801d71a:	1c02      	adds	r2, r0, #0
 801d71c:	701a      	strb	r2, [r3, #0]
 801d71e:	1c7b      	adds	r3, r7, #1
 801d720:	1c0a      	adds	r2, r1, #0
 801d722:	701a      	strb	r2, [r3, #0]
	static uint8_t interface_idx = 0U;

	if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801d724:	687b      	ldr	r3, [r7, #4]
 801d726:	685b      	ldr	r3, [r3, #4]
 801d728:	2b02      	cmp	r3, #2
 801d72a:	d850      	bhi.n	801d7ce <USBD_FrameWork_AddClass+0xca>
			(pdev->tclasslist[pdev->classId].Active == 0U))
 801d72c:	687b      	ldr	r3, [r7, #4]
 801d72e:	685b      	ldr	r3, [r3, #4]
 801d730:	687a      	ldr	r2, [r7, #4]
 801d732:	215c      	movs	r1, #92	@ 0x5c
 801d734:	434b      	muls	r3, r1
 801d736:	18d3      	adds	r3, r2, r3
 801d738:	3318      	adds	r3, #24
 801d73a:	681b      	ldr	r3, [r3, #0]
	if ((pdev->classId < USBD_MAX_SUPPORTED_CLASS) &&
 801d73c:	2b00      	cmp	r3, #0
 801d73e:	d146      	bne.n	801d7ce <USBD_FrameWork_AddClass+0xca>
	{
		/* Store the class parameters in the global tab */
		pdev->tclasslist[pdev->classId].ClassId = pdev->classId;
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	6858      	ldr	r0, [r3, #4]
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	685a      	ldr	r2, [r3, #4]
 801d748:	6879      	ldr	r1, [r7, #4]
 801d74a:	235c      	movs	r3, #92	@ 0x5c
 801d74c:	4343      	muls	r3, r0
 801d74e:	18cb      	adds	r3, r1, r3
 801d750:	3310      	adds	r3, #16
 801d752:	601a      	str	r2, [r3, #0]
		pdev->tclasslist[pdev->classId].Active = 1U;
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	685b      	ldr	r3, [r3, #4]
 801d758:	687a      	ldr	r2, [r7, #4]
 801d75a:	215c      	movs	r1, #92	@ 0x5c
 801d75c:	434b      	muls	r3, r1
 801d75e:	18d3      	adds	r3, r2, r3
 801d760:	3318      	adds	r3, #24
 801d762:	2201      	movs	r2, #1
 801d764:	601a      	str	r2, [r3, #0]
		pdev->tclasslist[pdev->classId].ClassType = class;
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	685b      	ldr	r3, [r3, #4]
 801d76a:	687a      	ldr	r2, [r7, #4]
 801d76c:	215c      	movs	r1, #92	@ 0x5c
 801d76e:	434b      	muls	r3, r1
 801d770:	18d3      	adds	r3, r2, r3
 801d772:	330c      	adds	r3, #12
 801d774:	1cfa      	adds	r2, r7, #3
 801d776:	7812      	ldrb	r2, [r2, #0]
 801d778:	701a      	strb	r2, [r3, #0]

		if (class == CLASS_TYPE_HID)
 801d77a:	1cfb      	adds	r3, r7, #3
 801d77c:	781b      	ldrb	r3, [r3, #0]
 801d77e:	2b01      	cmp	r3, #1
 801d780:	d11a      	bne.n	801d7b8 <USBD_FrameWork_AddClass+0xb4>
		{
			pdev->tclasslist[pdev->classId].InterfaceType = UserHIDInterface[interface_idx];
 801d782:	4b15      	ldr	r3, [pc, #84]	@ (801d7d8 <USBD_FrameWork_AddClass+0xd4>)
 801d784:	781b      	ldrb	r3, [r3, #0]
 801d786:	0019      	movs	r1, r3
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	685b      	ldr	r3, [r3, #4]
 801d78c:	4a13      	ldr	r2, [pc, #76]	@ (801d7dc <USBD_FrameWork_AddClass+0xd8>)
 801d78e:	5c50      	ldrb	r0, [r2, r1]
 801d790:	687a      	ldr	r2, [r7, #4]
 801d792:	215c      	movs	r1, #92	@ 0x5c
 801d794:	434b      	muls	r3, r1
 801d796:	18d3      	adds	r3, r2, r3
 801d798:	3314      	adds	r3, #20
 801d79a:	1c02      	adds	r2, r0, #0
 801d79c:	701a      	strb	r2, [r3, #0]

			interface_idx++;
 801d79e:	4b0e      	ldr	r3, [pc, #56]	@ (801d7d8 <USBD_FrameWork_AddClass+0xd4>)
 801d7a0:	781b      	ldrb	r3, [r3, #0]
 801d7a2:	3301      	adds	r3, #1
 801d7a4:	b2da      	uxtb	r2, r3
 801d7a6:	4b0c      	ldr	r3, [pc, #48]	@ (801d7d8 <USBD_FrameWork_AddClass+0xd4>)
 801d7a8:	701a      	strb	r2, [r3, #0]

			if (interface_idx == sizeof(UserHIDInterface))
 801d7aa:	4b0b      	ldr	r3, [pc, #44]	@ (801d7d8 <USBD_FrameWork_AddClass+0xd4>)
 801d7ac:	781b      	ldrb	r3, [r3, #0]
 801d7ae:	2b02      	cmp	r3, #2
 801d7b0:	d102      	bne.n	801d7b8 <USBD_FrameWork_AddClass+0xb4>
			{
				interface_idx = 0U;
 801d7b2:	4b09      	ldr	r3, [pc, #36]	@ (801d7d8 <USBD_FrameWork_AddClass+0xd4>)
 801d7b4:	2200      	movs	r2, #0
 801d7b6:	701a      	strb	r2, [r3, #0]
			}
		}

		/* Call configuration descriptor builder and endpoint configuration builder */
		if (USBD_FrameWork_AddToConfDesc(pdev, Speed, pCmpstConfDesc) != UX_SUCCESS)
 801d7b8:	69ba      	ldr	r2, [r7, #24]
 801d7ba:	1c7b      	adds	r3, r7, #1
 801d7bc:	7819      	ldrb	r1, [r3, #0]
 801d7be:	687b      	ldr	r3, [r7, #4]
 801d7c0:	0018      	movs	r0, r3
 801d7c2:	f000 f80d 	bl	801d7e0 <USBD_FrameWork_AddToConfDesc>
 801d7c6:	1e03      	subs	r3, r0, #0
 801d7c8:	d001      	beq.n	801d7ce <USBD_FrameWork_AddClass+0xca>
		{
			return UX_ERROR;
 801d7ca:	23ff      	movs	r3, #255	@ 0xff
 801d7cc:	e000      	b.n	801d7d0 <USBD_FrameWork_AddClass+0xcc>
		}
	}

	UNUSED(cfgidx);

	return UX_SUCCESS;
 801d7ce:	2300      	movs	r3, #0
}
 801d7d0:	0018      	movs	r0, r3
 801d7d2:	46bd      	mov	sp, r7
 801d7d4:	b003      	add	sp, #12
 801d7d6:	bd90      	pop	{r4, r7, pc}
 801d7d8:	20011da4 	.word	0x20011da4
 801d7dc:	200001ec 	.word	0x200001ec

0801d7e0 <USBD_FrameWork_AddToConfDesc>:
 * @param  pCmpstConfDesc: to composite device configuration descriptor
 * @retval status
 */
uint8_t  USBD_FrameWork_AddToConfDesc(USBD_DevClassHandleTypeDef *pdev, uint8_t Speed,
		uint8_t *pCmpstConfDesc)
{
 801d7e0:	b5b0      	push	{r4, r5, r7, lr}
 801d7e2:	b086      	sub	sp, #24
 801d7e4:	af00      	add	r7, sp, #0
 801d7e6:	60f8      	str	r0, [r7, #12]
 801d7e8:	607a      	str	r2, [r7, #4]
 801d7ea:	200b      	movs	r0, #11
 801d7ec:	183b      	adds	r3, r7, r0
 801d7ee:	1c0a      	adds	r2, r1, #0
 801d7f0:	701a      	strb	r2, [r3, #0]
	uint8_t interface = 0U;
 801d7f2:	2317      	movs	r3, #23
 801d7f4:	18fb      	adds	r3, r7, r3
 801d7f6:	2200      	movs	r2, #0
 801d7f8:	701a      	strb	r2, [r3, #0]
	/* USER CODE FrameWork_AddToConfDesc_0 */

	/* USER CODE FrameWork_AddToConfDesc_0 */

	/* The USB drivers do not set the speed value, so set it here before starting */
	pdev->Speed = Speed;
 801d7fa:	68fb      	ldr	r3, [r7, #12]
 801d7fc:	183a      	adds	r2, r7, r0
 801d7fe:	7812      	ldrb	r2, [r2, #0]
 801d800:	701a      	strb	r2, [r3, #0]

	/* start building the config descriptor common part */
	if (pdev->classId == 0U)
 801d802:	68fb      	ldr	r3, [r7, #12]
 801d804:	685b      	ldr	r3, [r3, #4]
 801d806:	2b00      	cmp	r3, #0
 801d808:	d107      	bne.n	801d81a <USBD_FrameWork_AddToConfDesc+0x3a>
	{
		/* Add configuration and IAD descriptors */
		USBD_FrameWork_AddConfDesc((uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801d80a:	687a      	ldr	r2, [r7, #4]
 801d80c:	68fb      	ldr	r3, [r7, #12]
 801d80e:	3325      	adds	r3, #37	@ 0x25
 801d810:	33ff      	adds	r3, #255	@ 0xff
 801d812:	0019      	movs	r1, r3
 801d814:	0010      	movs	r0, r2
 801d816:	f000 f8ca 	bl	801d9ae <USBD_FrameWork_AddConfDesc>
	}

	switch (pdev->tclasslist[pdev->classId].ClassType)
 801d81a:	68fb      	ldr	r3, [r7, #12]
 801d81c:	685b      	ldr	r3, [r3, #4]
 801d81e:	68fa      	ldr	r2, [r7, #12]
 801d820:	215c      	movs	r1, #92	@ 0x5c
 801d822:	434b      	muls	r3, r1
 801d824:	18d3      	adds	r3, r2, r3
 801d826:	330c      	adds	r3, #12
 801d828:	781b      	ldrb	r3, [r3, #0]
 801d82a:	2b01      	cmp	r3, #1
 801d82c:	d000      	beq.n	801d830 <USBD_FrameWork_AddToConfDesc+0x50>
 801d82e:	e08e      	b.n	801d94e <USBD_FrameWork_AddToConfDesc+0x16e>

#if USBD_HID_CLASS_ACTIVATED == 1U

	case CLASS_TYPE_HID:

		switch(pdev->tclasslist[pdev->classId].InterfaceType)
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	685b      	ldr	r3, [r3, #4]
 801d834:	68fa      	ldr	r2, [r7, #12]
 801d836:	215c      	movs	r1, #92	@ 0x5c
 801d838:	434b      	muls	r3, r1
 801d83a:	18d3      	adds	r3, r2, r3
 801d83c:	3314      	adds	r3, #20
 801d83e:	781b      	ldrb	r3, [r3, #0]
 801d840:	2b01      	cmp	r3, #1
 801d842:	d042      	beq.n	801d8ca <USBD_FrameWork_AddToConfDesc+0xea>
 801d844:	2b02      	cmp	r3, #2
 801d846:	d000      	beq.n	801d84a <USBD_FrameWork_AddToConfDesc+0x6a>
 801d848:	e07f      	b.n	801d94a <USBD_FrameWork_AddToConfDesc+0x16a>
#if USBD_HID_MOUSE_ACTIVATED == 1U

		case INTERFACE_HID_MOUSE:

			/* Find the first available interface slot and Assign number of interfaces */
			interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 801d84a:	2517      	movs	r5, #23
 801d84c:	197c      	adds	r4, r7, r5
 801d84e:	68fb      	ldr	r3, [r7, #12]
 801d850:	0018      	movs	r0, r3
 801d852:	f000 f882 	bl	801d95a <USBD_FrameWork_FindFreeIFNbr>
 801d856:	0003      	movs	r3, r0
 801d858:	7023      	strb	r3, [r4, #0]
			pdev->tclasslist[pdev->classId].NumIf = 1U;
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	685b      	ldr	r3, [r3, #4]
 801d85e:	68fa      	ldr	r2, [r7, #12]
 801d860:	215c      	movs	r1, #92	@ 0x5c
 801d862:	434b      	muls	r3, r1
 801d864:	18d3      	adds	r3, r2, r3
 801d866:	3320      	adds	r3, #32
 801d868:	2201      	movs	r2, #1
 801d86a:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 801d86c:	68fb      	ldr	r3, [r7, #12]
 801d86e:	685b      	ldr	r3, [r3, #4]
 801d870:	68fa      	ldr	r2, [r7, #12]
 801d872:	215a      	movs	r1, #90	@ 0x5a
 801d874:	205c      	movs	r0, #92	@ 0x5c
 801d876:	4343      	muls	r3, r0
 801d878:	18d3      	adds	r3, r2, r3
 801d87a:	185b      	adds	r3, r3, r1
 801d87c:	197a      	adds	r2, r7, r5
 801d87e:	7812      	ldrb	r2, [r2, #0]
 801d880:	701a      	strb	r2, [r3, #0]

			/* Assign endpoint numbers */
			pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP_IN */
 801d882:	68fb      	ldr	r3, [r7, #12]
 801d884:	685b      	ldr	r3, [r3, #4]
 801d886:	68fa      	ldr	r2, [r7, #12]
 801d888:	215c      	movs	r1, #92	@ 0x5c
 801d88a:	434b      	muls	r3, r1
 801d88c:	18d3      	adds	r3, r2, r3
 801d88e:	331c      	adds	r3, #28
 801d890:	2201      	movs	r2, #1
 801d892:	601a      	str	r2, [r3, #0]

			/* Check the current speed to assign endpoint IN */
			if (pdev->Speed == USBD_HIGH_SPEED)
 801d894:	68fb      	ldr	r3, [r7, #12]
 801d896:	781b      	ldrb	r3, [r3, #0]
 801d898:	2b01      	cmp	r3, #1
 801d89a:	d106      	bne.n	801d8aa <USBD_FrameWork_AddToConfDesc+0xca>
			{
				/* Assign IN Endpoint */
				USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 801d89c:	68f8      	ldr	r0, [r7, #12]
 801d89e:	2304      	movs	r3, #4
 801d8a0:	2203      	movs	r2, #3
 801d8a2:	2183      	movs	r1, #131	@ 0x83
 801d8a4:	f000 f8b2 	bl	801da0c <USBD_FrameWork_AssignEp>
 801d8a8:	e005      	b.n	801d8b6 <USBD_FrameWork_AddToConfDesc+0xd6>
						USBD_EP_TYPE_INTR, USBD_HID_MOUSE_EPIN_HS_MPS);
			}
			else
			{
				/* Assign IN Endpoint */
				USBD_FrameWork_AssignEp(pdev, USBD_HID_MOUSE_EPIN_ADDR,
 801d8aa:	68f8      	ldr	r0, [r7, #12]
 801d8ac:	2304      	movs	r3, #4
 801d8ae:	2203      	movs	r2, #3
 801d8b0:	2183      	movs	r1, #131	@ 0x83
 801d8b2:	f000 f8ab 	bl	801da0c <USBD_FrameWork_AssignEp>
						USBD_EP_TYPE_INTR, USBD_HID_MOUSE_EPIN_FS_MPS);
			}

			/* Configure and Append the Descriptor */
			USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801d8b6:	6879      	ldr	r1, [r7, #4]
 801d8b8:	68fb      	ldr	r3, [r7, #12]
 801d8ba:	3325      	adds	r3, #37	@ 0x25
 801d8bc:	33ff      	adds	r3, #255	@ 0xff
 801d8be:	001a      	movs	r2, r3
 801d8c0:	68fb      	ldr	r3, [r7, #12]
 801d8c2:	0018      	movs	r0, r3
 801d8c4:	f000 f91c 	bl	801db00 <USBD_FrameWork_HID_Desc>

			break;
 801d8c8:	e040      	b.n	801d94c <USBD_FrameWork_AddToConfDesc+0x16c>
#if USBD_HID_KEYBOARD_ACTIVATED == 1U

		case INTERFACE_HID_KEYBOARD:

			/* Find the first available interface slot and Assign number of interfaces */
			interface = USBD_FrameWork_FindFreeIFNbr(pdev);
 801d8ca:	2517      	movs	r5, #23
 801d8cc:	197c      	adds	r4, r7, r5
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	0018      	movs	r0, r3
 801d8d2:	f000 f842 	bl	801d95a <USBD_FrameWork_FindFreeIFNbr>
 801d8d6:	0003      	movs	r3, r0
 801d8d8:	7023      	strb	r3, [r4, #0]
			pdev->tclasslist[pdev->classId].NumIf = 1U;
 801d8da:	68fb      	ldr	r3, [r7, #12]
 801d8dc:	685b      	ldr	r3, [r3, #4]
 801d8de:	68fa      	ldr	r2, [r7, #12]
 801d8e0:	215c      	movs	r1, #92	@ 0x5c
 801d8e2:	434b      	muls	r3, r1
 801d8e4:	18d3      	adds	r3, r2, r3
 801d8e6:	3320      	adds	r3, #32
 801d8e8:	2201      	movs	r2, #1
 801d8ea:	601a      	str	r2, [r3, #0]
			pdev->tclasslist[pdev->classId].Ifs[0] = interface;
 801d8ec:	68fb      	ldr	r3, [r7, #12]
 801d8ee:	685b      	ldr	r3, [r3, #4]
 801d8f0:	68fa      	ldr	r2, [r7, #12]
 801d8f2:	215a      	movs	r1, #90	@ 0x5a
 801d8f4:	205c      	movs	r0, #92	@ 0x5c
 801d8f6:	4343      	muls	r3, r0
 801d8f8:	18d3      	adds	r3, r2, r3
 801d8fa:	185b      	adds	r3, r3, r1
 801d8fc:	197a      	adds	r2, r7, r5
 801d8fe:	7812      	ldrb	r2, [r2, #0]
 801d900:	701a      	strb	r2, [r3, #0]

			/* Assign endpoint numbers */
			pdev->tclasslist[pdev->classId].NumEps = 1U; /* EP_IN */
 801d902:	68fb      	ldr	r3, [r7, #12]
 801d904:	685b      	ldr	r3, [r3, #4]
 801d906:	68fa      	ldr	r2, [r7, #12]
 801d908:	215c      	movs	r1, #92	@ 0x5c
 801d90a:	434b      	muls	r3, r1
 801d90c:	18d3      	adds	r3, r2, r3
 801d90e:	331c      	adds	r3, #28
 801d910:	2201      	movs	r2, #1
 801d912:	601a      	str	r2, [r3, #0]

			/* Check the current speed to assign endpoint IN */
			if (pdev->Speed == USBD_HIGH_SPEED)
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	781b      	ldrb	r3, [r3, #0]
 801d918:	2b01      	cmp	r3, #1
 801d91a:	d106      	bne.n	801d92a <USBD_FrameWork_AddToConfDesc+0x14a>
			{
				/* Assign IN Endpoint */
				USBD_FrameWork_AssignEp(pdev, USBD_HID_KEYBOARD_EPIN_ADDR,
 801d91c:	68f8      	ldr	r0, [r7, #12]
 801d91e:	2304      	movs	r3, #4
 801d920:	2203      	movs	r2, #3
 801d922:	2184      	movs	r1, #132	@ 0x84
 801d924:	f000 f872 	bl	801da0c <USBD_FrameWork_AssignEp>
 801d928:	e005      	b.n	801d936 <USBD_FrameWork_AddToConfDesc+0x156>
						USBD_EP_TYPE_INTR, USBD_HID_KEYBOARD_EPIN_HS_MPS);
			}
			else
			{
				/* Assign IN Endpoint */
				USBD_FrameWork_AssignEp(pdev, USBD_HID_KEYBOARD_EPIN_ADDR,
 801d92a:	68f8      	ldr	r0, [r7, #12]
 801d92c:	2304      	movs	r3, #4
 801d92e:	2203      	movs	r2, #3
 801d930:	2184      	movs	r1, #132	@ 0x84
 801d932:	f000 f86b 	bl	801da0c <USBD_FrameWork_AssignEp>
						USBD_EP_TYPE_INTR, USBD_HID_KEYBOARD_EPIN_FS_MPS);
			}

			/* Configure and Append the Descriptor */
			USBD_FrameWork_HID_Desc(pdev, (uint32_t)pCmpstConfDesc, &pdev->CurrConfDescSz);
 801d936:	6879      	ldr	r1, [r7, #4]
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	3325      	adds	r3, #37	@ 0x25
 801d93c:	33ff      	adds	r3, #255	@ 0xff
 801d93e:	001a      	movs	r2, r3
 801d940:	68fb      	ldr	r3, [r7, #12]
 801d942:	0018      	movs	r0, r3
 801d944:	f000 f8dc 	bl	801db00 <USBD_FrameWork_HID_Desc>

			break;
 801d948:	e000      	b.n	801d94c <USBD_FrameWork_AddToConfDesc+0x16c>
      break;

#endif /* USBD_MSC_CLASS_ACTIVATED */

		default:
			break;
 801d94a:	46c0      	nop			@ (mov r8, r8)
		}

		break;
 801d94c:	e000      	b.n	801d950 <USBD_FrameWork_AddToConfDesc+0x170>

		default:
			/* USER CODE FrameWork_AddToConfDesc_2 */

			/* USER CODE FrameWork_AddToConfDesc_2 */
			break;
 801d94e:	46c0      	nop			@ (mov r8, r8)
	}

	return UX_SUCCESS;
 801d950:	2300      	movs	r3, #0
}
 801d952:	0018      	movs	r0, r3
 801d954:	46bd      	mov	sp, r7
 801d956:	b006      	add	sp, #24
 801d958:	bdb0      	pop	{r4, r5, r7, pc}

0801d95a <USBD_FrameWork_FindFreeIFNbr>:
 *         Find the first interface available slot
 * @param  pdev: device instance
 * @retval The interface number to be used
 */
static uint8_t USBD_FrameWork_FindFreeIFNbr(USBD_DevClassHandleTypeDef *pdev)
{
 801d95a:	b580      	push	{r7, lr}
 801d95c:	b086      	sub	sp, #24
 801d95e:	af00      	add	r7, sp, #0
 801d960:	6078      	str	r0, [r7, #4]
	uint32_t idx = 0U;
 801d962:	2300      	movs	r3, #0
 801d964:	617b      	str	r3, [r7, #20]

	/* Unroll all already activated classes */
	for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 801d966:	2300      	movs	r3, #0
 801d968:	613b      	str	r3, [r7, #16]
 801d96a:	e015      	b.n	801d998 <USBD_FrameWork_FindFreeIFNbr+0x3e>
	{
		/* Unroll each class interfaces */
		for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801d96c:	2300      	movs	r3, #0
 801d96e:	60fb      	str	r3, [r7, #12]
 801d970:	e005      	b.n	801d97e <USBD_FrameWork_FindFreeIFNbr+0x24>
		{
			/* Increment the interface counter index */
			idx++;
 801d972:	697b      	ldr	r3, [r7, #20]
 801d974:	3301      	adds	r3, #1
 801d976:	617b      	str	r3, [r7, #20]
		for (uint32_t j = 0U; j < pdev->tclasslist[i].NumIf; j++)
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	3301      	adds	r3, #1
 801d97c:	60fb      	str	r3, [r7, #12]
 801d97e:	687a      	ldr	r2, [r7, #4]
 801d980:	693b      	ldr	r3, [r7, #16]
 801d982:	215c      	movs	r1, #92	@ 0x5c
 801d984:	434b      	muls	r3, r1
 801d986:	18d3      	adds	r3, r2, r3
 801d988:	3320      	adds	r3, #32
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	68fa      	ldr	r2, [r7, #12]
 801d98e:	429a      	cmp	r2, r3
 801d990:	d3ef      	bcc.n	801d972 <USBD_FrameWork_FindFreeIFNbr+0x18>
	for (uint32_t i = 0U; i < pdev->NumClasses; i++)
 801d992:	693b      	ldr	r3, [r7, #16]
 801d994:	3301      	adds	r3, #1
 801d996:	613b      	str	r3, [r7, #16]
 801d998:	687b      	ldr	r3, [r7, #4]
 801d99a:	689b      	ldr	r3, [r3, #8]
 801d99c:	693a      	ldr	r2, [r7, #16]
 801d99e:	429a      	cmp	r2, r3
 801d9a0:	d3e4      	bcc.n	801d96c <USBD_FrameWork_FindFreeIFNbr+0x12>
		}
	}

	/* Return the first available interface slot */
	return (uint8_t)idx;
 801d9a2:	697b      	ldr	r3, [r7, #20]
 801d9a4:	b2db      	uxtb	r3, r3
}
 801d9a6:	0018      	movs	r0, r3
 801d9a8:	46bd      	mov	sp, r7
 801d9aa:	b006      	add	sp, #24
 801d9ac:	bd80      	pop	{r7, pc}

0801d9ae <USBD_FrameWork_AddConfDesc>:
 * @param  Conf: configuration descriptor
 * @param  pSze: pointer to the configuration descriptor size
 * @retval none
 */
static void  USBD_FrameWork_AddConfDesc(uint32_t Conf, uint32_t *pSze)
{
 801d9ae:	b580      	push	{r7, lr}
 801d9b0:	b084      	sub	sp, #16
 801d9b2:	af00      	add	r7, sp, #0
 801d9b4:	6078      	str	r0, [r7, #4]
 801d9b6:	6039      	str	r1, [r7, #0]
	/* Intermediate variable to comply with MISRA-C Rule 11.3 */
	USBD_ConfigDescTypedef *ptr = (USBD_ConfigDescTypedef *)Conf;
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	60fb      	str	r3, [r7, #12]

	ptr->bLength = (uint8_t)sizeof(USBD_ConfigDescTypedef);
 801d9bc:	68fb      	ldr	r3, [r7, #12]
 801d9be:	2209      	movs	r2, #9
 801d9c0:	701a      	strb	r2, [r3, #0]
	ptr->bDescriptorType = USB_DESC_TYPE_CONFIGURATION;
 801d9c2:	68fb      	ldr	r3, [r7, #12]
 801d9c4:	2202      	movs	r2, #2
 801d9c6:	705a      	strb	r2, [r3, #1]
	ptr->wDescriptorLength = 0U;
 801d9c8:	68fb      	ldr	r3, [r7, #12]
 801d9ca:	789a      	ldrb	r2, [r3, #2]
 801d9cc:	2100      	movs	r1, #0
 801d9ce:	400a      	ands	r2, r1
 801d9d0:	709a      	strb	r2, [r3, #2]
 801d9d2:	78da      	ldrb	r2, [r3, #3]
 801d9d4:	2100      	movs	r1, #0
 801d9d6:	400a      	ands	r2, r1
 801d9d8:	70da      	strb	r2, [r3, #3]
	ptr->bNumInterfaces = 0U;
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	2200      	movs	r2, #0
 801d9de:	711a      	strb	r2, [r3, #4]
	ptr->bConfigurationValue = 1U;
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	2201      	movs	r2, #1
 801d9e4:	715a      	strb	r2, [r3, #5]
	ptr->iConfiguration = USBD_CONFIG_STR_DESC_IDX;
 801d9e6:	68fb      	ldr	r3, [r7, #12]
 801d9e8:	2200      	movs	r2, #0
 801d9ea:	719a      	strb	r2, [r3, #6]
	ptr->bmAttributes = USBD_CONFIG_BMATTRIBUTES;
 801d9ec:	68fb      	ldr	r3, [r7, #12]
 801d9ee:	22c0      	movs	r2, #192	@ 0xc0
 801d9f0:	71da      	strb	r2, [r3, #7]
	ptr->bMaxPower = USBD_CONFIG_MAXPOWER;
 801d9f2:	68fb      	ldr	r3, [r7, #12]
 801d9f4:	2219      	movs	r2, #25
 801d9f6:	721a      	strb	r2, [r3, #8]
	*pSze += sizeof(USBD_ConfigDescTypedef);
 801d9f8:	683b      	ldr	r3, [r7, #0]
 801d9fa:	681b      	ldr	r3, [r3, #0]
 801d9fc:	3309      	adds	r3, #9
 801d9fe:	001a      	movs	r2, r3
 801da00:	683b      	ldr	r3, [r7, #0]
 801da02:	601a      	str	r2, [r3, #0]
}
 801da04:	46c0      	nop			@ (mov r8, r8)
 801da06:	46bd      	mov	sp, r7
 801da08:	b004      	add	sp, #16
 801da0a:	bd80      	pop	{r7, pc}

0801da0c <USBD_FrameWork_AssignEp>:
 * @param  Sze: Endpoint max packet size
 * @retval none
 */
static void  USBD_FrameWork_AssignEp(USBD_DevClassHandleTypeDef *pdev,
		uint8_t Add, uint8_t Type, uint32_t Sze)
{
 801da0c:	b590      	push	{r4, r7, lr}
 801da0e:	b087      	sub	sp, #28
 801da10:	af00      	add	r7, sp, #0
 801da12:	60f8      	str	r0, [r7, #12]
 801da14:	0008      	movs	r0, r1
 801da16:	0011      	movs	r1, r2
 801da18:	607b      	str	r3, [r7, #4]
 801da1a:	230b      	movs	r3, #11
 801da1c:	18fb      	adds	r3, r7, r3
 801da1e:	1c02      	adds	r2, r0, #0
 801da20:	701a      	strb	r2, [r3, #0]
 801da22:	230a      	movs	r3, #10
 801da24:	18fb      	adds	r3, r7, r3
 801da26:	1c0a      	adds	r2, r1, #0
 801da28:	701a      	strb	r2, [r3, #0]
	uint32_t idx = 0U;
 801da2a:	2300      	movs	r3, #0
 801da2c:	617b      	str	r3, [r7, #20]

	/* Find the first available endpoint slot */
	while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801da2e:	e002      	b.n	801da36 <USBD_FrameWork_AssignEp+0x2a>
			((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
	{
		/* Increment the index */
		idx++;
 801da30:	697b      	ldr	r3, [r7, #20]
 801da32:	3301      	adds	r3, #1
 801da34:	617b      	str	r3, [r7, #20]
	while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801da36:	68fb      	ldr	r3, [r7, #12]
 801da38:	685b      	ldr	r3, [r3, #4]
 801da3a:	68fa      	ldr	r2, [r7, #12]
 801da3c:	215c      	movs	r1, #92	@ 0x5c
 801da3e:	434b      	muls	r3, r1
 801da40:	18d3      	adds	r3, r2, r3
 801da42:	331c      	adds	r3, #28
 801da44:	681b      	ldr	r3, [r3, #0]
 801da46:	697a      	ldr	r2, [r7, #20]
 801da48:	429a      	cmp	r2, r3
 801da4a:	d210      	bcs.n	801da6e <USBD_FrameWork_AssignEp+0x62>
			((pdev->tclasslist[pdev->classId].Eps[idx].is_used) != 0U)))
 801da4c:	68fb      	ldr	r3, [r7, #12]
 801da4e:	6858      	ldr	r0, [r3, #4]
 801da50:	68f9      	ldr	r1, [r7, #12]
 801da52:	697a      	ldr	r2, [r7, #20]
 801da54:	2428      	movs	r4, #40	@ 0x28
 801da56:	0013      	movs	r3, r2
 801da58:	005b      	lsls	r3, r3, #1
 801da5a:	189b      	adds	r3, r3, r2
 801da5c:	005b      	lsls	r3, r3, #1
 801da5e:	225c      	movs	r2, #92	@ 0x5c
 801da60:	4342      	muls	r2, r0
 801da62:	189b      	adds	r3, r3, r2
 801da64:	18cb      	adds	r3, r1, r3
 801da66:	191b      	adds	r3, r3, r4
 801da68:	781b      	ldrb	r3, [r3, #0]
	while (((idx < (pdev->tclasslist[pdev->classId]).NumEps) && \
 801da6a:	2b00      	cmp	r3, #0
 801da6c:	d1e0      	bne.n	801da30 <USBD_FrameWork_AssignEp+0x24>
	}

	/* Configure the endpoint */
	pdev->tclasslist[pdev->classId].Eps[idx].add = Add;
 801da6e:	68fb      	ldr	r3, [r7, #12]
 801da70:	6858      	ldr	r0, [r3, #4]
 801da72:	68f9      	ldr	r1, [r7, #12]
 801da74:	697a      	ldr	r2, [r7, #20]
 801da76:	2424      	movs	r4, #36	@ 0x24
 801da78:	0013      	movs	r3, r2
 801da7a:	005b      	lsls	r3, r3, #1
 801da7c:	189b      	adds	r3, r3, r2
 801da7e:	005b      	lsls	r3, r3, #1
 801da80:	225c      	movs	r2, #92	@ 0x5c
 801da82:	4342      	muls	r2, r0
 801da84:	189b      	adds	r3, r3, r2
 801da86:	18cb      	adds	r3, r1, r3
 801da88:	191b      	adds	r3, r3, r4
 801da8a:	220b      	movs	r2, #11
 801da8c:	18ba      	adds	r2, r7, r2
 801da8e:	7812      	ldrb	r2, [r2, #0]
 801da90:	701a      	strb	r2, [r3, #0]
	pdev->tclasslist[pdev->classId].Eps[idx].type = Type;
 801da92:	68fb      	ldr	r3, [r7, #12]
 801da94:	6858      	ldr	r0, [r3, #4]
 801da96:	68f9      	ldr	r1, [r7, #12]
 801da98:	697a      	ldr	r2, [r7, #20]
 801da9a:	2425      	movs	r4, #37	@ 0x25
 801da9c:	0013      	movs	r3, r2
 801da9e:	005b      	lsls	r3, r3, #1
 801daa0:	189b      	adds	r3, r3, r2
 801daa2:	005b      	lsls	r3, r3, #1
 801daa4:	225c      	movs	r2, #92	@ 0x5c
 801daa6:	4342      	muls	r2, r0
 801daa8:	189b      	adds	r3, r3, r2
 801daaa:	18cb      	adds	r3, r1, r3
 801daac:	191b      	adds	r3, r3, r4
 801daae:	220a      	movs	r2, #10
 801dab0:	18ba      	adds	r2, r7, r2
 801dab2:	7812      	ldrb	r2, [r2, #0]
 801dab4:	701a      	strb	r2, [r3, #0]
	pdev->tclasslist[pdev->classId].Eps[idx].size = (uint16_t) Sze;
 801dab6:	68fb      	ldr	r3, [r7, #12]
 801dab8:	6858      	ldr	r0, [r3, #4]
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	b29c      	uxth	r4, r3
 801dabe:	68f9      	ldr	r1, [r7, #12]
 801dac0:	697a      	ldr	r2, [r7, #20]
 801dac2:	0013      	movs	r3, r2
 801dac4:	005b      	lsls	r3, r3, #1
 801dac6:	189b      	adds	r3, r3, r2
 801dac8:	005b      	lsls	r3, r3, #1
 801daca:	225c      	movs	r2, #92	@ 0x5c
 801dacc:	4342      	muls	r2, r0
 801dace:	189b      	adds	r3, r3, r2
 801dad0:	18cb      	adds	r3, r1, r3
 801dad2:	3326      	adds	r3, #38	@ 0x26
 801dad4:	1c22      	adds	r2, r4, #0
 801dad6:	801a      	strh	r2, [r3, #0]
	pdev->tclasslist[pdev->classId].Eps[idx].is_used = 1U;
 801dad8:	68fb      	ldr	r3, [r7, #12]
 801dada:	6858      	ldr	r0, [r3, #4]
 801dadc:	68f9      	ldr	r1, [r7, #12]
 801dade:	697a      	ldr	r2, [r7, #20]
 801dae0:	2428      	movs	r4, #40	@ 0x28
 801dae2:	0013      	movs	r3, r2
 801dae4:	005b      	lsls	r3, r3, #1
 801dae6:	189b      	adds	r3, r3, r2
 801dae8:	005b      	lsls	r3, r3, #1
 801daea:	225c      	movs	r2, #92	@ 0x5c
 801daec:	4342      	muls	r2, r0
 801daee:	189b      	adds	r3, r3, r2
 801daf0:	18cb      	adds	r3, r1, r3
 801daf2:	191b      	adds	r3, r3, r4
 801daf4:	2201      	movs	r2, #1
 801daf6:	701a      	strb	r2, [r3, #0]
}
 801daf8:	46c0      	nop			@ (mov r8, r8)
 801dafa:	46bd      	mov	sp, r7
 801dafc:	b007      	add	sp, #28
 801dafe:	bd90      	pop	{r4, r7, pc}

0801db00 <USBD_FrameWork_HID_Desc>:
 * @param  Sze: pointer to the current configuration descriptor size
 * @retval None
 */
static void  USBD_FrameWork_HID_Desc(USBD_DevClassHandleTypeDef *pdev,
		uint32_t pConf, uint32_t *Sze)
{
 801db00:	b590      	push	{r4, r7, lr}
 801db02:	b085      	sub	sp, #20
 801db04:	af00      	add	r7, sp, #0
 801db06:	60f8      	str	r0, [r7, #12]
 801db08:	60b9      	str	r1, [r7, #8]
 801db0a:	607a      	str	r2, [r7, #4]
	static USBD_IfDescTypedef       *pIfDesc;
	static USBD_EpDescTypedef       *pEpDesc;
	static USBD_HIDDescTypedef      *pHidDesc;

	switch(pdev->tclasslist[pdev->classId].InterfaceType)
 801db0c:	68fb      	ldr	r3, [r7, #12]
 801db0e:	685b      	ldr	r3, [r3, #4]
 801db10:	68fa      	ldr	r2, [r7, #12]
 801db12:	215c      	movs	r1, #92	@ 0x5c
 801db14:	434b      	muls	r3, r1
 801db16:	18d3      	adds	r3, r2, r3
 801db18:	3314      	adds	r3, #20
 801db1a:	781b      	ldrb	r3, [r3, #0]
 801db1c:	2b01      	cmp	r3, #1
 801db1e:	d100      	bne.n	801db22 <USBD_FrameWork_HID_Desc+0x22>
 801db20:	e138      	b.n	801dd94 <USBD_FrameWork_HID_Desc+0x294>
 801db22:	2b02      	cmp	r3, #2
 801db24:	d000      	beq.n	801db28 <USBD_FrameWork_HID_Desc+0x28>
 801db26:	e264      	b.n	801dff2 <USBD_FrameWork_HID_Desc+0x4f2>

#if USBD_HID_MOUSE_ACTIVATED == 1U
	case INTERFACE_HID_MOUSE:

		/* Append HID Interface descriptor to Configuration descriptor */
		__USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U,
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	681a      	ldr	r2, [r3, #0]
 801db2c:	68bb      	ldr	r3, [r7, #8]
 801db2e:	18d3      	adds	r3, r2, r3
 801db30:	001a      	movs	r2, r3
 801db32:	4b95      	ldr	r3, [pc, #596]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db34:	601a      	str	r2, [r3, #0]
 801db36:	4b94      	ldr	r3, [pc, #592]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db38:	681b      	ldr	r3, [r3, #0]
 801db3a:	2209      	movs	r2, #9
 801db3c:	701a      	strb	r2, [r3, #0]
 801db3e:	4b92      	ldr	r3, [pc, #584]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db40:	681b      	ldr	r3, [r3, #0]
 801db42:	2204      	movs	r2, #4
 801db44:	705a      	strb	r2, [r3, #1]
 801db46:	68fb      	ldr	r3, [r7, #12]
 801db48:	685a      	ldr	r2, [r3, #4]
 801db4a:	4b8f      	ldr	r3, [pc, #572]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	68f9      	ldr	r1, [r7, #12]
 801db50:	205a      	movs	r0, #90	@ 0x5a
 801db52:	245c      	movs	r4, #92	@ 0x5c
 801db54:	4362      	muls	r2, r4
 801db56:	188a      	adds	r2, r1, r2
 801db58:	1812      	adds	r2, r2, r0
 801db5a:	7812      	ldrb	r2, [r2, #0]
 801db5c:	709a      	strb	r2, [r3, #2]
 801db5e:	4b8a      	ldr	r3, [pc, #552]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	2200      	movs	r2, #0
 801db64:	70da      	strb	r2, [r3, #3]
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	685b      	ldr	r3, [r3, #4]
 801db6a:	68fa      	ldr	r2, [r7, #12]
 801db6c:	215c      	movs	r1, #92	@ 0x5c
 801db6e:	434b      	muls	r3, r1
 801db70:	18d3      	adds	r3, r2, r3
 801db72:	331c      	adds	r3, #28
 801db74:	681a      	ldr	r2, [r3, #0]
 801db76:	4b84      	ldr	r3, [pc, #528]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db78:	681b      	ldr	r3, [r3, #0]
 801db7a:	b2d2      	uxtb	r2, r2
 801db7c:	711a      	strb	r2, [r3, #4]
 801db7e:	4b82      	ldr	r3, [pc, #520]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	2203      	movs	r2, #3
 801db84:	715a      	strb	r2, [r3, #5]
 801db86:	4b80      	ldr	r3, [pc, #512]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	2201      	movs	r2, #1
 801db8c:	719a      	strb	r2, [r3, #6]
 801db8e:	4b7e      	ldr	r3, [pc, #504]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db90:	681b      	ldr	r3, [r3, #0]
 801db92:	2202      	movs	r2, #2
 801db94:	71da      	strb	r2, [r3, #7]
 801db96:	4b7c      	ldr	r3, [pc, #496]	@ (801dd88 <USBD_FrameWork_HID_Desc+0x288>)
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	2200      	movs	r2, #0
 801db9c:	721a      	strb	r2, [r3, #8]
 801db9e:	687b      	ldr	r3, [r7, #4]
 801dba0:	681b      	ldr	r3, [r3, #0]
 801dba2:	3309      	adds	r3, #9
 801dba4:	001a      	movs	r2, r3
 801dba6:	687b      	ldr	r3, [r7, #4]
 801dba8:	601a      	str	r2, [r3, #0]
				(uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
				UX_DEVICE_CLASS_HID_CLASS,
				0x01U, INTERFACE_HID_MOUSE, 0U);

		/* Append HID Functional descriptor to Configuration descriptor */
		pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	681a      	ldr	r2, [r3, #0]
 801dbae:	68bb      	ldr	r3, [r7, #8]
 801dbb0:	18d3      	adds	r3, r2, r3
 801dbb2:	001a      	movs	r2, r3
 801dbb4:	4b75      	ldr	r3, [pc, #468]	@ (801dd8c <USBD_FrameWork_HID_Desc+0x28c>)
 801dbb6:	601a      	str	r2, [r3, #0]
		pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 801dbb8:	4b74      	ldr	r3, [pc, #464]	@ (801dd8c <USBD_FrameWork_HID_Desc+0x28c>)
 801dbba:	681b      	ldr	r3, [r3, #0]
 801dbbc:	2209      	movs	r2, #9
 801dbbe:	701a      	strb	r2, [r3, #0]
		pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 801dbc0:	4b72      	ldr	r3, [pc, #456]	@ (801dd8c <USBD_FrameWork_HID_Desc+0x28c>)
 801dbc2:	681b      	ldr	r3, [r3, #0]
 801dbc4:	2221      	movs	r2, #33	@ 0x21
 801dbc6:	705a      	strb	r2, [r3, #1]
		pHidDesc->bcdHID = 0x0111U;
 801dbc8:	4b70      	ldr	r3, [pc, #448]	@ (801dd8c <USBD_FrameWork_HID_Desc+0x28c>)
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	789a      	ldrb	r2, [r3, #2]
 801dbce:	2100      	movs	r1, #0
 801dbd0:	400a      	ands	r2, r1
 801dbd2:	1c11      	adds	r1, r2, #0
 801dbd4:	2211      	movs	r2, #17
 801dbd6:	430a      	orrs	r2, r1
 801dbd8:	709a      	strb	r2, [r3, #2]
 801dbda:	78da      	ldrb	r2, [r3, #3]
 801dbdc:	2100      	movs	r1, #0
 801dbde:	400a      	ands	r2, r1
 801dbe0:	1c11      	adds	r1, r2, #0
 801dbe2:	2201      	movs	r2, #1
 801dbe4:	430a      	orrs	r2, r1
 801dbe6:	70da      	strb	r2, [r3, #3]
		pHidDesc->bCountryCode = 0x00U;
 801dbe8:	4b68      	ldr	r3, [pc, #416]	@ (801dd8c <USBD_FrameWork_HID_Desc+0x28c>)
 801dbea:	681b      	ldr	r3, [r3, #0]
 801dbec:	2200      	movs	r2, #0
 801dbee:	711a      	strb	r2, [r3, #4]
		pHidDesc->bNumDescriptors = 0x01U;
 801dbf0:	4b66      	ldr	r3, [pc, #408]	@ (801dd8c <USBD_FrameWork_HID_Desc+0x28c>)
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	2201      	movs	r2, #1
 801dbf6:	715a      	strb	r2, [r3, #5]
		pHidDesc->bHIDDescriptorType = 0x22U;
 801dbf8:	4b64      	ldr	r3, [pc, #400]	@ (801dd8c <USBD_FrameWork_HID_Desc+0x28c>)
 801dbfa:	681b      	ldr	r3, [r3, #0]
 801dbfc:	2222      	movs	r2, #34	@ 0x22
 801dbfe:	719a      	strb	r2, [r3, #6]
		pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_MOUSE);
 801dc00:	4b62      	ldr	r3, [pc, #392]	@ (801dd8c <USBD_FrameWork_HID_Desc+0x28c>)
 801dc02:	681c      	ldr	r4, [r3, #0]
 801dc04:	2002      	movs	r0, #2
 801dc06:	f7ff fbd3 	bl	801d3b0 <USBD_HID_ReportDesc_length>
 801dc0a:	0003      	movs	r3, r0
 801dc0c:	001a      	movs	r2, r3
 801dc0e:	1de3      	adds	r3, r4, #7
 801dc10:	21ff      	movs	r1, #255	@ 0xff
 801dc12:	4011      	ands	r1, r2
 801dc14:	000c      	movs	r4, r1
 801dc16:	7819      	ldrb	r1, [r3, #0]
 801dc18:	2000      	movs	r0, #0
 801dc1a:	4001      	ands	r1, r0
 801dc1c:	1c08      	adds	r0, r1, #0
 801dc1e:	1c21      	adds	r1, r4, #0
 801dc20:	4301      	orrs	r1, r0
 801dc22:	7019      	strb	r1, [r3, #0]
 801dc24:	0a12      	lsrs	r2, r2, #8
 801dc26:	b290      	uxth	r0, r2
 801dc28:	785a      	ldrb	r2, [r3, #1]
 801dc2a:	2100      	movs	r1, #0
 801dc2c:	400a      	ands	r2, r1
 801dc2e:	1c11      	adds	r1, r2, #0
 801dc30:	1c02      	adds	r2, r0, #0
 801dc32:	430a      	orrs	r2, r1
 801dc34:	705a      	strb	r2, [r3, #1]
		*Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 801dc36:	687b      	ldr	r3, [r7, #4]
 801dc38:	681b      	ldr	r3, [r3, #0]
 801dc3a:	3309      	adds	r3, #9
 801dc3c:	001a      	movs	r2, r3
 801dc3e:	687b      	ldr	r3, [r7, #4]
 801dc40:	601a      	str	r2, [r3, #0]

		if (pdev->Speed == USBD_HIGH_SPEED)
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	781b      	ldrb	r3, [r3, #0]
 801dc46:	2b01      	cmp	r3, #1
 801dc48:	d14e      	bne.n	801dce8 <USBD_FrameWork_HID_Desc+0x1e8>
		{
			/* Append Endpoint descriptor to Configuration descriptor */
			__USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801dc4a:	687b      	ldr	r3, [r7, #4]
 801dc4c:	681a      	ldr	r2, [r3, #0]
 801dc4e:	68bb      	ldr	r3, [r7, #8]
 801dc50:	18d3      	adds	r3, r2, r3
 801dc52:	001a      	movs	r2, r3
 801dc54:	4b4e      	ldr	r3, [pc, #312]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dc56:	601a      	str	r2, [r3, #0]
 801dc58:	4b4d      	ldr	r3, [pc, #308]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	2207      	movs	r2, #7
 801dc5e:	701a      	strb	r2, [r3, #0]
 801dc60:	4b4b      	ldr	r3, [pc, #300]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	2205      	movs	r2, #5
 801dc66:	705a      	strb	r2, [r3, #1]
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	685a      	ldr	r2, [r3, #4]
 801dc6c:	4b48      	ldr	r3, [pc, #288]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	68f9      	ldr	r1, [r7, #12]
 801dc72:	2024      	movs	r0, #36	@ 0x24
 801dc74:	245c      	movs	r4, #92	@ 0x5c
 801dc76:	4362      	muls	r2, r4
 801dc78:	188a      	adds	r2, r1, r2
 801dc7a:	1812      	adds	r2, r2, r0
 801dc7c:	7812      	ldrb	r2, [r2, #0]
 801dc7e:	709a      	strb	r2, [r3, #2]
 801dc80:	4b43      	ldr	r3, [pc, #268]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	2203      	movs	r2, #3
 801dc86:	70da      	strb	r2, [r3, #3]
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	685a      	ldr	r2, [r3, #4]
 801dc8c:	4b40      	ldr	r3, [pc, #256]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dc8e:	681b      	ldr	r3, [r3, #0]
 801dc90:	68f9      	ldr	r1, [r7, #12]
 801dc92:	205c      	movs	r0, #92	@ 0x5c
 801dc94:	4342      	muls	r2, r0
 801dc96:	188a      	adds	r2, r1, r2
 801dc98:	3226      	adds	r2, #38	@ 0x26
 801dc9a:	8812      	ldrh	r2, [r2, #0]
 801dc9c:	21ff      	movs	r1, #255	@ 0xff
 801dc9e:	4011      	ands	r1, r2
 801dca0:	000c      	movs	r4, r1
 801dca2:	7919      	ldrb	r1, [r3, #4]
 801dca4:	2000      	movs	r0, #0
 801dca6:	4001      	ands	r1, r0
 801dca8:	1c08      	adds	r0, r1, #0
 801dcaa:	1c21      	adds	r1, r4, #0
 801dcac:	4301      	orrs	r1, r0
 801dcae:	7119      	strb	r1, [r3, #4]
 801dcb0:	0a12      	lsrs	r2, r2, #8
 801dcb2:	b290      	uxth	r0, r2
 801dcb4:	795a      	ldrb	r2, [r3, #5]
 801dcb6:	2100      	movs	r1, #0
 801dcb8:	400a      	ands	r2, r1
 801dcba:	1c11      	adds	r1, r2, #0
 801dcbc:	1c02      	adds	r2, r0, #0
 801dcbe:	430a      	orrs	r2, r1
 801dcc0:	715a      	strb	r2, [r3, #5]
 801dcc2:	68fb      	ldr	r3, [r7, #12]
 801dcc4:	781b      	ldrb	r3, [r3, #0]
 801dcc6:	2b01      	cmp	r3, #1
 801dcc8:	d104      	bne.n	801dcd4 <USBD_FrameWork_HID_Desc+0x1d4>
 801dcca:	4b31      	ldr	r3, [pc, #196]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	2205      	movs	r2, #5
 801dcd0:	719a      	strb	r2, [r3, #6]
 801dcd2:	e003      	b.n	801dcdc <USBD_FrameWork_HID_Desc+0x1dc>
 801dcd4:	4b2e      	ldr	r3, [pc, #184]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dcd6:	681b      	ldr	r3, [r3, #0]
 801dcd8:	2205      	movs	r2, #5
 801dcda:	719a      	strb	r2, [r3, #6]
 801dcdc:	687b      	ldr	r3, [r7, #4]
 801dcde:	681b      	ldr	r3, [r3, #0]
 801dce0:	1dda      	adds	r2, r3, #7
 801dce2:	687b      	ldr	r3, [r7, #4]
 801dce4:	601a      	str	r2, [r3, #0]
					(uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
					USBD_HID_MOUSE_EPIN_HS_BINTERVAL,
					USBD_HID_MOUSE_EPIN_FS_BINTERVAL);
		}

		break;
 801dce6:	e185      	b.n	801dff4 <USBD_FrameWork_HID_Desc+0x4f4>
			__USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801dce8:	687b      	ldr	r3, [r7, #4]
 801dcea:	681a      	ldr	r2, [r3, #0]
 801dcec:	68bb      	ldr	r3, [r7, #8]
 801dcee:	18d3      	adds	r3, r2, r3
 801dcf0:	001a      	movs	r2, r3
 801dcf2:	4b27      	ldr	r3, [pc, #156]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dcf4:	601a      	str	r2, [r3, #0]
 801dcf6:	4b26      	ldr	r3, [pc, #152]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dcf8:	681b      	ldr	r3, [r3, #0]
 801dcfa:	2207      	movs	r2, #7
 801dcfc:	701a      	strb	r2, [r3, #0]
 801dcfe:	4b24      	ldr	r3, [pc, #144]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dd00:	681b      	ldr	r3, [r3, #0]
 801dd02:	2205      	movs	r2, #5
 801dd04:	705a      	strb	r2, [r3, #1]
 801dd06:	68fb      	ldr	r3, [r7, #12]
 801dd08:	685a      	ldr	r2, [r3, #4]
 801dd0a:	4b21      	ldr	r3, [pc, #132]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dd0c:	681b      	ldr	r3, [r3, #0]
 801dd0e:	68f9      	ldr	r1, [r7, #12]
 801dd10:	2024      	movs	r0, #36	@ 0x24
 801dd12:	245c      	movs	r4, #92	@ 0x5c
 801dd14:	4362      	muls	r2, r4
 801dd16:	188a      	adds	r2, r1, r2
 801dd18:	1812      	adds	r2, r2, r0
 801dd1a:	7812      	ldrb	r2, [r2, #0]
 801dd1c:	709a      	strb	r2, [r3, #2]
 801dd1e:	4b1c      	ldr	r3, [pc, #112]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dd20:	681b      	ldr	r3, [r3, #0]
 801dd22:	2203      	movs	r2, #3
 801dd24:	70da      	strb	r2, [r3, #3]
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	685a      	ldr	r2, [r3, #4]
 801dd2a:	4b19      	ldr	r3, [pc, #100]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dd2c:	681b      	ldr	r3, [r3, #0]
 801dd2e:	68f9      	ldr	r1, [r7, #12]
 801dd30:	205c      	movs	r0, #92	@ 0x5c
 801dd32:	4342      	muls	r2, r0
 801dd34:	188a      	adds	r2, r1, r2
 801dd36:	3226      	adds	r2, #38	@ 0x26
 801dd38:	8812      	ldrh	r2, [r2, #0]
 801dd3a:	21ff      	movs	r1, #255	@ 0xff
 801dd3c:	4011      	ands	r1, r2
 801dd3e:	000c      	movs	r4, r1
 801dd40:	7919      	ldrb	r1, [r3, #4]
 801dd42:	2000      	movs	r0, #0
 801dd44:	4001      	ands	r1, r0
 801dd46:	1c08      	adds	r0, r1, #0
 801dd48:	1c21      	adds	r1, r4, #0
 801dd4a:	4301      	orrs	r1, r0
 801dd4c:	7119      	strb	r1, [r3, #4]
 801dd4e:	0a12      	lsrs	r2, r2, #8
 801dd50:	b290      	uxth	r0, r2
 801dd52:	795a      	ldrb	r2, [r3, #5]
 801dd54:	2100      	movs	r1, #0
 801dd56:	400a      	ands	r2, r1
 801dd58:	1c11      	adds	r1, r2, #0
 801dd5a:	1c02      	adds	r2, r0, #0
 801dd5c:	430a      	orrs	r2, r1
 801dd5e:	715a      	strb	r2, [r3, #5]
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	781b      	ldrb	r3, [r3, #0]
 801dd64:	2b01      	cmp	r3, #1
 801dd66:	d104      	bne.n	801dd72 <USBD_FrameWork_HID_Desc+0x272>
 801dd68:	4b09      	ldr	r3, [pc, #36]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dd6a:	681b      	ldr	r3, [r3, #0]
 801dd6c:	2205      	movs	r2, #5
 801dd6e:	719a      	strb	r2, [r3, #6]
 801dd70:	e003      	b.n	801dd7a <USBD_FrameWork_HID_Desc+0x27a>
 801dd72:	4b07      	ldr	r3, [pc, #28]	@ (801dd90 <USBD_FrameWork_HID_Desc+0x290>)
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	2205      	movs	r2, #5
 801dd78:	719a      	strb	r2, [r3, #6]
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	1dda      	adds	r2, r3, #7
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	601a      	str	r2, [r3, #0]
		break;
 801dd84:	e136      	b.n	801dff4 <USBD_FrameWork_HID_Desc+0x4f4>
 801dd86:	46c0      	nop			@ (mov r8, r8)
 801dd88:	20011da8 	.word	0x20011da8
 801dd8c:	20011dac 	.word	0x20011dac
 801dd90:	20011db0 	.word	0x20011db0

#if USBD_HID_KEYBOARD_ACTIVATED == 1U
	case INTERFACE_HID_KEYBOARD:

		/* Append HID Interface descriptor to Configuration descriptor */
		__USBD_FRAMEWORK_SET_IF(pdev->tclasslist[pdev->classId].Ifs[0], 0U,
 801dd94:	687b      	ldr	r3, [r7, #4]
 801dd96:	681a      	ldr	r2, [r3, #0]
 801dd98:	68bb      	ldr	r3, [r7, #8]
 801dd9a:	18d3      	adds	r3, r2, r3
 801dd9c:	001a      	movs	r2, r3
 801dd9e:	4ba6      	ldr	r3, [pc, #664]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801dda0:	601a      	str	r2, [r3, #0]
 801dda2:	4ba5      	ldr	r3, [pc, #660]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801dda4:	681b      	ldr	r3, [r3, #0]
 801dda6:	2209      	movs	r2, #9
 801dda8:	701a      	strb	r2, [r3, #0]
 801ddaa:	4ba3      	ldr	r3, [pc, #652]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801ddac:	681b      	ldr	r3, [r3, #0]
 801ddae:	2204      	movs	r2, #4
 801ddb0:	705a      	strb	r2, [r3, #1]
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	685a      	ldr	r2, [r3, #4]
 801ddb6:	4ba0      	ldr	r3, [pc, #640]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	68f9      	ldr	r1, [r7, #12]
 801ddbc:	205a      	movs	r0, #90	@ 0x5a
 801ddbe:	245c      	movs	r4, #92	@ 0x5c
 801ddc0:	4362      	muls	r2, r4
 801ddc2:	188a      	adds	r2, r1, r2
 801ddc4:	1812      	adds	r2, r2, r0
 801ddc6:	7812      	ldrb	r2, [r2, #0]
 801ddc8:	709a      	strb	r2, [r3, #2]
 801ddca:	4b9b      	ldr	r3, [pc, #620]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801ddcc:	681b      	ldr	r3, [r3, #0]
 801ddce:	2200      	movs	r2, #0
 801ddd0:	70da      	strb	r2, [r3, #3]
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	685b      	ldr	r3, [r3, #4]
 801ddd6:	68fa      	ldr	r2, [r7, #12]
 801ddd8:	215c      	movs	r1, #92	@ 0x5c
 801ddda:	434b      	muls	r3, r1
 801dddc:	18d3      	adds	r3, r2, r3
 801ddde:	331c      	adds	r3, #28
 801dde0:	681a      	ldr	r2, [r3, #0]
 801dde2:	4b95      	ldr	r3, [pc, #596]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801dde4:	681b      	ldr	r3, [r3, #0]
 801dde6:	b2d2      	uxtb	r2, r2
 801dde8:	711a      	strb	r2, [r3, #4]
 801ddea:	4b93      	ldr	r3, [pc, #588]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801ddec:	681b      	ldr	r3, [r3, #0]
 801ddee:	2203      	movs	r2, #3
 801ddf0:	715a      	strb	r2, [r3, #5]
 801ddf2:	4b91      	ldr	r3, [pc, #580]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801ddf4:	681b      	ldr	r3, [r3, #0]
 801ddf6:	2201      	movs	r2, #1
 801ddf8:	719a      	strb	r2, [r3, #6]
 801ddfa:	4b8f      	ldr	r3, [pc, #572]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801ddfc:	681b      	ldr	r3, [r3, #0]
 801ddfe:	2201      	movs	r2, #1
 801de00:	71da      	strb	r2, [r3, #7]
 801de02:	4b8d      	ldr	r3, [pc, #564]	@ (801e038 <USBD_FrameWork_HID_Desc+0x538>)
 801de04:	681b      	ldr	r3, [r3, #0]
 801de06:	2200      	movs	r2, #0
 801de08:	721a      	strb	r2, [r3, #8]
 801de0a:	687b      	ldr	r3, [r7, #4]
 801de0c:	681b      	ldr	r3, [r3, #0]
 801de0e:	3309      	adds	r3, #9
 801de10:	001a      	movs	r2, r3
 801de12:	687b      	ldr	r3, [r7, #4]
 801de14:	601a      	str	r2, [r3, #0]
				(uint8_t)(pdev->tclasslist[pdev->classId].NumEps),
				UX_DEVICE_CLASS_HID_CLASS,
				0x01U, INTERFACE_HID_KEYBOARD, 0U);

		/* Append HID Functional descriptor to Configuration descriptor */
		pHidDesc = ((USBD_HIDDescTypedef *)(pConf + *Sze));
 801de16:	687b      	ldr	r3, [r7, #4]
 801de18:	681a      	ldr	r2, [r3, #0]
 801de1a:	68bb      	ldr	r3, [r7, #8]
 801de1c:	18d3      	adds	r3, r2, r3
 801de1e:	001a      	movs	r2, r3
 801de20:	4b86      	ldr	r3, [pc, #536]	@ (801e03c <USBD_FrameWork_HID_Desc+0x53c>)
 801de22:	601a      	str	r2, [r3, #0]
		pHidDesc->bLength = (uint8_t)sizeof(USBD_HIDDescTypedef);
 801de24:	4b85      	ldr	r3, [pc, #532]	@ (801e03c <USBD_FrameWork_HID_Desc+0x53c>)
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	2209      	movs	r2, #9
 801de2a:	701a      	strb	r2, [r3, #0]
		pHidDesc->bDescriptorType = UX_DEVICE_CLASS_HID_DESCRIPTOR_HID;
 801de2c:	4b83      	ldr	r3, [pc, #524]	@ (801e03c <USBD_FrameWork_HID_Desc+0x53c>)
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	2221      	movs	r2, #33	@ 0x21
 801de32:	705a      	strb	r2, [r3, #1]
		pHidDesc->bcdHID = 0x0111U;
 801de34:	4b81      	ldr	r3, [pc, #516]	@ (801e03c <USBD_FrameWork_HID_Desc+0x53c>)
 801de36:	681b      	ldr	r3, [r3, #0]
 801de38:	789a      	ldrb	r2, [r3, #2]
 801de3a:	2100      	movs	r1, #0
 801de3c:	400a      	ands	r2, r1
 801de3e:	1c11      	adds	r1, r2, #0
 801de40:	2211      	movs	r2, #17
 801de42:	430a      	orrs	r2, r1
 801de44:	709a      	strb	r2, [r3, #2]
 801de46:	78da      	ldrb	r2, [r3, #3]
 801de48:	2100      	movs	r1, #0
 801de4a:	400a      	ands	r2, r1
 801de4c:	1c11      	adds	r1, r2, #0
 801de4e:	2201      	movs	r2, #1
 801de50:	430a      	orrs	r2, r1
 801de52:	70da      	strb	r2, [r3, #3]
		pHidDesc->bCountryCode = 0x00U;
 801de54:	4b79      	ldr	r3, [pc, #484]	@ (801e03c <USBD_FrameWork_HID_Desc+0x53c>)
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	2200      	movs	r2, #0
 801de5a:	711a      	strb	r2, [r3, #4]
		pHidDesc->bNumDescriptors = 0x01U;
 801de5c:	4b77      	ldr	r3, [pc, #476]	@ (801e03c <USBD_FrameWork_HID_Desc+0x53c>)
 801de5e:	681b      	ldr	r3, [r3, #0]
 801de60:	2201      	movs	r2, #1
 801de62:	715a      	strb	r2, [r3, #5]
		pHidDesc->bHIDDescriptorType = 0x22U;
 801de64:	4b75      	ldr	r3, [pc, #468]	@ (801e03c <USBD_FrameWork_HID_Desc+0x53c>)
 801de66:	681b      	ldr	r3, [r3, #0]
 801de68:	2222      	movs	r2, #34	@ 0x22
 801de6a:	719a      	strb	r2, [r3, #6]
		pHidDesc->wDescriptorLength = USBD_HID_ReportDesc_length(INTERFACE_HID_KEYBOARD);
 801de6c:	4b73      	ldr	r3, [pc, #460]	@ (801e03c <USBD_FrameWork_HID_Desc+0x53c>)
 801de6e:	681c      	ldr	r4, [r3, #0]
 801de70:	2001      	movs	r0, #1
 801de72:	f7ff fa9d 	bl	801d3b0 <USBD_HID_ReportDesc_length>
 801de76:	0003      	movs	r3, r0
 801de78:	001a      	movs	r2, r3
 801de7a:	1de3      	adds	r3, r4, #7
 801de7c:	21ff      	movs	r1, #255	@ 0xff
 801de7e:	4011      	ands	r1, r2
 801de80:	000c      	movs	r4, r1
 801de82:	7819      	ldrb	r1, [r3, #0]
 801de84:	2000      	movs	r0, #0
 801de86:	4001      	ands	r1, r0
 801de88:	1c08      	adds	r0, r1, #0
 801de8a:	1c21      	adds	r1, r4, #0
 801de8c:	4301      	orrs	r1, r0
 801de8e:	7019      	strb	r1, [r3, #0]
 801de90:	0a12      	lsrs	r2, r2, #8
 801de92:	b290      	uxth	r0, r2
 801de94:	785a      	ldrb	r2, [r3, #1]
 801de96:	2100      	movs	r1, #0
 801de98:	400a      	ands	r2, r1
 801de9a:	1c11      	adds	r1, r2, #0
 801de9c:	1c02      	adds	r2, r0, #0
 801de9e:	430a      	orrs	r2, r1
 801dea0:	705a      	strb	r2, [r3, #1]
		*Sze += (uint32_t)sizeof(USBD_HIDDescTypedef);
 801dea2:	687b      	ldr	r3, [r7, #4]
 801dea4:	681b      	ldr	r3, [r3, #0]
 801dea6:	3309      	adds	r3, #9
 801dea8:	001a      	movs	r2, r3
 801deaa:	687b      	ldr	r3, [r7, #4]
 801deac:	601a      	str	r2, [r3, #0]

		if (pdev->Speed == USBD_HIGH_SPEED)
 801deae:	68fb      	ldr	r3, [r7, #12]
 801deb0:	781b      	ldrb	r3, [r3, #0]
 801deb2:	2b01      	cmp	r3, #1
 801deb4:	d14e      	bne.n	801df54 <USBD_FrameWork_HID_Desc+0x454>
		{
			/* Append Endpoint descriptor to Configuration descriptor */
			__USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	681a      	ldr	r2, [r3, #0]
 801deba:	68bb      	ldr	r3, [r7, #8]
 801debc:	18d3      	adds	r3, r2, r3
 801debe:	001a      	movs	r2, r3
 801dec0:	4b5f      	ldr	r3, [pc, #380]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801dec2:	601a      	str	r2, [r3, #0]
 801dec4:	4b5e      	ldr	r3, [pc, #376]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	2207      	movs	r2, #7
 801deca:	701a      	strb	r2, [r3, #0]
 801decc:	4b5c      	ldr	r3, [pc, #368]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	2205      	movs	r2, #5
 801ded2:	705a      	strb	r2, [r3, #1]
 801ded4:	68fb      	ldr	r3, [r7, #12]
 801ded6:	685a      	ldr	r2, [r3, #4]
 801ded8:	4b59      	ldr	r3, [pc, #356]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801deda:	681b      	ldr	r3, [r3, #0]
 801dedc:	68f9      	ldr	r1, [r7, #12]
 801dede:	2024      	movs	r0, #36	@ 0x24
 801dee0:	245c      	movs	r4, #92	@ 0x5c
 801dee2:	4362      	muls	r2, r4
 801dee4:	188a      	adds	r2, r1, r2
 801dee6:	1812      	adds	r2, r2, r0
 801dee8:	7812      	ldrb	r2, [r2, #0]
 801deea:	709a      	strb	r2, [r3, #2]
 801deec:	4b54      	ldr	r3, [pc, #336]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	2203      	movs	r2, #3
 801def2:	70da      	strb	r2, [r3, #3]
 801def4:	68fb      	ldr	r3, [r7, #12]
 801def6:	685a      	ldr	r2, [r3, #4]
 801def8:	4b51      	ldr	r3, [pc, #324]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801defa:	681b      	ldr	r3, [r3, #0]
 801defc:	68f9      	ldr	r1, [r7, #12]
 801defe:	205c      	movs	r0, #92	@ 0x5c
 801df00:	4342      	muls	r2, r0
 801df02:	188a      	adds	r2, r1, r2
 801df04:	3226      	adds	r2, #38	@ 0x26
 801df06:	8812      	ldrh	r2, [r2, #0]
 801df08:	21ff      	movs	r1, #255	@ 0xff
 801df0a:	4011      	ands	r1, r2
 801df0c:	000c      	movs	r4, r1
 801df0e:	7919      	ldrb	r1, [r3, #4]
 801df10:	2000      	movs	r0, #0
 801df12:	4001      	ands	r1, r0
 801df14:	1c08      	adds	r0, r1, #0
 801df16:	1c21      	adds	r1, r4, #0
 801df18:	4301      	orrs	r1, r0
 801df1a:	7119      	strb	r1, [r3, #4]
 801df1c:	0a12      	lsrs	r2, r2, #8
 801df1e:	b290      	uxth	r0, r2
 801df20:	795a      	ldrb	r2, [r3, #5]
 801df22:	2100      	movs	r1, #0
 801df24:	400a      	ands	r2, r1
 801df26:	1c11      	adds	r1, r2, #0
 801df28:	1c02      	adds	r2, r0, #0
 801df2a:	430a      	orrs	r2, r1
 801df2c:	715a      	strb	r2, [r3, #5]
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	781b      	ldrb	r3, [r3, #0]
 801df32:	2b01      	cmp	r3, #1
 801df34:	d104      	bne.n	801df40 <USBD_FrameWork_HID_Desc+0x440>
 801df36:	4b42      	ldr	r3, [pc, #264]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	2205      	movs	r2, #5
 801df3c:	719a      	strb	r2, [r3, #6]
 801df3e:	e003      	b.n	801df48 <USBD_FrameWork_HID_Desc+0x448>
 801df40:	4b3f      	ldr	r3, [pc, #252]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801df42:	681b      	ldr	r3, [r3, #0]
 801df44:	2205      	movs	r2, #5
 801df46:	719a      	strb	r2, [r3, #6]
 801df48:	687b      	ldr	r3, [r7, #4]
 801df4a:	681b      	ldr	r3, [r3, #0]
 801df4c:	1dda      	adds	r2, r3, #7
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	601a      	str	r2, [r3, #0]
					(uint16_t)pdev->tclasslist[pdev->classId].Eps[0].size,
					USBD_HID_KEYBOARD_EPIN_HS_BINTERVAL,
					USBD_HID_KEYBOARD_EPIN_FS_BINTERVAL);
		}

		break;
 801df52:	e04f      	b.n	801dff4 <USBD_FrameWork_HID_Desc+0x4f4>
			__USBD_FRAMEWORK_SET_EP(pdev->tclasslist[pdev->classId].Eps[0].add,
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	681a      	ldr	r2, [r3, #0]
 801df58:	68bb      	ldr	r3, [r7, #8]
 801df5a:	18d3      	adds	r3, r2, r3
 801df5c:	001a      	movs	r2, r3
 801df5e:	4b38      	ldr	r3, [pc, #224]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801df60:	601a      	str	r2, [r3, #0]
 801df62:	4b37      	ldr	r3, [pc, #220]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801df64:	681b      	ldr	r3, [r3, #0]
 801df66:	2207      	movs	r2, #7
 801df68:	701a      	strb	r2, [r3, #0]
 801df6a:	4b35      	ldr	r3, [pc, #212]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	2205      	movs	r2, #5
 801df70:	705a      	strb	r2, [r3, #1]
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	685a      	ldr	r2, [r3, #4]
 801df76:	4b32      	ldr	r3, [pc, #200]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	68f9      	ldr	r1, [r7, #12]
 801df7c:	2024      	movs	r0, #36	@ 0x24
 801df7e:	245c      	movs	r4, #92	@ 0x5c
 801df80:	4362      	muls	r2, r4
 801df82:	188a      	adds	r2, r1, r2
 801df84:	1812      	adds	r2, r2, r0
 801df86:	7812      	ldrb	r2, [r2, #0]
 801df88:	709a      	strb	r2, [r3, #2]
 801df8a:	4b2d      	ldr	r3, [pc, #180]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801df8c:	681b      	ldr	r3, [r3, #0]
 801df8e:	2203      	movs	r2, #3
 801df90:	70da      	strb	r2, [r3, #3]
 801df92:	68fb      	ldr	r3, [r7, #12]
 801df94:	685a      	ldr	r2, [r3, #4]
 801df96:	4b2a      	ldr	r3, [pc, #168]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	68f9      	ldr	r1, [r7, #12]
 801df9c:	205c      	movs	r0, #92	@ 0x5c
 801df9e:	4342      	muls	r2, r0
 801dfa0:	188a      	adds	r2, r1, r2
 801dfa2:	3226      	adds	r2, #38	@ 0x26
 801dfa4:	8812      	ldrh	r2, [r2, #0]
 801dfa6:	21ff      	movs	r1, #255	@ 0xff
 801dfa8:	4011      	ands	r1, r2
 801dfaa:	000c      	movs	r4, r1
 801dfac:	7919      	ldrb	r1, [r3, #4]
 801dfae:	2000      	movs	r0, #0
 801dfb0:	4001      	ands	r1, r0
 801dfb2:	1c08      	adds	r0, r1, #0
 801dfb4:	1c21      	adds	r1, r4, #0
 801dfb6:	4301      	orrs	r1, r0
 801dfb8:	7119      	strb	r1, [r3, #4]
 801dfba:	0a12      	lsrs	r2, r2, #8
 801dfbc:	b290      	uxth	r0, r2
 801dfbe:	795a      	ldrb	r2, [r3, #5]
 801dfc0:	2100      	movs	r1, #0
 801dfc2:	400a      	ands	r2, r1
 801dfc4:	1c11      	adds	r1, r2, #0
 801dfc6:	1c02      	adds	r2, r0, #0
 801dfc8:	430a      	orrs	r2, r1
 801dfca:	715a      	strb	r2, [r3, #5]
 801dfcc:	68fb      	ldr	r3, [r7, #12]
 801dfce:	781b      	ldrb	r3, [r3, #0]
 801dfd0:	2b01      	cmp	r3, #1
 801dfd2:	d104      	bne.n	801dfde <USBD_FrameWork_HID_Desc+0x4de>
 801dfd4:	4b1a      	ldr	r3, [pc, #104]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	2205      	movs	r2, #5
 801dfda:	719a      	strb	r2, [r3, #6]
 801dfdc:	e003      	b.n	801dfe6 <USBD_FrameWork_HID_Desc+0x4e6>
 801dfde:	4b18      	ldr	r3, [pc, #96]	@ (801e040 <USBD_FrameWork_HID_Desc+0x540>)
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	2205      	movs	r2, #5
 801dfe4:	719a      	strb	r2, [r3, #6]
 801dfe6:	687b      	ldr	r3, [r7, #4]
 801dfe8:	681b      	ldr	r3, [r3, #0]
 801dfea:	1dda      	adds	r2, r3, #7
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	601a      	str	r2, [r3, #0]
		break;
 801dff0:	e000      	b.n	801dff4 <USBD_FrameWork_HID_Desc+0x4f4>

#endif /* USBD_HID_KEYBOARD_ACTIVATED == 1U */

	default:
		break;
 801dff2:	46c0      	nop			@ (mov r8, r8)
	}

	/* Update Config Descriptor and IAD descriptor */
	((USBD_ConfigDescTypedef *)pConf)->bNumInterfaces += 1U;
 801dff4:	68bb      	ldr	r3, [r7, #8]
 801dff6:	791a      	ldrb	r2, [r3, #4]
 801dff8:	68bb      	ldr	r3, [r7, #8]
 801dffa:	3201      	adds	r2, #1
 801dffc:	b2d2      	uxtb	r2, r2
 801dffe:	711a      	strb	r2, [r3, #4]
	((USBD_ConfigDescTypedef *)pConf)->wDescriptorLength = *Sze;
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	681a      	ldr	r2, [r3, #0]
 801e004:	68bb      	ldr	r3, [r7, #8]
 801e006:	b292      	uxth	r2, r2
 801e008:	21ff      	movs	r1, #255	@ 0xff
 801e00a:	4011      	ands	r1, r2
 801e00c:	000c      	movs	r4, r1
 801e00e:	7899      	ldrb	r1, [r3, #2]
 801e010:	2000      	movs	r0, #0
 801e012:	4001      	ands	r1, r0
 801e014:	1c08      	adds	r0, r1, #0
 801e016:	1c21      	adds	r1, r4, #0
 801e018:	4301      	orrs	r1, r0
 801e01a:	7099      	strb	r1, [r3, #2]
 801e01c:	0a12      	lsrs	r2, r2, #8
 801e01e:	b290      	uxth	r0, r2
 801e020:	78da      	ldrb	r2, [r3, #3]
 801e022:	2100      	movs	r1, #0
 801e024:	400a      	ands	r2, r1
 801e026:	1c11      	adds	r1, r2, #0
 801e028:	1c02      	adds	r2, r0, #0
 801e02a:	430a      	orrs	r2, r1
 801e02c:	70da      	strb	r2, [r3, #3]

}
 801e02e:	46c0      	nop			@ (mov r8, r8)
 801e030:	46bd      	mov	sp, r7
 801e032:	b005      	add	sp, #20
 801e034:	bd90      	pop	{r4, r7, pc}
 801e036:	46c0      	nop			@ (mov r8, r8)
 801e038:	20011da8 	.word	0x20011da8
 801e03c:	20011dac 	.word	0x20011dac
 801e040:	20011db0 	.word	0x20011db0

0801e044 <malloc>:
 801e044:	b510      	push	{r4, lr}
 801e046:	4b03      	ldr	r3, [pc, #12]	@ (801e054 <malloc+0x10>)
 801e048:	0001      	movs	r1, r0
 801e04a:	6818      	ldr	r0, [r3, #0]
 801e04c:	f000 f826 	bl	801e09c <_malloc_r>
 801e050:	bd10      	pop	{r4, pc}
 801e052:	46c0      	nop			@ (mov r8, r8)
 801e054:	20000274 	.word	0x20000274

0801e058 <sbrk_aligned>:
 801e058:	b570      	push	{r4, r5, r6, lr}
 801e05a:	4e0f      	ldr	r6, [pc, #60]	@ (801e098 <sbrk_aligned+0x40>)
 801e05c:	000d      	movs	r5, r1
 801e05e:	6831      	ldr	r1, [r6, #0]
 801e060:	0004      	movs	r4, r0
 801e062:	2900      	cmp	r1, #0
 801e064:	d102      	bne.n	801e06c <sbrk_aligned+0x14>
 801e066:	f000 f8b1 	bl	801e1cc <_sbrk_r>
 801e06a:	6030      	str	r0, [r6, #0]
 801e06c:	0029      	movs	r1, r5
 801e06e:	0020      	movs	r0, r4
 801e070:	f000 f8ac 	bl	801e1cc <_sbrk_r>
 801e074:	1c43      	adds	r3, r0, #1
 801e076:	d103      	bne.n	801e080 <sbrk_aligned+0x28>
 801e078:	2501      	movs	r5, #1
 801e07a:	426d      	negs	r5, r5
 801e07c:	0028      	movs	r0, r5
 801e07e:	bd70      	pop	{r4, r5, r6, pc}
 801e080:	2303      	movs	r3, #3
 801e082:	1cc5      	adds	r5, r0, #3
 801e084:	439d      	bics	r5, r3
 801e086:	42a8      	cmp	r0, r5
 801e088:	d0f8      	beq.n	801e07c <sbrk_aligned+0x24>
 801e08a:	1a29      	subs	r1, r5, r0
 801e08c:	0020      	movs	r0, r4
 801e08e:	f000 f89d 	bl	801e1cc <_sbrk_r>
 801e092:	3001      	adds	r0, #1
 801e094:	d1f2      	bne.n	801e07c <sbrk_aligned+0x24>
 801e096:	e7ef      	b.n	801e078 <sbrk_aligned+0x20>
 801e098:	20011db4 	.word	0x20011db4

0801e09c <_malloc_r>:
 801e09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e09e:	2203      	movs	r2, #3
 801e0a0:	1ccb      	adds	r3, r1, #3
 801e0a2:	4393      	bics	r3, r2
 801e0a4:	3308      	adds	r3, #8
 801e0a6:	0005      	movs	r5, r0
 801e0a8:	001f      	movs	r7, r3
 801e0aa:	2b0c      	cmp	r3, #12
 801e0ac:	d234      	bcs.n	801e118 <_malloc_r+0x7c>
 801e0ae:	270c      	movs	r7, #12
 801e0b0:	42b9      	cmp	r1, r7
 801e0b2:	d833      	bhi.n	801e11c <_malloc_r+0x80>
 801e0b4:	0028      	movs	r0, r5
 801e0b6:	f000 f871 	bl	801e19c <__malloc_lock>
 801e0ba:	4e37      	ldr	r6, [pc, #220]	@ (801e198 <_malloc_r+0xfc>)
 801e0bc:	6833      	ldr	r3, [r6, #0]
 801e0be:	001c      	movs	r4, r3
 801e0c0:	2c00      	cmp	r4, #0
 801e0c2:	d12f      	bne.n	801e124 <_malloc_r+0x88>
 801e0c4:	0039      	movs	r1, r7
 801e0c6:	0028      	movs	r0, r5
 801e0c8:	f7ff ffc6 	bl	801e058 <sbrk_aligned>
 801e0cc:	0004      	movs	r4, r0
 801e0ce:	1c43      	adds	r3, r0, #1
 801e0d0:	d15f      	bne.n	801e192 <_malloc_r+0xf6>
 801e0d2:	6834      	ldr	r4, [r6, #0]
 801e0d4:	9400      	str	r4, [sp, #0]
 801e0d6:	9b00      	ldr	r3, [sp, #0]
 801e0d8:	2b00      	cmp	r3, #0
 801e0da:	d14a      	bne.n	801e172 <_malloc_r+0xd6>
 801e0dc:	2c00      	cmp	r4, #0
 801e0de:	d052      	beq.n	801e186 <_malloc_r+0xea>
 801e0e0:	6823      	ldr	r3, [r4, #0]
 801e0e2:	0028      	movs	r0, r5
 801e0e4:	18e3      	adds	r3, r4, r3
 801e0e6:	9900      	ldr	r1, [sp, #0]
 801e0e8:	9301      	str	r3, [sp, #4]
 801e0ea:	f000 f86f 	bl	801e1cc <_sbrk_r>
 801e0ee:	9b01      	ldr	r3, [sp, #4]
 801e0f0:	4283      	cmp	r3, r0
 801e0f2:	d148      	bne.n	801e186 <_malloc_r+0xea>
 801e0f4:	6823      	ldr	r3, [r4, #0]
 801e0f6:	0028      	movs	r0, r5
 801e0f8:	1aff      	subs	r7, r7, r3
 801e0fa:	0039      	movs	r1, r7
 801e0fc:	f7ff ffac 	bl	801e058 <sbrk_aligned>
 801e100:	3001      	adds	r0, #1
 801e102:	d040      	beq.n	801e186 <_malloc_r+0xea>
 801e104:	6823      	ldr	r3, [r4, #0]
 801e106:	19db      	adds	r3, r3, r7
 801e108:	6023      	str	r3, [r4, #0]
 801e10a:	6833      	ldr	r3, [r6, #0]
 801e10c:	685a      	ldr	r2, [r3, #4]
 801e10e:	2a00      	cmp	r2, #0
 801e110:	d133      	bne.n	801e17a <_malloc_r+0xde>
 801e112:	9b00      	ldr	r3, [sp, #0]
 801e114:	6033      	str	r3, [r6, #0]
 801e116:	e019      	b.n	801e14c <_malloc_r+0xb0>
 801e118:	2b00      	cmp	r3, #0
 801e11a:	dac9      	bge.n	801e0b0 <_malloc_r+0x14>
 801e11c:	230c      	movs	r3, #12
 801e11e:	602b      	str	r3, [r5, #0]
 801e120:	2000      	movs	r0, #0
 801e122:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e124:	6821      	ldr	r1, [r4, #0]
 801e126:	1bc9      	subs	r1, r1, r7
 801e128:	d420      	bmi.n	801e16c <_malloc_r+0xd0>
 801e12a:	290b      	cmp	r1, #11
 801e12c:	d90a      	bls.n	801e144 <_malloc_r+0xa8>
 801e12e:	19e2      	adds	r2, r4, r7
 801e130:	6027      	str	r7, [r4, #0]
 801e132:	42a3      	cmp	r3, r4
 801e134:	d104      	bne.n	801e140 <_malloc_r+0xa4>
 801e136:	6032      	str	r2, [r6, #0]
 801e138:	6863      	ldr	r3, [r4, #4]
 801e13a:	6011      	str	r1, [r2, #0]
 801e13c:	6053      	str	r3, [r2, #4]
 801e13e:	e005      	b.n	801e14c <_malloc_r+0xb0>
 801e140:	605a      	str	r2, [r3, #4]
 801e142:	e7f9      	b.n	801e138 <_malloc_r+0x9c>
 801e144:	6862      	ldr	r2, [r4, #4]
 801e146:	42a3      	cmp	r3, r4
 801e148:	d10e      	bne.n	801e168 <_malloc_r+0xcc>
 801e14a:	6032      	str	r2, [r6, #0]
 801e14c:	0028      	movs	r0, r5
 801e14e:	f000 f82d 	bl	801e1ac <__malloc_unlock>
 801e152:	0020      	movs	r0, r4
 801e154:	2207      	movs	r2, #7
 801e156:	300b      	adds	r0, #11
 801e158:	1d23      	adds	r3, r4, #4
 801e15a:	4390      	bics	r0, r2
 801e15c:	1ac2      	subs	r2, r0, r3
 801e15e:	4298      	cmp	r0, r3
 801e160:	d0df      	beq.n	801e122 <_malloc_r+0x86>
 801e162:	1a1b      	subs	r3, r3, r0
 801e164:	50a3      	str	r3, [r4, r2]
 801e166:	e7dc      	b.n	801e122 <_malloc_r+0x86>
 801e168:	605a      	str	r2, [r3, #4]
 801e16a:	e7ef      	b.n	801e14c <_malloc_r+0xb0>
 801e16c:	0023      	movs	r3, r4
 801e16e:	6864      	ldr	r4, [r4, #4]
 801e170:	e7a6      	b.n	801e0c0 <_malloc_r+0x24>
 801e172:	9c00      	ldr	r4, [sp, #0]
 801e174:	6863      	ldr	r3, [r4, #4]
 801e176:	9300      	str	r3, [sp, #0]
 801e178:	e7ad      	b.n	801e0d6 <_malloc_r+0x3a>
 801e17a:	001a      	movs	r2, r3
 801e17c:	685b      	ldr	r3, [r3, #4]
 801e17e:	42a3      	cmp	r3, r4
 801e180:	d1fb      	bne.n	801e17a <_malloc_r+0xde>
 801e182:	2300      	movs	r3, #0
 801e184:	e7da      	b.n	801e13c <_malloc_r+0xa0>
 801e186:	230c      	movs	r3, #12
 801e188:	0028      	movs	r0, r5
 801e18a:	602b      	str	r3, [r5, #0]
 801e18c:	f000 f80e 	bl	801e1ac <__malloc_unlock>
 801e190:	e7c6      	b.n	801e120 <_malloc_r+0x84>
 801e192:	6007      	str	r7, [r0, #0]
 801e194:	e7da      	b.n	801e14c <_malloc_r+0xb0>
 801e196:	46c0      	nop			@ (mov r8, r8)
 801e198:	20011db8 	.word	0x20011db8

0801e19c <__malloc_lock>:
 801e19c:	b510      	push	{r4, lr}
 801e19e:	4802      	ldr	r0, [pc, #8]	@ (801e1a8 <__malloc_lock+0xc>)
 801e1a0:	f000 f850 	bl	801e244 <__retarget_lock_acquire_recursive>
 801e1a4:	bd10      	pop	{r4, pc}
 801e1a6:	46c0      	nop			@ (mov r8, r8)
 801e1a8:	20011ef8 	.word	0x20011ef8

0801e1ac <__malloc_unlock>:
 801e1ac:	b510      	push	{r4, lr}
 801e1ae:	4802      	ldr	r0, [pc, #8]	@ (801e1b8 <__malloc_unlock+0xc>)
 801e1b0:	f000 f849 	bl	801e246 <__retarget_lock_release_recursive>
 801e1b4:	bd10      	pop	{r4, pc}
 801e1b6:	46c0      	nop			@ (mov r8, r8)
 801e1b8:	20011ef8 	.word	0x20011ef8

0801e1bc <memset>:
 801e1bc:	0003      	movs	r3, r0
 801e1be:	1882      	adds	r2, r0, r2
 801e1c0:	4293      	cmp	r3, r2
 801e1c2:	d100      	bne.n	801e1c6 <memset+0xa>
 801e1c4:	4770      	bx	lr
 801e1c6:	7019      	strb	r1, [r3, #0]
 801e1c8:	3301      	adds	r3, #1
 801e1ca:	e7f9      	b.n	801e1c0 <memset+0x4>

0801e1cc <_sbrk_r>:
 801e1cc:	2300      	movs	r3, #0
 801e1ce:	b570      	push	{r4, r5, r6, lr}
 801e1d0:	4d06      	ldr	r5, [pc, #24]	@ (801e1ec <_sbrk_r+0x20>)
 801e1d2:	0004      	movs	r4, r0
 801e1d4:	0008      	movs	r0, r1
 801e1d6:	602b      	str	r3, [r5, #0]
 801e1d8:	f7e9 fac0 	bl	800775c <_sbrk>
 801e1dc:	1c43      	adds	r3, r0, #1
 801e1de:	d103      	bne.n	801e1e8 <_sbrk_r+0x1c>
 801e1e0:	682b      	ldr	r3, [r5, #0]
 801e1e2:	2b00      	cmp	r3, #0
 801e1e4:	d000      	beq.n	801e1e8 <_sbrk_r+0x1c>
 801e1e6:	6023      	str	r3, [r4, #0]
 801e1e8:	bd70      	pop	{r4, r5, r6, pc}
 801e1ea:	46c0      	nop			@ (mov r8, r8)
 801e1ec:	20011ef4 	.word	0x20011ef4

0801e1f0 <__errno>:
 801e1f0:	4b01      	ldr	r3, [pc, #4]	@ (801e1f8 <__errno+0x8>)
 801e1f2:	6818      	ldr	r0, [r3, #0]
 801e1f4:	4770      	bx	lr
 801e1f6:	46c0      	nop			@ (mov r8, r8)
 801e1f8:	20000274 	.word	0x20000274

0801e1fc <__libc_init_array>:
 801e1fc:	b570      	push	{r4, r5, r6, lr}
 801e1fe:	2600      	movs	r6, #0
 801e200:	4c0c      	ldr	r4, [pc, #48]	@ (801e234 <__libc_init_array+0x38>)
 801e202:	4d0d      	ldr	r5, [pc, #52]	@ (801e238 <__libc_init_array+0x3c>)
 801e204:	1b64      	subs	r4, r4, r5
 801e206:	10a4      	asrs	r4, r4, #2
 801e208:	42a6      	cmp	r6, r4
 801e20a:	d109      	bne.n	801e220 <__libc_init_array+0x24>
 801e20c:	2600      	movs	r6, #0
 801e20e:	f000 f835 	bl	801e27c <_init>
 801e212:	4c0a      	ldr	r4, [pc, #40]	@ (801e23c <__libc_init_array+0x40>)
 801e214:	4d0a      	ldr	r5, [pc, #40]	@ (801e240 <__libc_init_array+0x44>)
 801e216:	1b64      	subs	r4, r4, r5
 801e218:	10a4      	asrs	r4, r4, #2
 801e21a:	42a6      	cmp	r6, r4
 801e21c:	d105      	bne.n	801e22a <__libc_init_array+0x2e>
 801e21e:	bd70      	pop	{r4, r5, r6, pc}
 801e220:	00b3      	lsls	r3, r6, #2
 801e222:	58eb      	ldr	r3, [r5, r3]
 801e224:	4798      	blx	r3
 801e226:	3601      	adds	r6, #1
 801e228:	e7ee      	b.n	801e208 <__libc_init_array+0xc>
 801e22a:	00b3      	lsls	r3, r6, #2
 801e22c:	58eb      	ldr	r3, [r5, r3]
 801e22e:	4798      	blx	r3
 801e230:	3601      	adds	r6, #1
 801e232:	e7f2      	b.n	801e21a <__libc_init_array+0x1e>
 801e234:	0801e844 	.word	0x0801e844
 801e238:	0801e844 	.word	0x0801e844
 801e23c:	0801e848 	.word	0x0801e848
 801e240:	0801e844 	.word	0x0801e844

0801e244 <__retarget_lock_acquire_recursive>:
 801e244:	4770      	bx	lr

0801e246 <__retarget_lock_release_recursive>:
 801e246:	4770      	bx	lr

0801e248 <__aeabi_memcpy>:
 801e248:	b510      	push	{r4, lr}
 801e24a:	f000 f80d 	bl	801e268 <memcpy>
 801e24e:	bd10      	pop	{r4, pc}

0801e250 <__aeabi_memset>:
 801e250:	000b      	movs	r3, r1
 801e252:	b510      	push	{r4, lr}
 801e254:	0011      	movs	r1, r2
 801e256:	001a      	movs	r2, r3
 801e258:	f7ff ffb0 	bl	801e1bc <memset>
 801e25c:	bd10      	pop	{r4, pc}

0801e25e <__aeabi_memclr>:
 801e25e:	b510      	push	{r4, lr}
 801e260:	2200      	movs	r2, #0
 801e262:	f7ff fff5 	bl	801e250 <__aeabi_memset>
 801e266:	bd10      	pop	{r4, pc}

0801e268 <memcpy>:
 801e268:	2300      	movs	r3, #0
 801e26a:	b510      	push	{r4, lr}
 801e26c:	429a      	cmp	r2, r3
 801e26e:	d100      	bne.n	801e272 <memcpy+0xa>
 801e270:	bd10      	pop	{r4, pc}
 801e272:	5ccc      	ldrb	r4, [r1, r3]
 801e274:	54c4      	strb	r4, [r0, r3]
 801e276:	3301      	adds	r3, #1
 801e278:	e7f8      	b.n	801e26c <memcpy+0x4>
	...

0801e27c <_init>:
 801e27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e27e:	46c0      	nop			@ (mov r8, r8)
 801e280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e282:	bc08      	pop	{r3}
 801e284:	469e      	mov	lr, r3
 801e286:	4770      	bx	lr

0801e288 <_fini>:
 801e288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e28a:	46c0      	nop			@ (mov r8, r8)
 801e28c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e28e:	bc08      	pop	{r3}
 801e290:	469e      	mov	lr, r3
 801e292:	4770      	bx	lr
