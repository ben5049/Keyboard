
keyboard_left_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ae0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08004ba0  08004ba0  00005ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c34  08004c34  0000600c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c34  08004c34  0000600c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c34  08004c34  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c34  08004c34  00005c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c38  08004c38  00005c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004c3c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000000c  08004c48  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08004c48  00006178  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef1b  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023db  00000000  00000000  00014f4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  00017330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c3b  00000000  00000000  000182d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d198  00000000  00000000  00018f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f21  00000000  00000000  000360ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd5f5  00000000  00000000  00048fcc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001065c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c8  00000000  00000000  00106604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00109ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004b88 	.word	0x08004b88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08004b88 	.word	0x08004b88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1  (1)
  * @note Peripheral marked with (1) are not available all devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APBENR1, Periphs);
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <LL_APB1_GRP1_EnableClock+0x28>)
 80003fe:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8000400:	4b06      	ldr	r3, [pc, #24]	@ (800041c <LL_APB1_GRP1_EnableClock+0x28>)
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	430a      	orrs	r2, r1
 8000406:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APBENR1, Periphs);
 8000408:	4b04      	ldr	r3, [pc, #16]	@ (800041c <LL_APB1_GRP1_EnableClock+0x28>)
 800040a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800040c:	687a      	ldr	r2, [r7, #4]
 800040e:	4013      	ands	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000412:	68fb      	ldr	r3, [r7, #12]
}
 8000414:	46c0      	nop			@ (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b004      	add	sp, #16
 800041a:	bd80      	pop	{r7, pc}
 800041c:	40021000 	.word	0x40021000

08000420 <LL_IOP_GRP1_EnableClock>:
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOE
  *         @arg @ref LL_IOP_GRP1_PERIPH_GPIOF
  * @retval None
  */
__STATIC_INLINE void LL_IOP_GRP1_EnableClock(uint32_t Periphs)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->IOPENR, Periphs);
 8000428:	4b07      	ldr	r3, [pc, #28]	@ (8000448 <LL_IOP_GRP1_EnableClock+0x28>)
 800042a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800042c:	4b06      	ldr	r3, [pc, #24]	@ (8000448 <LL_IOP_GRP1_EnableClock+0x28>)
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	430a      	orrs	r2, r1
 8000432:	635a      	str	r2, [r3, #52]	@ 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->IOPENR, Periphs);
 8000434:	4b04      	ldr	r3, [pc, #16]	@ (8000448 <LL_IOP_GRP1_EnableClock+0x28>)
 8000436:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	4013      	ands	r3, r2
 800043c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800043e:	68fb      	ldr	r3, [r7, #12]
}
 8000440:	46c0      	nop			@ (mov r8, r8)
 8000442:	46bd      	mov	sp, r7
 8000444:	b004      	add	sp, #16
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000

0800044c <HAL_TIM_PWM_PulseFinishedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b082      	sub	sp, #8
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4){
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a05      	ldr	r2, [pc, #20]	@ (8000470 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d104      	bne.n	8000468 <HAL_TIM_PWM_PulseFinishedCallback+0x1c>
		HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_2);
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2104      	movs	r1, #4
 8000462:	0018      	movs	r0, r3
 8000464:	f003 f82c 	bl	80034c0 <HAL_TIM_PWM_Stop_DMA>
	}

}
 8000468:	46c0      	nop			@ (mov r8, r8)
 800046a:	46bd      	mov	sp, r7
 800046c:	b002      	add	sp, #8
 800046e:	bd80      	pop	{r7, pc}
 8000470:	40000800 	.word	0x40000800

08000474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000474:	b590      	push	{r4, r7, lr}
 8000476:	4c8e      	ldr	r4, [pc, #568]	@ (80006b0 <main+0x23c>)
 8000478:	44a5      	add	sp, r4
 800047a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	PixelRGB_t pixel[NUM_PIXELS] = {0};
 800047c:	4b8d      	ldr	r3, [pc, #564]	@ (80006b4 <main+0x240>)
 800047e:	18fb      	adds	r3, r7, r3
 8000480:	0018      	movs	r0, r3
 8000482:	236c      	movs	r3, #108	@ 0x6c
 8000484:	001a      	movs	r2, r3
 8000486:	2100      	movs	r1, #0
 8000488:	f004 fb52 	bl	8004b30 <memset>
	uint32_t dmaBuffer[DMA_BUFF_SIZE] = {0};
 800048c:	4b8a      	ldr	r3, [pc, #552]	@ (80006b8 <main+0x244>)
 800048e:	4a8b      	ldr	r2, [pc, #556]	@ (80006bc <main+0x248>)
 8000490:	189b      	adds	r3, r3, r2
 8000492:	19db      	adds	r3, r3, r7
 8000494:	0018      	movs	r0, r3
 8000496:	4b8a      	ldr	r3, [pc, #552]	@ (80006c0 <main+0x24c>)
 8000498:	001a      	movs	r2, r3
 800049a:	2100      	movs	r1, #0
 800049c:	f004 fb48 	bl	8004b30 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fdf6 	bl	8001090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f91e 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 fb2c 	bl	8000b04 <MX_GPIO_Init>
  MX_DMA_Init();
 80004ac:	f000 fb0c 	bl	8000ac8 <MX_DMA_Init>
  MX_I2C2_Init();
 80004b0:	f000 f976 	bl	80007a0 <MX_I2C2_Init>
  MX_TIM3_Init();
 80004b4:	f000 f9b4 	bl	8000820 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004b8:	f000 fa16 	bl	80008e8 <MX_TIM4_Init>
  MX_UCPD1_Init();
 80004bc:	f000 fa92 	bl	80009e4 <MX_UCPD1_Init>
  MX_UCPD2_Init();
 80004c0:	f000 facc 	bl	8000a5c <MX_UCPD2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	k = 0;
 80004c4:	2300      	movs	r3, #0
 80004c6:	4a7f      	ldr	r2, [pc, #508]	@ (80006c4 <main+0x250>)
 80004c8:	18ba      	adds	r2, r7, r2
 80004ca:	6013      	str	r3, [r2, #0]
	stepSize = 4;
 80004cc:	4b7e      	ldr	r3, [pc, #504]	@ (80006c8 <main+0x254>)
 80004ce:	18fb      	adds	r3, r7, r3
 80004d0:	2204      	movs	r2, #4
 80004d2:	801a      	strh	r2, [r3, #0]
	while (1)
	{

		HAL_GPIO_TogglePin(STAT1_LED_GPIO_Port, STAT1_LED_Pin);
 80004d4:	4b7d      	ldr	r3, [pc, #500]	@ (80006cc <main+0x258>)
 80004d6:	2108      	movs	r1, #8
 80004d8:	0018      	movs	r0, r3
 80004da:	f001 fc54 	bl	8001d86 <HAL_GPIO_TogglePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		for (i = (NUM_PIXELS - 1); i > 0; i--)
 80004de:	231a      	movs	r3, #26
 80004e0:	22aa      	movs	r2, #170	@ 0xaa
 80004e2:	0112      	lsls	r2, r2, #4
 80004e4:	18ba      	adds	r2, r7, r2
 80004e6:	6013      	str	r3, [r2, #0]
 80004e8:	e012      	b.n	8000510 <main+0x9c>
		{
			pixel[i].data = pixel[i-1].data;
 80004ea:	20aa      	movs	r0, #170	@ 0xaa
 80004ec:	0100      	lsls	r0, r0, #4
 80004ee:	183b      	adds	r3, r7, r0
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	1e5a      	subs	r2, r3, #1
 80004f4:	4c6f      	ldr	r4, [pc, #444]	@ (80006b4 <main+0x240>)
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	0092      	lsls	r2, r2, #2
 80004fa:	58d1      	ldr	r1, [r2, r3]
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	183a      	adds	r2, r7, r0
 8000500:	6812      	ldr	r2, [r2, #0]
 8000502:	0092      	lsls	r2, r2, #2
 8000504:	50d1      	str	r1, [r2, r3]
		for (i = (NUM_PIXELS - 1); i > 0; i--)
 8000506:	183b      	adds	r3, r7, r0
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	3b01      	subs	r3, #1
 800050c:	183a      	adds	r2, r7, r0
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	23aa      	movs	r3, #170	@ 0xaa
 8000512:	011b      	lsls	r3, r3, #4
 8000514:	18fb      	adds	r3, r7, r3
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	dce6      	bgt.n	80004ea <main+0x76>
		}

		if (k < 255)
 800051c:	4969      	ldr	r1, [pc, #420]	@ (80006c4 <main+0x250>)
 800051e:	187b      	adds	r3, r7, r1
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	2bfe      	cmp	r3, #254	@ 0xfe
 8000524:	dc14      	bgt.n	8000550 <main+0xdc>
		{
			pixel[0].color.g = 254 - k; //[254, 0]
 8000526:	187b      	adds	r3, r7, r1
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	2202      	movs	r2, #2
 800052e:	4252      	negs	r2, r2
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	b2da      	uxtb	r2, r3
 8000534:	485f      	ldr	r0, [pc, #380]	@ (80006b4 <main+0x240>)
 8000536:	183b      	adds	r3, r7, r0
 8000538:	709a      	strb	r2, [r3, #2]
			pixel[0].color.r =  k + 1;  //[1, 255]
 800053a:	187b      	adds	r3, r7, r1
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	3301      	adds	r3, #1
 8000542:	b2da      	uxtb	r2, r3
 8000544:	183b      	adds	r3, r7, r0
 8000546:	705a      	strb	r2, [r3, #1]
			pixel[0].color.b = 0;
 8000548:	183b      	adds	r3, r7, r0
 800054a:	2200      	movs	r2, #0
 800054c:	701a      	strb	r2, [r3, #0]
 800054e:	e03c      	b.n	80005ca <main+0x156>
		}
		else if (k < 510)
 8000550:	495c      	ldr	r1, [pc, #368]	@ (80006c4 <main+0x250>)
 8000552:	187b      	adds	r3, r7, r1
 8000554:	681a      	ldr	r2, [r3, #0]
 8000556:	23ff      	movs	r3, #255	@ 0xff
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	429a      	cmp	r2, r3
 800055c:	da1a      	bge.n	8000594 <main+0x120>
		{
			pixel[0].color.g = 0;
 800055e:	4855      	ldr	r0, [pc, #340]	@ (80006b4 <main+0x240>)
 8000560:	183b      	adds	r3, r7, r0
 8000562:	2200      	movs	r2, #0
 8000564:	709a      	strb	r2, [r3, #2]
			pixel[0].color.r = 509 - k; //[254, 0]
 8000566:	187b      	adds	r3, r7, r1
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	2203      	movs	r2, #3
 800056e:	4252      	negs	r2, r2
 8000570:	1ad3      	subs	r3, r2, r3
 8000572:	b2da      	uxtb	r2, r3
 8000574:	183b      	adds	r3, r7, r0
 8000576:	705a      	strb	r2, [r3, #1]
			pixel[0].color.b = k - 254; //[1, 255]
 8000578:	187b      	adds	r3, r7, r1
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	b2db      	uxtb	r3, r3
 800057e:	3302      	adds	r3, #2
 8000580:	b2da      	uxtb	r2, r3
 8000582:	183b      	adds	r3, r7, r0
 8000584:	701a      	strb	r2, [r3, #0]
			j++;
 8000586:	4a52      	ldr	r2, [pc, #328]	@ (80006d0 <main+0x25c>)
 8000588:	18bb      	adds	r3, r7, r2
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	18ba      	adds	r2, r7, r2
 8000590:	6013      	str	r3, [r2, #0]
 8000592:	e01a      	b.n	80005ca <main+0x156>
		}
		else if (k < 765)
 8000594:	494b      	ldr	r1, [pc, #300]	@ (80006c4 <main+0x250>)
 8000596:	187b      	adds	r3, r7, r1
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	23bf      	movs	r3, #191	@ 0xbf
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	429a      	cmp	r2, r3
 80005a0:	dc13      	bgt.n	80005ca <main+0x156>
		{
			pixel[0].color.g = k - 509; //[1, 255];
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	3303      	adds	r3, #3
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	4841      	ldr	r0, [pc, #260]	@ (80006b4 <main+0x240>)
 80005ae:	183b      	adds	r3, r7, r0
 80005b0:	709a      	strb	r2, [r3, #2]
			pixel[0].color.r = 0;
 80005b2:	183b      	adds	r3, r7, r0
 80005b4:	2200      	movs	r2, #0
 80005b6:	705a      	strb	r2, [r3, #1]
			pixel[0].color.b = 764 - k; //[254, 0]
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2204      	movs	r2, #4
 80005c0:	4252      	negs	r2, r2
 80005c2:	1ad3      	subs	r3, r2, r3
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	183b      	adds	r3, r7, r0
 80005c8:	701a      	strb	r2, [r3, #0]
		}
		k = (k + stepSize) % 765;
 80005ca:	4b3f      	ldr	r3, [pc, #252]	@ (80006c8 <main+0x254>)
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	881a      	ldrh	r2, [r3, #0]
 80005d0:	4c3c      	ldr	r4, [pc, #240]	@ (80006c4 <main+0x250>)
 80005d2:	193b      	adds	r3, r7, r4
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	18d3      	adds	r3, r2, r3
 80005d8:	493e      	ldr	r1, [pc, #248]	@ (80006d4 <main+0x260>)
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ff04 	bl	80003e8 <__aeabi_idivmod>
 80005e0:	000b      	movs	r3, r1
 80005e2:	193a      	adds	r2, r7, r4
 80005e4:	6013      	str	r3, [r2, #0]

		// not so bright
//		pixel[0].color.g >>= 2;
//		pixel[0].color.r >>= 2;
//		pixel[0].color.b >>= 2;
		pixel[0].color.g = 0;
 80005e6:	4933      	ldr	r1, [pc, #204]	@ (80006b4 <main+0x240>)
 80005e8:	187b      	adds	r3, r7, r1
 80005ea:	2200      	movs	r2, #0
 80005ec:	709a      	strb	r2, [r3, #2]
		pixel[0].color.r = 0;
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	2200      	movs	r2, #0
 80005f2:	705a      	strb	r2, [r3, #1]
		pixel[0].color.b = 0;
 80005f4:	187b      	adds	r3, r7, r1
 80005f6:	2200      	movs	r2, #0
 80005f8:	701a      	strb	r2, [r3, #0]

		pBuff = dmaBuffer;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4a36      	ldr	r2, [pc, #216]	@ (80006d8 <main+0x264>)
 80005fe:	18ba      	adds	r2, r7, r2
 8000600:	6013      	str	r3, [r2, #0]
		for (i = 0; i < NUM_PIXELS; i++)
 8000602:	2300      	movs	r3, #0
 8000604:	22aa      	movs	r2, #170	@ 0xaa
 8000606:	0112      	lsls	r2, r2, #4
 8000608:	18ba      	adds	r2, r7, r2
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	e037      	b.n	800067e <main+0x20a>
		{
			for (j = 23; j >= 0; j--)
 800060e:	2317      	movs	r3, #23
 8000610:	4a2f      	ldr	r2, [pc, #188]	@ (80006d0 <main+0x25c>)
 8000612:	18ba      	adds	r2, r7, r2
 8000614:	6013      	str	r3, [r2, #0]
 8000616:	e026      	b.n	8000666 <main+0x1f2>
			{
				if ((pixel[i].data >> j) & 0x01)
 8000618:	4b26      	ldr	r3, [pc, #152]	@ (80006b4 <main+0x240>)
 800061a:	18fb      	adds	r3, r7, r3
 800061c:	22aa      	movs	r2, #170	@ 0xaa
 800061e:	0112      	lsls	r2, r2, #4
 8000620:	18ba      	adds	r2, r7, r2
 8000622:	6812      	ldr	r2, [r2, #0]
 8000624:	0092      	lsls	r2, r2, #2
 8000626:	58d2      	ldr	r2, [r2, r3]
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <main+0x25c>)
 800062a:	18fb      	adds	r3, r7, r3
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	40da      	lsrs	r2, r3
 8000630:	0013      	movs	r3, r2
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	d005      	beq.n	8000644 <main+0x1d0>
				{
					*pBuff = NEOPIXEL_ONE;
 8000638:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <main+0x264>)
 800063a:	18fb      	adds	r3, r7, r3
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	2226      	movs	r2, #38	@ 0x26
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	e004      	b.n	800064e <main+0x1da>
				}
				else
				{
					*pBuff = NEOPIXEL_ZERO;
 8000644:	4b24      	ldr	r3, [pc, #144]	@ (80006d8 <main+0x264>)
 8000646:	18fb      	adds	r3, r7, r3
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	2213      	movs	r2, #19
 800064c:	601a      	str	r2, [r3, #0]
				}
				pBuff++;
 800064e:	4a22      	ldr	r2, [pc, #136]	@ (80006d8 <main+0x264>)
 8000650:	18bb      	adds	r3, r7, r2
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	3304      	adds	r3, #4
 8000656:	18ba      	adds	r2, r7, r2
 8000658:	6013      	str	r3, [r2, #0]
			for (j = 23; j >= 0; j--)
 800065a:	4a1d      	ldr	r2, [pc, #116]	@ (80006d0 <main+0x25c>)
 800065c:	18bb      	adds	r3, r7, r2
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3b01      	subs	r3, #1
 8000662:	18ba      	adds	r2, r7, r2
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <main+0x25c>)
 8000668:	18fb      	adds	r3, r7, r3
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	dad3      	bge.n	8000618 <main+0x1a4>
		for (i = 0; i < NUM_PIXELS; i++)
 8000670:	22aa      	movs	r2, #170	@ 0xaa
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	18bb      	adds	r3, r7, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	18ba      	adds	r2, r7, r2
 800067c:	6013      	str	r3, [r2, #0]
 800067e:	23aa      	movs	r3, #170	@ 0xaa
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	18fb      	adds	r3, r7, r3
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	2b1a      	cmp	r3, #26
 8000688:	ddc1      	ble.n	800060e <main+0x19a>
			}
		}
		dmaBuffer[DMA_BUFF_SIZE - 1] = 0; // last element must be 0!
 800068a:	4b0b      	ldr	r3, [pc, #44]	@ (80006b8 <main+0x244>)
 800068c:	4a0b      	ldr	r2, [pc, #44]	@ (80006bc <main+0x248>)
 800068e:	189b      	adds	r3, r3, r2
 8000690:	19da      	adds	r2, r3, r7
 8000692:	23a2      	movs	r3, #162	@ 0xa2
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	2100      	movs	r1, #0
 8000698:	50d1      	str	r1, [r2, r3]

		HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_2, dmaBuffer, DMA_BUFF_SIZE);
 800069a:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <main+0x268>)
 800069c:	1d3a      	adds	r2, r7, #4
 800069e:	4810      	ldr	r0, [pc, #64]	@ (80006e0 <main+0x26c>)
 80006a0:	2104      	movs	r1, #4
 80006a2:	f002 fd07 	bl	80030b4 <HAL_TIM_PWM_Start_DMA>

		HAL_Delay(10);
 80006a6:	200a      	movs	r0, #10
 80006a8:	f000 fd78 	bl	800119c <HAL_Delay>
		HAL_GPIO_TogglePin(STAT1_LED_GPIO_Port, STAT1_LED_Pin);
 80006ac:	e712      	b.n	80004d4 <main+0x60>
 80006ae:	46c0      	nop			@ (mov r8, r8)
 80006b0:	fffff554 	.word	0xfffff554
 80006b4:	00000a28 	.word	0x00000a28
 80006b8:	fffff55c 	.word	0xfffff55c
 80006bc:	00000aa8 	.word	0x00000aa8
 80006c0:	00000a24 	.word	0x00000a24
 80006c4:	00000a98 	.word	0x00000a98
 80006c8:	00000a96 	.word	0x00000a96
 80006cc:	50000c00 	.word	0x50000c00
 80006d0:	00000a9c 	.word	0x00000a9c
 80006d4:	000002fd 	.word	0x000002fd
 80006d8:	00000aa4 	.word	0x00000aa4
 80006dc:	00000289 	.word	0x00000289
 80006e0:	200000c8 	.word	0x200000c8

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b095      	sub	sp, #84	@ 0x54
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	2414      	movs	r4, #20
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	233c      	movs	r3, #60	@ 0x3c
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f004 fa1b 	bl	8004b30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	0018      	movs	r0, r3
 80006fe:	2310      	movs	r3, #16
 8000700:	001a      	movs	r2, r3
 8000702:	2100      	movs	r1, #0
 8000704:	f004 fa14 	bl	8004b30 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2380      	movs	r3, #128	@ 0x80
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fc93 	bl	8002038 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2202      	movs	r2, #2
 8000716:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2280      	movs	r2, #128	@ 0x80
 800071c:	0052      	lsls	r2, r2, #1
 800071e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000720:	0021      	movs	r1, r4
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2240      	movs	r2, #64	@ 0x40
 800072c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2202      	movs	r2, #2
 8000732:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2202      	movs	r2, #2
 8000738:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2208      	movs	r2, #8
 8000744:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	0292      	lsls	r2, r2, #10
 800074c:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	22c0      	movs	r2, #192	@ 0xc0
 8000752:	04d2      	lsls	r2, r2, #19
 8000754:	635a      	str	r2, [r3, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2280      	movs	r2, #128	@ 0x80
 800075a:	0592      	lsls	r2, r2, #22
 800075c:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	187b      	adds	r3, r7, r1
 8000760:	0018      	movs	r0, r3
 8000762:	f001 fca9 	bl	80020b8 <HAL_RCC_OscConfig>
 8000766:	1e03      	subs	r3, r0, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800076a:	f000 faa3 	bl	8000cb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2207      	movs	r2, #7
 8000772:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2202      	movs	r2, #2
 8000778:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077a:	1d3b      	adds	r3, r7, #4
 800077c:	2200      	movs	r2, #0
 800077e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2200      	movs	r2, #0
 8000784:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2102      	movs	r1, #2
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fff4 	bl	8002778 <HAL_RCC_ClockConfig>
 8000790:	1e03      	subs	r3, r0, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000794:	f000 fa8e 	bl	8000cb4 <Error_Handler>
  }
}
 8000798:	46c0      	nop			@ (mov r8, r8)
 800079a:	46bd      	mov	sp, r7
 800079c:	b015      	add	sp, #84	@ 0x54
 800079e:	bd90      	pop	{r4, r7, pc}

080007a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000818 <MX_I2C2_Init+0x78>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007ac:	4a1b      	ldr	r2, [pc, #108]	@ (800081c <MX_I2C2_Init+0x7c>)
 80007ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80007b0:	4b18      	ldr	r3, [pc, #96]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80007c2:	4b14      	ldr	r3, [pc, #80]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007c8:	4b12      	ldr	r3, [pc, #72]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80007da:	4b0e      	ldr	r3, [pc, #56]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f001 faed 	bl	8001dbc <HAL_I2C_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80007e6:	f000 fa65 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007ec:	2100      	movs	r1, #0
 80007ee:	0018      	movs	r0, r3
 80007f0:	f001 fb8a 	bl	8001f08 <HAL_I2CEx_ConfigAnalogFilter>
 80007f4:	1e03      	subs	r3, r0, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007f8:	f000 fa5c 	bl	8000cb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007fc:	4b05      	ldr	r3, [pc, #20]	@ (8000814 <MX_I2C2_Init+0x74>)
 80007fe:	2100      	movs	r1, #0
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fbcd 	bl	8001fa0 <HAL_I2CEx_ConfigDigitalFilter>
 8000806:	1e03      	subs	r3, r0, #0
 8000808:	d001      	beq.n	800080e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800080a:	f000 fa53 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000028 	.word	0x20000028
 8000818:	40005800 	.word	0x40005800
 800081c:	10707dbc 	.word	0x10707dbc

08000820 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000820:	b590      	push	{r4, r7, lr}
 8000822:	b08d      	sub	sp, #52	@ 0x34
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000826:	240c      	movs	r4, #12
 8000828:	193b      	adds	r3, r7, r4
 800082a:	0018      	movs	r0, r3
 800082c:	2324      	movs	r3, #36	@ 0x24
 800082e:	001a      	movs	r2, r3
 8000830:	2100      	movs	r1, #0
 8000832:	f004 f97d 	bl	8004b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	003b      	movs	r3, r7
 8000838:	0018      	movs	r0, r3
 800083a:	230c      	movs	r3, #12
 800083c:	001a      	movs	r2, r3
 800083e:	2100      	movs	r1, #0
 8000840:	f004 f976 	bl	8004b30 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000844:	4b25      	ldr	r3, [pc, #148]	@ (80008dc <MX_TIM3_Init+0xbc>)
 8000846:	4a26      	ldr	r2, [pc, #152]	@ (80008e0 <MX_TIM3_Init+0xc0>)
 8000848:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800084a:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <MX_TIM3_Init+0xbc>)
 800084c:	2200      	movs	r2, #0
 800084e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <MX_TIM3_Init+0xbc>)
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000856:	4b21      	ldr	r3, [pc, #132]	@ (80008dc <MX_TIM3_Init+0xbc>)
 8000858:	4a22      	ldr	r2, [pc, #136]	@ (80008e4 <MX_TIM3_Init+0xc4>)
 800085a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800085c:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <MX_TIM3_Init+0xbc>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000862:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <MX_TIM3_Init+0xbc>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000868:	0021      	movs	r1, r4
 800086a:	187b      	adds	r3, r7, r1
 800086c:	2203      	movs	r2, #3
 800086e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000870:	187b      	adds	r3, r7, r1
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2201      	movs	r2, #1
 800087a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2201      	movs	r2, #1
 8000892:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80008a0:	187a      	adds	r2, r7, r1
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_TIM3_Init+0xbc>)
 80008a4:	0011      	movs	r1, r2
 80008a6:	0018      	movs	r0, r3
 80008a8:	f002 fefa 	bl	80036a0 <HAL_TIM_Encoder_Init>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008b0:	f000 fa00 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b4:	003b      	movs	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	003b      	movs	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c0:	003a      	movs	r2, r7
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_TIM3_Init+0xbc>)
 80008c4:	0011      	movs	r1, r2
 80008c6:	0018      	movs	r0, r3
 80008c8:	f003 ff90 	bl	80047ec <HAL_TIMEx_MasterConfigSynchronization>
 80008cc:	1e03      	subs	r3, r0, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80008d0:	f000 f9f0 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b00d      	add	sp, #52	@ 0x34
 80008da:	bd90      	pop	{r4, r7, pc}
 80008dc:	2000007c 	.word	0x2000007c
 80008e0:	40000400 	.word	0x40000400
 80008e4:	0000ffff 	.word	0x0000ffff

080008e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	@ 0x38
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ee:	2328      	movs	r3, #40	@ 0x28
 80008f0:	18fb      	adds	r3, r7, r3
 80008f2:	0018      	movs	r0, r3
 80008f4:	2310      	movs	r3, #16
 80008f6:	001a      	movs	r2, r3
 80008f8:	2100      	movs	r1, #0
 80008fa:	f004 f919 	bl	8004b30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	231c      	movs	r3, #28
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	230c      	movs	r3, #12
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f004 f911 	bl	8004b30 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800090e:	003b      	movs	r3, r7
 8000910:	0018      	movs	r0, r3
 8000912:	231c      	movs	r3, #28
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f004 f90a 	bl	8004b30 <memset>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800091c:	4b2f      	ldr	r3, [pc, #188]	@ (80009dc <MX_TIM4_Init+0xf4>)
 800091e:	4a30      	ldr	r2, [pc, #192]	@ (80009e0 <MX_TIM4_Init+0xf8>)
 8000920:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000922:	4b2e      	ldr	r3, [pc, #184]	@ (80009dc <MX_TIM4_Init+0xf4>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <MX_TIM4_Init+0xf4>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 76;
 800092e:	4b2b      	ldr	r3, [pc, #172]	@ (80009dc <MX_TIM4_Init+0xf4>)
 8000930:	224c      	movs	r2, #76	@ 0x4c
 8000932:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b29      	ldr	r3, [pc, #164]	@ (80009dc <MX_TIM4_Init+0xf4>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b28      	ldr	r3, [pc, #160]	@ (80009dc <MX_TIM4_Init+0xf4>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000940:	4b26      	ldr	r3, [pc, #152]	@ (80009dc <MX_TIM4_Init+0xf4>)
 8000942:	0018      	movs	r0, r3
 8000944:	f002 fafe 	bl	8002f44 <HAL_TIM_Base_Init>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800094c:	f000 f9b2 	bl	8000cb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	2128      	movs	r1, #40	@ 0x28
 8000952:	187b      	adds	r3, r7, r1
 8000954:	2280      	movs	r2, #128	@ 0x80
 8000956:	0152      	lsls	r2, r2, #5
 8000958:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800095a:	187a      	adds	r2, r7, r1
 800095c:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <MX_TIM4_Init+0xf4>)
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f003 f94d 	bl	8003c00 <HAL_TIM_ConfigClockSource>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800096a:	f000 f9a3 	bl	8000cb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800096e:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <MX_TIM4_Init+0xf4>)
 8000970:	0018      	movs	r0, r3
 8000972:	f002 fb3f 	bl	8002ff4 <HAL_TIM_PWM_Init>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800097a:	f000 f99b 	bl	8000cb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097e:	211c      	movs	r1, #28
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000986:	187b      	adds	r3, r7, r1
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800098c:	187a      	adds	r2, r7, r1
 800098e:	4b13      	ldr	r3, [pc, #76]	@ (80009dc <MX_TIM4_Init+0xf4>)
 8000990:	0011      	movs	r1, r2
 8000992:	0018      	movs	r0, r3
 8000994:	f003 ff2a 	bl	80047ec <HAL_TIMEx_MasterConfigSynchronization>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 800099c:	f000 f98a 	bl	8000cb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009a0:	003b      	movs	r3, r7
 80009a2:	2260      	movs	r2, #96	@ 0x60
 80009a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009a6:	003b      	movs	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ac:	003b      	movs	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b2:	003b      	movs	r3, r7
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009b8:	0039      	movs	r1, r7
 80009ba:	4b08      	ldr	r3, [pc, #32]	@ (80009dc <MX_TIM4_Init+0xf4>)
 80009bc:	2204      	movs	r2, #4
 80009be:	0018      	movs	r0, r3
 80009c0:	f003 f81e 	bl	8003a00 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM4_Init+0xe4>
  {
    Error_Handler();
 80009c8:	f000 f974 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009cc:	4b03      	ldr	r3, [pc, #12]	@ (80009dc <MX_TIM4_Init+0xf4>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f000 fab8 	bl	8000f44 <HAL_TIM_MspPostInit>

}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	b00e      	add	sp, #56	@ 0x38
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	200000c8 	.word	0x200000c8
 80009e0:	40000800 	.word	0x40000800

080009e4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b086      	sub	sp, #24
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	003b      	movs	r3, r7
 80009ec:	0018      	movs	r0, r3
 80009ee:	2318      	movs	r3, #24
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f004 f89c 	bl	8004b30 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD1);
 80009f8:	2380      	movs	r3, #128	@ 0x80
 80009fa:	049b      	lsls	r3, r3, #18
 80009fc:	0018      	movs	r0, r3
 80009fe:	f7ff fcf9 	bl	80003f4 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOB);
 8000a02:	2002      	movs	r0, #2
 8000a04:	f7ff fd0c 	bl	8000420 <LL_IOP_GRP1_EnableClock>
  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOA);
 8000a08:	2001      	movs	r0, #1
 8000a0a:	f7ff fd09 	bl	8000420 <LL_IOP_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB15   ------> UCPD1_CC2
  PA8   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000a0e:	003b      	movs	r3, r7
 8000a10:	2280      	movs	r2, #128	@ 0x80
 8000a12:	0212      	lsls	r2, r2, #8
 8000a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a16:	003b      	movs	r3, r7
 8000a18:	2203      	movs	r2, #3
 8000a1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a1c:	003b      	movs	r3, r7
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a22:	003b      	movs	r3, r7
 8000a24:	4a0c      	ldr	r2, [pc, #48]	@ (8000a58 <MX_UCPD1_Init+0x74>)
 8000a26:	0019      	movs	r1, r3
 8000a28:	0010      	movs	r0, r2
 8000a2a:	f004 f826 	bl	8004a7a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000a2e:	003b      	movs	r3, r7
 8000a30:	2280      	movs	r2, #128	@ 0x80
 8000a32:	0052      	lsls	r2, r2, #1
 8000a34:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a36:	003b      	movs	r3, r7
 8000a38:	2203      	movs	r2, #3
 8000a3a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a3c:	003b      	movs	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	003a      	movs	r2, r7
 8000a44:	23a0      	movs	r3, #160	@ 0xa0
 8000a46:	05db      	lsls	r3, r3, #23
 8000a48:	0011      	movs	r1, r2
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f004 f815 	bl	8004a7a <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	b006      	add	sp, #24
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	50000400 	.word	0x50000400

08000a5c <MX_UCPD2_Init>:
  * @brief UCPD2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD2_Init 0 */

  /* USER CODE END UCPD2_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	003b      	movs	r3, r7
 8000a64:	0018      	movs	r0, r3
 8000a66:	2318      	movs	r3, #24
 8000a68:	001a      	movs	r2, r3
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f004 f860 	bl	8004b30 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UCPD2);
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	04db      	lsls	r3, r3, #19
 8000a74:	0018      	movs	r0, r3
 8000a76:	f7ff fcbd 	bl	80003f4 <LL_APB1_GRP1_EnableClock>

  LL_IOP_GRP1_EnableClock(LL_IOP_GRP1_PERIPH_GPIOD);
 8000a7a:	2008      	movs	r0, #8
 8000a7c:	f7ff fcd0 	bl	8000420 <LL_IOP_GRP1_EnableClock>
  /**UCPD2 GPIO Configuration
  PD0   ------> UCPD2_CC1
  PD2   ------> UCPD2_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000a80:	003b      	movs	r3, r7
 8000a82:	2201      	movs	r2, #1
 8000a84:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000a86:	003b      	movs	r3, r7
 8000a88:	2203      	movs	r2, #3
 8000a8a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a8c:	003b      	movs	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a92:	003b      	movs	r3, r7
 8000a94:	4a0b      	ldr	r2, [pc, #44]	@ (8000ac4 <MX_UCPD2_Init+0x68>)
 8000a96:	0019      	movs	r1, r3
 8000a98:	0010      	movs	r0, r2
 8000a9a:	f003 ffee 	bl	8004a7a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000a9e:	003b      	movs	r3, r7
 8000aa0:	2204      	movs	r2, #4
 8000aa2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000aa4:	003b      	movs	r3, r7
 8000aa6:	2203      	movs	r2, #3
 8000aa8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aaa:	003b      	movs	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab0:	003b      	movs	r3, r7
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <MX_UCPD2_Init+0x68>)
 8000ab4:	0019      	movs	r1, r3
 8000ab6:	0010      	movs	r0, r2
 8000ab8:	f003 ffdf 	bl	8004a7a <LL_GPIO_Init>
  /* USER CODE END UCPD2_Init 1 */
  /* USER CODE BEGIN UCPD2_Init 2 */

  /* USER CODE END UCPD2_Init 2 */

}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b006      	add	sp, #24
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	50000c00 	.word	0x50000c00

08000ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_DMA_Init+0x38>)
 8000ad0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <MX_DMA_Init+0x38>)
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	430a      	orrs	r2, r1
 8000ad8:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_DMA_Init+0x38>)
 8000adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ade:	2201      	movs	r2, #1
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2009      	movs	r0, #9
 8000aec:	f000 fc88 	bl	8001400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000af0:	2009      	movs	r0, #9
 8000af2:	f000 fc9a 	bl	800142a <HAL_NVIC_EnableIRQ>

}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	40021000 	.word	0x40021000

08000b04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b08b      	sub	sp, #44	@ 0x2c
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	2414      	movs	r4, #20
 8000b0c:	193b      	adds	r3, r7, r4
 8000b0e:	0018      	movs	r0, r3
 8000b10:	2314      	movs	r3, #20
 8000b12:	001a      	movs	r2, r3
 8000b14:	2100      	movs	r1, #0
 8000b16:	f004 f80b 	bl	8004b30 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	4b5e      	ldr	r3, [pc, #376]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b20:	2104      	movs	r1, #4
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b26:	4b5b      	ldr	r3, [pc, #364]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b2a:	2204      	movs	r2, #4
 8000b2c:	4013      	ands	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b32:	4b58      	ldr	r3, [pc, #352]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b36:	4b57      	ldr	r3, [pc, #348]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b38:	2120      	movs	r1, #32
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b3e:	4b55      	ldr	r3, [pc, #340]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b42:	2220      	movs	r2, #32
 8000b44:	4013      	ands	r3, r2
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4a:	4b52      	ldr	r3, [pc, #328]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b4e:	4b51      	ldr	r3, [pc, #324]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	430a      	orrs	r2, r1
 8000b54:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b56:	4b4f      	ldr	r3, [pc, #316]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b4c      	ldr	r3, [pc, #304]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b66:	4b4b      	ldr	r3, [pc, #300]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b68:	2102      	movs	r1, #2
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b6e:	4b49      	ldr	r3, [pc, #292]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b72:	2202      	movs	r2, #2
 8000b74:	4013      	ands	r3, r2
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b46      	ldr	r3, [pc, #280]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000b7e:	4b45      	ldr	r3, [pc, #276]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b80:	2108      	movs	r1, #8
 8000b82:	430a      	orrs	r2, r1
 8000b84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000b86:	4b43      	ldr	r3, [pc, #268]	@ (8000c94 <MX_GPIO_Init+0x190>)
 8000b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000b8a:	2208      	movs	r2, #8
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT1_LED_GPIO_Port, STAT1_LED_Pin, GPIO_PIN_RESET);
 8000b92:	4b41      	ldr	r3, [pc, #260]	@ (8000c98 <MX_GPIO_Init+0x194>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	2108      	movs	r1, #8
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f001 f8d7 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STAT2_LED_GPIO_Port, STAT2_LED_Pin, GPIO_PIN_RESET);
 8000b9e:	4b3f      	ldr	r3, [pc, #252]	@ (8000c9c <MX_GPIO_Init+0x198>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	2108      	movs	r1, #8
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f001 f8d1 	bl	8001d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY_E1_Pin KEY_D1_Pin KEY_D2_Pin KRY_A4_Pin
                           KEY_A5_Pin */
  GPIO_InitStruct.Pin = KEY_E1_Pin|KEY_D1_Pin|KEY_D2_Pin|KRY_A4_Pin
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	4a3c      	ldr	r2, [pc, #240]	@ (8000ca0 <MX_GPIO_Init+0x19c>)
 8000bae:	601a      	str	r2, [r3, #0]
                          |KEY_A5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb0:	193b      	adds	r3, r7, r4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bb6:	193b      	adds	r3, r7, r4
 8000bb8:	2201      	movs	r2, #1
 8000bba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	4a39      	ldr	r2, [pc, #228]	@ (8000ca4 <MX_GPIO_Init+0x1a0>)
 8000bc0:	0019      	movs	r1, r3
 8000bc2:	0010      	movs	r0, r2
 8000bc4:	f000 ff56 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_D3_Pin KEY_D4_Pin */
  GPIO_InitStruct.Pin = KEY_D3_Pin|KEY_D4_Pin;
 8000bc8:	193b      	adds	r3, r7, r4
 8000bca:	2203      	movs	r2, #3
 8000bcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bce:	193b      	adds	r3, r7, r4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd4:	193b      	adds	r3, r7, r4
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bda:	193b      	adds	r3, r7, r4
 8000bdc:	4a32      	ldr	r2, [pc, #200]	@ (8000ca8 <MX_GPIO_Init+0x1a4>)
 8000bde:	0019      	movs	r1, r3
 8000be0:	0010      	movs	r0, r2
 8000be2:	f000 ff47 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_C1_Pin KEY_C2_Pin KEY_C3_Pin KEY_C4_Pin
                           KEY_D5_Pin KEY_B1_Pin KEY_B2_Pin KEY_B3_Pin
                           KEY_D6_Pin KEY_A6_Pin KEY_B6_Pin */
  GPIO_InitStruct.Pin = KEY_C1_Pin|KEY_C2_Pin|KEY_C3_Pin|KEY_C4_Pin
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	4a30      	ldr	r2, [pc, #192]	@ (8000cac <MX_GPIO_Init+0x1a8>)
 8000bea:	601a      	str	r2, [r3, #0]
                          |KEY_D5_Pin|KEY_B1_Pin|KEY_B2_Pin|KEY_B3_Pin
                          |KEY_D6_Pin|KEY_A6_Pin|KEY_B6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	193a      	adds	r2, r7, r4
 8000bfa:	23a0      	movs	r3, #160	@ 0xa0
 8000bfc:	05db      	lsls	r3, r3, #23
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f000 ff37 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEY_B4_Pin KEY_A1_Pin KEY_C5_Pin KEY_A2_Pin
                           KEY_B5_Pin KEY_A3_Pin ENC_SW_Pin KEY_E3_Pin
                           KEY_E2_Pin */
  GPIO_InitStruct.Pin = KEY_B4_Pin|KEY_A1_Pin|KEY_C5_Pin|KEY_A2_Pin
 8000c06:	193b      	adds	r3, r7, r4
 8000c08:	4a29      	ldr	r2, [pc, #164]	@ (8000cb0 <MX_GPIO_Init+0x1ac>)
 8000c0a:	601a      	str	r2, [r3, #0]
                          |KEY_B5_Pin|KEY_A3_Pin|ENC_SW_Pin|KEY_E3_Pin
                          |KEY_E2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	193b      	adds	r3, r7, r4
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2201      	movs	r2, #1
 8000c16:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c18:	193b      	adds	r3, r7, r4
 8000c1a:	4a20      	ldr	r2, [pc, #128]	@ (8000c9c <MX_GPIO_Init+0x198>)
 8000c1c:	0019      	movs	r1, r3
 8000c1e:	0010      	movs	r0, r2
 8000c20:	f000 ff28 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_C6_Pin */
  GPIO_InitStruct.Pin = KEY_C6_Pin;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	2202      	movs	r2, #2
 8000c28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c30:	193b      	adds	r3, r7, r4
 8000c32:	2201      	movs	r2, #1
 8000c34:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(KEY_C6_GPIO_Port, &GPIO_InitStruct);
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	4a17      	ldr	r2, [pc, #92]	@ (8000c98 <MX_GPIO_Init+0x194>)
 8000c3a:	0019      	movs	r1, r3
 8000c3c:	0010      	movs	r0, r2
 8000c3e:	f000 ff19 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT1_LED_Pin */
  GPIO_InitStruct.Pin = STAT1_LED_Pin;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2208      	movs	r2, #8
 8000c46:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2200      	movs	r2, #0
 8000c58:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STAT1_LED_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8000c98 <MX_GPIO_Init+0x194>)
 8000c5e:	0019      	movs	r1, r3
 8000c60:	0010      	movs	r0, r2
 8000c62:	f000 ff07 	bl	8001a74 <HAL_GPIO_Init>

  /*Configure GPIO pin : STAT2_LED_Pin */
  GPIO_InitStruct.Pin = STAT2_LED_Pin;
 8000c66:	0021      	movs	r1, r4
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2208      	movs	r2, #8
 8000c6c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6e:	187b      	adds	r3, r7, r1
 8000c70:	2201      	movs	r2, #1
 8000c72:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	187b      	adds	r3, r7, r1
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STAT2_LED_GPIO_Port, &GPIO_InitStruct);
 8000c80:	187b      	adds	r3, r7, r1
 8000c82:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <MX_GPIO_Init+0x198>)
 8000c84:	0019      	movs	r1, r3
 8000c86:	0010      	movs	r0, r2
 8000c88:	f000 fef4 	bl	8001a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c8c:	46c0      	nop			@ (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b00b      	add	sp, #44	@ 0x2c
 8000c92:	bd90      	pop	{r4, r7, pc}
 8000c94:	40021000 	.word	0x40021000
 8000c98:	50000c00 	.word	0x50000c00
 8000c9c:	50000400 	.word	0x50000400
 8000ca0:	0000e0c0 	.word	0x0000e0c0
 8000ca4:	50000800 	.word	0x50000800
 8000ca8:	50001400 	.word	0x50001400
 8000cac:	000086ff 	.word	0x000086ff
 8000cb0:	00001f47 	.word	0x00001f47

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
}
 8000cba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cbc:	46c0      	nop			@ (mov r8, r8)
 8000cbe:	e7fd      	b.n	8000cbc <Error_Handler+0x8>

08000cc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <HAL_MspInit+0x6c>)
 8000cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <HAL_MspInit+0x6c>)
 8000ccc:	2101      	movs	r1, #1
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <HAL_MspInit+0x6c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4013      	ands	r3, r2
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <HAL_MspInit+0x6c>)
 8000ce0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_MspInit+0x6c>)
 8000ce4:	2180      	movs	r1, #128	@ 0x80
 8000ce6:	0549      	lsls	r1, r1, #21
 8000ce8:	430a      	orrs	r2, r1
 8000cea:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cec:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_MspInit+0x6c>)
 8000cee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	055b      	lsls	r3, r3, #21
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_CRS_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_CRS_IRQn, 0, 0);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2004      	movs	r0, #4
 8000d00:	f000 fb7e 	bl	8001400 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_CRS_IRQn);
 8000d04:	2004      	movs	r0, #4
 8000d06:	f000 fb90 	bl	800142a <HAL_NVIC_EnableIRQ>

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1);
 8000d0a:	2004      	movs	r0, #4
 8000d0c:	f000 fa6a 	bl	80011e4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000d10:	f000 fa90 	bl	8001234 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 fa79 	bl	800120c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d1a:	23c0      	movs	r3, #192	@ 0xc0
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 faac 	bl	800127c <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d24:	46c0      	nop			@ (mov r8, r8)
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b002      	add	sp, #8
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b09f      	sub	sp, #124	@ 0x7c
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	18fb      	adds	r3, r7, r3
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	2314      	movs	r3, #20
 8000d40:	001a      	movs	r2, r3
 8000d42:	2100      	movs	r1, #0
 8000d44:	f003 fef4 	bl	8004b30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	2414      	movs	r4, #20
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	2350      	movs	r3, #80	@ 0x50
 8000d50:	001a      	movs	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	f003 feec 	bl	8004b30 <memset>
  if(hi2c->Instance==I2C2)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a22      	ldr	r2, [pc, #136]	@ (8000de8 <HAL_I2C_MspInit+0xb8>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d13e      	bne.n	8000de0 <HAL_I2C_MspInit+0xb0>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d62:	193b      	adds	r3, r7, r4
 8000d64:	2240      	movs	r2, #64	@ 0x40
 8000d66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d68:	193b      	adds	r3, r7, r4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6e:	193b      	adds	r3, r7, r4
 8000d70:	0018      	movs	r0, r3
 8000d72:	f001 fe8b 	bl	8002a8c <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff ff9b 	bl	8000cb4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000d80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d82:	4b1a      	ldr	r3, [pc, #104]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000d84:	2102      	movs	r1, #2
 8000d86:	430a      	orrs	r2, r1
 8000d88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d8a:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d8e:	2202      	movs	r2, #2
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000d96:	2164      	movs	r1, #100	@ 0x64
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	22c0      	movs	r2, #192	@ 0xc0
 8000d9c:	01d2      	lsls	r2, r2, #7
 8000d9e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	2212      	movs	r2, #18
 8000da4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	187b      	adds	r3, r7, r1
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000db2:	187b      	adds	r3, r7, r1
 8000db4:	2206      	movs	r2, #6
 8000db6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	187b      	adds	r3, r7, r1
 8000dba:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <HAL_I2C_MspInit+0xc0>)
 8000dbc:	0019      	movs	r1, r3
 8000dbe:	0010      	movs	r0, r2
 8000dc0:	f000 fe58 	bl	8001a74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dc4:	4b09      	ldr	r3, [pc, #36]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000dc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000dca:	2180      	movs	r1, #128	@ 0x80
 8000dcc:	03c9      	lsls	r1, r1, #15
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <HAL_I2C_MspInit+0xbc>)
 8000dd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000dd6:	2380      	movs	r3, #128	@ 0x80
 8000dd8:	03db      	lsls	r3, r3, #15
 8000dda:	4013      	ands	r3, r2
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000de0:	46c0      	nop			@ (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b01f      	add	sp, #124	@ 0x7c
 8000de6:	bd90      	pop	{r4, r7, pc}
 8000de8:	40005800 	.word	0x40005800
 8000dec:	40021000 	.word	0x40021000
 8000df0:	50000400 	.word	0x50000400

08000df4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000df4:	b590      	push	{r4, r7, lr}
 8000df6:	b08b      	sub	sp, #44	@ 0x2c
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	2414      	movs	r4, #20
 8000dfe:	193b      	adds	r3, r7, r4
 8000e00:	0018      	movs	r0, r3
 8000e02:	2314      	movs	r3, #20
 8000e04:	001a      	movs	r2, r3
 8000e06:	2100      	movs	r1, #0
 8000e08:	f003 fe92 	bl	8004b30 <memset>
  if(htim_encoder->Instance==TIM3)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a1e      	ldr	r2, [pc, #120]	@ (8000e8c <HAL_TIM_Encoder_MspInit+0x98>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d135      	bne.n	8000e82 <HAL_TIM_Encoder_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e16:	4b1e      	ldr	r3, [pc, #120]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e1a:	4b1d      	ldr	r3, [pc, #116]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e1c:	2102      	movs	r1, #2
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e22:	4b1b      	ldr	r3, [pc, #108]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e26:	2202      	movs	r2, #2
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b18      	ldr	r3, [pc, #96]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e32:	4b17      	ldr	r3, [pc, #92]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e34:	2102      	movs	r1, #2
 8000e36:	430a      	orrs	r2, r1
 8000e38:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e3a:	4b15      	ldr	r3, [pc, #84]	@ (8000e90 <HAL_TIM_Encoder_MspInit+0x9c>)
 8000e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e3e:	2202      	movs	r2, #2
 8000e40:	4013      	ands	r3, r2
 8000e42:	60fb      	str	r3, [r7, #12]
 8000e44:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin|ENC_B_Pin;
 8000e46:	0021      	movs	r1, r4
 8000e48:	187b      	adds	r3, r7, r1
 8000e4a:	2230      	movs	r2, #48	@ 0x30
 8000e4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	2202      	movs	r2, #2
 8000e52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	187b      	adds	r3, r7, r1
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e60:	187b      	adds	r3, r7, r1
 8000e62:	2201      	movs	r2, #1
 8000e64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_TIM_Encoder_MspInit+0xa0>)
 8000e6a:	0019      	movs	r1, r3
 8000e6c:	0010      	movs	r0, r2
 8000e6e:	f000 fe01 	bl	8001a74 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2100      	movs	r1, #0
 8000e76:	2010      	movs	r0, #16
 8000e78:	f000 fac2 	bl	8001400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8000e7c:	2010      	movs	r0, #16
 8000e7e:	f000 fad4 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e82:	46c0      	nop			@ (mov r8, r8)
 8000e84:	46bd      	mov	sp, r7
 8000e86:	b00b      	add	sp, #44	@ 0x2c
 8000e88:	bd90      	pop	{r4, r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	40021000 	.word	0x40021000
 8000e94:	50000400 	.word	0x50000400

08000e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a23      	ldr	r2, [pc, #140]	@ (8000f34 <HAL_TIM_Base_MspInit+0x9c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d13f      	bne.n	8000f2a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000eaa:	4b23      	ldr	r3, [pc, #140]	@ (8000f38 <HAL_TIM_Base_MspInit+0xa0>)
 8000eac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eae:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <HAL_TIM_Base_MspInit+0xa0>)
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000eb6:	4b20      	ldr	r3, [pc, #128]	@ (8000f38 <HAL_TIM_Base_MspInit+0xa0>)
 8000eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000eba:	2204      	movs	r2, #4
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH2 Init */
    hdma_tim4_ch2.Instance = DMA1_Channel1;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <HAL_TIM_Base_MspInit+0xa8>)
 8000ec6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch2.Init.Request = DMA_REQUEST_TIM4_CH2;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000eca:	2245      	movs	r2, #69	@ 0x45
 8000ecc:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ece:	4b1b      	ldr	r3, [pc, #108]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ed4:	4b19      	ldr	r3, [pc, #100]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8000eda:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000edc:	2280      	movs	r2, #128	@ 0x80
 8000ede:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000ee2:	2280      	movs	r2, #128	@ 0x80
 8000ee4:	0092      	lsls	r2, r2, #2
 8000ee6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000eea:	2280      	movs	r2, #128	@ 0x80
 8000eec:	0112      	lsls	r2, r2, #4
 8000eee:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch2.Init.Mode = DMA_CIRCULAR;
 8000ef0:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000ef2:	2220      	movs	r2, #32
 8000ef4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000ef6:	4b11      	ldr	r3, [pc, #68]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000ef8:	22c0      	movs	r2, #192	@ 0xc0
 8000efa:	0192      	lsls	r2, r2, #6
 8000efc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch2) != HAL_OK)
 8000efe:	4b0f      	ldr	r3, [pc, #60]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000f00:	0018      	movs	r0, r3
 8000f02:	f000 faaf 	bl	8001464 <HAL_DMA_Init>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8000f0a:	f7ff fed3 	bl	8000cb4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC2],hdma_tim4_ch2);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000f12:	629a      	str	r2, [r3, #40]	@ 0x28
 8000f14:	4b09      	ldr	r3, [pc, #36]	@ (8000f3c <HAL_TIM_Base_MspInit+0xa4>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	629a      	str	r2, [r3, #40]	@ 0x28

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	2010      	movs	r0, #16
 8000f20:	f000 fa6e 	bl	8001400 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8000f24:	2010      	movs	r0, #16
 8000f26:	f000 fa80 	bl	800142a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	40000800 	.word	0x40000800
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	20000114 	.word	0x20000114
 8000f40:	40020008 	.word	0x40020008

08000f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	240c      	movs	r4, #12
 8000f4e:	193b      	adds	r3, r7, r4
 8000f50:	0018      	movs	r0, r3
 8000f52:	2314      	movs	r3, #20
 8000f54:	001a      	movs	r2, r3
 8000f56:	2100      	movs	r1, #0
 8000f58:	f003 fdea 	bl	8004b30 <memset>
  if(htim->Instance==TIM4)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	4a14      	ldr	r2, [pc, #80]	@ (8000fb4 <HAL_TIM_MspPostInit+0x70>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d121      	bne.n	8000faa <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f66:	4b14      	ldr	r3, [pc, #80]	@ (8000fb8 <HAL_TIM_MspPostInit+0x74>)
 8000f68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f6a:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <HAL_TIM_MspPostInit+0x74>)
 8000f6c:	2102      	movs	r1, #2
 8000f6e:	430a      	orrs	r2, r1
 8000f70:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f72:	4b11      	ldr	r3, [pc, #68]	@ (8000fb8 <HAL_TIM_MspPostInit+0x74>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f76:	2202      	movs	r2, #2
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = NEOPIXEL_Pin;
 8000f7e:	0021      	movs	r1, r4
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2280      	movs	r2, #128	@ 0x80
 8000f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2202      	movs	r2, #2
 8000f8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM4;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2209      	movs	r2, #9
 8000f9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(NEOPIXEL_GPIO_Port, &GPIO_InitStruct);
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	4a06      	ldr	r2, [pc, #24]	@ (8000fbc <HAL_TIM_MspPostInit+0x78>)
 8000fa2:	0019      	movs	r1, r3
 8000fa4:	0010      	movs	r0, r2
 8000fa6:	f000 fd65 	bl	8001a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000faa:	46c0      	nop			@ (mov r8, r8)
 8000fac:	46bd      	mov	sp, r7
 8000fae:	b009      	add	sp, #36	@ 0x24
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	40000800 	.word	0x40000800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	50000400 	.word	0x50000400

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fc4:	46c0      	nop			@ (mov r8, r8)
 8000fc6:	e7fd      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fcc:	46c0      	nop			@ (mov r8, r8)
 8000fce:	e7fd      	b.n	8000fcc <HardFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fd4:	46c0      	nop			@ (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	46c0      	nop			@ (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f8bc 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch2);
 8000ff8:	4b03      	ldr	r3, [pc, #12]	@ (8001008 <DMA1_Channel1_IRQHandler+0x14>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 fbcc 	bl	8001798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	20000114 	.word	0x20000114

0800100c <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */

  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001010:	4b05      	ldr	r3, [pc, #20]	@ (8001028 <TIM3_TIM4_IRQHandler+0x1c>)
 8001012:	0018      	movs	r0, r3
 8001014:	f002 fbec 	bl	80037f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim4);
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <TIM3_TIM4_IRQHandler+0x20>)
 800101a:	0018      	movs	r0, r3
 800101c:	f002 fbe8 	bl	80037f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 8001020:	46c0      	nop			@ (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	2000007c 	.word	0x2000007c
 800102c:	200000c8 	.word	0x200000c8

08001030 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001034:	46c0      	nop			@ (mov r8, r8)
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800103c:	480d      	ldr	r0, [pc, #52]	@ (8001074 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800103e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001040:	f7ff fff6 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	@ (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	@ (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	@ (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800106a:	f003 fd69 	bl	8004b40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800106e:	f7ff fa01 	bl	8000474 <main>

08001072 <LoopForever>:

LoopForever:
  b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   r0, =_estack
 8001074:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001080:	08004c3c 	.word	0x08004c3c
  ldr r2, =_sbss
 8001084:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001088:	20000178 	.word	0x20000178

0800108c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_COMP_IRQHandler>
	...

08001090 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	2200      	movs	r2, #0
 800109a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b0b      	ldr	r3, [pc, #44]	@ (80010cc <HAL_Init+0x3c>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b0a      	ldr	r3, [pc, #40]	@ (80010cc <HAL_Init+0x3c>)
 80010a2:	2180      	movs	r1, #128	@ 0x80
 80010a4:	0049      	lsls	r1, r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010aa:	2003      	movs	r0, #3
 80010ac:	f000 f810 	bl	80010d0 <HAL_InitTick>
 80010b0:	1e03      	subs	r3, r0, #0
 80010b2:	d003      	beq.n	80010bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010b4:	1dfb      	adds	r3, r7, #7
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e001      	b.n	80010c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010bc:	f7ff fe00 	bl	8000cc0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	781b      	ldrb	r3, [r3, #0]
}
 80010c4:	0018      	movs	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	b002      	add	sp, #8
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	40022000 	.word	0x40022000

080010d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	230f      	movs	r3, #15
 80010da:	18fb      	adds	r3, r7, r3
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80010e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001158 <HAL_InitTick+0x88>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d02b      	beq.n	8001140 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_InitTick+0x8c>)
 80010ea:	681c      	ldr	r4, [r3, #0]
 80010ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <HAL_InitTick+0x88>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	0019      	movs	r1, r3
 80010f2:	23fa      	movs	r3, #250	@ 0xfa
 80010f4:	0098      	lsls	r0, r3, #2
 80010f6:	f7ff f807 	bl	8000108 <__udivsi3>
 80010fa:	0003      	movs	r3, r0
 80010fc:	0019      	movs	r1, r3
 80010fe:	0020      	movs	r0, r4
 8001100:	f7ff f802 	bl	8000108 <__udivsi3>
 8001104:	0003      	movs	r3, r0
 8001106:	0018      	movs	r0, r3
 8001108:	f000 f99f 	bl	800144a <HAL_SYSTICK_Config>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d112      	bne.n	8001136 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b03      	cmp	r3, #3
 8001114:	d80a      	bhi.n	800112c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	2301      	movs	r3, #1
 800111a:	425b      	negs	r3, r3
 800111c:	2200      	movs	r2, #0
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f96e 	bl	8001400 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_InitTick+0x90>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	e00d      	b.n	8001148 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800112c:	230f      	movs	r3, #15
 800112e:	18fb      	adds	r3, r7, r3
 8001130:	2201      	movs	r2, #1
 8001132:	701a      	strb	r2, [r3, #0]
 8001134:	e008      	b.n	8001148 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001136:	230f      	movs	r3, #15
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
 800113e:	e003      	b.n	8001148 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2201      	movs	r2, #1
 8001146:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001148:	230f      	movs	r3, #15
 800114a:	18fb      	adds	r3, r7, r3
 800114c:	781b      	ldrb	r3, [r3, #0]
}
 800114e:	0018      	movs	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	b005      	add	sp, #20
 8001154:	bd90      	pop	{r4, r7, pc}
 8001156:	46c0      	nop			@ (mov r8, r8)
 8001158:	20000008 	.word	0x20000008
 800115c:	20000000 	.word	0x20000000
 8001160:	20000004 	.word	0x20000004

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	18d2      	adds	r2, r2, r3
 8001174:	4b03      	ldr	r3, [pc, #12]	@ (8001184 <HAL_IncTick+0x20>)
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			@ (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			@ (mov r8, r8)
 8001180:	20000008 	.word	0x20000008
 8001184:	20000174 	.word	0x20000174

08001188 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	@ (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	20000174 	.word	0x20000174

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff0 	bl	8001188 <HAL_GetTick>
 80011a8:	0003      	movs	r3, r0
 80011aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	3301      	adds	r3, #1
 80011b4:	d005      	beq.n	80011c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b0a      	ldr	r3, [pc, #40]	@ (80011e0 <HAL_Delay+0x44>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	001a      	movs	r2, r3
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	189b      	adds	r3, r3, r2
 80011c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	f7ff ffe0 	bl	8001188 <HAL_GetTick>
 80011c8:	0002      	movs	r2, r0
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	68fa      	ldr	r2, [r7, #12]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d8f7      	bhi.n	80011c4 <HAL_Delay+0x28>
  {
  }
}
 80011d4:	46c0      	nop			@ (mov r8, r8)
 80011d6:	46c0      	nop			@ (mov r8, r8)
 80011d8:	46bd      	mov	sp, r7
 80011da:	b004      	add	sp, #16
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	20000008 	.word	0x20000008

080011e4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *         This parameter can be one of the following values:
  *         @arg @ref SYSCFG_VREFBUF_VoltageScale
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2204      	movs	r2, #4
 80011f2:	4393      	bics	r3, r2
 80011f4:	0019      	movs	r1, r3
 80011f6:	4b04      	ldr	r3, [pc, #16]	@ (8001208 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	46c0      	nop			@ (mov r8, r8)
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	40010030 	.word	0x40010030

0800120c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *          This parameter can be one of the following values:
  *          @arg @ref SYSCFG_VREFBUF_HighImpedance
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001214:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2202      	movs	r2, #2
 800121a:	4393      	bics	r3, r2
 800121c:	0019      	movs	r1, r3
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	430a      	orrs	r2, r1
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	40010030 	.word	0x40010030

08001234 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001240:	2101      	movs	r1, #1
 8001242:	430a      	orrs	r2, r1
 8001244:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001246:	f7ff ff9f 	bl	8001188 <HAL_GetTick>
 800124a:	0003      	movs	r3, r0
 800124c:	607b      	str	r3, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 800124e:	e008      	b.n	8001262 <HAL_SYSCFG_EnableVREFBUF+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001250:	f7ff ff9a 	bl	8001188 <HAL_GetTick>
 8001254:	0002      	movs	r2, r0
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b0a      	cmp	r3, #10
 800125c:	d901      	bls.n	8001262 <HAL_SYSCFG_EnableVREFBUF+0x2e>
    {
      return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e005      	b.n	800126e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001262:	4b05      	ldr	r3, [pc, #20]	@ (8001278 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2208      	movs	r2, #8
 8001268:	4013      	ands	r3, r2
 800126a:	d0f1      	beq.n	8001250 <HAL_SYSCFG_EnableVREFBUF+0x1c>
    }
  }

  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	0018      	movs	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	b002      	add	sp, #8
 8001274:	bd80      	pop	{r7, pc}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	40010030 	.word	0x40010030

0800127c <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001284:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800128a:	4013      	ands	r3, r2
 800128c:	0019      	movs	r1, r3
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]
}
 8001296:	46c0      	nop			@ (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			@ (mov r8, r8)
 80012a0:	40010000 	.word	0x40010000
 80012a4:	fffff9ff 	.word	0xfffff9ff

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	0002      	movs	r2, r0
 80012b0:	1dfb      	adds	r3, r7, #7
 80012b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012b4:	1dfb      	adds	r3, r7, #7
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80012ba:	d809      	bhi.n	80012d0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012bc:	1dfb      	adds	r3, r7, #7
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	001a      	movs	r2, r3
 80012c2:	231f      	movs	r3, #31
 80012c4:	401a      	ands	r2, r3
 80012c6:	4b04      	ldr	r3, [pc, #16]	@ (80012d8 <__NVIC_EnableIRQ+0x30>)
 80012c8:	2101      	movs	r1, #1
 80012ca:	4091      	lsls	r1, r2
 80012cc:	000a      	movs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80012d0:	46c0      	nop			@ (mov r8, r8)
 80012d2:	46bd      	mov	sp, r7
 80012d4:	b002      	add	sp, #8
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	0002      	movs	r2, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ea:	1dfb      	adds	r3, r7, #7
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80012f0:	d828      	bhi.n	8001344 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f2:	4a2f      	ldr	r2, [pc, #188]	@ (80013b0 <__NVIC_SetPriority+0xd4>)
 80012f4:	1dfb      	adds	r3, r7, #7
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	33c0      	adds	r3, #192	@ 0xc0
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	589b      	ldr	r3, [r3, r2]
 8001302:	1dfa      	adds	r2, r7, #7
 8001304:	7812      	ldrb	r2, [r2, #0]
 8001306:	0011      	movs	r1, r2
 8001308:	2203      	movs	r2, #3
 800130a:	400a      	ands	r2, r1
 800130c:	00d2      	lsls	r2, r2, #3
 800130e:	21ff      	movs	r1, #255	@ 0xff
 8001310:	4091      	lsls	r1, r2
 8001312:	000a      	movs	r2, r1
 8001314:	43d2      	mvns	r2, r2
 8001316:	401a      	ands	r2, r3
 8001318:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	019b      	lsls	r3, r3, #6
 800131e:	22ff      	movs	r2, #255	@ 0xff
 8001320:	401a      	ands	r2, r3
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	0018      	movs	r0, r3
 8001328:	2303      	movs	r3, #3
 800132a:	4003      	ands	r3, r0
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001330:	481f      	ldr	r0, [pc, #124]	@ (80013b0 <__NVIC_SetPriority+0xd4>)
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	b25b      	sxtb	r3, r3
 8001338:	089b      	lsrs	r3, r3, #2
 800133a:	430a      	orrs	r2, r1
 800133c:	33c0      	adds	r3, #192	@ 0xc0
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001342:	e031      	b.n	80013a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001344:	4a1b      	ldr	r2, [pc, #108]	@ (80013b4 <__NVIC_SetPriority+0xd8>)
 8001346:	1dfb      	adds	r3, r7, #7
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	0019      	movs	r1, r3
 800134c:	230f      	movs	r3, #15
 800134e:	400b      	ands	r3, r1
 8001350:	3b08      	subs	r3, #8
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3306      	adds	r3, #6
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	18d3      	adds	r3, r2, r3
 800135a:	3304      	adds	r3, #4
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	1dfa      	adds	r2, r7, #7
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	0011      	movs	r1, r2
 8001364:	2203      	movs	r2, #3
 8001366:	400a      	ands	r2, r1
 8001368:	00d2      	lsls	r2, r2, #3
 800136a:	21ff      	movs	r1, #255	@ 0xff
 800136c:	4091      	lsls	r1, r2
 800136e:	000a      	movs	r2, r1
 8001370:	43d2      	mvns	r2, r2
 8001372:	401a      	ands	r2, r3
 8001374:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	019b      	lsls	r3, r3, #6
 800137a:	22ff      	movs	r2, #255	@ 0xff
 800137c:	401a      	ands	r2, r3
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	0018      	movs	r0, r3
 8001384:	2303      	movs	r3, #3
 8001386:	4003      	ands	r3, r0
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138c:	4809      	ldr	r0, [pc, #36]	@ (80013b4 <__NVIC_SetPriority+0xd8>)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	001c      	movs	r4, r3
 8001394:	230f      	movs	r3, #15
 8001396:	4023      	ands	r3, r4
 8001398:	3b08      	subs	r3, #8
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	430a      	orrs	r2, r1
 800139e:	3306      	adds	r3, #6
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	18c3      	adds	r3, r0, r3
 80013a4:	3304      	adds	r3, #4
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	46c0      	nop			@ (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b003      	add	sp, #12
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	e000e100 	.word	0xe000e100
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	1e5a      	subs	r2, r3, #1
 80013c4:	2380      	movs	r3, #128	@ 0x80
 80013c6:	045b      	lsls	r3, r3, #17
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d301      	bcc.n	80013d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013cc:	2301      	movs	r3, #1
 80013ce:	e010      	b.n	80013f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <SysTick_Config+0x44>)
 80013d2:	687a      	ldr	r2, [r7, #4]
 80013d4:	3a01      	subs	r2, #1
 80013d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d8:	2301      	movs	r3, #1
 80013da:	425b      	negs	r3, r3
 80013dc:	2103      	movs	r1, #3
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff ff7c 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e4:	4b05      	ldr	r3, [pc, #20]	@ (80013fc <SysTick_Config+0x44>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ea:	4b04      	ldr	r3, [pc, #16]	@ (80013fc <SysTick_Config+0x44>)
 80013ec:	2207      	movs	r2, #7
 80013ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	0018      	movs	r0, r3
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b002      	add	sp, #8
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	46c0      	nop			@ (mov r8, r8)
 80013fc:	e000e010 	.word	0xe000e010

08001400 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b084      	sub	sp, #16
 8001404:	af00      	add	r7, sp, #0
 8001406:	60b9      	str	r1, [r7, #8]
 8001408:	607a      	str	r2, [r7, #4]
 800140a:	210f      	movs	r1, #15
 800140c:	187b      	adds	r3, r7, r1
 800140e:	1c02      	adds	r2, r0, #0
 8001410:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	187b      	adds	r3, r7, r1
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b25b      	sxtb	r3, r3
 800141a:	0011      	movs	r1, r2
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff ff5d 	bl	80012dc <__NVIC_SetPriority>
}
 8001422:	46c0      	nop			@ (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}

0800142a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	0002      	movs	r2, r0
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	b25b      	sxtb	r3, r3
 800143c:	0018      	movs	r0, r3
 800143e:	f7ff ff33 	bl	80012a8 <__NVIC_EnableIRQ>
}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	0018      	movs	r0, r3
 8001456:	f7ff ffaf 	bl	80013b8 <SysTick_Config>
 800145a:	0003      	movs	r3, r0
}
 800145c:	0018      	movs	r0, r3
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}

08001464 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d101      	bne.n	8001476 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e091      	b.n	800159a <HAL_DMA_Init+0x136>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
#if defined(DMA2)
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	001a      	movs	r2, r3
 800147c:	4b49      	ldr	r3, [pc, #292]	@ (80015a4 <HAL_DMA_Init+0x140>)
 800147e:	429a      	cmp	r2, r3
 8001480:	d810      	bhi.n	80014a4 <HAL_DMA_Init+0x40>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a48      	ldr	r2, [pc, #288]	@ (80015a8 <HAL_DMA_Init+0x144>)
 8001488:	4694      	mov	ip, r2
 800148a:	4463      	add	r3, ip
 800148c:	2114      	movs	r1, #20
 800148e:	0018      	movs	r0, r3
 8001490:	f7fe fe3a 	bl	8000108 <__udivsi3>
 8001494:	0003      	movs	r3, r0
 8001496:	009a      	lsls	r2, r3, #2
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a43      	ldr	r2, [pc, #268]	@ (80015ac <HAL_DMA_Init+0x148>)
 80014a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80014a2:	e00f      	b.n	80014c4 <HAL_DMA_Init+0x60>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a41      	ldr	r2, [pc, #260]	@ (80015b0 <HAL_DMA_Init+0x14c>)
 80014aa:	4694      	mov	ip, r2
 80014ac:	4463      	add	r3, ip
 80014ae:	2114      	movs	r1, #20
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7fe fe29 	bl	8000108 <__udivsi3>
 80014b6:	0003      	movs	r3, r0
 80014b8:	009a      	lsls	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a3c      	ldr	r2, [pc, #240]	@ (80015b4 <HAL_DMA_Init+0x150>)
 80014c2:	641a      	str	r2, [r3, #64]	@ 0x40
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2225      	movs	r2, #37	@ 0x25
 80014c8:	2102      	movs	r1, #2
 80014ca:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4938      	ldr	r1, [pc, #224]	@ (80015b8 <HAL_DMA_Init+0x154>)
 80014d8:	400a      	ands	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	68db      	ldr	r3, [r3, #12]
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	431a      	orrs	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	0018      	movs	r0, r3
 8001516:	f000 fa3f 	bl	8001998 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	01db      	lsls	r3, r3, #7
 8001522:	429a      	cmp	r2, r3
 8001524:	d102      	bne.n	800152c <HAL_DMA_Init+0xc8>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001534:	217f      	movs	r1, #127	@ 0x7f
 8001536:	400a      	ands	r2, r1
 8001538:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001542:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d011      	beq.n	8001570 <HAL_DMA_Init+0x10c>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	2b04      	cmp	r3, #4
 8001552:	d80d      	bhi.n	8001570 <HAL_DMA_Init+0x10c>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	0018      	movs	r0, r3
 8001558:	f000 fa68 	bl	8001a2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	e008      	b.n	8001582 <HAL_DMA_Init+0x11e>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2200      	movs	r2, #0
 8001574:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2225      	movs	r2, #37	@ 0x25
 800158c:	2101      	movs	r1, #1
 800158e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2224      	movs	r2, #36	@ 0x24
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001598:	2300      	movs	r3, #0
}
 800159a:	0018      	movs	r0, r3
 800159c:	46bd      	mov	sp, r7
 800159e:	b002      	add	sp, #8
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	40020407 	.word	0x40020407
 80015a8:	bffdfff8 	.word	0xbffdfff8
 80015ac:	40020000 	.word	0x40020000
 80015b0:	bffdfbf8 	.word	0xbffdfbf8
 80015b4:	40020400 	.word	0x40020400
 80015b8:	ffff800f 	.word	0xffff800f

080015bc <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ca:	2317      	movs	r3, #23
 80015cc:	18fb      	adds	r3, r7, r3
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2224      	movs	r2, #36	@ 0x24
 80015d6:	5c9b      	ldrb	r3, [r3, r2]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_DMA_Start_IT+0x24>
 80015dc:	2302      	movs	r3, #2
 80015de:	e06f      	b.n	80016c0 <HAL_DMA_Start_IT+0x104>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2224      	movs	r2, #36	@ 0x24
 80015e4:	2101      	movs	r1, #1
 80015e6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2225      	movs	r2, #37	@ 0x25
 80015ec:	5c9b      	ldrb	r3, [r3, r2]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d157      	bne.n	80016a4 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2225      	movs	r2, #37	@ 0x25
 80015f8:	2102      	movs	r1, #2
 80015fa:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	2200      	movs	r2, #0
 8001600:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2101      	movs	r1, #1
 800160e:	438a      	bics	r2, r1
 8001610:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	68b9      	ldr	r1, [r7, #8]
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f000 f981 	bl	8001920 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	2b00      	cmp	r3, #0
 8001624:	d008      	beq.n	8001638 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	210e      	movs	r1, #14
 8001632:	430a      	orrs	r2, r1
 8001634:	601a      	str	r2, [r3, #0]
 8001636:	e00f      	b.n	8001658 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	2104      	movs	r1, #4
 8001644:	438a      	bics	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	210a      	movs	r1, #10
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	025b      	lsls	r3, r3, #9
 8001662:	4013      	ands	r3, r2
 8001664:	d008      	beq.n	8001678 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	0049      	lsls	r1, r1, #1
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800167c:	2b00      	cmp	r3, #0
 800167e:	d008      	beq.n	8001692 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168a:	2180      	movs	r1, #128	@ 0x80
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2101      	movs	r1, #1
 800169e:	430a      	orrs	r2, r1
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	e00a      	b.n	80016ba <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2280      	movs	r2, #128	@ 0x80
 80016a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2224      	movs	r2, #36	@ 0x24
 80016ae:	2100      	movs	r1, #0
 80016b0:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80016b2:	2317      	movs	r3, #23
 80016b4:	18fb      	adds	r3, r7, r3
 80016b6:	2201      	movs	r2, #1
 80016b8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80016ba:	2317      	movs	r3, #23
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	781b      	ldrb	r3, [r3, #0]
}
 80016c0:	0018      	movs	r0, r3
 80016c2:	46bd      	mov	sp, r7
 80016c4:	b006      	add	sp, #24
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d0:	210f      	movs	r1, #15
 80016d2:	187b      	adds	r3, r7, r1
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2225      	movs	r2, #37	@ 0x25
 80016dc:	5c9b      	ldrb	r3, [r3, r2]
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d006      	beq.n	80016f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2204      	movs	r2, #4
 80016e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016ea:	187b      	adds	r3, r7, r1
 80016ec:	2201      	movs	r2, #1
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	e048      	b.n	8001784 <HAL_DMA_Abort_IT+0xbc>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	210e      	movs	r1, #14
 80016fe:	438a      	bics	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2101      	movs	r1, #1
 800170e:	438a      	bics	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800171c:	491d      	ldr	r1, [pc, #116]	@ (8001794 <HAL_DMA_Abort_IT+0xcc>)
 800171e:	400a      	ands	r2, r1
 8001720:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	221c      	movs	r2, #28
 8001728:	401a      	ands	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	2101      	movs	r1, #1
 8001730:	4091      	lsls	r1, r2
 8001732:	000a      	movs	r2, r1
 8001734:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800173e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00c      	beq.n	8001762 <HAL_DMA_Abort_IT+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001752:	4910      	ldr	r1, [pc, #64]	@ (8001794 <HAL_DMA_Abort_IT+0xcc>)
 8001754:	400a      	ands	r2, r1
 8001756:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001760:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2225      	movs	r2, #37	@ 0x25
 8001766:	2101      	movs	r1, #1
 8001768:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2224      	movs	r2, #36	@ 0x24
 800176e:	2100      	movs	r1, #0
 8001770:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001776:	2b00      	cmp	r3, #0
 8001778:	d004      	beq.n	8001784 <HAL_DMA_Abort_IT+0xbc>
    {
      hdma->XferAbortCallback(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	0010      	movs	r0, r2
 8001782:	4798      	blx	r3
    }
  }
  return status;
 8001784:	230f      	movs	r3, #15
 8001786:	18fb      	adds	r3, r7, r3
 8001788:	781b      	ldrb	r3, [r3, #0]
}
 800178a:	0018      	movs	r0, r3
 800178c:	46bd      	mov	sp, r7
 800178e:	b004      	add	sp, #16
 8001790:	bd80      	pop	{r7, pc}
 8001792:	46c0      	nop			@ (mov r8, r8)
 8001794:	fffffeff 	.word	0xfffffeff

08001798 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
#else
  uint32_t flag_it = DMA1->ISR;
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b4:	221c      	movs	r2, #28
 80017b6:	4013      	ands	r3, r2
 80017b8:	2204      	movs	r2, #4
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	d026      	beq.n	8001812 <HAL_DMA_IRQHandler+0x7a>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2204      	movs	r2, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	d022      	beq.n	8001812 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2220      	movs	r2, #32
 80017d4:	4013      	ands	r3, r2
 80017d6:	d107      	bne.n	80017e8 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2104      	movs	r1, #4
 80017e4:	438a      	bics	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ec:	221c      	movs	r2, #28
 80017ee:	401a      	ands	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	2104      	movs	r1, #4
 80017f6:	4091      	lsls	r1, r2
 80017f8:	000a      	movs	r2, r1
 80017fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	2b00      	cmp	r3, #0
 8001802:	d100      	bne.n	8001806 <HAL_DMA_IRQHandler+0x6e>
 8001804:	e080      	b.n	8001908 <HAL_DMA_IRQHandler+0x170>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	0010      	movs	r0, r2
 800180e:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001810:	e07a      	b.n	8001908 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001816:	221c      	movs	r2, #28
 8001818:	4013      	ands	r3, r2
 800181a:	2202      	movs	r2, #2
 800181c:	409a      	lsls	r2, r3
 800181e:	0013      	movs	r3, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4013      	ands	r3, r2
 8001824:	d03c      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x108>
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d038      	beq.n	80018a0 <HAL_DMA_IRQHandler+0x108>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2220      	movs	r2, #32
 8001836:	4013      	ands	r3, r2
 8001838:	d10b      	bne.n	8001852 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	210a      	movs	r1, #10
 8001846:	438a      	bics	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2225      	movs	r2, #37	@ 0x25
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	001a      	movs	r2, r3
 8001858:	4b2e      	ldr	r3, [pc, #184]	@ (8001914 <HAL_DMA_IRQHandler+0x17c>)
 800185a:	429a      	cmp	r2, r3
 800185c:	d909      	bls.n	8001872 <HAL_DMA_IRQHandler+0xda>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	221c      	movs	r2, #28
 8001864:	401a      	ands	r2, r3
 8001866:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <HAL_DMA_IRQHandler+0x180>)
 8001868:	2102      	movs	r1, #2
 800186a:	4091      	lsls	r1, r2
 800186c:	000a      	movs	r2, r1
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	e008      	b.n	8001884 <HAL_DMA_IRQHandler+0xec>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001876:	221c      	movs	r2, #28
 8001878:	401a      	ands	r2, r3
 800187a:	4b28      	ldr	r3, [pc, #160]	@ (800191c <HAL_DMA_IRQHandler+0x184>)
 800187c:	2102      	movs	r1, #2
 800187e:	4091      	lsls	r1, r2
 8001880:	000a      	movs	r2, r1
 8001882:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2224      	movs	r2, #36	@ 0x24
 8001888:	2100      	movs	r1, #0
 800188a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001890:	2b00      	cmp	r3, #0
 8001892:	d039      	beq.n	8001908 <HAL_DMA_IRQHandler+0x170>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	0010      	movs	r0, r2
 800189c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800189e:	e033      	b.n	8001908 <HAL_DMA_IRQHandler+0x170>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a4:	221c      	movs	r2, #28
 80018a6:	4013      	ands	r3, r2
 80018a8:	2208      	movs	r2, #8
 80018aa:	409a      	lsls	r2, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4013      	ands	r3, r2
 80018b2:	d02a      	beq.n	800190a <HAL_DMA_IRQHandler+0x172>
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	2208      	movs	r2, #8
 80018b8:	4013      	ands	r3, r2
 80018ba:	d026      	beq.n	800190a <HAL_DMA_IRQHandler+0x172>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	210e      	movs	r1, #14
 80018c8:	438a      	bics	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018d0:	221c      	movs	r2, #28
 80018d2:	401a      	ands	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	2101      	movs	r1, #1
 80018da:	4091      	lsls	r1, r2
 80018dc:	000a      	movs	r2, r1
 80018de:	605a      	str	r2, [r3, #4]
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2201      	movs	r2, #1
 80018e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2225      	movs	r2, #37	@ 0x25
 80018ea:	2101      	movs	r1, #1
 80018ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2224      	movs	r2, #36	@ 0x24
 80018f2:	2100      	movs	r1, #0
 80018f4:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d005      	beq.n	800190a <HAL_DMA_IRQHandler+0x172>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	0010      	movs	r0, r2
 8001906:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001908:	46c0      	nop			@ (mov r8, r8)
 800190a:	46c0      	nop			@ (mov r8, r8)
}
 800190c:	46bd      	mov	sp, r7
 800190e:	b004      	add	sp, #16
 8001910:	bd80      	pop	{r7, pc}
 8001912:	46c0      	nop			@ (mov r8, r8)
 8001914:	40020080 	.word	0x40020080
 8001918:	40020400 	.word	0x40020400
 800191c:	40020000 	.word	0x40020000

08001920 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	60b9      	str	r1, [r7, #8]
 800192a:	607a      	str	r2, [r7, #4]
 800192c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001936:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001948:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800194e:	221c      	movs	r2, #28
 8001950:	401a      	ands	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001956:	2101      	movs	r1, #1
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	605a      	str	r2, [r3, #4]
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	2b10      	cmp	r3, #16
 800196c:	d108      	bne.n	8001980 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800197e:	e007      	b.n	8001990 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	60da      	str	r2, [r3, #12]
}
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}

08001998 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

#if defined(DMA2)
  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	001a      	movs	r2, r3
 80019a6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d814      	bhi.n	80019d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3e>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b0:	089b      	lsrs	r3, r3, #2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a20 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 80019b6:	189a      	adds	r2, r3, r2
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	001a      	movs	r2, r3
 80019c2:	23ff      	movs	r3, #255	@ 0xff
 80019c4:	4013      	ands	r3, r2
 80019c6:	3b08      	subs	r3, #8
 80019c8:	2114      	movs	r1, #20
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7fe fb9c 	bl	8000108 <__udivsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e014      	b.n	8001a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019da:	089b      	lsrs	r3, r3, #2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4a11      	ldr	r2, [pc, #68]	@ (8001a24 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80019e0:	189a      	adds	r2, r3, r2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	001a      	movs	r2, r3
 80019ec:	23ff      	movs	r3, #255	@ 0xff
 80019ee:	4013      	ands	r3, r2
 80019f0:	3b08      	subs	r3, #8
 80019f2:	2114      	movs	r1, #20
 80019f4:	0018      	movs	r0, r3
 80019f6:	f7fe fb87 	bl	8000108 <__udivsi3>
 80019fa:	0003      	movs	r3, r0
 80019fc:	3307      	adds	r3, #7
 80019fe:	60fb      	str	r3, [r7, #12]
  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4a09      	ldr	r2, [pc, #36]	@ (8001a28 <DMA_CalcDMAMUXChannelBaseAndMask+0x90>)
 8001a04:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	221f      	movs	r2, #31
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001a14:	46c0      	nop			@ (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b004      	add	sp, #16
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40020407 	.word	0x40020407
 8001a20:	40020800 	.word	0x40020800
 8001a24:	4002081c 	.word	0x4002081c
 8001a28:	40020880 	.word	0x40020880

08001a2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	227f      	movs	r2, #127	@ 0x7f
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a42:	4694      	mov	ip, r2
 8001a44:	4463      	add	r3, ip
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	001a      	movs	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a07      	ldr	r2, [pc, #28]	@ (8001a70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a52:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	3b01      	subs	r3, #1
 8001a58:	2203      	movs	r2, #3
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	409a      	lsls	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001a64:	46c0      	nop			@ (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	b004      	add	sp, #16
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	1000823f 	.word	0x1000823f
 8001a70:	40020940 	.word	0x40020940

08001a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a82:	e14d      	b.n	8001d20 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2101      	movs	r1, #1
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4091      	lsls	r1, r2
 8001a8e:	000a      	movs	r2, r1
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d100      	bne.n	8001a9c <HAL_GPIO_Init+0x28>
 8001a9a:	e13e      	b.n	8001d1a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d005      	beq.n	8001ab4 <HAL_GPIO_Init+0x40>
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	4013      	ands	r3, r2
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d130      	bne.n	8001b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	2203      	movs	r2, #3
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	0013      	movs	r3, r2
 8001ac4:	43da      	mvns	r2, r3
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	68da      	ldr	r2, [r3, #12]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	0013      	movs	r3, r2
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aea:	2201      	movs	r2, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	409a      	lsls	r2, r3
 8001af0:	0013      	movs	r3, r2
 8001af2:	43da      	mvns	r2, r3
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	2201      	movs	r2, #1
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d017      	beq.n	8001b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	2203      	movs	r2, #3
 8001b2e:	409a      	lsls	r2, r3
 8001b30:	0013      	movs	r3, r2
 8001b32:	43da      	mvns	r2, r3
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4013      	ands	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	689a      	ldr	r2, [r3, #8]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	409a      	lsls	r2, r3
 8001b44:	0013      	movs	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2203      	movs	r2, #3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d123      	bne.n	8001ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	58d3      	ldr	r3, [r2, r3]
 8001b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2207      	movs	r2, #7
 8001b70:	4013      	ands	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	409a      	lsls	r2, r3
 8001b78:	0013      	movs	r3, r2
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	691a      	ldr	r2, [r3, #16]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	2107      	movs	r1, #7
 8001b8a:	400b      	ands	r3, r1
 8001b8c:	009b      	lsls	r3, r3, #2
 8001b8e:	409a      	lsls	r2, r3
 8001b90:	0013      	movs	r3, r2
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	08da      	lsrs	r2, r3, #3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3208      	adds	r2, #8
 8001ba0:	0092      	lsls	r2, r2, #2
 8001ba2:	6939      	ldr	r1, [r7, #16]
 8001ba4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	409a      	lsls	r2, r3
 8001bb4:	0013      	movs	r3, r2
 8001bb6:	43da      	mvns	r2, r3
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2203      	movs	r2, #3
 8001bc4:	401a      	ands	r2, r3
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	409a      	lsls	r2, r3
 8001bcc:	0013      	movs	r3, r2
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685a      	ldr	r2, [r3, #4]
 8001bde:	23c0      	movs	r3, #192	@ 0xc0
 8001be0:	029b      	lsls	r3, r3, #10
 8001be2:	4013      	ands	r3, r2
 8001be4:	d100      	bne.n	8001be8 <HAL_GPIO_Init+0x174>
 8001be6:	e098      	b.n	8001d1a <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001be8:	4a53      	ldr	r2, [pc, #332]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	089b      	lsrs	r3, r3, #2
 8001bee:	3318      	adds	r3, #24
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	589b      	ldr	r3, [r3, r2]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	2203      	movs	r2, #3
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	220f      	movs	r2, #15
 8001c00:	409a      	lsls	r2, r3
 8001c02:	0013      	movs	r3, r2
 8001c04:	43da      	mvns	r2, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	23a0      	movs	r3, #160	@ 0xa0
 8001c10:	05db      	lsls	r3, r3, #23
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d019      	beq.n	8001c4a <HAL_GPIO_Init+0x1d6>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a48      	ldr	r2, [pc, #288]	@ (8001d3c <HAL_GPIO_Init+0x2c8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d013      	beq.n	8001c46 <HAL_GPIO_Init+0x1d2>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a47      	ldr	r2, [pc, #284]	@ (8001d40 <HAL_GPIO_Init+0x2cc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d00d      	beq.n	8001c42 <HAL_GPIO_Init+0x1ce>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a46      	ldr	r2, [pc, #280]	@ (8001d44 <HAL_GPIO_Init+0x2d0>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d007      	beq.n	8001c3e <HAL_GPIO_Init+0x1ca>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4a45      	ldr	r2, [pc, #276]	@ (8001d48 <HAL_GPIO_Init+0x2d4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d101      	bne.n	8001c3a <HAL_GPIO_Init+0x1c6>
 8001c36:	2304      	movs	r3, #4
 8001c38:	e008      	b.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c3a:	2305      	movs	r3, #5
 8001c3c:	e006      	b.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e004      	b.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e002      	b.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x1d8>
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	697a      	ldr	r2, [r7, #20]
 8001c4e:	2103      	movs	r1, #3
 8001c50:	400a      	ands	r2, r1
 8001c52:	00d2      	lsls	r2, r2, #3
 8001c54:	4093      	lsls	r3, r2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c5c:	4936      	ldr	r1, [pc, #216]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	089b      	lsrs	r3, r3, #2
 8001c62:	3318      	adds	r3, #24
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c6a:	4b33      	ldr	r3, [pc, #204]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	43da      	mvns	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685a      	ldr	r2, [r3, #4]
 8001c7e:	2380      	movs	r3, #128	@ 0x80
 8001c80:	035b      	lsls	r3, r3, #13
 8001c82:	4013      	ands	r3, r2
 8001c84:	d003      	beq.n	8001c8e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c94:	4b28      	ldr	r3, [pc, #160]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	43da      	mvns	r2, r3
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	2380      	movs	r3, #128	@ 0x80
 8001caa:	039b      	lsls	r3, r3, #14
 8001cac:	4013      	ands	r3, r2
 8001cae:	d003      	beq.n	8001cb8 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001cc0:	2384      	movs	r3, #132	@ 0x84
 8001cc2:	58d3      	ldr	r3, [r2, r3]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	2380      	movs	r3, #128	@ 0x80
 8001cd6:	029b      	lsls	r3, r3, #10
 8001cd8:	4013      	ands	r3, r2
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ce4:	4914      	ldr	r1, [pc, #80]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001ce6:	2284      	movs	r2, #132	@ 0x84
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001cec:	4a12      	ldr	r2, [pc, #72]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001cee:	2380      	movs	r3, #128	@ 0x80
 8001cf0:	58d3      	ldr	r3, [r2, r3]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	43da      	mvns	r2, r3
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	025b      	lsls	r3, r3, #9
 8001d06:	4013      	ands	r3, r2
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d12:	4909      	ldr	r1, [pc, #36]	@ (8001d38 <HAL_GPIO_Init+0x2c4>)
 8001d14:	2280      	movs	r2, #128	@ 0x80
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	40da      	lsrs	r2, r3
 8001d28:	1e13      	subs	r3, r2, #0
 8001d2a:	d000      	beq.n	8001d2e <HAL_GPIO_Init+0x2ba>
 8001d2c:	e6aa      	b.n	8001a84 <HAL_GPIO_Init+0x10>
  }
}
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	46c0      	nop			@ (mov r8, r8)
 8001d32:	46bd      	mov	sp, r7
 8001d34:	b006      	add	sp, #24
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021800 	.word	0x40021800
 8001d3c:	50000400 	.word	0x50000400
 8001d40:	50000800 	.word	0x50000800
 8001d44:	50000c00 	.word	0x50000c00
 8001d48:	50001000 	.word	0x50001000

08001d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	0008      	movs	r0, r1
 8001d56:	0011      	movs	r1, r2
 8001d58:	1cbb      	adds	r3, r7, #2
 8001d5a:	1c02      	adds	r2, r0, #0
 8001d5c:	801a      	strh	r2, [r3, #0]
 8001d5e:	1c7b      	adds	r3, r7, #1
 8001d60:	1c0a      	adds	r2, r1, #0
 8001d62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d64:	1c7b      	adds	r3, r7, #1
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d6c:	1cbb      	adds	r3, r7, #2
 8001d6e:	881a      	ldrh	r2, [r3, #0]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d74:	e003      	b.n	8001d7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d76:	1cbb      	adds	r3, r7, #2
 8001d78:	881a      	ldrh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b002      	add	sp, #8
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	000a      	movs	r2, r1
 8001d90:	1cbb      	adds	r3, r7, #2
 8001d92:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d9a:	1cbb      	adds	r3, r7, #2
 8001d9c:	881b      	ldrh	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	4013      	ands	r3, r2
 8001da2:	041a      	lsls	r2, r3, #16
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	1cb9      	adds	r1, r7, #2
 8001daa:	8809      	ldrh	r1, [r1, #0]
 8001dac:	400b      	ands	r3, r1
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
}
 8001db4:	46c0      	nop			@ (mov r8, r8)
 8001db6:	46bd      	mov	sp, r7
 8001db8:	b004      	add	sp, #16
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e08f      	b.n	8001eee <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2241      	movs	r2, #65	@ 0x41
 8001dd2:	5c9b      	ldrb	r3, [r3, r2]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d107      	bne.n	8001dea <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2240      	movs	r2, #64	@ 0x40
 8001dde:	2100      	movs	r1, #0
 8001de0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f7fe ffa3 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2241      	movs	r2, #65	@ 0x41
 8001dee:	2124      	movs	r1, #36	@ 0x24
 8001df0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2101      	movs	r1, #1
 8001dfe:	438a      	bics	r2, r1
 8001e00:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	493b      	ldr	r1, [pc, #236]	@ (8001ef8 <HAL_I2C_Init+0x13c>)
 8001e0c:	400a      	ands	r2, r1
 8001e0e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4938      	ldr	r1, [pc, #224]	@ (8001efc <HAL_I2C_Init+0x140>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2180      	movs	r1, #128	@ 0x80
 8001e32:	0209      	lsls	r1, r1, #8
 8001e34:	430a      	orrs	r2, r1
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	e007      	b.n	8001e4a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2184      	movs	r1, #132	@ 0x84
 8001e44:	0209      	lsls	r1, r1, #8
 8001e46:	430a      	orrs	r2, r1
 8001e48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d109      	bne.n	8001e66 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2180      	movs	r1, #128	@ 0x80
 8001e5e:	0109      	lsls	r1, r1, #4
 8001e60:	430a      	orrs	r2, r1
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	e007      	b.n	8001e76 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4923      	ldr	r1, [pc, #140]	@ (8001f00 <HAL_I2C_Init+0x144>)
 8001e72:	400a      	ands	r2, r1
 8001e74:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4920      	ldr	r1, [pc, #128]	@ (8001f04 <HAL_I2C_Init+0x148>)
 8001e82:	430a      	orrs	r2, r1
 8001e84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	491a      	ldr	r1, [pc, #104]	@ (8001efc <HAL_I2C_Init+0x140>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	699b      	ldr	r3, [r3, #24]
 8001ea6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	69d9      	ldr	r1, [r3, #28]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a1a      	ldr	r2, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2101      	movs	r1, #1
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2241      	movs	r2, #65	@ 0x41
 8001eda:	2120      	movs	r1, #32
 8001edc:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2242      	movs	r2, #66	@ 0x42
 8001ee8:	2100      	movs	r1, #0
 8001eea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	0018      	movs	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b002      	add	sp, #8
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	f0ffffff 	.word	0xf0ffffff
 8001efc:	ffff7fff 	.word	0xffff7fff
 8001f00:	fffff7ff 	.word	0xfffff7ff
 8001f04:	02008000 	.word	0x02008000

08001f08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2241      	movs	r2, #65	@ 0x41
 8001f16:	5c9b      	ldrb	r3, [r3, r2]
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	2b20      	cmp	r3, #32
 8001f1c:	d138      	bne.n	8001f90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2240      	movs	r2, #64	@ 0x40
 8001f22:	5c9b      	ldrb	r3, [r3, r2]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e032      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2240      	movs	r2, #64	@ 0x40
 8001f30:	2101      	movs	r1, #1
 8001f32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2241      	movs	r2, #65	@ 0x41
 8001f38:	2124      	movs	r1, #36	@ 0x24
 8001f3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4911      	ldr	r1, [pc, #68]	@ (8001f9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2101      	movs	r1, #1
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2241      	movs	r2, #65	@ 0x41
 8001f80:	2120      	movs	r1, #32
 8001f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2240      	movs	r2, #64	@ 0x40
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b002      	add	sp, #8
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	46c0      	nop			@ (mov r8, r8)
 8001f9c:	ffffefff 	.word	0xffffefff

08001fa0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2241      	movs	r2, #65	@ 0x41
 8001fae:	5c9b      	ldrb	r3, [r3, r2]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d139      	bne.n	800202a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2240      	movs	r2, #64	@ 0x40
 8001fba:	5c9b      	ldrb	r3, [r3, r2]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e033      	b.n	800202c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2240      	movs	r2, #64	@ 0x40
 8001fc8:	2101      	movs	r1, #1
 8001fca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2241      	movs	r2, #65	@ 0x41
 8001fd0:	2124      	movs	r1, #36	@ 0x24
 8001fd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2101      	movs	r1, #1
 8001fe0:	438a      	bics	r2, r1
 8001fe2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a11      	ldr	r2, [pc, #68]	@ (8002034 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	021b      	lsls	r3, r3, #8
 8001ff8:	68fa      	ldr	r2, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2101      	movs	r1, #1
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2241      	movs	r2, #65	@ 0x41
 800201a:	2120      	movs	r1, #32
 800201c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2240      	movs	r2, #64	@ 0x40
 8002022:	2100      	movs	r1, #0
 8002024:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	e000      	b.n	800202c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800202a:	2302      	movs	r3, #2
  }
}
 800202c:	0018      	movs	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}
 8002034:	fffff0ff 	.word	0xfffff0ff

08002038 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002040:	4b19      	ldr	r3, [pc, #100]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002046:	4013      	ands	r3, r2
 8002048:	0019      	movs	r1, r3
 800204a:	4b17      	ldr	r3, [pc, #92]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d11f      	bne.n	800209c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800205c:	4b14      	ldr	r3, [pc, #80]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	0013      	movs	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	189b      	adds	r3, r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4912      	ldr	r1, [pc, #72]	@ (80020b4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800206a:	0018      	movs	r0, r3
 800206c:	f7fe f84c 	bl	8000108 <__udivsi3>
 8002070:	0003      	movs	r3, r0
 8002072:	3301      	adds	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002076:	e008      	b.n	800208a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d003      	beq.n	8002086 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	3b01      	subs	r3, #1
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	e001      	b.n	800208a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e009      	b.n	800209e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	2380      	movs	r3, #128	@ 0x80
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	401a      	ands	r2, r3
 8002094:	2380      	movs	r3, #128	@ 0x80
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	429a      	cmp	r2, r3
 800209a:	d0ed      	beq.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	0018      	movs	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	b004      	add	sp, #16
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	40007000 	.word	0x40007000
 80020ac:	fffff9ff 	.word	0xfffff9ff
 80020b0:	20000000 	.word	0x20000000
 80020b4:	000f4240 	.word	0x000f4240

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d102      	bne.n	80020cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	f000 fb50 	bl	800276c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2201      	movs	r2, #1
 80020d2:	4013      	ands	r3, r2
 80020d4:	d100      	bne.n	80020d8 <HAL_RCC_OscConfig+0x20>
 80020d6:	e07c      	b.n	80021d2 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d8:	4bc3      	ldr	r3, [pc, #780]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	2238      	movs	r2, #56	@ 0x38
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e2:	4bc1      	ldr	r3, [pc, #772]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	2203      	movs	r2, #3
 80020e8:	4013      	ands	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b10      	cmp	r3, #16
 80020f0:	d102      	bne.n	80020f8 <HAL_RCC_OscConfig+0x40>
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d002      	beq.n	80020fe <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d10b      	bne.n	8002116 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fe:	4bba      	ldr	r3, [pc, #744]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	2380      	movs	r3, #128	@ 0x80
 8002104:	029b      	lsls	r3, r3, #10
 8002106:	4013      	ands	r3, r2
 8002108:	d062      	beq.n	80021d0 <HAL_RCC_OscConfig+0x118>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d15e      	bne.n	80021d0 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e32a      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	025b      	lsls	r3, r3, #9
 800211e:	429a      	cmp	r2, r3
 8002120:	d107      	bne.n	8002132 <HAL_RCC_OscConfig+0x7a>
 8002122:	4bb1      	ldr	r3, [pc, #708]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4bb0      	ldr	r3, [pc, #704]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002128:	2180      	movs	r1, #128	@ 0x80
 800212a:	0249      	lsls	r1, r1, #9
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]
 8002130:	e020      	b.n	8002174 <HAL_RCC_OscConfig+0xbc>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	23a0      	movs	r3, #160	@ 0xa0
 8002138:	02db      	lsls	r3, r3, #11
 800213a:	429a      	cmp	r2, r3
 800213c:	d10e      	bne.n	800215c <HAL_RCC_OscConfig+0xa4>
 800213e:	4baa      	ldr	r3, [pc, #680]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	4ba9      	ldr	r3, [pc, #676]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002144:	2180      	movs	r1, #128	@ 0x80
 8002146:	02c9      	lsls	r1, r1, #11
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	4ba6      	ldr	r3, [pc, #664]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4ba5      	ldr	r3, [pc, #660]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002152:	2180      	movs	r1, #128	@ 0x80
 8002154:	0249      	lsls	r1, r1, #9
 8002156:	430a      	orrs	r2, r1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xbc>
 800215c:	4ba2      	ldr	r3, [pc, #648]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4ba1      	ldr	r3, [pc, #644]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002162:	49a2      	ldr	r1, [pc, #648]	@ (80023ec <HAL_RCC_OscConfig+0x334>)
 8002164:	400a      	ands	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	4b9f      	ldr	r3, [pc, #636]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b9e      	ldr	r3, [pc, #632]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800216e:	49a0      	ldr	r1, [pc, #640]	@ (80023f0 <HAL_RCC_OscConfig+0x338>)
 8002170:	400a      	ands	r2, r1
 8002172:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d014      	beq.n	80021a6 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff f804 	bl	8001188 <HAL_GetTick>
 8002180:	0003      	movs	r3, r0
 8002182:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002186:	f7fe ffff 	bl	8001188 <HAL_GetTick>
 800218a:	0002      	movs	r2, r0
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b64      	cmp	r3, #100	@ 0x64
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e2e9      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002198:	4b93      	ldr	r3, [pc, #588]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	2380      	movs	r3, #128	@ 0x80
 800219e:	029b      	lsls	r3, r3, #10
 80021a0:	4013      	ands	r3, r2
 80021a2:	d0f0      	beq.n	8002186 <HAL_RCC_OscConfig+0xce>
 80021a4:	e015      	b.n	80021d2 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7fe ffef 	bl	8001188 <HAL_GetTick>
 80021aa:	0003      	movs	r3, r0
 80021ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7fe ffea 	bl	8001188 <HAL_GetTick>
 80021b4:	0002      	movs	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	@ 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e2d4      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021c2:	4b89      	ldr	r3, [pc, #548]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	2380      	movs	r3, #128	@ 0x80
 80021c8:	029b      	lsls	r3, r3, #10
 80021ca:	4013      	ands	r3, r2
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0xf8>
 80021ce:	e000      	b.n	80021d2 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2202      	movs	r2, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	d100      	bne.n	80021de <HAL_RCC_OscConfig+0x126>
 80021dc:	e099      	b.n	8002312 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021de:	4b82      	ldr	r3, [pc, #520]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2238      	movs	r2, #56	@ 0x38
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e8:	4b7f      	ldr	r3, [pc, #508]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2203      	movs	r2, #3
 80021ee:	4013      	ands	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d102      	bne.n	80021fe <HAL_RCC_OscConfig+0x146>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d135      	bne.n	8002270 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	4b78      	ldr	r3, [pc, #480]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	2380      	movs	r3, #128	@ 0x80
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4013      	ands	r3, r2
 800220e:	d005      	beq.n	800221c <HAL_RCC_OscConfig+0x164>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e2a7      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b72      	ldr	r3, [pc, #456]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	4a74      	ldr	r2, [pc, #464]	@ (80023f4 <HAL_RCC_OscConfig+0x33c>)
 8002222:	4013      	ands	r3, r2
 8002224:	0019      	movs	r1, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	021a      	lsls	r2, r3, #8
 800222c:	4b6e      	ldr	r3, [pc, #440]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800222e:	430a      	orrs	r2, r1
 8002230:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d112      	bne.n	800225e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002238:	4b6b      	ldr	r3, [pc, #428]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a6e      	ldr	r2, [pc, #440]	@ (80023f8 <HAL_RCC_OscConfig+0x340>)
 800223e:	4013      	ands	r3, r2
 8002240:	0019      	movs	r1, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	4b68      	ldr	r3, [pc, #416]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002248:	430a      	orrs	r2, r1
 800224a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800224c:	4b66      	ldr	r3, [pc, #408]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	0adb      	lsrs	r3, r3, #11
 8002252:	2207      	movs	r2, #7
 8002254:	4013      	ands	r3, r2
 8002256:	4a69      	ldr	r2, [pc, #420]	@ (80023fc <HAL_RCC_OscConfig+0x344>)
 8002258:	40da      	lsrs	r2, r3
 800225a:	4b69      	ldr	r3, [pc, #420]	@ (8002400 <HAL_RCC_OscConfig+0x348>)
 800225c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800225e:	4b69      	ldr	r3, [pc, #420]	@ (8002404 <HAL_RCC_OscConfig+0x34c>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	0018      	movs	r0, r3
 8002264:	f7fe ff34 	bl	80010d0 <HAL_InitTick>
 8002268:	1e03      	subs	r3, r0, #0
 800226a:	d051      	beq.n	8002310 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e27d      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d030      	beq.n	80022da <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002278:	4b5b      	ldr	r3, [pc, #364]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5e      	ldr	r2, [pc, #376]	@ (80023f8 <HAL_RCC_OscConfig+0x340>)
 800227e:	4013      	ands	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	4b58      	ldr	r3, [pc, #352]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002288:	430a      	orrs	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800228c:	4b56      	ldr	r3, [pc, #344]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b55      	ldr	r3, [pc, #340]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002292:	2180      	movs	r1, #128	@ 0x80
 8002294:	0049      	lsls	r1, r1, #1
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7fe ff75 	bl	8001188 <HAL_GetTick>
 800229e:	0003      	movs	r3, r0
 80022a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe ff70 	bl	8001188 <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e25a      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022b6:	4b4c      	ldr	r3, [pc, #304]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	2380      	movs	r3, #128	@ 0x80
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4013      	ands	r3, r2
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	4b49      	ldr	r3, [pc, #292]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	4a4b      	ldr	r2, [pc, #300]	@ (80023f4 <HAL_RCC_OscConfig+0x33c>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	695b      	ldr	r3, [r3, #20]
 80022d0:	021a      	lsls	r2, r3, #8
 80022d2:	4b45      	ldr	r3, [pc, #276]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	e01b      	b.n	8002312 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80022da:	4b43      	ldr	r3, [pc, #268]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b42      	ldr	r3, [pc, #264]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80022e0:	4949      	ldr	r1, [pc, #292]	@ (8002408 <HAL_RCC_OscConfig+0x350>)
 80022e2:	400a      	ands	r2, r1
 80022e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e6:	f7fe ff4f 	bl	8001188 <HAL_GetTick>
 80022ea:	0003      	movs	r3, r0
 80022ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f0:	f7fe ff4a 	bl	8001188 <HAL_GetTick>
 80022f4:	0002      	movs	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e234      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002302:	4b39      	ldr	r3, [pc, #228]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	2380      	movs	r3, #128	@ 0x80
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4013      	ands	r3, r2
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x238>
 800230e:	e000      	b.n	8002312 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002310:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2208      	movs	r2, #8
 8002318:	4013      	ands	r3, r2
 800231a:	d047      	beq.n	80023ac <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800231c:	4b32      	ldr	r3, [pc, #200]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2238      	movs	r2, #56	@ 0x38
 8002322:	4013      	ands	r3, r2
 8002324:	2b18      	cmp	r3, #24
 8002326:	d10a      	bne.n	800233e <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002328:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800232a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800232c:	2202      	movs	r2, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d03c      	beq.n	80023ac <HAL_RCC_OscConfig+0x2f4>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d138      	bne.n	80023ac <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e216      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d019      	beq.n	800237a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002346:	4b28      	ldr	r3, [pc, #160]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002348:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800234a:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800234c:	2101      	movs	r1, #1
 800234e:	430a      	orrs	r2, r1
 8002350:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe ff19 	bl	8001188 <HAL_GetTick>
 8002356:	0003      	movs	r3, r0
 8002358:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800235c:	f7fe ff14 	bl	8001188 <HAL_GetTick>
 8002360:	0002      	movs	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1fe      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800236e:	4b1e      	ldr	r3, [pc, #120]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	2202      	movs	r2, #2
 8002374:	4013      	ands	r3, r2
 8002376:	d0f1      	beq.n	800235c <HAL_RCC_OscConfig+0x2a4>
 8002378:	e018      	b.n	80023ac <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800237a:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 800237c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800237e:	4b1a      	ldr	r3, [pc, #104]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 8002380:	2101      	movs	r1, #1
 8002382:	438a      	bics	r2, r1
 8002384:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe feff 	bl	8001188 <HAL_GetTick>
 800238a:	0003      	movs	r3, r0
 800238c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800238e:	e008      	b.n	80023a2 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002390:	f7fe fefa 	bl	8001188 <HAL_GetTick>
 8002394:	0002      	movs	r2, r0
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b02      	cmp	r3, #2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e1e4      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80023a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023a6:	2202      	movs	r2, #2
 80023a8:	4013      	ands	r3, r2
 80023aa:	d1f1      	bne.n	8002390 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2204      	movs	r2, #4
 80023b2:	4013      	ands	r3, r2
 80023b4:	d100      	bne.n	80023b8 <HAL_RCC_OscConfig+0x300>
 80023b6:	e0c7      	b.n	8002548 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023b8:	231f      	movs	r3, #31
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023c0:	4b09      	ldr	r3, [pc, #36]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	2238      	movs	r2, #56	@ 0x38
 80023c6:	4013      	ands	r3, r2
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	d11f      	bne.n	800240c <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80023cc:	4b06      	ldr	r3, [pc, #24]	@ (80023e8 <HAL_RCC_OscConfig+0x330>)
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	2202      	movs	r2, #2
 80023d2:	4013      	ands	r3, r2
 80023d4:	d100      	bne.n	80023d8 <HAL_RCC_OscConfig+0x320>
 80023d6:	e0b7      	b.n	8002548 <HAL_RCC_OscConfig+0x490>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d000      	beq.n	80023e2 <HAL_RCC_OscConfig+0x32a>
 80023e0:	e0b2      	b.n	8002548 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e1c2      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	40021000 	.word	0x40021000
 80023ec:	fffeffff 	.word	0xfffeffff
 80023f0:	fffbffff 	.word	0xfffbffff
 80023f4:	ffff80ff 	.word	0xffff80ff
 80023f8:	ffffc7ff 	.word	0xffffc7ff
 80023fc:	00f42400 	.word	0x00f42400
 8002400:	20000000 	.word	0x20000000
 8002404:	20000004 	.word	0x20000004
 8002408:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800240c:	4bb5      	ldr	r3, [pc, #724]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 800240e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002410:	2380      	movs	r3, #128	@ 0x80
 8002412:	055b      	lsls	r3, r3, #21
 8002414:	4013      	ands	r3, r2
 8002416:	d101      	bne.n	800241c <HAL_RCC_OscConfig+0x364>
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x366>
 800241c:	2300      	movs	r3, #0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d011      	beq.n	8002446 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	4bb0      	ldr	r3, [pc, #704]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002424:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002426:	4baf      	ldr	r3, [pc, #700]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002428:	2180      	movs	r1, #128	@ 0x80
 800242a:	0549      	lsls	r1, r1, #21
 800242c:	430a      	orrs	r2, r1
 800242e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002430:	4bac      	ldr	r3, [pc, #688]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002432:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002434:	2380      	movs	r3, #128	@ 0x80
 8002436:	055b      	lsls	r3, r3, #21
 8002438:	4013      	ands	r3, r2
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800243e:	231f      	movs	r3, #31
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002446:	4ba8      	ldr	r3, [pc, #672]	@ (80026e8 <HAL_RCC_OscConfig+0x630>)
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	2380      	movs	r3, #128	@ 0x80
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4013      	ands	r3, r2
 8002450:	d11a      	bne.n	8002488 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002452:	4ba5      	ldr	r3, [pc, #660]	@ (80026e8 <HAL_RCC_OscConfig+0x630>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	4ba4      	ldr	r3, [pc, #656]	@ (80026e8 <HAL_RCC_OscConfig+0x630>)
 8002458:	2180      	movs	r1, #128	@ 0x80
 800245a:	0049      	lsls	r1, r1, #1
 800245c:	430a      	orrs	r2, r1
 800245e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002460:	f7fe fe92 	bl	8001188 <HAL_GetTick>
 8002464:	0003      	movs	r3, r0
 8002466:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800246a:	f7fe fe8d 	bl	8001188 <HAL_GetTick>
 800246e:	0002      	movs	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e177      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4b9a      	ldr	r3, [pc, #616]	@ (80026e8 <HAL_RCC_OscConfig+0x630>)
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4013      	ands	r3, r2
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x3e6>
 8002490:	4b94      	ldr	r3, [pc, #592]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002492:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002494:	4b93      	ldr	r3, [pc, #588]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002496:	2101      	movs	r1, #1
 8002498:	430a      	orrs	r2, r1
 800249a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800249c:	e01c      	b.n	80024d8 <HAL_RCC_OscConfig+0x420>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b05      	cmp	r3, #5
 80024a4:	d10c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x408>
 80024a6:	4b8f      	ldr	r3, [pc, #572]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80024a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024aa:	4b8e      	ldr	r3, [pc, #568]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80024ac:	2104      	movs	r1, #4
 80024ae:	430a      	orrs	r2, r1
 80024b0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024b2:	4b8c      	ldr	r3, [pc, #560]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80024b4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024b6:	4b8b      	ldr	r3, [pc, #556]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	430a      	orrs	r2, r1
 80024bc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024be:	e00b      	b.n	80024d8 <HAL_RCC_OscConfig+0x420>
 80024c0:	4b88      	ldr	r3, [pc, #544]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80024c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024c4:	4b87      	ldr	r3, [pc, #540]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80024c6:	2101      	movs	r1, #1
 80024c8:	438a      	bics	r2, r1
 80024ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024cc:	4b85      	ldr	r3, [pc, #532]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80024ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80024d0:	4b84      	ldr	r3, [pc, #528]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80024d2:	2104      	movs	r1, #4
 80024d4:	438a      	bics	r2, r1
 80024d6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d014      	beq.n	800250a <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e0:	f7fe fe52 	bl	8001188 <HAL_GetTick>
 80024e4:	0003      	movs	r3, r0
 80024e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e8:	e009      	b.n	80024fe <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ea:	f7fe fe4d 	bl	8001188 <HAL_GetTick>
 80024ee:	0002      	movs	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	4a7d      	ldr	r2, [pc, #500]	@ (80026ec <HAL_RCC_OscConfig+0x634>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e136      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024fe:	4b79      	ldr	r3, [pc, #484]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002500:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x432>
 8002508:	e013      	b.n	8002532 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250a:	f7fe fe3d 	bl	8001188 <HAL_GetTick>
 800250e:	0003      	movs	r3, r0
 8002510:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002512:	e009      	b.n	8002528 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002514:	f7fe fe38 	bl	8001188 <HAL_GetTick>
 8002518:	0002      	movs	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	4a73      	ldr	r2, [pc, #460]	@ (80026ec <HAL_RCC_OscConfig+0x634>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e121      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002528:	4b6e      	ldr	r3, [pc, #440]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 800252a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800252c:	2202      	movs	r2, #2
 800252e:	4013      	ands	r3, r2
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d105      	bne.n	8002548 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800253c:	4b69      	ldr	r3, [pc, #420]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 800253e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002540:	4b68      	ldr	r3, [pc, #416]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002542:	496b      	ldr	r1, [pc, #428]	@ (80026f0 <HAL_RCC_OscConfig+0x638>)
 8002544:	400a      	ands	r2, r1
 8002546:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2220      	movs	r2, #32
 800254e:	4013      	ands	r3, r2
 8002550:	d039      	beq.n	80025c6 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	69db      	ldr	r3, [r3, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d01b      	beq.n	8002592 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800255a:	4b62      	ldr	r3, [pc, #392]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b61      	ldr	r3, [pc, #388]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002560:	2180      	movs	r1, #128	@ 0x80
 8002562:	03c9      	lsls	r1, r1, #15
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002568:	f7fe fe0e 	bl	8001188 <HAL_GetTick>
 800256c:	0003      	movs	r3, r0
 800256e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002572:	f7fe fe09 	bl	8001188 <HAL_GetTick>
 8002576:	0002      	movs	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0f3      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002584:	4b57      	ldr	r3, [pc, #348]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2380      	movs	r3, #128	@ 0x80
 800258a:	041b      	lsls	r3, r3, #16
 800258c:	4013      	ands	r3, r2
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x4ba>
 8002590:	e019      	b.n	80025c6 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002592:	4b54      	ldr	r3, [pc, #336]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	4b53      	ldr	r3, [pc, #332]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002598:	4956      	ldr	r1, [pc, #344]	@ (80026f4 <HAL_RCC_OscConfig+0x63c>)
 800259a:	400a      	ands	r2, r1
 800259c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259e:	f7fe fdf3 	bl	8001188 <HAL_GetTick>
 80025a2:	0003      	movs	r3, r0
 80025a4:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80025a6:	e008      	b.n	80025ba <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025a8:	f7fe fdee 	bl	8001188 <HAL_GetTick>
 80025ac:	0002      	movs	r2, r0
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e0d8      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80025ba:	4b4a      	ldr	r3, [pc, #296]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	4013      	ands	r3, r2
 80025c4:	d1f0      	bne.n	80025a8 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d100      	bne.n	80025d0 <HAL_RCC_OscConfig+0x518>
 80025ce:	e0cc      	b.n	800276a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025d0:	4b44      	ldr	r3, [pc, #272]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2238      	movs	r2, #56	@ 0x38
 80025d6:	4013      	ands	r3, r2
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d100      	bne.n	80025de <HAL_RCC_OscConfig+0x526>
 80025dc:	e07b      	b.n	80026d6 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d156      	bne.n	8002694 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025e6:	4b3f      	ldr	r3, [pc, #252]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b3e      	ldr	r3, [pc, #248]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80025ec:	4942      	ldr	r1, [pc, #264]	@ (80026f8 <HAL_RCC_OscConfig+0x640>)
 80025ee:	400a      	ands	r2, r1
 80025f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7fe fdc9 	bl	8001188 <HAL_GetTick>
 80025f6:	0003      	movs	r3, r0
 80025f8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe fdc4 	bl	8001188 <HAL_GetTick>
 8002600:	0002      	movs	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e0ae      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800260e:	4b35      	ldr	r3, [pc, #212]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	049b      	lsls	r3, r3, #18
 8002616:	4013      	ands	r3, r2
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800261a:	4b32      	ldr	r3, [pc, #200]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	4a37      	ldr	r2, [pc, #220]	@ (80026fc <HAL_RCC_OscConfig+0x644>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	021b      	lsls	r3, r3, #8
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002646:	431a      	orrs	r2, r3
 8002648:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 800264a:	430a      	orrs	r2, r1
 800264c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800264e:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b24      	ldr	r3, [pc, #144]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002654:	2180      	movs	r1, #128	@ 0x80
 8002656:	0449      	lsls	r1, r1, #17
 8002658:	430a      	orrs	r2, r1
 800265a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800265c:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 800265e:	68da      	ldr	r2, [r3, #12]
 8002660:	4b20      	ldr	r3, [pc, #128]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002662:	2180      	movs	r1, #128	@ 0x80
 8002664:	0549      	lsls	r1, r1, #21
 8002666:	430a      	orrs	r2, r1
 8002668:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266a:	f7fe fd8d 	bl	8001188 <HAL_GetTick>
 800266e:	0003      	movs	r3, r0
 8002670:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7fe fd88 	bl	8001188 <HAL_GetTick>
 8002678:	0002      	movs	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e072      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002686:	4b17      	ldr	r3, [pc, #92]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	049b      	lsls	r3, r3, #18
 800268e:	4013      	ands	r3, r2
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x5bc>
 8002692:	e06a      	b.n	800276a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b13      	ldr	r3, [pc, #76]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 800269a:	4917      	ldr	r1, [pc, #92]	@ (80026f8 <HAL_RCC_OscConfig+0x640>)
 800269c:	400a      	ands	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fd72 	bl	8001188 <HAL_GetTick>
 80026a4:	0003      	movs	r3, r0
 80026a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026aa:	f7fe fd6d 	bl	8001188 <HAL_GetTick>
 80026ae:	0002      	movs	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e057      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	2380      	movs	r3, #128	@ 0x80
 80026c2:	049b      	lsls	r3, r3, #18
 80026c4:	4013      	ands	r3, r2
 80026c6:	d1f0      	bne.n	80026aa <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80026c8:	4b06      	ldr	r3, [pc, #24]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_RCC_OscConfig+0x62c>)
 80026ce:	490c      	ldr	r1, [pc, #48]	@ (8002700 <HAL_RCC_OscConfig+0x648>)
 80026d0:	400a      	ands	r2, r1
 80026d2:	60da      	str	r2, [r3, #12]
 80026d4:	e049      	b.n	800276a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d112      	bne.n	8002704 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e044      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
 80026e2:	46c0      	nop			@ (mov r8, r8)
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40007000 	.word	0x40007000
 80026ec:	00001388 	.word	0x00001388
 80026f0:	efffffff 	.word	0xefffffff
 80026f4:	ffbfffff 	.word	0xffbfffff
 80026f8:	feffffff 	.word	0xfeffffff
 80026fc:	11c1808c 	.word	0x11c1808c
 8002700:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002704:	4b1b      	ldr	r3, [pc, #108]	@ (8002774 <HAL_RCC_OscConfig+0x6bc>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2203      	movs	r2, #3
 800270e:	401a      	ands	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002714:	429a      	cmp	r2, r3
 8002716:	d126      	bne.n	8002766 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	2270      	movs	r2, #112	@ 0x70
 800271c:	401a      	ands	r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002722:	429a      	cmp	r2, r3
 8002724:	d11f      	bne.n	8002766 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	23fe      	movs	r3, #254	@ 0xfe
 800272a:	01db      	lsls	r3, r3, #7
 800272c:	401a      	ands	r2, r3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002732:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002734:	429a      	cmp	r2, r3
 8002736:	d116      	bne.n	8002766 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	23f8      	movs	r3, #248	@ 0xf8
 800273c:	039b      	lsls	r3, r3, #14
 800273e:	401a      	ands	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002744:	429a      	cmp	r2, r3
 8002746:	d10e      	bne.n	8002766 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002748:	697a      	ldr	r2, [r7, #20]
 800274a:	23e0      	movs	r3, #224	@ 0xe0
 800274c:	051b      	lsls	r3, r3, #20
 800274e:	401a      	ands	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002754:	429a      	cmp	r2, r3
 8002756:	d106      	bne.n	8002766 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	0f5b      	lsrs	r3, r3, #29
 800275c:	075a      	lsls	r2, r3, #29
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d001      	beq.n	800276a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e000      	b.n	800276c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	0018      	movs	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	b008      	add	sp, #32
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e0e9      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800278c:	4b76      	ldr	r3, [pc, #472]	@ (8002968 <HAL_RCC_ClockConfig+0x1f0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2207      	movs	r2, #7
 8002792:	4013      	ands	r3, r2
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d91e      	bls.n	80027d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b73      	ldr	r3, [pc, #460]	@ (8002968 <HAL_RCC_ClockConfig+0x1f0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2207      	movs	r2, #7
 80027a0:	4393      	bics	r3, r2
 80027a2:	0019      	movs	r1, r3
 80027a4:	4b70      	ldr	r3, [pc, #448]	@ (8002968 <HAL_RCC_ClockConfig+0x1f0>)
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	430a      	orrs	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027ac:	f7fe fcec 	bl	8001188 <HAL_GetTick>
 80027b0:	0003      	movs	r3, r0
 80027b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027b4:	e009      	b.n	80027ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027b6:	f7fe fce7 	bl	8001188 <HAL_GetTick>
 80027ba:	0002      	movs	r2, r0
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	4a6a      	ldr	r2, [pc, #424]	@ (800296c <HAL_RCC_ClockConfig+0x1f4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e0ca      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ca:	4b67      	ldr	r3, [pc, #412]	@ (8002968 <HAL_RCC_ClockConfig+0x1f0>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2207      	movs	r2, #7
 80027d0:	4013      	ands	r3, r2
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d1ee      	bne.n	80027b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2202      	movs	r2, #2
 80027de:	4013      	ands	r3, r2
 80027e0:	d015      	beq.n	800280e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	d006      	beq.n	80027fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80027ec:	4b60      	ldr	r3, [pc, #384]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4b5f      	ldr	r3, [pc, #380]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 80027f2:	21e0      	movs	r1, #224	@ 0xe0
 80027f4:	01c9      	lsls	r1, r1, #7
 80027f6:	430a      	orrs	r2, r1
 80027f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fa:	4b5d      	ldr	r3, [pc, #372]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	4a5d      	ldr	r2, [pc, #372]	@ (8002974 <HAL_RCC_ClockConfig+0x1fc>)
 8002800:	4013      	ands	r3, r2
 8002802:	0019      	movs	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689a      	ldr	r2, [r3, #8]
 8002808:	4b59      	ldr	r3, [pc, #356]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 800280a:	430a      	orrs	r2, r1
 800280c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d057      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d107      	bne.n	8002830 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002820:	4b53      	ldr	r3, [pc, #332]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2380      	movs	r3, #128	@ 0x80
 8002826:	029b      	lsls	r3, r3, #10
 8002828:	4013      	ands	r3, r2
 800282a:	d12b      	bne.n	8002884 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e097      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b02      	cmp	r3, #2
 8002836:	d107      	bne.n	8002848 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002838:	4b4d      	ldr	r3, [pc, #308]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	049b      	lsls	r3, r3, #18
 8002840:	4013      	ands	r3, r2
 8002842:	d11f      	bne.n	8002884 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e08b      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d107      	bne.n	8002860 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002850:	4b47      	ldr	r3, [pc, #284]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	2380      	movs	r3, #128	@ 0x80
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4013      	ands	r3, r2
 800285a:	d113      	bne.n	8002884 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e07f      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d106      	bne.n	8002876 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002868:	4b41      	ldr	r3, [pc, #260]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d108      	bne.n	8002884 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e074      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002876:	4b3e      	ldr	r3, [pc, #248]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 8002878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d101      	bne.n	8002884 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e06d      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002884:	4b3a      	ldr	r3, [pc, #232]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2207      	movs	r2, #7
 800288a:	4393      	bics	r3, r2
 800288c:	0019      	movs	r1, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685a      	ldr	r2, [r3, #4]
 8002892:	4b37      	ldr	r3, [pc, #220]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 8002894:	430a      	orrs	r2, r1
 8002896:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002898:	f7fe fc76 	bl	8001188 <HAL_GetTick>
 800289c:	0003      	movs	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a0:	e009      	b.n	80028b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a2:	f7fe fc71 	bl	8001188 <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	4a2f      	ldr	r2, [pc, #188]	@ (800296c <HAL_RCC_ClockConfig+0x1f4>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e054      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2238      	movs	r2, #56	@ 0x38
 80028bc:	401a      	ands	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1ec      	bne.n	80028a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c8:	4b27      	ldr	r3, [pc, #156]	@ (8002968 <HAL_RCC_ClockConfig+0x1f0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2207      	movs	r2, #7
 80028ce:	4013      	ands	r3, r2
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d21e      	bcs.n	8002914 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b24      	ldr	r3, [pc, #144]	@ (8002968 <HAL_RCC_ClockConfig+0x1f0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2207      	movs	r2, #7
 80028dc:	4393      	bics	r3, r2
 80028de:	0019      	movs	r1, r3
 80028e0:	4b21      	ldr	r3, [pc, #132]	@ (8002968 <HAL_RCC_ClockConfig+0x1f0>)
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	430a      	orrs	r2, r1
 80028e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028e8:	f7fe fc4e 	bl	8001188 <HAL_GetTick>
 80028ec:	0003      	movs	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80028f0:	e009      	b.n	8002906 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f2:	f7fe fc49 	bl	8001188 <HAL_GetTick>
 80028f6:	0002      	movs	r2, r0
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	4a1b      	ldr	r2, [pc, #108]	@ (800296c <HAL_RCC_ClockConfig+0x1f4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e02c      	b.n	8002960 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002906:	4b18      	ldr	r3, [pc, #96]	@ (8002968 <HAL_RCC_ClockConfig+0x1f0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2207      	movs	r2, #7
 800290c:	4013      	ands	r3, r2
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d1ee      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2204      	movs	r2, #4
 800291a:	4013      	ands	r3, r2
 800291c:	d009      	beq.n	8002932 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	4a15      	ldr	r2, [pc, #84]	@ (8002978 <HAL_RCC_ClockConfig+0x200>)
 8002924:	4013      	ands	r3, r2
 8002926:	0019      	movs	r1, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68da      	ldr	r2, [r3, #12]
 800292c:	4b10      	ldr	r3, [pc, #64]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 800292e:	430a      	orrs	r2, r1
 8002930:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002932:	f000 f829 	bl	8002988 <HAL_RCC_GetSysClockFreq>
 8002936:	0001      	movs	r1, r0
 8002938:	4b0d      	ldr	r3, [pc, #52]	@ (8002970 <HAL_RCC_ClockConfig+0x1f8>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	0a1b      	lsrs	r3, r3, #8
 800293e:	220f      	movs	r2, #15
 8002940:	401a      	ands	r2, r3
 8002942:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <HAL_RCC_ClockConfig+0x204>)
 8002944:	0092      	lsls	r2, r2, #2
 8002946:	58d3      	ldr	r3, [r2, r3]
 8002948:	221f      	movs	r2, #31
 800294a:	4013      	ands	r3, r2
 800294c:	000a      	movs	r2, r1
 800294e:	40da      	lsrs	r2, r3
 8002950:	4b0b      	ldr	r3, [pc, #44]	@ (8002980 <HAL_RCC_ClockConfig+0x208>)
 8002952:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002954:	4b0b      	ldr	r3, [pc, #44]	@ (8002984 <HAL_RCC_ClockConfig+0x20c>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	0018      	movs	r0, r3
 800295a:	f7fe fbb9 	bl	80010d0 <HAL_InitTick>
 800295e:	0003      	movs	r3, r0
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b004      	add	sp, #16
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40022000 	.word	0x40022000
 800296c:	00001388 	.word	0x00001388
 8002970:	40021000 	.word	0x40021000
 8002974:	fffff0ff 	.word	0xfffff0ff
 8002978:	ffff8fff 	.word	0xffff8fff
 800297c:	08004ba0 	.word	0x08004ba0
 8002980:	20000000 	.word	0x20000000
 8002984:	20000004 	.word	0x20000004

08002988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800298e:	4b3c      	ldr	r3, [pc, #240]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2238      	movs	r2, #56	@ 0x38
 8002994:	4013      	ands	r3, r2
 8002996:	d10f      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002998:	4b39      	ldr	r3, [pc, #228]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	0adb      	lsrs	r3, r3, #11
 800299e:	2207      	movs	r2, #7
 80029a0:	4013      	ands	r3, r2
 80029a2:	2201      	movs	r2, #1
 80029a4:	409a      	lsls	r2, r3
 80029a6:	0013      	movs	r3, r2
 80029a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029aa:	6839      	ldr	r1, [r7, #0]
 80029ac:	4835      	ldr	r0, [pc, #212]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029ae:	f7fd fbab 	bl	8000108 <__udivsi3>
 80029b2:	0003      	movs	r3, r0
 80029b4:	613b      	str	r3, [r7, #16]
 80029b6:	e05d      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029b8:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	2238      	movs	r2, #56	@ 0x38
 80029be:	4013      	ands	r3, r2
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d102      	bne.n	80029ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029c4:	4b30      	ldr	r3, [pc, #192]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x100>)
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	e054      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ca:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2238      	movs	r2, #56	@ 0x38
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b10      	cmp	r3, #16
 80029d4:	d138      	bne.n	8002a48 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	2203      	movs	r2, #3
 80029dc:	4013      	ands	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e0:	4b27      	ldr	r3, [pc, #156]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	091b      	lsrs	r3, r3, #4
 80029e6:	2207      	movs	r2, #7
 80029e8:	4013      	ands	r3, r2
 80029ea:	3301      	adds	r3, #1
 80029ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b03      	cmp	r3, #3
 80029f2:	d10d      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029f4:	68b9      	ldr	r1, [r7, #8]
 80029f6:	4824      	ldr	r0, [pc, #144]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x100>)
 80029f8:	f7fd fb86 	bl	8000108 <__udivsi3>
 80029fc:	0003      	movs	r3, r0
 80029fe:	0019      	movs	r1, r3
 8002a00:	4b1f      	ldr	r3, [pc, #124]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	227f      	movs	r2, #127	@ 0x7f
 8002a08:	4013      	ands	r3, r2
 8002a0a:	434b      	muls	r3, r1
 8002a0c:	617b      	str	r3, [r7, #20]
        break;
 8002a0e:	e00d      	b.n	8002a2c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a10:	68b9      	ldr	r1, [r7, #8]
 8002a12:	481c      	ldr	r0, [pc, #112]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a14:	f7fd fb78 	bl	8000108 <__udivsi3>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	0019      	movs	r1, r3
 8002a1c:	4b18      	ldr	r3, [pc, #96]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	227f      	movs	r2, #127	@ 0x7f
 8002a24:	4013      	ands	r3, r2
 8002a26:	434b      	muls	r3, r1
 8002a28:	617b      	str	r3, [r7, #20]
        break;
 8002a2a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	0f5b      	lsrs	r3, r3, #29
 8002a32:	2207      	movs	r2, #7
 8002a34:	4013      	ands	r3, r2
 8002a36:	3301      	adds	r3, #1
 8002a38:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	6978      	ldr	r0, [r7, #20]
 8002a3e:	f7fd fb63 	bl	8000108 <__udivsi3>
 8002a42:	0003      	movs	r3, r0
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	e015      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a48:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	2238      	movs	r2, #56	@ 0x38
 8002a4e:	4013      	ands	r3, r2
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d103      	bne.n	8002a5c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	021b      	lsls	r3, r3, #8
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	e00b      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a5c:	4b08      	ldr	r3, [pc, #32]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2238      	movs	r2, #56	@ 0x38
 8002a62:	4013      	ands	r3, r2
 8002a64:	2b18      	cmp	r3, #24
 8002a66:	d103      	bne.n	8002a70 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a68:	23fa      	movs	r3, #250	@ 0xfa
 8002a6a:	01db      	lsls	r3, r3, #7
 8002a6c:	613b      	str	r3, [r7, #16]
 8002a6e:	e001      	b.n	8002a74 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a74:	693b      	ldr	r3, [r7, #16]
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b006      	add	sp, #24
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	46c0      	nop			@ (mov r8, r8)
 8002a80:	40021000 	.word	0x40021000
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	007a1200 	.word	0x007a1200

08002a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a94:	2313      	movs	r3, #19
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a9c:	2312      	movs	r3, #18
 8002a9e:	18fb      	adds	r3, r7, r3
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	029b      	lsls	r3, r3, #10
 8002aac:	4013      	ands	r3, r2
 8002aae:	d100      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ab0:	e0ad      	b.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ab2:	2011      	movs	r0, #17
 8002ab4:	183b      	adds	r3, r7, r0
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aba:	4b47      	ldr	r3, [pc, #284]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002abc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	055b      	lsls	r3, r3, #21
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d110      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ac6:	4b44      	ldr	r3, [pc, #272]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ac8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aca:	4b43      	ldr	r3, [pc, #268]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002acc:	2180      	movs	r1, #128	@ 0x80
 8002ace:	0549      	lsls	r1, r1, #21
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ad4:	4b40      	ldr	r3, [pc, #256]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ad8:	2380      	movs	r3, #128	@ 0x80
 8002ada:	055b      	lsls	r3, r3, #21
 8002adc:	4013      	ands	r3, r2
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ae2:	183b      	adds	r3, r7, r0
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	4b3b      	ldr	r3, [pc, #236]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002aee:	2180      	movs	r1, #128	@ 0x80
 8002af0:	0049      	lsls	r1, r1, #1
 8002af2:	430a      	orrs	r2, r1
 8002af4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002af6:	f7fe fb47 	bl	8001188 <HAL_GetTick>
 8002afa:	0003      	movs	r3, r0
 8002afc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002afe:	e00b      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b00:	f7fe fb42 	bl	8001188 <HAL_GetTick>
 8002b04:	0002      	movs	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d904      	bls.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b0e:	2313      	movs	r3, #19
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2203      	movs	r2, #3
 8002b14:	701a      	strb	r2, [r3, #0]
        break;
 8002b16:	e005      	b.n	8002b24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b18:	4b30      	ldr	r3, [pc, #192]	@ (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	@ 0x80
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4013      	ands	r3, r2
 8002b22:	d0ed      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b24:	2313      	movs	r3, #19
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d15e      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b30:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b32:	23c0      	movs	r3, #192	@ 0xc0
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4013      	ands	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d019      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d014      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b4a:	4b23      	ldr	r3, [pc, #140]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4e:	4a24      	ldr	r2, [pc, #144]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b54:	4b20      	ldr	r3, [pc, #128]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b58:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b5a:	2180      	movs	r1, #128	@ 0x80
 8002b5c:	0249      	lsls	r1, r1, #9
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b62:	4b1d      	ldr	r3, [pc, #116]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b64:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b66:	4b1c      	ldr	r3, [pc, #112]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b68:	491e      	ldr	r1, [pc, #120]	@ (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002b6a:	400a      	ands	r2, r1
 8002b6c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	2201      	movs	r2, #1
 8002b78:	4013      	ands	r3, r2
 8002b7a:	d016      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe fb04 	bl	8001188 <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b84:	e00c      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe faff 	bl	8001188 <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	4a15      	ldr	r2, [pc, #84]	@ (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d904      	bls.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b96:	2313      	movs	r3, #19
 8002b98:	18fb      	adds	r3, r7, r3
 8002b9a:	2203      	movs	r2, #3
 8002b9c:	701a      	strb	r2, [r3, #0]
            break;
 8002b9e:	e004      	b.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ba4:	2202      	movs	r2, #2
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d0ed      	beq.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002baa:	2313      	movs	r3, #19
 8002bac:	18fb      	adds	r3, r7, r3
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d10a      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bb4:	4b08      	ldr	r3, [pc, #32]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bb8:	4a09      	ldr	r2, [pc, #36]	@ (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002bba:	4013      	ands	r3, r2
 8002bbc:	0019      	movs	r1, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bc2:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002bc8:	e016      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bca:	2312      	movs	r3, #18
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2213      	movs	r2, #19
 8002bd0:	18ba      	adds	r2, r7, r2
 8002bd2:	7812      	ldrb	r2, [r2, #0]
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	e00f      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	fffffcff 	.word	0xfffffcff
 8002be4:	fffeffff 	.word	0xfffeffff
 8002be8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bec:	2312      	movs	r3, #18
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	2213      	movs	r2, #19
 8002bf2:	18ba      	adds	r2, r7, r2
 8002bf4:	7812      	ldrb	r2, [r2, #0]
 8002bf6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bf8:	2311      	movs	r3, #17
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d105      	bne.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c02:	4bc5      	ldr	r3, [pc, #788]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c06:	4bc4      	ldr	r3, [pc, #784]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c08:	49c4      	ldr	r1, [pc, #784]	@ (8002f1c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	400a      	ands	r2, r1
 8002c0c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2201      	movs	r2, #1
 8002c14:	4013      	ands	r3, r2
 8002c16:	d009      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c18:	4bbf      	ldr	r3, [pc, #764]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c1c:	2203      	movs	r2, #3
 8002c1e:	4393      	bics	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	4bbc      	ldr	r3, [pc, #752]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2202      	movs	r2, #2
 8002c32:	4013      	ands	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c36:	4bb8      	ldr	r3, [pc, #736]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c3a:	220c      	movs	r2, #12
 8002c3c:	4393      	bics	r3, r2
 8002c3e:	0019      	movs	r1, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	4bb4      	ldr	r3, [pc, #720]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c46:	430a      	orrs	r2, r1
 8002c48:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	d009      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c54:	4bb0      	ldr	r3, [pc, #704]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c58:	2230      	movs	r2, #48	@ 0x30
 8002c5a:	4393      	bics	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	4bad      	ldr	r3, [pc, #692]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2210      	movs	r2, #16
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d009      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c72:	4ba9      	ldr	r3, [pc, #676]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c76:	4aaa      	ldr	r2, [pc, #680]	@ (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002c78:	4013      	ands	r3, r2
 8002c7a:	0019      	movs	r1, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	4ba5      	ldr	r3, [pc, #660]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c82:	430a      	orrs	r2, r1
 8002c84:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	@ 0x80
 8002c8c:	015b      	lsls	r3, r3, #5
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d009      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002c92:	4ba1      	ldr	r3, [pc, #644]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c96:	4aa3      	ldr	r2, [pc, #652]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002c98:	4013      	ands	r3, r2
 8002c9a:	0019      	movs	r1, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	4b9d      	ldr	r3, [pc, #628]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	2380      	movs	r3, #128	@ 0x80
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	4013      	ands	r3, r2
 8002cb0:	d009      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb2:	4b99      	ldr	r3, [pc, #612]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb6:	4a9c      	ldr	r2, [pc, #624]	@ (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x49c>)
 8002cb8:	4013      	ands	r3, r2
 8002cba:	0019      	movs	r1, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cc0:	4b95      	ldr	r3, [pc, #596]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	2380      	movs	r3, #128	@ 0x80
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d009      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002cd2:	4b91      	ldr	r3, [pc, #580]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd6:	4a95      	ldr	r2, [pc, #596]	@ (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2220      	movs	r2, #32
 8002cec:	4013      	ands	r3, r2
 8002cee:	d009      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cf0:	4b89      	ldr	r3, [pc, #548]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cf4:	4a8e      	ldr	r2, [pc, #568]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	0019      	movs	r1, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	4b86      	ldr	r3, [pc, #536]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d00:	430a      	orrs	r2, r1
 8002d02:	655a      	str	r2, [r3, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2240      	movs	r2, #64	@ 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0e:	4b82      	ldr	r3, [pc, #520]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d12:	4a88      	ldr	r2, [pc, #544]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x4a8>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	4b7e      	ldr	r3, [pc, #504]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	2380      	movs	r3, #128	@ 0x80
 8002d28:	02db      	lsls	r3, r3, #11
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d016      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d32:	4a81      	ldr	r2, [pc, #516]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	0019      	movs	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d3c:	4b76      	ldr	r3, [pc, #472]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d46:	23c0      	movs	r3, #192	@ 0xc0
 8002d48:	051b      	lsls	r3, r3, #20
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d106      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d4e:	4b72      	ldr	r3, [pc, #456]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d50:	68da      	ldr	r2, [r3, #12]
 8002d52:	4b71      	ldr	r3, [pc, #452]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d54:	2180      	movs	r1, #128	@ 0x80
 8002d56:	0449      	lsls	r1, r1, #17
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	01db      	lsls	r3, r3, #7
 8002d64:	4013      	ands	r3, r2
 8002d66:	d015      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x308>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d68:	4b6b      	ldr	r3, [pc, #428]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	0899      	lsrs	r1, r3, #2
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d74:	4b68      	ldr	r3, [pc, #416]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d76:	430a      	orrs	r2, r1
 8002d78:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	05db      	lsls	r3, r3, #23
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d106      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d86:	4b64      	ldr	r3, [pc, #400]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d88:	68da      	ldr	r2, [r3, #12]
 8002d8a:	4b63      	ldr	r3, [pc, #396]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002d8c:	2180      	movs	r1, #128	@ 0x80
 8002d8e:	0249      	lsls	r1, r1, #9
 8002d90:	430a      	orrs	r2, r1
 8002d92:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	2380      	movs	r3, #128	@ 0x80
 8002d9a:	031b      	lsls	r3, r3, #12
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d009      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002da0:	4b5d      	ldr	r3, [pc, #372]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da4:	2240      	movs	r2, #64	@ 0x40
 8002da6:	4393      	bics	r3, r2
 8002da8:	0019      	movs	r1, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dae:	4b5a      	ldr	r3, [pc, #360]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002db0:	430a      	orrs	r2, r1
 8002db2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	2380      	movs	r3, #128	@ 0x80
 8002dba:	039b      	lsls	r3, r3, #14
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d016      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dc0:	4b55      	ldr	r3, [pc, #340]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	0019      	movs	r1, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dce:	4b52      	ldr	r3, [pc, #328]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002dd8:	2380      	movs	r3, #128	@ 0x80
 8002dda:	03db      	lsls	r3, r3, #15
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d106      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002de0:	4b4d      	ldr	r3, [pc, #308]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002de2:	68da      	ldr	r2, [r3, #12]
 8002de4:	4b4c      	ldr	r3, [pc, #304]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002de6:	2180      	movs	r1, #128	@ 0x80
 8002de8:	0449      	lsls	r1, r1, #17
 8002dea:	430a      	orrs	r2, r1
 8002dec:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	2380      	movs	r3, #128	@ 0x80
 8002df4:	03db      	lsls	r3, r3, #15
 8002df6:	4013      	ands	r3, r2
 8002df8:	d016      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x39c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002dfa:	4b47      	ldr	r3, [pc, #284]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dfe:	4a50      	ldr	r2, [pc, #320]	@ (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
 8002e00:	4013      	ands	r3, r2
 8002e02:	0019      	movs	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e08:	4b43      	ldr	r3, [pc, #268]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	045b      	lsls	r3, r3, #17
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d106      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e1a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e20:	2180      	movs	r1, #128	@ 0x80
 8002e22:	0449      	lsls	r1, r1, #17
 8002e24:	430a      	orrs	r2, r1
 8002e26:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	2380      	movs	r3, #128	@ 0x80
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	4013      	ands	r3, r2
 8002e32:	d014      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e34:	4b38      	ldr	r3, [pc, #224]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e38:	2203      	movs	r2, #3
 8002e3a:	4393      	bics	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a1a      	ldr	r2, [r3, #32]
 8002e42:	4b35      	ldr	r3, [pc, #212]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d106      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e50:	4b31      	ldr	r3, [pc, #196]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	4b30      	ldr	r3, [pc, #192]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e56:	2180      	movs	r1, #128	@ 0x80
 8002e58:	0249      	lsls	r1, r1, #9
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	2380      	movs	r3, #128	@ 0x80
 8002e64:	019b      	lsls	r3, r3, #6
 8002e66:	4013      	ands	r3, r2
 8002e68:	d014      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002e6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6e:	220c      	movs	r2, #12
 8002e70:	4393      	bics	r3, r2
 8002e72:	0019      	movs	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e78:	4b27      	ldr	r3, [pc, #156]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d106      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e86:	4b24      	ldr	r3, [pc, #144]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	4b23      	ldr	r3, [pc, #140]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002e8c:	2180      	movs	r1, #128	@ 0x80
 8002e8e:	0249      	lsls	r1, r1, #9
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	2380      	movs	r3, #128	@ 0x80
 8002e9a:	045b      	lsls	r3, r3, #17
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	d016      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002eae:	4b1a      	ldr	r3, [pc, #104]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	019b      	lsls	r3, r3, #6
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d106      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002ec0:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	4b14      	ldr	r3, [pc, #80]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002ec6:	2180      	movs	r1, #128	@ 0x80
 8002ec8:	0449      	lsls	r1, r1, #17
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	2380      	movs	r3, #128	@ 0x80
 8002ed4:	049b      	lsls	r3, r3, #18
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d016      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002eda:	4b0f      	ldr	r3, [pc, #60]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	4a11      	ldr	r2, [pc, #68]	@ (8002f24 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002eea:	430a      	orrs	r2, r1
 8002eec:	659a      	str	r2, [r3, #88]	@ 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002ef2:	2380      	movs	r3, #128	@ 0x80
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002efa:	4b07      	ldr	r3, [pc, #28]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_RCCEx_PeriphCLKConfig+0x48c>)
 8002f00:	2180      	movs	r1, #128	@ 0x80
 8002f02:	0449      	lsls	r1, r1, #17
 8002f04:	430a      	orrs	r2, r1
 8002f06:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002f08:	2312      	movs	r3, #18
 8002f0a:	18fb      	adds	r3, r7, r3
 8002f0c:	781b      	ldrb	r3, [r3, #0]
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b006      	add	sp, #24
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			@ (mov r8, r8)
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	efffffff 	.word	0xefffffff
 8002f20:	fffff3ff 	.word	0xfffff3ff
 8002f24:	fffffcff 	.word	0xfffffcff
 8002f28:	fff3ffff 	.word	0xfff3ffff
 8002f2c:	ffcfffff 	.word	0xffcfffff
 8002f30:	ffffcfff 	.word	0xffffcfff
 8002f34:	ffff3fff 	.word	0xffff3fff
 8002f38:	f3ffffff 	.word	0xf3ffffff
 8002f3c:	ffbfffff 	.word	0xffbfffff
 8002f40:	feffffff 	.word	0xfeffffff

08002f44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e04a      	b.n	8002fec <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	223d      	movs	r2, #61	@ 0x3d
 8002f5a:	5c9b      	ldrb	r3, [r3, r2]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	223c      	movs	r2, #60	@ 0x3c
 8002f66:	2100      	movs	r1, #0
 8002f68:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	0018      	movs	r0, r3
 8002f6e:	f7fd ff93 	bl	8000e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	223d      	movs	r2, #61	@ 0x3d
 8002f76:	2102      	movs	r1, #2
 8002f78:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3304      	adds	r3, #4
 8002f82:	0019      	movs	r1, r3
 8002f84:	0010      	movs	r0, r2
 8002f86:	f001 f815 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2248      	movs	r2, #72	@ 0x48
 8002f8e:	2101      	movs	r1, #1
 8002f90:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	223e      	movs	r2, #62	@ 0x3e
 8002f96:	2101      	movs	r1, #1
 8002f98:	5499      	strb	r1, [r3, r2]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	223f      	movs	r2, #63	@ 0x3f
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	5499      	strb	r1, [r3, r2]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2240      	movs	r2, #64	@ 0x40
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	5499      	strb	r1, [r3, r2]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2241      	movs	r2, #65	@ 0x41
 8002fae:	2101      	movs	r1, #1
 8002fb0:	5499      	strb	r1, [r3, r2]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2242      	movs	r2, #66	@ 0x42
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	5499      	strb	r1, [r3, r2]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2243      	movs	r2, #67	@ 0x43
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2244      	movs	r2, #68	@ 0x44
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	5499      	strb	r1, [r3, r2]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2245      	movs	r2, #69	@ 0x45
 8002fce:	2101      	movs	r1, #1
 8002fd0:	5499      	strb	r1, [r3, r2]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2246      	movs	r2, #70	@ 0x46
 8002fd6:	2101      	movs	r1, #1
 8002fd8:	5499      	strb	r1, [r3, r2]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2247      	movs	r2, #71	@ 0x47
 8002fde:	2101      	movs	r1, #1
 8002fe0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	223d      	movs	r2, #61	@ 0x3d
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e04a      	b.n	800309c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	223d      	movs	r2, #61	@ 0x3d
 800300a:	5c9b      	ldrb	r3, [r3, r2]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	223c      	movs	r2, #60	@ 0x3c
 8003016:	2100      	movs	r1, #0
 8003018:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	0018      	movs	r0, r3
 800301e:	f000 f841 	bl	80030a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	223d      	movs	r2, #61	@ 0x3d
 8003026:	2102      	movs	r1, #2
 8003028:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3304      	adds	r3, #4
 8003032:	0019      	movs	r1, r3
 8003034:	0010      	movs	r0, r2
 8003036:	f000 ffbd 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2248      	movs	r2, #72	@ 0x48
 800303e:	2101      	movs	r1, #1
 8003040:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	223e      	movs	r2, #62	@ 0x3e
 8003046:	2101      	movs	r1, #1
 8003048:	5499      	strb	r1, [r3, r2]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	223f      	movs	r2, #63	@ 0x3f
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2240      	movs	r2, #64	@ 0x40
 8003056:	2101      	movs	r1, #1
 8003058:	5499      	strb	r1, [r3, r2]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2241      	movs	r2, #65	@ 0x41
 800305e:	2101      	movs	r1, #1
 8003060:	5499      	strb	r1, [r3, r2]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2242      	movs	r2, #66	@ 0x42
 8003066:	2101      	movs	r1, #1
 8003068:	5499      	strb	r1, [r3, r2]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2243      	movs	r2, #67	@ 0x43
 800306e:	2101      	movs	r1, #1
 8003070:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2244      	movs	r2, #68	@ 0x44
 8003076:	2101      	movs	r1, #1
 8003078:	5499      	strb	r1, [r3, r2]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2245      	movs	r2, #69	@ 0x45
 800307e:	2101      	movs	r1, #1
 8003080:	5499      	strb	r1, [r3, r2]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2246      	movs	r2, #70	@ 0x46
 8003086:	2101      	movs	r1, #1
 8003088:	5499      	strb	r1, [r3, r2]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2247      	movs	r2, #71	@ 0x47
 800308e:	2101      	movs	r1, #1
 8003090:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	223d      	movs	r2, #61	@ 0x3d
 8003096:	2101      	movs	r1, #1
 8003098:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	0018      	movs	r0, r3
 800309e:	46bd      	mov	sp, r7
 80030a0:	b002      	add	sp, #8
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030ac:	46c0      	nop			@ (mov r8, r8)
 80030ae:	46bd      	mov	sp, r7
 80030b0:	b002      	add	sp, #8
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	001a      	movs	r2, r3
 80030c2:	1cbb      	adds	r3, r7, #2
 80030c4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030c6:	2317      	movs	r3, #23
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d108      	bne.n	80030e6 <HAL_TIM_PWM_Start_DMA+0x32>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	223e      	movs	r2, #62	@ 0x3e
 80030d8:	5c9b      	ldrb	r3, [r3, r2]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3b02      	subs	r3, #2
 80030de:	425a      	negs	r2, r3
 80030e0:	4153      	adcs	r3, r2
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	e037      	b.n	8003156 <HAL_TIM_PWM_Start_DMA+0xa2>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d108      	bne.n	80030fe <HAL_TIM_PWM_Start_DMA+0x4a>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	223f      	movs	r2, #63	@ 0x3f
 80030f0:	5c9b      	ldrb	r3, [r3, r2]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	3b02      	subs	r3, #2
 80030f6:	425a      	negs	r2, r3
 80030f8:	4153      	adcs	r3, r2
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e02b      	b.n	8003156 <HAL_TIM_PWM_Start_DMA+0xa2>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d108      	bne.n	8003116 <HAL_TIM_PWM_Start_DMA+0x62>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2240      	movs	r2, #64	@ 0x40
 8003108:	5c9b      	ldrb	r3, [r3, r2]
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3b02      	subs	r3, #2
 800310e:	425a      	negs	r2, r3
 8003110:	4153      	adcs	r3, r2
 8003112:	b2db      	uxtb	r3, r3
 8003114:	e01f      	b.n	8003156 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2b0c      	cmp	r3, #12
 800311a:	d108      	bne.n	800312e <HAL_TIM_PWM_Start_DMA+0x7a>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2241      	movs	r2, #65	@ 0x41
 8003120:	5c9b      	ldrb	r3, [r3, r2]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	3b02      	subs	r3, #2
 8003126:	425a      	negs	r2, r3
 8003128:	4153      	adcs	r3, r2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	e013      	b.n	8003156 <HAL_TIM_PWM_Start_DMA+0xa2>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b10      	cmp	r3, #16
 8003132:	d108      	bne.n	8003146 <HAL_TIM_PWM_Start_DMA+0x92>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2242      	movs	r2, #66	@ 0x42
 8003138:	5c9b      	ldrb	r3, [r3, r2]
 800313a:	b2db      	uxtb	r3, r3
 800313c:	3b02      	subs	r3, #2
 800313e:	425a      	negs	r2, r3
 8003140:	4153      	adcs	r3, r2
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e007      	b.n	8003156 <HAL_TIM_PWM_Start_DMA+0xa2>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2243      	movs	r2, #67	@ 0x43
 800314a:	5c9b      	ldrb	r3, [r3, r2]
 800314c:	b2db      	uxtb	r3, r3
 800314e:	3b02      	subs	r3, #2
 8003150:	425a      	negs	r2, r3
 8003152:	4153      	adcs	r3, r2
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_TIM_PWM_Start_DMA+0xaa>
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
 800315c:	e198      	b.n	8003490 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d108      	bne.n	8003176 <HAL_TIM_PWM_Start_DMA+0xc2>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	223e      	movs	r2, #62	@ 0x3e
 8003168:	5c9b      	ldrb	r3, [r3, r2]
 800316a:	b2db      	uxtb	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	425a      	negs	r2, r3
 8003170:	4153      	adcs	r3, r2
 8003172:	b2db      	uxtb	r3, r3
 8003174:	e037      	b.n	80031e6 <HAL_TIM_PWM_Start_DMA+0x132>
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	2b04      	cmp	r3, #4
 800317a:	d108      	bne.n	800318e <HAL_TIM_PWM_Start_DMA+0xda>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	223f      	movs	r2, #63	@ 0x3f
 8003180:	5c9b      	ldrb	r3, [r3, r2]
 8003182:	b2db      	uxtb	r3, r3
 8003184:	3b01      	subs	r3, #1
 8003186:	425a      	negs	r2, r3
 8003188:	4153      	adcs	r3, r2
 800318a:	b2db      	uxtb	r3, r3
 800318c:	e02b      	b.n	80031e6 <HAL_TIM_PWM_Start_DMA+0x132>
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d108      	bne.n	80031a6 <HAL_TIM_PWM_Start_DMA+0xf2>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2240      	movs	r2, #64	@ 0x40
 8003198:	5c9b      	ldrb	r3, [r3, r2]
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	425a      	negs	r2, r3
 80031a0:	4153      	adcs	r3, r2
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	e01f      	b.n	80031e6 <HAL_TIM_PWM_Start_DMA+0x132>
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	2b0c      	cmp	r3, #12
 80031aa:	d108      	bne.n	80031be <HAL_TIM_PWM_Start_DMA+0x10a>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2241      	movs	r2, #65	@ 0x41
 80031b0:	5c9b      	ldrb	r3, [r3, r2]
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	425a      	negs	r2, r3
 80031b8:	4153      	adcs	r3, r2
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	e013      	b.n	80031e6 <HAL_TIM_PWM_Start_DMA+0x132>
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d108      	bne.n	80031d6 <HAL_TIM_PWM_Start_DMA+0x122>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2242      	movs	r2, #66	@ 0x42
 80031c8:	5c9b      	ldrb	r3, [r3, r2]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3b01      	subs	r3, #1
 80031ce:	425a      	negs	r2, r3
 80031d0:	4153      	adcs	r3, r2
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	e007      	b.n	80031e6 <HAL_TIM_PWM_Start_DMA+0x132>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2243      	movs	r2, #67	@ 0x43
 80031da:	5c9b      	ldrb	r3, [r3, r2]
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	3b01      	subs	r3, #1
 80031e0:	425a      	negs	r2, r3
 80031e2:	4153      	adcs	r3, r2
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d035      	beq.n	8003256 <HAL_TIM_PWM_Start_DMA+0x1a2>
  {
    if ((pData == NULL) || (Length == 0U))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <HAL_TIM_PWM_Start_DMA+0x144>
 80031f0:	1cbb      	adds	r3, r7, #2
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <HAL_TIM_PWM_Start_DMA+0x148>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e149      	b.n	8003490 <HAL_TIM_PWM_Start_DMA+0x3dc>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d104      	bne.n	800320c <HAL_TIM_PWM_Start_DMA+0x158>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	223e      	movs	r2, #62	@ 0x3e
 8003206:	2102      	movs	r1, #2
 8003208:	5499      	strb	r1, [r3, r2]
 800320a:	e026      	b.n	800325a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b04      	cmp	r3, #4
 8003210:	d104      	bne.n	800321c <HAL_TIM_PWM_Start_DMA+0x168>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	223f      	movs	r2, #63	@ 0x3f
 8003216:	2102      	movs	r1, #2
 8003218:	5499      	strb	r1, [r3, r2]
 800321a:	e01e      	b.n	800325a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b08      	cmp	r3, #8
 8003220:	d104      	bne.n	800322c <HAL_TIM_PWM_Start_DMA+0x178>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2240      	movs	r2, #64	@ 0x40
 8003226:	2102      	movs	r1, #2
 8003228:	5499      	strb	r1, [r3, r2]
 800322a:	e016      	b.n	800325a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d104      	bne.n	800323c <HAL_TIM_PWM_Start_DMA+0x188>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2241      	movs	r2, #65	@ 0x41
 8003236:	2102      	movs	r1, #2
 8003238:	5499      	strb	r1, [r3, r2]
 800323a:	e00e      	b.n	800325a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2b10      	cmp	r3, #16
 8003240:	d104      	bne.n	800324c <HAL_TIM_PWM_Start_DMA+0x198>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2242      	movs	r2, #66	@ 0x42
 8003246:	2102      	movs	r1, #2
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	e006      	b.n	800325a <HAL_TIM_PWM_Start_DMA+0x1a6>
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2243      	movs	r2, #67	@ 0x43
 8003250:	2102      	movs	r1, #2
 8003252:	5499      	strb	r1, [r3, r2]
 8003254:	e001      	b.n	800325a <HAL_TIM_PWM_Start_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e11a      	b.n	8003490 <HAL_TIM_PWM_Start_DMA+0x3dc>
  }

  switch (Channel)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	2b0c      	cmp	r3, #12
 800325e:	d100      	bne.n	8003262 <HAL_TIM_PWM_Start_DMA+0x1ae>
 8003260:	e080      	b.n	8003364 <HAL_TIM_PWM_Start_DMA+0x2b0>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b0c      	cmp	r3, #12
 8003266:	d900      	bls.n	800326a <HAL_TIM_PWM_Start_DMA+0x1b6>
 8003268:	e0a1      	b.n	80033ae <HAL_TIM_PWM_Start_DMA+0x2fa>
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d054      	beq.n	800331a <HAL_TIM_PWM_Start_DMA+0x266>
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2b08      	cmp	r3, #8
 8003274:	d900      	bls.n	8003278 <HAL_TIM_PWM_Start_DMA+0x1c4>
 8003276:	e09a      	b.n	80033ae <HAL_TIM_PWM_Start_DMA+0x2fa>
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_PWM_Start_DMA+0x1d2>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d025      	beq.n	80032d0 <HAL_TIM_PWM_Start_DMA+0x21c>
 8003284:	e093      	b.n	80033ae <HAL_TIM_PWM_Start_DMA+0x2fa>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328a:	4a83      	ldr	r2, [pc, #524]	@ (8003498 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800328c:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003292:	4a82      	ldr	r2, [pc, #520]	@ (800349c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003294:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329a:	4a81      	ldr	r2, [pc, #516]	@ (80034a0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800329c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80032a2:	6879      	ldr	r1, [r7, #4]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	3334      	adds	r3, #52	@ 0x34
 80032aa:	001a      	movs	r2, r3
 80032ac:	1cbb      	adds	r3, r7, #2
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	f7fe f984 	bl	80015bc <HAL_DMA_Start_IT>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d001      	beq.n	80032bc <HAL_TIM_PWM_Start_DMA+0x208>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0e9      	b.n	8003490 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68da      	ldr	r2, [r3, #12]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2180      	movs	r1, #128	@ 0x80
 80032c8:	0089      	lsls	r1, r1, #2
 80032ca:	430a      	orrs	r2, r1
 80032cc:	60da      	str	r2, [r3, #12]
      break;
 80032ce:	e073      	b.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	4a70      	ldr	r2, [pc, #448]	@ (8003498 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 80032d6:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032dc:	4a6f      	ldr	r2, [pc, #444]	@ (800349c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 80032de:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e4:	4a6e      	ldr	r2, [pc, #440]	@ (80034a0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 80032e6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3338      	adds	r3, #56	@ 0x38
 80032f4:	001a      	movs	r2, r3
 80032f6:	1cbb      	adds	r3, r7, #2
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	f7fe f95f 	bl	80015bc <HAL_DMA_Start_IT>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d001      	beq.n	8003306 <HAL_TIM_PWM_Start_DMA+0x252>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e0c4      	b.n	8003490 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2180      	movs	r1, #128	@ 0x80
 8003312:	00c9      	lsls	r1, r1, #3
 8003314:	430a      	orrs	r2, r1
 8003316:	60da      	str	r2, [r3, #12]
      break;
 8003318:	e04e      	b.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	4a5e      	ldr	r2, [pc, #376]	@ (8003498 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8003320:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003326:	4a5d      	ldr	r2, [pc, #372]	@ (800349c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003328:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800332e:	4a5c      	ldr	r2, [pc, #368]	@ (80034a0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8003330:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	333c      	adds	r3, #60	@ 0x3c
 800333e:	001a      	movs	r2, r3
 8003340:	1cbb      	adds	r3, r7, #2
 8003342:	881b      	ldrh	r3, [r3, #0]
 8003344:	f7fe f93a 	bl	80015bc <HAL_DMA_Start_IT>
 8003348:	1e03      	subs	r3, r0, #0
 800334a:	d001      	beq.n	8003350 <HAL_TIM_PWM_Start_DMA+0x29c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e09f      	b.n	8003490 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2180      	movs	r1, #128	@ 0x80
 800335c:	0109      	lsls	r1, r1, #4
 800335e:	430a      	orrs	r2, r1
 8003360:	60da      	str	r2, [r3, #12]
      break;
 8003362:	e029      	b.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	4a4b      	ldr	r2, [pc, #300]	@ (8003498 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 800336a:	62da      	str	r2, [r3, #44]	@ 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003370:	4a4a      	ldr	r2, [pc, #296]	@ (800349c <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8003372:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003378:	4a49      	ldr	r2, [pc, #292]	@ (80034a0 <HAL_TIM_PWM_Start_DMA+0x3ec>)
 800337a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3340      	adds	r3, #64	@ 0x40
 8003388:	001a      	movs	r2, r3
 800338a:	1cbb      	adds	r3, r7, #2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	f7fe f915 	bl	80015bc <HAL_DMA_Start_IT>
 8003392:	1e03      	subs	r3, r0, #0
 8003394:	d001      	beq.n	800339a <HAL_TIM_PWM_Start_DMA+0x2e6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e07a      	b.n	8003490 <HAL_TIM_PWM_Start_DMA+0x3dc>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68da      	ldr	r2, [r3, #12]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2180      	movs	r1, #128	@ 0x80
 80033a6:	0149      	lsls	r1, r1, #5
 80033a8:	430a      	orrs	r2, r1
 80033aa:	60da      	str	r2, [r3, #12]
      break;
 80033ac:	e004      	b.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x304>
    }

    default:
      status = HAL_ERROR;
 80033ae:	2317      	movs	r3, #23
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	2201      	movs	r2, #1
 80033b4:	701a      	strb	r2, [r3, #0]
      break;
 80033b6:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 80033b8:	2317      	movs	r3, #23
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d163      	bne.n	800348a <HAL_TIM_PWM_Start_DMA+0x3d6>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68b9      	ldr	r1, [r7, #8]
 80033c8:	2201      	movs	r2, #1
 80033ca:	0018      	movs	r0, r3
 80033cc:	f001 f9ea 	bl	80047a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a33      	ldr	r2, [pc, #204]	@ (80034a4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00e      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x344>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a32      	ldr	r2, [pc, #200]	@ (80034a8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d009      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x344>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a30      	ldr	r2, [pc, #192]	@ (80034ac <HAL_TIM_PWM_Start_DMA+0x3f8>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d004      	beq.n	80033f8 <HAL_TIM_PWM_Start_DMA+0x344>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a2f      	ldr	r2, [pc, #188]	@ (80034b0 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d101      	bne.n	80033fc <HAL_TIM_PWM_Start_DMA+0x348>
 80033f8:	2301      	movs	r3, #1
 80033fa:	e000      	b.n	80033fe <HAL_TIM_PWM_Start_DMA+0x34a>
 80033fc:	2300      	movs	r3, #0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2180      	movs	r1, #128	@ 0x80
 800340e:	0209      	lsls	r1, r1, #8
 8003410:	430a      	orrs	r2, r1
 8003412:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a22      	ldr	r2, [pc, #136]	@ (80034a4 <HAL_TIM_PWM_Start_DMA+0x3f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d014      	beq.n	8003448 <HAL_TIM_PWM_Start_DMA+0x394>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	2380      	movs	r3, #128	@ 0x80
 8003424:	05db      	lsls	r3, r3, #23
 8003426:	429a      	cmp	r2, r3
 8003428:	d00e      	beq.n	8003448 <HAL_TIM_PWM_Start_DMA+0x394>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a21      	ldr	r2, [pc, #132]	@ (80034b4 <HAL_TIM_PWM_Start_DMA+0x400>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_TIM_PWM_Start_DMA+0x394>
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1f      	ldr	r2, [pc, #124]	@ (80034b8 <HAL_TIM_PWM_Start_DMA+0x404>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d004      	beq.n	8003448 <HAL_TIM_PWM_Start_DMA+0x394>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a19      	ldr	r2, [pc, #100]	@ (80034a8 <HAL_TIM_PWM_Start_DMA+0x3f4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d116      	bne.n	8003476 <HAL_TIM_PWM_Start_DMA+0x3c2>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <HAL_TIM_PWM_Start_DMA+0x408>)
 8003450:	4013      	ands	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	2b06      	cmp	r3, #6
 8003458:	d016      	beq.n	8003488 <HAL_TIM_PWM_Start_DMA+0x3d4>
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	2380      	movs	r3, #128	@ 0x80
 800345e:	025b      	lsls	r3, r3, #9
 8003460:	429a      	cmp	r2, r3
 8003462:	d011      	beq.n	8003488 <HAL_TIM_PWM_Start_DMA+0x3d4>
      {
        __HAL_TIM_ENABLE(htim);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2101      	movs	r1, #1
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003474:	e008      	b.n	8003488 <HAL_TIM_PWM_Start_DMA+0x3d4>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e000      	b.n	800348a <HAL_TIM_PWM_Start_DMA+0x3d6>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003488:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Return function status */
  return status;
 800348a:	2317      	movs	r3, #23
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	781b      	ldrb	r3, [r3, #0]
}
 8003490:	0018      	movs	r0, r3
 8003492:	46bd      	mov	sp, r7
 8003494:	b006      	add	sp, #24
 8003496:	bd80      	pop	{r7, pc}
 8003498:	08003ea1 	.word	0x08003ea1
 800349c:	08003f4b 	.word	0x08003f4b
 80034a0:	08003e0d 	.word	0x08003e0d
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400
 80034b0:	40014800 	.word	0x40014800
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40000800 	.word	0x40000800
 80034bc:	00010007 	.word	0x00010007

080034c0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ca:	230f      	movs	r3, #15
 80034cc:	18fb      	adds	r3, r7, r3
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b0c      	cmp	r3, #12
 80034d6:	d039      	beq.n	800354c <HAL_TIM_PWM_Stop_DMA+0x8c>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b0c      	cmp	r3, #12
 80034dc:	d844      	bhi.n	8003568 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2b08      	cmp	r3, #8
 80034e2:	d025      	beq.n	8003530 <HAL_TIM_PWM_Stop_DMA+0x70>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b08      	cmp	r3, #8
 80034e8:	d83e      	bhi.n	8003568 <HAL_TIM_PWM_Stop_DMA+0xa8>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d003      	beq.n	80034f8 <HAL_TIM_PWM_Stop_DMA+0x38>
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	2b04      	cmp	r3, #4
 80034f4:	d00e      	beq.n	8003514 <HAL_TIM_PWM_Stop_DMA+0x54>
 80034f6:	e037      	b.n	8003568 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68da      	ldr	r2, [r3, #12]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	495c      	ldr	r1, [pc, #368]	@ (8003674 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003504:	400a      	ands	r2, r1
 8003506:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	0018      	movs	r0, r3
 800350e:	f7fe f8db 	bl	80016c8 <HAL_DMA_Abort_IT>
      break;
 8003512:	e02e      	b.n	8003572 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4956      	ldr	r1, [pc, #344]	@ (8003678 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003520:	400a      	ands	r2, r1
 8003522:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003528:	0018      	movs	r0, r3
 800352a:	f7fe f8cd 	bl	80016c8 <HAL_DMA_Abort_IT>
      break;
 800352e:	e020      	b.n	8003572 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4950      	ldr	r1, [pc, #320]	@ (800367c <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800353c:	400a      	ands	r2, r1
 800353e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	0018      	movs	r0, r3
 8003546:	f7fe f8bf 	bl	80016c8 <HAL_DMA_Abort_IT>
      break;
 800354a:	e012      	b.n	8003572 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68da      	ldr	r2, [r3, #12]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	494a      	ldr	r1, [pc, #296]	@ (8003680 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8003558:	400a      	ands	r2, r1
 800355a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003560:	0018      	movs	r0, r3
 8003562:	f7fe f8b1 	bl	80016c8 <HAL_DMA_Abort_IT>
      break;
 8003566:	e004      	b.n	8003572 <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8003568:	230f      	movs	r3, #15
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2201      	movs	r2, #1
 800356e:	701a      	strb	r2, [r3, #0]
      break;
 8003570:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8003572:	230f      	movs	r3, #15
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d000      	beq.n	800357e <HAL_TIM_PWM_Stop_DMA+0xbe>
 800357c:	e073      	b.n	8003666 <HAL_TIM_PWM_Stop_DMA+0x1a6>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6839      	ldr	r1, [r7, #0]
 8003584:	2200      	movs	r2, #0
 8003586:	0018      	movs	r0, r3
 8003588:	f001 f90c 	bl	80047a4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a3c      	ldr	r2, [pc, #240]	@ (8003684 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00e      	beq.n	80035b4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3b      	ldr	r2, [pc, #236]	@ (8003688 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d009      	beq.n	80035b4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a39      	ldr	r2, [pc, #228]	@ (800368c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a38      	ldr	r2, [pc, #224]	@ (8003690 <HAL_TIM_PWM_Stop_DMA+0x1d0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80035b4:	2301      	movs	r3, #1
 80035b6:	e000      	b.n	80035ba <HAL_TIM_PWM_Stop_DMA+0xfa>
 80035b8:	2300      	movs	r3, #0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d013      	beq.n	80035e6 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	4a33      	ldr	r2, [pc, #204]	@ (8003694 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80035c6:	4013      	ands	r3, r2
 80035c8:	d10d      	bne.n	80035e6 <HAL_TIM_PWM_Stop_DMA+0x126>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4a31      	ldr	r2, [pc, #196]	@ (8003698 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	d107      	bne.n	80035e6 <HAL_TIM_PWM_Stop_DMA+0x126>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	492e      	ldr	r1, [pc, #184]	@ (800369c <HAL_TIM_PWM_Stop_DMA+0x1dc>)
 80035e2:	400a      	ands	r2, r1
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	4a29      	ldr	r2, [pc, #164]	@ (8003694 <HAL_TIM_PWM_Stop_DMA+0x1d4>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	d10d      	bne.n	800360e <HAL_TIM_PWM_Stop_DMA+0x14e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6a1b      	ldr	r3, [r3, #32]
 80035f8:	4a27      	ldr	r2, [pc, #156]	@ (8003698 <HAL_TIM_PWM_Stop_DMA+0x1d8>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	d107      	bne.n	800360e <HAL_TIM_PWM_Stop_DMA+0x14e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2101      	movs	r1, #1
 800360a:	438a      	bics	r2, r1
 800360c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Stop_DMA+0x15e>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	223e      	movs	r2, #62	@ 0x3e
 8003618:	2101      	movs	r1, #1
 800361a:	5499      	strb	r1, [r3, r2]
 800361c:	e023      	b.n	8003666 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d104      	bne.n	800362e <HAL_TIM_PWM_Stop_DMA+0x16e>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	223f      	movs	r2, #63	@ 0x3f
 8003628:	2101      	movs	r1, #1
 800362a:	5499      	strb	r1, [r3, r2]
 800362c:	e01b      	b.n	8003666 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	2b08      	cmp	r3, #8
 8003632:	d104      	bne.n	800363e <HAL_TIM_PWM_Stop_DMA+0x17e>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2240      	movs	r2, #64	@ 0x40
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]
 800363c:	e013      	b.n	8003666 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d104      	bne.n	800364e <HAL_TIM_PWM_Stop_DMA+0x18e>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2241      	movs	r2, #65	@ 0x41
 8003648:	2101      	movs	r1, #1
 800364a:	5499      	strb	r1, [r3, r2]
 800364c:	e00b      	b.n	8003666 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	2b10      	cmp	r3, #16
 8003652:	d104      	bne.n	800365e <HAL_TIM_PWM_Stop_DMA+0x19e>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2242      	movs	r2, #66	@ 0x42
 8003658:	2101      	movs	r1, #1
 800365a:	5499      	strb	r1, [r3, r2]
 800365c:	e003      	b.n	8003666 <HAL_TIM_PWM_Stop_DMA+0x1a6>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2243      	movs	r2, #67	@ 0x43
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8003666:	230f      	movs	r3, #15
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	781b      	ldrb	r3, [r3, #0]
}
 800366c:	0018      	movs	r0, r3
 800366e:	46bd      	mov	sp, r7
 8003670:	b004      	add	sp, #16
 8003672:	bd80      	pop	{r7, pc}
 8003674:	fffffdff 	.word	0xfffffdff
 8003678:	fffffbff 	.word	0xfffffbff
 800367c:	fffff7ff 	.word	0xfffff7ff
 8003680:	ffffefff 	.word	0xffffefff
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40014000 	.word	0x40014000
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800
 8003694:	00001111 	.word	0x00001111
 8003698:	00000444 	.word	0x00000444
 800369c:	ffff7fff 	.word	0xffff7fff

080036a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e090      	b.n	80037d6 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	223d      	movs	r2, #61	@ 0x3d
 80036b8:	5c9b      	ldrb	r3, [r3, r2]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d107      	bne.n	80036d0 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	223c      	movs	r2, #60	@ 0x3c
 80036c4:	2100      	movs	r1, #0
 80036c6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	0018      	movs	r0, r3
 80036cc:	f7fd fb92 	bl	8000df4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	223d      	movs	r2, #61	@ 0x3d
 80036d4:	2102      	movs	r1, #2
 80036d6:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	493f      	ldr	r1, [pc, #252]	@ (80037e0 <HAL_TIM_Encoder_Init+0x140>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3304      	adds	r3, #4
 80036f0:	0019      	movs	r1, r3
 80036f2:	0010      	movs	r0, r2
 80036f4:	f000 fc5e 	bl	8003fb4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	699b      	ldr	r3, [r3, #24]
 8003706:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	4a31      	ldr	r2, [pc, #196]	@ (80037e4 <HAL_TIM_Encoder_Init+0x144>)
 800371e:	4013      	ands	r3, r2
 8003720:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689a      	ldr	r2, [r3, #8]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	021b      	lsls	r3, r3, #8
 800372c:	4313      	orrs	r3, r2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	4a2c      	ldr	r2, [pc, #176]	@ (80037e8 <HAL_TIM_Encoder_Init+0x148>)
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4a2b      	ldr	r2, [pc, #172]	@ (80037ec <HAL_TIM_Encoder_Init+0x14c>)
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68da      	ldr	r2, [r3, #12]
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	021b      	lsls	r3, r3, #8
 800374e:	4313      	orrs	r3, r2
 8003750:	693a      	ldr	r2, [r7, #16]
 8003752:	4313      	orrs	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	691b      	ldr	r3, [r3, #16]
 800375a:	011a      	lsls	r2, r3, #4
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6a1b      	ldr	r3, [r3, #32]
 8003760:	031b      	lsls	r3, r3, #12
 8003762:	4313      	orrs	r3, r2
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2222      	movs	r2, #34	@ 0x22
 800376e:	4393      	bics	r3, r2
 8003770:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2288      	movs	r2, #136	@ 0x88
 8003776:	4393      	bics	r3, r2
 8003778:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	011b      	lsls	r3, r3, #4
 8003784:	4313      	orrs	r3, r2
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2248      	movs	r2, #72	@ 0x48
 80037a8:	2101      	movs	r1, #1
 80037aa:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	223e      	movs	r2, #62	@ 0x3e
 80037b0:	2101      	movs	r1, #1
 80037b2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	223f      	movs	r2, #63	@ 0x3f
 80037b8:	2101      	movs	r1, #1
 80037ba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2244      	movs	r2, #68	@ 0x44
 80037c0:	2101      	movs	r1, #1
 80037c2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2245      	movs	r2, #69	@ 0x45
 80037c8:	2101      	movs	r1, #1
 80037ca:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	223d      	movs	r2, #61	@ 0x3d
 80037d0:	2101      	movs	r1, #1
 80037d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	0018      	movs	r0, r3
 80037d8:	46bd      	mov	sp, r7
 80037da:	b006      	add	sp, #24
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	fffebff8 	.word	0xfffebff8
 80037e4:	fffffcfc 	.word	0xfffffcfc
 80037e8:	fffff3f3 	.word	0xfffff3f3
 80037ec:	ffff0f0f 	.word	0xffff0f0f

080037f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2202      	movs	r2, #2
 800380c:	4013      	ands	r3, r2
 800380e:	d021      	beq.n	8003854 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2202      	movs	r2, #2
 8003814:	4013      	ands	r3, r2
 8003816:	d01d      	beq.n	8003854 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2203      	movs	r2, #3
 800381e:	4252      	negs	r2, r2
 8003820:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2203      	movs	r2, #3
 8003830:	4013      	ands	r3, r2
 8003832:	d004      	beq.n	800383e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	0018      	movs	r0, r3
 8003838:	f000 fac8 	bl	8003dcc <HAL_TIM_IC_CaptureCallback>
 800383c:	e007      	b.n	800384e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	0018      	movs	r0, r3
 8003842:	f000 fabb 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	0018      	movs	r0, r3
 800384a:	f7fc fdff 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2204      	movs	r2, #4
 8003858:	4013      	ands	r3, r2
 800385a:	d022      	beq.n	80038a2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2204      	movs	r2, #4
 8003860:	4013      	ands	r3, r2
 8003862:	d01e      	beq.n	80038a2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2205      	movs	r2, #5
 800386a:	4252      	negs	r2, r2
 800386c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	23c0      	movs	r3, #192	@ 0xc0
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	4013      	ands	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	0018      	movs	r0, r3
 8003886:	f000 faa1 	bl	8003dcc <HAL_TIM_IC_CaptureCallback>
 800388a:	e007      	b.n	800389c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0018      	movs	r0, r3
 8003890:	f000 fa94 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	0018      	movs	r0, r3
 8003898:	f7fc fdd8 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2208      	movs	r2, #8
 80038a6:	4013      	ands	r3, r2
 80038a8:	d021      	beq.n	80038ee <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2208      	movs	r2, #8
 80038ae:	4013      	ands	r3, r2
 80038b0:	d01d      	beq.n	80038ee <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2209      	movs	r2, #9
 80038b8:	4252      	negs	r2, r2
 80038ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2204      	movs	r2, #4
 80038c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2203      	movs	r2, #3
 80038ca:	4013      	ands	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f000 fa7b 	bl	8003dcc <HAL_TIM_IC_CaptureCallback>
 80038d6:	e007      	b.n	80038e8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	0018      	movs	r0, r3
 80038dc:	f000 fa6e 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	0018      	movs	r0, r3
 80038e4:	f7fc fdb2 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2210      	movs	r2, #16
 80038f2:	4013      	ands	r3, r2
 80038f4:	d022      	beq.n	800393c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2210      	movs	r2, #16
 80038fa:	4013      	ands	r3, r2
 80038fc:	d01e      	beq.n	800393c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2211      	movs	r2, #17
 8003904:	4252      	negs	r2, r2
 8003906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2208      	movs	r2, #8
 800390c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	69da      	ldr	r2, [r3, #28]
 8003914:	23c0      	movs	r3, #192	@ 0xc0
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4013      	ands	r3, r2
 800391a:	d004      	beq.n	8003926 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	0018      	movs	r0, r3
 8003920:	f000 fa54 	bl	8003dcc <HAL_TIM_IC_CaptureCallback>
 8003924:	e007      	b.n	8003936 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	0018      	movs	r0, r3
 800392a:	f000 fa47 	bl	8003dbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	0018      	movs	r0, r3
 8003932:	f7fc fd8b 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	2201      	movs	r2, #1
 8003940:	4013      	ands	r3, r2
 8003942:	d00c      	beq.n	800395e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	d008      	beq.n	800395e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2202      	movs	r2, #2
 8003952:	4252      	negs	r2, r2
 8003954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 fa27 	bl	8003dac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	2280      	movs	r2, #128	@ 0x80
 8003962:	4013      	ands	r3, r2
 8003964:	d104      	bne.n	8003970 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	2380      	movs	r3, #128	@ 0x80
 800396a:	019b      	lsls	r3, r3, #6
 800396c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800396e:	d00b      	beq.n	8003988 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2280      	movs	r2, #128	@ 0x80
 8003974:	4013      	ands	r3, r2
 8003976:	d007      	beq.n	8003988 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1e      	ldr	r2, [pc, #120]	@ (80039f8 <HAL_TIM_IRQHandler+0x208>)
 800397e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 ffb0 	bl	80048e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003988:	68ba      	ldr	r2, [r7, #8]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	4013      	ands	r3, r2
 8003990:	d00b      	beq.n	80039aa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2280      	movs	r2, #128	@ 0x80
 8003996:	4013      	ands	r3, r2
 8003998:	d007      	beq.n	80039aa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a17      	ldr	r2, [pc, #92]	@ (80039fc <HAL_TIM_IRQHandler+0x20c>)
 80039a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	0018      	movs	r0, r3
 80039a6:	f000 ffa7 	bl	80048f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	2240      	movs	r2, #64	@ 0x40
 80039ae:	4013      	ands	r3, r2
 80039b0:	d00c      	beq.n	80039cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2240      	movs	r2, #64	@ 0x40
 80039b6:	4013      	ands	r3, r2
 80039b8:	d008      	beq.n	80039cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2241      	movs	r2, #65	@ 0x41
 80039c0:	4252      	negs	r2, r2
 80039c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fa10 	bl	8003dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2220      	movs	r2, #32
 80039d0:	4013      	ands	r3, r2
 80039d2:	d00c      	beq.n	80039ee <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2220      	movs	r2, #32
 80039d8:	4013      	ands	r3, r2
 80039da:	d008      	beq.n	80039ee <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2221      	movs	r2, #33	@ 0x21
 80039e2:	4252      	negs	r2, r2
 80039e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	0018      	movs	r0, r3
 80039ea:	f000 ff75 	bl	80048d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039ee:	46c0      	nop			@ (mov r8, r8)
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b004      	add	sp, #16
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	ffffdf7f 	.word	0xffffdf7f
 80039fc:	fffffeff 	.word	0xfffffeff

08003a00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a0c:	2317      	movs	r3, #23
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	2200      	movs	r2, #0
 8003a12:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	223c      	movs	r2, #60	@ 0x3c
 8003a18:	5c9b      	ldrb	r3, [r3, r2]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d101      	bne.n	8003a22 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	e0e5      	b.n	8003bee <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	223c      	movs	r2, #60	@ 0x3c
 8003a26:	2101      	movs	r1, #1
 8003a28:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b14      	cmp	r3, #20
 8003a2e:	d900      	bls.n	8003a32 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a30:	e0d1      	b.n	8003bd6 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	009a      	lsls	r2, r3, #2
 8003a36:	4b70      	ldr	r3, [pc, #448]	@ (8003bf8 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003a38:	18d3      	adds	r3, r2, r3
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68ba      	ldr	r2, [r7, #8]
 8003a44:	0011      	movs	r1, r2
 8003a46:	0018      	movs	r0, r3
 8003a48:	f000 fb4c 	bl	80040e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2108      	movs	r1, #8
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699a      	ldr	r2, [r3, #24]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2104      	movs	r1, #4
 8003a68:	438a      	bics	r2, r1
 8003a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6999      	ldr	r1, [r3, #24]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	691a      	ldr	r2, [r3, #16]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	619a      	str	r2, [r3, #24]
      break;
 8003a7e:	e0af      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	0011      	movs	r1, r2
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 fbb5 	bl	80041f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	699a      	ldr	r2, [r3, #24]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2180      	movs	r1, #128	@ 0x80
 8003a9a:	0109      	lsls	r1, r1, #4
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4954      	ldr	r1, [pc, #336]	@ (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003aac:	400a      	ands	r2, r1
 8003aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	6999      	ldr	r1, [r3, #24]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	021a      	lsls	r2, r3, #8
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	619a      	str	r2, [r3, #24]
      break;
 8003ac4:	e08c      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	0011      	movs	r1, r2
 8003ace:	0018      	movs	r0, r3
 8003ad0:	f000 fc16 	bl	8004300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	69da      	ldr	r2, [r3, #28]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2108      	movs	r1, #8
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	69da      	ldr	r2, [r3, #28]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2104      	movs	r1, #4
 8003af0:	438a      	bics	r2, r1
 8003af2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	69d9      	ldr	r1, [r3, #28]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	61da      	str	r2, [r3, #28]
      break;
 8003b06:	e06b      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	0011      	movs	r1, r2
 8003b10:	0018      	movs	r0, r3
 8003b12:	f000 fc7d 	bl	8004410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69da      	ldr	r2, [r3, #28]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2180      	movs	r1, #128	@ 0x80
 8003b22:	0109      	lsls	r1, r1, #4
 8003b24:	430a      	orrs	r2, r1
 8003b26:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4932      	ldr	r1, [pc, #200]	@ (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b34:	400a      	ands	r2, r1
 8003b36:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	69d9      	ldr	r1, [r3, #28]
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	021a      	lsls	r2, r3, #8
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	61da      	str	r2, [r3, #28]
      break;
 8003b4c:	e048      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	0011      	movs	r1, r2
 8003b56:	0018      	movs	r0, r3
 8003b58:	f000 fcc4 	bl	80044e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2108      	movs	r1, #8
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2104      	movs	r1, #4
 8003b78:	438a      	bics	r2, r1
 8003b7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	691a      	ldr	r2, [r3, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003b8e:	e027      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	0011      	movs	r1, r2
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 fd03 	bl	80045a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2180      	movs	r1, #128	@ 0x80
 8003baa:	0109      	lsls	r1, r1, #4
 8003bac:	430a      	orrs	r2, r1
 8003bae:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4910      	ldr	r1, [pc, #64]	@ (8003bfc <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003bbc:	400a      	ands	r2, r1
 8003bbe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	021a      	lsls	r2, r3, #8
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003bd4:	e004      	b.n	8003be0 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003bd6:	2317      	movs	r3, #23
 8003bd8:	18fb      	adds	r3, r7, r3
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
      break;
 8003bde:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	223c      	movs	r2, #60	@ 0x3c
 8003be4:	2100      	movs	r1, #0
 8003be6:	5499      	strb	r1, [r3, r2]

  return status;
 8003be8:	2317      	movs	r3, #23
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	781b      	ldrb	r3, [r3, #0]
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b006      	add	sp, #24
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			@ (mov r8, r8)
 8003bf8:	08004be0 	.word	0x08004be0
 8003bfc:	fffffbff 	.word	0xfffffbff

08003c00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c0a:	230f      	movs	r3, #15
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2200      	movs	r2, #0
 8003c10:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	223c      	movs	r2, #60	@ 0x3c
 8003c16:	5c9b      	ldrb	r3, [r3, r2]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_TIM_ConfigClockSource+0x20>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e0bc      	b.n	8003d9a <HAL_TIM_ConfigClockSource+0x19a>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	223c      	movs	r2, #60	@ 0x3c
 8003c24:	2101      	movs	r1, #1
 8003c26:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	223d      	movs	r2, #61	@ 0x3d
 8003c2c:	2102      	movs	r1, #2
 8003c2e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	4a5a      	ldr	r2, [pc, #360]	@ (8003da4 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4a59      	ldr	r2, [pc, #356]	@ (8003da8 <HAL_TIM_ConfigClockSource+0x1a8>)
 8003c44:	4013      	ands	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2280      	movs	r2, #128	@ 0x80
 8003c56:	0192      	lsls	r2, r2, #6
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d040      	beq.n	8003cde <HAL_TIM_ConfigClockSource+0xde>
 8003c5c:	2280      	movs	r2, #128	@ 0x80
 8003c5e:	0192      	lsls	r2, r2, #6
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d900      	bls.n	8003c66 <HAL_TIM_ConfigClockSource+0x66>
 8003c64:	e088      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
 8003c66:	2280      	movs	r2, #128	@ 0x80
 8003c68:	0152      	lsls	r2, r2, #5
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d100      	bne.n	8003c70 <HAL_TIM_ConfigClockSource+0x70>
 8003c6e:	e088      	b.n	8003d82 <HAL_TIM_ConfigClockSource+0x182>
 8003c70:	2280      	movs	r2, #128	@ 0x80
 8003c72:	0152      	lsls	r2, r2, #5
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d900      	bls.n	8003c7a <HAL_TIM_ConfigClockSource+0x7a>
 8003c78:	e07e      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
 8003c7a:	2b70      	cmp	r3, #112	@ 0x70
 8003c7c:	d018      	beq.n	8003cb0 <HAL_TIM_ConfigClockSource+0xb0>
 8003c7e:	d900      	bls.n	8003c82 <HAL_TIM_ConfigClockSource+0x82>
 8003c80:	e07a      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
 8003c82:	2b60      	cmp	r3, #96	@ 0x60
 8003c84:	d04f      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0x126>
 8003c86:	d900      	bls.n	8003c8a <HAL_TIM_ConfigClockSource+0x8a>
 8003c88:	e076      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
 8003c8a:	2b50      	cmp	r3, #80	@ 0x50
 8003c8c:	d03b      	beq.n	8003d06 <HAL_TIM_ConfigClockSource+0x106>
 8003c8e:	d900      	bls.n	8003c92 <HAL_TIM_ConfigClockSource+0x92>
 8003c90:	e072      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
 8003c92:	2b40      	cmp	r3, #64	@ 0x40
 8003c94:	d057      	beq.n	8003d46 <HAL_TIM_ConfigClockSource+0x146>
 8003c96:	d900      	bls.n	8003c9a <HAL_TIM_ConfigClockSource+0x9a>
 8003c98:	e06e      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
 8003c9a:	2b30      	cmp	r3, #48	@ 0x30
 8003c9c:	d063      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x166>
 8003c9e:	d86b      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
 8003ca0:	2b20      	cmp	r3, #32
 8003ca2:	d060      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x166>
 8003ca4:	d868      	bhi.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d05d      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x166>
 8003caa:	2b10      	cmp	r3, #16
 8003cac:	d05b      	beq.n	8003d66 <HAL_TIM_ConfigClockSource+0x166>
 8003cae:	e063      	b.n	8003d78 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cc0:	f000 fd50 	bl	8004764 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2277      	movs	r2, #119	@ 0x77
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]
      break;
 8003cdc:	e052      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cee:	f000 fd39 	bl	8004764 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2180      	movs	r1, #128	@ 0x80
 8003cfe:	01c9      	lsls	r1, r1, #7
 8003d00:	430a      	orrs	r2, r1
 8003d02:	609a      	str	r2, [r3, #8]
      break;
 8003d04:	e03e      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d12:	001a      	movs	r2, r3
 8003d14:	f000 fcaa 	bl	800466c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2150      	movs	r1, #80	@ 0x50
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f000 fd04 	bl	800472c <TIM_ITRx_SetConfig>
      break;
 8003d24:	e02e      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d32:	001a      	movs	r2, r3
 8003d34:	f000 fcc8 	bl	80046c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2160      	movs	r1, #96	@ 0x60
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f000 fcf4 	bl	800472c <TIM_ITRx_SetConfig>
      break;
 8003d44:	e01e      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d52:	001a      	movs	r2, r3
 8003d54:	f000 fc8a 	bl	800466c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2140      	movs	r1, #64	@ 0x40
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f000 fce4 	bl	800472c <TIM_ITRx_SetConfig>
      break;
 8003d64:	e00e      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	0019      	movs	r1, r3
 8003d70:	0010      	movs	r0, r2
 8003d72:	f000 fcdb 	bl	800472c <TIM_ITRx_SetConfig>
      break;
 8003d76:	e005      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003d78:	230f      	movs	r3, #15
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
      break;
 8003d80:	e000      	b.n	8003d84 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003d82:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	223d      	movs	r2, #61	@ 0x3d
 8003d88:	2101      	movs	r1, #1
 8003d8a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	223c      	movs	r2, #60	@ 0x3c
 8003d90:	2100      	movs	r1, #0
 8003d92:	5499      	strb	r1, [r3, r2]

  return status;
 8003d94:	230f      	movs	r3, #15
 8003d96:	18fb      	adds	r3, r7, r3
 8003d98:	781b      	ldrb	r3, [r3, #0]
}
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	b004      	add	sp, #16
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	46c0      	nop			@ (mov r8, r8)
 8003da4:	ffceff88 	.word	0xffceff88
 8003da8:	ffff00ff 	.word	0xffff00ff

08003dac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003db4:	46c0      	nop			@ (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b002      	add	sp, #8
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b082      	sub	sp, #8
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003de4:	46c0      	nop			@ (mov r8, r8)
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b002      	add	sp, #8
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003df4:	46c0      	nop			@ (mov r8, r8)
 8003df6:	46bd      	mov	sp, r7
 8003df8:	b002      	add	sp, #8
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003e04:	46c0      	nop			@ (mov r8, r8)
 8003e06:	46bd      	mov	sp, r7
 8003e08:	b002      	add	sp, #8
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d107      	bne.n	8003e34 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	223e      	movs	r2, #62	@ 0x3e
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]
 8003e32:	e02a      	b.n	8003e8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d107      	bne.n	8003e4e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2202      	movs	r2, #2
 8003e42:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	223f      	movs	r2, #63	@ 0x3f
 8003e48:	2101      	movs	r1, #1
 8003e4a:	5499      	strb	r1, [r3, r2]
 8003e4c:	e01d      	b.n	8003e8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d107      	bne.n	8003e68 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2204      	movs	r2, #4
 8003e5c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2240      	movs	r2, #64	@ 0x40
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]
 8003e66:	e010      	b.n	8003e8a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d107      	bne.n	8003e82 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2208      	movs	r2, #8
 8003e76:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2241      	movs	r2, #65	@ 0x41
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	5499      	strb	r1, [r3, r2]
 8003e80:	e003      	b.n	8003e8a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	223d      	movs	r2, #61	@ 0x3d
 8003e86:	2101      	movs	r1, #1
 8003e88:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	0018      	movs	r0, r3
 8003e8e:	f7ff ffb5 	bl	8003dfc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2200      	movs	r2, #0
 8003e96:	771a      	strb	r2, [r3, #28]
}
 8003e98:	46c0      	nop			@ (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b004      	add	sp, #16
 8003e9e:	bd80      	pop	{r7, pc}

08003ea0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d10b      	bne.n	8003ed0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2201      	movs	r2, #1
 8003ebc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d136      	bne.n	8003f34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	223e      	movs	r2, #62	@ 0x3e
 8003eca:	2101      	movs	r1, #1
 8003ecc:	5499      	strb	r1, [r3, r2]
 8003ece:	e031      	b.n	8003f34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d10b      	bne.n	8003ef2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2202      	movs	r2, #2
 8003ede:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d125      	bne.n	8003f34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	223f      	movs	r2, #63	@ 0x3f
 8003eec:	2101      	movs	r1, #1
 8003eee:	5499      	strb	r1, [r3, r2]
 8003ef0:	e020      	b.n	8003f34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d10b      	bne.n	8003f14 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2204      	movs	r2, #4
 8003f00:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d114      	bne.n	8003f34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2240      	movs	r2, #64	@ 0x40
 8003f0e:	2101      	movs	r1, #1
 8003f10:	5499      	strb	r1, [r3, r2]
 8003f12:	e00f      	b.n	8003f34 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d10a      	bne.n	8003f34 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2208      	movs	r2, #8
 8003f22:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	69db      	ldr	r3, [r3, #28]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d103      	bne.n	8003f34 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2241      	movs	r2, #65	@ 0x41
 8003f30:	2101      	movs	r1, #1
 8003f32:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	0018      	movs	r0, r3
 8003f38:	f7fc fa88 	bl	800044c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	771a      	strb	r2, [r3, #28]
}
 8003f42:	46c0      	nop			@ (mov r8, r8)
 8003f44:	46bd      	mov	sp, r7
 8003f46:	b004      	add	sp, #16
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f56:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d103      	bne.n	8003f6a <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2201      	movs	r2, #1
 8003f66:	771a      	strb	r2, [r3, #28]
 8003f68:	e019      	b.n	8003f9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d103      	bne.n	8003f7c <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2202      	movs	r2, #2
 8003f78:	771a      	strb	r2, [r3, #28]
 8003f7a:	e010      	b.n	8003f9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d103      	bne.n	8003f8e <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2204      	movs	r2, #4
 8003f8a:	771a      	strb	r2, [r3, #28]
 8003f8c:	e007      	b.n	8003f9e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d102      	bne.n	8003f9e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2208      	movs	r2, #8
 8003f9c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	0018      	movs	r0, r3
 8003fa2:	f7ff ff1b 	bl	8003ddc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	771a      	strb	r2, [r3, #28]
}
 8003fac:	46c0      	nop			@ (mov r8, r8)
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	b004      	add	sp, #16
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3f      	ldr	r2, [pc, #252]	@ (80040c4 <TIM_Base_SetConfig+0x110>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00c      	beq.n	8003fe6 <TIM_Base_SetConfig+0x32>
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	2380      	movs	r3, #128	@ 0x80
 8003fd0:	05db      	lsls	r3, r3, #23
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d007      	beq.n	8003fe6 <TIM_Base_SetConfig+0x32>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a3b      	ldr	r2, [pc, #236]	@ (80040c8 <TIM_Base_SetConfig+0x114>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_Base_SetConfig+0x32>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a3a      	ldr	r2, [pc, #232]	@ (80040cc <TIM_Base_SetConfig+0x118>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d108      	bne.n	8003ff8 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2270      	movs	r2, #112	@ 0x70
 8003fea:	4393      	bics	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a32      	ldr	r2, [pc, #200]	@ (80040c4 <TIM_Base_SetConfig+0x110>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d01c      	beq.n	800403a <TIM_Base_SetConfig+0x86>
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	2380      	movs	r3, #128	@ 0x80
 8004004:	05db      	lsls	r3, r3, #23
 8004006:	429a      	cmp	r2, r3
 8004008:	d017      	beq.n	800403a <TIM_Base_SetConfig+0x86>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a2e      	ldr	r2, [pc, #184]	@ (80040c8 <TIM_Base_SetConfig+0x114>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <TIM_Base_SetConfig+0x86>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <TIM_Base_SetConfig+0x118>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00f      	beq.n	800403a <TIM_Base_SetConfig+0x86>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a2c      	ldr	r2, [pc, #176]	@ (80040d0 <TIM_Base_SetConfig+0x11c>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00b      	beq.n	800403a <TIM_Base_SetConfig+0x86>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2b      	ldr	r2, [pc, #172]	@ (80040d4 <TIM_Base_SetConfig+0x120>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d007      	beq.n	800403a <TIM_Base_SetConfig+0x86>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2a      	ldr	r2, [pc, #168]	@ (80040d8 <TIM_Base_SetConfig+0x124>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d003      	beq.n	800403a <TIM_Base_SetConfig+0x86>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a29      	ldr	r2, [pc, #164]	@ (80040dc <TIM_Base_SetConfig+0x128>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d108      	bne.n	800404c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	4a28      	ldr	r2, [pc, #160]	@ (80040e0 <TIM_Base_SetConfig+0x12c>)
 800403e:	4013      	ands	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2280      	movs	r2, #128	@ 0x80
 8004050:	4393      	bics	r3, r2
 8004052:	001a      	movs	r2, r3
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a13      	ldr	r2, [pc, #76]	@ (80040c4 <TIM_Base_SetConfig+0x110>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00b      	beq.n	8004092 <TIM_Base_SetConfig+0xde>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a15      	ldr	r2, [pc, #84]	@ (80040d4 <TIM_Base_SetConfig+0x120>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <TIM_Base_SetConfig+0xde>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a14      	ldr	r2, [pc, #80]	@ (80040d8 <TIM_Base_SetConfig+0x124>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d003      	beq.n	8004092 <TIM_Base_SetConfig+0xde>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a13      	ldr	r2, [pc, #76]	@ (80040dc <TIM_Base_SetConfig+0x128>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d103      	bne.n	800409a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	691a      	ldr	r2, [r3, #16]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	2201      	movs	r2, #1
 80040a6:	4013      	ands	r3, r2
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d106      	bne.n	80040ba <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	691b      	ldr	r3, [r3, #16]
 80040b0:	2201      	movs	r2, #1
 80040b2:	4393      	bics	r3, r2
 80040b4:	001a      	movs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	611a      	str	r2, [r3, #16]
  }
}
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	46bd      	mov	sp, r7
 80040be:	b004      	add	sp, #16
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	40000400 	.word	0x40000400
 80040cc:	40000800 	.word	0x40000800
 80040d0:	40002000 	.word	0x40002000
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800
 80040e0:	fffffcff 	.word	0xfffffcff

080040e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	2201      	movs	r2, #1
 80040fa:	4393      	bics	r3, r2
 80040fc:	001a      	movs	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	4a32      	ldr	r2, [pc, #200]	@ (80041dc <TIM_OC1_SetConfig+0xf8>)
 8004112:	4013      	ands	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2203      	movs	r2, #3
 800411a:	4393      	bics	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2202      	movs	r2, #2
 800412c:	4393      	bics	r3, r2
 800412e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a28      	ldr	r2, [pc, #160]	@ (80041e0 <TIM_OC1_SetConfig+0xfc>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00b      	beq.n	800415a <TIM_OC1_SetConfig+0x76>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a27      	ldr	r2, [pc, #156]	@ (80041e4 <TIM_OC1_SetConfig+0x100>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_OC1_SetConfig+0x76>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a26      	ldr	r2, [pc, #152]	@ (80041e8 <TIM_OC1_SetConfig+0x104>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_OC1_SetConfig+0x76>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a25      	ldr	r2, [pc, #148]	@ (80041ec <TIM_OC1_SetConfig+0x108>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10c      	bne.n	8004174 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2208      	movs	r2, #8
 800415e:	4393      	bics	r3, r2
 8004160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2204      	movs	r2, #4
 8004170:	4393      	bics	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a1a      	ldr	r2, [pc, #104]	@ (80041e0 <TIM_OC1_SetConfig+0xfc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00b      	beq.n	8004194 <TIM_OC1_SetConfig+0xb0>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a19      	ldr	r2, [pc, #100]	@ (80041e4 <TIM_OC1_SetConfig+0x100>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d007      	beq.n	8004194 <TIM_OC1_SetConfig+0xb0>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a18      	ldr	r2, [pc, #96]	@ (80041e8 <TIM_OC1_SetConfig+0x104>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d003      	beq.n	8004194 <TIM_OC1_SetConfig+0xb0>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	4a17      	ldr	r2, [pc, #92]	@ (80041ec <TIM_OC1_SetConfig+0x108>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d111      	bne.n	80041b8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	4a16      	ldr	r2, [pc, #88]	@ (80041f0 <TIM_OC1_SetConfig+0x10c>)
 8004198:	4013      	ands	r3, r2
 800419a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4a15      	ldr	r2, [pc, #84]	@ (80041f4 <TIM_OC1_SetConfig+0x110>)
 80041a0:	4013      	ands	r3, r2
 80041a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	68fa      	ldr	r2, [r7, #12]
 80041c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	697a      	ldr	r2, [r7, #20]
 80041d0:	621a      	str	r2, [r3, #32]
}
 80041d2:	46c0      	nop			@ (mov r8, r8)
 80041d4:	46bd      	mov	sp, r7
 80041d6:	b006      	add	sp, #24
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	fffeff8f 	.word	0xfffeff8f
 80041e0:	40012c00 	.word	0x40012c00
 80041e4:	40014000 	.word	0x40014000
 80041e8:	40014400 	.word	0x40014400
 80041ec:	40014800 	.word	0x40014800
 80041f0:	fffffeff 	.word	0xfffffeff
 80041f4:	fffffdff 	.word	0xfffffdff

080041f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b086      	sub	sp, #24
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6a1b      	ldr	r3, [r3, #32]
 800420c:	2210      	movs	r2, #16
 800420e:	4393      	bics	r3, r2
 8004210:	001a      	movs	r2, r3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	4a2e      	ldr	r2, [pc, #184]	@ (80042e0 <TIM_OC2_SetConfig+0xe8>)
 8004226:	4013      	ands	r3, r2
 8004228:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	4a2d      	ldr	r2, [pc, #180]	@ (80042e4 <TIM_OC2_SetConfig+0xec>)
 800422e:	4013      	ands	r3, r2
 8004230:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2220      	movs	r2, #32
 8004242:	4393      	bics	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	697a      	ldr	r2, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a24      	ldr	r2, [pc, #144]	@ (80042e8 <TIM_OC2_SetConfig+0xf0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10d      	bne.n	8004276 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	2280      	movs	r2, #128	@ 0x80
 800425e:	4393      	bics	r3, r2
 8004260:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	4313      	orrs	r3, r2
 800426c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	2240      	movs	r2, #64	@ 0x40
 8004272:	4393      	bics	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a1b      	ldr	r2, [pc, #108]	@ (80042e8 <TIM_OC2_SetConfig+0xf0>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00b      	beq.n	8004296 <TIM_OC2_SetConfig+0x9e>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a1a      	ldr	r2, [pc, #104]	@ (80042ec <TIM_OC2_SetConfig+0xf4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d007      	beq.n	8004296 <TIM_OC2_SetConfig+0x9e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a19      	ldr	r2, [pc, #100]	@ (80042f0 <TIM_OC2_SetConfig+0xf8>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d003      	beq.n	8004296 <TIM_OC2_SetConfig+0x9e>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a18      	ldr	r2, [pc, #96]	@ (80042f4 <TIM_OC2_SetConfig+0xfc>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d113      	bne.n	80042be <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	4a17      	ldr	r2, [pc, #92]	@ (80042f8 <TIM_OC2_SetConfig+0x100>)
 800429a:	4013      	ands	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4a16      	ldr	r2, [pc, #88]	@ (80042fc <TIM_OC2_SetConfig+0x104>)
 80042a2:	4013      	ands	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	693a      	ldr	r2, [r7, #16]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	46c0      	nop			@ (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b006      	add	sp, #24
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	feff8fff 	.word	0xfeff8fff
 80042e4:	fffffcff 	.word	0xfffffcff
 80042e8:	40012c00 	.word	0x40012c00
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800
 80042f8:	fffffbff 	.word	0xfffffbff
 80042fc:	fffff7ff 	.word	0xfffff7ff

08004300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b086      	sub	sp, #24
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4a33      	ldr	r2, [pc, #204]	@ (80043e4 <TIM_OC3_SetConfig+0xe4>)
 8004316:	401a      	ands	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a2f      	ldr	r2, [pc, #188]	@ (80043e8 <TIM_OC3_SetConfig+0xe8>)
 800432c:	4013      	ands	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2203      	movs	r2, #3
 8004334:	4393      	bics	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4313      	orrs	r3, r2
 8004340:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4a29      	ldr	r2, [pc, #164]	@ (80043ec <TIM_OC3_SetConfig+0xec>)
 8004346:	4013      	ands	r3, r2
 8004348:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	4313      	orrs	r3, r2
 8004354:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a25      	ldr	r2, [pc, #148]	@ (80043f0 <TIM_OC3_SetConfig+0xf0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d10d      	bne.n	800437a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4a24      	ldr	r2, [pc, #144]	@ (80043f4 <TIM_OC3_SetConfig+0xf4>)
 8004362:	4013      	ands	r3, r2
 8004364:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	4a20      	ldr	r2, [pc, #128]	@ (80043f8 <TIM_OC3_SetConfig+0xf8>)
 8004376:	4013      	ands	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a1c      	ldr	r2, [pc, #112]	@ (80043f0 <TIM_OC3_SetConfig+0xf0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d00b      	beq.n	800439a <TIM_OC3_SetConfig+0x9a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a1d      	ldr	r2, [pc, #116]	@ (80043fc <TIM_OC3_SetConfig+0xfc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d007      	beq.n	800439a <TIM_OC3_SetConfig+0x9a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a1c      	ldr	r2, [pc, #112]	@ (8004400 <TIM_OC3_SetConfig+0x100>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d003      	beq.n	800439a <TIM_OC3_SetConfig+0x9a>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1b      	ldr	r2, [pc, #108]	@ (8004404 <TIM_OC3_SetConfig+0x104>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d113      	bne.n	80043c2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	4a1a      	ldr	r2, [pc, #104]	@ (8004408 <TIM_OC3_SetConfig+0x108>)
 800439e:	4013      	ands	r3, r2
 80043a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	4a19      	ldr	r2, [pc, #100]	@ (800440c <TIM_OC3_SetConfig+0x10c>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	011b      	lsls	r3, r3, #4
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4313      	orrs	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	693a      	ldr	r2, [r7, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	693a      	ldr	r2, [r7, #16]
 80043c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	685a      	ldr	r2, [r3, #4]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	621a      	str	r2, [r3, #32]
}
 80043dc:	46c0      	nop			@ (mov r8, r8)
 80043de:	46bd      	mov	sp, r7
 80043e0:	b006      	add	sp, #24
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	fffffeff 	.word	0xfffffeff
 80043e8:	fffeff8f 	.word	0xfffeff8f
 80043ec:	fffffdff 	.word	0xfffffdff
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	fffff7ff 	.word	0xfffff7ff
 80043f8:	fffffbff 	.word	0xfffffbff
 80043fc:	40014000 	.word	0x40014000
 8004400:	40014400 	.word	0x40014400
 8004404:	40014800 	.word	0x40014800
 8004408:	ffffefff 	.word	0xffffefff
 800440c:	ffffdfff 	.word	0xffffdfff

08004410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	4a26      	ldr	r2, [pc, #152]	@ (80044c0 <TIM_OC4_SetConfig+0xb0>)
 8004426:	401a      	ands	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a22      	ldr	r2, [pc, #136]	@ (80044c4 <TIM_OC4_SetConfig+0xb4>)
 800443c:	4013      	ands	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	4a21      	ldr	r2, [pc, #132]	@ (80044c8 <TIM_OC4_SetConfig+0xb8>)
 8004444:	4013      	ands	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	4a1d      	ldr	r2, [pc, #116]	@ (80044cc <TIM_OC4_SetConfig+0xbc>)
 8004458:	4013      	ands	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a19      	ldr	r2, [pc, #100]	@ (80044d0 <TIM_OC4_SetConfig+0xc0>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d00b      	beq.n	8004488 <TIM_OC4_SetConfig+0x78>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a18      	ldr	r2, [pc, #96]	@ (80044d4 <TIM_OC4_SetConfig+0xc4>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d007      	beq.n	8004488 <TIM_OC4_SetConfig+0x78>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a17      	ldr	r2, [pc, #92]	@ (80044d8 <TIM_OC4_SetConfig+0xc8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_OC4_SetConfig+0x78>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a16      	ldr	r2, [pc, #88]	@ (80044dc <TIM_OC4_SetConfig+0xcc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d109      	bne.n	800449c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	4a15      	ldr	r2, [pc, #84]	@ (80044e0 <TIM_OC4_SetConfig+0xd0>)
 800448c:	4013      	ands	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	019b      	lsls	r3, r3, #6
 8004496:	697a      	ldr	r2, [r7, #20]
 8004498:	4313      	orrs	r3, r2
 800449a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	46bd      	mov	sp, r7
 80044ba:	b006      	add	sp, #24
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	46c0      	nop			@ (mov r8, r8)
 80044c0:	ffffefff 	.word	0xffffefff
 80044c4:	feff8fff 	.word	0xfeff8fff
 80044c8:	fffffcff 	.word	0xfffffcff
 80044cc:	ffffdfff 	.word	0xffffdfff
 80044d0:	40012c00 	.word	0x40012c00
 80044d4:	40014000 	.word	0x40014000
 80044d8:	40014400 	.word	0x40014400
 80044dc:	40014800 	.word	0x40014800
 80044e0:	ffffbfff 	.word	0xffffbfff

080044e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b086      	sub	sp, #24
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	4a23      	ldr	r2, [pc, #140]	@ (8004588 <TIM_OC5_SetConfig+0xa4>)
 80044fa:	401a      	ands	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800450a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	4a1f      	ldr	r2, [pc, #124]	@ (800458c <TIM_OC5_SetConfig+0xa8>)
 8004510:	4013      	ands	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	4313      	orrs	r3, r2
 800451c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4a1b      	ldr	r2, [pc, #108]	@ (8004590 <TIM_OC5_SetConfig+0xac>)
 8004522:	4013      	ands	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	041b      	lsls	r3, r3, #16
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a17      	ldr	r2, [pc, #92]	@ (8004594 <TIM_OC5_SetConfig+0xb0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d00b      	beq.n	8004552 <TIM_OC5_SetConfig+0x6e>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a16      	ldr	r2, [pc, #88]	@ (8004598 <TIM_OC5_SetConfig+0xb4>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d007      	beq.n	8004552 <TIM_OC5_SetConfig+0x6e>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a15      	ldr	r2, [pc, #84]	@ (800459c <TIM_OC5_SetConfig+0xb8>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d003      	beq.n	8004552 <TIM_OC5_SetConfig+0x6e>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a14      	ldr	r2, [pc, #80]	@ (80045a0 <TIM_OC5_SetConfig+0xbc>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d109      	bne.n	8004566 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	4a0c      	ldr	r2, [pc, #48]	@ (8004588 <TIM_OC5_SetConfig+0xa4>)
 8004556:	4013      	ands	r3, r2
 8004558:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	697a      	ldr	r2, [r7, #20]
 8004562:	4313      	orrs	r3, r2
 8004564:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	621a      	str	r2, [r3, #32]
}
 8004580:	46c0      	nop			@ (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b006      	add	sp, #24
 8004586:	bd80      	pop	{r7, pc}
 8004588:	fffeffff 	.word	0xfffeffff
 800458c:	fffeff8f 	.word	0xfffeff8f
 8004590:	fffdffff 	.word	0xfffdffff
 8004594:	40012c00 	.word	0x40012c00
 8004598:	40014000 	.word	0x40014000
 800459c:	40014400 	.word	0x40014400
 80045a0:	40014800 	.word	0x40014800

080045a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	4a24      	ldr	r2, [pc, #144]	@ (800464c <TIM_OC6_SetConfig+0xa8>)
 80045ba:	401a      	ands	r2, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a20      	ldr	r2, [pc, #128]	@ (8004650 <TIM_OC6_SetConfig+0xac>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	021b      	lsls	r3, r3, #8
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	@ (8004654 <TIM_OC6_SetConfig+0xb0>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	051b      	lsls	r3, r3, #20
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a18      	ldr	r2, [pc, #96]	@ (8004658 <TIM_OC6_SetConfig+0xb4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00b      	beq.n	8004614 <TIM_OC6_SetConfig+0x70>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a17      	ldr	r2, [pc, #92]	@ (800465c <TIM_OC6_SetConfig+0xb8>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d007      	beq.n	8004614 <TIM_OC6_SetConfig+0x70>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a16      	ldr	r2, [pc, #88]	@ (8004660 <TIM_OC6_SetConfig+0xbc>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d003      	beq.n	8004614 <TIM_OC6_SetConfig+0x70>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a15      	ldr	r2, [pc, #84]	@ (8004664 <TIM_OC6_SetConfig+0xc0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d109      	bne.n	8004628 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	4a14      	ldr	r2, [pc, #80]	@ (8004668 <TIM_OC6_SetConfig+0xc4>)
 8004618:	4013      	ands	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	029b      	lsls	r3, r3, #10
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68fa      	ldr	r2, [r7, #12]
 8004632:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	685a      	ldr	r2, [r3, #4]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	621a      	str	r2, [r3, #32]
}
 8004642:	46c0      	nop			@ (mov r8, r8)
 8004644:	46bd      	mov	sp, r7
 8004646:	b006      	add	sp, #24
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			@ (mov r8, r8)
 800464c:	ffefffff 	.word	0xffefffff
 8004650:	feff8fff 	.word	0xfeff8fff
 8004654:	ffdfffff 	.word	0xffdfffff
 8004658:	40012c00 	.word	0x40012c00
 800465c:	40014000 	.word	0x40014000
 8004660:	40014400 	.word	0x40014400
 8004664:	40014800 	.word	0x40014800
 8004668:	fffbffff 	.word	0xfffbffff

0800466c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	2201      	movs	r2, #1
 8004684:	4393      	bics	r3, r2
 8004686:	001a      	movs	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	22f0      	movs	r2, #240	@ 0xf0
 8004696:	4393      	bics	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	011b      	lsls	r3, r3, #4
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	220a      	movs	r2, #10
 80046a8:	4393      	bics	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	693a      	ldr	r2, [r7, #16]
 80046b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	46c0      	nop			@ (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b006      	add	sp, #24
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	2210      	movs	r2, #16
 80046e0:	4393      	bics	r3, r2
 80046e2:	001a      	movs	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	699b      	ldr	r3, [r3, #24]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004728 <TIM_TI2_ConfigInputStage+0x60>)
 80046f2:	4013      	ands	r3, r2
 80046f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	031b      	lsls	r3, r3, #12
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	22a0      	movs	r2, #160	@ 0xa0
 8004704:	4393      	bics	r3, r2
 8004706:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	011b      	lsls	r3, r3, #4
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	46c0      	nop			@ (mov r8, r8)
 8004720:	46bd      	mov	sp, r7
 8004722:	b006      	add	sp, #24
 8004724:	bd80      	pop	{r7, pc}
 8004726:	46c0      	nop			@ (mov r8, r8)
 8004728:	ffff0fff 	.word	0xffff0fff

0800472c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a08      	ldr	r2, [pc, #32]	@ (8004760 <TIM_ITRx_SetConfig+0x34>)
 8004740:	4013      	ands	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4313      	orrs	r3, r2
 800474a:	2207      	movs	r2, #7
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	609a      	str	r2, [r3, #8]
}
 8004756:	46c0      	nop			@ (mov r8, r8)
 8004758:	46bd      	mov	sp, r7
 800475a:	b004      	add	sp, #16
 800475c:	bd80      	pop	{r7, pc}
 800475e:	46c0      	nop			@ (mov r8, r8)
 8004760:	ffcfff8f 	.word	0xffcfff8f

08004764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	60b9      	str	r1, [r7, #8]
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	4a09      	ldr	r2, [pc, #36]	@ (80047a0 <TIM_ETR_SetConfig+0x3c>)
 800477c:	4013      	ands	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	021a      	lsls	r2, r3, #8
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	431a      	orrs	r2, r3
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	4313      	orrs	r3, r2
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	609a      	str	r2, [r3, #8]
}
 8004798:	46c0      	nop			@ (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b006      	add	sp, #24
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	ffff00ff 	.word	0xffff00ff

080047a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	221f      	movs	r2, #31
 80047b4:	4013      	ands	r3, r2
 80047b6:	2201      	movs	r2, #1
 80047b8:	409a      	lsls	r2, r3
 80047ba:	0013      	movs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6a1b      	ldr	r3, [r3, #32]
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	43d2      	mvns	r2, r2
 80047c6:	401a      	ands	r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a1a      	ldr	r2, [r3, #32]
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	211f      	movs	r1, #31
 80047d4:	400b      	ands	r3, r1
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4099      	lsls	r1, r3
 80047da:	000b      	movs	r3, r1
 80047dc:	431a      	orrs	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	621a      	str	r2, [r3, #32]
}
 80047e2:	46c0      	nop			@ (mov r8, r8)
 80047e4:	46bd      	mov	sp, r7
 80047e6:	b006      	add	sp, #24
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	223c      	movs	r2, #60	@ 0x3c
 80047fa:	5c9b      	ldrb	r3, [r3, r2]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d101      	bne.n	8004804 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004800:	2302      	movs	r3, #2
 8004802:	e05a      	b.n	80048ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	223c      	movs	r2, #60	@ 0x3c
 8004808:	2101      	movs	r1, #1
 800480a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	223d      	movs	r2, #61	@ 0x3d
 8004810:	2102      	movs	r1, #2
 8004812:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a26      	ldr	r2, [pc, #152]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d108      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	4a25      	ldr	r2, [pc, #148]	@ (80048c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004832:	4013      	ands	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	68fa      	ldr	r2, [r7, #12]
 800483c:	4313      	orrs	r3, r2
 800483e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2270      	movs	r2, #112	@ 0x70
 8004844:	4393      	bics	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	4313      	orrs	r3, r2
 8004850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a19      	ldr	r2, [pc, #100]	@ (80048c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d014      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	2380      	movs	r3, #128	@ 0x80
 800486a:	05db      	lsls	r3, r3, #23
 800486c:	429a      	cmp	r2, r3
 800486e:	d00e      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a15      	ldr	r2, [pc, #84]	@ (80048cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d009      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a14      	ldr	r2, [pc, #80]	@ (80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d004      	beq.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a12      	ldr	r2, [pc, #72]	@ (80048d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d10c      	bne.n	80048a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2280      	movs	r2, #128	@ 0x80
 8004892:	4393      	bics	r3, r2
 8004894:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4313      	orrs	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68ba      	ldr	r2, [r7, #8]
 80048a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	223d      	movs	r2, #61	@ 0x3d
 80048ac:	2101      	movs	r1, #1
 80048ae:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	223c      	movs	r2, #60	@ 0x3c
 80048b4:	2100      	movs	r1, #0
 80048b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	0018      	movs	r0, r3
 80048bc:	46bd      	mov	sp, r7
 80048be:	b004      	add	sp, #16
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	46c0      	nop			@ (mov r8, r8)
 80048c4:	40012c00 	.word	0x40012c00
 80048c8:	ff0fffff 	.word	0xff0fffff
 80048cc:	40000400 	.word	0x40000400
 80048d0:	40000800 	.word	0x40000800
 80048d4:	40014000 	.word	0x40014000

080048d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e0:	46c0      	nop			@ (mov r8, r8)
 80048e2:	46bd      	mov	sp, r7
 80048e4:	b002      	add	sp, #8
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048f0:	46c0      	nop			@ (mov r8, r8)
 80048f2:	46bd      	mov	sp, r7
 80048f4:	b002      	add	sp, #8
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004900:	46c0      	nop			@ (mov r8, r8)
 8004902:	46bd      	mov	sp, r7
 8004904:	b002      	add	sp, #8
 8004906:	bd80      	pop	{r7, pc}

08004908 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	435b      	muls	r3, r3
 800491c:	001a      	movs	r2, r3
 800491e:	0013      	movs	r3, r2
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	189b      	adds	r3, r3, r2
 8004924:	43db      	mvns	r3, r3
 8004926:	400b      	ands	r3, r1
 8004928:	001a      	movs	r2, r3
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	435b      	muls	r3, r3
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	434b      	muls	r3, r1
 8004932:	431a      	orrs	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	601a      	str	r2, [r3, #0]
}
 8004938:	46c0      	nop			@ (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b004      	add	sp, #16
 800493e:	bd80      	pop	{r7, pc}

08004940 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	43d2      	mvns	r2, r2
 8004954:	401a      	ands	r2, r3
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	434b      	muls	r3, r1
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	605a      	str	r2, [r3, #4]
}
 8004962:	46c0      	nop			@ (mov r8, r8)
 8004964:	46bd      	mov	sp, r7
 8004966:	b004      	add	sp, #16
 8004968:	bd80      	pop	{r7, pc}

0800496a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800496a:	b580      	push	{r7, lr}
 800496c:	b084      	sub	sp, #16
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6899      	ldr	r1, [r3, #8]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	435b      	muls	r3, r3
 800497e:	001a      	movs	r2, r3
 8004980:	0013      	movs	r3, r2
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	189b      	adds	r3, r3, r2
 8004986:	43db      	mvns	r3, r3
 8004988:	400b      	ands	r3, r1
 800498a:	001a      	movs	r2, r3
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	435b      	muls	r3, r3
 8004990:	6879      	ldr	r1, [r7, #4]
 8004992:	434b      	muls	r3, r1
 8004994:	431a      	orrs	r2, r3
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	609a      	str	r2, [r3, #8]
}
 800499a:	46c0      	nop			@ (mov r8, r8)
 800499c:	46bd      	mov	sp, r7
 800499e:	b004      	add	sp, #16
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b084      	sub	sp, #16
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	68d9      	ldr	r1, [r3, #12]
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	435b      	muls	r3, r3
 80049b6:	001a      	movs	r2, r3
 80049b8:	0013      	movs	r3, r2
 80049ba:	005b      	lsls	r3, r3, #1
 80049bc:	189b      	adds	r3, r3, r2
 80049be:	43db      	mvns	r3, r3
 80049c0:	400b      	ands	r3, r1
 80049c2:	001a      	movs	r2, r3
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	435b      	muls	r3, r3
 80049c8:	6879      	ldr	r1, [r7, #4]
 80049ca:	434b      	muls	r3, r1
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	60da      	str	r2, [r3, #12]
}
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}

080049da <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a19      	ldr	r1, [r3, #32]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	435b      	muls	r3, r3
 80049ee:	68ba      	ldr	r2, [r7, #8]
 80049f0:	4353      	muls	r3, r2
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	435a      	muls	r2, r3
 80049f6:	0013      	movs	r3, r2
 80049f8:	011b      	lsls	r3, r3, #4
 80049fa:	1a9b      	subs	r3, r3, r2
 80049fc:	43db      	mvns	r3, r3
 80049fe:	400b      	ands	r3, r1
 8004a00:	001a      	movs	r2, r3
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	435b      	muls	r3, r3
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	434b      	muls	r3, r1
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	434b      	muls	r3, r1
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	434b      	muls	r3, r1
 8004a12:	431a      	orrs	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8004a18:	46c0      	nop			@ (mov r8, r8)
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b004      	add	sp, #16
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_6
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	0a1b      	lsrs	r3, r3, #8
 8004a34:	68ba      	ldr	r2, [r7, #8]
 8004a36:	0a12      	lsrs	r2, r2, #8
 8004a38:	4353      	muls	r3, r2
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	0a12      	lsrs	r2, r2, #8
 8004a3e:	4353      	muls	r3, r2
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	0a12      	lsrs	r2, r2, #8
 8004a44:	435a      	muls	r2, r3
 8004a46:	0013      	movs	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	400b      	ands	r3, r1
 8004a50:	001a      	movs	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	0a1b      	lsrs	r3, r3, #8
 8004a56:	68b9      	ldr	r1, [r7, #8]
 8004a58:	0a09      	lsrs	r1, r1, #8
 8004a5a:	434b      	muls	r3, r1
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	0a09      	lsrs	r1, r1, #8
 8004a60:	434b      	muls	r3, r1
 8004a62:	68b9      	ldr	r1, [r7, #8]
 8004a64:	0a09      	lsrs	r1, r1, #8
 8004a66:	434b      	muls	r3, r1
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	434b      	muls	r3, r1
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	@ 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8004a72:	46c0      	nop			@ (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	b004      	add	sp, #16
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8004a84:	2300      	movs	r3, #0
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004a88:	e047      	b.n	8004b1a <LL_GPIO_Init+0xa0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2101      	movs	r1, #1
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4091      	lsls	r1, r2
 8004a94:	000a      	movs	r2, r1
 8004a96:	4013      	ands	r3, r2
 8004a98:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d039      	beq.n	8004b14 <LL_GPIO_Init+0x9a>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d003      	beq.n	8004ab0 <LL_GPIO_Init+0x36>
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d10d      	bne.n	8004acc <LL_GPIO_Init+0x52>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f7ff ff56 	bl	800496a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	68b9      	ldr	r1, [r7, #8]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f7ff ff3a 	bl	8004940 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	691a      	ldr	r2, [r3, #16]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f7ff ff64 	bl	80049a2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d111      	bne.n	8004b06 <LL_GPIO_Init+0x8c>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2bff      	cmp	r3, #255	@ 0xff
 8004ae6:	d807      	bhi.n	8004af8 <LL_GPIO_Init+0x7e>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	0018      	movs	r0, r3
 8004af2:	f7ff ff72 	bl	80049da <LL_GPIO_SetAFPin_0_7>
 8004af6:	e006      	b.n	8004b06 <LL_GPIO_Init+0x8c>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff ff8d 	bl	8004a20 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	685a      	ldr	r2, [r3, #4]
 8004b0a:	68b9      	ldr	r1, [r7, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	0018      	movs	r0, r3
 8004b10:	f7ff fefa 	bl	8004908 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	40da      	lsrs	r2, r3
 8004b22:	1e13      	subs	r3, r2, #0
 8004b24:	d1b1      	bne.n	8004a8a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	0018      	movs	r0, r3
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	b004      	add	sp, #16
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <memset>:
 8004b30:	0003      	movs	r3, r0
 8004b32:	1882      	adds	r2, r0, r2
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d100      	bne.n	8004b3a <memset+0xa>
 8004b38:	4770      	bx	lr
 8004b3a:	7019      	strb	r1, [r3, #0]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	e7f9      	b.n	8004b34 <memset+0x4>

08004b40 <__libc_init_array>:
 8004b40:	b570      	push	{r4, r5, r6, lr}
 8004b42:	2600      	movs	r6, #0
 8004b44:	4c0c      	ldr	r4, [pc, #48]	@ (8004b78 <__libc_init_array+0x38>)
 8004b46:	4d0d      	ldr	r5, [pc, #52]	@ (8004b7c <__libc_init_array+0x3c>)
 8004b48:	1b64      	subs	r4, r4, r5
 8004b4a:	10a4      	asrs	r4, r4, #2
 8004b4c:	42a6      	cmp	r6, r4
 8004b4e:	d109      	bne.n	8004b64 <__libc_init_array+0x24>
 8004b50:	2600      	movs	r6, #0
 8004b52:	f000 f819 	bl	8004b88 <_init>
 8004b56:	4c0a      	ldr	r4, [pc, #40]	@ (8004b80 <__libc_init_array+0x40>)
 8004b58:	4d0a      	ldr	r5, [pc, #40]	@ (8004b84 <__libc_init_array+0x44>)
 8004b5a:	1b64      	subs	r4, r4, r5
 8004b5c:	10a4      	asrs	r4, r4, #2
 8004b5e:	42a6      	cmp	r6, r4
 8004b60:	d105      	bne.n	8004b6e <__libc_init_array+0x2e>
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
 8004b64:	00b3      	lsls	r3, r6, #2
 8004b66:	58eb      	ldr	r3, [r5, r3]
 8004b68:	4798      	blx	r3
 8004b6a:	3601      	adds	r6, #1
 8004b6c:	e7ee      	b.n	8004b4c <__libc_init_array+0xc>
 8004b6e:	00b3      	lsls	r3, r6, #2
 8004b70:	58eb      	ldr	r3, [r5, r3]
 8004b72:	4798      	blx	r3
 8004b74:	3601      	adds	r6, #1
 8004b76:	e7f2      	b.n	8004b5e <__libc_init_array+0x1e>
 8004b78:	08004c34 	.word	0x08004c34
 8004b7c:	08004c34 	.word	0x08004c34
 8004b80:	08004c38 	.word	0x08004c38
 8004b84:	08004c34 	.word	0x08004c34

08004b88 <_init>:
 8004b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8a:	46c0      	nop			@ (mov r8, r8)
 8004b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b8e:	bc08      	pop	{r3}
 8004b90:	469e      	mov	lr, r3
 8004b92:	4770      	bx	lr

08004b94 <_fini>:
 8004b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b96:	46c0      	nop			@ (mov r8, r8)
 8004b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9a:	bc08      	pop	{r3}
 8004b9c:	469e      	mov	lr, r3
 8004b9e:	4770      	bx	lr
